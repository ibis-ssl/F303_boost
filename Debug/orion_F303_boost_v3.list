
orion_F303_boost_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08009de0  08009de0  00019de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a264  0800a264  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a264  0800a264  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a264  0800a264  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000003e8  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005c4  200005c4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016566  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ea  00000000  00000000  00036772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00039960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001168  00000000  00000000  0003ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021572  00000000  00000000  0003bd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d1c  00000000  00000000  0005d30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c65a3  00000000  00000000  00077026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d5c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f20  00000000  00000000  0013d61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dc4 	.word	0x08009dc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009dc4 	.word	0x08009dc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2228      	movs	r2, #40	; 0x28
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f006 fafd 	bl	80071c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd4:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bda:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bee:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf4:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c14:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c16:	f001 fa83 	bl	8002120 <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 fdab 	bl	800177a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c30:	f002 f8f4 	bl	8002e1c <HAL_ADCEx_MultiModeConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000c3a:	f000 fd9e 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c56:	2301      	movs	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c7a:	f001 fd47 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 fd79 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c96:	f001 fd39 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ca0:	f000 fd6b 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000cb2:	f001 fd2b 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000cbc:	f000 fd5d 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001f8 	.word	0x200001f8

08000ccc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2228      	movs	r2, #40	; 0x28
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 fa6b 	bl	80071c0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cec:	4a40      	ldr	r2, [pc, #256]	; (8000df0 <MX_ADC3_Init+0x124>)
 8000cee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cfc:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d36:	482d      	ldr	r0, [pc, #180]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d38:	f001 f9f2 	bl	8002120 <HAL_ADC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8000d42:	f000 fd1a 	bl	800177a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4826      	ldr	r0, [pc, #152]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d52:	f002 f863 	bl	8002e1c <HAL_ADCEx_MultiModeConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f000 fd0d 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000d70:	2306      	movs	r3, #6
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d9c:	f001 fcb6 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000da6:	f000 fce8 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000daa:	2305      	movs	r3, #5
 8000dac:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_ADC3_Init+0x120>)
 8000db8:	f001 fca8 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8000dc2:	f000 fcda 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_ADC3_Init+0x120>)
 8000dd4:	f001 fc9a 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8000dde:	f000 fccc 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000248 	.word	0x20000248
 8000df0:	50000400 	.word	0x50000400

08000df4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2228      	movs	r2, #40	; 0x28
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 f9dd 	bl	80071c0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <MX_ADC4_Init+0xdc>)
 8000e0a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e54:	f001 f964 	bl	8002120 <HAL_ADC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC4_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 fc8c 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e62:	2303      	movs	r3, #3
 8000e64:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e72:	2306      	movs	r3, #6
 8000e74:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e98:	f001 fc38 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC4_Init+0xb2>
  {
    Error_Handler();
 8000ea2:	f000 fc6a 	bl	800177a <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000eb4:	f001 fc2a 	bl	800270c <HAL_ADCEx_InjectedConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000ebe:	f000 fc5c 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000298 	.word	0x20000298
 8000ed0:	50000500 	.word	0x50000500

08000ed4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef4:	d14d      	bne.n	8000f92 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b85      	ldr	r3, [pc, #532]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a84      	ldr	r2, [pc, #528]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b82      	ldr	r3, [pc, #520]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a7e      	ldr	r2, [pc, #504]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b7c      	ldr	r3, [pc, #496]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f26:	2307      	movs	r3, #7
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f002 fc5e 	bl	80037fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f40:	4b73      	ldr	r3, [pc, #460]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f42:	4a74      	ldr	r2, [pc, #464]	; (8001114 <HAL_ADC_MspInit+0x240>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4c:	4b70      	ldr	r3, [pc, #448]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f52:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f58:	4b6d      	ldr	r3, [pc, #436]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f68:	4b69      	ldr	r3, [pc, #420]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f74:	4866      	ldr	r0, [pc, #408]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f76:	f002 fb1a 	bl	80035ae <HAL_DMA_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000f80:	f000 fbfb 	bl	800177a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a62      	ldr	r2, [pc, #392]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8a:	4a61      	ldr	r2, [pc, #388]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000f90:	e0b7      	b.n	8001102 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <HAL_ADC_MspInit+0x244>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d157      	bne.n	800104c <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a5e      	ldr	r2, [pc, #376]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000fa4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10b      	bne.n	8000fc6 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b51      	ldr	r3, [pc, #324]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a50      	ldr	r2, [pc, #320]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BOOST_V_Pin|BATT_CS_Pin|TEMP_COIL_1_Pin;
 8000fde:	f242 0303 	movw	r3, #8195	; 0x2003
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	484b      	ldr	r0, [pc, #300]	; (8001120 <HAL_ADC_MspInit+0x24c>)
 8000ff4:	f002 fc02 	bl	80037fc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8000ffa:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_ADC_MspInit+0x254>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001004:	4b47      	ldr	r3, [pc, #284]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_ADC_MspInit+0x250>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001010:	4b44      	ldr	r3, [pc, #272]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001016:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001018:	4b42      	ldr	r3, [pc, #264]	; (8001124 <HAL_ADC_MspInit+0x250>)
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001022:	2220      	movs	r2, #32
 8001024:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800102e:	483d      	ldr	r0, [pc, #244]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001030:	f002 fabd 	bl	80035ae <HAL_DMA_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 800103a:	f000 fb9e 	bl	800177a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a38      	ldr	r2, [pc, #224]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
 8001044:	4a37      	ldr	r2, [pc, #220]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6253      	str	r3, [r2, #36]	; 0x24
}
 800104a:	e05a      	b.n	8001102 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a36      	ldr	r2, [pc, #216]	; (800112c <HAL_ADC_MspInit+0x258>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d155      	bne.n	8001102 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_ADC_MspInit+0x248>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a2f      	ldr	r2, [pc, #188]	; (800111c <HAL_ADC_MspInit+0x248>)
 800105e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_ADC_MspInit+0x248>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d10b      	bne.n	8001080 <HAL_ADC_MspInit+0x1ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_ADC_MspInit+0x238>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <HAL_ADC_MspInit+0x238>)
 800106e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001072:	6153      	str	r3, [r2, #20]
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108a:	6153      	str	r3, [r2, #20]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_ADC_MspInit+0x238>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_FET_Pin|TEMP_COIL_2_Pin;
 8001098:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	481c      	ldr	r0, [pc, #112]	; (8001120 <HAL_ADC_MspInit+0x24c>)
 80010ae:	f002 fba5 	bl	80037fc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010b4:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_ADC_MspInit+0x260>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010dc:	2220      	movs	r2, #32
 80010de:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80010e6:	4812      	ldr	r0, [pc, #72]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010e8:	f002 fa61 	bl	80035ae <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 80010f2:	f000 fb42 	bl	800177a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
 80010fc:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	200002e8 	.word	0x200002e8
 8001114:	40020008 	.word	0x40020008
 8001118:	50000400 	.word	0x50000400
 800111c:	200003b4 	.word	0x200003b4
 8001120:	48000400 	.word	0x48000400
 8001124:	2000032c 	.word	0x2000032c
 8001128:	40020458 	.word	0x40020458
 800112c:	50000500 	.word	0x50000500
 8001130:	20000370 	.word	0x20000370
 8001134:	4002041c 	.word	0x4002041c

08001138 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_CAN_Init+0x64>)
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <MX_CAN_Init+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_CAN_Init+0x64>)
 8001144:	2202      	movs	r2, #2
 8001146:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_CAN_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_CAN_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_CAN_Init+0x64>)
 8001156:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800115a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_CAN_Init+0x64>)
 800115e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001162:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_CAN_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_CAN_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_CAN_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_CAN_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <MX_CAN_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_CAN_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_CAN_Init+0x64>)
 800118a:	f002 f803 	bl	8003194 <HAL_CAN_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001194:	f000 faf1 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200003b8 	.word	0x200003b8
 80011a0:	40006400 	.word	0x40006400

080011a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_CAN_MspInit+0x80>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d129      	bne.n	800121a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_CAN_MspInit+0x84>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_CAN_MspInit+0x84>)
 80011cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_CAN_MspInit+0x84>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_CAN_MspInit+0x84>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_CAN_MspInit+0x84>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_CAN_MspInit+0x84>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001208:	2309      	movs	r3, #9
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f002 faf1 	bl	80037fc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40006400 	.word	0x40006400
 8001228:	40021000 	.word	0x40021000

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_DMA_Init+0x70>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <MX_DMA_Init+0x70>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6153      	str	r3, [r2, #20]
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_DMA_Init+0x70>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_DMA_Init+0x70>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <MX_DMA_Init+0x70>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_DMA_Init+0x70>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	200b      	movs	r0, #11
 8001268:	f002 f96b 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800126c:	200b      	movs	r0, #11
 800126e:	f002 f984 	bl	800357a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2039      	movs	r0, #57	; 0x39
 8001278:	f002 f963 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800127c:	2039      	movs	r0, #57	; 0x39
 800127e:	f002 f97c 	bl	800357a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	203c      	movs	r0, #60	; 0x3c
 8001288:	f002 f95b 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800128c:	203c      	movs	r0, #60	; 0x3c
 800128e:	f002 f974 	bl	800357a <HAL_NVIC_EnableIRQ>

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a39      	ldr	r2, [pc, #228]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	6153      	str	r3, [r2, #20]
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_GPIO_Init+0x118>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a2d      	ldr	r2, [pc, #180]	; (80013b8 <MX_GPIO_Init+0x118>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_GPIO_Init+0x118>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800131c:	4827      	ldr	r0, [pc, #156]	; (80013bc <MX_GPIO_Init+0x11c>)
 800131e:	f002 fbe7 	bl	8003af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CURRENT_Pin|MOUSE_NSS_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f248 0110 	movw	r1, #32784	; 0x8010
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f002 fbe0 	bl	8003af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POWER_SW_EN_Pin|MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2144      	movs	r1, #68	; 0x44
 8001334:	4822      	ldr	r0, [pc, #136]	; (80013c0 <MX_GPIO_Init+0x120>)
 8001336:	f002 fbdb 	bl	8003af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 800133a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	481a      	ldr	r0, [pc, #104]	; (80013bc <MX_GPIO_Init+0x11c>)
 8001354:	f002 fa52 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_CURRENT_Pin|MOUSE_NSS_Pin;
 8001358:	f248 0310 	movw	r3, #32784	; 0x8010
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f002 fa42 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_SW_EN_Pin|MOUSE_RST_Pin;
 8001378:	2344      	movs	r3, #68	; 0x44
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_GPIO_Init+0x120>)
 8001390:	f002 fa34 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8001394:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_GPIO_Init+0x120>)
 80013aa:	f002 fa27 	bl	80037fc <HAL_GPIO_Init>

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000800 	.word	0x48000800
 80013c0:	48000400 	.word	0x48000400

080013c4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif

void __io_putchar(uint8_t ch)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80013ce:	1df9      	adds	r1, r7, #7
 80013d0:	2301      	movs	r3, #1
 80013d2:	2201      	movs	r2, #1
 80013d4:	4803      	ldr	r0, [pc, #12]	; (80013e4 <__io_putchar+0x20>)
 80013d6:	f005 faaf 	bl	8006938 <HAL_UART_Transmit>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000052c 	.word	0x2000052c

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ee:	f000 fe0d 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f2:	f000 f961 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f6:	f7ff ff53 	bl	80012a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fa:	f7ff ff17 	bl	800122c <MX_DMA_Init>
  MX_ADC1_Init();
 80013fe:	f7ff fbd3 	bl	8000ba8 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001402:	f7ff fc63 	bl	8000ccc <MX_ADC3_Init>
  MX_ADC4_Init();
 8001406:	f7ff fcf5 	bl	8000df4 <MX_ADC4_Init>
  MX_CAN_Init();
 800140a:	f7ff fe95 	bl	8001138 <MX_CAN_Init>
  MX_SPI1_Init();
 800140e:	f000 f9b9 	bl	8001784 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001412:	f000 fb7d 	bl	8001b10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001416:	f000 fbd5 	bl	8001bc4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800141a:	f000 fd59 	bl	8001ed0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800141e:	f000 fc37 	bl	8001c90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



  //kick
  HAL_TIM_PWM_Init(&htim3);
 8001422:	4895      	ldr	r0, [pc, #596]	; (8001678 <main+0x290>)
 8001424:	f004 fbc2 	bl	8005bac <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001428:	4b93      	ldr	r3, [pc, #588]	; (8001678 <main+0x290>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001430:	4b91      	ldr	r3, [pc, #580]	; (8001678 <main+0x290>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2200      	movs	r2, #0
 8001436:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim3, 2000);
 8001438:	4b8f      	ldr	r3, [pc, #572]	; (8001678 <main+0x290>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
 8001442:	4b8d      	ldr	r3, [pc, #564]	; (8001678 <main+0x290>)
 8001444:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001448:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim3, 2000);
 800144a:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <main+0x290>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <main+0x290>)
 8001456:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800145a:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800145c:	2100      	movs	r1, #0
 800145e:	4886      	ldr	r0, [pc, #536]	; (8001678 <main+0x290>)
 8001460:	f004 fbfc 	bl	8005c5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001464:	2104      	movs	r1, #4
 8001466:	4884      	ldr	r0, [pc, #528]	; (8001678 <main+0x290>)
 8001468:	f004 fbf8 	bl	8005c5c <HAL_TIM_PWM_Start>

  // boost
  HAL_TIM_PWM_Init(&htim2);
 800146c:	4883      	ldr	r0, [pc, #524]	; (800167c <main+0x294>)
 800146e:	f004 fb9d 	bl	8005bac <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001472:	4b82      	ldr	r3, [pc, #520]	; (800167c <main+0x294>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 800147a:	4b80      	ldr	r3, [pc, #512]	; (800167c <main+0x294>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
 8001484:	4b7d      	ldr	r3, [pc, #500]	; (800167c <main+0x294>)
 8001486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800148a:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800148c:	210c      	movs	r1, #12
 800148e:	487b      	ldr	r0, [pc, #492]	; (800167c <main+0x294>)
 8001490:	f004 fbe4 	bl	8005c5c <HAL_TIM_PWM_Start>

  // GD negative PS
  HAL_TIM_PWM_Init(&htim4);
 8001494:	487a      	ldr	r0, [pc, #488]	; (8001680 <main+0x298>)
 8001496:	f004 fb89 	bl	8005bac <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
 800149a:	4b79      	ldr	r3, [pc, #484]	; (8001680 <main+0x298>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim4, 2000);
 80014a4:	4b76      	ldr	r3, [pc, #472]	; (8001680 <main+0x298>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ae:	4b74      	ldr	r3, [pc, #464]	; (8001680 <main+0x298>)
 80014b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014b4:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014b6:	2104      	movs	r1, #4
 80014b8:	4871      	ldr	r0, [pc, #452]	; (8001680 <main+0x298>)
 80014ba:	f004 fbcf 	bl	8005c5c <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 80014be:	2064      	movs	r0, #100	; 0x64
 80014c0:	f000 fe0a 	bl	80020d8 <HAL_Delay>
  //wait charging



  setbuf(stdout, NULL);
 80014c4:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <main+0x29c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f006 fb01 	bl	8007ad4 <setbuf>

  HAL_UART_Init(&huart1);
 80014d2:	486d      	ldr	r0, [pc, #436]	; (8001688 <main+0x2a0>)
 80014d4:	f005 f9e2 	bl	800689c <HAL_UART_Init>

  uint8_t data[] = "orion boost v1 start!!\n";
 80014d8:	4b6c      	ldr	r3, [pc, #432]	; (800168c <main+0x2a4>)
 80014da:	f107 0420 	add.w	r4, r7, #32
 80014de:	461d      	mov	r5, r3
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014e8:	e884 0003 	stmia.w	r4, {r0, r1}

  HAL_UART_Transmit(&huart1, data, sizeof(data), 100);
 80014ec:	f107 0120 	add.w	r1, r7, #32
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	2218      	movs	r2, #24
 80014f4:	4864      	ldr	r0, [pc, #400]	; (8001688 <main+0x2a0>)
 80014f6:	f005 fa1f 	bl	8006938 <HAL_UART_Transmit>
  printf("hogehoge %d ,%f\n", 10, 1.0);
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b64      	ldr	r3, [pc, #400]	; (8001690 <main+0x2a8>)
 8001500:	210a      	movs	r1, #10
 8001502:	4864      	ldr	r0, [pc, #400]	; (8001694 <main+0x2ac>)
 8001504:	f006 face 	bl	8007aa4 <iprintf>

  static uint32_t loop_cnt = 0, kick_cnt = 0;
  float boost_v = 0,batt_v,gd_16p,gd_16m,batt_cs;
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	647b      	str	r3, [r7, #68]	; 0x44
  int temp_coil_1,temp_coil_2,temp_fet;
  int boost_cnt = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	643b      	str	r3, [r7, #64]	; 0x40


  HAL_ADC_Start(&hadc1);
 8001512:	4861      	ldr	r0, [pc, #388]	; (8001698 <main+0x2b0>)
 8001514:	f000 ffe4 	bl	80024e0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8001518:	4860      	ldr	r0, [pc, #384]	; (800169c <main+0x2b4>)
 800151a:	f000 ffe1 	bl	80024e0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 800151e:	4860      	ldr	r0, [pc, #384]	; (80016a0 <main+0x2b8>)
 8001520:	f000 ffde 	bl	80024e0 <HAL_ADC_Start>

  HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2104      	movs	r1, #4
 8001528:	485e      	ldr	r0, [pc, #376]	; (80016a4 <main+0x2bc>)
 800152a:	f002 fae1 	bl	8003af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2110      	movs	r1, #16
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f002 fadb 	bl	8003af0 <HAL_GPIO_WritePin>


  uint8_t sbuf[16] = {0}, rbuf[16] = {0};
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]

  HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 8001558:	463a      	mov	r2, r7
 800155a:	f107 0110 	add.w	r1, r7, #16
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	4850      	ldr	r0, [pc, #320]	; (80016a8 <main+0x2c0>)
 8001568:	f003 ffa9 	bl	80054be <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f002 fabb 	bl	8003af0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 fdac 	bl	80020d8 <HAL_Delay>

  HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2140      	movs	r1, #64	; 0x40
 8001584:	4847      	ldr	r0, [pc, #284]	; (80016a4 <main+0x2bc>)
 8001586:	f002 fab3 	bl	8003af0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fda4 	bl	80020d8 <HAL_Delay>
  HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	4843      	ldr	r0, [pc, #268]	; (80016a4 <main+0x2bc>)
 8001596:	f002 faab 	bl	8003af0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f000 fd9c 	bl	80020d8 <HAL_Delay>

  HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f002 faa1 	bl	8003af0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 80015ae:	463a      	mov	r2, r7
 80015b0:	f107 0110 	add.w	r1, r7, #16
 80015b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2302      	movs	r3, #2
 80015bc:	483a      	ldr	r0, [pc, #232]	; (80016a8 <main+0x2c0>)
 80015be:	f003 ff7e 	bl	80054be <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f002 fa90 	bl	8003af0 <HAL_GPIO_WritePin>

  printf("SPI ID : %d\n",rbuf[1]);
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4835      	ldr	r0, [pc, #212]	; (80016ac <main+0x2c4>)
 80015d6:	f006 fa65 	bl	8007aa4 <iprintf>


  HAL_Delay(10);
 80015da:	200a      	movs	r0, #10
 80015dc:	f000 fd7c 	bl	80020d8 <HAL_Delay>

	  HAL_Delay(100);
  }*/


  sbuf[0] = 0x50;	//motion burst
 80015e0:	2350      	movs	r3, #80	; 0x50
 80015e2:	743b      	strb	r3, [r7, #16]
  int pos_x = 0,pos_y = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80015e8:	2300      	movs	r3, #0
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(1){

	  HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f002 fa7b 	bl	8003af0 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 5, 1000);
 80015fa:	463a      	mov	r2, r7
 80015fc:	f107 0110 	add.w	r1, r7, #16
 8001600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2305      	movs	r3, #5
 8001608:	4827      	ldr	r0, [pc, #156]	; (80016a8 <main+0x2c0>)
 800160a:	f003 ff58 	bl	80054be <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f002 fa6a 	bl	8003af0 <HAL_GPIO_WritePin>

	  printf("%5d %5d %5d %5d %5d - ",rbuf[0],rbuf[1],rbuf[2],rbuf[3],rbuf[4]);
 800161c:	783b      	ldrb	r3, [r7, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	4618      	mov	r0, r3
 8001624:	78bb      	ldrb	r3, [r7, #2]
 8001626:	461c      	mov	r4, r3
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	793a      	ldrb	r2, [r7, #4]
 800162c:	9201      	str	r2, [sp, #4]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4623      	mov	r3, r4
 8001632:	4602      	mov	r2, r0
 8001634:	481e      	ldr	r0, [pc, #120]	; (80016b0 <main+0x2c8>)
 8001636:	f006 fa35 	bl	8007aa4 <iprintf>
	  if(rbuf[1] & 0x80){
 800163a:	787b      	ldrb	r3, [r7, #1]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	da0b      	bge.n	800165a <main+0x272>
		  pos_x += (int8_t)rbuf[2];
 8001642:	78bb      	ldrb	r3, [r7, #2]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164a:	4413      	add	r3, r2
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
		  pos_y += (int8_t)rbuf[3];
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	b25b      	sxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001656:	4413      	add	r3, r2
 8001658:	63fb      	str	r3, [r7, #60]	; 0x3c
	  }
	  printf("%2x x %+5d y %+5d q %4d\n",rbuf[0],pos_x,pos_y,(int8_t)rbuf[4]);
 800165a:	783b      	ldrb	r3, [r7, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	793b      	ldrb	r3, [r7, #4]
 8001660:	b25b      	sxtb	r3, r3
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <main+0x2cc>)
 800166a:	f006 fa1b 	bl	8007aa4 <iprintf>

	  HAL_Delay(100);
 800166e:	2064      	movs	r0, #100	; 0x64
 8001670:	f000 fd32 	bl	80020d8 <HAL_Delay>
	  HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 8001674:	e7ba      	b.n	80015ec <main+0x204>
 8001676:	bf00      	nop
 8001678:	20000494 	.word	0x20000494
 800167c:	20000448 	.word	0x20000448
 8001680:	200004e0 	.word	0x200004e0
 8001684:	2000000c 	.word	0x2000000c
 8001688:	2000052c 	.word	0x2000052c
 800168c:	08009e38 	.word	0x08009e38
 8001690:	3ff00000 	.word	0x3ff00000
 8001694:	08009de0 	.word	0x08009de0
 8001698:	200001f8 	.word	0x200001f8
 800169c:	20000248 	.word	0x20000248
 80016a0:	20000298 	.word	0x20000298
 80016a4:	48000400 	.word	0x48000400
 80016a8:	200003e0 	.word	0x200003e0
 80016ac:	08009df4 	.word	0x08009df4
 80016b0:	08009e04 	.word	0x08009e04
 80016b4:	08009e1c 	.word	0x08009e1c

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b09e      	sub	sp, #120	; 0x78
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016c2:	2228      	movs	r2, #40	; 0x28
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 fd7a 	bl	80071c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	223c      	movs	r2, #60	; 0x3c
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 fd6c 	bl	80071c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f6:	2301      	movs	r3, #1
 80016f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001702:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001704:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001708:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fa06 	bl	8003b20 <HAL_RCC_OscConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800171a:	f000 f82e 	bl	800177a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171e:	230f      	movs	r3, #15
 8001720:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001722:	2302      	movs	r3, #2
 8001724:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001734:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fa2e 	bl	8004b9c <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001746:	f000 f818 	bl	800177a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 800174a:	f240 1381 	movw	r3, #385	; 0x181
 800174e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800175a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	463b      	mov	r3, r7
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fc50 	bl	8005008 <HAL_RCCEx_PeriphCLKConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800176e:	f000 f804 	bl	800177a <Error_Handler>
  }
}
 8001772:	bf00      	nop
 8001774:	3778      	adds	r7, #120	; 0x78
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177e:	b672      	cpsid	i
}
 8001780:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001782:	e7fe      	b.n	8001782 <Error_Handler+0x8>

08001784 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_SPI1_Init+0x74>)
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <MX_SPI1_Init+0x78>)
 800178c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_SPI1_Init+0x74>)
 8001790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_SPI1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_SPI1_Init+0x74>)
 800179e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017a6:	2202      	movs	r2, #2
 80017a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017ba:	2228      	movs	r2, #40	; 0x28
 80017bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017d2:	2207      	movs	r2, #7
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_SPI1_Init+0x74>)
 80017e4:	f003 fdc0 	bl	8005368 <HAL_SPI_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017ee:	f7ff ffc4 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200003e0 	.word	0x200003e0
 80017fc:	40013000 	.word	0x40013000

08001800 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a17      	ldr	r2, [pc, #92]	; (800187c <HAL_SPI_MspInit+0x7c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d127      	bne.n	8001872 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182c:	6193      	str	r3, [r2, #24]
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x80>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_SPI_MspInit+0x80>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001852:	2338      	movs	r3, #56	; 0x38
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001862:	2305      	movs	r3, #5
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_SPI_MspInit+0x84>)
 800186e:	f001 ffc5 	bl	80037fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40013000 	.word	0x40013000
 8001880:	40021000 	.word	0x40021000
 8001884:	48000400 	.word	0x48000400

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_MspInit+0x44>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_MspInit+0x44>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6193      	str	r3, [r2, #24]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_MspInit+0x44>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_MspInit+0x44>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_MspInit+0x44>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_MspInit+0x44>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <NMI_Handler+0x4>

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler+0x4>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191c:	f000 fbbc 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <DMA1_Channel1_IRQHandler+0x10>)
 800192a:	f001 fe87 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002e8 	.word	0x200002e8

08001938 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <DMA2_Channel2_IRQHandler+0x10>)
 800193e:	f001 fe7d 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000370 	.word	0x20000370

0800194c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <DMA2_Channel5_IRQHandler+0x10>)
 8001952:	f001 fe73 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000032c 	.word	0x2000032c

08001960 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	return 1;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_kill>:

int _kill(int pid, int sig)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800197a:	f005 fbf7 	bl	800716c <__errno>
 800197e:	4603      	mov	r3, r0
 8001980:	2216      	movs	r2, #22
 8001982:	601a      	str	r2, [r3, #0]
	return -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_exit>:

void _exit (int status)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ffe7 	bl	8001970 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019a2:	e7fe      	b.n	80019a2 <_exit+0x12>

080019a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e00a      	b.n	80019cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019b6:	f3af 8000 	nop.w
 80019ba:	4601      	mov	r1, r0
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	b2ca      	uxtb	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbf0      	blt.n	80019b6 <_read+0x12>
	}

return len;
 80019d4:	687b      	ldr	r3, [r7, #4]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e009      	b.n	8001a04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fce3 	bl	80013c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf1      	blt.n	80019f0 <_write+0x12>
	}
	return len;
 8001a0c:	687b      	ldr	r3, [r7, #4]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_close>:

int _close(int file)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_isatty>:

int _isatty(int file)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	return 1;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a88:	4a14      	ldr	r2, [pc, #80]	; (8001adc <_sbrk+0x5c>)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_sbrk+0x60>)
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <_sbrk+0x64>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <_sbrk+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d207      	bcs.n	8001ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab0:	f005 fb5c 	bl	800716c <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	e009      	b.n	8001ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <_sbrk+0x64>)
 8001ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20008000 	.word	0x20008000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	20000444 	.word	0x20000444
 8001ae8:	200005c8 	.word	0x200005c8

08001aec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <SystemInit+0x20>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <SystemInit+0x20>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b5c:	4818      	ldr	r0, [pc, #96]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b5e:	f004 f825 	bl	8005bac <HAL_TIM_PWM_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b68:	f7ff fe07 	bl	800177a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001b7c:	f004 fe0e 	bl	800679c <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001b86:	f7ff fdf8 	bl	800177a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2360      	movs	r3, #96	; 0x60
 8001b8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	220c      	movs	r2, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001ba2:	f004 f95b 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001bac:	f7ff fde5 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <MX_TIM2_Init+0xb0>)
 8001bb2:	f000 f90d 	bl	8001dd0 <HAL_TIM_MspPostInit>

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000448 	.word	0x20000448

08001bc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001bea:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <MX_TIM3_Init+0xc8>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001bfc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c0e:	481e      	ldr	r0, [pc, #120]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001c10:	f003 ffcc 	bl	8005bac <HAL_TIM_PWM_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c1a:	f7ff fdae 	bl	800177a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001c2e:	f004 fdb5 	bl	800679c <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c38:	f7ff fd9f 	bl	800177a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3c:	2360      	movs	r3, #96	; 0x60
 8001c3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001c54:	f004 f902 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001c5e:	f7ff fd8c 	bl	800177a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	2204      	movs	r2, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4807      	ldr	r0, [pc, #28]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001c6a:	f004 f8f7 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001c74:	f7ff fd81 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <MX_TIM3_Init+0xc4>)
 8001c7a:	f000 f8a9 	bl	8001dd0 <HAL_TIM_MspPostInit>

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000494 	.word	0x20000494
 8001c8c:	40000400 	.word	0x40000400

08001c90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cb6:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <MX_TIM4_Init+0xb0>)
 8001cb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600;
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cc8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001ccc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cda:	4818      	ldr	r0, [pc, #96]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cdc:	f003 ff66 	bl	8005bac <HAL_TIM_PWM_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001ce6:	f7ff fd48 	bl	800177a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4810      	ldr	r0, [pc, #64]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001cfa:	f004 fd4f 	bl	800679c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d04:	f7ff fd39 	bl	800177a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d08:	2360      	movs	r3, #96	; 0x60
 8001d0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001d20:	f004 f89c 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d2a:	f7ff fd26 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM4_Init+0xac>)
 8001d30:	f000 f84e 	bl	8001dd0 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200004e0 	.word	0x200004e0
 8001d40:	40000800 	.word	0x40000800

08001d44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d10c      	bne.n	8001d70 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d6e:	e022      	b.n	8001db6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <HAL_TIM_PWM_MspInit+0x84>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10c      	bne.n	8001d94 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a11      	ldr	r2, [pc, #68]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
}
 8001d92:	e010      	b.n	8001db6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_TIM_PWM_MspInit+0x88>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10b      	bne.n	8001db6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_TIM_PWM_MspInit+0x80>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d11d      	bne.n	8001e2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	6153      	str	r3, [r2, #20]
 8001dfe:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BOOST_SW_Pin;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_SW_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e28:	f001 fce8 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e2c:	e043      	b.n	8001eb6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_TIM_MspPostInit+0xf4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d11d      	bne.n	8001e74 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	4a20      	ldr	r2, [pc, #128]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e42:	6153      	str	r3, [r2, #20]
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = KICK_1_Pin|KICK_2_Pin;
 8001e50:	23c0      	movs	r3, #192	; 0xc0
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e60:	2302      	movs	r3, #2
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6e:	f001 fcc5 	bl	80037fc <HAL_GPIO_Init>
}
 8001e72:	e020      	b.n	8001eb6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <HAL_TIM_MspPostInit+0xf8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11b      	bne.n	8001eb6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6153      	str	r3, [r2, #20]
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_TIM_MspPostInit+0xf0>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD_16M_PWM_Pin;
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GD_16M_PWM_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4806      	ldr	r0, [pc, #24]	; (8001ecc <HAL_TIM_MspPostInit+0xfc>)
 8001eb2:	f001 fca3 	bl	80037fc <HAL_GPIO_Init>
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	48000400 	.word	0x48000400

08001ed0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <MX_USART1_UART_Init+0x58>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001edc:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <MX_USART1_UART_Init+0x5c>)
 8001ede:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_USART1_UART_Init+0x54>)
 8001f12:	f004 fcc3 	bl	800689c <HAL_UART_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001f1c:	f7ff fc2d 	bl	800177a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2000052c 	.word	0x2000052c
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	001e8480 	.word	0x001e8480

08001f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_UART_MspInit+0x80>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d129      	bne.n	8001fa6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_UART_MspInit+0x84>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_UART_MspInit+0x84>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_UART_MspInit+0x84>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_UART_MspInit+0x84>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_UART_MspInit+0x84>)
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	6153      	str	r3, [r2, #20]
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_UART_MspInit+0x84>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f94:	2307      	movs	r3, #7
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa2:	f001 fc2b 	bl	80037fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fbe:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <LoopForever+0xe>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd4:	4c0b      	ldr	r4, [pc, #44]	; (8002004 <LoopForever+0x16>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fe2:	f7ff fd83 	bl	8001aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f005 f8c7 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fea:	f7ff f9fd 	bl	80013e8 <main>

08001fee <LoopForever>:

LoopForever:
    b LoopForever
 8001fee:	e7fe      	b.n	8001fee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ff0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ffc:	0800a26c 	.word	0x0800a26c
  ldr r2, =_sbss
 8002000:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002004:	200005c4 	.word	0x200005c4

08002008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC1_2_IRQHandler>
	...

0800200c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_Init+0x28>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_Init+0x28>)
 8002016:	f043 0310 	orr.w	r3, r3, #16
 800201a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201c:	2003      	movs	r0, #3
 800201e:	f001 fa85 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002022:	200f      	movs	r0, #15
 8002024:	f000 f808 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002028:	f7ff fc2e 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40022000 	.word	0x40022000

08002038 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x54>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x58>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f001 fa9d 	bl	8003596 <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f001 fa65 	bl	8003542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x5c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000000 	.word	0x20000000
 8002090:	20000008 	.word	0x20000008
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000008 	.word	0x20000008
 80020bc:	200005b0 	.word	0x200005b0

080020c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	200005b0 	.word	0x200005b0

080020d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ffee 	bl	80020c0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_Delay+0x44>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffde 	bl	80020c0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b09a      	sub	sp, #104	; 0x68
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e1c9      	b.n	80024d4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d176      	bne.n	8002240 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d152      	bne.n	8002200 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe fead 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d13b      	bne.n	8002200 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 ff9d 	bl	80030c8 <ADC_Disable>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d12f      	bne.n	8002200 <HAL_ADC_Init+0xe0>
 80021a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d12b      	bne.n	8002200 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b0:	f023 0302 	bic.w	r3, r3, #2
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021dc:	4b86      	ldr	r3, [pc, #536]	; (80023f8 <HAL_ADC_Init+0x2d8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a86      	ldr	r2, [pc, #536]	; (80023fc <HAL_ADC_Init+0x2dc>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0c9a      	lsrs	r2, r3, #18
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021f2:	e002      	b.n	80021fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800221c:	d110      	bne.n	8002240 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f023 0312 	bic.w	r3, r3, #18
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 8136 	bne.w	80024ba <HAL_ADC_Init+0x39a>
 800224e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 8131 	bne.w	80024ba <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 8129 	bne.w	80024ba <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002270:	f043 0202 	orr.w	r2, r3, #2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002280:	d004      	beq.n	800228c <HAL_ADC_Init+0x16c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <HAL_ADC_Init+0x2e0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_ADC_Init+0x170>
 800228c:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <HAL_ADC_Init+0x2e4>)
 800228e:	e000      	b.n	8002292 <HAL_ADC_Init+0x172>
 8002290:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_ADC_Init+0x2e8>)
 8002292:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229c:	d102      	bne.n	80022a4 <HAL_ADC_Init+0x184>
 800229e:	4b58      	ldr	r3, [pc, #352]	; (8002400 <HAL_ADC_Init+0x2e0>)
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e01a      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a55      	ldr	r2, [pc, #340]	; (8002400 <HAL_ADC_Init+0x2e0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d103      	bne.n	80022b6 <HAL_ADC_Init+0x196>
 80022ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e011      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a54      	ldr	r2, [pc, #336]	; (800240c <HAL_ADC_Init+0x2ec>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d102      	bne.n	80022c6 <HAL_ADC_Init+0x1a6>
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_ADC_Init+0x2f0>)
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e009      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a51      	ldr	r2, [pc, #324]	; (8002410 <HAL_ADC_Init+0x2f0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d102      	bne.n	80022d6 <HAL_ADC_Init+0x1b6>
 80022d0:	4b4e      	ldr	r3, [pc, #312]	; (800240c <HAL_ADC_Init+0x2ec>)
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e001      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d108      	bne.n	80022fa <HAL_ADC_Init+0x1da>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Init+0x1da>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_ADC_Init+0x1dc>
 80022fa:	2300      	movs	r3, #0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11c      	bne.n	800233a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002300:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_ADC_Init+0x202>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_ADC_Init+0x202>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_ADC_Init+0x204>
 8002322:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002324:	2b00      	cmp	r3, #0
 8002326:	d108      	bne.n	800233a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	431a      	orrs	r2, r3
 8002336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002338:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7e5b      	ldrb	r3, [r3, #25]
 800233e:	035b      	lsls	r3, r3, #13
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002344:	2a01      	cmp	r2, #1
 8002346:	d002      	beq.n	800234e <HAL_ADC_Init+0x22e>
 8002348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800234c:	e000      	b.n	8002350 <HAL_ADC_Init+0x230>
 800234e:	2200      	movs	r2, #0
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4313      	orrs	r3, r2
 800235e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002360:	4313      	orrs	r3, r2
 8002362:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d11b      	bne.n	80023a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7e5b      	ldrb	r3, [r3, #25]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	3b01      	subs	r3, #1
 800237c:	045a      	lsls	r2, r3, #17
 800237e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002380:	4313      	orrs	r3, r2
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	663b      	str	r3, [r7, #96]	; 0x60
 8002388:	e00d      	b.n	80023a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d03a      	beq.n	8002424 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_ADC_Init+0x2ec>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_ADC_Init+0x2a2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_ADC_Init+0x2f0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d128      	bne.n	8002414 <HAL_ADC_Init+0x2f4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80023ca:	d012      	beq.n	80023f2 <HAL_ADC_Init+0x2d2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d4:	d00a      	beq.n	80023ec <HAL_ADC_Init+0x2cc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80023de:	d002      	beq.n	80023e6 <HAL_ADC_Init+0x2c6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	e018      	b.n	8002418 <HAL_ADC_Init+0x2f8>
 80023e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ea:	e015      	b.n	8002418 <HAL_ADC_Init+0x2f8>
 80023ec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80023f0:	e012      	b.n	8002418 <HAL_ADC_Init+0x2f8>
 80023f2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023f6:	e00f      	b.n	8002418 <HAL_ADC_Init+0x2f8>
 80023f8:	20000000 	.word	0x20000000
 80023fc:	431bde83 	.word	0x431bde83
 8002400:	50000100 	.word	0x50000100
 8002404:	50000300 	.word	0x50000300
 8002408:	50000700 	.word	0x50000700
 800240c:	50000400 	.word	0x50000400
 8002410:	50000500 	.word	0x50000500
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800241c:	4313      	orrs	r3, r2
 800241e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002420:	4313      	orrs	r3, r2
 8002422:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b00      	cmp	r3, #0
 8002430:	d114      	bne.n	800245c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002440:	f023 0302 	bic.w	r3, r3, #2
 8002444:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7e1b      	ldrb	r3, [r3, #24]
 800244a:	039a      	lsls	r2, r3, #14
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4313      	orrs	r3, r2
 8002456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002458:	4313      	orrs	r3, r2
 800245a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_ADC_Init+0x3bc>)
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800246c:	430b      	orrs	r3, r1
 800246e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10c      	bne.n	8002492 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f023 010f 	bic.w	r1, r3, #15
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
 8002490:	e007      	b.n	80024a2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 020f 	bic.w	r2, r2, #15
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f023 0303 	bic.w	r3, r3, #3
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
 80024b8:	e00a      	b.n	80024d0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f023 0312 	bic.w	r3, r3, #18
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3768      	adds	r7, #104	; 0x68
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fff0c007 	.word	0xfff0c007

080024e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80f9 	bne.w	80026ee <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_Start+0x2a>
 8002506:	2302      	movs	r3, #2
 8002508:	e0f4      	b.n	80026f4 <HAL_ADC_Start+0x214>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fd74 	bl	8003000 <ADC_Enable>
 8002518:	4603      	mov	r3, r0
 800251a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 80e0 	bne.w	80026e4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002540:	d004      	beq.n	800254c <HAL_ADC_Start+0x6c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6d      	ldr	r2, [pc, #436]	; (80026fc <HAL_ADC_Start+0x21c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d106      	bne.n	800255a <HAL_ADC_Start+0x7a>
 800254c:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_ADC_Start+0x220>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_ADC_Start+0x9a>
 8002558:	e005      	b.n	8002566 <HAL_ADC_Start+0x86>
 800255a:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_ADC_Start+0x224>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <HAL_ADC_Start+0x9a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256e:	d004      	beq.n	800257a <HAL_ADC_Start+0x9a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a64      	ldr	r2, [pc, #400]	; (8002708 <HAL_ADC_Start+0x228>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d115      	bne.n	80025a6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d036      	beq.n	8002602 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800259c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025a4:	e02d      	b.n	8002602 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Start+0xe6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4e      	ldr	r2, [pc, #312]	; (80026fc <HAL_ADC_Start+0x21c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10a      	bne.n	80025dc <HAL_ADC_Start+0xfc>
 80025c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e008      	b.n	80025ee <HAL_ADC_Start+0x10e>
 80025dc:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_ADC_Start+0x228>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260e:	d106      	bne.n	800261e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f023 0206 	bic.w	r2, r3, #6
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	645a      	str	r2, [r3, #68]	; 0x44
 800261c:	e002      	b.n	8002624 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	221c      	movs	r2, #28
 8002632:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800263c:	d004      	beq.n	8002648 <HAL_ADC_Start+0x168>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2e      	ldr	r2, [pc, #184]	; (80026fc <HAL_ADC_Start+0x21c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d106      	bne.n	8002656 <HAL_ADC_Start+0x176>
 8002648:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_ADC_Start+0x220>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03e      	beq.n	80026d2 <HAL_ADC_Start+0x1f2>
 8002654:	e005      	b.n	8002662 <HAL_ADC_Start+0x182>
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <HAL_ADC_Start+0x224>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2b00      	cmp	r3, #0
 8002660:	d037      	beq.n	80026d2 <HAL_ADC_Start+0x1f2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266a:	d004      	beq.n	8002676 <HAL_ADC_Start+0x196>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_ADC_Start+0x21c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d106      	bne.n	8002684 <HAL_ADC_Start+0x1a4>
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_ADC_Start+0x220>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2b05      	cmp	r3, #5
 8002680:	d027      	beq.n	80026d2 <HAL_ADC_Start+0x1f2>
 8002682:	e005      	b.n	8002690 <HAL_ADC_Start+0x1b0>
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HAL_ADC_Start+0x224>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b05      	cmp	r3, #5
 800268e:	d020      	beq.n	80026d2 <HAL_ADC_Start+0x1f2>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002698:	d004      	beq.n	80026a4 <HAL_ADC_Start+0x1c4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_ADC_Start+0x21c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d106      	bne.n	80026b2 <HAL_ADC_Start+0x1d2>
 80026a4:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_ADC_Start+0x220>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	d010      	beq.n	80026d2 <HAL_ADC_Start+0x1f2>
 80026b0:	e005      	b.n	80026be <HAL_ADC_Start+0x1de>
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_ADC_Start+0x224>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d009      	beq.n	80026d2 <HAL_ADC_Start+0x1f2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c6:	d004      	beq.n	80026d2 <HAL_ADC_Start+0x1f2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_ADC_Start+0x228>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10f      	bne.n	80026f2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0204 	orr.w	r2, r2, #4
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	e006      	b.n	80026f2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026ec:	e001      	b.n	80026f2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
 80026f0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	50000100 	.word	0x50000100
 8002700:	50000300 	.word	0x50000300
 8002704:	50000700 	.word	0x50000700
 8002708:	50000400 	.word	0x50000400

0800270c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800270c:	b480      	push	{r7}
 800270e:	b09d      	sub	sp, #116	; 0x74
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADCEx_InjectedConfigChannel+0x26>
 800272e:	2302      	movs	r3, #2
 8002730:	e364      	b.n	8002dfc <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002746:	2b01      	cmp	r3, #1
 8002748:	d151      	bne.n	80027ee <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d143      	bne.n	80027da <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d02b      	beq.n	80027b2 <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	021a      	lsls	r2, r3, #8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4984      	ldr	r1, [pc, #528]	; (8002978 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8002766:	428b      	cmp	r3, r1
 8002768:	d004      	beq.n	8002774 <HAL_ADCEx_InjectedConfigChannel+0x68>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4983      	ldr	r1, [pc, #524]	; (800297c <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8002770:	428b      	cmp	r3, r1
 8002772:	d114      	bne.n	800279e <HAL_ADCEx_InjectedConfigChannel+0x92>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d00e      	beq.n	800279a <HAL_ADCEx_InjectedConfigChannel+0x8e>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	2b14      	cmp	r3, #20
 8002782:	d008      	beq.n	8002796 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	2b1c      	cmp	r3, #28
 800278a:	d002      	beq.n	8002792 <HAL_ADCEx_InjectedConfigChannel+0x86>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	e007      	b.n	80027a2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8002792:	2310      	movs	r3, #16
 8002794:	e005      	b.n	80027a2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8002796:	231c      	movs	r3, #28
 8002798:	e003      	b.n	80027a2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 800279a:	2334      	movs	r3, #52	; 0x34
 800279c:	e001      	b.n	80027a2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	4313      	orrs	r3, r2
 80027aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80027ac:	4313      	orrs	r3, r2
 80027ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b0:	e005      	b.n	80027be <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80027ba:	4313      	orrs	r3, r2
 80027bc:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027c4:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027ce:	430b      	orrs	r3, r1
 80027d0:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80027d6:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80027d8:	e07f      	b.n	80028da <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0220 	orr.w	r2, r3, #32
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80027ec:	e075      	b.n	80028da <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d140      	bne.n	8002878 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d02d      	beq.n	8002868 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	1e59      	subs	r1, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4857      	ldr	r0, [pc, #348]	; (8002978 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 800281c:	4283      	cmp	r3, r0
 800281e:	d004      	beq.n	800282a <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4855      	ldr	r0, [pc, #340]	; (800297c <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8002826:	4283      	cmp	r3, r0
 8002828:	d114      	bne.n	8002854 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	2b08      	cmp	r3, #8
 8002830:	d00e      	beq.n	8002850 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	2b14      	cmp	r3, #20
 8002838:	d008      	beq.n	800284c <HAL_ADCEx_InjectedConfigChannel+0x140>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	2b1c      	cmp	r3, #28
 8002840:	d002      	beq.n	8002848 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	e007      	b.n	8002858 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8002848:	2310      	movs	r3, #16
 800284a:	e005      	b.n	8002858 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800284c:	231c      	movs	r3, #28
 800284e:	e003      	b.n	8002858 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8002850:	2334      	movs	r3, #52	; 0x34
 8002852:	e001      	b.n	8002858 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4319      	orrs	r1, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	430b      	orrs	r3, r1
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	649a      	str	r2, [r3, #72]	; 0x48
 8002866:	e007      	b.n	8002878 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	3b01      	subs	r3, #1
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	3302      	adds	r3, #2
 800288a:	221f      	movs	r2, #31
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	4019      	ands	r1, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	3302      	adds	r3, #2
 80028a6:	fa00 f303 	lsl.w	r3, r0, r3
 80028aa:	ea41 0203 	orr.w	r2, r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	1e5a      	subs	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ca:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	430b      	orrs	r3, r1
 80028d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d12d      	bne.n	8002944 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7f5b      	ldrb	r3, [r3, #29]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d110      	bne.n	8002912 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	7f9b      	ldrb	r3, [r3, #30]
 80028fe:	055a      	lsls	r2, r3, #21
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	7f1b      	ldrb	r3, [r3, #28]
 8002904:	051b      	lsls	r3, r3, #20
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	e018      	b.n	8002944 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7f9b      	ldrb	r3, [r3, #30]
 8002920:	055a      	lsls	r2, r3, #21
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	7f1b      	ldrb	r3, [r3, #28]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 8111 	bne.w	8002b76 <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d113      	bne.n	8002984 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	7f5b      	ldrb	r3, [r3, #29]
 800296a:	065a      	lsls	r2, r3, #25
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	e01b      	b.n	80029ae <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002976:	bf00      	nop
 8002978:	50000400 	.word	0x50000400
 800297c:	50000500 	.word	0x50000500
 8002980:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002992:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	7f5b      	ldrb	r3, [r3, #29]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d108      	bne.n	80029ae <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b09      	cmp	r3, #9
 80029b4:	d91c      	bls.n	80029f0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6999      	ldr	r1, [r3, #24]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	3b1e      	subs	r3, #30
 80029c8:	2207      	movs	r2, #7
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4019      	ands	r1, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6898      	ldr	r0, [r3, #8]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	619a      	str	r2, [r3, #24]
 80029ee:	e019      	b.n	8002a24 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6959      	ldr	r1, [r3, #20]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	2207      	movs	r2, #7
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	4019      	ands	r1, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6898      	ldr	r0, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	08db      	lsrs	r3, r3, #3
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d84e      	bhi.n	8002ae4 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8002a46:	a201      	add	r2, pc, #4	; (adr r2, 8002a4c <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a5d 	.word	0x08002a5d
 8002a50:	08002a7f 	.word	0x08002a7f
 8002a54:	08002aa1 	.word	0x08002aa1
 8002a58:	08002ac3 	.word	0x08002ac3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a62:	4b9a      	ldr	r3, [pc, #616]	; (8002ccc <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	0691      	lsls	r1, r2, #26
 8002a6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002a7c:	e07e      	b.n	8002b7c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a84:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	0691      	lsls	r1, r2, #26
 8002a8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a9c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002a9e:	e06d      	b.n	8002b7c <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	0691      	lsls	r1, r2, #26
 8002ab0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002abe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002ac0:	e05c      	b.n	8002b7c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ac8:	4b80      	ldr	r3, [pc, #512]	; (8002ccc <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	0691      	lsls	r1, r2, #26
 8002ad2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ae0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002ae2:	e04b      	b.n	8002b7c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	069b      	lsls	r3, r3, #26
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b06:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	069b      	lsls	r3, r3, #26
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d107      	bne.n	8002b2c <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b2a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b4e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	069b      	lsls	r3, r3, #26
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10a      	bne.n	8002b7a <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b72:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b74:	e001      	b.n	8002b7a <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8002b7a:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d108      	bne.n	8002b9c <HAL_ADCEx_InjectedConfigChannel+0x490>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_ADCEx_InjectedConfigChannel+0x490>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_ADCEx_InjectedConfigChannel+0x492>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 8126 	bne.w	8002df0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d00f      	beq.n	8002bcc <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002bca:	e049      	b.n	8002c60 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	d91c      	bls.n	8002c28 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6999      	ldr	r1, [r3, #24]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b1b      	subs	r3, #27
 8002c00:	2207      	movs	r2, #7
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	4019      	ands	r1, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6898      	ldr	r0, [r3, #8]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1b      	subs	r3, #27
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	619a      	str	r2, [r3, #24]
 8002c26:	e01b      	b.n	8002c60 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6959      	ldr	r1, [r3, #20]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	4019      	ands	r1, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6898      	ldr	r0, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	fa00 f203 	lsl.w	r2, r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c68:	d004      	beq.n	8002c74 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 8002c76:	e000      	b.n	8002c7a <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>)
 8002c7a:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d105      	bne.n	8002c90 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c94:	2b11      	cmp	r3, #17
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ca8:	2b12      	cmp	r3, #18
 8002caa:	f040 80a1 	bne.w	8002df0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 809a 	bne.w	8002df0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc4:	d10a      	bne.n	8002cdc <HAL_ADCEx_InjectedConfigChannel+0x5d0>
 8002cc6:	4b02      	ldr	r3, [pc, #8]	; (8002cd0 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e022      	b.n	8002d12 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002ccc:	83fff000 	.word	0x83fff000
 8002cd0:	50000100 	.word	0x50000100
 8002cd4:	50000300 	.word	0x50000300
 8002cd8:	50000700 	.word	0x50000700
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d103      	bne.n	8002cee <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8002ce6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	e011      	b.n	8002d12 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a46      	ldr	r2, [pc, #280]	; (8002e0c <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d102      	bne.n	8002cfe <HAL_ADCEx_InjectedConfigChannel+0x5f2>
 8002cf8:	4b45      	ldr	r3, [pc, #276]	; (8002e10 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e009      	b.n	8002d12 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d102      	bne.n	8002d0e <HAL_ADCEx_InjectedConfigChannel+0x602>
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e001      	b.n	8002d12 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d108      	bne.n	8002d32 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d150      	bne.n	8002dda <HAL_ADCEx_InjectedConfigChannel+0x6ce>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d38:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_ADCEx_InjectedConfigChannel+0x654>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_ADCEx_InjectedConfigChannel+0x650>
 8002d5a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d13c      	bne.n	8002dda <HAL_ADCEx_InjectedConfigChannel+0x6ce>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b10      	cmp	r3, #16
 8002d66:	d11d      	bne.n	8002da4 <HAL_ADCEx_InjectedConfigChannel+0x698>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d70:	d118      	bne.n	8002da4 <HAL_ADCEx_InjectedConfigChannel+0x698>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d7c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	0c9a      	lsrs	r2, r3, #18
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002d94:	e002      	b.n	8002d9c <HAL_ADCEx_InjectedConfigChannel+0x690>
          {
            wait_loop_index--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f9      	bne.n	8002d96 <HAL_ADCEx_InjectedConfigChannel+0x68a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002da2:	e024      	b.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x6e2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b11      	cmp	r3, #17
 8002daa:	d10b      	bne.n	8002dc4 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db4:	d106      	bne.n	8002dc4 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc0:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dc2:	e014      	b.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b12      	cmp	r3, #18
 8002dca:	d110      	bne.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd6:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dd8:	e009      	b.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x6e2>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002dec:	e000      	b.n	8002df0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dee:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002df8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3774      	adds	r7, #116	; 0x74
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	50000100 	.word	0x50000100
 8002e0c:	50000400 	.word	0x50000400
 8002e10:	50000500 	.word	0x50000500
 8002e14:	20000000 	.word	0x20000000
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b099      	sub	sp, #100	; 0x64
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e34:	d102      	bne.n	8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e36:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	e01a      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d103      	bne.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	e011      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a67      	ldr	r2, [pc, #412]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d102      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e58:	4b66      	ldr	r3, [pc, #408]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e009      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a64      	ldr	r2, [pc, #400]	; (8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	e001      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0b0      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0a9      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 808d 	bne.w	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 8086 	bne.w	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb8:	d004      	beq.n	8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a4b      	ldr	r2, [pc, #300]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002ec6:	e000      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002eca:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d040      	beq.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee6:	035b      	lsls	r3, r3, #13
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eee:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d108      	bne.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d15c      	bne.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f32:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d14b      	bne.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f40:	f023 030f 	bic.w	r3, r3, #15
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	6811      	ldr	r1, [r2, #0]
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f52:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f54:	e03c      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d108      	bne.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d123      	bne.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d107      	bne.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002fa4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d112      	bne.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fb2:	f023 030f 	bic.w	r3, r3, #15
 8002fb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fba:	e009      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002fce:	e000      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3764      	adds	r7, #100	; 0x64
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	50000100 	.word	0x50000100
 8002ff0:	50000400 	.word	0x50000400
 8002ff4:	50000500 	.word	0x50000500
 8002ff8:	50000300 	.word	0x50000300
 8002ffc:	50000700 	.word	0x50000700

08003000 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d108      	bne.n	800302c <ADC_Enable+0x2c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <ADC_Enable+0x2c>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <ADC_Enable+0x2e>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d143      	bne.n	80030ba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <ADC_Enable+0xc4>)
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f043 0210 	orr.w	r2, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e02f      	b.n	80030bc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800306c:	f7ff f828 	bl	80020c0 <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003072:	e01b      	b.n	80030ac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003074:	f7ff f824 	bl	80020c0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d914      	bls.n	80030ac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d00d      	beq.n	80030ac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f043 0210 	orr.w	r2, r3, #16
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e007      	b.n	80030bc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d1dc      	bne.n	8003074 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	8000003f 	.word	0x8000003f

080030c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d108      	bne.n	80030f4 <ADC_Disable+0x2c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <ADC_Disable+0x2c>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <ADC_Disable+0x2e>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d047      	beq.n	800318a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030d 	and.w	r3, r3, #13
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10f      	bne.n	8003128 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0202 	orr.w	r2, r2, #2
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2203      	movs	r2, #3
 800311e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003120:	f7fe ffce 	bl	80020c0 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003126:	e029      	b.n	800317c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f043 0210 	orr.w	r2, r3, #16
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f043 0201 	orr.w	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e023      	b.n	800318c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003144:	f7fe ffbc 	bl	80020c0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d914      	bls.n	800317c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10d      	bne.n	800317c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f043 0210 	orr.w	r2, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	f043 0201 	orr.w	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d0dc      	beq.n	8003144 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0ed      	b.n	8003382 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fff6 	bl	80011a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c8:	f7fe ff7a 	bl	80020c0 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ce:	e012      	b.n	80031f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031d0:	f7fe ff76 	bl	80020c0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b0a      	cmp	r3, #10
 80031dc:	d90b      	bls.n	80031f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2205      	movs	r2, #5
 80031ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0c5      	b.n	8003382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0e5      	beq.n	80031d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0202 	bic.w	r2, r2, #2
 8003212:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003214:	f7fe ff54 	bl	80020c0 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800321a:	e012      	b.n	8003242 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800321c:	f7fe ff50 	bl	80020c0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b0a      	cmp	r3, #10
 8003228:	d90b      	bls.n	8003242 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2205      	movs	r2, #5
 800323a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e09f      	b.n	8003382 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7e1b      	ldrb	r3, [r3, #24]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d108      	bne.n	800326a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e007      	b.n	800327a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7e5b      	ldrb	r3, [r3, #25]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e007      	b.n	80032a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7e9b      	ldrb	r3, [r3, #26]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d108      	bne.n	80032be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0220 	orr.w	r2, r2, #32
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e007      	b.n	80032ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0220 	bic.w	r2, r2, #32
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7edb      	ldrb	r3, [r3, #27]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d108      	bne.n	80032e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0210 	bic.w	r2, r2, #16
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e007      	b.n	80032f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0210 	orr.w	r2, r2, #16
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7f1b      	ldrb	r3, [r3, #28]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d108      	bne.n	8003312 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0208 	orr.w	r2, r2, #8
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e007      	b.n	8003322 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0208 	bic.w	r2, r2, #8
 8003320:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7f5b      	ldrb	r3, [r3, #29]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d108      	bne.n	800333c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0204 	orr.w	r2, r2, #4
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e007      	b.n	800334c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0204 	bic.w	r2, r2, #4
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	ea42 0103 	orr.w	r1, r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033be:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	60d3      	str	r3, [r2, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <__NVIC_GetPriorityGrouping+0x18>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 0307 	and.w	r3, r3, #7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	db0b      	blt.n	800341a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4907      	ldr	r1, [pc, #28]	; (8003428 <__NVIC_EnableIRQ+0x38>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2001      	movs	r0, #1
 8003412:	fa00 f202 	lsl.w	r2, r0, r2
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100

0800342c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db0a      	blt.n	8003456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	490c      	ldr	r1, [pc, #48]	; (8003478 <__NVIC_SetPriority+0x4c>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	440b      	add	r3, r1
 8003450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003454:	e00a      	b.n	800346c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4908      	ldr	r1, [pc, #32]	; (800347c <__NVIC_SetPriority+0x50>)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	3b04      	subs	r3, #4
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	440b      	add	r3, r1
 800346a:	761a      	strb	r2, [r3, #24]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf28      	it	cs
 800349e:	2304      	movcs	r3, #4
 80034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d902      	bls.n	80034b0 <NVIC_EncodePriority+0x30>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	e000      	b.n	80034b2 <NVIC_EncodePriority+0x32>
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	401a      	ands	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	4313      	orrs	r3, r2
         );
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f7ff ff8e 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff29 	bl	800338c <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003554:	f7ff ff3e 	bl	80033d4 <__NVIC_GetPriorityGrouping>
 8003558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff8e 	bl	8003480 <NVIC_EncodePriority>
 8003564:	4602      	mov	r2, r0
 8003566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff5d 	bl	800342c <__NVIC_SetPriority>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff31 	bl	80033f0 <__NVIC_EnableIRQ>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffa2 	bl	80034e8 <SysTick_Config>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e037      	b.n	8003634 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8b4 	bl	8003784 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}  
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2204      	movs	r2, #4
 800365a:	409a      	lsls	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d024      	beq.n	80036ae <HAL_DMA_IRQHandler+0x72>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01f      	beq.n	80036ae <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0204 	bic.w	r2, r2, #4
 800368a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	2104      	movs	r1, #4
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d06a      	beq.n	800377a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80036ac:	e065      	b.n	800377a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	2202      	movs	r2, #2
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02c      	beq.n	8003718 <HAL_DMA_IRQHandler+0xdc>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d027      	beq.n	8003718 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10b      	bne.n	80036ee <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 020a 	bic.w	r2, r2, #10
 80036e4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	2102      	movs	r1, #2
 80036f8:	fa01 f202 	lsl.w	r2, r1, r2
 80036fc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d035      	beq.n	800377a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003716:	e030      	b.n	800377a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	2208      	movs	r2, #8
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d028      	beq.n	800377a <HAL_DMA_IRQHandler+0x13e>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d023      	beq.n	800377a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 020e 	bic.w	r2, r2, #14
 8003740:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
    }
  }
}  
 8003778:	e7ff      	b.n	800377a <HAL_DMA_IRQHandler+0x13e>
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <DMA_CalcBaseAndBitshift+0x60>)
 8003794:	429a      	cmp	r2, r3
 8003796:	d80f      	bhi.n	80037b8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <DMA_CalcBaseAndBitshift+0x64>)
 80037a0:	4413      	add	r3, r2
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <DMA_CalcBaseAndBitshift+0x68>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	009a      	lsls	r2, r3, #2
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <DMA_CalcBaseAndBitshift+0x6c>)
 80037b4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80037b6:	e00e      	b.n	80037d6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <DMA_CalcBaseAndBitshift+0x70>)
 80037c0:	4413      	add	r3, r2
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <DMA_CalcBaseAndBitshift+0x68>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <DMA_CalcBaseAndBitshift+0x74>)
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40020407 	.word	0x40020407
 80037e8:	bffdfff8 	.word	0xbffdfff8
 80037ec:	cccccccd 	.word	0xcccccccd
 80037f0:	40020000 	.word	0x40020000
 80037f4:	bffdfbf8 	.word	0xbffdfbf8
 80037f8:	40020400 	.word	0x40020400

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380a:	e154      	b.n	8003ab6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2101      	movs	r1, #1
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8146 	beq.w	8003ab0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d005      	beq.n	800383c <HAL_GPIO_Init+0x40>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d130      	bne.n	800389e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003872:	2201      	movs	r2, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 0201 	and.w	r2, r3, #1
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d017      	beq.n	80038da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	2203      	movs	r2, #3
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4013      	ands	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d123      	bne.n	800392e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	220f      	movs	r2, #15
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	08da      	lsrs	r2, r3, #3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3208      	adds	r2, #8
 8003928:	6939      	ldr	r1, [r7, #16]
 800392a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0203 	and.w	r2, r3, #3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80a0 	beq.w	8003ab0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003970:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_GPIO_Init+0x2d8>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_GPIO_Init+0x2d8>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6193      	str	r3, [r2, #24]
 800397c:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <HAL_GPIO_Init+0x2d8>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003988:	4a53      	ldr	r2, [pc, #332]	; (8003ad8 <HAL_GPIO_Init+0x2dc>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	3302      	adds	r3, #2
 8003990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	220f      	movs	r2, #15
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039b2:	d019      	beq.n	80039e8 <HAL_GPIO_Init+0x1ec>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a49      	ldr	r2, [pc, #292]	; (8003adc <HAL_GPIO_Init+0x2e0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_GPIO_Init+0x1e8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a48      	ldr	r2, [pc, #288]	; (8003ae0 <HAL_GPIO_Init+0x2e4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00d      	beq.n	80039e0 <HAL_GPIO_Init+0x1e4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a47      	ldr	r2, [pc, #284]	; (8003ae4 <HAL_GPIO_Init+0x2e8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <HAL_GPIO_Init+0x1e0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a46      	ldr	r2, [pc, #280]	; (8003ae8 <HAL_GPIO_Init+0x2ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_GPIO_Init+0x1dc>
 80039d4:	2304      	movs	r3, #4
 80039d6:	e008      	b.n	80039ea <HAL_GPIO_Init+0x1ee>
 80039d8:	2305      	movs	r3, #5
 80039da:	e006      	b.n	80039ea <HAL_GPIO_Init+0x1ee>
 80039dc:	2303      	movs	r3, #3
 80039de:	e004      	b.n	80039ea <HAL_GPIO_Init+0x1ee>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e002      	b.n	80039ea <HAL_GPIO_Init+0x1ee>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_GPIO_Init+0x1ee>
 80039e8:	2300      	movs	r3, #0
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	f002 0203 	and.w	r2, r2, #3
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	4093      	lsls	r3, r2
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039fa:	4937      	ldr	r1, [pc, #220]	; (8003ad8 <HAL_GPIO_Init+0x2dc>)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	089b      	lsrs	r3, r3, #2
 8003a00:	3302      	adds	r3, #2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a08:	4b38      	ldr	r3, [pc, #224]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a2c:	4a2f      	ldr	r2, [pc, #188]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a32:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a56:	4a25      	ldr	r2, [pc, #148]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a5c:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a80:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003aaa:	4a10      	ldr	r2, [pc, #64]	; (8003aec <HAL_GPIO_Init+0x2f0>)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f47f aea3 	bne.w	800380c <HAL_GPIO_Init+0x10>
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	48000400 	.word	0x48000400
 8003ae0:	48000800 	.word	0x48000800
 8003ae4:	48000c00 	.word	0x48000c00
 8003ae8:	48001000 	.word	0x48001000
 8003aec:	40010400 	.word	0x40010400

08003af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	807b      	strh	r3, [r7, #2]
 8003afc:	4613      	mov	r3, r2
 8003afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b00:	787b      	ldrb	r3, [r7, #1]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b0c:	e002      	b.n	8003b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f001 b823 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 817d 	beq.w	8003e56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b5c:	4bbc      	ldr	r3, [pc, #752]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d00c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b68:	4bb9      	ldr	r3, [pc, #740]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d15c      	bne.n	8003c2e <HAL_RCC_OscConfig+0x10e>
 8003b74:	4bb6      	ldr	r3, [pc, #728]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d155      	bne.n	8003c2e <HAL_RCC_OscConfig+0x10e>
 8003b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d102      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x94>
 8003bae:	4ba8      	ldr	r3, [pc, #672]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	e015      	b.n	8003be0 <HAL_RCC_OscConfig+0xc0>
 8003bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003bd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003bdc:	4b9c      	ldr	r3, [pc, #624]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003be8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003bec:	fa92 f2a2 	rbit	r2, r2
 8003bf0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003bf4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003bf8:	fab2 f282 	clz	r2, r2
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	f042 0220 	orr.w	r2, r2, #32
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	f002 021f 	and.w	r2, r2, #31
 8003c08:	2101      	movs	r1, #1
 8003c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 811f 	beq.w	8003e54 <HAL_RCC_OscConfig+0x334>
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 8116 	bne.w	8003e54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f000 bfaf 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x12e>
 8003c40:	4b83      	ldr	r3, [pc, #524]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a82      	ldr	r2, [pc, #520]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e036      	b.n	8003cbc <HAL_RCC_OscConfig+0x19c>
 8003c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x158>
 8003c5e:	4b7c      	ldr	r3, [pc, #496]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a7b      	ldr	r2, [pc, #492]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b79      	ldr	r3, [pc, #484]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a78      	ldr	r2, [pc, #480]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e021      	b.n	8003cbc <HAL_RCC_OscConfig+0x19c>
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x184>
 8003c8a:	4b71      	ldr	r3, [pc, #452]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a70      	ldr	r2, [pc, #448]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b6e      	ldr	r3, [pc, #440]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0x19c>
 8003ca4:	4b6a      	ldr	r3, [pc, #424]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a69      	ldr	r2, [pc, #420]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b67      	ldr	r3, [pc, #412]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a66      	ldr	r2, [pc, #408]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cbc:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f023 020f 	bic.w	r2, r3, #15
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	495f      	ldr	r1, [pc, #380]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d059      	beq.n	8003d9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe f9eb 	bl	80020c0 <HAL_GetTick>
 8003cea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fe f9e6 	bl	80020c0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b64      	cmp	r3, #100	; 0x64
 8003cfe:	d902      	bls.n	8003d06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	f000 bf43 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
 8003d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003d1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	fab3 f383 	clz	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d102      	bne.n	8003d38 <HAL_RCC_OscConfig+0x218>
 8003d32:	4b47      	ldr	r3, [pc, #284]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	e015      	b.n	8003d64 <HAL_RCC_OscConfig+0x244>
 8003d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003d54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003d6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003d70:	fa92 f2a2 	rbit	r2, r2
 8003d74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003d78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003d7c:	fab2 f282 	clz	r2, r2
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	f042 0220 	orr.w	r2, r2, #32
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	f002 021f 	and.w	r2, r2, #31
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ab      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1d0>
 8003d98:	e05d      	b.n	8003e56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fe f991 	bl	80020c0 <HAL_GetTick>
 8003d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe f98c 	bl	80020c0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b64      	cmp	r3, #100	; 0x64
 8003db2:	d902      	bls.n	8003dba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	f000 bee9 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
 8003dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dbe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003dce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d102      	bne.n	8003dec <HAL_RCC_OscConfig+0x2cc>
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	e015      	b.n	8003e18 <HAL_RCC_OscConfig+0x2f8>
 8003dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003df0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003e08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 8003e10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_RCC_OscConfig+0x330>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003e20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003e24:	fa92 f2a2 	rbit	r2, r2
 8003e28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003e2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003e30:	fab2 f282 	clz	r2, r2
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	f042 0220 	orr.w	r2, r2, #32
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f002 021f 	and.w	r2, r2, #31
 8003e40:	2101      	movs	r1, #1
 8003e42:	fa01 f202 	lsl.w	r2, r1, r2
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ab      	bne.n	8003da4 <HAL_RCC_OscConfig+0x284>
 8003e4c:	e003      	b.n	8003e56 <HAL_RCC_OscConfig+0x336>
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 817d 	beq.w	8004166 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e6c:	4ba6      	ldr	r3, [pc, #664]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e78:	4ba3      	ldr	r3, [pc, #652]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d172      	bne.n	8003f6a <HAL_RCC_OscConfig+0x44a>
 8003e84:	4ba0      	ldr	r3, [pc, #640]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d16c      	bne.n	8003f6a <HAL_RCC_OscConfig+0x44a>
 8003e90:	2302      	movs	r3, #2
 8003e92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003ea2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x3a0>
 8003eba:	4b93      	ldr	r3, [pc, #588]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	e013      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3c8>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ed8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ee4:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003eee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ef2:	fa92 f2a2 	rbit	r2, r2
 8003ef6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003efa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003efe:	fab2 f282 	clz	r2, r2
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f042 0220 	orr.w	r2, r2, #32
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f002 021f 	and.w	r2, r2, #31
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCC_OscConfig+0x410>
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f000 be2e 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b75      	ldr	r3, [pc, #468]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	21f8      	movs	r1, #248	; 0xf8
 8003f46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003f4e:	fa91 f1a1 	rbit	r1, r1
 8003f52:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003f56:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003f5a:	fab1 f181 	clz	r1, r1
 8003f5e:	b2c9      	uxtb	r1, r1
 8003f60:	408b      	lsls	r3, r1
 8003f62:	4969      	ldr	r1, [pc, #420]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f68:	e0fd      	b.n	8004166 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8088 	beq.w	800408c <HAL_RCC_OscConfig+0x56c>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003f8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f88a 	bl	80020c0 <HAL_GetTick>
 8003fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fe f885 	bl	80020c0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d902      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	f000 bde2 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003fda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d102      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4d8>
 8003ff2:	4b45      	ldr	r3, [pc, #276]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	e013      	b.n	8004020 <HAL_RCC_OscConfig+0x500>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800400a:	2302      	movs	r3, #2
 800400c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004010:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800401c:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2202      	movs	r2, #2
 8004022:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004026:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800402a:	fa92 f2a2 	rbit	r2, r2
 800402e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004032:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004036:	fab2 f282 	clz	r2, r2
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f042 0220 	orr.w	r2, r2, #32
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f002 021f 	and.w	r2, r2, #31
 8004046:	2101      	movs	r1, #1
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0af      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004052:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	21f8      	movs	r1, #248	; 0xf8
 8004068:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004070:	fa91 f1a1 	rbit	r1, r1
 8004074:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004078:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800407c:	fab1 f181 	clz	r1, r1
 8004080:	b2c9      	uxtb	r1, r1
 8004082:	408b      	lsls	r3, r1
 8004084:	4920      	ldr	r1, [pc, #128]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
 800408a:	e06c      	b.n	8004166 <HAL_RCC_OscConfig+0x646>
 800408c:	2301      	movs	r3, #1
 800408e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800409e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	461a      	mov	r2, r3
 80040b4:	2300      	movs	r3, #0
 80040b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe f802 	bl	80020c0 <HAL_GetTick>
 80040bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fd fffd 	bl	80020c0 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d902      	bls.n	80040d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	f000 bd5a 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
 80040d8:	2302      	movs	r3, #2
 80040da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80040ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d104      	bne.n	800410c <HAL_RCC_OscConfig+0x5ec>
 8004102:	4b01      	ldr	r3, [pc, #4]	; (8004108 <HAL_RCC_OscConfig+0x5e8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	e015      	b.n	8004134 <HAL_RCC_OscConfig+0x614>
 8004108:	40021000 	.word	0x40021000
 800410c:	2302      	movs	r3, #2
 800410e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800411e:	2302      	movs	r3, #2
 8004120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004130:	4bc8      	ldr	r3, [pc, #800]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2202      	movs	r2, #2
 8004136:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800413a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800413e:	fa92 f2a2 	rbit	r2, r2
 8004142:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004146:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800414a:	fab2 f282 	clz	r2, r2
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	f042 0220 	orr.w	r2, r2, #32
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	f002 021f 	and.w	r2, r2, #31
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f202 	lsl.w	r2, r1, r2
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1ad      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8110 	beq.w	800439c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800417c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d079      	beq.n	8004280 <HAL_RCC_OscConfig+0x760>
 800418c:	2301      	movs	r3, #1
 800418e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	4bab      	ldr	r3, [pc, #684]	; (8004458 <HAL_RCC_OscConfig+0x938>)
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	461a      	mov	r2, r3
 80041b2:	2301      	movs	r3, #1
 80041b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b6:	f7fd ff83 	bl	80020c0 <HAL_GetTick>
 80041ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd ff7e 	bl	80020c0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d902      	bls.n	80041d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	f000 bcdb 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
 80041d6:	2302      	movs	r3, #2
 80041d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80041e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80041f0:	2202      	movs	r2, #2
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	fa93 f2a3 	rbit	r2, r3
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004214:	2202      	movs	r2, #2
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fa93 f2a3 	rbit	r2, r3
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800422e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004230:	4b88      	ldr	r3, [pc, #544]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 8004232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004238:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800423c:	2102      	movs	r1, #2
 800423e:	6019      	str	r1, [r3, #0]
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	fa93 f1a3 	rbit	r1, r3
 800424e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004252:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004256:	6019      	str	r1, [r3, #0]
  return result;
 8004258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800425c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0a0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x6a0>
 800427e:	e08d      	b.n	800439c <HAL_RCC_OscConfig+0x87c>
 8004280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	fa93 f2a3 	rbit	r2, r3
 800429a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80042a2:	601a      	str	r2, [r3, #0]
  return result;
 80042a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80042ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x938>)
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	461a      	mov	r2, r3
 80042be:	2300      	movs	r3, #0
 80042c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fd fefd 	bl	80020c0 <HAL_GetTick>
 80042c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042cc:	f7fd fef8 	bl	80020c0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d902      	bls.n	80042e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	f000 bc55 	b.w	8004b8c <HAL_RCC_OscConfig+0x106c>
 80042e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042ea:	2202      	movs	r2, #2
 80042ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	fa93 f2a3 	rbit	r2, r3
 80042fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004300:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800430e:	2202      	movs	r2, #2
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004316:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	fa93 f2a3 	rbit	r2, r3
 8004320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004324:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004332:	2202      	movs	r2, #2
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fa93 f2a3 	rbit	r2, r3
 8004344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004348:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800434c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 8004350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004356:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800435a:	2102      	movs	r1, #2
 800435c:	6019      	str	r1, [r3, #0]
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	fa93 f1a3 	rbit	r1, r3
 800436c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004370:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004374:	6019      	str	r1, [r3, #0]
  return result;
 8004376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	2101      	movs	r1, #1
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d197      	bne.n	80042cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800439c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 81a1 	beq.w	80046f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b8:	4b26      	ldr	r3, [pc, #152]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4a22      	ldr	r2, [pc, #136]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 80043ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ce:	61d3      	str	r3, [r2, #28]
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80043d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80043ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_RCC_OscConfig+0x93c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11a      	bne.n	8004434 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <HAL_RCC_OscConfig+0x93c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_RCC_OscConfig+0x93c>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fd fe59 	bl	80020c0 <HAL_GetTick>
 800440e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004412:	e009      	b.n	8004428 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004414:	f7fd fe54 	bl	80020c0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b64      	cmp	r3, #100	; 0x64
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e3b1      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <HAL_RCC_OscConfig+0x93c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0ef      	beq.n	8004414 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10d      	bne.n	8004460 <HAL_RCC_OscConfig+0x940>
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a02      	ldr	r2, [pc, #8]	; (8004454 <HAL_RCC_OscConfig+0x934>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6213      	str	r3, [r2, #32]
 8004450:	e03c      	b.n	80044cc <HAL_RCC_OscConfig+0x9ac>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	10908120 	.word	0x10908120
 800445c:	40007000 	.word	0x40007000
 8004460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10c      	bne.n	800448a <HAL_RCC_OscConfig+0x96a>
 8004470:	4bc1      	ldr	r3, [pc, #772]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	4ac0      	ldr	r2, [pc, #768]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 8004476:	f023 0301 	bic.w	r3, r3, #1
 800447a:	6213      	str	r3, [r2, #32]
 800447c:	4bbe      	ldr	r3, [pc, #760]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4abd      	ldr	r2, [pc, #756]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 8004482:	f023 0304 	bic.w	r3, r3, #4
 8004486:	6213      	str	r3, [r2, #32]
 8004488:	e020      	b.n	80044cc <HAL_RCC_OscConfig+0x9ac>
 800448a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x994>
 800449a:	4bb7      	ldr	r3, [pc, #732]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	4ab6      	ldr	r2, [pc, #728]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6213      	str	r3, [r2, #32]
 80044a6:	4bb4      	ldr	r3, [pc, #720]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	4ab3      	ldr	r2, [pc, #716]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6213      	str	r3, [r2, #32]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0x9ac>
 80044b4:	4bb0      	ldr	r3, [pc, #704]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4aaf      	ldr	r2, [pc, #700]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	4bad      	ldr	r3, [pc, #692]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4aac      	ldr	r2, [pc, #688]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80044c6:	f023 0304 	bic.w	r3, r3, #4
 80044ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8081 	beq.w	80045e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044de:	f7fd fdef 	bl	80020c0 <HAL_GetTick>
 80044e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fd fdea 	bl	80020c0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e345      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
 8004500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004504:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004508:	2202      	movs	r2, #2
 800450a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004510:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	fa93 f2a3 	rbit	r2, r3
 800451a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004528:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800452c:	2202      	movs	r2, #2
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004534:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	fa93 f2a3 	rbit	r2, r3
 800453e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004542:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004546:	601a      	str	r2, [r3, #0]
  return result;
 8004548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004550:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d102      	bne.n	800456c <HAL_RCC_OscConfig+0xa4c>
 8004566:	4b84      	ldr	r3, [pc, #528]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	e013      	b.n	8004594 <HAL_RCC_OscConfig+0xa74>
 800456c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004570:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004574:	2202      	movs	r2, #2
 8004576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800457c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	fa93 f2a3 	rbit	r2, r3
 8004586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800458a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	4b79      	ldr	r3, [pc, #484]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004598:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800459c:	2102      	movs	r1, #2
 800459e:	6011      	str	r1, [r2, #0]
 80045a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	fa92 f1a2 	rbit	r1, r2
 80045ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80045b6:	6011      	str	r1, [r2, #0]
  return result;
 80045b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	fab2 f282 	clz	r2, r2
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	f002 021f 	and.w	r2, r2, #31
 80045d2:	2101      	movs	r1, #1
 80045d4:	fa01 f202 	lsl.w	r2, r1, r2
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d084      	beq.n	80044e8 <HAL_RCC_OscConfig+0x9c8>
 80045de:	e07f      	b.n	80046e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fd fd6e 	bl	80020c0 <HAL_GetTick>
 80045e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e8:	e00b      	b.n	8004602 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fd fd69 	bl	80020c0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e2c4      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
 8004602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004606:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800460a:	2202      	movs	r2, #2
 800460c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004612:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004620:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800462e:	2202      	movs	r2, #2
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004636:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	fa93 f2a3 	rbit	r2, r3
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004648:	601a      	str	r2, [r3, #0]
  return result;
 800464a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004652:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f043 0302 	orr.w	r3, r3, #2
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d102      	bne.n	800466e <HAL_RCC_OscConfig+0xb4e>
 8004668:	4b43      	ldr	r3, [pc, #268]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	e013      	b.n	8004696 <HAL_RCC_OscConfig+0xb76>
 800466e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004672:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004676:	2202      	movs	r2, #2
 8004678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f2a3 	rbit	r2, r3
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800469a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800469e:	2102      	movs	r1, #2
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	fa92 f1a2 	rbit	r1, r2
 80046b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80046b8:	6011      	str	r1, [r2, #0]
  return result;
 80046ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	fab2 f282 	clz	r2, r2
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	f002 021f 	and.w	r2, r2, #31
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f202 	lsl.w	r2, r1, r2
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d184      	bne.n	80045ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e8:	4b23      	ldr	r3, [pc, #140]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4a22      	ldr	r2, [pc, #136]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 80046ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8242 	beq.w	8004b8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_RCC_OscConfig+0xc58>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b08      	cmp	r3, #8
 8004710:	f000 8213 	beq.w	8004b3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	2b02      	cmp	r3, #2
 8004722:	f040 8162 	bne.w	80049ea <HAL_RCC_OscConfig+0xeca>
 8004726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800472e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004738:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	fa93 f2a3 	rbit	r2, r3
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800474a:	601a      	str	r2, [r3, #0]
  return result;
 800474c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004750:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004754:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fd fca8 	bl	80020c0 <HAL_GetTick>
 8004770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004774:	e00c      	b.n	8004790 <HAL_RCC_OscConfig+0xc70>
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477c:	f7fd fca0 	bl	80020c0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e1fd      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800479c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	fa93 f2a3 	rbit	r2, r3
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047b4:	601a      	str	r2, [r3, #0]
  return result;
 80047b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80047be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d102      	bne.n	80047da <HAL_RCC_OscConfig+0xcba>
 80047d4:	4bb0      	ldr	r3, [pc, #704]	; (8004a98 <HAL_RCC_OscConfig+0xf78>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	e027      	b.n	800482a <HAL_RCC_OscConfig+0xd0a>
 80047da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	fa93 f2a3 	rbit	r2, r3
 80047f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004804:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004812:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	fa93 f2a3 	rbit	r2, r3
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	4b9c      	ldr	r3, [pc, #624]	; (8004a98 <HAL_RCC_OscConfig+0xf78>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800482e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004832:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004836:	6011      	str	r1, [r2, #0]
 8004838:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800483c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	fa92 f1a2 	rbit	r1, r2
 8004846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800484a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800484e:	6011      	str	r1, [r2, #0]
  return result;
 8004850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004854:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	fab2 f282 	clz	r2, r2
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	f042 0220 	orr.w	r2, r2, #32
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	f002 021f 	and.w	r2, r2, #31
 800486a:	2101      	movs	r1, #1
 800486c:	fa01 f202 	lsl.w	r2, r1, r2
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d182      	bne.n	800477c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004876:	4b88      	ldr	r3, [pc, #544]	; (8004a98 <HAL_RCC_OscConfig+0xf78>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800487e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	430b      	orrs	r3, r1
 8004898:	497f      	ldr	r1, [pc, #508]	; (8004a98 <HAL_RCC_OscConfig+0xf78>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
 800489e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80048a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	fa93 f2a3 	rbit	r2, r3
 80048ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80048c2:	601a      	str	r2, [r3, #0]
  return result;
 80048c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80048cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	461a      	mov	r2, r3
 80048e0:	2301      	movs	r3, #1
 80048e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fd fbec 	bl	80020c0 <HAL_GetTick>
 80048e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ec:	e009      	b.n	8004902 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fd fbe7 	bl	80020c0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e144      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
 8004902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004906:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800490a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800490e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004914:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	fa93 f2a3 	rbit	r2, r3
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004926:	601a      	str	r2, [r3, #0]
  return result;
 8004928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d102      	bne.n	800494c <HAL_RCC_OscConfig+0xe2c>
 8004946:	4b54      	ldr	r3, [pc, #336]	; (8004a98 <HAL_RCC_OscConfig+0xf78>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	e027      	b.n	800499c <HAL_RCC_OscConfig+0xe7c>
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	fa93 f2a3 	rbit	r2, r3
 8004968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800497a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004992:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_OscConfig+0xf78>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80049a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049a8:	6011      	str	r1, [r2, #0]
 80049aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	fa92 f1a2 	rbit	r1, r2
 80049b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80049c0:	6011      	str	r1, [r2, #0]
  return result;
 80049c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	fab2 f282 	clz	r2, r2
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	f042 0220 	orr.w	r2, r2, #32
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	f002 021f 	and.w	r2, r2, #31
 80049dc:	2101      	movs	r1, #1
 80049de:	fa01 f202 	lsl.w	r2, r1, r2
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d082      	beq.n	80048ee <HAL_RCC_OscConfig+0xdce>
 80049e8:	e0cf      	b.n	8004b8a <HAL_RCC_OscConfig+0x106a>
 80049ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80049f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	fa93 f2a3 	rbit	r2, r3
 8004a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a0e:	601a      	str	r2, [r3, #0]
  return result;
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004a18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fd fb46 	bl	80020c0 <HAL_GetTick>
 8004a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a38:	e009      	b.n	8004a4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fd fb41 	bl	80020c0 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e09e      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
 8004a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	fa93 f2a3 	rbit	r2, r3
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a72:	601a      	str	r2, [r3, #0]
  return result;
 8004a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d104      	bne.n	8004a9c <HAL_RCC_OscConfig+0xf7c>
 8004a92:	4b01      	ldr	r3, [pc, #4]	; (8004a98 <HAL_RCC_OscConfig+0xf78>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	e029      	b.n	8004aec <HAL_RCC_OscConfig+0xfcc>
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	fa93 f2a3 	rbit	r2, r3
 8004ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	fa93 f2a3 	rbit	r2, r3
 8004ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCC_OscConfig+0x1078>)
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004af0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004af4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004af8:	6011      	str	r1, [r2, #0]
 8004afa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004afe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	fa92 f1a2 	rbit	r1, r2
 8004b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b10:	6011      	str	r1, [r2, #0]
  return result;
 8004b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	fab2 f282 	clz	r2, r2
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	f042 0220 	orr.w	r2, r2, #32
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	f002 021f 	and.w	r2, r2, #31
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d180      	bne.n	8004a3a <HAL_RCC_OscConfig+0xf1a>
 8004b38:	e027      	b.n	8004b8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e01e      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <HAL_RCC_OscConfig+0x1078>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d10b      	bne.n	8004b86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b09e      	sub	sp, #120	; 0x78
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e162      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b90      	ldr	r3, [pc, #576]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d910      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b8d      	ldr	r3, [pc, #564]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 0207 	bic.w	r2, r3, #7
 8004bca:	498b      	ldr	r1, [pc, #556]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b89      	ldr	r3, [pc, #548]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e14a      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	4b82      	ldr	r3, [pc, #520]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	497f      	ldr	r1, [pc, #508]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80dc 	beq.w	8004dc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d13c      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xf6>
 8004c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c28:	fab3 f383 	clz	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d102      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xa6>
 8004c3c:	4b6f      	ldr	r3, [pc, #444]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	e00f      	b.n	8004c62 <HAL_RCC_ClockConfig+0xc6>
 8004c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8004c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c54:	663b      	str	r3, [r7, #96]	; 0x60
 8004c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c5e:	4b67      	ldr	r3, [pc, #412]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c66:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c6a:	fa92 f2a2 	rbit	r2, r2
 8004c6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c72:	fab2 f282 	clz	r2, r2
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	f042 0220 	orr.w	r2, r2, #32
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f002 021f 	and.w	r2, r2, #31
 8004c82:	2101      	movs	r1, #1
 8004c84:	fa01 f202 	lsl.w	r2, r1, r2
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d17b      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0f3      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d13c      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x178>
 8004c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d102      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x128>
 8004cbe:	4b4f      	ldr	r3, [pc, #316]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	e00f      	b.n	8004ce4 <HAL_RCC_ClockConfig+0x148>
 8004cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce0:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ce8:	63ba      	str	r2, [r7, #56]	; 0x38
 8004cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cec:	fa92 f2a2 	rbit	r2, r2
 8004cf0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf4:	fab2 f282 	clz	r2, r2
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	f042 0220 	orr.w	r2, r2, #32
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	f002 021f 	and.w	r2, r2, #31
 8004d04:	2101      	movs	r1, #1
 8004d06:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d13a      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0b2      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2de>
 8004d14:	2302      	movs	r3, #2
 8004d16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x1a0>
 8004d36:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	e00d      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1bc>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	fa93 f3a3 	rbit	r3, r3
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	2302      	movs	r3, #2
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2202      	movs	r2, #2
 8004d5a:	61ba      	str	r2, [r7, #24]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	fa92 f2a2 	rbit	r2, r2
 8004d62:	617a      	str	r2, [r7, #20]
  return result;
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	fab2 f282 	clz	r2, r2
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	f042 0220 	orr.w	r2, r2, #32
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	f002 021f 	and.w	r2, r2, #31
 8004d76:	2101      	movs	r1, #1
 8004d78:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e079      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f023 0203 	bic.w	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	491a      	ldr	r1, [pc, #104]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d98:	f7fd f992 	bl	80020c0 <HAL_GetTick>
 8004d9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da0:	f7fd f98e 	bl	80020c0 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e061      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <HAL_RCC_ClockConfig+0x260>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 020c 	and.w	r2, r3, #12
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d1eb      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d214      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 0207 	bic.w	r2, r3, #7
 8004dde:	4906      	ldr	r1, [pc, #24]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <HAL_RCC_ClockConfig+0x25c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e040      	b.n	8004e7a <HAL_RCC_ClockConfig+0x2de>
 8004df8:	40022000 	.word	0x40022000
 8004dfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <HAL_RCC_ClockConfig+0x2e8>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	491a      	ldr	r1, [pc, #104]	; (8004e84 <HAL_RCC_ClockConfig+0x2e8>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2a:	4b16      	ldr	r3, [pc, #88]	; (8004e84 <HAL_RCC_ClockConfig+0x2e8>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4912      	ldr	r1, [pc, #72]	; (8004e84 <HAL_RCC_ClockConfig+0x2e8>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e3e:	f000 f829 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e42:	4601      	mov	r1, r0
 8004e44:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <HAL_RCC_ClockConfig+0x2e8>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4c:	22f0      	movs	r2, #240	; 0xf0
 8004e4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	fa92 f2a2 	rbit	r2, r2
 8004e56:	60fa      	str	r2, [r7, #12]
  return result;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	fab2 f282 	clz	r2, r2
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	40d3      	lsrs	r3, r2
 8004e62:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <HAL_RCC_ClockConfig+0x2ec>)
 8004e64:	5cd3      	ldrb	r3, [r2, r3]
 8004e66:	fa21 f303 	lsr.w	r3, r1, r3
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <HAL_RCC_ClockConfig+0x2f0>)
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004e6e:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <HAL_RCC_ClockConfig+0x2f4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fd f8e0 	bl	8002038 <HAL_InitTick>
  
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3778      	adds	r7, #120	; 0x78
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	08009e50 	.word	0x08009e50
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	20000004 	.word	0x20000004

08004e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b08b      	sub	sp, #44	; 0x2c
 8004e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004eae:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x36>
 8004ec2:	e03c      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ec6:	623b      	str	r3, [r7, #32]
      break;
 8004ec8:	e03c      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004ed0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004ed4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	fa92 f2a2 	rbit	r2, r2
 8004edc:	607a      	str	r2, [r7, #4]
  return result;
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	fab2 f282 	clz	r2, r2
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	40d3      	lsrs	r3, r2
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004eee:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	220f      	movs	r2, #15
 8004ef8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	fa92 f2a2 	rbit	r2, r2
 8004f00:	60fa      	str	r2, [r7, #12]
  return result;
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	fab2 f282 	clz	r2, r2
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	40d3      	lsrs	r3, r2
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f0e:	5cd3      	ldrb	r3, [r2, r3]
 8004f10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f1c:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	e004      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	623b      	str	r3, [r7, #32]
      break;
 8004f3c:	e002      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f40:	623b      	str	r3, [r7, #32]
      break;
 8004f42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f44:	6a3b      	ldr	r3, [r7, #32]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	372c      	adds	r7, #44	; 0x2c
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	007a1200 	.word	0x007a1200
 8004f5c:	08009e68 	.word	0x08009e68
 8004f60:	08009e78 	.word	0x08009e78
 8004f64:	003d0900 	.word	0x003d0900

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000

08004f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004f86:	f7ff ffef 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	fa92 f2a2 	rbit	r2, r2
 8004fa0:	603a      	str	r2, [r7, #0]
  return result;
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	fab2 f282 	clz	r2, r2
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	40d3      	lsrs	r3, r2
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	08009e60 	.word	0x08009e60

08004fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004fca:	f7ff ffcd 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fce:	4601      	mov	r1, r0
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004fd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004fdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	fa92 f2a2 	rbit	r2, r2
 8004fe4:	603a      	str	r2, [r7, #0]
  return result;
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	fab2 f282 	clz	r2, r2
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	40d3      	lsrs	r3, r2
 8004ff0:	4a04      	ldr	r2, [pc, #16]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ff2:	5cd3      	ldrb	r3, [r2, r3]
 8004ff4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	08009e60 	.word	0x08009e60

08005008 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b092      	sub	sp, #72	; 0x48
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005018:	2300      	movs	r3, #0
 800501a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80d4 	beq.w	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502c:	4b4e      	ldr	r3, [pc, #312]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10e      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005038:	4b4b      	ldr	r3, [pc, #300]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	4a4a      	ldr	r2, [pc, #296]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005042:	61d3      	str	r3, [r2, #28]
 8005044:	4b48      	ldr	r3, [pc, #288]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005056:	4b45      	ldr	r3, [pc, #276]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d118      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005062:	4b42      	ldr	r3, [pc, #264]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a41      	ldr	r2, [pc, #260]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506e:	f7fd f827 	bl	80020c0 <HAL_GetTick>
 8005072:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	e008      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005076:	f7fd f823 	bl	80020c0 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	; 0x64
 8005082:	d901      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e169      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	4b38      	ldr	r3, [pc, #224]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005094:	4b34      	ldr	r3, [pc, #208]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800509e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8084 	beq.w	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d07c      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b4:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	461a      	mov	r2, r3
 80050de:	2301      	movs	r3, #1
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80050f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f2:	fab3 f383 	clz	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	461a      	mov	r2, r3
 8005102:	2300      	movs	r3, #0
 8005104:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800510c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d04b      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005116:	f7fc ffd3 	bl	80020c0 <HAL_GetTick>
 800511a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fc ffcf 	bl	80020c0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e113      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005134:	2302      	movs	r3, #2
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
 8005140:	2302      	movs	r3, #2
 8005142:	623b      	str	r3, [r7, #32]
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	fa93 f3a3 	rbit	r3, r3
 800514a:	61fb      	str	r3, [r7, #28]
  return result;
 800514c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d108      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005162:	4b01      	ldr	r3, [pc, #4]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	e00d      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
 8005170:	10908100 	.word	0x10908100
 8005174:	2302      	movs	r3, #2
 8005176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	fa93 f3a3 	rbit	r3, r3
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	4b78      	ldr	r3, [pc, #480]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2202      	movs	r2, #2
 8005186:	613a      	str	r2, [r7, #16]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	fa92 f2a2 	rbit	r2, r2
 800518e:	60fa      	str	r2, [r7, #12]
  return result;
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	fab2 f282 	clz	r2, r2
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	f002 021f 	and.w	r2, r2, #31
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f202 	lsl.w	r2, r1, r2
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0b7      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80051ae:	4b6d      	ldr	r3, [pc, #436]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	496a      	ldr	r1, [pc, #424]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	4b66      	ldr	r3, [pc, #408]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4a65      	ldr	r2, [pc, #404]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051e0:	4b60      	ldr	r3, [pc, #384]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	f023 0203 	bic.w	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	495d      	ldr	r1, [pc, #372]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051fe:	4b59      	ldr	r3, [pc, #356]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4956      	ldr	r1, [pc, #344]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800521c:	4b51      	ldr	r3, [pc, #324]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	494e      	ldr	r1, [pc, #312]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800522a:	4313      	orrs	r3, r2
 800522c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800523a:	4b4a      	ldr	r3, [pc, #296]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	f023 0210 	bic.w	r2, r3, #16
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	4947      	ldr	r1, [pc, #284]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005258:	4b42      	ldr	r3, [pc, #264]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	493f      	ldr	r1, [pc, #252]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005276:	4b3b      	ldr	r3, [pc, #236]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f023 0220 	bic.w	r2, r3, #32
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	4938      	ldr	r1, [pc, #224]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005284:	4313      	orrs	r3, r2
 8005286:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005294:	4b33      	ldr	r3, [pc, #204]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	4930      	ldr	r1, [pc, #192]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052b2:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	4929      	ldr	r1, [pc, #164]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052d0:	4b24      	ldr	r3, [pc, #144]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	4921      	ldr	r1, [pc, #132]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d008      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	491a      	ldr	r1, [pc, #104]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800530c:	4b15      	ldr	r3, [pc, #84]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	4912      	ldr	r1, [pc, #72]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800531a:	4313      	orrs	r3, r2
 800531c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	490b      	ldr	r1, [pc, #44]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	4903      	ldr	r1, [pc, #12]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005356:	4313      	orrs	r3, r2
 8005358:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3748      	adds	r7, #72	; 0x48
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000

08005368 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e09d      	b.n	80054b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538a:	d009      	beq.n	80053a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	61da      	str	r2, [r3, #28]
 8005392:	e005      	b.n	80053a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fc fa20 	bl	8001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053e0:	d902      	bls.n	80053e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e002      	b.n	80053ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053f6:	d007      	beq.n	8005408 <HAL_SPI_Init+0xa0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005400:	d002      	beq.n	8005408 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	ea42 0103 	orr.w	r1, r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 0204 	and.w	r2, r3, #4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005484:	ea42 0103 	orr.w	r1, r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b08a      	sub	sp, #40	; 0x28
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054cc:	2301      	movs	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x26>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e1fb      	b.n	80058dc <HAL_SPI_TransmitReceive+0x41e>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ec:	f7fc fde8 	bl	80020c0 <HAL_GetTick>
 80054f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005500:	887b      	ldrh	r3, [r7, #2]
 8005502:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005504:	887b      	ldrh	r3, [r7, #2]
 8005506:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005508:	7efb      	ldrb	r3, [r7, #27]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d00e      	beq.n	800552c <HAL_SPI_TransmitReceive+0x6e>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005514:	d106      	bne.n	8005524 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <HAL_SPI_TransmitReceive+0x66>
 800551e:	7efb      	ldrb	r3, [r7, #27]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d003      	beq.n	800552c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005524:	2302      	movs	r3, #2
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800552a:	e1cd      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_SPI_TransmitReceive+0x80>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_SPI_TransmitReceive+0x80>
 8005538:	887b      	ldrh	r3, [r7, #2]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005544:	e1c0      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b04      	cmp	r3, #4
 8005550:	d003      	beq.n	800555a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2205      	movs	r2, #5
 8005556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	887a      	ldrh	r2, [r7, #2]
 800556a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	887a      	ldrh	r2, [r7, #2]
 8005580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	887a      	ldrh	r2, [r7, #2]
 8005586:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800559c:	d802      	bhi.n	80055a4 <HAL_SPI_TransmitReceive+0xe6>
 800559e:	8a3b      	ldrh	r3, [r7, #16]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d908      	bls.n	80055b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055b2:	605a      	str	r2, [r3, #4]
 80055b4:	e007      	b.n	80055c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d007      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ec:	d97c      	bls.n	80056e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x13e>
 80055f6:	8a7b      	ldrh	r3, [r7, #18]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d169      	bne.n	80056d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005620:	e056      	b.n	80056d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d11b      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x1aa>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <HAL_SPI_TransmitReceive+0x1aa>
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	2b01      	cmp	r3, #1
 800563e:	d113      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	1c9a      	adds	r2, r3, #2
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d11c      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x1f2>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d016      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	b292      	uxth	r2, r2
 800568e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	1c9a      	adds	r2, r3, #2
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ac:	2301      	movs	r3, #1
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056b0:	f7fc fd06 	bl	80020c0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056bc:	429a      	cmp	r2, r3
 80056be:	d807      	bhi.n	80056d0 <HAL_SPI_TransmitReceive+0x212>
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d003      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056ce:	e0fb      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1a3      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x164>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d19d      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x164>
 80056e6:	e0df      	b.n	80058a8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x23a>
 80056f0:	8a7b      	ldrh	r3, [r7, #18]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	f040 80cb 	bne.w	800588e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d912      	bls.n	8005728 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	881a      	ldrh	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	1c9a      	adds	r2, r3, #2
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b02      	subs	r3, #2
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005726:	e0b2      	b.n	800588e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	330c      	adds	r3, #12
 8005732:	7812      	ldrb	r2, [r2, #0]
 8005734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800574e:	e09e      	b.n	800588e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b02      	cmp	r3, #2
 800575c:	d134      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x30a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d02f      	beq.n	80057c8 <HAL_SPI_TransmitReceive+0x30a>
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	2b01      	cmp	r3, #1
 800576c:	d12c      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d912      	bls.n	800579e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	881a      	ldrh	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b02      	subs	r3, #2
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800579c:	e012      	b.n	80057c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	330c      	adds	r3, #12
 80057a8:	7812      	ldrb	r2, [r2, #0]
 80057aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d148      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x3aa>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d042      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d923      	bls.n	8005836 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	b292      	uxth	r2, r2
 80057fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	1c9a      	adds	r2, r3, #2
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b02      	subs	r3, #2
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d81f      	bhi.n	8005864 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	e016      	b.n	8005864 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f103 020c 	add.w	r2, r3, #12
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005868:	f7fc fc2a 	bl	80020c0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005874:	429a      	cmp	r2, r3
 8005876:	d803      	bhi.n	8005880 <HAL_SPI_TransmitReceive+0x3c2>
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d102      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x3c8>
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800588c:	e01c      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	f47f af5b 	bne.w	8005750 <HAL_SPI_TransmitReceive+0x292>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f47f af54 	bne.w	8005750 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f937 	bl	8005b20 <SPI_EndRxTxTransaction>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d006      	beq.n	80058c6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	661a      	str	r2, [r3, #96]	; 0x60
 80058c4:	e000      	b.n	80058c8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80058c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3728      	adds	r7, #40	; 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058f4:	f7fc fbe4 	bl	80020c0 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	4413      	add	r3, r2
 8005902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005904:	f7fc fbdc 	bl	80020c0 <HAL_GetTick>
 8005908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800590a:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	015b      	lsls	r3, r3, #5
 8005910:	0d1b      	lsrs	r3, r3, #20
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	fb02 f303 	mul.w	r3, r2, r3
 8005918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800591a:	e054      	b.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d050      	beq.n	80059c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005924:	f7fc fbcc 	bl	80020c0 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	429a      	cmp	r2, r3
 8005932:	d902      	bls.n	800593a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d13d      	bne.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005952:	d111      	bne.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595c:	d004      	beq.n	8005968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005966:	d107      	bne.n	8005978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005980:	d10f      	bne.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e017      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d19b      	bne.n	800591c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000000 	.word	0x20000000

080059f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a06:	f7fc fb5b 	bl	80020c0 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	4413      	add	r3, r2
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a16:	f7fc fb53 	bl	80020c0 <HAL_GetTick>
 8005a1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a24:	4b3d      	ldr	r3, [pc, #244]	; (8005b1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	00da      	lsls	r2, r3, #3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	0d1b      	lsrs	r3, r3, #20
 8005a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a3c:	e060      	b.n	8005b00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a44:	d107      	bne.n	8005a56 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d050      	beq.n	8005b00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a5e:	f7fc fb2f 	bl	80020c0 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d902      	bls.n	8005a74 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d13d      	bne.n	8005af0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8c:	d111      	bne.n	8005ab2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a96:	d004      	beq.n	8005aa2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa0:	d107      	bne.n	8005ab2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aba:	d10f      	bne.n	8005adc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ada:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e010      	b.n	8005b12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d196      	bne.n	8005a3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000000 	.word	0x20000000

08005b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ff5b 	bl	80059f4 <SPI_WaitFifoStateUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d007      	beq.n	8005b54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e027      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff fec0 	bl	80058e4 <SPI_WaitFlagStateUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e014      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff34 	bl	80059f4 <SPI_WaitFifoStateUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e000      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e049      	b.n	8005c52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fc f8b6 	bl	8001d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 fa4a 	bl	8006084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_TIM_PWM_Start+0x24>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e03c      	b.n	8005cfa <HAL_TIM_PWM_Start+0x9e>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d109      	bne.n	8005c9a <HAL_TIM_PWM_Start+0x3e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e02f      	b.n	8005cfa <HAL_TIM_PWM_Start+0x9e>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d109      	bne.n	8005cb4 <HAL_TIM_PWM_Start+0x58>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e022      	b.n	8005cfa <HAL_TIM_PWM_Start+0x9e>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d109      	bne.n	8005cce <HAL_TIM_PWM_Start+0x72>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	e015      	b.n	8005cfa <HAL_TIM_PWM_Start+0x9e>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b10      	cmp	r3, #16
 8005cd2:	d109      	bne.n	8005ce8 <HAL_TIM_PWM_Start+0x8c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e008      	b.n	8005cfa <HAL_TIM_PWM_Start+0x9e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	bf14      	ite	ne
 8005cf4:	2301      	movne	r3, #1
 8005cf6:	2300      	moveq	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e097      	b.n	8005e32 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Start+0xb6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d10:	e023      	b.n	8005d5a <HAL_TIM_PWM_Start+0xfe>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_PWM_Start+0xc6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d20:	e01b      	b.n	8005d5a <HAL_TIM_PWM_Start+0xfe>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_PWM_Start+0xd6>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d30:	e013      	b.n	8005d5a <HAL_TIM_PWM_Start+0xfe>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_PWM_Start+0xe6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d40:	e00b      	b.n	8005d5a <HAL_TIM_PWM_Start+0xfe>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_PWM_Start+0xf6>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	e003      	b.n	8005d5a <HAL_TIM_PWM_Start+0xfe>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fcf4 	bl	8006750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a33      	ldr	r2, [pc, #204]	; (8005e3c <HAL_TIM_PWM_Start+0x1e0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d013      	beq.n	8005d9a <HAL_TIM_PWM_Start+0x13e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a32      	ldr	r2, [pc, #200]	; (8005e40 <HAL_TIM_PWM_Start+0x1e4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00e      	beq.n	8005d9a <HAL_TIM_PWM_Start+0x13e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a30      	ldr	r2, [pc, #192]	; (8005e44 <HAL_TIM_PWM_Start+0x1e8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_TIM_PWM_Start+0x13e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2f      	ldr	r2, [pc, #188]	; (8005e48 <HAL_TIM_PWM_Start+0x1ec>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d004      	beq.n	8005d9a <HAL_TIM_PWM_Start+0x13e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2d      	ldr	r2, [pc, #180]	; (8005e4c <HAL_TIM_PWM_Start+0x1f0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_PWM_Start+0x142>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <HAL_TIM_PWM_Start+0x144>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005db2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <HAL_TIM_PWM_Start+0x1e0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d018      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x194>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d013      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x194>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a20      	ldr	r2, [pc, #128]	; (8005e50 <HAL_TIM_PWM_Start+0x1f4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00e      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x194>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <HAL_TIM_PWM_Start+0x1f8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d009      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x194>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <HAL_TIM_PWM_Start+0x1e4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_TIM_PWM_Start+0x194>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <HAL_TIM_PWM_Start+0x1e8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d115      	bne.n	8005e1c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <HAL_TIM_PWM_Start+0x1fc>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d015      	beq.n	8005e2e <HAL_TIM_PWM_Start+0x1d2>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d011      	beq.n	8005e2e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	e008      	b.n	8005e2e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e000      	b.n	8005e30 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	00010007 	.word	0x00010007

08005e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0ff      	b.n	800607a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b14      	cmp	r3, #20
 8005e86:	f200 80f0 	bhi.w	800606a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	0800606b 	.word	0x0800606b
 8005e98:	0800606b 	.word	0x0800606b
 8005e9c:	0800606b 	.word	0x0800606b
 8005ea0:	08005f25 	.word	0x08005f25
 8005ea4:	0800606b 	.word	0x0800606b
 8005ea8:	0800606b 	.word	0x0800606b
 8005eac:	0800606b 	.word	0x0800606b
 8005eb0:	08005f67 	.word	0x08005f67
 8005eb4:	0800606b 	.word	0x0800606b
 8005eb8:	0800606b 	.word	0x0800606b
 8005ebc:	0800606b 	.word	0x0800606b
 8005ec0:	08005fa7 	.word	0x08005fa7
 8005ec4:	0800606b 	.word	0x0800606b
 8005ec8:	0800606b 	.word	0x0800606b
 8005ecc:	0800606b 	.word	0x0800606b
 8005ed0:	08005fe9 	.word	0x08005fe9
 8005ed4:	0800606b 	.word	0x0800606b
 8005ed8:	0800606b 	.word	0x0800606b
 8005edc:	0800606b 	.word	0x0800606b
 8005ee0:	08006029 	.word	0x08006029
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 f95a 	bl	80061a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0208 	orr.w	r2, r2, #8
 8005efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0204 	bic.w	r2, r2, #4
 8005f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6999      	ldr	r1, [r3, #24]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	619a      	str	r2, [r3, #24]
      break;
 8005f22:	e0a5      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f9ca 	bl	80062c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6999      	ldr	r1, [r3, #24]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	021a      	lsls	r2, r3, #8
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	619a      	str	r2, [r3, #24]
      break;
 8005f64:	e084      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fa33 	bl	80063d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0208 	orr.w	r2, r2, #8
 8005f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0204 	bic.w	r2, r2, #4
 8005f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69d9      	ldr	r1, [r3, #28]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	61da      	str	r2, [r3, #28]
      break;
 8005fa4:	e064      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fa9b 	bl	80064e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69d9      	ldr	r1, [r3, #28]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	021a      	lsls	r2, r3, #8
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	61da      	str	r2, [r3, #28]
      break;
 8005fe6:	e043      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fae4 	bl	80065bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0208 	orr.w	r2, r2, #8
 8006002:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0204 	bic.w	r2, r2, #4
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006026:	e023      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fb28 	bl	8006684 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006068:	e002      	b.n	8006070 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
      break;
 800606e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop

08006084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3c      	ldr	r2, [pc, #240]	; (8006188 <TIM_Base_SetConfig+0x104>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00f      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a2:	d00b      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a39      	ldr	r2, [pc, #228]	; (800618c <TIM_Base_SetConfig+0x108>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a38      	ldr	r2, [pc, #224]	; (8006190 <TIM_Base_SetConfig+0x10c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a37      	ldr	r2, [pc, #220]	; (8006194 <TIM_Base_SetConfig+0x110>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d108      	bne.n	80060ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2d      	ldr	r2, [pc, #180]	; (8006188 <TIM_Base_SetConfig+0x104>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01b      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d017      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2a      	ldr	r2, [pc, #168]	; (800618c <TIM_Base_SetConfig+0x108>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a29      	ldr	r2, [pc, #164]	; (8006190 <TIM_Base_SetConfig+0x10c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00f      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a28      	ldr	r2, [pc, #160]	; (8006194 <TIM_Base_SetConfig+0x110>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00b      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a27      	ldr	r2, [pc, #156]	; (8006198 <TIM_Base_SetConfig+0x114>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a26      	ldr	r2, [pc, #152]	; (800619c <TIM_Base_SetConfig+0x118>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a25      	ldr	r2, [pc, #148]	; (80061a0 <TIM_Base_SetConfig+0x11c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a10      	ldr	r2, [pc, #64]	; (8006188 <TIM_Base_SetConfig+0x104>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00f      	beq.n	800616c <TIM_Base_SetConfig+0xe8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a11      	ldr	r2, [pc, #68]	; (8006194 <TIM_Base_SetConfig+0x110>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00b      	beq.n	800616c <TIM_Base_SetConfig+0xe8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <TIM_Base_SetConfig+0x114>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_Base_SetConfig+0xe8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a0f      	ldr	r2, [pc, #60]	; (800619c <TIM_Base_SetConfig+0x118>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_Base_SetConfig+0xe8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a0e      	ldr	r2, [pc, #56]	; (80061a0 <TIM_Base_SetConfig+0x11c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d103      	bne.n	8006174 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	615a      	str	r2, [r3, #20]
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40012c00 	.word	0x40012c00
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40013400 	.word	0x40013400
 8006198:	40014000 	.word	0x40014000
 800619c:	40014400 	.word	0x40014400
 80061a0:	40014800 	.word	0x40014800

080061a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0302 	bic.w	r3, r3, #2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a2c      	ldr	r2, [pc, #176]	; (80062b0 <TIM_OC1_SetConfig+0x10c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00f      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a2b      	ldr	r2, [pc, #172]	; (80062b4 <TIM_OC1_SetConfig+0x110>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00b      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <TIM_OC1_SetConfig+0x114>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a29      	ldr	r2, [pc, #164]	; (80062bc <TIM_OC1_SetConfig+0x118>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a28      	ldr	r2, [pc, #160]	; (80062c0 <TIM_OC1_SetConfig+0x11c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10c      	bne.n	800623e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0308 	bic.w	r3, r3, #8
 800622a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f023 0304 	bic.w	r3, r3, #4
 800623c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <TIM_OC1_SetConfig+0x10c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00f      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <TIM_OC1_SetConfig+0x110>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00b      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <TIM_OC1_SetConfig+0x114>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a18      	ldr	r2, [pc, #96]	; (80062bc <TIM_OC1_SetConfig+0x118>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <TIM_OC1_SetConfig+0x11c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d111      	bne.n	800628a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800626c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800

080062c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0210 	bic.w	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0320 	bic.w	r3, r3, #32
 8006312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a28      	ldr	r2, [pc, #160]	; (80063c4 <TIM_OC2_SetConfig+0x100>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_OC2_SetConfig+0x6c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a27      	ldr	r2, [pc, #156]	; (80063c8 <TIM_OC2_SetConfig+0x104>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10d      	bne.n	800634c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <TIM_OC2_SetConfig+0x100>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00f      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <TIM_OC2_SetConfig+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <TIM_OC2_SetConfig+0x108>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a1a      	ldr	r2, [pc, #104]	; (80063d0 <TIM_OC2_SetConfig+0x10c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a19      	ldr	r2, [pc, #100]	; (80063d4 <TIM_OC2_SetConfig+0x110>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d113      	bne.n	800639c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800637a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006382:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40013400 	.word	0x40013400
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400
 80063d4:	40014800 	.word	0x40014800

080063d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <TIM_OC3_SetConfig+0xfc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC3_SetConfig+0x6a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <TIM_OC3_SetConfig+0x100>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800645c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1c      	ldr	r2, [pc, #112]	; (80064d4 <TIM_OC3_SetConfig+0xfc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00f      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <TIM_OC3_SetConfig+0x100>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1a      	ldr	r2, [pc, #104]	; (80064dc <TIM_OC3_SetConfig+0x104>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a19      	ldr	r2, [pc, #100]	; (80064e0 <TIM_OC3_SetConfig+0x108>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a18      	ldr	r2, [pc, #96]	; (80064e4 <TIM_OC3_SetConfig+0x10c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d113      	bne.n	80064ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	621a      	str	r2, [r3, #32]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40013400 	.word	0x40013400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800

080064e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	031b      	lsls	r3, r3, #12
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <TIM_OC4_SetConfig+0xc0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00f      	beq.n	800656c <TIM_OC4_SetConfig+0x84>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a17      	ldr	r2, [pc, #92]	; (80065ac <TIM_OC4_SetConfig+0xc4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00b      	beq.n	800656c <TIM_OC4_SetConfig+0x84>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <TIM_OC4_SetConfig+0xc8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d007      	beq.n	800656c <TIM_OC4_SetConfig+0x84>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <TIM_OC4_SetConfig+0xcc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_OC4_SetConfig+0x84>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a14      	ldr	r2, [pc, #80]	; (80065b8 <TIM_OC4_SetConfig+0xd0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d109      	bne.n	8006580 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	019b      	lsls	r3, r3, #6
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40013400 	.word	0x40013400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400
 80065b8:	40014800 	.word	0x40014800

080065bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <TIM_OC5_SetConfig+0xb4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00f      	beq.n	8006636 <TIM_OC5_SetConfig+0x7a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a16      	ldr	r2, [pc, #88]	; (8006674 <TIM_OC5_SetConfig+0xb8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00b      	beq.n	8006636 <TIM_OC5_SetConfig+0x7a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a15      	ldr	r2, [pc, #84]	; (8006678 <TIM_OC5_SetConfig+0xbc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <TIM_OC5_SetConfig+0x7a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a14      	ldr	r2, [pc, #80]	; (800667c <TIM_OC5_SetConfig+0xc0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_OC5_SetConfig+0x7a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a13      	ldr	r2, [pc, #76]	; (8006680 <TIM_OC5_SetConfig+0xc4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d109      	bne.n	800664a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	051b      	lsls	r3, r3, #20
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a18      	ldr	r2, [pc, #96]	; (800673c <TIM_OC6_SetConfig+0xb8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00f      	beq.n	8006700 <TIM_OC6_SetConfig+0x7c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a17      	ldr	r2, [pc, #92]	; (8006740 <TIM_OC6_SetConfig+0xbc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00b      	beq.n	8006700 <TIM_OC6_SetConfig+0x7c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a16      	ldr	r2, [pc, #88]	; (8006744 <TIM_OC6_SetConfig+0xc0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d007      	beq.n	8006700 <TIM_OC6_SetConfig+0x7c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a15      	ldr	r2, [pc, #84]	; (8006748 <TIM_OC6_SetConfig+0xc4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d003      	beq.n	8006700 <TIM_OC6_SetConfig+0x7c>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a14      	ldr	r2, [pc, #80]	; (800674c <TIM_OC6_SetConfig+0xc8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d109      	bne.n	8006714 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006706:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	029b      	lsls	r3, r3, #10
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40013400 	.word	0x40013400
 8006744:	40014000 	.word	0x40014000
 8006748:	40014400 	.word	0x40014400
 800674c:	40014800 	.word	0x40014800

08006750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2201      	movs	r2, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1a      	ldr	r2, [r3, #32]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	fa01 f303 	lsl.w	r3, r1, r3
 8006788:	431a      	orrs	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e063      	b.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a2b      	ldr	r2, [pc, #172]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2a      	ldr	r2, [pc, #168]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d108      	bne.n	80067fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006826:	d013      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a18      	ldr	r2, [pc, #96]	; (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a17      	ldr	r2, [pc, #92]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a12      	ldr	r2, [pc, #72]	; (800688c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a13      	ldr	r2, [pc, #76]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10c      	bne.n	800686a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40013400 	.word	0x40013400
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40014000 	.word	0x40014000

0800689c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e040      	b.n	8006930 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fb fb36 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f8c0 	bl	8006a60 <UART_SetConfig>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e022      	b.n	8006930 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa8a 	bl	8006e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fb11 	bl	8006f50 <UART_CheckIdleState>
 800692e:	4603      	mov	r3, r0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800694c:	2b20      	cmp	r3, #32
 800694e:	f040 8082 	bne.w	8006a56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_UART_Transmit+0x26>
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e07a      	b.n	8006a58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_UART_Transmit+0x38>
 800696c:	2302      	movs	r3, #2
 800696e:	e073      	b.n	8006a58 <HAL_UART_Transmit+0x120>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2221      	movs	r2, #33	; 0x21
 8006984:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006986:	f7fb fb9b 	bl	80020c0 <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	88fa      	ldrh	r2, [r7, #6]
 8006990:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	88fa      	ldrh	r2, [r7, #6]
 8006998:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a4:	d108      	bne.n	80069b8 <HAL_UART_Transmit+0x80>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	e003      	b.n	80069c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069c8:	e02d      	b.n	8006a26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	2200      	movs	r2, #0
 80069d2:	2180      	movs	r1, #128	; 0x80
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fb04 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e039      	b.n	8006a58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10b      	bne.n	8006a02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	881a      	ldrh	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069f6:	b292      	uxth	r2, r2
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	3302      	adds	r3, #2
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	e008      	b.n	8006a14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	3301      	adds	r3, #1
 8006a12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1cb      	bne.n	80069ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2140      	movs	r1, #64	; 0x40
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fad0 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e005      	b.n	8006a58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e000      	b.n	8006a58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
  }
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a8e:	f023 030c 	bic.w	r3, r3, #12
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6812      	ldr	r2, [r2, #0]
 8006a96:	6979      	ldr	r1, [r7, #20]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4aa8      	ldr	r2, [pc, #672]	; (8006d7c <UART_SetConfig+0x31c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d120      	bne.n	8006b22 <UART_SetConfig+0xc2>
 8006ae0:	4ba7      	ldr	r3, [pc, #668]	; (8006d80 <UART_SetConfig+0x320>)
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d817      	bhi.n	8006b1c <UART_SetConfig+0xbc>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <UART_SetConfig+0x94>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b17 	.word	0x08006b17
 8006b00:	08006b0b 	.word	0x08006b0b
 8006b04:	2301      	movs	r3, #1
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e0b5      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e0b2      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b10:	2304      	movs	r3, #4
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e0af      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b16:	2308      	movs	r3, #8
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e0ac      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e0a9      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a97      	ldr	r2, [pc, #604]	; (8006d84 <UART_SetConfig+0x324>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d124      	bne.n	8006b76 <UART_SetConfig+0x116>
 8006b2c:	4b94      	ldr	r3, [pc, #592]	; (8006d80 <UART_SetConfig+0x320>)
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b38:	d011      	beq.n	8006b5e <UART_SetConfig+0xfe>
 8006b3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b3e:	d817      	bhi.n	8006b70 <UART_SetConfig+0x110>
 8006b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b44:	d011      	beq.n	8006b6a <UART_SetConfig+0x10a>
 8006b46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4a:	d811      	bhi.n	8006b70 <UART_SetConfig+0x110>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <UART_SetConfig+0xf8>
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b54:	d006      	beq.n	8006b64 <UART_SetConfig+0x104>
 8006b56:	e00b      	b.n	8006b70 <UART_SetConfig+0x110>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	77fb      	strb	r3, [r7, #31]
 8006b5c:	e08b      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	77fb      	strb	r3, [r7, #31]
 8006b62:	e088      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b64:	2304      	movs	r3, #4
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e085      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b6a:	2308      	movs	r3, #8
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e082      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b70:	2310      	movs	r3, #16
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e07f      	b.n	8006c76 <UART_SetConfig+0x216>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a83      	ldr	r2, [pc, #524]	; (8006d88 <UART_SetConfig+0x328>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d124      	bne.n	8006bca <UART_SetConfig+0x16a>
 8006b80:	4b7f      	ldr	r3, [pc, #508]	; (8006d80 <UART_SetConfig+0x320>)
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006b88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b8c:	d011      	beq.n	8006bb2 <UART_SetConfig+0x152>
 8006b8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b92:	d817      	bhi.n	8006bc4 <UART_SetConfig+0x164>
 8006b94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b98:	d011      	beq.n	8006bbe <UART_SetConfig+0x15e>
 8006b9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b9e:	d811      	bhi.n	8006bc4 <UART_SetConfig+0x164>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <UART_SetConfig+0x14c>
 8006ba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ba8:	d006      	beq.n	8006bb8 <UART_SetConfig+0x158>
 8006baa:	e00b      	b.n	8006bc4 <UART_SetConfig+0x164>
 8006bac:	2300      	movs	r3, #0
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e061      	b.n	8006c76 <UART_SetConfig+0x216>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e05e      	b.n	8006c76 <UART_SetConfig+0x216>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e05b      	b.n	8006c76 <UART_SetConfig+0x216>
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	77fb      	strb	r3, [r7, #31]
 8006bc2:	e058      	b.n	8006c76 <UART_SetConfig+0x216>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e055      	b.n	8006c76 <UART_SetConfig+0x216>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a6f      	ldr	r2, [pc, #444]	; (8006d8c <UART_SetConfig+0x32c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d124      	bne.n	8006c1e <UART_SetConfig+0x1be>
 8006bd4:	4b6a      	ldr	r3, [pc, #424]	; (8006d80 <UART_SetConfig+0x320>)
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006bdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006be0:	d011      	beq.n	8006c06 <UART_SetConfig+0x1a6>
 8006be2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006be6:	d817      	bhi.n	8006c18 <UART_SetConfig+0x1b8>
 8006be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bec:	d011      	beq.n	8006c12 <UART_SetConfig+0x1b2>
 8006bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bf2:	d811      	bhi.n	8006c18 <UART_SetConfig+0x1b8>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <UART_SetConfig+0x1a0>
 8006bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfc:	d006      	beq.n	8006c0c <UART_SetConfig+0x1ac>
 8006bfe:	e00b      	b.n	8006c18 <UART_SetConfig+0x1b8>
 8006c00:	2300      	movs	r3, #0
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e037      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c06:	2302      	movs	r3, #2
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e034      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e031      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c12:	2308      	movs	r3, #8
 8006c14:	77fb      	strb	r3, [r7, #31]
 8006c16:	e02e      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e02b      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a5b      	ldr	r2, [pc, #364]	; (8006d90 <UART_SetConfig+0x330>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d124      	bne.n	8006c72 <UART_SetConfig+0x212>
 8006c28:	4b55      	ldr	r3, [pc, #340]	; (8006d80 <UART_SetConfig+0x320>)
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006c30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c34:	d011      	beq.n	8006c5a <UART_SetConfig+0x1fa>
 8006c36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c3a:	d817      	bhi.n	8006c6c <UART_SetConfig+0x20c>
 8006c3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c40:	d011      	beq.n	8006c66 <UART_SetConfig+0x206>
 8006c42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c46:	d811      	bhi.n	8006c6c <UART_SetConfig+0x20c>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <UART_SetConfig+0x1f4>
 8006c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c50:	d006      	beq.n	8006c60 <UART_SetConfig+0x200>
 8006c52:	e00b      	b.n	8006c6c <UART_SetConfig+0x20c>
 8006c54:	2300      	movs	r3, #0
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e00d      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e00a      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c60:	2304      	movs	r3, #4
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e007      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c66:	2308      	movs	r3, #8
 8006c68:	77fb      	strb	r3, [r7, #31]
 8006c6a:	e004      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e001      	b.n	8006c76 <UART_SetConfig+0x216>
 8006c72:	2310      	movs	r3, #16
 8006c74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d15c      	bne.n	8006d3a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006c80:	7ffb      	ldrb	r3, [r7, #31]
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d827      	bhi.n	8006cd6 <UART_SetConfig+0x276>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x22c>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cd7 	.word	0x08006cd7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cd7 	.word	0x08006cd7
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006ccf 	.word	0x08006ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fe f966 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	61b8      	str	r0, [r7, #24]
        break;
 8006cb6:	e013      	b.n	8006ce0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fe f984 	bl	8004fc4 <HAL_RCC_GetPCLK2Freq>
 8006cbc:	61b8      	str	r0, [r7, #24]
        break;
 8006cbe:	e00f      	b.n	8006ce0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc0:	4b34      	ldr	r3, [pc, #208]	; (8006d94 <UART_SetConfig+0x334>)
 8006cc2:	61bb      	str	r3, [r7, #24]
        break;
 8006cc4:	e00c      	b.n	8006ce0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc6:	f7fe f8e5 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8006cca:	61b8      	str	r0, [r7, #24]
        break;
 8006ccc:	e008      	b.n	8006ce0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	61bb      	str	r3, [r7, #24]
        break;
 8006cd4:	e004      	b.n	8006ce0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8006cde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8084 	beq.w	8006df0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	005a      	lsls	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	441a      	add	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2b0f      	cmp	r3, #15
 8006d04:	d916      	bls.n	8006d34 <UART_SetConfig+0x2d4>
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0c:	d212      	bcs.n	8006d34 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f023 030f 	bic.w	r3, r3, #15
 8006d16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	89fb      	ldrh	r3, [r7, #14]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	89fa      	ldrh	r2, [r7, #14]
 8006d30:	60da      	str	r2, [r3, #12]
 8006d32:	e05d      	b.n	8006df0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	77bb      	strb	r3, [r7, #30]
 8006d38:	e05a      	b.n	8006df0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d3a:	7ffb      	ldrb	r3, [r7, #31]
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d836      	bhi.n	8006dae <UART_SetConfig+0x34e>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x2e8>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d75 	.word	0x08006d75
 8006d50:	08006d99 	.word	0x08006d99
 8006d54:	08006daf 	.word	0x08006daf
 8006d58:	08006d9f 	.word	0x08006d9f
 8006d5c:	08006daf 	.word	0x08006daf
 8006d60:	08006daf 	.word	0x08006daf
 8006d64:	08006daf 	.word	0x08006daf
 8006d68:	08006da7 	.word	0x08006da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fe f908 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8006d70:	61b8      	str	r0, [r7, #24]
        break;
 8006d72:	e021      	b.n	8006db8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d74:	f7fe f926 	bl	8004fc4 <HAL_RCC_GetPCLK2Freq>
 8006d78:	61b8      	str	r0, [r7, #24]
        break;
 8006d7a:	e01d      	b.n	8006db8 <UART_SetConfig+0x358>
 8006d7c:	40013800 	.word	0x40013800
 8006d80:	40021000 	.word	0x40021000
 8006d84:	40004400 	.word	0x40004400
 8006d88:	40004800 	.word	0x40004800
 8006d8c:	40004c00 	.word	0x40004c00
 8006d90:	40005000 	.word	0x40005000
 8006d94:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d98:	4b1b      	ldr	r3, [pc, #108]	; (8006e08 <UART_SetConfig+0x3a8>)
 8006d9a:	61bb      	str	r3, [r7, #24]
        break;
 8006d9c:	e00c      	b.n	8006db8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9e:	f7fe f879 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8006da2:	61b8      	str	r0, [r7, #24]
        break;
 8006da4:	e008      	b.n	8006db8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006daa:	61bb      	str	r3, [r7, #24]
        break;
 8006dac:	e004      	b.n	8006db8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	77bb      	strb	r3, [r7, #30]
        break;
 8006db6:	bf00      	nop
    }

    if (pclk != 0U)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	085a      	lsrs	r2, r3, #1
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	441a      	add	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b0f      	cmp	r3, #15
 8006dd8:	d908      	bls.n	8006dec <UART_SetConfig+0x38c>
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de0:	d204      	bcs.n	8006dec <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	60da      	str	r2, [r3, #12]
 8006dea:	e001      	b.n	8006df0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	007a1200 	.word	0x007a1200

08006e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01a      	beq.n	8006f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f0a:	d10a      	bne.n	8006f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f60:	f7fb f8ae 	bl	80020c0 <HAL_GetTick>
 8006f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d10e      	bne.n	8006f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f82d 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e023      	b.n	8006fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d10e      	bne.n	8006fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f817 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e00d      	b.n	8006fda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b09c      	sub	sp, #112	; 0x70
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	e0a5      	b.n	8007140 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	f000 80a1 	beq.w	8007140 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ffe:	f7fb f85f 	bl	80020c0 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800700a:	429a      	cmp	r2, r3
 800700c:	d302      	bcc.n	8007014 <UART_WaitOnFlagUntilTimeout+0x32>
 800700e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007010:	2b00      	cmp	r3, #0
 8007012:	d13e      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007024:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007028:	667b      	str	r3, [r7, #100]	; 0x64
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	461a      	mov	r2, r3
 8007030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007034:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007038:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e6      	bne.n	8007014 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	663b      	str	r3, [r7, #96]	; 0x60
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007066:	64ba      	str	r2, [r7, #72]	; 0x48
 8007068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800706c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e067      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d04f      	beq.n	8007140 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ae:	d147      	bne.n	8007140 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
 80070da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e6      	bne.n	80070ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	613b      	str	r3, [r7, #16]
   return(result);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f023 0301 	bic.w	r3, r3, #1
 8007102:	66bb      	str	r3, [r7, #104]	; 0x68
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800710c:	623a      	str	r2, [r7, #32]
 800710e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	61bb      	str	r3, [r7, #24]
   return(result);
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e5      	bne.n	80070ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e010      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69da      	ldr	r2, [r3, #28]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4013      	ands	r3, r2
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	429a      	cmp	r2, r3
 800715c:	f43f af4a 	beq.w	8006ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3770      	adds	r7, #112	; 0x70
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	2000000c 	.word	0x2000000c

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	; (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	; (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	; (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	; (80071bc <__libc_init_array+0x44>)
 800718c:	f002 fe1a 	bl	8009dc4 <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	0800a264 	.word	0x0800a264
 80071b4:	0800a264 	.word	0x0800a264
 80071b8:	0800a264 	.word	0x0800a264
 80071bc:	0800a268 	.word	0x0800a268

080071c0 <memset>:
 80071c0:	4402      	add	r2, r0
 80071c2:	4603      	mov	r3, r0
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d100      	bne.n	80071ca <memset+0xa>
 80071c8:	4770      	bx	lr
 80071ca:	f803 1b01 	strb.w	r1, [r3], #1
 80071ce:	e7f9      	b.n	80071c4 <memset+0x4>

080071d0 <__cvt>:
 80071d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	ec55 4b10 	vmov	r4, r5, d0
 80071d8:	2d00      	cmp	r5, #0
 80071da:	460e      	mov	r6, r1
 80071dc:	4619      	mov	r1, r3
 80071de:	462b      	mov	r3, r5
 80071e0:	bfbb      	ittet	lt
 80071e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071e6:	461d      	movlt	r5, r3
 80071e8:	2300      	movge	r3, #0
 80071ea:	232d      	movlt	r3, #45	; 0x2d
 80071ec:	700b      	strb	r3, [r1, #0]
 80071ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071f4:	4691      	mov	r9, r2
 80071f6:	f023 0820 	bic.w	r8, r3, #32
 80071fa:	bfbc      	itt	lt
 80071fc:	4622      	movlt	r2, r4
 80071fe:	4614      	movlt	r4, r2
 8007200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007204:	d005      	beq.n	8007212 <__cvt+0x42>
 8007206:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800720a:	d100      	bne.n	800720e <__cvt+0x3e>
 800720c:	3601      	adds	r6, #1
 800720e:	2102      	movs	r1, #2
 8007210:	e000      	b.n	8007214 <__cvt+0x44>
 8007212:	2103      	movs	r1, #3
 8007214:	ab03      	add	r3, sp, #12
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	ab02      	add	r3, sp, #8
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	ec45 4b10 	vmov	d0, r4, r5
 8007220:	4653      	mov	r3, sl
 8007222:	4632      	mov	r2, r6
 8007224:	f000 fdb0 	bl	8007d88 <_dtoa_r>
 8007228:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800722c:	4607      	mov	r7, r0
 800722e:	d102      	bne.n	8007236 <__cvt+0x66>
 8007230:	f019 0f01 	tst.w	r9, #1
 8007234:	d022      	beq.n	800727c <__cvt+0xac>
 8007236:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800723a:	eb07 0906 	add.w	r9, r7, r6
 800723e:	d110      	bne.n	8007262 <__cvt+0x92>
 8007240:	783b      	ldrb	r3, [r7, #0]
 8007242:	2b30      	cmp	r3, #48	; 0x30
 8007244:	d10a      	bne.n	800725c <__cvt+0x8c>
 8007246:	2200      	movs	r2, #0
 8007248:	2300      	movs	r3, #0
 800724a:	4620      	mov	r0, r4
 800724c:	4629      	mov	r1, r5
 800724e:	f7f9 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007252:	b918      	cbnz	r0, 800725c <__cvt+0x8c>
 8007254:	f1c6 0601 	rsb	r6, r6, #1
 8007258:	f8ca 6000 	str.w	r6, [sl]
 800725c:	f8da 3000 	ldr.w	r3, [sl]
 8007260:	4499      	add	r9, r3
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800726e:	b108      	cbz	r0, 8007274 <__cvt+0xa4>
 8007270:	f8cd 900c 	str.w	r9, [sp, #12]
 8007274:	2230      	movs	r2, #48	; 0x30
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	454b      	cmp	r3, r9
 800727a:	d307      	bcc.n	800728c <__cvt+0xbc>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007280:	1bdb      	subs	r3, r3, r7
 8007282:	4638      	mov	r0, r7
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	b004      	add	sp, #16
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	1c59      	adds	r1, r3, #1
 800728e:	9103      	str	r1, [sp, #12]
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e7f0      	b.n	8007276 <__cvt+0xa6>

08007294 <__exponent>:
 8007294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007296:	4603      	mov	r3, r0
 8007298:	2900      	cmp	r1, #0
 800729a:	bfb8      	it	lt
 800729c:	4249      	neglt	r1, r1
 800729e:	f803 2b02 	strb.w	r2, [r3], #2
 80072a2:	bfb4      	ite	lt
 80072a4:	222d      	movlt	r2, #45	; 0x2d
 80072a6:	222b      	movge	r2, #43	; 0x2b
 80072a8:	2909      	cmp	r1, #9
 80072aa:	7042      	strb	r2, [r0, #1]
 80072ac:	dd2a      	ble.n	8007304 <__exponent+0x70>
 80072ae:	f10d 0407 	add.w	r4, sp, #7
 80072b2:	46a4      	mov	ip, r4
 80072b4:	270a      	movs	r7, #10
 80072b6:	46a6      	mov	lr, r4
 80072b8:	460a      	mov	r2, r1
 80072ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80072be:	fb07 1516 	mls	r5, r7, r6, r1
 80072c2:	3530      	adds	r5, #48	; 0x30
 80072c4:	2a63      	cmp	r2, #99	; 0x63
 80072c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80072ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072ce:	4631      	mov	r1, r6
 80072d0:	dcf1      	bgt.n	80072b6 <__exponent+0x22>
 80072d2:	3130      	adds	r1, #48	; 0x30
 80072d4:	f1ae 0502 	sub.w	r5, lr, #2
 80072d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072dc:	1c44      	adds	r4, r0, #1
 80072de:	4629      	mov	r1, r5
 80072e0:	4561      	cmp	r1, ip
 80072e2:	d30a      	bcc.n	80072fa <__exponent+0x66>
 80072e4:	f10d 0209 	add.w	r2, sp, #9
 80072e8:	eba2 020e 	sub.w	r2, r2, lr
 80072ec:	4565      	cmp	r5, ip
 80072ee:	bf88      	it	hi
 80072f0:	2200      	movhi	r2, #0
 80072f2:	4413      	add	r3, r2
 80072f4:	1a18      	subs	r0, r3, r0
 80072f6:	b003      	add	sp, #12
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007302:	e7ed      	b.n	80072e0 <__exponent+0x4c>
 8007304:	2330      	movs	r3, #48	; 0x30
 8007306:	3130      	adds	r1, #48	; 0x30
 8007308:	7083      	strb	r3, [r0, #2]
 800730a:	70c1      	strb	r1, [r0, #3]
 800730c:	1d03      	adds	r3, r0, #4
 800730e:	e7f1      	b.n	80072f4 <__exponent+0x60>

08007310 <_printf_float>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	ed2d 8b02 	vpush	{d8}
 8007318:	b08d      	sub	sp, #52	; 0x34
 800731a:	460c      	mov	r4, r1
 800731c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007320:	4616      	mov	r6, r2
 8007322:	461f      	mov	r7, r3
 8007324:	4605      	mov	r5, r0
 8007326:	f001 fcd5 	bl	8008cd4 <_localeconv_r>
 800732a:	f8d0 a000 	ldr.w	sl, [r0]
 800732e:	4650      	mov	r0, sl
 8007330:	f7f8 ff4e 	bl	80001d0 <strlen>
 8007334:	2300      	movs	r3, #0
 8007336:	930a      	str	r3, [sp, #40]	; 0x28
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	9305      	str	r3, [sp, #20]
 800733c:	f8d8 3000 	ldr.w	r3, [r8]
 8007340:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007344:	3307      	adds	r3, #7
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	f103 0208 	add.w	r2, r3, #8
 800734e:	f8c8 2000 	str.w	r2, [r8]
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800735a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800735e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007362:	9307      	str	r3, [sp, #28]
 8007364:	f8cd 8018 	str.w	r8, [sp, #24]
 8007368:	ee08 0a10 	vmov	s16, r0
 800736c:	4b9f      	ldr	r3, [pc, #636]	; (80075ec <_printf_float+0x2dc>)
 800736e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007372:	f04f 32ff 	mov.w	r2, #4294967295
 8007376:	f7f9 fbd9 	bl	8000b2c <__aeabi_dcmpun>
 800737a:	bb88      	cbnz	r0, 80073e0 <_printf_float+0xd0>
 800737c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007380:	4b9a      	ldr	r3, [pc, #616]	; (80075ec <_printf_float+0x2dc>)
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
 8007386:	f7f9 fbb3 	bl	8000af0 <__aeabi_dcmple>
 800738a:	bb48      	cbnz	r0, 80073e0 <_printf_float+0xd0>
 800738c:	2200      	movs	r2, #0
 800738e:	2300      	movs	r3, #0
 8007390:	4640      	mov	r0, r8
 8007392:	4649      	mov	r1, r9
 8007394:	f7f9 fba2 	bl	8000adc <__aeabi_dcmplt>
 8007398:	b110      	cbz	r0, 80073a0 <_printf_float+0x90>
 800739a:	232d      	movs	r3, #45	; 0x2d
 800739c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a0:	4b93      	ldr	r3, [pc, #588]	; (80075f0 <_printf_float+0x2e0>)
 80073a2:	4894      	ldr	r0, [pc, #592]	; (80075f4 <_printf_float+0x2e4>)
 80073a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073a8:	bf94      	ite	ls
 80073aa:	4698      	movls	r8, r3
 80073ac:	4680      	movhi	r8, r0
 80073ae:	2303      	movs	r3, #3
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	9b05      	ldr	r3, [sp, #20]
 80073b4:	f023 0204 	bic.w	r2, r3, #4
 80073b8:	6022      	str	r2, [r4, #0]
 80073ba:	f04f 0900 	mov.w	r9, #0
 80073be:	9700      	str	r7, [sp, #0]
 80073c0:	4633      	mov	r3, r6
 80073c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f9d8 	bl	800777c <_printf_common>
 80073cc:	3001      	adds	r0, #1
 80073ce:	f040 8090 	bne.w	80074f2 <_printf_float+0x1e2>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	b00d      	add	sp, #52	; 0x34
 80073d8:	ecbd 8b02 	vpop	{d8}
 80073dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	4640      	mov	r0, r8
 80073e6:	4649      	mov	r1, r9
 80073e8:	f7f9 fba0 	bl	8000b2c <__aeabi_dcmpun>
 80073ec:	b140      	cbz	r0, 8007400 <_printf_float+0xf0>
 80073ee:	464b      	mov	r3, r9
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfbc      	itt	lt
 80073f4:	232d      	movlt	r3, #45	; 0x2d
 80073f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073fa:	487f      	ldr	r0, [pc, #508]	; (80075f8 <_printf_float+0x2e8>)
 80073fc:	4b7f      	ldr	r3, [pc, #508]	; (80075fc <_printf_float+0x2ec>)
 80073fe:	e7d1      	b.n	80073a4 <_printf_float+0x94>
 8007400:	6863      	ldr	r3, [r4, #4]
 8007402:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007406:	9206      	str	r2, [sp, #24]
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	d13f      	bne.n	800748c <_printf_float+0x17c>
 800740c:	2306      	movs	r3, #6
 800740e:	6063      	str	r3, [r4, #4]
 8007410:	9b05      	ldr	r3, [sp, #20]
 8007412:	6861      	ldr	r1, [r4, #4]
 8007414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007418:	2300      	movs	r3, #0
 800741a:	9303      	str	r3, [sp, #12]
 800741c:	ab0a      	add	r3, sp, #40	; 0x28
 800741e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007422:	ab09      	add	r3, sp, #36	; 0x24
 8007424:	ec49 8b10 	vmov	d0, r8, r9
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	6022      	str	r2, [r4, #0]
 800742c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007430:	4628      	mov	r0, r5
 8007432:	f7ff fecd 	bl	80071d0 <__cvt>
 8007436:	9b06      	ldr	r3, [sp, #24]
 8007438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800743a:	2b47      	cmp	r3, #71	; 0x47
 800743c:	4680      	mov	r8, r0
 800743e:	d108      	bne.n	8007452 <_printf_float+0x142>
 8007440:	1cc8      	adds	r0, r1, #3
 8007442:	db02      	blt.n	800744a <_printf_float+0x13a>
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	4299      	cmp	r1, r3
 8007448:	dd41      	ble.n	80074ce <_printf_float+0x1be>
 800744a:	f1ab 0b02 	sub.w	fp, fp, #2
 800744e:	fa5f fb8b 	uxtb.w	fp, fp
 8007452:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007456:	d820      	bhi.n	800749a <_printf_float+0x18a>
 8007458:	3901      	subs	r1, #1
 800745a:	465a      	mov	r2, fp
 800745c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007460:	9109      	str	r1, [sp, #36]	; 0x24
 8007462:	f7ff ff17 	bl	8007294 <__exponent>
 8007466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007468:	1813      	adds	r3, r2, r0
 800746a:	2a01      	cmp	r2, #1
 800746c:	4681      	mov	r9, r0
 800746e:	6123      	str	r3, [r4, #16]
 8007470:	dc02      	bgt.n	8007478 <_printf_float+0x168>
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	07d2      	lsls	r2, r2, #31
 8007476:	d501      	bpl.n	800747c <_printf_float+0x16c>
 8007478:	3301      	adds	r3, #1
 800747a:	6123      	str	r3, [r4, #16]
 800747c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007480:	2b00      	cmp	r3, #0
 8007482:	d09c      	beq.n	80073be <_printf_float+0xae>
 8007484:	232d      	movs	r3, #45	; 0x2d
 8007486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748a:	e798      	b.n	80073be <_printf_float+0xae>
 800748c:	9a06      	ldr	r2, [sp, #24]
 800748e:	2a47      	cmp	r2, #71	; 0x47
 8007490:	d1be      	bne.n	8007410 <_printf_float+0x100>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1bc      	bne.n	8007410 <_printf_float+0x100>
 8007496:	2301      	movs	r3, #1
 8007498:	e7b9      	b.n	800740e <_printf_float+0xfe>
 800749a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800749e:	d118      	bne.n	80074d2 <_printf_float+0x1c2>
 80074a0:	2900      	cmp	r1, #0
 80074a2:	6863      	ldr	r3, [r4, #4]
 80074a4:	dd0b      	ble.n	80074be <_printf_float+0x1ae>
 80074a6:	6121      	str	r1, [r4, #16]
 80074a8:	b913      	cbnz	r3, 80074b0 <_printf_float+0x1a0>
 80074aa:	6822      	ldr	r2, [r4, #0]
 80074ac:	07d0      	lsls	r0, r2, #31
 80074ae:	d502      	bpl.n	80074b6 <_printf_float+0x1a6>
 80074b0:	3301      	adds	r3, #1
 80074b2:	440b      	add	r3, r1
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80074b8:	f04f 0900 	mov.w	r9, #0
 80074bc:	e7de      	b.n	800747c <_printf_float+0x16c>
 80074be:	b913      	cbnz	r3, 80074c6 <_printf_float+0x1b6>
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	07d2      	lsls	r2, r2, #31
 80074c4:	d501      	bpl.n	80074ca <_printf_float+0x1ba>
 80074c6:	3302      	adds	r3, #2
 80074c8:	e7f4      	b.n	80074b4 <_printf_float+0x1a4>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e7f2      	b.n	80074b4 <_printf_float+0x1a4>
 80074ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d4:	4299      	cmp	r1, r3
 80074d6:	db05      	blt.n	80074e4 <_printf_float+0x1d4>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	6121      	str	r1, [r4, #16]
 80074dc:	07d8      	lsls	r0, r3, #31
 80074de:	d5ea      	bpl.n	80074b6 <_printf_float+0x1a6>
 80074e0:	1c4b      	adds	r3, r1, #1
 80074e2:	e7e7      	b.n	80074b4 <_printf_float+0x1a4>
 80074e4:	2900      	cmp	r1, #0
 80074e6:	bfd4      	ite	le
 80074e8:	f1c1 0202 	rsble	r2, r1, #2
 80074ec:	2201      	movgt	r2, #1
 80074ee:	4413      	add	r3, r2
 80074f0:	e7e0      	b.n	80074b4 <_printf_float+0x1a4>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	055a      	lsls	r2, r3, #21
 80074f6:	d407      	bmi.n	8007508 <_printf_float+0x1f8>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	4642      	mov	r2, r8
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	d12c      	bne.n	8007560 <_printf_float+0x250>
 8007506:	e764      	b.n	80073d2 <_printf_float+0xc2>
 8007508:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800750c:	f240 80e0 	bls.w	80076d0 <_printf_float+0x3c0>
 8007510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007514:	2200      	movs	r2, #0
 8007516:	2300      	movs	r3, #0
 8007518:	f7f9 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800751c:	2800      	cmp	r0, #0
 800751e:	d034      	beq.n	800758a <_printf_float+0x27a>
 8007520:	4a37      	ldr	r2, [pc, #220]	; (8007600 <_printf_float+0x2f0>)
 8007522:	2301      	movs	r3, #1
 8007524:	4631      	mov	r1, r6
 8007526:	4628      	mov	r0, r5
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	f43f af51 	beq.w	80073d2 <_printf_float+0xc2>
 8007530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007534:	429a      	cmp	r2, r3
 8007536:	db02      	blt.n	800753e <_printf_float+0x22e>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	07d8      	lsls	r0, r3, #31
 800753c:	d510      	bpl.n	8007560 <_printf_float+0x250>
 800753e:	ee18 3a10 	vmov	r3, s16
 8007542:	4652      	mov	r2, sl
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f43f af41 	beq.w	80073d2 <_printf_float+0xc2>
 8007550:	f04f 0800 	mov.w	r8, #0
 8007554:	f104 091a 	add.w	r9, r4, #26
 8007558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800755a:	3b01      	subs	r3, #1
 800755c:	4543      	cmp	r3, r8
 800755e:	dc09      	bgt.n	8007574 <_printf_float+0x264>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	079b      	lsls	r3, r3, #30
 8007564:	f100 8105 	bmi.w	8007772 <_printf_float+0x462>
 8007568:	68e0      	ldr	r0, [r4, #12]
 800756a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800756c:	4298      	cmp	r0, r3
 800756e:	bfb8      	it	lt
 8007570:	4618      	movlt	r0, r3
 8007572:	e730      	b.n	80073d6 <_printf_float+0xc6>
 8007574:	2301      	movs	r3, #1
 8007576:	464a      	mov	r2, r9
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f af27 	beq.w	80073d2 <_printf_float+0xc2>
 8007584:	f108 0801 	add.w	r8, r8, #1
 8007588:	e7e6      	b.n	8007558 <_printf_float+0x248>
 800758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758c:	2b00      	cmp	r3, #0
 800758e:	dc39      	bgt.n	8007604 <_printf_float+0x2f4>
 8007590:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <_printf_float+0x2f0>)
 8007592:	2301      	movs	r3, #1
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f af19 	beq.w	80073d2 <_printf_float+0xc2>
 80075a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075a4:	4313      	orrs	r3, r2
 80075a6:	d102      	bne.n	80075ae <_printf_float+0x29e>
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	07d9      	lsls	r1, r3, #31
 80075ac:	d5d8      	bpl.n	8007560 <_printf_float+0x250>
 80075ae:	ee18 3a10 	vmov	r3, s16
 80075b2:	4652      	mov	r2, sl
 80075b4:	4631      	mov	r1, r6
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b8      	blx	r7
 80075ba:	3001      	adds	r0, #1
 80075bc:	f43f af09 	beq.w	80073d2 <_printf_float+0xc2>
 80075c0:	f04f 0900 	mov.w	r9, #0
 80075c4:	f104 0a1a 	add.w	sl, r4, #26
 80075c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ca:	425b      	negs	r3, r3
 80075cc:	454b      	cmp	r3, r9
 80075ce:	dc01      	bgt.n	80075d4 <_printf_float+0x2c4>
 80075d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d2:	e792      	b.n	80074fa <_printf_float+0x1ea>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4652      	mov	r2, sl
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f aef7 	beq.w	80073d2 <_printf_float+0xc2>
 80075e4:	f109 0901 	add.w	r9, r9, #1
 80075e8:	e7ee      	b.n	80075c8 <_printf_float+0x2b8>
 80075ea:	bf00      	nop
 80075ec:	7fefffff 	.word	0x7fefffff
 80075f0:	08009e8c 	.word	0x08009e8c
 80075f4:	08009e90 	.word	0x08009e90
 80075f8:	08009e98 	.word	0x08009e98
 80075fc:	08009e94 	.word	0x08009e94
 8007600:	08009e9c 	.word	0x08009e9c
 8007604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007608:	429a      	cmp	r2, r3
 800760a:	bfa8      	it	ge
 800760c:	461a      	movge	r2, r3
 800760e:	2a00      	cmp	r2, #0
 8007610:	4691      	mov	r9, r2
 8007612:	dc37      	bgt.n	8007684 <_printf_float+0x374>
 8007614:	f04f 0b00 	mov.w	fp, #0
 8007618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800761c:	f104 021a 	add.w	r2, r4, #26
 8007620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	eba3 0309 	sub.w	r3, r3, r9
 8007628:	455b      	cmp	r3, fp
 800762a:	dc33      	bgt.n	8007694 <_printf_float+0x384>
 800762c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007630:	429a      	cmp	r2, r3
 8007632:	db3b      	blt.n	80076ac <_printf_float+0x39c>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	07da      	lsls	r2, r3, #31
 8007638:	d438      	bmi.n	80076ac <_printf_float+0x39c>
 800763a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763c:	9a05      	ldr	r2, [sp, #20]
 800763e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007640:	1a9a      	subs	r2, r3, r2
 8007642:	eba3 0901 	sub.w	r9, r3, r1
 8007646:	4591      	cmp	r9, r2
 8007648:	bfa8      	it	ge
 800764a:	4691      	movge	r9, r2
 800764c:	f1b9 0f00 	cmp.w	r9, #0
 8007650:	dc35      	bgt.n	80076be <_printf_float+0x3ae>
 8007652:	f04f 0800 	mov.w	r8, #0
 8007656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800765a:	f104 0a1a 	add.w	sl, r4, #26
 800765e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	eba3 0309 	sub.w	r3, r3, r9
 8007668:	4543      	cmp	r3, r8
 800766a:	f77f af79 	ble.w	8007560 <_printf_float+0x250>
 800766e:	2301      	movs	r3, #1
 8007670:	4652      	mov	r2, sl
 8007672:	4631      	mov	r1, r6
 8007674:	4628      	mov	r0, r5
 8007676:	47b8      	blx	r7
 8007678:	3001      	adds	r0, #1
 800767a:	f43f aeaa 	beq.w	80073d2 <_printf_float+0xc2>
 800767e:	f108 0801 	add.w	r8, r8, #1
 8007682:	e7ec      	b.n	800765e <_printf_float+0x34e>
 8007684:	4613      	mov	r3, r2
 8007686:	4631      	mov	r1, r6
 8007688:	4642      	mov	r2, r8
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	d1c0      	bne.n	8007614 <_printf_float+0x304>
 8007692:	e69e      	b.n	80073d2 <_printf_float+0xc2>
 8007694:	2301      	movs	r3, #1
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	9205      	str	r2, [sp, #20]
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f ae97 	beq.w	80073d2 <_printf_float+0xc2>
 80076a4:	9a05      	ldr	r2, [sp, #20]
 80076a6:	f10b 0b01 	add.w	fp, fp, #1
 80076aa:	e7b9      	b.n	8007620 <_printf_float+0x310>
 80076ac:	ee18 3a10 	vmov	r3, s16
 80076b0:	4652      	mov	r2, sl
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	d1be      	bne.n	800763a <_printf_float+0x32a>
 80076bc:	e689      	b.n	80073d2 <_printf_float+0xc2>
 80076be:	9a05      	ldr	r2, [sp, #20]
 80076c0:	464b      	mov	r3, r9
 80076c2:	4442      	add	r2, r8
 80076c4:	4631      	mov	r1, r6
 80076c6:	4628      	mov	r0, r5
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	d1c1      	bne.n	8007652 <_printf_float+0x342>
 80076ce:	e680      	b.n	80073d2 <_printf_float+0xc2>
 80076d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076d2:	2a01      	cmp	r2, #1
 80076d4:	dc01      	bgt.n	80076da <_printf_float+0x3ca>
 80076d6:	07db      	lsls	r3, r3, #31
 80076d8:	d538      	bpl.n	800774c <_printf_float+0x43c>
 80076da:	2301      	movs	r3, #1
 80076dc:	4642      	mov	r2, r8
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f ae74 	beq.w	80073d2 <_printf_float+0xc2>
 80076ea:	ee18 3a10 	vmov	r3, s16
 80076ee:	4652      	mov	r2, sl
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f ae6b 	beq.w	80073d2 <_printf_float+0xc2>
 80076fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007700:	2200      	movs	r2, #0
 8007702:	2300      	movs	r3, #0
 8007704:	f7f9 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007708:	b9d8      	cbnz	r0, 8007742 <_printf_float+0x432>
 800770a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800770c:	f108 0201 	add.w	r2, r8, #1
 8007710:	3b01      	subs	r3, #1
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	d10e      	bne.n	800773a <_printf_float+0x42a>
 800771c:	e659      	b.n	80073d2 <_printf_float+0xc2>
 800771e:	2301      	movs	r3, #1
 8007720:	4652      	mov	r2, sl
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f ae52 	beq.w	80073d2 <_printf_float+0xc2>
 800772e:	f108 0801 	add.w	r8, r8, #1
 8007732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007734:	3b01      	subs	r3, #1
 8007736:	4543      	cmp	r3, r8
 8007738:	dcf1      	bgt.n	800771e <_printf_float+0x40e>
 800773a:	464b      	mov	r3, r9
 800773c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007740:	e6dc      	b.n	80074fc <_printf_float+0x1ec>
 8007742:	f04f 0800 	mov.w	r8, #0
 8007746:	f104 0a1a 	add.w	sl, r4, #26
 800774a:	e7f2      	b.n	8007732 <_printf_float+0x422>
 800774c:	2301      	movs	r3, #1
 800774e:	4642      	mov	r2, r8
 8007750:	e7df      	b.n	8007712 <_printf_float+0x402>
 8007752:	2301      	movs	r3, #1
 8007754:	464a      	mov	r2, r9
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	f43f ae38 	beq.w	80073d2 <_printf_float+0xc2>
 8007762:	f108 0801 	add.w	r8, r8, #1
 8007766:	68e3      	ldr	r3, [r4, #12]
 8007768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800776a:	1a5b      	subs	r3, r3, r1
 800776c:	4543      	cmp	r3, r8
 800776e:	dcf0      	bgt.n	8007752 <_printf_float+0x442>
 8007770:	e6fa      	b.n	8007568 <_printf_float+0x258>
 8007772:	f04f 0800 	mov.w	r8, #0
 8007776:	f104 0919 	add.w	r9, r4, #25
 800777a:	e7f4      	b.n	8007766 <_printf_float+0x456>

0800777c <_printf_common>:
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	4616      	mov	r6, r2
 8007782:	4699      	mov	r9, r3
 8007784:	688a      	ldr	r2, [r1, #8]
 8007786:	690b      	ldr	r3, [r1, #16]
 8007788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800778c:	4293      	cmp	r3, r2
 800778e:	bfb8      	it	lt
 8007790:	4613      	movlt	r3, r2
 8007792:	6033      	str	r3, [r6, #0]
 8007794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007798:	4607      	mov	r7, r0
 800779a:	460c      	mov	r4, r1
 800779c:	b10a      	cbz	r2, 80077a2 <_printf_common+0x26>
 800779e:	3301      	adds	r3, #1
 80077a0:	6033      	str	r3, [r6, #0]
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	0699      	lsls	r1, r3, #26
 80077a6:	bf42      	ittt	mi
 80077a8:	6833      	ldrmi	r3, [r6, #0]
 80077aa:	3302      	addmi	r3, #2
 80077ac:	6033      	strmi	r3, [r6, #0]
 80077ae:	6825      	ldr	r5, [r4, #0]
 80077b0:	f015 0506 	ands.w	r5, r5, #6
 80077b4:	d106      	bne.n	80077c4 <_printf_common+0x48>
 80077b6:	f104 0a19 	add.w	sl, r4, #25
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	6832      	ldr	r2, [r6, #0]
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc26      	bgt.n	8007812 <_printf_common+0x96>
 80077c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c8:	1e13      	subs	r3, r2, #0
 80077ca:	6822      	ldr	r2, [r4, #0]
 80077cc:	bf18      	it	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	0692      	lsls	r2, r2, #26
 80077d2:	d42b      	bmi.n	800782c <_printf_common+0xb0>
 80077d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d8:	4649      	mov	r1, r9
 80077da:	4638      	mov	r0, r7
 80077dc:	47c0      	blx	r8
 80077de:	3001      	adds	r0, #1
 80077e0:	d01e      	beq.n	8007820 <_printf_common+0xa4>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	68e5      	ldr	r5, [r4, #12]
 80077e6:	6832      	ldr	r2, [r6, #0]
 80077e8:	f003 0306 	and.w	r3, r3, #6
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	bf08      	it	eq
 80077f0:	1aad      	subeq	r5, r5, r2
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	bf0c      	ite	eq
 80077f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077fc:	2500      	movne	r5, #0
 80077fe:	4293      	cmp	r3, r2
 8007800:	bfc4      	itt	gt
 8007802:	1a9b      	subgt	r3, r3, r2
 8007804:	18ed      	addgt	r5, r5, r3
 8007806:	2600      	movs	r6, #0
 8007808:	341a      	adds	r4, #26
 800780a:	42b5      	cmp	r5, r6
 800780c:	d11a      	bne.n	8007844 <_printf_common+0xc8>
 800780e:	2000      	movs	r0, #0
 8007810:	e008      	b.n	8007824 <_printf_common+0xa8>
 8007812:	2301      	movs	r3, #1
 8007814:	4652      	mov	r2, sl
 8007816:	4649      	mov	r1, r9
 8007818:	4638      	mov	r0, r7
 800781a:	47c0      	blx	r8
 800781c:	3001      	adds	r0, #1
 800781e:	d103      	bne.n	8007828 <_printf_common+0xac>
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	3501      	adds	r5, #1
 800782a:	e7c6      	b.n	80077ba <_printf_common+0x3e>
 800782c:	18e1      	adds	r1, r4, r3
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	2030      	movs	r0, #48	; 0x30
 8007832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007836:	4422      	add	r2, r4
 8007838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800783c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007840:	3302      	adds	r3, #2
 8007842:	e7c7      	b.n	80077d4 <_printf_common+0x58>
 8007844:	2301      	movs	r3, #1
 8007846:	4622      	mov	r2, r4
 8007848:	4649      	mov	r1, r9
 800784a:	4638      	mov	r0, r7
 800784c:	47c0      	blx	r8
 800784e:	3001      	adds	r0, #1
 8007850:	d0e6      	beq.n	8007820 <_printf_common+0xa4>
 8007852:	3601      	adds	r6, #1
 8007854:	e7d9      	b.n	800780a <_printf_common+0x8e>
	...

08007858 <_printf_i>:
 8007858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	7e0f      	ldrb	r7, [r1, #24]
 800785e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007860:	2f78      	cmp	r7, #120	; 0x78
 8007862:	4691      	mov	r9, r2
 8007864:	4680      	mov	r8, r0
 8007866:	460c      	mov	r4, r1
 8007868:	469a      	mov	sl, r3
 800786a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800786e:	d807      	bhi.n	8007880 <_printf_i+0x28>
 8007870:	2f62      	cmp	r7, #98	; 0x62
 8007872:	d80a      	bhi.n	800788a <_printf_i+0x32>
 8007874:	2f00      	cmp	r7, #0
 8007876:	f000 80d8 	beq.w	8007a2a <_printf_i+0x1d2>
 800787a:	2f58      	cmp	r7, #88	; 0x58
 800787c:	f000 80a3 	beq.w	80079c6 <_printf_i+0x16e>
 8007880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007888:	e03a      	b.n	8007900 <_printf_i+0xa8>
 800788a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800788e:	2b15      	cmp	r3, #21
 8007890:	d8f6      	bhi.n	8007880 <_printf_i+0x28>
 8007892:	a101      	add	r1, pc, #4	; (adr r1, 8007898 <_printf_i+0x40>)
 8007894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007898:	080078f1 	.word	0x080078f1
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007881 	.word	0x08007881
 80078a4:	08007881 	.word	0x08007881
 80078a8:	08007881 	.word	0x08007881
 80078ac:	08007881 	.word	0x08007881
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007881 	.word	0x08007881
 80078b8:	08007881 	.word	0x08007881
 80078bc:	08007881 	.word	0x08007881
 80078c0:	08007881 	.word	0x08007881
 80078c4:	08007a11 	.word	0x08007a11
 80078c8:	08007935 	.word	0x08007935
 80078cc:	080079f3 	.word	0x080079f3
 80078d0:	08007881 	.word	0x08007881
 80078d4:	08007881 	.word	0x08007881
 80078d8:	08007a33 	.word	0x08007a33
 80078dc:	08007881 	.word	0x08007881
 80078e0:	08007935 	.word	0x08007935
 80078e4:	08007881 	.word	0x08007881
 80078e8:	08007881 	.word	0x08007881
 80078ec:	080079fb 	.word	0x080079fb
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	1d1a      	adds	r2, r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	602a      	str	r2, [r5, #0]
 80078f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007900:	2301      	movs	r3, #1
 8007902:	e0a3      	b.n	8007a4c <_printf_i+0x1f4>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	6829      	ldr	r1, [r5, #0]
 8007908:	0606      	lsls	r6, r0, #24
 800790a:	f101 0304 	add.w	r3, r1, #4
 800790e:	d50a      	bpl.n	8007926 <_printf_i+0xce>
 8007910:	680e      	ldr	r6, [r1, #0]
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	2e00      	cmp	r6, #0
 8007916:	da03      	bge.n	8007920 <_printf_i+0xc8>
 8007918:	232d      	movs	r3, #45	; 0x2d
 800791a:	4276      	negs	r6, r6
 800791c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007920:	485e      	ldr	r0, [pc, #376]	; (8007a9c <_printf_i+0x244>)
 8007922:	230a      	movs	r3, #10
 8007924:	e019      	b.n	800795a <_printf_i+0x102>
 8007926:	680e      	ldr	r6, [r1, #0]
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800792e:	bf18      	it	ne
 8007930:	b236      	sxthne	r6, r6
 8007932:	e7ef      	b.n	8007914 <_printf_i+0xbc>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	6820      	ldr	r0, [r4, #0]
 8007938:	1d19      	adds	r1, r3, #4
 800793a:	6029      	str	r1, [r5, #0]
 800793c:	0601      	lsls	r1, r0, #24
 800793e:	d501      	bpl.n	8007944 <_printf_i+0xec>
 8007940:	681e      	ldr	r6, [r3, #0]
 8007942:	e002      	b.n	800794a <_printf_i+0xf2>
 8007944:	0646      	lsls	r6, r0, #25
 8007946:	d5fb      	bpl.n	8007940 <_printf_i+0xe8>
 8007948:	881e      	ldrh	r6, [r3, #0]
 800794a:	4854      	ldr	r0, [pc, #336]	; (8007a9c <_printf_i+0x244>)
 800794c:	2f6f      	cmp	r7, #111	; 0x6f
 800794e:	bf0c      	ite	eq
 8007950:	2308      	moveq	r3, #8
 8007952:	230a      	movne	r3, #10
 8007954:	2100      	movs	r1, #0
 8007956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800795a:	6865      	ldr	r5, [r4, #4]
 800795c:	60a5      	str	r5, [r4, #8]
 800795e:	2d00      	cmp	r5, #0
 8007960:	bfa2      	ittt	ge
 8007962:	6821      	ldrge	r1, [r4, #0]
 8007964:	f021 0104 	bicge.w	r1, r1, #4
 8007968:	6021      	strge	r1, [r4, #0]
 800796a:	b90e      	cbnz	r6, 8007970 <_printf_i+0x118>
 800796c:	2d00      	cmp	r5, #0
 800796e:	d04d      	beq.n	8007a0c <_printf_i+0x1b4>
 8007970:	4615      	mov	r5, r2
 8007972:	fbb6 f1f3 	udiv	r1, r6, r3
 8007976:	fb03 6711 	mls	r7, r3, r1, r6
 800797a:	5dc7      	ldrb	r7, [r0, r7]
 800797c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007980:	4637      	mov	r7, r6
 8007982:	42bb      	cmp	r3, r7
 8007984:	460e      	mov	r6, r1
 8007986:	d9f4      	bls.n	8007972 <_printf_i+0x11a>
 8007988:	2b08      	cmp	r3, #8
 800798a:	d10b      	bne.n	80079a4 <_printf_i+0x14c>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	07de      	lsls	r6, r3, #31
 8007990:	d508      	bpl.n	80079a4 <_printf_i+0x14c>
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	4299      	cmp	r1, r3
 8007998:	bfde      	ittt	le
 800799a:	2330      	movle	r3, #48	; 0x30
 800799c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079a4:	1b52      	subs	r2, r2, r5
 80079a6:	6122      	str	r2, [r4, #16]
 80079a8:	f8cd a000 	str.w	sl, [sp]
 80079ac:	464b      	mov	r3, r9
 80079ae:	aa03      	add	r2, sp, #12
 80079b0:	4621      	mov	r1, r4
 80079b2:	4640      	mov	r0, r8
 80079b4:	f7ff fee2 	bl	800777c <_printf_common>
 80079b8:	3001      	adds	r0, #1
 80079ba:	d14c      	bne.n	8007a56 <_printf_i+0x1fe>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	b004      	add	sp, #16
 80079c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c6:	4835      	ldr	r0, [pc, #212]	; (8007a9c <_printf_i+0x244>)
 80079c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079cc:	6829      	ldr	r1, [r5, #0]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d4:	6029      	str	r1, [r5, #0]
 80079d6:	061d      	lsls	r5, r3, #24
 80079d8:	d514      	bpl.n	8007a04 <_printf_i+0x1ac>
 80079da:	07df      	lsls	r7, r3, #31
 80079dc:	bf44      	itt	mi
 80079de:	f043 0320 	orrmi.w	r3, r3, #32
 80079e2:	6023      	strmi	r3, [r4, #0]
 80079e4:	b91e      	cbnz	r6, 80079ee <_printf_i+0x196>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	f023 0320 	bic.w	r3, r3, #32
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	2310      	movs	r3, #16
 80079f0:	e7b0      	b.n	8007954 <_printf_i+0xfc>
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	f043 0320 	orr.w	r3, r3, #32
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	2378      	movs	r3, #120	; 0x78
 80079fc:	4828      	ldr	r0, [pc, #160]	; (8007aa0 <_printf_i+0x248>)
 80079fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a02:	e7e3      	b.n	80079cc <_printf_i+0x174>
 8007a04:	0659      	lsls	r1, r3, #25
 8007a06:	bf48      	it	mi
 8007a08:	b2b6      	uxthmi	r6, r6
 8007a0a:	e7e6      	b.n	80079da <_printf_i+0x182>
 8007a0c:	4615      	mov	r5, r2
 8007a0e:	e7bb      	b.n	8007988 <_printf_i+0x130>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	6826      	ldr	r6, [r4, #0]
 8007a14:	6961      	ldr	r1, [r4, #20]
 8007a16:	1d18      	adds	r0, r3, #4
 8007a18:	6028      	str	r0, [r5, #0]
 8007a1a:	0635      	lsls	r5, r6, #24
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	d501      	bpl.n	8007a24 <_printf_i+0x1cc>
 8007a20:	6019      	str	r1, [r3, #0]
 8007a22:	e002      	b.n	8007a2a <_printf_i+0x1d2>
 8007a24:	0670      	lsls	r0, r6, #25
 8007a26:	d5fb      	bpl.n	8007a20 <_printf_i+0x1c8>
 8007a28:	8019      	strh	r1, [r3, #0]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	4615      	mov	r5, r2
 8007a30:	e7ba      	b.n	80079a8 <_printf_i+0x150>
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	1d1a      	adds	r2, r3, #4
 8007a36:	602a      	str	r2, [r5, #0]
 8007a38:	681d      	ldr	r5, [r3, #0]
 8007a3a:	6862      	ldr	r2, [r4, #4]
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f7f8 fbce 	bl	80001e0 <memchr>
 8007a44:	b108      	cbz	r0, 8007a4a <_printf_i+0x1f2>
 8007a46:	1b40      	subs	r0, r0, r5
 8007a48:	6060      	str	r0, [r4, #4]
 8007a4a:	6863      	ldr	r3, [r4, #4]
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a54:	e7a8      	b.n	80079a8 <_printf_i+0x150>
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	462a      	mov	r2, r5
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	47d0      	blx	sl
 8007a60:	3001      	adds	r0, #1
 8007a62:	d0ab      	beq.n	80079bc <_printf_i+0x164>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	079b      	lsls	r3, r3, #30
 8007a68:	d413      	bmi.n	8007a92 <_printf_i+0x23a>
 8007a6a:	68e0      	ldr	r0, [r4, #12]
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	4298      	cmp	r0, r3
 8007a70:	bfb8      	it	lt
 8007a72:	4618      	movlt	r0, r3
 8007a74:	e7a4      	b.n	80079c0 <_printf_i+0x168>
 8007a76:	2301      	movs	r3, #1
 8007a78:	4632      	mov	r2, r6
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	47d0      	blx	sl
 8007a80:	3001      	adds	r0, #1
 8007a82:	d09b      	beq.n	80079bc <_printf_i+0x164>
 8007a84:	3501      	adds	r5, #1
 8007a86:	68e3      	ldr	r3, [r4, #12]
 8007a88:	9903      	ldr	r1, [sp, #12]
 8007a8a:	1a5b      	subs	r3, r3, r1
 8007a8c:	42ab      	cmp	r3, r5
 8007a8e:	dcf2      	bgt.n	8007a76 <_printf_i+0x21e>
 8007a90:	e7eb      	b.n	8007a6a <_printf_i+0x212>
 8007a92:	2500      	movs	r5, #0
 8007a94:	f104 0619 	add.w	r6, r4, #25
 8007a98:	e7f5      	b.n	8007a86 <_printf_i+0x22e>
 8007a9a:	bf00      	nop
 8007a9c:	08009e9e 	.word	0x08009e9e
 8007aa0:	08009eaf 	.word	0x08009eaf

08007aa4 <iprintf>:
 8007aa4:	b40f      	push	{r0, r1, r2, r3}
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <iprintf+0x2c>)
 8007aa8:	b513      	push	{r0, r1, r4, lr}
 8007aaa:	681c      	ldr	r4, [r3, #0]
 8007aac:	b124      	cbz	r4, 8007ab8 <iprintf+0x14>
 8007aae:	69a3      	ldr	r3, [r4, #24]
 8007ab0:	b913      	cbnz	r3, 8007ab8 <iprintf+0x14>
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f001 f870 	bl	8008b98 <__sinit>
 8007ab8:	ab05      	add	r3, sp, #20
 8007aba:	9a04      	ldr	r2, [sp, #16]
 8007abc:	68a1      	ldr	r1, [r4, #8]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 fe2d 	bl	8009720 <_vfiprintf_r>
 8007ac6:	b002      	add	sp, #8
 8007ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007acc:	b004      	add	sp, #16
 8007ace:	4770      	bx	lr
 8007ad0:	2000000c 	.word	0x2000000c

08007ad4 <setbuf>:
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ada:	bf0c      	ite	eq
 8007adc:	2202      	moveq	r2, #2
 8007ade:	2200      	movne	r2, #0
 8007ae0:	f000 b800 	b.w	8007ae4 <setvbuf>

08007ae4 <setvbuf>:
 8007ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ae8:	461d      	mov	r5, r3
 8007aea:	4b5d      	ldr	r3, [pc, #372]	; (8007c60 <setvbuf+0x17c>)
 8007aec:	681f      	ldr	r7, [r3, #0]
 8007aee:	4604      	mov	r4, r0
 8007af0:	460e      	mov	r6, r1
 8007af2:	4690      	mov	r8, r2
 8007af4:	b127      	cbz	r7, 8007b00 <setvbuf+0x1c>
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	b913      	cbnz	r3, 8007b00 <setvbuf+0x1c>
 8007afa:	4638      	mov	r0, r7
 8007afc:	f001 f84c 	bl	8008b98 <__sinit>
 8007b00:	4b58      	ldr	r3, [pc, #352]	; (8007c64 <setvbuf+0x180>)
 8007b02:	429c      	cmp	r4, r3
 8007b04:	d167      	bne.n	8007bd6 <setvbuf+0xf2>
 8007b06:	687c      	ldr	r4, [r7, #4]
 8007b08:	f1b8 0f02 	cmp.w	r8, #2
 8007b0c:	d006      	beq.n	8007b1c <setvbuf+0x38>
 8007b0e:	f1b8 0f01 	cmp.w	r8, #1
 8007b12:	f200 809f 	bhi.w	8007c54 <setvbuf+0x170>
 8007b16:	2d00      	cmp	r5, #0
 8007b18:	f2c0 809c 	blt.w	8007c54 <setvbuf+0x170>
 8007b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d405      	bmi.n	8007b2e <setvbuf+0x4a>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	0598      	lsls	r0, r3, #22
 8007b26:	d402      	bmi.n	8007b2e <setvbuf+0x4a>
 8007b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2a:	f001 f8d8 	bl	8008cde <__retarget_lock_acquire_recursive>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4638      	mov	r0, r7
 8007b32:	f000 ff9d 	bl	8008a70 <_fflush_r>
 8007b36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b38:	b141      	cbz	r1, 8007b4c <setvbuf+0x68>
 8007b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b3e:	4299      	cmp	r1, r3
 8007b40:	d002      	beq.n	8007b48 <setvbuf+0x64>
 8007b42:	4638      	mov	r0, r7
 8007b44:	f001 fce2 	bl	800950c <_free_r>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	6363      	str	r3, [r4, #52]	; 0x34
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61a3      	str	r3, [r4, #24]
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	0619      	lsls	r1, r3, #24
 8007b56:	d503      	bpl.n	8007b60 <setvbuf+0x7c>
 8007b58:	6921      	ldr	r1, [r4, #16]
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	f001 fcd6 	bl	800950c <_free_r>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	f1b8 0f02 	cmp.w	r8, #2
 8007b6e:	81a3      	strh	r3, [r4, #12]
 8007b70:	d06c      	beq.n	8007c4c <setvbuf+0x168>
 8007b72:	ab01      	add	r3, sp, #4
 8007b74:	466a      	mov	r2, sp
 8007b76:	4621      	mov	r1, r4
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f001 f8b2 	bl	8008ce2 <__swhatbuf_r>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	4318      	orrs	r0, r3
 8007b82:	81a0      	strh	r0, [r4, #12]
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	d130      	bne.n	8007bea <setvbuf+0x106>
 8007b88:	9d00      	ldr	r5, [sp, #0]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f001 f90e 	bl	8008dac <malloc>
 8007b90:	4606      	mov	r6, r0
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d155      	bne.n	8007c42 <setvbuf+0x15e>
 8007b96:	f8dd 9000 	ldr.w	r9, [sp]
 8007b9a:	45a9      	cmp	r9, r5
 8007b9c:	d14a      	bne.n	8007c34 <setvbuf+0x150>
 8007b9e:	f04f 35ff 	mov.w	r5, #4294967295
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	60a2      	str	r2, [r4, #8]
 8007ba6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007baa:	6022      	str	r2, [r4, #0]
 8007bac:	6122      	str	r2, [r4, #16]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb4:	6162      	str	r2, [r4, #20]
 8007bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bb8:	f043 0302 	orr.w	r3, r3, #2
 8007bbc:	07d2      	lsls	r2, r2, #31
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	d405      	bmi.n	8007bce <setvbuf+0xea>
 8007bc2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007bc6:	d102      	bne.n	8007bce <setvbuf+0xea>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bca:	f001 f889 	bl	8008ce0 <__retarget_lock_release_recursive>
 8007bce:	4628      	mov	r0, r5
 8007bd0:	b003      	add	sp, #12
 8007bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bd6:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <setvbuf+0x184>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d101      	bne.n	8007be0 <setvbuf+0xfc>
 8007bdc:	68bc      	ldr	r4, [r7, #8]
 8007bde:	e793      	b.n	8007b08 <setvbuf+0x24>
 8007be0:	4b22      	ldr	r3, [pc, #136]	; (8007c6c <setvbuf+0x188>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	bf08      	it	eq
 8007be6:	68fc      	ldreq	r4, [r7, #12]
 8007be8:	e78e      	b.n	8007b08 <setvbuf+0x24>
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	d0cd      	beq.n	8007b8a <setvbuf+0xa6>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	b913      	cbnz	r3, 8007bf8 <setvbuf+0x114>
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f000 ffd0 	bl	8008b98 <__sinit>
 8007bf8:	f1b8 0f01 	cmp.w	r8, #1
 8007bfc:	bf08      	it	eq
 8007bfe:	89a3      	ldrheq	r3, [r4, #12]
 8007c00:	6026      	str	r6, [r4, #0]
 8007c02:	bf04      	itt	eq
 8007c04:	f043 0301 	orreq.w	r3, r3, #1
 8007c08:	81a3      	strheq	r3, [r4, #12]
 8007c0a:	89a2      	ldrh	r2, [r4, #12]
 8007c0c:	f012 0308 	ands.w	r3, r2, #8
 8007c10:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007c14:	d01c      	beq.n	8007c50 <setvbuf+0x16c>
 8007c16:	07d3      	lsls	r3, r2, #31
 8007c18:	bf41      	itttt	mi
 8007c1a:	2300      	movmi	r3, #0
 8007c1c:	426d      	negmi	r5, r5
 8007c1e:	60a3      	strmi	r3, [r4, #8]
 8007c20:	61a5      	strmi	r5, [r4, #24]
 8007c22:	bf58      	it	pl
 8007c24:	60a5      	strpl	r5, [r4, #8]
 8007c26:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007c28:	f015 0501 	ands.w	r5, r5, #1
 8007c2c:	d115      	bne.n	8007c5a <setvbuf+0x176>
 8007c2e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007c32:	e7c8      	b.n	8007bc6 <setvbuf+0xe2>
 8007c34:	4648      	mov	r0, r9
 8007c36:	f001 f8b9 	bl	8008dac <malloc>
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d0ae      	beq.n	8007b9e <setvbuf+0xba>
 8007c40:	464d      	mov	r5, r9
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	e7d0      	b.n	8007bee <setvbuf+0x10a>
 8007c4c:	2500      	movs	r5, #0
 8007c4e:	e7a8      	b.n	8007ba2 <setvbuf+0xbe>
 8007c50:	60a3      	str	r3, [r4, #8]
 8007c52:	e7e8      	b.n	8007c26 <setvbuf+0x142>
 8007c54:	f04f 35ff 	mov.w	r5, #4294967295
 8007c58:	e7b9      	b.n	8007bce <setvbuf+0xea>
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	e7b7      	b.n	8007bce <setvbuf+0xea>
 8007c5e:	bf00      	nop
 8007c60:	2000000c 	.word	0x2000000c
 8007c64:	08009f70 	.word	0x08009f70
 8007c68:	08009f90 	.word	0x08009f90
 8007c6c:	08009f50 	.word	0x08009f50

08007c70 <quorem>:
 8007c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	6903      	ldr	r3, [r0, #16]
 8007c76:	690c      	ldr	r4, [r1, #16]
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	4607      	mov	r7, r0
 8007c7c:	f2c0 8081 	blt.w	8007d82 <quorem+0x112>
 8007c80:	3c01      	subs	r4, #1
 8007c82:	f101 0814 	add.w	r8, r1, #20
 8007c86:	f100 0514 	add.w	r5, r0, #20
 8007c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ca0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ca4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ca8:	d331      	bcc.n	8007d0e <quorem+0x9e>
 8007caa:	f04f 0e00 	mov.w	lr, #0
 8007cae:	4640      	mov	r0, r8
 8007cb0:	46ac      	mov	ip, r5
 8007cb2:	46f2      	mov	sl, lr
 8007cb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cb8:	b293      	uxth	r3, r2
 8007cba:	fb06 e303 	mla	r3, r6, r3, lr
 8007cbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	ebaa 0303 	sub.w	r3, sl, r3
 8007cc8:	f8dc a000 	ldr.w	sl, [ip]
 8007ccc:	0c12      	lsrs	r2, r2, #16
 8007cce:	fa13 f38a 	uxtah	r3, r3, sl
 8007cd2:	fb06 e202 	mla	r2, r6, r2, lr
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	9b00      	ldr	r3, [sp, #0]
 8007cda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ce8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007cec:	4581      	cmp	r9, r0
 8007cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf2:	f84c 3b04 	str.w	r3, [ip], #4
 8007cf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cfa:	d2db      	bcs.n	8007cb4 <quorem+0x44>
 8007cfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d00:	b92b      	cbnz	r3, 8007d0e <quorem+0x9e>
 8007d02:	9b01      	ldr	r3, [sp, #4]
 8007d04:	3b04      	subs	r3, #4
 8007d06:	429d      	cmp	r5, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	d32e      	bcc.n	8007d6a <quorem+0xfa>
 8007d0c:	613c      	str	r4, [r7, #16]
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f001 fae4 	bl	80092dc <__mcmp>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	db24      	blt.n	8007d62 <quorem+0xf2>
 8007d18:	3601      	adds	r6, #1
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f04f 0c00 	mov.w	ip, #0
 8007d20:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d24:	f8d0 e000 	ldr.w	lr, [r0]
 8007d28:	b293      	uxth	r3, r2
 8007d2a:	ebac 0303 	sub.w	r3, ip, r3
 8007d2e:	0c12      	lsrs	r2, r2, #16
 8007d30:	fa13 f38e 	uxtah	r3, r3, lr
 8007d34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d42:	45c1      	cmp	r9, r8
 8007d44:	f840 3b04 	str.w	r3, [r0], #4
 8007d48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d4c:	d2e8      	bcs.n	8007d20 <quorem+0xb0>
 8007d4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d56:	b922      	cbnz	r2, 8007d62 <quorem+0xf2>
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	429d      	cmp	r5, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	d30a      	bcc.n	8007d76 <quorem+0x106>
 8007d60:	613c      	str	r4, [r7, #16]
 8007d62:	4630      	mov	r0, r6
 8007d64:	b003      	add	sp, #12
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	6812      	ldr	r2, [r2, #0]
 8007d6c:	3b04      	subs	r3, #4
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	d1cc      	bne.n	8007d0c <quorem+0x9c>
 8007d72:	3c01      	subs	r4, #1
 8007d74:	e7c7      	b.n	8007d06 <quorem+0x96>
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	3b04      	subs	r3, #4
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	d1f0      	bne.n	8007d60 <quorem+0xf0>
 8007d7e:	3c01      	subs	r4, #1
 8007d80:	e7eb      	b.n	8007d5a <quorem+0xea>
 8007d82:	2000      	movs	r0, #0
 8007d84:	e7ee      	b.n	8007d64 <quorem+0xf4>
	...

08007d88 <_dtoa_r>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	ed2d 8b04 	vpush	{d8-d9}
 8007d90:	ec57 6b10 	vmov	r6, r7, d0
 8007d94:	b093      	sub	sp, #76	; 0x4c
 8007d96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d9c:	9106      	str	r1, [sp, #24]
 8007d9e:	ee10 aa10 	vmov	sl, s0
 8007da2:	4604      	mov	r4, r0
 8007da4:	9209      	str	r2, [sp, #36]	; 0x24
 8007da6:	930c      	str	r3, [sp, #48]	; 0x30
 8007da8:	46bb      	mov	fp, r7
 8007daa:	b975      	cbnz	r5, 8007dca <_dtoa_r+0x42>
 8007dac:	2010      	movs	r0, #16
 8007dae:	f000 fffd 	bl	8008dac <malloc>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6260      	str	r0, [r4, #36]	; 0x24
 8007db6:	b920      	cbnz	r0, 8007dc2 <_dtoa_r+0x3a>
 8007db8:	4ba7      	ldr	r3, [pc, #668]	; (8008058 <_dtoa_r+0x2d0>)
 8007dba:	21ea      	movs	r1, #234	; 0xea
 8007dbc:	48a7      	ldr	r0, [pc, #668]	; (800805c <_dtoa_r+0x2d4>)
 8007dbe:	f001 ff05 	bl	8009bcc <__assert_func>
 8007dc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dc6:	6005      	str	r5, [r0, #0]
 8007dc8:	60c5      	str	r5, [r0, #12]
 8007dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dcc:	6819      	ldr	r1, [r3, #0]
 8007dce:	b151      	cbz	r1, 8007de6 <_dtoa_r+0x5e>
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	604a      	str	r2, [r1, #4]
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4093      	lsls	r3, r2
 8007dd8:	608b      	str	r3, [r1, #8]
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f001 f83c 	bl	8008e58 <_Bfree>
 8007de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	1e3b      	subs	r3, r7, #0
 8007de8:	bfaa      	itet	ge
 8007dea:	2300      	movge	r3, #0
 8007dec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007df0:	f8c8 3000 	strge.w	r3, [r8]
 8007df4:	4b9a      	ldr	r3, [pc, #616]	; (8008060 <_dtoa_r+0x2d8>)
 8007df6:	bfbc      	itt	lt
 8007df8:	2201      	movlt	r2, #1
 8007dfa:	f8c8 2000 	strlt.w	r2, [r8]
 8007dfe:	ea33 030b 	bics.w	r3, r3, fp
 8007e02:	d11b      	bne.n	8007e3c <_dtoa_r+0xb4>
 8007e04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e06:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e10:	4333      	orrs	r3, r6
 8007e12:	f000 8592 	beq.w	800893a <_dtoa_r+0xbb2>
 8007e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e18:	b963      	cbnz	r3, 8007e34 <_dtoa_r+0xac>
 8007e1a:	4b92      	ldr	r3, [pc, #584]	; (8008064 <_dtoa_r+0x2dc>)
 8007e1c:	e022      	b.n	8007e64 <_dtoa_r+0xdc>
 8007e1e:	4b92      	ldr	r3, [pc, #584]	; (8008068 <_dtoa_r+0x2e0>)
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	3308      	adds	r3, #8
 8007e24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	9801      	ldr	r0, [sp, #4]
 8007e2a:	b013      	add	sp, #76	; 0x4c
 8007e2c:	ecbd 8b04 	vpop	{d8-d9}
 8007e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e34:	4b8b      	ldr	r3, [pc, #556]	; (8008064 <_dtoa_r+0x2dc>)
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	3303      	adds	r3, #3
 8007e3a:	e7f3      	b.n	8007e24 <_dtoa_r+0x9c>
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2300      	movs	r3, #0
 8007e40:	4650      	mov	r0, sl
 8007e42:	4659      	mov	r1, fp
 8007e44:	f7f8 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e48:	ec4b ab19 	vmov	d9, sl, fp
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	b158      	cbz	r0, 8007e68 <_dtoa_r+0xe0>
 8007e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e52:	2301      	movs	r3, #1
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 856b 	beq.w	8008934 <_dtoa_r+0xbac>
 8007e5e:	4883      	ldr	r0, [pc, #524]	; (800806c <_dtoa_r+0x2e4>)
 8007e60:	6018      	str	r0, [r3, #0]
 8007e62:	1e43      	subs	r3, r0, #1
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	e7df      	b.n	8007e28 <_dtoa_r+0xa0>
 8007e68:	ec4b ab10 	vmov	d0, sl, fp
 8007e6c:	aa10      	add	r2, sp, #64	; 0x40
 8007e6e:	a911      	add	r1, sp, #68	; 0x44
 8007e70:	4620      	mov	r0, r4
 8007e72:	f001 fad9 	bl	8009428 <__d2b>
 8007e76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e7a:	ee08 0a10 	vmov	s16, r0
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	f000 8084 	beq.w	8007f8c <_dtoa_r+0x204>
 8007e84:	ee19 3a90 	vmov	r3, s19
 8007e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e90:	4656      	mov	r6, sl
 8007e92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007e9e:	4b74      	ldr	r3, [pc, #464]	; (8008070 <_dtoa_r+0x2e8>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	f7f8 f9ef 	bl	8000288 <__aeabi_dsub>
 8007eaa:	a365      	add	r3, pc, #404	; (adr r3, 8008040 <_dtoa_r+0x2b8>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	a364      	add	r3, pc, #400	; (adr r3, 8008048 <_dtoa_r+0x2c0>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 f9e7 	bl	800028c <__adddf3>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	460f      	mov	r7, r1
 8007ec4:	f7f8 fb2e 	bl	8000524 <__aeabi_i2d>
 8007ec8:	a361      	add	r3, pc, #388	; (adr r3, 8008050 <_dtoa_r+0x2c8>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7f8 f9d7 	bl	800028c <__adddf3>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	f7f8 fe39 	bl	8000b58 <__aeabi_d2iz>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	9000      	str	r0, [sp, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	4630      	mov	r0, r6
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 fdf4 	bl	8000adc <__aeabi_dcmplt>
 8007ef4:	b150      	cbz	r0, 8007f0c <_dtoa_r+0x184>
 8007ef6:	9800      	ldr	r0, [sp, #0]
 8007ef8:	f7f8 fb14 	bl	8000524 <__aeabi_i2d>
 8007efc:	4632      	mov	r2, r6
 8007efe:	463b      	mov	r3, r7
 8007f00:	f7f8 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f04:	b910      	cbnz	r0, 8007f0c <_dtoa_r+0x184>
 8007f06:	9b00      	ldr	r3, [sp, #0]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	9b00      	ldr	r3, [sp, #0]
 8007f0e:	2b16      	cmp	r3, #22
 8007f10:	d85a      	bhi.n	8007fc8 <_dtoa_r+0x240>
 8007f12:	9a00      	ldr	r2, [sp, #0]
 8007f14:	4b57      	ldr	r3, [pc, #348]	; (8008074 <_dtoa_r+0x2ec>)
 8007f16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	ec51 0b19 	vmov	r0, r1, d9
 8007f22:	f7f8 fddb 	bl	8000adc <__aeabi_dcmplt>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d050      	beq.n	8007fcc <_dtoa_r+0x244>
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	2300      	movs	r3, #0
 8007f32:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f36:	1b5d      	subs	r5, r3, r5
 8007f38:	1e6b      	subs	r3, r5, #1
 8007f3a:	9305      	str	r3, [sp, #20]
 8007f3c:	bf45      	ittet	mi
 8007f3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f42:	9304      	strmi	r3, [sp, #16]
 8007f44:	2300      	movpl	r3, #0
 8007f46:	2300      	movmi	r3, #0
 8007f48:	bf4c      	ite	mi
 8007f4a:	9305      	strmi	r3, [sp, #20]
 8007f4c:	9304      	strpl	r3, [sp, #16]
 8007f4e:	9b00      	ldr	r3, [sp, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	db3d      	blt.n	8007fd0 <_dtoa_r+0x248>
 8007f54:	9b05      	ldr	r3, [sp, #20]
 8007f56:	9a00      	ldr	r2, [sp, #0]
 8007f58:	920a      	str	r2, [sp, #40]	; 0x28
 8007f5a:	4413      	add	r3, r2
 8007f5c:	9305      	str	r3, [sp, #20]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9307      	str	r3, [sp, #28]
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	2b09      	cmp	r3, #9
 8007f66:	f200 8089 	bhi.w	800807c <_dtoa_r+0x2f4>
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	bfc4      	itt	gt
 8007f6e:	3b04      	subgt	r3, #4
 8007f70:	9306      	strgt	r3, [sp, #24]
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	f1a3 0302 	sub.w	r3, r3, #2
 8007f78:	bfcc      	ite	gt
 8007f7a:	2500      	movgt	r5, #0
 8007f7c:	2501      	movle	r5, #1
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	f200 8087 	bhi.w	8008092 <_dtoa_r+0x30a>
 8007f84:	e8df f003 	tbb	[pc, r3]
 8007f88:	59383a2d 	.word	0x59383a2d
 8007f8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f90:	441d      	add	r5, r3
 8007f92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	bfc1      	itttt	gt
 8007f9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007fa2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007fa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007faa:	bfda      	itte	le
 8007fac:	f1c3 0320 	rsble	r3, r3, #32
 8007fb0:	fa06 f003 	lslle.w	r0, r6, r3
 8007fb4:	4318      	orrgt	r0, r3
 8007fb6:	f7f8 faa5 	bl	8000504 <__aeabi_ui2d>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007fc2:	3d01      	subs	r5, #1
 8007fc4:	930e      	str	r3, [sp, #56]	; 0x38
 8007fc6:	e76a      	b.n	8007e9e <_dtoa_r+0x116>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e7b2      	b.n	8007f32 <_dtoa_r+0x1aa>
 8007fcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fce:	e7b1      	b.n	8007f34 <_dtoa_r+0x1ac>
 8007fd0:	9b04      	ldr	r3, [sp, #16]
 8007fd2:	9a00      	ldr	r2, [sp, #0]
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	4253      	negs	r3, r2
 8007fda:	9307      	str	r3, [sp, #28]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	930a      	str	r3, [sp, #40]	; 0x28
 8007fe0:	e7bf      	b.n	8007f62 <_dtoa_r+0x1da>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9308      	str	r3, [sp, #32]
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dc55      	bgt.n	8008098 <_dtoa_r+0x310>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ff6:	e00c      	b.n	8008012 <_dtoa_r+0x28a>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e7f3      	b.n	8007fe4 <_dtoa_r+0x25c>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008000:	9308      	str	r3, [sp, #32]
 8008002:	9b00      	ldr	r3, [sp, #0]
 8008004:	4413      	add	r3, r2
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	3301      	adds	r3, #1
 800800a:	2b01      	cmp	r3, #1
 800800c:	9303      	str	r3, [sp, #12]
 800800e:	bfb8      	it	lt
 8008010:	2301      	movlt	r3, #1
 8008012:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008014:	2200      	movs	r2, #0
 8008016:	6042      	str	r2, [r0, #4]
 8008018:	2204      	movs	r2, #4
 800801a:	f102 0614 	add.w	r6, r2, #20
 800801e:	429e      	cmp	r6, r3
 8008020:	6841      	ldr	r1, [r0, #4]
 8008022:	d93d      	bls.n	80080a0 <_dtoa_r+0x318>
 8008024:	4620      	mov	r0, r4
 8008026:	f000 fed7 	bl	8008dd8 <_Balloc>
 800802a:	9001      	str	r0, [sp, #4]
 800802c:	2800      	cmp	r0, #0
 800802e:	d13b      	bne.n	80080a8 <_dtoa_r+0x320>
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <_dtoa_r+0x2f0>)
 8008032:	4602      	mov	r2, r0
 8008034:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008038:	e6c0      	b.n	8007dbc <_dtoa_r+0x34>
 800803a:	2301      	movs	r3, #1
 800803c:	e7df      	b.n	8007ffe <_dtoa_r+0x276>
 800803e:	bf00      	nop
 8008040:	636f4361 	.word	0x636f4361
 8008044:	3fd287a7 	.word	0x3fd287a7
 8008048:	8b60c8b3 	.word	0x8b60c8b3
 800804c:	3fc68a28 	.word	0x3fc68a28
 8008050:	509f79fb 	.word	0x509f79fb
 8008054:	3fd34413 	.word	0x3fd34413
 8008058:	08009ecd 	.word	0x08009ecd
 800805c:	08009ee4 	.word	0x08009ee4
 8008060:	7ff00000 	.word	0x7ff00000
 8008064:	08009ec9 	.word	0x08009ec9
 8008068:	08009ec0 	.word	0x08009ec0
 800806c:	08009e9d 	.word	0x08009e9d
 8008070:	3ff80000 	.word	0x3ff80000
 8008074:	0800a038 	.word	0x0800a038
 8008078:	08009f3f 	.word	0x08009f3f
 800807c:	2501      	movs	r5, #1
 800807e:	2300      	movs	r3, #0
 8008080:	9306      	str	r3, [sp, #24]
 8008082:	9508      	str	r5, [sp, #32]
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	2312      	movs	r3, #18
 8008090:	e7b0      	b.n	8007ff4 <_dtoa_r+0x26c>
 8008092:	2301      	movs	r3, #1
 8008094:	9308      	str	r3, [sp, #32]
 8008096:	e7f5      	b.n	8008084 <_dtoa_r+0x2fc>
 8008098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800809e:	e7b8      	b.n	8008012 <_dtoa_r+0x28a>
 80080a0:	3101      	adds	r1, #1
 80080a2:	6041      	str	r1, [r0, #4]
 80080a4:	0052      	lsls	r2, r2, #1
 80080a6:	e7b8      	b.n	800801a <_dtoa_r+0x292>
 80080a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080aa:	9a01      	ldr	r2, [sp, #4]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	2b0e      	cmp	r3, #14
 80080b2:	f200 809d 	bhi.w	80081f0 <_dtoa_r+0x468>
 80080b6:	2d00      	cmp	r5, #0
 80080b8:	f000 809a 	beq.w	80081f0 <_dtoa_r+0x468>
 80080bc:	9b00      	ldr	r3, [sp, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dd32      	ble.n	8008128 <_dtoa_r+0x3a0>
 80080c2:	4ab7      	ldr	r2, [pc, #732]	; (80083a0 <_dtoa_r+0x618>)
 80080c4:	f003 030f 	and.w	r3, r3, #15
 80080c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080d0:	9b00      	ldr	r3, [sp, #0]
 80080d2:	05d8      	lsls	r0, r3, #23
 80080d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80080d8:	d516      	bpl.n	8008108 <_dtoa_r+0x380>
 80080da:	4bb2      	ldr	r3, [pc, #712]	; (80083a4 <_dtoa_r+0x61c>)
 80080dc:	ec51 0b19 	vmov	r0, r1, d9
 80080e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080e4:	f7f8 fbb2 	bl	800084c <__aeabi_ddiv>
 80080e8:	f007 070f 	and.w	r7, r7, #15
 80080ec:	4682      	mov	sl, r0
 80080ee:	468b      	mov	fp, r1
 80080f0:	2503      	movs	r5, #3
 80080f2:	4eac      	ldr	r6, [pc, #688]	; (80083a4 <_dtoa_r+0x61c>)
 80080f4:	b957      	cbnz	r7, 800810c <_dtoa_r+0x384>
 80080f6:	4642      	mov	r2, r8
 80080f8:	464b      	mov	r3, r9
 80080fa:	4650      	mov	r0, sl
 80080fc:	4659      	mov	r1, fp
 80080fe:	f7f8 fba5 	bl	800084c <__aeabi_ddiv>
 8008102:	4682      	mov	sl, r0
 8008104:	468b      	mov	fp, r1
 8008106:	e028      	b.n	800815a <_dtoa_r+0x3d2>
 8008108:	2502      	movs	r5, #2
 800810a:	e7f2      	b.n	80080f2 <_dtoa_r+0x36a>
 800810c:	07f9      	lsls	r1, r7, #31
 800810e:	d508      	bpl.n	8008122 <_dtoa_r+0x39a>
 8008110:	4640      	mov	r0, r8
 8008112:	4649      	mov	r1, r9
 8008114:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008118:	f7f8 fa6e 	bl	80005f8 <__aeabi_dmul>
 800811c:	3501      	adds	r5, #1
 800811e:	4680      	mov	r8, r0
 8008120:	4689      	mov	r9, r1
 8008122:	107f      	asrs	r7, r7, #1
 8008124:	3608      	adds	r6, #8
 8008126:	e7e5      	b.n	80080f4 <_dtoa_r+0x36c>
 8008128:	f000 809b 	beq.w	8008262 <_dtoa_r+0x4da>
 800812c:	9b00      	ldr	r3, [sp, #0]
 800812e:	4f9d      	ldr	r7, [pc, #628]	; (80083a4 <_dtoa_r+0x61c>)
 8008130:	425e      	negs	r6, r3
 8008132:	4b9b      	ldr	r3, [pc, #620]	; (80083a0 <_dtoa_r+0x618>)
 8008134:	f006 020f 	and.w	r2, r6, #15
 8008138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	ec51 0b19 	vmov	r0, r1, d9
 8008144:	f7f8 fa58 	bl	80005f8 <__aeabi_dmul>
 8008148:	1136      	asrs	r6, r6, #4
 800814a:	4682      	mov	sl, r0
 800814c:	468b      	mov	fp, r1
 800814e:	2300      	movs	r3, #0
 8008150:	2502      	movs	r5, #2
 8008152:	2e00      	cmp	r6, #0
 8008154:	d17a      	bne.n	800824c <_dtoa_r+0x4c4>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1d3      	bne.n	8008102 <_dtoa_r+0x37a>
 800815a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8082 	beq.w	8008266 <_dtoa_r+0x4de>
 8008162:	4b91      	ldr	r3, [pc, #580]	; (80083a8 <_dtoa_r+0x620>)
 8008164:	2200      	movs	r2, #0
 8008166:	4650      	mov	r0, sl
 8008168:	4659      	mov	r1, fp
 800816a:	f7f8 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800816e:	2800      	cmp	r0, #0
 8008170:	d079      	beq.n	8008266 <_dtoa_r+0x4de>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d076      	beq.n	8008266 <_dtoa_r+0x4de>
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dd36      	ble.n	80081ec <_dtoa_r+0x464>
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	4650      	mov	r0, sl
 8008182:	4659      	mov	r1, fp
 8008184:	1e5f      	subs	r7, r3, #1
 8008186:	2200      	movs	r2, #0
 8008188:	4b88      	ldr	r3, [pc, #544]	; (80083ac <_dtoa_r+0x624>)
 800818a:	f7f8 fa35 	bl	80005f8 <__aeabi_dmul>
 800818e:	9e02      	ldr	r6, [sp, #8]
 8008190:	4682      	mov	sl, r0
 8008192:	468b      	mov	fp, r1
 8008194:	3501      	adds	r5, #1
 8008196:	4628      	mov	r0, r5
 8008198:	f7f8 f9c4 	bl	8000524 <__aeabi_i2d>
 800819c:	4652      	mov	r2, sl
 800819e:	465b      	mov	r3, fp
 80081a0:	f7f8 fa2a 	bl	80005f8 <__aeabi_dmul>
 80081a4:	4b82      	ldr	r3, [pc, #520]	; (80083b0 <_dtoa_r+0x628>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	f7f8 f870 	bl	800028c <__adddf3>
 80081ac:	46d0      	mov	r8, sl
 80081ae:	46d9      	mov	r9, fp
 80081b0:	4682      	mov	sl, r0
 80081b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80081b6:	2e00      	cmp	r6, #0
 80081b8:	d158      	bne.n	800826c <_dtoa_r+0x4e4>
 80081ba:	4b7e      	ldr	r3, [pc, #504]	; (80083b4 <_dtoa_r+0x62c>)
 80081bc:	2200      	movs	r2, #0
 80081be:	4640      	mov	r0, r8
 80081c0:	4649      	mov	r1, r9
 80081c2:	f7f8 f861 	bl	8000288 <__aeabi_dsub>
 80081c6:	4652      	mov	r2, sl
 80081c8:	465b      	mov	r3, fp
 80081ca:	4680      	mov	r8, r0
 80081cc:	4689      	mov	r9, r1
 80081ce:	f7f8 fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	f040 8295 	bne.w	8008702 <_dtoa_r+0x97a>
 80081d8:	4652      	mov	r2, sl
 80081da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	f7f8 fc7b 	bl	8000adc <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f040 8289 	bne.w	80086fe <_dtoa_r+0x976>
 80081ec:	ec5b ab19 	vmov	sl, fp, d9
 80081f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f2c0 8148 	blt.w	8008488 <_dtoa_r+0x700>
 80081f8:	9a00      	ldr	r2, [sp, #0]
 80081fa:	2a0e      	cmp	r2, #14
 80081fc:	f300 8144 	bgt.w	8008488 <_dtoa_r+0x700>
 8008200:	4b67      	ldr	r3, [pc, #412]	; (80083a0 <_dtoa_r+0x618>)
 8008202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800820a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820c:	2b00      	cmp	r3, #0
 800820e:	f280 80d5 	bge.w	80083bc <_dtoa_r+0x634>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	f300 80d1 	bgt.w	80083bc <_dtoa_r+0x634>
 800821a:	f040 826f 	bne.w	80086fc <_dtoa_r+0x974>
 800821e:	4b65      	ldr	r3, [pc, #404]	; (80083b4 <_dtoa_r+0x62c>)
 8008220:	2200      	movs	r2, #0
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	f7f8 f9e7 	bl	80005f8 <__aeabi_dmul>
 800822a:	4652      	mov	r2, sl
 800822c:	465b      	mov	r3, fp
 800822e:	f7f8 fc69 	bl	8000b04 <__aeabi_dcmpge>
 8008232:	9e03      	ldr	r6, [sp, #12]
 8008234:	4637      	mov	r7, r6
 8008236:	2800      	cmp	r0, #0
 8008238:	f040 8245 	bne.w	80086c6 <_dtoa_r+0x93e>
 800823c:	9d01      	ldr	r5, [sp, #4]
 800823e:	2331      	movs	r3, #49	; 0x31
 8008240:	f805 3b01 	strb.w	r3, [r5], #1
 8008244:	9b00      	ldr	r3, [sp, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	e240      	b.n	80086ce <_dtoa_r+0x946>
 800824c:	07f2      	lsls	r2, r6, #31
 800824e:	d505      	bpl.n	800825c <_dtoa_r+0x4d4>
 8008250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008254:	f7f8 f9d0 	bl	80005f8 <__aeabi_dmul>
 8008258:	3501      	adds	r5, #1
 800825a:	2301      	movs	r3, #1
 800825c:	1076      	asrs	r6, r6, #1
 800825e:	3708      	adds	r7, #8
 8008260:	e777      	b.n	8008152 <_dtoa_r+0x3ca>
 8008262:	2502      	movs	r5, #2
 8008264:	e779      	b.n	800815a <_dtoa_r+0x3d2>
 8008266:	9f00      	ldr	r7, [sp, #0]
 8008268:	9e03      	ldr	r6, [sp, #12]
 800826a:	e794      	b.n	8008196 <_dtoa_r+0x40e>
 800826c:	9901      	ldr	r1, [sp, #4]
 800826e:	4b4c      	ldr	r3, [pc, #304]	; (80083a0 <_dtoa_r+0x618>)
 8008270:	4431      	add	r1, r6
 8008272:	910d      	str	r1, [sp, #52]	; 0x34
 8008274:	9908      	ldr	r1, [sp, #32]
 8008276:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800827a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800827e:	2900      	cmp	r1, #0
 8008280:	d043      	beq.n	800830a <_dtoa_r+0x582>
 8008282:	494d      	ldr	r1, [pc, #308]	; (80083b8 <_dtoa_r+0x630>)
 8008284:	2000      	movs	r0, #0
 8008286:	f7f8 fae1 	bl	800084c <__aeabi_ddiv>
 800828a:	4652      	mov	r2, sl
 800828c:	465b      	mov	r3, fp
 800828e:	f7f7 fffb 	bl	8000288 <__aeabi_dsub>
 8008292:	9d01      	ldr	r5, [sp, #4]
 8008294:	4682      	mov	sl, r0
 8008296:	468b      	mov	fp, r1
 8008298:	4649      	mov	r1, r9
 800829a:	4640      	mov	r0, r8
 800829c:	f7f8 fc5c 	bl	8000b58 <__aeabi_d2iz>
 80082a0:	4606      	mov	r6, r0
 80082a2:	f7f8 f93f 	bl	8000524 <__aeabi_i2d>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f7 ffeb 	bl	8000288 <__aeabi_dsub>
 80082b2:	3630      	adds	r6, #48	; 0x30
 80082b4:	f805 6b01 	strb.w	r6, [r5], #1
 80082b8:	4652      	mov	r2, sl
 80082ba:	465b      	mov	r3, fp
 80082bc:	4680      	mov	r8, r0
 80082be:	4689      	mov	r9, r1
 80082c0:	f7f8 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d163      	bne.n	8008390 <_dtoa_r+0x608>
 80082c8:	4642      	mov	r2, r8
 80082ca:	464b      	mov	r3, r9
 80082cc:	4936      	ldr	r1, [pc, #216]	; (80083a8 <_dtoa_r+0x620>)
 80082ce:	2000      	movs	r0, #0
 80082d0:	f7f7 ffda 	bl	8000288 <__aeabi_dsub>
 80082d4:	4652      	mov	r2, sl
 80082d6:	465b      	mov	r3, fp
 80082d8:	f7f8 fc00 	bl	8000adc <__aeabi_dcmplt>
 80082dc:	2800      	cmp	r0, #0
 80082de:	f040 80b5 	bne.w	800844c <_dtoa_r+0x6c4>
 80082e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e4:	429d      	cmp	r5, r3
 80082e6:	d081      	beq.n	80081ec <_dtoa_r+0x464>
 80082e8:	4b30      	ldr	r3, [pc, #192]	; (80083ac <_dtoa_r+0x624>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	4650      	mov	r0, sl
 80082ee:	4659      	mov	r1, fp
 80082f0:	f7f8 f982 	bl	80005f8 <__aeabi_dmul>
 80082f4:	4b2d      	ldr	r3, [pc, #180]	; (80083ac <_dtoa_r+0x624>)
 80082f6:	4682      	mov	sl, r0
 80082f8:	468b      	mov	fp, r1
 80082fa:	4640      	mov	r0, r8
 80082fc:	4649      	mov	r1, r9
 80082fe:	2200      	movs	r2, #0
 8008300:	f7f8 f97a 	bl	80005f8 <__aeabi_dmul>
 8008304:	4680      	mov	r8, r0
 8008306:	4689      	mov	r9, r1
 8008308:	e7c6      	b.n	8008298 <_dtoa_r+0x510>
 800830a:	4650      	mov	r0, sl
 800830c:	4659      	mov	r1, fp
 800830e:	f7f8 f973 	bl	80005f8 <__aeabi_dmul>
 8008312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008314:	9d01      	ldr	r5, [sp, #4]
 8008316:	930f      	str	r3, [sp, #60]	; 0x3c
 8008318:	4682      	mov	sl, r0
 800831a:	468b      	mov	fp, r1
 800831c:	4649      	mov	r1, r9
 800831e:	4640      	mov	r0, r8
 8008320:	f7f8 fc1a 	bl	8000b58 <__aeabi_d2iz>
 8008324:	4606      	mov	r6, r0
 8008326:	f7f8 f8fd 	bl	8000524 <__aeabi_i2d>
 800832a:	3630      	adds	r6, #48	; 0x30
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4640      	mov	r0, r8
 8008332:	4649      	mov	r1, r9
 8008334:	f7f7 ffa8 	bl	8000288 <__aeabi_dsub>
 8008338:	f805 6b01 	strb.w	r6, [r5], #1
 800833c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800833e:	429d      	cmp	r5, r3
 8008340:	4680      	mov	r8, r0
 8008342:	4689      	mov	r9, r1
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	d124      	bne.n	8008394 <_dtoa_r+0x60c>
 800834a:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <_dtoa_r+0x630>)
 800834c:	4650      	mov	r0, sl
 800834e:	4659      	mov	r1, fp
 8008350:	f7f7 ff9c 	bl	800028c <__adddf3>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4640      	mov	r0, r8
 800835a:	4649      	mov	r1, r9
 800835c:	f7f8 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8008360:	2800      	cmp	r0, #0
 8008362:	d173      	bne.n	800844c <_dtoa_r+0x6c4>
 8008364:	4652      	mov	r2, sl
 8008366:	465b      	mov	r3, fp
 8008368:	4913      	ldr	r1, [pc, #76]	; (80083b8 <_dtoa_r+0x630>)
 800836a:	2000      	movs	r0, #0
 800836c:	f7f7 ff8c 	bl	8000288 <__aeabi_dsub>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4640      	mov	r0, r8
 8008376:	4649      	mov	r1, r9
 8008378:	f7f8 fbb0 	bl	8000adc <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	f43f af35 	beq.w	80081ec <_dtoa_r+0x464>
 8008382:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008384:	1e6b      	subs	r3, r5, #1
 8008386:	930f      	str	r3, [sp, #60]	; 0x3c
 8008388:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800838c:	2b30      	cmp	r3, #48	; 0x30
 800838e:	d0f8      	beq.n	8008382 <_dtoa_r+0x5fa>
 8008390:	9700      	str	r7, [sp, #0]
 8008392:	e049      	b.n	8008428 <_dtoa_r+0x6a0>
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <_dtoa_r+0x624>)
 8008396:	f7f8 f92f 	bl	80005f8 <__aeabi_dmul>
 800839a:	4680      	mov	r8, r0
 800839c:	4689      	mov	r9, r1
 800839e:	e7bd      	b.n	800831c <_dtoa_r+0x594>
 80083a0:	0800a038 	.word	0x0800a038
 80083a4:	0800a010 	.word	0x0800a010
 80083a8:	3ff00000 	.word	0x3ff00000
 80083ac:	40240000 	.word	0x40240000
 80083b0:	401c0000 	.word	0x401c0000
 80083b4:	40140000 	.word	0x40140000
 80083b8:	3fe00000 	.word	0x3fe00000
 80083bc:	9d01      	ldr	r5, [sp, #4]
 80083be:	4656      	mov	r6, sl
 80083c0:	465f      	mov	r7, fp
 80083c2:	4642      	mov	r2, r8
 80083c4:	464b      	mov	r3, r9
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 fa3f 	bl	800084c <__aeabi_ddiv>
 80083ce:	f7f8 fbc3 	bl	8000b58 <__aeabi_d2iz>
 80083d2:	4682      	mov	sl, r0
 80083d4:	f7f8 f8a6 	bl	8000524 <__aeabi_i2d>
 80083d8:	4642      	mov	r2, r8
 80083da:	464b      	mov	r3, r9
 80083dc:	f7f8 f90c 	bl	80005f8 <__aeabi_dmul>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80083ec:	f7f7 ff4c 	bl	8000288 <__aeabi_dsub>
 80083f0:	f805 6b01 	strb.w	r6, [r5], #1
 80083f4:	9e01      	ldr	r6, [sp, #4]
 80083f6:	9f03      	ldr	r7, [sp, #12]
 80083f8:	1bae      	subs	r6, r5, r6
 80083fa:	42b7      	cmp	r7, r6
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	d135      	bne.n	800846e <_dtoa_r+0x6e6>
 8008402:	f7f7 ff43 	bl	800028c <__adddf3>
 8008406:	4642      	mov	r2, r8
 8008408:	464b      	mov	r3, r9
 800840a:	4606      	mov	r6, r0
 800840c:	460f      	mov	r7, r1
 800840e:	f7f8 fb83 	bl	8000b18 <__aeabi_dcmpgt>
 8008412:	b9d0      	cbnz	r0, 800844a <_dtoa_r+0x6c2>
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	4630      	mov	r0, r6
 800841a:	4639      	mov	r1, r7
 800841c:	f7f8 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008420:	b110      	cbz	r0, 8008428 <_dtoa_r+0x6a0>
 8008422:	f01a 0f01 	tst.w	sl, #1
 8008426:	d110      	bne.n	800844a <_dtoa_r+0x6c2>
 8008428:	4620      	mov	r0, r4
 800842a:	ee18 1a10 	vmov	r1, s16
 800842e:	f000 fd13 	bl	8008e58 <_Bfree>
 8008432:	2300      	movs	r3, #0
 8008434:	9800      	ldr	r0, [sp, #0]
 8008436:	702b      	strb	r3, [r5, #0]
 8008438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800843a:	3001      	adds	r0, #1
 800843c:	6018      	str	r0, [r3, #0]
 800843e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008440:	2b00      	cmp	r3, #0
 8008442:	f43f acf1 	beq.w	8007e28 <_dtoa_r+0xa0>
 8008446:	601d      	str	r5, [r3, #0]
 8008448:	e4ee      	b.n	8007e28 <_dtoa_r+0xa0>
 800844a:	9f00      	ldr	r7, [sp, #0]
 800844c:	462b      	mov	r3, r5
 800844e:	461d      	mov	r5, r3
 8008450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008454:	2a39      	cmp	r2, #57	; 0x39
 8008456:	d106      	bne.n	8008466 <_dtoa_r+0x6de>
 8008458:	9a01      	ldr	r2, [sp, #4]
 800845a:	429a      	cmp	r2, r3
 800845c:	d1f7      	bne.n	800844e <_dtoa_r+0x6c6>
 800845e:	9901      	ldr	r1, [sp, #4]
 8008460:	2230      	movs	r2, #48	; 0x30
 8008462:	3701      	adds	r7, #1
 8008464:	700a      	strb	r2, [r1, #0]
 8008466:	781a      	ldrb	r2, [r3, #0]
 8008468:	3201      	adds	r2, #1
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e790      	b.n	8008390 <_dtoa_r+0x608>
 800846e:	4ba6      	ldr	r3, [pc, #664]	; (8008708 <_dtoa_r+0x980>)
 8008470:	2200      	movs	r2, #0
 8008472:	f7f8 f8c1 	bl	80005f8 <__aeabi_dmul>
 8008476:	2200      	movs	r2, #0
 8008478:	2300      	movs	r3, #0
 800847a:	4606      	mov	r6, r0
 800847c:	460f      	mov	r7, r1
 800847e:	f7f8 fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 8008482:	2800      	cmp	r0, #0
 8008484:	d09d      	beq.n	80083c2 <_dtoa_r+0x63a>
 8008486:	e7cf      	b.n	8008428 <_dtoa_r+0x6a0>
 8008488:	9a08      	ldr	r2, [sp, #32]
 800848a:	2a00      	cmp	r2, #0
 800848c:	f000 80d7 	beq.w	800863e <_dtoa_r+0x8b6>
 8008490:	9a06      	ldr	r2, [sp, #24]
 8008492:	2a01      	cmp	r2, #1
 8008494:	f300 80ba 	bgt.w	800860c <_dtoa_r+0x884>
 8008498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849a:	2a00      	cmp	r2, #0
 800849c:	f000 80b2 	beq.w	8008604 <_dtoa_r+0x87c>
 80084a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084a4:	9e07      	ldr	r6, [sp, #28]
 80084a6:	9d04      	ldr	r5, [sp, #16]
 80084a8:	9a04      	ldr	r2, [sp, #16]
 80084aa:	441a      	add	r2, r3
 80084ac:	9204      	str	r2, [sp, #16]
 80084ae:	9a05      	ldr	r2, [sp, #20]
 80084b0:	2101      	movs	r1, #1
 80084b2:	441a      	add	r2, r3
 80084b4:	4620      	mov	r0, r4
 80084b6:	9205      	str	r2, [sp, #20]
 80084b8:	f000 fd86 	bl	8008fc8 <__i2b>
 80084bc:	4607      	mov	r7, r0
 80084be:	2d00      	cmp	r5, #0
 80084c0:	dd0c      	ble.n	80084dc <_dtoa_r+0x754>
 80084c2:	9b05      	ldr	r3, [sp, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd09      	ble.n	80084dc <_dtoa_r+0x754>
 80084c8:	42ab      	cmp	r3, r5
 80084ca:	9a04      	ldr	r2, [sp, #16]
 80084cc:	bfa8      	it	ge
 80084ce:	462b      	movge	r3, r5
 80084d0:	1ad2      	subs	r2, r2, r3
 80084d2:	9204      	str	r2, [sp, #16]
 80084d4:	9a05      	ldr	r2, [sp, #20]
 80084d6:	1aed      	subs	r5, r5, r3
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	9b07      	ldr	r3, [sp, #28]
 80084de:	b31b      	cbz	r3, 8008528 <_dtoa_r+0x7a0>
 80084e0:	9b08      	ldr	r3, [sp, #32]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80af 	beq.w	8008646 <_dtoa_r+0x8be>
 80084e8:	2e00      	cmp	r6, #0
 80084ea:	dd13      	ble.n	8008514 <_dtoa_r+0x78c>
 80084ec:	4639      	mov	r1, r7
 80084ee:	4632      	mov	r2, r6
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fe29 	bl	8009148 <__pow5mult>
 80084f6:	ee18 2a10 	vmov	r2, s16
 80084fa:	4601      	mov	r1, r0
 80084fc:	4607      	mov	r7, r0
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 fd78 	bl	8008ff4 <__multiply>
 8008504:	ee18 1a10 	vmov	r1, s16
 8008508:	4680      	mov	r8, r0
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fca4 	bl	8008e58 <_Bfree>
 8008510:	ee08 8a10 	vmov	s16, r8
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	1b9a      	subs	r2, r3, r6
 8008518:	d006      	beq.n	8008528 <_dtoa_r+0x7a0>
 800851a:	ee18 1a10 	vmov	r1, s16
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fe12 	bl	8009148 <__pow5mult>
 8008524:	ee08 0a10 	vmov	s16, r0
 8008528:	2101      	movs	r1, #1
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fd4c 	bl	8008fc8 <__i2b>
 8008530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008532:	2b00      	cmp	r3, #0
 8008534:	4606      	mov	r6, r0
 8008536:	f340 8088 	ble.w	800864a <_dtoa_r+0x8c2>
 800853a:	461a      	mov	r2, r3
 800853c:	4601      	mov	r1, r0
 800853e:	4620      	mov	r0, r4
 8008540:	f000 fe02 	bl	8009148 <__pow5mult>
 8008544:	9b06      	ldr	r3, [sp, #24]
 8008546:	2b01      	cmp	r3, #1
 8008548:	4606      	mov	r6, r0
 800854a:	f340 8081 	ble.w	8008650 <_dtoa_r+0x8c8>
 800854e:	f04f 0800 	mov.w	r8, #0
 8008552:	6933      	ldr	r3, [r6, #16]
 8008554:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008558:	6918      	ldr	r0, [r3, #16]
 800855a:	f000 fce5 	bl	8008f28 <__hi0bits>
 800855e:	f1c0 0020 	rsb	r0, r0, #32
 8008562:	9b05      	ldr	r3, [sp, #20]
 8008564:	4418      	add	r0, r3
 8008566:	f010 001f 	ands.w	r0, r0, #31
 800856a:	f000 8092 	beq.w	8008692 <_dtoa_r+0x90a>
 800856e:	f1c0 0320 	rsb	r3, r0, #32
 8008572:	2b04      	cmp	r3, #4
 8008574:	f340 808a 	ble.w	800868c <_dtoa_r+0x904>
 8008578:	f1c0 001c 	rsb	r0, r0, #28
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	4403      	add	r3, r0
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	9b05      	ldr	r3, [sp, #20]
 8008584:	4403      	add	r3, r0
 8008586:	4405      	add	r5, r0
 8008588:	9305      	str	r3, [sp, #20]
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	dd07      	ble.n	80085a0 <_dtoa_r+0x818>
 8008590:	ee18 1a10 	vmov	r1, s16
 8008594:	461a      	mov	r2, r3
 8008596:	4620      	mov	r0, r4
 8008598:	f000 fe30 	bl	80091fc <__lshift>
 800859c:	ee08 0a10 	vmov	s16, r0
 80085a0:	9b05      	ldr	r3, [sp, #20]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dd05      	ble.n	80085b2 <_dtoa_r+0x82a>
 80085a6:	4631      	mov	r1, r6
 80085a8:	461a      	mov	r2, r3
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fe26 	bl	80091fc <__lshift>
 80085b0:	4606      	mov	r6, r0
 80085b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d06e      	beq.n	8008696 <_dtoa_r+0x90e>
 80085b8:	ee18 0a10 	vmov	r0, s16
 80085bc:	4631      	mov	r1, r6
 80085be:	f000 fe8d 	bl	80092dc <__mcmp>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	da67      	bge.n	8008696 <_dtoa_r+0x90e>
 80085c6:	9b00      	ldr	r3, [sp, #0]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	ee18 1a10 	vmov	r1, s16
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	220a      	movs	r2, #10
 80085d2:	2300      	movs	r3, #0
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fc61 	bl	8008e9c <__multadd>
 80085da:	9b08      	ldr	r3, [sp, #32]
 80085dc:	ee08 0a10 	vmov	s16, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 81b1 	beq.w	8008948 <_dtoa_r+0xbc0>
 80085e6:	2300      	movs	r3, #0
 80085e8:	4639      	mov	r1, r7
 80085ea:	220a      	movs	r2, #10
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 fc55 	bl	8008e9c <__multadd>
 80085f2:	9b02      	ldr	r3, [sp, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	4607      	mov	r7, r0
 80085f8:	f300 808e 	bgt.w	8008718 <_dtoa_r+0x990>
 80085fc:	9b06      	ldr	r3, [sp, #24]
 80085fe:	2b02      	cmp	r3, #2
 8008600:	dc51      	bgt.n	80086a6 <_dtoa_r+0x91e>
 8008602:	e089      	b.n	8008718 <_dtoa_r+0x990>
 8008604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008606:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800860a:	e74b      	b.n	80084a4 <_dtoa_r+0x71c>
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	1e5e      	subs	r6, r3, #1
 8008610:	9b07      	ldr	r3, [sp, #28]
 8008612:	42b3      	cmp	r3, r6
 8008614:	bfbf      	itttt	lt
 8008616:	9b07      	ldrlt	r3, [sp, #28]
 8008618:	9607      	strlt	r6, [sp, #28]
 800861a:	1af2      	sublt	r2, r6, r3
 800861c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800861e:	bfb6      	itet	lt
 8008620:	189b      	addlt	r3, r3, r2
 8008622:	1b9e      	subge	r6, r3, r6
 8008624:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	bfb8      	it	lt
 800862a:	2600      	movlt	r6, #0
 800862c:	2b00      	cmp	r3, #0
 800862e:	bfb7      	itett	lt
 8008630:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008634:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008638:	1a9d      	sublt	r5, r3, r2
 800863a:	2300      	movlt	r3, #0
 800863c:	e734      	b.n	80084a8 <_dtoa_r+0x720>
 800863e:	9e07      	ldr	r6, [sp, #28]
 8008640:	9d04      	ldr	r5, [sp, #16]
 8008642:	9f08      	ldr	r7, [sp, #32]
 8008644:	e73b      	b.n	80084be <_dtoa_r+0x736>
 8008646:	9a07      	ldr	r2, [sp, #28]
 8008648:	e767      	b.n	800851a <_dtoa_r+0x792>
 800864a:	9b06      	ldr	r3, [sp, #24]
 800864c:	2b01      	cmp	r3, #1
 800864e:	dc18      	bgt.n	8008682 <_dtoa_r+0x8fa>
 8008650:	f1ba 0f00 	cmp.w	sl, #0
 8008654:	d115      	bne.n	8008682 <_dtoa_r+0x8fa>
 8008656:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800865a:	b993      	cbnz	r3, 8008682 <_dtoa_r+0x8fa>
 800865c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008660:	0d1b      	lsrs	r3, r3, #20
 8008662:	051b      	lsls	r3, r3, #20
 8008664:	b183      	cbz	r3, 8008688 <_dtoa_r+0x900>
 8008666:	9b04      	ldr	r3, [sp, #16]
 8008668:	3301      	adds	r3, #1
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	9b05      	ldr	r3, [sp, #20]
 800866e:	3301      	adds	r3, #1
 8008670:	9305      	str	r3, [sp, #20]
 8008672:	f04f 0801 	mov.w	r8, #1
 8008676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008678:	2b00      	cmp	r3, #0
 800867a:	f47f af6a 	bne.w	8008552 <_dtoa_r+0x7ca>
 800867e:	2001      	movs	r0, #1
 8008680:	e76f      	b.n	8008562 <_dtoa_r+0x7da>
 8008682:	f04f 0800 	mov.w	r8, #0
 8008686:	e7f6      	b.n	8008676 <_dtoa_r+0x8ee>
 8008688:	4698      	mov	r8, r3
 800868a:	e7f4      	b.n	8008676 <_dtoa_r+0x8ee>
 800868c:	f43f af7d 	beq.w	800858a <_dtoa_r+0x802>
 8008690:	4618      	mov	r0, r3
 8008692:	301c      	adds	r0, #28
 8008694:	e772      	b.n	800857c <_dtoa_r+0x7f4>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	dc37      	bgt.n	800870c <_dtoa_r+0x984>
 800869c:	9b06      	ldr	r3, [sp, #24]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	dd34      	ble.n	800870c <_dtoa_r+0x984>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	9302      	str	r3, [sp, #8]
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	b96b      	cbnz	r3, 80086c6 <_dtoa_r+0x93e>
 80086aa:	4631      	mov	r1, r6
 80086ac:	2205      	movs	r2, #5
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 fbf4 	bl	8008e9c <__multadd>
 80086b4:	4601      	mov	r1, r0
 80086b6:	4606      	mov	r6, r0
 80086b8:	ee18 0a10 	vmov	r0, s16
 80086bc:	f000 fe0e 	bl	80092dc <__mcmp>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	f73f adbb 	bgt.w	800823c <_dtoa_r+0x4b4>
 80086c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c8:	9d01      	ldr	r5, [sp, #4]
 80086ca:	43db      	mvns	r3, r3
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	f04f 0800 	mov.w	r8, #0
 80086d2:	4631      	mov	r1, r6
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 fbbf 	bl	8008e58 <_Bfree>
 80086da:	2f00      	cmp	r7, #0
 80086dc:	f43f aea4 	beq.w	8008428 <_dtoa_r+0x6a0>
 80086e0:	f1b8 0f00 	cmp.w	r8, #0
 80086e4:	d005      	beq.n	80086f2 <_dtoa_r+0x96a>
 80086e6:	45b8      	cmp	r8, r7
 80086e8:	d003      	beq.n	80086f2 <_dtoa_r+0x96a>
 80086ea:	4641      	mov	r1, r8
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 fbb3 	bl	8008e58 <_Bfree>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 fbaf 	bl	8008e58 <_Bfree>
 80086fa:	e695      	b.n	8008428 <_dtoa_r+0x6a0>
 80086fc:	2600      	movs	r6, #0
 80086fe:	4637      	mov	r7, r6
 8008700:	e7e1      	b.n	80086c6 <_dtoa_r+0x93e>
 8008702:	9700      	str	r7, [sp, #0]
 8008704:	4637      	mov	r7, r6
 8008706:	e599      	b.n	800823c <_dtoa_r+0x4b4>
 8008708:	40240000 	.word	0x40240000
 800870c:	9b08      	ldr	r3, [sp, #32]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80ca 	beq.w	80088a8 <_dtoa_r+0xb20>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	9302      	str	r3, [sp, #8]
 8008718:	2d00      	cmp	r5, #0
 800871a:	dd05      	ble.n	8008728 <_dtoa_r+0x9a0>
 800871c:	4639      	mov	r1, r7
 800871e:	462a      	mov	r2, r5
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fd6b 	bl	80091fc <__lshift>
 8008726:	4607      	mov	r7, r0
 8008728:	f1b8 0f00 	cmp.w	r8, #0
 800872c:	d05b      	beq.n	80087e6 <_dtoa_r+0xa5e>
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fb51 	bl	8008dd8 <_Balloc>
 8008736:	4605      	mov	r5, r0
 8008738:	b928      	cbnz	r0, 8008746 <_dtoa_r+0x9be>
 800873a:	4b87      	ldr	r3, [pc, #540]	; (8008958 <_dtoa_r+0xbd0>)
 800873c:	4602      	mov	r2, r0
 800873e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008742:	f7ff bb3b 	b.w	8007dbc <_dtoa_r+0x34>
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	3202      	adds	r2, #2
 800874a:	0092      	lsls	r2, r2, #2
 800874c:	f107 010c 	add.w	r1, r7, #12
 8008750:	300c      	adds	r0, #12
 8008752:	f000 fb33 	bl	8008dbc <memcpy>
 8008756:	2201      	movs	r2, #1
 8008758:	4629      	mov	r1, r5
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fd4e 	bl	80091fc <__lshift>
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	f103 0901 	add.w	r9, r3, #1
 8008766:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800876a:	4413      	add	r3, r2
 800876c:	9305      	str	r3, [sp, #20]
 800876e:	f00a 0301 	and.w	r3, sl, #1
 8008772:	46b8      	mov	r8, r7
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	4607      	mov	r7, r0
 8008778:	4631      	mov	r1, r6
 800877a:	ee18 0a10 	vmov	r0, s16
 800877e:	f7ff fa77 	bl	8007c70 <quorem>
 8008782:	4641      	mov	r1, r8
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800878a:	ee18 0a10 	vmov	r0, s16
 800878e:	f000 fda5 	bl	80092dc <__mcmp>
 8008792:	463a      	mov	r2, r7
 8008794:	9003      	str	r0, [sp, #12]
 8008796:	4631      	mov	r1, r6
 8008798:	4620      	mov	r0, r4
 800879a:	f000 fdbb 	bl	8009314 <__mdiff>
 800879e:	68c2      	ldr	r2, [r0, #12]
 80087a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80087a4:	4605      	mov	r5, r0
 80087a6:	bb02      	cbnz	r2, 80087ea <_dtoa_r+0xa62>
 80087a8:	4601      	mov	r1, r0
 80087aa:	ee18 0a10 	vmov	r0, s16
 80087ae:	f000 fd95 	bl	80092dc <__mcmp>
 80087b2:	4602      	mov	r2, r0
 80087b4:	4629      	mov	r1, r5
 80087b6:	4620      	mov	r0, r4
 80087b8:	9207      	str	r2, [sp, #28]
 80087ba:	f000 fb4d 	bl	8008e58 <_Bfree>
 80087be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80087c2:	ea43 0102 	orr.w	r1, r3, r2
 80087c6:	9b04      	ldr	r3, [sp, #16]
 80087c8:	430b      	orrs	r3, r1
 80087ca:	464d      	mov	r5, r9
 80087cc:	d10f      	bne.n	80087ee <_dtoa_r+0xa66>
 80087ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087d2:	d02a      	beq.n	800882a <_dtoa_r+0xaa2>
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dd02      	ble.n	80087e0 <_dtoa_r+0xa58>
 80087da:	9b02      	ldr	r3, [sp, #8]
 80087dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80087e0:	f88b a000 	strb.w	sl, [fp]
 80087e4:	e775      	b.n	80086d2 <_dtoa_r+0x94a>
 80087e6:	4638      	mov	r0, r7
 80087e8:	e7ba      	b.n	8008760 <_dtoa_r+0x9d8>
 80087ea:	2201      	movs	r2, #1
 80087ec:	e7e2      	b.n	80087b4 <_dtoa_r+0xa2c>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	db04      	blt.n	80087fe <_dtoa_r+0xa76>
 80087f4:	9906      	ldr	r1, [sp, #24]
 80087f6:	430b      	orrs	r3, r1
 80087f8:	9904      	ldr	r1, [sp, #16]
 80087fa:	430b      	orrs	r3, r1
 80087fc:	d122      	bne.n	8008844 <_dtoa_r+0xabc>
 80087fe:	2a00      	cmp	r2, #0
 8008800:	ddee      	ble.n	80087e0 <_dtoa_r+0xa58>
 8008802:	ee18 1a10 	vmov	r1, s16
 8008806:	2201      	movs	r2, #1
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fcf7 	bl	80091fc <__lshift>
 800880e:	4631      	mov	r1, r6
 8008810:	ee08 0a10 	vmov	s16, r0
 8008814:	f000 fd62 	bl	80092dc <__mcmp>
 8008818:	2800      	cmp	r0, #0
 800881a:	dc03      	bgt.n	8008824 <_dtoa_r+0xa9c>
 800881c:	d1e0      	bne.n	80087e0 <_dtoa_r+0xa58>
 800881e:	f01a 0f01 	tst.w	sl, #1
 8008822:	d0dd      	beq.n	80087e0 <_dtoa_r+0xa58>
 8008824:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008828:	d1d7      	bne.n	80087da <_dtoa_r+0xa52>
 800882a:	2339      	movs	r3, #57	; 0x39
 800882c:	f88b 3000 	strb.w	r3, [fp]
 8008830:	462b      	mov	r3, r5
 8008832:	461d      	mov	r5, r3
 8008834:	3b01      	subs	r3, #1
 8008836:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800883a:	2a39      	cmp	r2, #57	; 0x39
 800883c:	d071      	beq.n	8008922 <_dtoa_r+0xb9a>
 800883e:	3201      	adds	r2, #1
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	e746      	b.n	80086d2 <_dtoa_r+0x94a>
 8008844:	2a00      	cmp	r2, #0
 8008846:	dd07      	ble.n	8008858 <_dtoa_r+0xad0>
 8008848:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800884c:	d0ed      	beq.n	800882a <_dtoa_r+0xaa2>
 800884e:	f10a 0301 	add.w	r3, sl, #1
 8008852:	f88b 3000 	strb.w	r3, [fp]
 8008856:	e73c      	b.n	80086d2 <_dtoa_r+0x94a>
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800885e:	4599      	cmp	r9, r3
 8008860:	d047      	beq.n	80088f2 <_dtoa_r+0xb6a>
 8008862:	ee18 1a10 	vmov	r1, s16
 8008866:	2300      	movs	r3, #0
 8008868:	220a      	movs	r2, #10
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fb16 	bl	8008e9c <__multadd>
 8008870:	45b8      	cmp	r8, r7
 8008872:	ee08 0a10 	vmov	s16, r0
 8008876:	f04f 0300 	mov.w	r3, #0
 800887a:	f04f 020a 	mov.w	r2, #10
 800887e:	4641      	mov	r1, r8
 8008880:	4620      	mov	r0, r4
 8008882:	d106      	bne.n	8008892 <_dtoa_r+0xb0a>
 8008884:	f000 fb0a 	bl	8008e9c <__multadd>
 8008888:	4680      	mov	r8, r0
 800888a:	4607      	mov	r7, r0
 800888c:	f109 0901 	add.w	r9, r9, #1
 8008890:	e772      	b.n	8008778 <_dtoa_r+0x9f0>
 8008892:	f000 fb03 	bl	8008e9c <__multadd>
 8008896:	4639      	mov	r1, r7
 8008898:	4680      	mov	r8, r0
 800889a:	2300      	movs	r3, #0
 800889c:	220a      	movs	r2, #10
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fafc 	bl	8008e9c <__multadd>
 80088a4:	4607      	mov	r7, r0
 80088a6:	e7f1      	b.n	800888c <_dtoa_r+0xb04>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	9302      	str	r3, [sp, #8]
 80088ac:	9d01      	ldr	r5, [sp, #4]
 80088ae:	ee18 0a10 	vmov	r0, s16
 80088b2:	4631      	mov	r1, r6
 80088b4:	f7ff f9dc 	bl	8007c70 <quorem>
 80088b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	f805 ab01 	strb.w	sl, [r5], #1
 80088c2:	1aea      	subs	r2, r5, r3
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dd09      	ble.n	80088de <_dtoa_r+0xb56>
 80088ca:	ee18 1a10 	vmov	r1, s16
 80088ce:	2300      	movs	r3, #0
 80088d0:	220a      	movs	r2, #10
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fae2 	bl	8008e9c <__multadd>
 80088d8:	ee08 0a10 	vmov	s16, r0
 80088dc:	e7e7      	b.n	80088ae <_dtoa_r+0xb26>
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bfc8      	it	gt
 80088e4:	461d      	movgt	r5, r3
 80088e6:	9b01      	ldr	r3, [sp, #4]
 80088e8:	bfd8      	it	le
 80088ea:	2501      	movle	r5, #1
 80088ec:	441d      	add	r5, r3
 80088ee:	f04f 0800 	mov.w	r8, #0
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	2201      	movs	r2, #1
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fc7f 	bl	80091fc <__lshift>
 80088fe:	4631      	mov	r1, r6
 8008900:	ee08 0a10 	vmov	s16, r0
 8008904:	f000 fcea 	bl	80092dc <__mcmp>
 8008908:	2800      	cmp	r0, #0
 800890a:	dc91      	bgt.n	8008830 <_dtoa_r+0xaa8>
 800890c:	d102      	bne.n	8008914 <_dtoa_r+0xb8c>
 800890e:	f01a 0f01 	tst.w	sl, #1
 8008912:	d18d      	bne.n	8008830 <_dtoa_r+0xaa8>
 8008914:	462b      	mov	r3, r5
 8008916:	461d      	mov	r5, r3
 8008918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800891c:	2a30      	cmp	r2, #48	; 0x30
 800891e:	d0fa      	beq.n	8008916 <_dtoa_r+0xb8e>
 8008920:	e6d7      	b.n	80086d2 <_dtoa_r+0x94a>
 8008922:	9a01      	ldr	r2, [sp, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d184      	bne.n	8008832 <_dtoa_r+0xaaa>
 8008928:	9b00      	ldr	r3, [sp, #0]
 800892a:	3301      	adds	r3, #1
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	2331      	movs	r3, #49	; 0x31
 8008930:	7013      	strb	r3, [r2, #0]
 8008932:	e6ce      	b.n	80086d2 <_dtoa_r+0x94a>
 8008934:	4b09      	ldr	r3, [pc, #36]	; (800895c <_dtoa_r+0xbd4>)
 8008936:	f7ff ba95 	b.w	8007e64 <_dtoa_r+0xdc>
 800893a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800893c:	2b00      	cmp	r3, #0
 800893e:	f47f aa6e 	bne.w	8007e1e <_dtoa_r+0x96>
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <_dtoa_r+0xbd8>)
 8008944:	f7ff ba8e 	b.w	8007e64 <_dtoa_r+0xdc>
 8008948:	9b02      	ldr	r3, [sp, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	dcae      	bgt.n	80088ac <_dtoa_r+0xb24>
 800894e:	9b06      	ldr	r3, [sp, #24]
 8008950:	2b02      	cmp	r3, #2
 8008952:	f73f aea8 	bgt.w	80086a6 <_dtoa_r+0x91e>
 8008956:	e7a9      	b.n	80088ac <_dtoa_r+0xb24>
 8008958:	08009f3f 	.word	0x08009f3f
 800895c:	08009e9c 	.word	0x08009e9c
 8008960:	08009ec0 	.word	0x08009ec0

08008964 <__sflush_r>:
 8008964:	898a      	ldrh	r2, [r1, #12]
 8008966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	4605      	mov	r5, r0
 800896c:	0710      	lsls	r0, r2, #28
 800896e:	460c      	mov	r4, r1
 8008970:	d458      	bmi.n	8008a24 <__sflush_r+0xc0>
 8008972:	684b      	ldr	r3, [r1, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	dc05      	bgt.n	8008984 <__sflush_r+0x20>
 8008978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800897a:	2b00      	cmp	r3, #0
 800897c:	dc02      	bgt.n	8008984 <__sflush_r+0x20>
 800897e:	2000      	movs	r0, #0
 8008980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008986:	2e00      	cmp	r6, #0
 8008988:	d0f9      	beq.n	800897e <__sflush_r+0x1a>
 800898a:	2300      	movs	r3, #0
 800898c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008990:	682f      	ldr	r7, [r5, #0]
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	d032      	beq.n	80089fc <__sflush_r+0x98>
 8008996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	075a      	lsls	r2, r3, #29
 800899c:	d505      	bpl.n	80089aa <__sflush_r+0x46>
 800899e:	6863      	ldr	r3, [r4, #4]
 80089a0:	1ac0      	subs	r0, r0, r3
 80089a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089a4:	b10b      	cbz	r3, 80089aa <__sflush_r+0x46>
 80089a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089a8:	1ac0      	subs	r0, r0, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	4602      	mov	r2, r0
 80089ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089b0:	6a21      	ldr	r1, [r4, #32]
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b0      	blx	r6
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	d106      	bne.n	80089ca <__sflush_r+0x66>
 80089bc:	6829      	ldr	r1, [r5, #0]
 80089be:	291d      	cmp	r1, #29
 80089c0:	d82c      	bhi.n	8008a1c <__sflush_r+0xb8>
 80089c2:	4a2a      	ldr	r2, [pc, #168]	; (8008a6c <__sflush_r+0x108>)
 80089c4:	40ca      	lsrs	r2, r1
 80089c6:	07d6      	lsls	r6, r2, #31
 80089c8:	d528      	bpl.n	8008a1c <__sflush_r+0xb8>
 80089ca:	2200      	movs	r2, #0
 80089cc:	6062      	str	r2, [r4, #4]
 80089ce:	04d9      	lsls	r1, r3, #19
 80089d0:	6922      	ldr	r2, [r4, #16]
 80089d2:	6022      	str	r2, [r4, #0]
 80089d4:	d504      	bpl.n	80089e0 <__sflush_r+0x7c>
 80089d6:	1c42      	adds	r2, r0, #1
 80089d8:	d101      	bne.n	80089de <__sflush_r+0x7a>
 80089da:	682b      	ldr	r3, [r5, #0]
 80089dc:	b903      	cbnz	r3, 80089e0 <__sflush_r+0x7c>
 80089de:	6560      	str	r0, [r4, #84]	; 0x54
 80089e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089e2:	602f      	str	r7, [r5, #0]
 80089e4:	2900      	cmp	r1, #0
 80089e6:	d0ca      	beq.n	800897e <__sflush_r+0x1a>
 80089e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d002      	beq.n	80089f6 <__sflush_r+0x92>
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 fd8b 	bl	800950c <_free_r>
 80089f6:	2000      	movs	r0, #0
 80089f8:	6360      	str	r0, [r4, #52]	; 0x34
 80089fa:	e7c1      	b.n	8008980 <__sflush_r+0x1c>
 80089fc:	6a21      	ldr	r1, [r4, #32]
 80089fe:	2301      	movs	r3, #1
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b0      	blx	r6
 8008a04:	1c41      	adds	r1, r0, #1
 8008a06:	d1c7      	bne.n	8008998 <__sflush_r+0x34>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0c4      	beq.n	8008998 <__sflush_r+0x34>
 8008a0e:	2b1d      	cmp	r3, #29
 8008a10:	d001      	beq.n	8008a16 <__sflush_r+0xb2>
 8008a12:	2b16      	cmp	r3, #22
 8008a14:	d101      	bne.n	8008a1a <__sflush_r+0xb6>
 8008a16:	602f      	str	r7, [r5, #0]
 8008a18:	e7b1      	b.n	800897e <__sflush_r+0x1a>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	e7ad      	b.n	8008980 <__sflush_r+0x1c>
 8008a24:	690f      	ldr	r7, [r1, #16]
 8008a26:	2f00      	cmp	r7, #0
 8008a28:	d0a9      	beq.n	800897e <__sflush_r+0x1a>
 8008a2a:	0793      	lsls	r3, r2, #30
 8008a2c:	680e      	ldr	r6, [r1, #0]
 8008a2e:	bf08      	it	eq
 8008a30:	694b      	ldreq	r3, [r1, #20]
 8008a32:	600f      	str	r7, [r1, #0]
 8008a34:	bf18      	it	ne
 8008a36:	2300      	movne	r3, #0
 8008a38:	eba6 0807 	sub.w	r8, r6, r7
 8008a3c:	608b      	str	r3, [r1, #8]
 8008a3e:	f1b8 0f00 	cmp.w	r8, #0
 8008a42:	dd9c      	ble.n	800897e <__sflush_r+0x1a>
 8008a44:	6a21      	ldr	r1, [r4, #32]
 8008a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a48:	4643      	mov	r3, r8
 8008a4a:	463a      	mov	r2, r7
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b0      	blx	r6
 8008a50:	2800      	cmp	r0, #0
 8008a52:	dc06      	bgt.n	8008a62 <__sflush_r+0xfe>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a60:	e78e      	b.n	8008980 <__sflush_r+0x1c>
 8008a62:	4407      	add	r7, r0
 8008a64:	eba8 0800 	sub.w	r8, r8, r0
 8008a68:	e7e9      	b.n	8008a3e <__sflush_r+0xda>
 8008a6a:	bf00      	nop
 8008a6c:	20400001 	.word	0x20400001

08008a70 <_fflush_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	690b      	ldr	r3, [r1, #16]
 8008a74:	4605      	mov	r5, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	b913      	cbnz	r3, 8008a80 <_fflush_r+0x10>
 8008a7a:	2500      	movs	r5, #0
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	b118      	cbz	r0, 8008a8a <_fflush_r+0x1a>
 8008a82:	6983      	ldr	r3, [r0, #24]
 8008a84:	b90b      	cbnz	r3, 8008a8a <_fflush_r+0x1a>
 8008a86:	f000 f887 	bl	8008b98 <__sinit>
 8008a8a:	4b14      	ldr	r3, [pc, #80]	; (8008adc <_fflush_r+0x6c>)
 8008a8c:	429c      	cmp	r4, r3
 8008a8e:	d11b      	bne.n	8008ac8 <_fflush_r+0x58>
 8008a90:	686c      	ldr	r4, [r5, #4]
 8008a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0ef      	beq.n	8008a7a <_fflush_r+0xa>
 8008a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a9c:	07d0      	lsls	r0, r2, #31
 8008a9e:	d404      	bmi.n	8008aaa <_fflush_r+0x3a>
 8008aa0:	0599      	lsls	r1, r3, #22
 8008aa2:	d402      	bmi.n	8008aaa <_fflush_r+0x3a>
 8008aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aa6:	f000 f91a 	bl	8008cde <__retarget_lock_acquire_recursive>
 8008aaa:	4628      	mov	r0, r5
 8008aac:	4621      	mov	r1, r4
 8008aae:	f7ff ff59 	bl	8008964 <__sflush_r>
 8008ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ab4:	07da      	lsls	r2, r3, #31
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	d4e0      	bmi.n	8008a7c <_fflush_r+0xc>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	059b      	lsls	r3, r3, #22
 8008abe:	d4dd      	bmi.n	8008a7c <_fflush_r+0xc>
 8008ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ac2:	f000 f90d 	bl	8008ce0 <__retarget_lock_release_recursive>
 8008ac6:	e7d9      	b.n	8008a7c <_fflush_r+0xc>
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <_fflush_r+0x70>)
 8008aca:	429c      	cmp	r4, r3
 8008acc:	d101      	bne.n	8008ad2 <_fflush_r+0x62>
 8008ace:	68ac      	ldr	r4, [r5, #8]
 8008ad0:	e7df      	b.n	8008a92 <_fflush_r+0x22>
 8008ad2:	4b04      	ldr	r3, [pc, #16]	; (8008ae4 <_fflush_r+0x74>)
 8008ad4:	429c      	cmp	r4, r3
 8008ad6:	bf08      	it	eq
 8008ad8:	68ec      	ldreq	r4, [r5, #12]
 8008ada:	e7da      	b.n	8008a92 <_fflush_r+0x22>
 8008adc:	08009f70 	.word	0x08009f70
 8008ae0:	08009f90 	.word	0x08009f90
 8008ae4:	08009f50 	.word	0x08009f50

08008ae8 <std>:
 8008ae8:	2300      	movs	r3, #0
 8008aea:	b510      	push	{r4, lr}
 8008aec:	4604      	mov	r4, r0
 8008aee:	e9c0 3300 	strd	r3, r3, [r0]
 8008af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008af6:	6083      	str	r3, [r0, #8]
 8008af8:	8181      	strh	r1, [r0, #12]
 8008afa:	6643      	str	r3, [r0, #100]	; 0x64
 8008afc:	81c2      	strh	r2, [r0, #14]
 8008afe:	6183      	str	r3, [r0, #24]
 8008b00:	4619      	mov	r1, r3
 8008b02:	2208      	movs	r2, #8
 8008b04:	305c      	adds	r0, #92	; 0x5c
 8008b06:	f7fe fb5b 	bl	80071c0 <memset>
 8008b0a:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <std+0x38>)
 8008b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8008b0e:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <std+0x3c>)
 8008b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <std+0x40>)
 8008b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b16:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <std+0x44>)
 8008b18:	6224      	str	r4, [r4, #32]
 8008b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	bf00      	nop
 8008b20:	080099a1 	.word	0x080099a1
 8008b24:	080099c3 	.word	0x080099c3
 8008b28:	080099fb 	.word	0x080099fb
 8008b2c:	08009a1f 	.word	0x08009a1f

08008b30 <_cleanup_r>:
 8008b30:	4901      	ldr	r1, [pc, #4]	; (8008b38 <_cleanup_r+0x8>)
 8008b32:	f000 b8af 	b.w	8008c94 <_fwalk_reent>
 8008b36:	bf00      	nop
 8008b38:	08008a71 	.word	0x08008a71

08008b3c <__sfmoreglue>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	2268      	movs	r2, #104	; 0x68
 8008b40:	1e4d      	subs	r5, r1, #1
 8008b42:	4355      	muls	r5, r2
 8008b44:	460e      	mov	r6, r1
 8008b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b4a:	f000 fd4b 	bl	80095e4 <_malloc_r>
 8008b4e:	4604      	mov	r4, r0
 8008b50:	b140      	cbz	r0, 8008b64 <__sfmoreglue+0x28>
 8008b52:	2100      	movs	r1, #0
 8008b54:	e9c0 1600 	strd	r1, r6, [r0]
 8008b58:	300c      	adds	r0, #12
 8008b5a:	60a0      	str	r0, [r4, #8]
 8008b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b60:	f7fe fb2e 	bl	80071c0 <memset>
 8008b64:	4620      	mov	r0, r4
 8008b66:	bd70      	pop	{r4, r5, r6, pc}

08008b68 <__sfp_lock_acquire>:
 8008b68:	4801      	ldr	r0, [pc, #4]	; (8008b70 <__sfp_lock_acquire+0x8>)
 8008b6a:	f000 b8b8 	b.w	8008cde <__retarget_lock_acquire_recursive>
 8008b6e:	bf00      	nop
 8008b70:	200005b5 	.word	0x200005b5

08008b74 <__sfp_lock_release>:
 8008b74:	4801      	ldr	r0, [pc, #4]	; (8008b7c <__sfp_lock_release+0x8>)
 8008b76:	f000 b8b3 	b.w	8008ce0 <__retarget_lock_release_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	200005b5 	.word	0x200005b5

08008b80 <__sinit_lock_acquire>:
 8008b80:	4801      	ldr	r0, [pc, #4]	; (8008b88 <__sinit_lock_acquire+0x8>)
 8008b82:	f000 b8ac 	b.w	8008cde <__retarget_lock_acquire_recursive>
 8008b86:	bf00      	nop
 8008b88:	200005b6 	.word	0x200005b6

08008b8c <__sinit_lock_release>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	; (8008b94 <__sinit_lock_release+0x8>)
 8008b8e:	f000 b8a7 	b.w	8008ce0 <__retarget_lock_release_recursive>
 8008b92:	bf00      	nop
 8008b94:	200005b6 	.word	0x200005b6

08008b98 <__sinit>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	f7ff fff0 	bl	8008b80 <__sinit_lock_acquire>
 8008ba0:	69a3      	ldr	r3, [r4, #24]
 8008ba2:	b11b      	cbz	r3, 8008bac <__sinit+0x14>
 8008ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ba8:	f7ff bff0 	b.w	8008b8c <__sinit_lock_release>
 8008bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8008bb2:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <__sinit+0x68>)
 8008bb4:	4a13      	ldr	r2, [pc, #76]	; (8008c04 <__sinit+0x6c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bba:	42a3      	cmp	r3, r4
 8008bbc:	bf04      	itt	eq
 8008bbe:	2301      	moveq	r3, #1
 8008bc0:	61a3      	streq	r3, [r4, #24]
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 f820 	bl	8008c08 <__sfp>
 8008bc8:	6060      	str	r0, [r4, #4]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 f81c 	bl	8008c08 <__sfp>
 8008bd0:	60a0      	str	r0, [r4, #8]
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 f818 	bl	8008c08 <__sfp>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	60e0      	str	r0, [r4, #12]
 8008bdc:	2104      	movs	r1, #4
 8008bde:	6860      	ldr	r0, [r4, #4]
 8008be0:	f7ff ff82 	bl	8008ae8 <std>
 8008be4:	68a0      	ldr	r0, [r4, #8]
 8008be6:	2201      	movs	r2, #1
 8008be8:	2109      	movs	r1, #9
 8008bea:	f7ff ff7d 	bl	8008ae8 <std>
 8008bee:	68e0      	ldr	r0, [r4, #12]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	2112      	movs	r1, #18
 8008bf4:	f7ff ff78 	bl	8008ae8 <std>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	61a3      	str	r3, [r4, #24]
 8008bfc:	e7d2      	b.n	8008ba4 <__sinit+0xc>
 8008bfe:	bf00      	nop
 8008c00:	08009e88 	.word	0x08009e88
 8008c04:	08008b31 	.word	0x08008b31

08008c08 <__sfp>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	f7ff ffac 	bl	8008b68 <__sfp_lock_acquire>
 8008c10:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <__sfp+0x84>)
 8008c12:	681e      	ldr	r6, [r3, #0]
 8008c14:	69b3      	ldr	r3, [r6, #24]
 8008c16:	b913      	cbnz	r3, 8008c1e <__sfp+0x16>
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7ff ffbd 	bl	8008b98 <__sinit>
 8008c1e:	3648      	adds	r6, #72	; 0x48
 8008c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	d503      	bpl.n	8008c30 <__sfp+0x28>
 8008c28:	6833      	ldr	r3, [r6, #0]
 8008c2a:	b30b      	cbz	r3, 8008c70 <__sfp+0x68>
 8008c2c:	6836      	ldr	r6, [r6, #0]
 8008c2e:	e7f7      	b.n	8008c20 <__sfp+0x18>
 8008c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c34:	b9d5      	cbnz	r5, 8008c6c <__sfp+0x64>
 8008c36:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <__sfp+0x88>)
 8008c38:	60e3      	str	r3, [r4, #12]
 8008c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8008c40:	f000 f84c 	bl	8008cdc <__retarget_lock_init_recursive>
 8008c44:	f7ff ff96 	bl	8008b74 <__sfp_lock_release>
 8008c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c50:	6025      	str	r5, [r4, #0]
 8008c52:	61a5      	str	r5, [r4, #24]
 8008c54:	2208      	movs	r2, #8
 8008c56:	4629      	mov	r1, r5
 8008c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c5c:	f7fe fab0 	bl	80071c0 <memset>
 8008c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c68:	4620      	mov	r0, r4
 8008c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c6c:	3468      	adds	r4, #104	; 0x68
 8008c6e:	e7d9      	b.n	8008c24 <__sfp+0x1c>
 8008c70:	2104      	movs	r1, #4
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7ff ff62 	bl	8008b3c <__sfmoreglue>
 8008c78:	4604      	mov	r4, r0
 8008c7a:	6030      	str	r0, [r6, #0]
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d1d5      	bne.n	8008c2c <__sfp+0x24>
 8008c80:	f7ff ff78 	bl	8008b74 <__sfp_lock_release>
 8008c84:	230c      	movs	r3, #12
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	e7ee      	b.n	8008c68 <__sfp+0x60>
 8008c8a:	bf00      	nop
 8008c8c:	08009e88 	.word	0x08009e88
 8008c90:	ffff0001 	.word	0xffff0001

08008c94 <_fwalk_reent>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	4606      	mov	r6, r0
 8008c9a:	4688      	mov	r8, r1
 8008c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ca0:	2700      	movs	r7, #0
 8008ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8008caa:	d505      	bpl.n	8008cb8 <_fwalk_reent+0x24>
 8008cac:	6824      	ldr	r4, [r4, #0]
 8008cae:	2c00      	cmp	r4, #0
 8008cb0:	d1f7      	bne.n	8008ca2 <_fwalk_reent+0xe>
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb8:	89ab      	ldrh	r3, [r5, #12]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d907      	bls.n	8008cce <_fwalk_reent+0x3a>
 8008cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	d003      	beq.n	8008cce <_fwalk_reent+0x3a>
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4630      	mov	r0, r6
 8008cca:	47c0      	blx	r8
 8008ccc:	4307      	orrs	r7, r0
 8008cce:	3568      	adds	r5, #104	; 0x68
 8008cd0:	e7e9      	b.n	8008ca6 <_fwalk_reent+0x12>
	...

08008cd4 <_localeconv_r>:
 8008cd4:	4800      	ldr	r0, [pc, #0]	; (8008cd8 <_localeconv_r+0x4>)
 8008cd6:	4770      	bx	lr
 8008cd8:	20000160 	.word	0x20000160

08008cdc <__retarget_lock_init_recursive>:
 8008cdc:	4770      	bx	lr

08008cde <__retarget_lock_acquire_recursive>:
 8008cde:	4770      	bx	lr

08008ce0 <__retarget_lock_release_recursive>:
 8008ce0:	4770      	bx	lr

08008ce2 <__swhatbuf_r>:
 8008ce2:	b570      	push	{r4, r5, r6, lr}
 8008ce4:	460e      	mov	r6, r1
 8008ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cea:	2900      	cmp	r1, #0
 8008cec:	b096      	sub	sp, #88	; 0x58
 8008cee:	4614      	mov	r4, r2
 8008cf0:	461d      	mov	r5, r3
 8008cf2:	da08      	bge.n	8008d06 <__swhatbuf_r+0x24>
 8008cf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	602a      	str	r2, [r5, #0]
 8008cfc:	061a      	lsls	r2, r3, #24
 8008cfe:	d410      	bmi.n	8008d22 <__swhatbuf_r+0x40>
 8008d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d04:	e00e      	b.n	8008d24 <__swhatbuf_r+0x42>
 8008d06:	466a      	mov	r2, sp
 8008d08:	f000 ffa0 	bl	8009c4c <_fstat_r>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	dbf1      	blt.n	8008cf4 <__swhatbuf_r+0x12>
 8008d10:	9a01      	ldr	r2, [sp, #4]
 8008d12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d1a:	425a      	negs	r2, r3
 8008d1c:	415a      	adcs	r2, r3
 8008d1e:	602a      	str	r2, [r5, #0]
 8008d20:	e7ee      	b.n	8008d00 <__swhatbuf_r+0x1e>
 8008d22:	2340      	movs	r3, #64	; 0x40
 8008d24:	2000      	movs	r0, #0
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	b016      	add	sp, #88	; 0x58
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}

08008d2c <__smakebuf_r>:
 8008d2c:	898b      	ldrh	r3, [r1, #12]
 8008d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d30:	079d      	lsls	r5, r3, #30
 8008d32:	4606      	mov	r6, r0
 8008d34:	460c      	mov	r4, r1
 8008d36:	d507      	bpl.n	8008d48 <__smakebuf_r+0x1c>
 8008d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	6123      	str	r3, [r4, #16]
 8008d40:	2301      	movs	r3, #1
 8008d42:	6163      	str	r3, [r4, #20]
 8008d44:	b002      	add	sp, #8
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	ab01      	add	r3, sp, #4
 8008d4a:	466a      	mov	r2, sp
 8008d4c:	f7ff ffc9 	bl	8008ce2 <__swhatbuf_r>
 8008d50:	9900      	ldr	r1, [sp, #0]
 8008d52:	4605      	mov	r5, r0
 8008d54:	4630      	mov	r0, r6
 8008d56:	f000 fc45 	bl	80095e4 <_malloc_r>
 8008d5a:	b948      	cbnz	r0, 8008d70 <__smakebuf_r+0x44>
 8008d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d60:	059a      	lsls	r2, r3, #22
 8008d62:	d4ef      	bmi.n	8008d44 <__smakebuf_r+0x18>
 8008d64:	f023 0303 	bic.w	r3, r3, #3
 8008d68:	f043 0302 	orr.w	r3, r3, #2
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	e7e3      	b.n	8008d38 <__smakebuf_r+0xc>
 8008d70:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <__smakebuf_r+0x7c>)
 8008d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	6020      	str	r0, [r4, #0]
 8008d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	6163      	str	r3, [r4, #20]
 8008d82:	9b01      	ldr	r3, [sp, #4]
 8008d84:	6120      	str	r0, [r4, #16]
 8008d86:	b15b      	cbz	r3, 8008da0 <__smakebuf_r+0x74>
 8008d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f000 ff6f 	bl	8009c70 <_isatty_r>
 8008d92:	b128      	cbz	r0, 8008da0 <__smakebuf_r+0x74>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	89a0      	ldrh	r0, [r4, #12]
 8008da2:	4305      	orrs	r5, r0
 8008da4:	81a5      	strh	r5, [r4, #12]
 8008da6:	e7cd      	b.n	8008d44 <__smakebuf_r+0x18>
 8008da8:	08008b31 	.word	0x08008b31

08008dac <malloc>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <malloc+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f000 bc17 	b.w	80095e4 <_malloc_r>
 8008db6:	bf00      	nop
 8008db8:	2000000c 	.word	0x2000000c

08008dbc <memcpy>:
 8008dbc:	440a      	add	r2, r1
 8008dbe:	4291      	cmp	r1, r2
 8008dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dc4:	d100      	bne.n	8008dc8 <memcpy+0xc>
 8008dc6:	4770      	bx	lr
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dd2:	4291      	cmp	r1, r2
 8008dd4:	d1f9      	bne.n	8008dca <memcpy+0xe>
 8008dd6:	bd10      	pop	{r4, pc}

08008dd8 <_Balloc>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ddc:	4604      	mov	r4, r0
 8008dde:	460d      	mov	r5, r1
 8008de0:	b976      	cbnz	r6, 8008e00 <_Balloc+0x28>
 8008de2:	2010      	movs	r0, #16
 8008de4:	f7ff ffe2 	bl	8008dac <malloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	6260      	str	r0, [r4, #36]	; 0x24
 8008dec:	b920      	cbnz	r0, 8008df8 <_Balloc+0x20>
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <_Balloc+0x78>)
 8008df0:	4818      	ldr	r0, [pc, #96]	; (8008e54 <_Balloc+0x7c>)
 8008df2:	2166      	movs	r1, #102	; 0x66
 8008df4:	f000 feea 	bl	8009bcc <__assert_func>
 8008df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dfc:	6006      	str	r6, [r0, #0]
 8008dfe:	60c6      	str	r6, [r0, #12]
 8008e00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e02:	68f3      	ldr	r3, [r6, #12]
 8008e04:	b183      	cbz	r3, 8008e28 <_Balloc+0x50>
 8008e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e0e:	b9b8      	cbnz	r0, 8008e40 <_Balloc+0x68>
 8008e10:	2101      	movs	r1, #1
 8008e12:	fa01 f605 	lsl.w	r6, r1, r5
 8008e16:	1d72      	adds	r2, r6, #5
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fb60 	bl	80094e0 <_calloc_r>
 8008e20:	b160      	cbz	r0, 8008e3c <_Balloc+0x64>
 8008e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e26:	e00e      	b.n	8008e46 <_Balloc+0x6e>
 8008e28:	2221      	movs	r2, #33	; 0x21
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f000 fb57 	bl	80094e0 <_calloc_r>
 8008e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e34:	60f0      	str	r0, [r6, #12]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e4      	bne.n	8008e06 <_Balloc+0x2e>
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	6802      	ldr	r2, [r0, #0]
 8008e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e46:	2300      	movs	r3, #0
 8008e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e4c:	e7f7      	b.n	8008e3e <_Balloc+0x66>
 8008e4e:	bf00      	nop
 8008e50:	08009ecd 	.word	0x08009ecd
 8008e54:	08009fb0 	.word	0x08009fb0

08008e58 <_Bfree>:
 8008e58:	b570      	push	{r4, r5, r6, lr}
 8008e5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	b976      	cbnz	r6, 8008e80 <_Bfree+0x28>
 8008e62:	2010      	movs	r0, #16
 8008e64:	f7ff ffa2 	bl	8008dac <malloc>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6268      	str	r0, [r5, #36]	; 0x24
 8008e6c:	b920      	cbnz	r0, 8008e78 <_Bfree+0x20>
 8008e6e:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <_Bfree+0x3c>)
 8008e70:	4809      	ldr	r0, [pc, #36]	; (8008e98 <_Bfree+0x40>)
 8008e72:	218a      	movs	r1, #138	; 0x8a
 8008e74:	f000 feaa 	bl	8009bcc <__assert_func>
 8008e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e7c:	6006      	str	r6, [r0, #0]
 8008e7e:	60c6      	str	r6, [r0, #12]
 8008e80:	b13c      	cbz	r4, 8008e92 <_Bfree+0x3a>
 8008e82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e84:	6862      	ldr	r2, [r4, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e8c:	6021      	str	r1, [r4, #0]
 8008e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	08009ecd 	.word	0x08009ecd
 8008e98:	08009fb0 	.word	0x08009fb0

08008e9c <__multadd>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	690d      	ldr	r5, [r1, #16]
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	461e      	mov	r6, r3
 8008ea8:	f101 0c14 	add.w	ip, r1, #20
 8008eac:	2000      	movs	r0, #0
 8008eae:	f8dc 3000 	ldr.w	r3, [ip]
 8008eb2:	b299      	uxth	r1, r3
 8008eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8008eb8:	0c1e      	lsrs	r6, r3, #16
 8008eba:	0c0b      	lsrs	r3, r1, #16
 8008ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ec0:	b289      	uxth	r1, r1
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ec8:	4285      	cmp	r5, r0
 8008eca:	f84c 1b04 	str.w	r1, [ip], #4
 8008ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ed2:	dcec      	bgt.n	8008eae <__multadd+0x12>
 8008ed4:	b30e      	cbz	r6, 8008f1a <__multadd+0x7e>
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dc19      	bgt.n	8008f10 <__multadd+0x74>
 8008edc:	6861      	ldr	r1, [r4, #4]
 8008ede:	4638      	mov	r0, r7
 8008ee0:	3101      	adds	r1, #1
 8008ee2:	f7ff ff79 	bl	8008dd8 <_Balloc>
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	b928      	cbnz	r0, 8008ef6 <__multadd+0x5a>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <__multadd+0x84>)
 8008eee:	480d      	ldr	r0, [pc, #52]	; (8008f24 <__multadd+0x88>)
 8008ef0:	21b5      	movs	r1, #181	; 0xb5
 8008ef2:	f000 fe6b 	bl	8009bcc <__assert_func>
 8008ef6:	6922      	ldr	r2, [r4, #16]
 8008ef8:	3202      	adds	r2, #2
 8008efa:	f104 010c 	add.w	r1, r4, #12
 8008efe:	0092      	lsls	r2, r2, #2
 8008f00:	300c      	adds	r0, #12
 8008f02:	f7ff ff5b 	bl	8008dbc <memcpy>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ffa5 	bl	8008e58 <_Bfree>
 8008f0e:	4644      	mov	r4, r8
 8008f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f14:	3501      	adds	r5, #1
 8008f16:	615e      	str	r6, [r3, #20]
 8008f18:	6125      	str	r5, [r4, #16]
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f20:	08009f3f 	.word	0x08009f3f
 8008f24:	08009fb0 	.word	0x08009fb0

08008f28 <__hi0bits>:
 8008f28:	0c03      	lsrs	r3, r0, #16
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	b9d3      	cbnz	r3, 8008f64 <__hi0bits+0x3c>
 8008f2e:	0400      	lsls	r0, r0, #16
 8008f30:	2310      	movs	r3, #16
 8008f32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f36:	bf04      	itt	eq
 8008f38:	0200      	lsleq	r0, r0, #8
 8008f3a:	3308      	addeq	r3, #8
 8008f3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f40:	bf04      	itt	eq
 8008f42:	0100      	lsleq	r0, r0, #4
 8008f44:	3304      	addeq	r3, #4
 8008f46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f4a:	bf04      	itt	eq
 8008f4c:	0080      	lsleq	r0, r0, #2
 8008f4e:	3302      	addeq	r3, #2
 8008f50:	2800      	cmp	r0, #0
 8008f52:	db05      	blt.n	8008f60 <__hi0bits+0x38>
 8008f54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f58:	f103 0301 	add.w	r3, r3, #1
 8008f5c:	bf08      	it	eq
 8008f5e:	2320      	moveq	r3, #32
 8008f60:	4618      	mov	r0, r3
 8008f62:	4770      	bx	lr
 8008f64:	2300      	movs	r3, #0
 8008f66:	e7e4      	b.n	8008f32 <__hi0bits+0xa>

08008f68 <__lo0bits>:
 8008f68:	6803      	ldr	r3, [r0, #0]
 8008f6a:	f013 0207 	ands.w	r2, r3, #7
 8008f6e:	4601      	mov	r1, r0
 8008f70:	d00b      	beq.n	8008f8a <__lo0bits+0x22>
 8008f72:	07da      	lsls	r2, r3, #31
 8008f74:	d423      	bmi.n	8008fbe <__lo0bits+0x56>
 8008f76:	0798      	lsls	r0, r3, #30
 8008f78:	bf49      	itett	mi
 8008f7a:	085b      	lsrmi	r3, r3, #1
 8008f7c:	089b      	lsrpl	r3, r3, #2
 8008f7e:	2001      	movmi	r0, #1
 8008f80:	600b      	strmi	r3, [r1, #0]
 8008f82:	bf5c      	itt	pl
 8008f84:	600b      	strpl	r3, [r1, #0]
 8008f86:	2002      	movpl	r0, #2
 8008f88:	4770      	bx	lr
 8008f8a:	b298      	uxth	r0, r3
 8008f8c:	b9a8      	cbnz	r0, 8008fba <__lo0bits+0x52>
 8008f8e:	0c1b      	lsrs	r3, r3, #16
 8008f90:	2010      	movs	r0, #16
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	b90a      	cbnz	r2, 8008f9a <__lo0bits+0x32>
 8008f96:	3008      	adds	r0, #8
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	071a      	lsls	r2, r3, #28
 8008f9c:	bf04      	itt	eq
 8008f9e:	091b      	lsreq	r3, r3, #4
 8008fa0:	3004      	addeq	r0, #4
 8008fa2:	079a      	lsls	r2, r3, #30
 8008fa4:	bf04      	itt	eq
 8008fa6:	089b      	lsreq	r3, r3, #2
 8008fa8:	3002      	addeq	r0, #2
 8008faa:	07da      	lsls	r2, r3, #31
 8008fac:	d403      	bmi.n	8008fb6 <__lo0bits+0x4e>
 8008fae:	085b      	lsrs	r3, r3, #1
 8008fb0:	f100 0001 	add.w	r0, r0, #1
 8008fb4:	d005      	beq.n	8008fc2 <__lo0bits+0x5a>
 8008fb6:	600b      	str	r3, [r1, #0]
 8008fb8:	4770      	bx	lr
 8008fba:	4610      	mov	r0, r2
 8008fbc:	e7e9      	b.n	8008f92 <__lo0bits+0x2a>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	4770      	bx	lr
 8008fc2:	2020      	movs	r0, #32
 8008fc4:	4770      	bx	lr
	...

08008fc8 <__i2b>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	460c      	mov	r4, r1
 8008fcc:	2101      	movs	r1, #1
 8008fce:	f7ff ff03 	bl	8008dd8 <_Balloc>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	b928      	cbnz	r0, 8008fe2 <__i2b+0x1a>
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <__i2b+0x24>)
 8008fd8:	4805      	ldr	r0, [pc, #20]	; (8008ff0 <__i2b+0x28>)
 8008fda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fde:	f000 fdf5 	bl	8009bcc <__assert_func>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	6144      	str	r4, [r0, #20]
 8008fe6:	6103      	str	r3, [r0, #16]
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	bf00      	nop
 8008fec:	08009f3f 	.word	0x08009f3f
 8008ff0:	08009fb0 	.word	0x08009fb0

08008ff4 <__multiply>:
 8008ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff8:	4691      	mov	r9, r2
 8008ffa:	690a      	ldr	r2, [r1, #16]
 8008ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009000:	429a      	cmp	r2, r3
 8009002:	bfb8      	it	lt
 8009004:	460b      	movlt	r3, r1
 8009006:	460c      	mov	r4, r1
 8009008:	bfbc      	itt	lt
 800900a:	464c      	movlt	r4, r9
 800900c:	4699      	movlt	r9, r3
 800900e:	6927      	ldr	r7, [r4, #16]
 8009010:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	6861      	ldr	r1, [r4, #4]
 8009018:	eb07 060a 	add.w	r6, r7, sl
 800901c:	42b3      	cmp	r3, r6
 800901e:	b085      	sub	sp, #20
 8009020:	bfb8      	it	lt
 8009022:	3101      	addlt	r1, #1
 8009024:	f7ff fed8 	bl	8008dd8 <_Balloc>
 8009028:	b930      	cbnz	r0, 8009038 <__multiply+0x44>
 800902a:	4602      	mov	r2, r0
 800902c:	4b44      	ldr	r3, [pc, #272]	; (8009140 <__multiply+0x14c>)
 800902e:	4845      	ldr	r0, [pc, #276]	; (8009144 <__multiply+0x150>)
 8009030:	f240 115d 	movw	r1, #349	; 0x15d
 8009034:	f000 fdca 	bl	8009bcc <__assert_func>
 8009038:	f100 0514 	add.w	r5, r0, #20
 800903c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009040:	462b      	mov	r3, r5
 8009042:	2200      	movs	r2, #0
 8009044:	4543      	cmp	r3, r8
 8009046:	d321      	bcc.n	800908c <__multiply+0x98>
 8009048:	f104 0314 	add.w	r3, r4, #20
 800904c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009050:	f109 0314 	add.w	r3, r9, #20
 8009054:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009058:	9202      	str	r2, [sp, #8]
 800905a:	1b3a      	subs	r2, r7, r4
 800905c:	3a15      	subs	r2, #21
 800905e:	f022 0203 	bic.w	r2, r2, #3
 8009062:	3204      	adds	r2, #4
 8009064:	f104 0115 	add.w	r1, r4, #21
 8009068:	428f      	cmp	r7, r1
 800906a:	bf38      	it	cc
 800906c:	2204      	movcc	r2, #4
 800906e:	9201      	str	r2, [sp, #4]
 8009070:	9a02      	ldr	r2, [sp, #8]
 8009072:	9303      	str	r3, [sp, #12]
 8009074:	429a      	cmp	r2, r3
 8009076:	d80c      	bhi.n	8009092 <__multiply+0x9e>
 8009078:	2e00      	cmp	r6, #0
 800907a:	dd03      	ble.n	8009084 <__multiply+0x90>
 800907c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009080:	2b00      	cmp	r3, #0
 8009082:	d05a      	beq.n	800913a <__multiply+0x146>
 8009084:	6106      	str	r6, [r0, #16]
 8009086:	b005      	add	sp, #20
 8009088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908c:	f843 2b04 	str.w	r2, [r3], #4
 8009090:	e7d8      	b.n	8009044 <__multiply+0x50>
 8009092:	f8b3 a000 	ldrh.w	sl, [r3]
 8009096:	f1ba 0f00 	cmp.w	sl, #0
 800909a:	d024      	beq.n	80090e6 <__multiply+0xf2>
 800909c:	f104 0e14 	add.w	lr, r4, #20
 80090a0:	46a9      	mov	r9, r5
 80090a2:	f04f 0c00 	mov.w	ip, #0
 80090a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090aa:	f8d9 1000 	ldr.w	r1, [r9]
 80090ae:	fa1f fb82 	uxth.w	fp, r2
 80090b2:	b289      	uxth	r1, r1
 80090b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80090b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80090bc:	f8d9 2000 	ldr.w	r2, [r9]
 80090c0:	4461      	add	r1, ip
 80090c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80090ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090ce:	b289      	uxth	r1, r1
 80090d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090d4:	4577      	cmp	r7, lr
 80090d6:	f849 1b04 	str.w	r1, [r9], #4
 80090da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090de:	d8e2      	bhi.n	80090a6 <__multiply+0xb2>
 80090e0:	9a01      	ldr	r2, [sp, #4]
 80090e2:	f845 c002 	str.w	ip, [r5, r2]
 80090e6:	9a03      	ldr	r2, [sp, #12]
 80090e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090ec:	3304      	adds	r3, #4
 80090ee:	f1b9 0f00 	cmp.w	r9, #0
 80090f2:	d020      	beq.n	8009136 <__multiply+0x142>
 80090f4:	6829      	ldr	r1, [r5, #0]
 80090f6:	f104 0c14 	add.w	ip, r4, #20
 80090fa:	46ae      	mov	lr, r5
 80090fc:	f04f 0a00 	mov.w	sl, #0
 8009100:	f8bc b000 	ldrh.w	fp, [ip]
 8009104:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009108:	fb09 220b 	mla	r2, r9, fp, r2
 800910c:	4492      	add	sl, r2
 800910e:	b289      	uxth	r1, r1
 8009110:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009114:	f84e 1b04 	str.w	r1, [lr], #4
 8009118:	f85c 2b04 	ldr.w	r2, [ip], #4
 800911c:	f8be 1000 	ldrh.w	r1, [lr]
 8009120:	0c12      	lsrs	r2, r2, #16
 8009122:	fb09 1102 	mla	r1, r9, r2, r1
 8009126:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800912a:	4567      	cmp	r7, ip
 800912c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009130:	d8e6      	bhi.n	8009100 <__multiply+0x10c>
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	50a9      	str	r1, [r5, r2]
 8009136:	3504      	adds	r5, #4
 8009138:	e79a      	b.n	8009070 <__multiply+0x7c>
 800913a:	3e01      	subs	r6, #1
 800913c:	e79c      	b.n	8009078 <__multiply+0x84>
 800913e:	bf00      	nop
 8009140:	08009f3f 	.word	0x08009f3f
 8009144:	08009fb0 	.word	0x08009fb0

08009148 <__pow5mult>:
 8009148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800914c:	4615      	mov	r5, r2
 800914e:	f012 0203 	ands.w	r2, r2, #3
 8009152:	4606      	mov	r6, r0
 8009154:	460f      	mov	r7, r1
 8009156:	d007      	beq.n	8009168 <__pow5mult+0x20>
 8009158:	4c25      	ldr	r4, [pc, #148]	; (80091f0 <__pow5mult+0xa8>)
 800915a:	3a01      	subs	r2, #1
 800915c:	2300      	movs	r3, #0
 800915e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009162:	f7ff fe9b 	bl	8008e9c <__multadd>
 8009166:	4607      	mov	r7, r0
 8009168:	10ad      	asrs	r5, r5, #2
 800916a:	d03d      	beq.n	80091e8 <__pow5mult+0xa0>
 800916c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800916e:	b97c      	cbnz	r4, 8009190 <__pow5mult+0x48>
 8009170:	2010      	movs	r0, #16
 8009172:	f7ff fe1b 	bl	8008dac <malloc>
 8009176:	4602      	mov	r2, r0
 8009178:	6270      	str	r0, [r6, #36]	; 0x24
 800917a:	b928      	cbnz	r0, 8009188 <__pow5mult+0x40>
 800917c:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <__pow5mult+0xac>)
 800917e:	481e      	ldr	r0, [pc, #120]	; (80091f8 <__pow5mult+0xb0>)
 8009180:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009184:	f000 fd22 	bl	8009bcc <__assert_func>
 8009188:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800918c:	6004      	str	r4, [r0, #0]
 800918e:	60c4      	str	r4, [r0, #12]
 8009190:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009194:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009198:	b94c      	cbnz	r4, 80091ae <__pow5mult+0x66>
 800919a:	f240 2171 	movw	r1, #625	; 0x271
 800919e:	4630      	mov	r0, r6
 80091a0:	f7ff ff12 	bl	8008fc8 <__i2b>
 80091a4:	2300      	movs	r3, #0
 80091a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80091aa:	4604      	mov	r4, r0
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	f04f 0900 	mov.w	r9, #0
 80091b2:	07eb      	lsls	r3, r5, #31
 80091b4:	d50a      	bpl.n	80091cc <__pow5mult+0x84>
 80091b6:	4639      	mov	r1, r7
 80091b8:	4622      	mov	r2, r4
 80091ba:	4630      	mov	r0, r6
 80091bc:	f7ff ff1a 	bl	8008ff4 <__multiply>
 80091c0:	4639      	mov	r1, r7
 80091c2:	4680      	mov	r8, r0
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff fe47 	bl	8008e58 <_Bfree>
 80091ca:	4647      	mov	r7, r8
 80091cc:	106d      	asrs	r5, r5, #1
 80091ce:	d00b      	beq.n	80091e8 <__pow5mult+0xa0>
 80091d0:	6820      	ldr	r0, [r4, #0]
 80091d2:	b938      	cbnz	r0, 80091e4 <__pow5mult+0x9c>
 80091d4:	4622      	mov	r2, r4
 80091d6:	4621      	mov	r1, r4
 80091d8:	4630      	mov	r0, r6
 80091da:	f7ff ff0b 	bl	8008ff4 <__multiply>
 80091de:	6020      	str	r0, [r4, #0]
 80091e0:	f8c0 9000 	str.w	r9, [r0]
 80091e4:	4604      	mov	r4, r0
 80091e6:	e7e4      	b.n	80091b2 <__pow5mult+0x6a>
 80091e8:	4638      	mov	r0, r7
 80091ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ee:	bf00      	nop
 80091f0:	0800a100 	.word	0x0800a100
 80091f4:	08009ecd 	.word	0x08009ecd
 80091f8:	08009fb0 	.word	0x08009fb0

080091fc <__lshift>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	6849      	ldr	r1, [r1, #4]
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	4607      	mov	r7, r0
 800920e:	4691      	mov	r9, r2
 8009210:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009214:	f108 0601 	add.w	r6, r8, #1
 8009218:	42b3      	cmp	r3, r6
 800921a:	db0b      	blt.n	8009234 <__lshift+0x38>
 800921c:	4638      	mov	r0, r7
 800921e:	f7ff fddb 	bl	8008dd8 <_Balloc>
 8009222:	4605      	mov	r5, r0
 8009224:	b948      	cbnz	r0, 800923a <__lshift+0x3e>
 8009226:	4602      	mov	r2, r0
 8009228:	4b2a      	ldr	r3, [pc, #168]	; (80092d4 <__lshift+0xd8>)
 800922a:	482b      	ldr	r0, [pc, #172]	; (80092d8 <__lshift+0xdc>)
 800922c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009230:	f000 fccc 	bl	8009bcc <__assert_func>
 8009234:	3101      	adds	r1, #1
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	e7ee      	b.n	8009218 <__lshift+0x1c>
 800923a:	2300      	movs	r3, #0
 800923c:	f100 0114 	add.w	r1, r0, #20
 8009240:	f100 0210 	add.w	r2, r0, #16
 8009244:	4618      	mov	r0, r3
 8009246:	4553      	cmp	r3, sl
 8009248:	db37      	blt.n	80092ba <__lshift+0xbe>
 800924a:	6920      	ldr	r0, [r4, #16]
 800924c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009250:	f104 0314 	add.w	r3, r4, #20
 8009254:	f019 091f 	ands.w	r9, r9, #31
 8009258:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800925c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009260:	d02f      	beq.n	80092c2 <__lshift+0xc6>
 8009262:	f1c9 0e20 	rsb	lr, r9, #32
 8009266:	468a      	mov	sl, r1
 8009268:	f04f 0c00 	mov.w	ip, #0
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	fa02 f209 	lsl.w	r2, r2, r9
 8009272:	ea42 020c 	orr.w	r2, r2, ip
 8009276:	f84a 2b04 	str.w	r2, [sl], #4
 800927a:	f853 2b04 	ldr.w	r2, [r3], #4
 800927e:	4298      	cmp	r0, r3
 8009280:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009284:	d8f2      	bhi.n	800926c <__lshift+0x70>
 8009286:	1b03      	subs	r3, r0, r4
 8009288:	3b15      	subs	r3, #21
 800928a:	f023 0303 	bic.w	r3, r3, #3
 800928e:	3304      	adds	r3, #4
 8009290:	f104 0215 	add.w	r2, r4, #21
 8009294:	4290      	cmp	r0, r2
 8009296:	bf38      	it	cc
 8009298:	2304      	movcc	r3, #4
 800929a:	f841 c003 	str.w	ip, [r1, r3]
 800929e:	f1bc 0f00 	cmp.w	ip, #0
 80092a2:	d001      	beq.n	80092a8 <__lshift+0xac>
 80092a4:	f108 0602 	add.w	r6, r8, #2
 80092a8:	3e01      	subs	r6, #1
 80092aa:	4638      	mov	r0, r7
 80092ac:	612e      	str	r6, [r5, #16]
 80092ae:	4621      	mov	r1, r4
 80092b0:	f7ff fdd2 	bl	8008e58 <_Bfree>
 80092b4:	4628      	mov	r0, r5
 80092b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80092be:	3301      	adds	r3, #1
 80092c0:	e7c1      	b.n	8009246 <__lshift+0x4a>
 80092c2:	3904      	subs	r1, #4
 80092c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80092cc:	4298      	cmp	r0, r3
 80092ce:	d8f9      	bhi.n	80092c4 <__lshift+0xc8>
 80092d0:	e7ea      	b.n	80092a8 <__lshift+0xac>
 80092d2:	bf00      	nop
 80092d4:	08009f3f 	.word	0x08009f3f
 80092d8:	08009fb0 	.word	0x08009fb0

080092dc <__mcmp>:
 80092dc:	b530      	push	{r4, r5, lr}
 80092de:	6902      	ldr	r2, [r0, #16]
 80092e0:	690c      	ldr	r4, [r1, #16]
 80092e2:	1b12      	subs	r2, r2, r4
 80092e4:	d10e      	bne.n	8009304 <__mcmp+0x28>
 80092e6:	f100 0314 	add.w	r3, r0, #20
 80092ea:	3114      	adds	r1, #20
 80092ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092fc:	42a5      	cmp	r5, r4
 80092fe:	d003      	beq.n	8009308 <__mcmp+0x2c>
 8009300:	d305      	bcc.n	800930e <__mcmp+0x32>
 8009302:	2201      	movs	r2, #1
 8009304:	4610      	mov	r0, r2
 8009306:	bd30      	pop	{r4, r5, pc}
 8009308:	4283      	cmp	r3, r0
 800930a:	d3f3      	bcc.n	80092f4 <__mcmp+0x18>
 800930c:	e7fa      	b.n	8009304 <__mcmp+0x28>
 800930e:	f04f 32ff 	mov.w	r2, #4294967295
 8009312:	e7f7      	b.n	8009304 <__mcmp+0x28>

08009314 <__mdiff>:
 8009314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	460c      	mov	r4, r1
 800931a:	4606      	mov	r6, r0
 800931c:	4611      	mov	r1, r2
 800931e:	4620      	mov	r0, r4
 8009320:	4690      	mov	r8, r2
 8009322:	f7ff ffdb 	bl	80092dc <__mcmp>
 8009326:	1e05      	subs	r5, r0, #0
 8009328:	d110      	bne.n	800934c <__mdiff+0x38>
 800932a:	4629      	mov	r1, r5
 800932c:	4630      	mov	r0, r6
 800932e:	f7ff fd53 	bl	8008dd8 <_Balloc>
 8009332:	b930      	cbnz	r0, 8009342 <__mdiff+0x2e>
 8009334:	4b3a      	ldr	r3, [pc, #232]	; (8009420 <__mdiff+0x10c>)
 8009336:	4602      	mov	r2, r0
 8009338:	f240 2132 	movw	r1, #562	; 0x232
 800933c:	4839      	ldr	r0, [pc, #228]	; (8009424 <__mdiff+0x110>)
 800933e:	f000 fc45 	bl	8009bcc <__assert_func>
 8009342:	2301      	movs	r3, #1
 8009344:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934c:	bfa4      	itt	ge
 800934e:	4643      	movge	r3, r8
 8009350:	46a0      	movge	r8, r4
 8009352:	4630      	mov	r0, r6
 8009354:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009358:	bfa6      	itte	ge
 800935a:	461c      	movge	r4, r3
 800935c:	2500      	movge	r5, #0
 800935e:	2501      	movlt	r5, #1
 8009360:	f7ff fd3a 	bl	8008dd8 <_Balloc>
 8009364:	b920      	cbnz	r0, 8009370 <__mdiff+0x5c>
 8009366:	4b2e      	ldr	r3, [pc, #184]	; (8009420 <__mdiff+0x10c>)
 8009368:	4602      	mov	r2, r0
 800936a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800936e:	e7e5      	b.n	800933c <__mdiff+0x28>
 8009370:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009374:	6926      	ldr	r6, [r4, #16]
 8009376:	60c5      	str	r5, [r0, #12]
 8009378:	f104 0914 	add.w	r9, r4, #20
 800937c:	f108 0514 	add.w	r5, r8, #20
 8009380:	f100 0e14 	add.w	lr, r0, #20
 8009384:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800938c:	f108 0210 	add.w	r2, r8, #16
 8009390:	46f2      	mov	sl, lr
 8009392:	2100      	movs	r1, #0
 8009394:	f859 3b04 	ldr.w	r3, [r9], #4
 8009398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800939c:	fa1f f883 	uxth.w	r8, r3
 80093a0:	fa11 f18b 	uxtah	r1, r1, fp
 80093a4:	0c1b      	lsrs	r3, r3, #16
 80093a6:	eba1 0808 	sub.w	r8, r1, r8
 80093aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093b2:	fa1f f888 	uxth.w	r8, r8
 80093b6:	1419      	asrs	r1, r3, #16
 80093b8:	454e      	cmp	r6, r9
 80093ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093be:	f84a 3b04 	str.w	r3, [sl], #4
 80093c2:	d8e7      	bhi.n	8009394 <__mdiff+0x80>
 80093c4:	1b33      	subs	r3, r6, r4
 80093c6:	3b15      	subs	r3, #21
 80093c8:	f023 0303 	bic.w	r3, r3, #3
 80093cc:	3304      	adds	r3, #4
 80093ce:	3415      	adds	r4, #21
 80093d0:	42a6      	cmp	r6, r4
 80093d2:	bf38      	it	cc
 80093d4:	2304      	movcc	r3, #4
 80093d6:	441d      	add	r5, r3
 80093d8:	4473      	add	r3, lr
 80093da:	469e      	mov	lr, r3
 80093dc:	462e      	mov	r6, r5
 80093de:	4566      	cmp	r6, ip
 80093e0:	d30e      	bcc.n	8009400 <__mdiff+0xec>
 80093e2:	f10c 0203 	add.w	r2, ip, #3
 80093e6:	1b52      	subs	r2, r2, r5
 80093e8:	f022 0203 	bic.w	r2, r2, #3
 80093ec:	3d03      	subs	r5, #3
 80093ee:	45ac      	cmp	ip, r5
 80093f0:	bf38      	it	cc
 80093f2:	2200      	movcc	r2, #0
 80093f4:	441a      	add	r2, r3
 80093f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093fa:	b17b      	cbz	r3, 800941c <__mdiff+0x108>
 80093fc:	6107      	str	r7, [r0, #16]
 80093fe:	e7a3      	b.n	8009348 <__mdiff+0x34>
 8009400:	f856 8b04 	ldr.w	r8, [r6], #4
 8009404:	fa11 f288 	uxtah	r2, r1, r8
 8009408:	1414      	asrs	r4, r2, #16
 800940a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800940e:	b292      	uxth	r2, r2
 8009410:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009414:	f84e 2b04 	str.w	r2, [lr], #4
 8009418:	1421      	asrs	r1, r4, #16
 800941a:	e7e0      	b.n	80093de <__mdiff+0xca>
 800941c:	3f01      	subs	r7, #1
 800941e:	e7ea      	b.n	80093f6 <__mdiff+0xe2>
 8009420:	08009f3f 	.word	0x08009f3f
 8009424:	08009fb0 	.word	0x08009fb0

08009428 <__d2b>:
 8009428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800942c:	4689      	mov	r9, r1
 800942e:	2101      	movs	r1, #1
 8009430:	ec57 6b10 	vmov	r6, r7, d0
 8009434:	4690      	mov	r8, r2
 8009436:	f7ff fccf 	bl	8008dd8 <_Balloc>
 800943a:	4604      	mov	r4, r0
 800943c:	b930      	cbnz	r0, 800944c <__d2b+0x24>
 800943e:	4602      	mov	r2, r0
 8009440:	4b25      	ldr	r3, [pc, #148]	; (80094d8 <__d2b+0xb0>)
 8009442:	4826      	ldr	r0, [pc, #152]	; (80094dc <__d2b+0xb4>)
 8009444:	f240 310a 	movw	r1, #778	; 0x30a
 8009448:	f000 fbc0 	bl	8009bcc <__assert_func>
 800944c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009454:	bb35      	cbnz	r5, 80094a4 <__d2b+0x7c>
 8009456:	2e00      	cmp	r6, #0
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	d028      	beq.n	80094ae <__d2b+0x86>
 800945c:	4668      	mov	r0, sp
 800945e:	9600      	str	r6, [sp, #0]
 8009460:	f7ff fd82 	bl	8008f68 <__lo0bits>
 8009464:	9900      	ldr	r1, [sp, #0]
 8009466:	b300      	cbz	r0, 80094aa <__d2b+0x82>
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	f1c0 0320 	rsb	r3, r0, #32
 800946e:	fa02 f303 	lsl.w	r3, r2, r3
 8009472:	430b      	orrs	r3, r1
 8009474:	40c2      	lsrs	r2, r0
 8009476:	6163      	str	r3, [r4, #20]
 8009478:	9201      	str	r2, [sp, #4]
 800947a:	9b01      	ldr	r3, [sp, #4]
 800947c:	61a3      	str	r3, [r4, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	bf14      	ite	ne
 8009482:	2202      	movne	r2, #2
 8009484:	2201      	moveq	r2, #1
 8009486:	6122      	str	r2, [r4, #16]
 8009488:	b1d5      	cbz	r5, 80094c0 <__d2b+0x98>
 800948a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800948e:	4405      	add	r5, r0
 8009490:	f8c9 5000 	str.w	r5, [r9]
 8009494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009498:	f8c8 0000 	str.w	r0, [r8]
 800949c:	4620      	mov	r0, r4
 800949e:	b003      	add	sp, #12
 80094a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094a8:	e7d5      	b.n	8009456 <__d2b+0x2e>
 80094aa:	6161      	str	r1, [r4, #20]
 80094ac:	e7e5      	b.n	800947a <__d2b+0x52>
 80094ae:	a801      	add	r0, sp, #4
 80094b0:	f7ff fd5a 	bl	8008f68 <__lo0bits>
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	6163      	str	r3, [r4, #20]
 80094b8:	2201      	movs	r2, #1
 80094ba:	6122      	str	r2, [r4, #16]
 80094bc:	3020      	adds	r0, #32
 80094be:	e7e3      	b.n	8009488 <__d2b+0x60>
 80094c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094c8:	f8c9 0000 	str.w	r0, [r9]
 80094cc:	6918      	ldr	r0, [r3, #16]
 80094ce:	f7ff fd2b 	bl	8008f28 <__hi0bits>
 80094d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094d6:	e7df      	b.n	8009498 <__d2b+0x70>
 80094d8:	08009f3f 	.word	0x08009f3f
 80094dc:	08009fb0 	.word	0x08009fb0

080094e0 <_calloc_r>:
 80094e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094e2:	fba1 2402 	umull	r2, r4, r1, r2
 80094e6:	b94c      	cbnz	r4, 80094fc <_calloc_r+0x1c>
 80094e8:	4611      	mov	r1, r2
 80094ea:	9201      	str	r2, [sp, #4]
 80094ec:	f000 f87a 	bl	80095e4 <_malloc_r>
 80094f0:	9a01      	ldr	r2, [sp, #4]
 80094f2:	4605      	mov	r5, r0
 80094f4:	b930      	cbnz	r0, 8009504 <_calloc_r+0x24>
 80094f6:	4628      	mov	r0, r5
 80094f8:	b003      	add	sp, #12
 80094fa:	bd30      	pop	{r4, r5, pc}
 80094fc:	220c      	movs	r2, #12
 80094fe:	6002      	str	r2, [r0, #0]
 8009500:	2500      	movs	r5, #0
 8009502:	e7f8      	b.n	80094f6 <_calloc_r+0x16>
 8009504:	4621      	mov	r1, r4
 8009506:	f7fd fe5b 	bl	80071c0 <memset>
 800950a:	e7f4      	b.n	80094f6 <_calloc_r+0x16>

0800950c <_free_r>:
 800950c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800950e:	2900      	cmp	r1, #0
 8009510:	d044      	beq.n	800959c <_free_r+0x90>
 8009512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009516:	9001      	str	r0, [sp, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f1a1 0404 	sub.w	r4, r1, #4
 800951e:	bfb8      	it	lt
 8009520:	18e4      	addlt	r4, r4, r3
 8009522:	f000 fbd9 	bl	8009cd8 <__malloc_lock>
 8009526:	4a1e      	ldr	r2, [pc, #120]	; (80095a0 <_free_r+0x94>)
 8009528:	9801      	ldr	r0, [sp, #4]
 800952a:	6813      	ldr	r3, [r2, #0]
 800952c:	b933      	cbnz	r3, 800953c <_free_r+0x30>
 800952e:	6063      	str	r3, [r4, #4]
 8009530:	6014      	str	r4, [r2, #0]
 8009532:	b003      	add	sp, #12
 8009534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009538:	f000 bbd4 	b.w	8009ce4 <__malloc_unlock>
 800953c:	42a3      	cmp	r3, r4
 800953e:	d908      	bls.n	8009552 <_free_r+0x46>
 8009540:	6825      	ldr	r5, [r4, #0]
 8009542:	1961      	adds	r1, r4, r5
 8009544:	428b      	cmp	r3, r1
 8009546:	bf01      	itttt	eq
 8009548:	6819      	ldreq	r1, [r3, #0]
 800954a:	685b      	ldreq	r3, [r3, #4]
 800954c:	1949      	addeq	r1, r1, r5
 800954e:	6021      	streq	r1, [r4, #0]
 8009550:	e7ed      	b.n	800952e <_free_r+0x22>
 8009552:	461a      	mov	r2, r3
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	b10b      	cbz	r3, 800955c <_free_r+0x50>
 8009558:	42a3      	cmp	r3, r4
 800955a:	d9fa      	bls.n	8009552 <_free_r+0x46>
 800955c:	6811      	ldr	r1, [r2, #0]
 800955e:	1855      	adds	r5, r2, r1
 8009560:	42a5      	cmp	r5, r4
 8009562:	d10b      	bne.n	800957c <_free_r+0x70>
 8009564:	6824      	ldr	r4, [r4, #0]
 8009566:	4421      	add	r1, r4
 8009568:	1854      	adds	r4, r2, r1
 800956a:	42a3      	cmp	r3, r4
 800956c:	6011      	str	r1, [r2, #0]
 800956e:	d1e0      	bne.n	8009532 <_free_r+0x26>
 8009570:	681c      	ldr	r4, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	6053      	str	r3, [r2, #4]
 8009576:	4421      	add	r1, r4
 8009578:	6011      	str	r1, [r2, #0]
 800957a:	e7da      	b.n	8009532 <_free_r+0x26>
 800957c:	d902      	bls.n	8009584 <_free_r+0x78>
 800957e:	230c      	movs	r3, #12
 8009580:	6003      	str	r3, [r0, #0]
 8009582:	e7d6      	b.n	8009532 <_free_r+0x26>
 8009584:	6825      	ldr	r5, [r4, #0]
 8009586:	1961      	adds	r1, r4, r5
 8009588:	428b      	cmp	r3, r1
 800958a:	bf04      	itt	eq
 800958c:	6819      	ldreq	r1, [r3, #0]
 800958e:	685b      	ldreq	r3, [r3, #4]
 8009590:	6063      	str	r3, [r4, #4]
 8009592:	bf04      	itt	eq
 8009594:	1949      	addeq	r1, r1, r5
 8009596:	6021      	streq	r1, [r4, #0]
 8009598:	6054      	str	r4, [r2, #4]
 800959a:	e7ca      	b.n	8009532 <_free_r+0x26>
 800959c:	b003      	add	sp, #12
 800959e:	bd30      	pop	{r4, r5, pc}
 80095a0:	200005b8 	.word	0x200005b8

080095a4 <sbrk_aligned>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4e0e      	ldr	r6, [pc, #56]	; (80095e0 <sbrk_aligned+0x3c>)
 80095a8:	460c      	mov	r4, r1
 80095aa:	6831      	ldr	r1, [r6, #0]
 80095ac:	4605      	mov	r5, r0
 80095ae:	b911      	cbnz	r1, 80095b6 <sbrk_aligned+0x12>
 80095b0:	f000 f9e6 	bl	8009980 <_sbrk_r>
 80095b4:	6030      	str	r0, [r6, #0]
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f000 f9e1 	bl	8009980 <_sbrk_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d00a      	beq.n	80095d8 <sbrk_aligned+0x34>
 80095c2:	1cc4      	adds	r4, r0, #3
 80095c4:	f024 0403 	bic.w	r4, r4, #3
 80095c8:	42a0      	cmp	r0, r4
 80095ca:	d007      	beq.n	80095dc <sbrk_aligned+0x38>
 80095cc:	1a21      	subs	r1, r4, r0
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 f9d6 	bl	8009980 <_sbrk_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	d101      	bne.n	80095dc <sbrk_aligned+0x38>
 80095d8:	f04f 34ff 	mov.w	r4, #4294967295
 80095dc:	4620      	mov	r0, r4
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	200005bc 	.word	0x200005bc

080095e4 <_malloc_r>:
 80095e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e8:	1ccd      	adds	r5, r1, #3
 80095ea:	f025 0503 	bic.w	r5, r5, #3
 80095ee:	3508      	adds	r5, #8
 80095f0:	2d0c      	cmp	r5, #12
 80095f2:	bf38      	it	cc
 80095f4:	250c      	movcc	r5, #12
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	4607      	mov	r7, r0
 80095fa:	db01      	blt.n	8009600 <_malloc_r+0x1c>
 80095fc:	42a9      	cmp	r1, r5
 80095fe:	d905      	bls.n	800960c <_malloc_r+0x28>
 8009600:	230c      	movs	r3, #12
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	2600      	movs	r6, #0
 8009606:	4630      	mov	r0, r6
 8009608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960c:	4e2e      	ldr	r6, [pc, #184]	; (80096c8 <_malloc_r+0xe4>)
 800960e:	f000 fb63 	bl	8009cd8 <__malloc_lock>
 8009612:	6833      	ldr	r3, [r6, #0]
 8009614:	461c      	mov	r4, r3
 8009616:	bb34      	cbnz	r4, 8009666 <_malloc_r+0x82>
 8009618:	4629      	mov	r1, r5
 800961a:	4638      	mov	r0, r7
 800961c:	f7ff ffc2 	bl	80095a4 <sbrk_aligned>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	4604      	mov	r4, r0
 8009624:	d14d      	bne.n	80096c2 <_malloc_r+0xde>
 8009626:	6834      	ldr	r4, [r6, #0]
 8009628:	4626      	mov	r6, r4
 800962a:	2e00      	cmp	r6, #0
 800962c:	d140      	bne.n	80096b0 <_malloc_r+0xcc>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	4631      	mov	r1, r6
 8009632:	4638      	mov	r0, r7
 8009634:	eb04 0803 	add.w	r8, r4, r3
 8009638:	f000 f9a2 	bl	8009980 <_sbrk_r>
 800963c:	4580      	cmp	r8, r0
 800963e:	d13a      	bne.n	80096b6 <_malloc_r+0xd2>
 8009640:	6821      	ldr	r1, [r4, #0]
 8009642:	3503      	adds	r5, #3
 8009644:	1a6d      	subs	r5, r5, r1
 8009646:	f025 0503 	bic.w	r5, r5, #3
 800964a:	3508      	adds	r5, #8
 800964c:	2d0c      	cmp	r5, #12
 800964e:	bf38      	it	cc
 8009650:	250c      	movcc	r5, #12
 8009652:	4629      	mov	r1, r5
 8009654:	4638      	mov	r0, r7
 8009656:	f7ff ffa5 	bl	80095a4 <sbrk_aligned>
 800965a:	3001      	adds	r0, #1
 800965c:	d02b      	beq.n	80096b6 <_malloc_r+0xd2>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	442b      	add	r3, r5
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	e00e      	b.n	8009684 <_malloc_r+0xa0>
 8009666:	6822      	ldr	r2, [r4, #0]
 8009668:	1b52      	subs	r2, r2, r5
 800966a:	d41e      	bmi.n	80096aa <_malloc_r+0xc6>
 800966c:	2a0b      	cmp	r2, #11
 800966e:	d916      	bls.n	800969e <_malloc_r+0xba>
 8009670:	1961      	adds	r1, r4, r5
 8009672:	42a3      	cmp	r3, r4
 8009674:	6025      	str	r5, [r4, #0]
 8009676:	bf18      	it	ne
 8009678:	6059      	strne	r1, [r3, #4]
 800967a:	6863      	ldr	r3, [r4, #4]
 800967c:	bf08      	it	eq
 800967e:	6031      	streq	r1, [r6, #0]
 8009680:	5162      	str	r2, [r4, r5]
 8009682:	604b      	str	r3, [r1, #4]
 8009684:	4638      	mov	r0, r7
 8009686:	f104 060b 	add.w	r6, r4, #11
 800968a:	f000 fb2b 	bl	8009ce4 <__malloc_unlock>
 800968e:	f026 0607 	bic.w	r6, r6, #7
 8009692:	1d23      	adds	r3, r4, #4
 8009694:	1af2      	subs	r2, r6, r3
 8009696:	d0b6      	beq.n	8009606 <_malloc_r+0x22>
 8009698:	1b9b      	subs	r3, r3, r6
 800969a:	50a3      	str	r3, [r4, r2]
 800969c:	e7b3      	b.n	8009606 <_malloc_r+0x22>
 800969e:	6862      	ldr	r2, [r4, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	bf0c      	ite	eq
 80096a4:	6032      	streq	r2, [r6, #0]
 80096a6:	605a      	strne	r2, [r3, #4]
 80096a8:	e7ec      	b.n	8009684 <_malloc_r+0xa0>
 80096aa:	4623      	mov	r3, r4
 80096ac:	6864      	ldr	r4, [r4, #4]
 80096ae:	e7b2      	b.n	8009616 <_malloc_r+0x32>
 80096b0:	4634      	mov	r4, r6
 80096b2:	6876      	ldr	r6, [r6, #4]
 80096b4:	e7b9      	b.n	800962a <_malloc_r+0x46>
 80096b6:	230c      	movs	r3, #12
 80096b8:	603b      	str	r3, [r7, #0]
 80096ba:	4638      	mov	r0, r7
 80096bc:	f000 fb12 	bl	8009ce4 <__malloc_unlock>
 80096c0:	e7a1      	b.n	8009606 <_malloc_r+0x22>
 80096c2:	6025      	str	r5, [r4, #0]
 80096c4:	e7de      	b.n	8009684 <_malloc_r+0xa0>
 80096c6:	bf00      	nop
 80096c8:	200005b8 	.word	0x200005b8

080096cc <__sfputc_r>:
 80096cc:	6893      	ldr	r3, [r2, #8]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	b410      	push	{r4}
 80096d4:	6093      	str	r3, [r2, #8]
 80096d6:	da08      	bge.n	80096ea <__sfputc_r+0x1e>
 80096d8:	6994      	ldr	r4, [r2, #24]
 80096da:	42a3      	cmp	r3, r4
 80096dc:	db01      	blt.n	80096e2 <__sfputc_r+0x16>
 80096de:	290a      	cmp	r1, #10
 80096e0:	d103      	bne.n	80096ea <__sfputc_r+0x1e>
 80096e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e6:	f000 b99f 	b.w	8009a28 <__swbuf_r>
 80096ea:	6813      	ldr	r3, [r2, #0]
 80096ec:	1c58      	adds	r0, r3, #1
 80096ee:	6010      	str	r0, [r2, #0]
 80096f0:	7019      	strb	r1, [r3, #0]
 80096f2:	4608      	mov	r0, r1
 80096f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <__sfputs_r>:
 80096fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fc:	4606      	mov	r6, r0
 80096fe:	460f      	mov	r7, r1
 8009700:	4614      	mov	r4, r2
 8009702:	18d5      	adds	r5, r2, r3
 8009704:	42ac      	cmp	r4, r5
 8009706:	d101      	bne.n	800970c <__sfputs_r+0x12>
 8009708:	2000      	movs	r0, #0
 800970a:	e007      	b.n	800971c <__sfputs_r+0x22>
 800970c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009710:	463a      	mov	r2, r7
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff ffda 	bl	80096cc <__sfputc_r>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d1f3      	bne.n	8009704 <__sfputs_r+0xa>
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009720 <_vfiprintf_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	460d      	mov	r5, r1
 8009726:	b09d      	sub	sp, #116	; 0x74
 8009728:	4614      	mov	r4, r2
 800972a:	4698      	mov	r8, r3
 800972c:	4606      	mov	r6, r0
 800972e:	b118      	cbz	r0, 8009738 <_vfiprintf_r+0x18>
 8009730:	6983      	ldr	r3, [r0, #24]
 8009732:	b90b      	cbnz	r3, 8009738 <_vfiprintf_r+0x18>
 8009734:	f7ff fa30 	bl	8008b98 <__sinit>
 8009738:	4b89      	ldr	r3, [pc, #548]	; (8009960 <_vfiprintf_r+0x240>)
 800973a:	429d      	cmp	r5, r3
 800973c:	d11b      	bne.n	8009776 <_vfiprintf_r+0x56>
 800973e:	6875      	ldr	r5, [r6, #4]
 8009740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009742:	07d9      	lsls	r1, r3, #31
 8009744:	d405      	bmi.n	8009752 <_vfiprintf_r+0x32>
 8009746:	89ab      	ldrh	r3, [r5, #12]
 8009748:	059a      	lsls	r2, r3, #22
 800974a:	d402      	bmi.n	8009752 <_vfiprintf_r+0x32>
 800974c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800974e:	f7ff fac6 	bl	8008cde <__retarget_lock_acquire_recursive>
 8009752:	89ab      	ldrh	r3, [r5, #12]
 8009754:	071b      	lsls	r3, r3, #28
 8009756:	d501      	bpl.n	800975c <_vfiprintf_r+0x3c>
 8009758:	692b      	ldr	r3, [r5, #16]
 800975a:	b9eb      	cbnz	r3, 8009798 <_vfiprintf_r+0x78>
 800975c:	4629      	mov	r1, r5
 800975e:	4630      	mov	r0, r6
 8009760:	f000 f9c6 	bl	8009af0 <__swsetup_r>
 8009764:	b1c0      	cbz	r0, 8009798 <_vfiprintf_r+0x78>
 8009766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009768:	07dc      	lsls	r4, r3, #31
 800976a:	d50e      	bpl.n	800978a <_vfiprintf_r+0x6a>
 800976c:	f04f 30ff 	mov.w	r0, #4294967295
 8009770:	b01d      	add	sp, #116	; 0x74
 8009772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009776:	4b7b      	ldr	r3, [pc, #492]	; (8009964 <_vfiprintf_r+0x244>)
 8009778:	429d      	cmp	r5, r3
 800977a:	d101      	bne.n	8009780 <_vfiprintf_r+0x60>
 800977c:	68b5      	ldr	r5, [r6, #8]
 800977e:	e7df      	b.n	8009740 <_vfiprintf_r+0x20>
 8009780:	4b79      	ldr	r3, [pc, #484]	; (8009968 <_vfiprintf_r+0x248>)
 8009782:	429d      	cmp	r5, r3
 8009784:	bf08      	it	eq
 8009786:	68f5      	ldreq	r5, [r6, #12]
 8009788:	e7da      	b.n	8009740 <_vfiprintf_r+0x20>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	0598      	lsls	r0, r3, #22
 800978e:	d4ed      	bmi.n	800976c <_vfiprintf_r+0x4c>
 8009790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009792:	f7ff faa5 	bl	8008ce0 <__retarget_lock_release_recursive>
 8009796:	e7e9      	b.n	800976c <_vfiprintf_r+0x4c>
 8009798:	2300      	movs	r3, #0
 800979a:	9309      	str	r3, [sp, #36]	; 0x24
 800979c:	2320      	movs	r3, #32
 800979e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097a6:	2330      	movs	r3, #48	; 0x30
 80097a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800996c <_vfiprintf_r+0x24c>
 80097ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097b0:	f04f 0901 	mov.w	r9, #1
 80097b4:	4623      	mov	r3, r4
 80097b6:	469a      	mov	sl, r3
 80097b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097bc:	b10a      	cbz	r2, 80097c2 <_vfiprintf_r+0xa2>
 80097be:	2a25      	cmp	r2, #37	; 0x25
 80097c0:	d1f9      	bne.n	80097b6 <_vfiprintf_r+0x96>
 80097c2:	ebba 0b04 	subs.w	fp, sl, r4
 80097c6:	d00b      	beq.n	80097e0 <_vfiprintf_r+0xc0>
 80097c8:	465b      	mov	r3, fp
 80097ca:	4622      	mov	r2, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ff93 	bl	80096fa <__sfputs_r>
 80097d4:	3001      	adds	r0, #1
 80097d6:	f000 80aa 	beq.w	800992e <_vfiprintf_r+0x20e>
 80097da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097dc:	445a      	add	r2, fp
 80097de:	9209      	str	r2, [sp, #36]	; 0x24
 80097e0:	f89a 3000 	ldrb.w	r3, [sl]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 80a2 	beq.w	800992e <_vfiprintf_r+0x20e>
 80097ea:	2300      	movs	r3, #0
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295
 80097f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f4:	f10a 0a01 	add.w	sl, sl, #1
 80097f8:	9304      	str	r3, [sp, #16]
 80097fa:	9307      	str	r3, [sp, #28]
 80097fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009800:	931a      	str	r3, [sp, #104]	; 0x68
 8009802:	4654      	mov	r4, sl
 8009804:	2205      	movs	r2, #5
 8009806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980a:	4858      	ldr	r0, [pc, #352]	; (800996c <_vfiprintf_r+0x24c>)
 800980c:	f7f6 fce8 	bl	80001e0 <memchr>
 8009810:	9a04      	ldr	r2, [sp, #16]
 8009812:	b9d8      	cbnz	r0, 800984c <_vfiprintf_r+0x12c>
 8009814:	06d1      	lsls	r1, r2, #27
 8009816:	bf44      	itt	mi
 8009818:	2320      	movmi	r3, #32
 800981a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800981e:	0713      	lsls	r3, r2, #28
 8009820:	bf44      	itt	mi
 8009822:	232b      	movmi	r3, #43	; 0x2b
 8009824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009828:	f89a 3000 	ldrb.w	r3, [sl]
 800982c:	2b2a      	cmp	r3, #42	; 0x2a
 800982e:	d015      	beq.n	800985c <_vfiprintf_r+0x13c>
 8009830:	9a07      	ldr	r2, [sp, #28]
 8009832:	4654      	mov	r4, sl
 8009834:	2000      	movs	r0, #0
 8009836:	f04f 0c0a 	mov.w	ip, #10
 800983a:	4621      	mov	r1, r4
 800983c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009840:	3b30      	subs	r3, #48	; 0x30
 8009842:	2b09      	cmp	r3, #9
 8009844:	d94e      	bls.n	80098e4 <_vfiprintf_r+0x1c4>
 8009846:	b1b0      	cbz	r0, 8009876 <_vfiprintf_r+0x156>
 8009848:	9207      	str	r2, [sp, #28]
 800984a:	e014      	b.n	8009876 <_vfiprintf_r+0x156>
 800984c:	eba0 0308 	sub.w	r3, r0, r8
 8009850:	fa09 f303 	lsl.w	r3, r9, r3
 8009854:	4313      	orrs	r3, r2
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	46a2      	mov	sl, r4
 800985a:	e7d2      	b.n	8009802 <_vfiprintf_r+0xe2>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	1d19      	adds	r1, r3, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	9103      	str	r1, [sp, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	bfbb      	ittet	lt
 8009868:	425b      	neglt	r3, r3
 800986a:	f042 0202 	orrlt.w	r2, r2, #2
 800986e:	9307      	strge	r3, [sp, #28]
 8009870:	9307      	strlt	r3, [sp, #28]
 8009872:	bfb8      	it	lt
 8009874:	9204      	strlt	r2, [sp, #16]
 8009876:	7823      	ldrb	r3, [r4, #0]
 8009878:	2b2e      	cmp	r3, #46	; 0x2e
 800987a:	d10c      	bne.n	8009896 <_vfiprintf_r+0x176>
 800987c:	7863      	ldrb	r3, [r4, #1]
 800987e:	2b2a      	cmp	r3, #42	; 0x2a
 8009880:	d135      	bne.n	80098ee <_vfiprintf_r+0x1ce>
 8009882:	9b03      	ldr	r3, [sp, #12]
 8009884:	1d1a      	adds	r2, r3, #4
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	9203      	str	r2, [sp, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	bfb8      	it	lt
 800988e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009892:	3402      	adds	r4, #2
 8009894:	9305      	str	r3, [sp, #20]
 8009896:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800997c <_vfiprintf_r+0x25c>
 800989a:	7821      	ldrb	r1, [r4, #0]
 800989c:	2203      	movs	r2, #3
 800989e:	4650      	mov	r0, sl
 80098a0:	f7f6 fc9e 	bl	80001e0 <memchr>
 80098a4:	b140      	cbz	r0, 80098b8 <_vfiprintf_r+0x198>
 80098a6:	2340      	movs	r3, #64	; 0x40
 80098a8:	eba0 000a 	sub.w	r0, r0, sl
 80098ac:	fa03 f000 	lsl.w	r0, r3, r0
 80098b0:	9b04      	ldr	r3, [sp, #16]
 80098b2:	4303      	orrs	r3, r0
 80098b4:	3401      	adds	r4, #1
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098bc:	482c      	ldr	r0, [pc, #176]	; (8009970 <_vfiprintf_r+0x250>)
 80098be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098c2:	2206      	movs	r2, #6
 80098c4:	f7f6 fc8c 	bl	80001e0 <memchr>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d03f      	beq.n	800994c <_vfiprintf_r+0x22c>
 80098cc:	4b29      	ldr	r3, [pc, #164]	; (8009974 <_vfiprintf_r+0x254>)
 80098ce:	bb1b      	cbnz	r3, 8009918 <_vfiprintf_r+0x1f8>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	3307      	adds	r3, #7
 80098d4:	f023 0307 	bic.w	r3, r3, #7
 80098d8:	3308      	adds	r3, #8
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098de:	443b      	add	r3, r7
 80098e0:	9309      	str	r3, [sp, #36]	; 0x24
 80098e2:	e767      	b.n	80097b4 <_vfiprintf_r+0x94>
 80098e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80098e8:	460c      	mov	r4, r1
 80098ea:	2001      	movs	r0, #1
 80098ec:	e7a5      	b.n	800983a <_vfiprintf_r+0x11a>
 80098ee:	2300      	movs	r3, #0
 80098f0:	3401      	adds	r4, #1
 80098f2:	9305      	str	r3, [sp, #20]
 80098f4:	4619      	mov	r1, r3
 80098f6:	f04f 0c0a 	mov.w	ip, #10
 80098fa:	4620      	mov	r0, r4
 80098fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009900:	3a30      	subs	r2, #48	; 0x30
 8009902:	2a09      	cmp	r2, #9
 8009904:	d903      	bls.n	800990e <_vfiprintf_r+0x1ee>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d0c5      	beq.n	8009896 <_vfiprintf_r+0x176>
 800990a:	9105      	str	r1, [sp, #20]
 800990c:	e7c3      	b.n	8009896 <_vfiprintf_r+0x176>
 800990e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009912:	4604      	mov	r4, r0
 8009914:	2301      	movs	r3, #1
 8009916:	e7f0      	b.n	80098fa <_vfiprintf_r+0x1da>
 8009918:	ab03      	add	r3, sp, #12
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	462a      	mov	r2, r5
 800991e:	4b16      	ldr	r3, [pc, #88]	; (8009978 <_vfiprintf_r+0x258>)
 8009920:	a904      	add	r1, sp, #16
 8009922:	4630      	mov	r0, r6
 8009924:	f7fd fcf4 	bl	8007310 <_printf_float>
 8009928:	4607      	mov	r7, r0
 800992a:	1c78      	adds	r0, r7, #1
 800992c:	d1d6      	bne.n	80098dc <_vfiprintf_r+0x1bc>
 800992e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009930:	07d9      	lsls	r1, r3, #31
 8009932:	d405      	bmi.n	8009940 <_vfiprintf_r+0x220>
 8009934:	89ab      	ldrh	r3, [r5, #12]
 8009936:	059a      	lsls	r2, r3, #22
 8009938:	d402      	bmi.n	8009940 <_vfiprintf_r+0x220>
 800993a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800993c:	f7ff f9d0 	bl	8008ce0 <__retarget_lock_release_recursive>
 8009940:	89ab      	ldrh	r3, [r5, #12]
 8009942:	065b      	lsls	r3, r3, #25
 8009944:	f53f af12 	bmi.w	800976c <_vfiprintf_r+0x4c>
 8009948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800994a:	e711      	b.n	8009770 <_vfiprintf_r+0x50>
 800994c:	ab03      	add	r3, sp, #12
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	462a      	mov	r2, r5
 8009952:	4b09      	ldr	r3, [pc, #36]	; (8009978 <_vfiprintf_r+0x258>)
 8009954:	a904      	add	r1, sp, #16
 8009956:	4630      	mov	r0, r6
 8009958:	f7fd ff7e 	bl	8007858 <_printf_i>
 800995c:	e7e4      	b.n	8009928 <_vfiprintf_r+0x208>
 800995e:	bf00      	nop
 8009960:	08009f70 	.word	0x08009f70
 8009964:	08009f90 	.word	0x08009f90
 8009968:	08009f50 	.word	0x08009f50
 800996c:	0800a10c 	.word	0x0800a10c
 8009970:	0800a116 	.word	0x0800a116
 8009974:	08007311 	.word	0x08007311
 8009978:	080096fb 	.word	0x080096fb
 800997c:	0800a112 	.word	0x0800a112

08009980 <_sbrk_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d06      	ldr	r5, [pc, #24]	; (800999c <_sbrk_r+0x1c>)
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	4608      	mov	r0, r1
 800998a:	602b      	str	r3, [r5, #0]
 800998c:	f7f8 f878 	bl	8001a80 <_sbrk>
 8009990:	1c43      	adds	r3, r0, #1
 8009992:	d102      	bne.n	800999a <_sbrk_r+0x1a>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	b103      	cbz	r3, 800999a <_sbrk_r+0x1a>
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	200005c0 	.word	0x200005c0

080099a0 <__sread>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	460c      	mov	r4, r1
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	f000 f9a2 	bl	8009cf0 <_read_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	bfab      	itete	ge
 80099b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099b2:	89a3      	ldrhlt	r3, [r4, #12]
 80099b4:	181b      	addge	r3, r3, r0
 80099b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ba:	bfac      	ite	ge
 80099bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80099be:	81a3      	strhlt	r3, [r4, #12]
 80099c0:	bd10      	pop	{r4, pc}

080099c2 <__swrite>:
 80099c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	461f      	mov	r7, r3
 80099c8:	898b      	ldrh	r3, [r1, #12]
 80099ca:	05db      	lsls	r3, r3, #23
 80099cc:	4605      	mov	r5, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	4616      	mov	r6, r2
 80099d2:	d505      	bpl.n	80099e0 <__swrite+0x1e>
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	2302      	movs	r3, #2
 80099da:	2200      	movs	r2, #0
 80099dc:	f000 f958 	bl	8009c90 <_lseek_r>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	4632      	mov	r2, r6
 80099ee:	463b      	mov	r3, r7
 80099f0:	4628      	mov	r0, r5
 80099f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f6:	f000 b869 	b.w	8009acc <_write_r>

080099fa <__sseek>:
 80099fa:	b510      	push	{r4, lr}
 80099fc:	460c      	mov	r4, r1
 80099fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a02:	f000 f945 	bl	8009c90 <_lseek_r>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	bf15      	itete	ne
 8009a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a16:	81a3      	strheq	r3, [r4, #12]
 8009a18:	bf18      	it	ne
 8009a1a:	81a3      	strhne	r3, [r4, #12]
 8009a1c:	bd10      	pop	{r4, pc}

08009a1e <__sclose>:
 8009a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a22:	f000 b8f1 	b.w	8009c08 <_close_r>
	...

08009a28 <__swbuf_r>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	460e      	mov	r6, r1
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	4605      	mov	r5, r0
 8009a30:	b118      	cbz	r0, 8009a3a <__swbuf_r+0x12>
 8009a32:	6983      	ldr	r3, [r0, #24]
 8009a34:	b90b      	cbnz	r3, 8009a3a <__swbuf_r+0x12>
 8009a36:	f7ff f8af 	bl	8008b98 <__sinit>
 8009a3a:	4b21      	ldr	r3, [pc, #132]	; (8009ac0 <__swbuf_r+0x98>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d12b      	bne.n	8009a98 <__swbuf_r+0x70>
 8009a40:	686c      	ldr	r4, [r5, #4]
 8009a42:	69a3      	ldr	r3, [r4, #24]
 8009a44:	60a3      	str	r3, [r4, #8]
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	071a      	lsls	r2, r3, #28
 8009a4a:	d52f      	bpl.n	8009aac <__swbuf_r+0x84>
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	b36b      	cbz	r3, 8009aac <__swbuf_r+0x84>
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	6820      	ldr	r0, [r4, #0]
 8009a54:	1ac0      	subs	r0, r0, r3
 8009a56:	6963      	ldr	r3, [r4, #20]
 8009a58:	b2f6      	uxtb	r6, r6
 8009a5a:	4283      	cmp	r3, r0
 8009a5c:	4637      	mov	r7, r6
 8009a5e:	dc04      	bgt.n	8009a6a <__swbuf_r+0x42>
 8009a60:	4621      	mov	r1, r4
 8009a62:	4628      	mov	r0, r5
 8009a64:	f7ff f804 	bl	8008a70 <_fflush_r>
 8009a68:	bb30      	cbnz	r0, 8009ab8 <__swbuf_r+0x90>
 8009a6a:	68a3      	ldr	r3, [r4, #8]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	60a3      	str	r3, [r4, #8]
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	6022      	str	r2, [r4, #0]
 8009a76:	701e      	strb	r6, [r3, #0]
 8009a78:	6963      	ldr	r3, [r4, #20]
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	4283      	cmp	r3, r0
 8009a7e:	d004      	beq.n	8009a8a <__swbuf_r+0x62>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	07db      	lsls	r3, r3, #31
 8009a84:	d506      	bpl.n	8009a94 <__swbuf_r+0x6c>
 8009a86:	2e0a      	cmp	r6, #10
 8009a88:	d104      	bne.n	8009a94 <__swbuf_r+0x6c>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f7fe ffef 	bl	8008a70 <_fflush_r>
 8009a92:	b988      	cbnz	r0, 8009ab8 <__swbuf_r+0x90>
 8009a94:	4638      	mov	r0, r7
 8009a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a98:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <__swbuf_r+0x9c>)
 8009a9a:	429c      	cmp	r4, r3
 8009a9c:	d101      	bne.n	8009aa2 <__swbuf_r+0x7a>
 8009a9e:	68ac      	ldr	r4, [r5, #8]
 8009aa0:	e7cf      	b.n	8009a42 <__swbuf_r+0x1a>
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <__swbuf_r+0xa0>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	bf08      	it	eq
 8009aa8:	68ec      	ldreq	r4, [r5, #12]
 8009aaa:	e7ca      	b.n	8009a42 <__swbuf_r+0x1a>
 8009aac:	4621      	mov	r1, r4
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 f81e 	bl	8009af0 <__swsetup_r>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d0cb      	beq.n	8009a50 <__swbuf_r+0x28>
 8009ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8009abc:	e7ea      	b.n	8009a94 <__swbuf_r+0x6c>
 8009abe:	bf00      	nop
 8009ac0:	08009f70 	.word	0x08009f70
 8009ac4:	08009f90 	.word	0x08009f90
 8009ac8:	08009f50 	.word	0x08009f50

08009acc <_write_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d07      	ldr	r5, [pc, #28]	; (8009aec <_write_r+0x20>)
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	602a      	str	r2, [r5, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	f7f7 ff7f 	bl	80019de <_write>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_write_r+0x1e>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_write_r+0x1e>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	200005c0 	.word	0x200005c0

08009af0 <__swsetup_r>:
 8009af0:	4b32      	ldr	r3, [pc, #200]	; (8009bbc <__swsetup_r+0xcc>)
 8009af2:	b570      	push	{r4, r5, r6, lr}
 8009af4:	681d      	ldr	r5, [r3, #0]
 8009af6:	4606      	mov	r6, r0
 8009af8:	460c      	mov	r4, r1
 8009afa:	b125      	cbz	r5, 8009b06 <__swsetup_r+0x16>
 8009afc:	69ab      	ldr	r3, [r5, #24]
 8009afe:	b913      	cbnz	r3, 8009b06 <__swsetup_r+0x16>
 8009b00:	4628      	mov	r0, r5
 8009b02:	f7ff f849 	bl	8008b98 <__sinit>
 8009b06:	4b2e      	ldr	r3, [pc, #184]	; (8009bc0 <__swsetup_r+0xd0>)
 8009b08:	429c      	cmp	r4, r3
 8009b0a:	d10f      	bne.n	8009b2c <__swsetup_r+0x3c>
 8009b0c:	686c      	ldr	r4, [r5, #4]
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b14:	0719      	lsls	r1, r3, #28
 8009b16:	d42c      	bmi.n	8009b72 <__swsetup_r+0x82>
 8009b18:	06dd      	lsls	r5, r3, #27
 8009b1a:	d411      	bmi.n	8009b40 <__swsetup_r+0x50>
 8009b1c:	2309      	movs	r3, #9
 8009b1e:	6033      	str	r3, [r6, #0]
 8009b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2a:	e03e      	b.n	8009baa <__swsetup_r+0xba>
 8009b2c:	4b25      	ldr	r3, [pc, #148]	; (8009bc4 <__swsetup_r+0xd4>)
 8009b2e:	429c      	cmp	r4, r3
 8009b30:	d101      	bne.n	8009b36 <__swsetup_r+0x46>
 8009b32:	68ac      	ldr	r4, [r5, #8]
 8009b34:	e7eb      	b.n	8009b0e <__swsetup_r+0x1e>
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <__swsetup_r+0xd8>)
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	bf08      	it	eq
 8009b3c:	68ec      	ldreq	r4, [r5, #12]
 8009b3e:	e7e6      	b.n	8009b0e <__swsetup_r+0x1e>
 8009b40:	0758      	lsls	r0, r3, #29
 8009b42:	d512      	bpl.n	8009b6a <__swsetup_r+0x7a>
 8009b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b46:	b141      	cbz	r1, 8009b5a <__swsetup_r+0x6a>
 8009b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	d002      	beq.n	8009b56 <__swsetup_r+0x66>
 8009b50:	4630      	mov	r0, r6
 8009b52:	f7ff fcdb 	bl	800950c <_free_r>
 8009b56:	2300      	movs	r3, #0
 8009b58:	6363      	str	r3, [r4, #52]	; 0x34
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	2300      	movs	r3, #0
 8009b64:	6063      	str	r3, [r4, #4]
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	89a3      	ldrh	r3, [r4, #12]
 8009b6c:	f043 0308 	orr.w	r3, r3, #8
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	b94b      	cbnz	r3, 8009b8a <__swsetup_r+0x9a>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b80:	d003      	beq.n	8009b8a <__swsetup_r+0x9a>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4630      	mov	r0, r6
 8009b86:	f7ff f8d1 	bl	8008d2c <__smakebuf_r>
 8009b8a:	89a0      	ldrh	r0, [r4, #12]
 8009b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b90:	f010 0301 	ands.w	r3, r0, #1
 8009b94:	d00a      	beq.n	8009bac <__swsetup_r+0xbc>
 8009b96:	2300      	movs	r3, #0
 8009b98:	60a3      	str	r3, [r4, #8]
 8009b9a:	6963      	ldr	r3, [r4, #20]
 8009b9c:	425b      	negs	r3, r3
 8009b9e:	61a3      	str	r3, [r4, #24]
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	b943      	cbnz	r3, 8009bb6 <__swsetup_r+0xc6>
 8009ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ba8:	d1ba      	bne.n	8009b20 <__swsetup_r+0x30>
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	0781      	lsls	r1, r0, #30
 8009bae:	bf58      	it	pl
 8009bb0:	6963      	ldrpl	r3, [r4, #20]
 8009bb2:	60a3      	str	r3, [r4, #8]
 8009bb4:	e7f4      	b.n	8009ba0 <__swsetup_r+0xb0>
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	e7f7      	b.n	8009baa <__swsetup_r+0xba>
 8009bba:	bf00      	nop
 8009bbc:	2000000c 	.word	0x2000000c
 8009bc0:	08009f70 	.word	0x08009f70
 8009bc4:	08009f90 	.word	0x08009f90
 8009bc8:	08009f50 	.word	0x08009f50

08009bcc <__assert_func>:
 8009bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bce:	4614      	mov	r4, r2
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <__assert_func+0x2c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	68d8      	ldr	r0, [r3, #12]
 8009bda:	b14c      	cbz	r4, 8009bf0 <__assert_func+0x24>
 8009bdc:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <__assert_func+0x30>)
 8009bde:	9100      	str	r1, [sp, #0]
 8009be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009be4:	4906      	ldr	r1, [pc, #24]	; (8009c00 <__assert_func+0x34>)
 8009be6:	462b      	mov	r3, r5
 8009be8:	f000 f81e 	bl	8009c28 <fiprintf>
 8009bec:	f000 f89f 	bl	8009d2e <abort>
 8009bf0:	4b04      	ldr	r3, [pc, #16]	; (8009c04 <__assert_func+0x38>)
 8009bf2:	461c      	mov	r4, r3
 8009bf4:	e7f3      	b.n	8009bde <__assert_func+0x12>
 8009bf6:	bf00      	nop
 8009bf8:	2000000c 	.word	0x2000000c
 8009bfc:	0800a11d 	.word	0x0800a11d
 8009c00:	0800a12a 	.word	0x0800a12a
 8009c04:	0800a158 	.word	0x0800a158

08009c08 <_close_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d06      	ldr	r5, [pc, #24]	; (8009c24 <_close_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	f7f7 feff 	bl	8001a16 <_close>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_close_r+0x1a>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_close_r+0x1a>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	200005c0 	.word	0x200005c0

08009c28 <fiprintf>:
 8009c28:	b40e      	push	{r1, r2, r3}
 8009c2a:	b503      	push	{r0, r1, lr}
 8009c2c:	4601      	mov	r1, r0
 8009c2e:	ab03      	add	r3, sp, #12
 8009c30:	4805      	ldr	r0, [pc, #20]	; (8009c48 <fiprintf+0x20>)
 8009c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c36:	6800      	ldr	r0, [r0, #0]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	f7ff fd71 	bl	8009720 <_vfiprintf_r>
 8009c3e:	b002      	add	sp, #8
 8009c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c44:	b003      	add	sp, #12
 8009c46:	4770      	bx	lr
 8009c48:	2000000c 	.word	0x2000000c

08009c4c <_fstat_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4d07      	ldr	r5, [pc, #28]	; (8009c6c <_fstat_r+0x20>)
 8009c50:	2300      	movs	r3, #0
 8009c52:	4604      	mov	r4, r0
 8009c54:	4608      	mov	r0, r1
 8009c56:	4611      	mov	r1, r2
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	f7f7 fee8 	bl	8001a2e <_fstat>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	d102      	bne.n	8009c68 <_fstat_r+0x1c>
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	b103      	cbz	r3, 8009c68 <_fstat_r+0x1c>
 8009c66:	6023      	str	r3, [r4, #0]
 8009c68:	bd38      	pop	{r3, r4, r5, pc}
 8009c6a:	bf00      	nop
 8009c6c:	200005c0 	.word	0x200005c0

08009c70 <_isatty_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d06      	ldr	r5, [pc, #24]	; (8009c8c <_isatty_r+0x1c>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7f7 fee7 	bl	8001a4e <_isatty>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_isatty_r+0x1a>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_isatty_r+0x1a>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	200005c0 	.word	0x200005c0

08009c90 <_lseek_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4d07      	ldr	r5, [pc, #28]	; (8009cb0 <_lseek_r+0x20>)
 8009c94:	4604      	mov	r4, r0
 8009c96:	4608      	mov	r0, r1
 8009c98:	4611      	mov	r1, r2
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	602a      	str	r2, [r5, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f7f7 fee0 	bl	8001a64 <_lseek>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_lseek_r+0x1e>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_lseek_r+0x1e>
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	200005c0 	.word	0x200005c0

08009cb4 <__ascii_mbtowc>:
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	b901      	cbnz	r1, 8009cba <__ascii_mbtowc+0x6>
 8009cb8:	a901      	add	r1, sp, #4
 8009cba:	b142      	cbz	r2, 8009cce <__ascii_mbtowc+0x1a>
 8009cbc:	b14b      	cbz	r3, 8009cd2 <__ascii_mbtowc+0x1e>
 8009cbe:	7813      	ldrb	r3, [r2, #0]
 8009cc0:	600b      	str	r3, [r1, #0]
 8009cc2:	7812      	ldrb	r2, [r2, #0]
 8009cc4:	1e10      	subs	r0, r2, #0
 8009cc6:	bf18      	it	ne
 8009cc8:	2001      	movne	r0, #1
 8009cca:	b002      	add	sp, #8
 8009ccc:	4770      	bx	lr
 8009cce:	4610      	mov	r0, r2
 8009cd0:	e7fb      	b.n	8009cca <__ascii_mbtowc+0x16>
 8009cd2:	f06f 0001 	mvn.w	r0, #1
 8009cd6:	e7f8      	b.n	8009cca <__ascii_mbtowc+0x16>

08009cd8 <__malloc_lock>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	; (8009ce0 <__malloc_lock+0x8>)
 8009cda:	f7ff b800 	b.w	8008cde <__retarget_lock_acquire_recursive>
 8009cde:	bf00      	nop
 8009ce0:	200005b4 	.word	0x200005b4

08009ce4 <__malloc_unlock>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	; (8009cec <__malloc_unlock+0x8>)
 8009ce6:	f7fe bffb 	b.w	8008ce0 <__retarget_lock_release_recursive>
 8009cea:	bf00      	nop
 8009cec:	200005b4 	.word	0x200005b4

08009cf0 <_read_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	; (8009d10 <_read_r+0x20>)
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f7f7 fe50 	bl	80019a4 <_read>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_read_r+0x1e>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_read_r+0x1e>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	200005c0 	.word	0x200005c0

08009d14 <__ascii_wctomb>:
 8009d14:	b149      	cbz	r1, 8009d2a <__ascii_wctomb+0x16>
 8009d16:	2aff      	cmp	r2, #255	; 0xff
 8009d18:	bf85      	ittet	hi
 8009d1a:	238a      	movhi	r3, #138	; 0x8a
 8009d1c:	6003      	strhi	r3, [r0, #0]
 8009d1e:	700a      	strbls	r2, [r1, #0]
 8009d20:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d24:	bf98      	it	ls
 8009d26:	2001      	movls	r0, #1
 8009d28:	4770      	bx	lr
 8009d2a:	4608      	mov	r0, r1
 8009d2c:	4770      	bx	lr

08009d2e <abort>:
 8009d2e:	b508      	push	{r3, lr}
 8009d30:	2006      	movs	r0, #6
 8009d32:	f000 f82b 	bl	8009d8c <raise>
 8009d36:	2001      	movs	r0, #1
 8009d38:	f7f7 fe2a 	bl	8001990 <_exit>

08009d3c <_raise_r>:
 8009d3c:	291f      	cmp	r1, #31
 8009d3e:	b538      	push	{r3, r4, r5, lr}
 8009d40:	4604      	mov	r4, r0
 8009d42:	460d      	mov	r5, r1
 8009d44:	d904      	bls.n	8009d50 <_raise_r+0x14>
 8009d46:	2316      	movs	r3, #22
 8009d48:	6003      	str	r3, [r0, #0]
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d52:	b112      	cbz	r2, 8009d5a <_raise_r+0x1e>
 8009d54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d58:	b94b      	cbnz	r3, 8009d6e <_raise_r+0x32>
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 f830 	bl	8009dc0 <_getpid_r>
 8009d60:	462a      	mov	r2, r5
 8009d62:	4601      	mov	r1, r0
 8009d64:	4620      	mov	r0, r4
 8009d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d6a:	f000 b817 	b.w	8009d9c <_kill_r>
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d00a      	beq.n	8009d88 <_raise_r+0x4c>
 8009d72:	1c59      	adds	r1, r3, #1
 8009d74:	d103      	bne.n	8009d7e <_raise_r+0x42>
 8009d76:	2316      	movs	r3, #22
 8009d78:	6003      	str	r3, [r0, #0]
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	e7e7      	b.n	8009d4e <_raise_r+0x12>
 8009d7e:	2400      	movs	r4, #0
 8009d80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d84:	4628      	mov	r0, r5
 8009d86:	4798      	blx	r3
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e7e0      	b.n	8009d4e <_raise_r+0x12>

08009d8c <raise>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <raise+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f7ff bfd3 	b.w	8009d3c <_raise_r>
 8009d96:	bf00      	nop
 8009d98:	2000000c 	.word	0x2000000c

08009d9c <_kill_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d07      	ldr	r5, [pc, #28]	; (8009dbc <_kill_r+0x20>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	4611      	mov	r1, r2
 8009da8:	602b      	str	r3, [r5, #0]
 8009daa:	f7f7 fde1 	bl	8001970 <_kill>
 8009dae:	1c43      	adds	r3, r0, #1
 8009db0:	d102      	bne.n	8009db8 <_kill_r+0x1c>
 8009db2:	682b      	ldr	r3, [r5, #0]
 8009db4:	b103      	cbz	r3, 8009db8 <_kill_r+0x1c>
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	bd38      	pop	{r3, r4, r5, pc}
 8009dba:	bf00      	nop
 8009dbc:	200005c0 	.word	0x200005c0

08009dc0 <_getpid_r>:
 8009dc0:	f7f7 bdce 	b.w	8001960 <_getpid>

08009dc4 <_init>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr

08009dd0 <_fini>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	bf00      	nop
 8009dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd6:	bc08      	pop	{r3}
 8009dd8:	469e      	mov	lr, r3
 8009dda:	4770      	bx	lr
