
orion_F303_boost_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e550  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  0800e6e0  0800e6e0  0001e6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f07c  0800f07c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f07c  0800f07c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f07c  0800f07c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f07c  0800f07c  0001f07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000cf8  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ed0  20000ed0  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018a61  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b07  00000000  00000000  00038cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001530  00000000  00000000  0003c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001073  00000000  00000000  0003dce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021e7d  00000000  00000000  0003ed5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d42b  00000000  00000000  00060bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c78f0  00000000  00000000  0007e003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006960  00000000  00000000  001458f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0014c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e6c8 	.word	0x0800e6c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800e6c8 	.word	0x0800e6c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2228      	movs	r2, #40	; 0x28
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f00b fc3b 	bl	800c4dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c80:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb6:	f003 fdf1 	bl	800489c <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f002 ff47 	bl	8003b52 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cd0:	f004 fc94 	bl	80055fc <HAL_ADCEx_MultiModeConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000cda:	f002 ff3a 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d1a:	f004 f8e9 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d24:	f002 ff15 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d36:	f004 f8db 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000d40:	f002 ff07 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d44:	2303      	movs	r3, #3
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d52:	f004 f8cd 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000d5c:	f002 fef9 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	; 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001f4 	.word	0x200001f4

08000d6c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2228      	movs	r2, #40	; 0x28
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00b fba9 	bl	800c4dc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d8c:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <MX_ADC3_Init+0x124>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd6:	482d      	ldr	r0, [pc, #180]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd8:	f003 fd60 	bl	800489c <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8000de2:	f002 feb6 	bl	8003b52 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000df2:	f004 fc03 	bl	80055fc <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000dfc:	f002 fea9 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e10:	2306      	movs	r3, #6
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e3c:	f004 f858 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000e46:	f002 fe84 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e58:	f004 f84a 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8000e62:	f002 fe76 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000e66:	230c      	movs	r3, #12
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e74:	f004 f83c 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8000e7e:	f002 fe68 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000244 	.word	0x20000244
 8000e90:	50000400 	.word	0x50000400

08000e94 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2228      	movs	r2, #40	; 0x28
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00b fb1b 	bl	800c4dc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <MX_ADC4_Init+0xdc>)
 8000eaa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ef4:	f003 fcd2 	bl	800489c <HAL_ADC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC4_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f002 fe28 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f02:	2303      	movs	r3, #3
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000f12:	2306      	movs	r3, #6
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f38:	f003 ffda 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC4_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f002 fe06 	bl	8003b52 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f54:	f003 ffcc 	bl	8004ef0 <HAL_ADCEx_InjectedConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000f5e:	f002 fdf8 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000294 	.word	0x20000294
 8000f70:	50000500 	.word	0x50000500

08000f74 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f94:	d14d      	bne.n	8001032 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a84      	ldr	r2, [pc, #528]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b82      	ldr	r3, [pc, #520]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	623b      	str	r3, [r7, #32]
 8000fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f005 fe56 	bl	8006c8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe0:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe2:	4a74      	ldr	r2, [pc, #464]	; (80011b4 <HAL_ADC_MspInit+0x240>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe6:	4b72      	ldr	r3, [pc, #456]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001000:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001008:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800100a:	2220      	movs	r2, #32
 800100c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	4866      	ldr	r0, [pc, #408]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001016:	f005 fc0e 	bl	8006836 <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001020:	f002 fd97 	bl	8003b52 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a62      	ldr	r2, [pc, #392]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
 800102a:	4a61      	ldr	r2, [pc, #388]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001030:	e0b7      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC3)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_ADC_MspInit+0x244>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d157      	bne.n	80010ec <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800103c:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <HAL_ADC_MspInit+0x248>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a5e      	ldr	r2, [pc, #376]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001044:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10b      	bne.n	8001066 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800104e:	4b57      	ldr	r3, [pc, #348]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BOOST_V_Pin|BATT_CS_Pin|TEMP_COIL_1_Pin;
 800107e:	f242 0303 	movw	r3, #8195	; 0x2003
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	484b      	ldr	r0, [pc, #300]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 8001094:	f005 fdfa 	bl	8006c8c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 800109a:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_ADC_MspInit+0x254>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010be:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010ce:	483d      	ldr	r0, [pc, #244]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010d0:	f005 fbb1 	bl	8006836 <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 80010da:	f002 fd3a 	bl	8003b52 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
 80010e4:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80010ea:	e05a      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC4)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a36      	ldr	r2, [pc, #216]	; (80011cc <HAL_ADC_MspInit+0x258>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d155      	bne.n	80011a2 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10b      	bne.n	8001120 <HAL_ADC_MspInit+0x1ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001112:	6153      	str	r3, [r2, #20]
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	6153      	str	r3, [r2, #20]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_FET_Pin|TEMP_COIL_2_Pin;
 8001138:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 800114e:	f005 fd9d 	bl	8006c8c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001154:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x260>)
 8001156:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800117c:	2220      	movs	r2, #32
 800117e:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001186:	4812      	ldr	r0, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001188:	f005 fb55 	bl	8006836 <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001192:	f002 fcde 	bl	8003b52 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80011a2:	bf00      	nop
 80011a4:	3738      	adds	r7, #56	; 0x38
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	200002e4 	.word	0x200002e4
 80011b4:	40020008 	.word	0x40020008
 80011b8:	50000400 	.word	0x50000400
 80011bc:	200003b0 	.word	0x200003b0
 80011c0:	48000400 	.word	0x48000400
 80011c4:	20000328 	.word	0x20000328
 80011c8:	40020458 	.word	0x40020458
 80011cc:	50000500 	.word	0x50000500
 80011d0:	2000036c 	.word	0x2000036c
 80011d4:	4002041c 	.word	0x4002041c

080011d8 <start_transmit>:
int32_t integral_x, integral_y;
uint32_t shutter_speed;
float integral_xx, integral_yy;

void start_transmit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f005 fee3 	bl	8006fb0 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <end_transmit>:

void end_transmit(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f005 fed8 	bl	8006fb0 <HAL_GPIO_WritePin>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <reset>:


static void reset(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af02      	add	r7, sp, #8
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <reset+0x4c>)
 8001214:	490f      	ldr	r1, [pc, #60]	; (8001254 <reset+0x50>)
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <reset+0x54>)
 8001218:	f007 fbb1 	bl	800897e <HAL_SPI_TransmitReceive>
    end_transmit();
 800121c:	f7ff ffe7 	bl	80011ee <end_transmit>
    // set clk,nss polaryty


    HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f003 fb17 	bl	8004854 <HAL_Delay>

    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <reset+0x58>)
 800122c:	f005 fec0 	bl	8006fb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f003 fb0f 	bl	8004854 <HAL_Delay>
    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <reset+0x58>)
 800123c:	f005 feb8 	bl	8006fb0 <HAL_GPIO_WritePin>

    HAL_Delay(550); // waiting for self-test
 8001240:	f240 2026 	movw	r0, #550	; 0x226
 8001244:	f003 fb06 	bl	8004854 <HAL_Delay>
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200003c4 	.word	0x200003c4
 8001254:	200003b4 	.word	0x200003b4
 8001258:	200004d0 	.word	0x200004d0
 800125c:	48000400 	.word	0x48000400

08001260 <is_connect_ADNS3080>:

bool is_connect_ADNS3080(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af02      	add	r7, sp, #8
    //HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);

    reset();
 8001266:	f7ff ffcd 	bl	8001204 <reset>


    start_transmit();
 800126a:	f7ff ffb5 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_PRODUCT_ID;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <is_connect_ADNS3080+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 8001274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2302      	movs	r3, #2
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <is_connect_ADNS3080+0x50>)
 800127e:	490b      	ldr	r1, [pc, #44]	; (80012ac <is_connect_ADNS3080+0x4c>)
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <is_connect_ADNS3080+0x54>)
 8001282:	f007 fb7c 	bl	800897e <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001286:	f7ff ffb2 	bl	80011ee <end_transmit>

    p("SPI ID : %d\n", rbuf[1]);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <is_connect_ADNS3080+0x50>)
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	4619      	mov	r1, r3
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <is_connect_ADNS3080+0x58>)
 8001292:	f003 f99f 	bl	80045d4 <p>

    if (rbuf[1] == ADNS3080_PRODUCT_ID_VALUE)
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <is_connect_ADNS3080+0x50>)
 8001298:	785b      	ldrb	r3, [r3, #1]
 800129a:	2b17      	cmp	r3, #23
 800129c:	d101      	bne.n	80012a2 <is_connect_ADNS3080+0x42>
    {
        return true;
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <is_connect_ADNS3080+0x44>
    }
    else
    {
        return false;
 80012a2:	2300      	movs	r3, #0
    }
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200003b4 	.word	0x200003b4
 80012b0:	200003c4 	.word	0x200003c4
 80012b4:	200004d0 	.word	0x200004d0
 80012b8:	0800e6e0 	.word	0x0800e6e0

080012bc <init_ADNS3080>:

void init_ADNS3080(bool ips_1600)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
    delta_x = 0;
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <init_ADNS3080+0x9c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
    delta_y = 0;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <init_ADNS3080+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
    quality = 0;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <init_ADNS3080+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
    integral_x = 0;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <init_ADNS3080+0xa8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    integral_y = 0;
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <init_ADNS3080+0xac>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
    integral_xx = 0;
 80012e4:	4b21      	ldr	r3, [pc, #132]	; (800136c <init_ADNS3080+0xb0>)
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
    integral_yy = 0;
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <init_ADNS3080+0xb4>)
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    reset();
 80012f4:	f7ff ff86 	bl	8001204 <reset>

    start_transmit();
 80012f8:	f7ff ff6e 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_REG_WRITE & ADNS3080_CONFIGURATION_BITS; // config write
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <init_ADNS3080+0xb8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <init_ADNS3080+0xbc>)
 800130c:	4919      	ldr	r1, [pc, #100]	; (8001374 <init_ADNS3080+0xb8>)
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <init_ADNS3080+0xc0>)
 8001310:	f007 fb35 	bl	800897e <HAL_SPI_TransmitReceive>

    //delay >75us
    for (int i = 0; i < 1000; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	e002      	b.n	8001320 <init_ADNS3080+0x64>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001326:	dbf8      	blt.n	800131a <init_ADNS3080+0x5e>
    {
    }

    uint8_t mouse_config = rbuf[1];
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <init_ADNS3080+0xbc>)
 800132a:	785b      	ldrb	r3, [r3, #1]
 800132c:	72fb      	strb	r3, [r7, #11]
    sbuf[0] = mouse_config | ADNS3080_BIT_1600IPS; // set 1600 ips
 800132e:	7afb      	ldrb	r3, [r7, #11]
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <init_ADNS3080+0xb8>)
 8001338:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <init_ADNS3080+0xbc>)
 8001344:	490b      	ldr	r1, [pc, #44]	; (8001374 <init_ADNS3080+0xb8>)
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <init_ADNS3080+0xc0>)
 8001348:	f007 fb19 	bl	800897e <HAL_SPI_TransmitReceive>
    
    end_transmit();
 800134c:	f7ff ff4f 	bl	80011ee <end_transmit>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200003d4 	.word	0x200003d4
 800135c:	200003d5 	.word	0x200003d5
 8001360:	200003d6 	.word	0x200003d6
 8001364:	200003d8 	.word	0x200003d8
 8001368:	200003dc 	.word	0x200003dc
 800136c:	200003e4 	.word	0x200003e4
 8001370:	200003e8 	.word	0x200003e8
 8001374:	200003b4 	.word	0x200003b4
 8001378:	200003c4 	.word	0x200003c4
 800137c:	200004d0 	.word	0x200004d0

08001380 <update_ADNS3080>:


bool update_ADNS3080(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af02      	add	r7, sp, #8
    
    start_transmit();
 8001386:	f7ff ff27 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_MOTION_BURST;
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <update_ADNS3080+0x108>)
 800138c:	2250      	movs	r2, #80	; 0x50
 800138e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 8, 1000);
 8001390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2308      	movs	r3, #8
 8001398:	4a3c      	ldr	r2, [pc, #240]	; (800148c <update_ADNS3080+0x10c>)
 800139a:	493b      	ldr	r1, [pc, #236]	; (8001488 <update_ADNS3080+0x108>)
 800139c:	483c      	ldr	r0, [pc, #240]	; (8001490 <update_ADNS3080+0x110>)
 800139e:	f007 faee 	bl	800897e <HAL_SPI_TransmitReceive>
    
    end_transmit();
 80013a2:	f7ff ff24 	bl	80011ee <end_transmit>
    quality = rbuf[4];
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <update_ADNS3080+0x10c>)
 80013a8:	791a      	ldrb	r2, [r3, #4]
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <update_ADNS3080+0x114>)
 80013ac:	701a      	strb	r2, [r3, #0]
    
    if (rbuf[1] & ADNS3080_BIT_MOTION)
 80013ae:	4b37      	ldr	r3, [pc, #220]	; (800148c <update_ADNS3080+0x10c>)
 80013b0:	785b      	ldrb	r3, [r3, #1]
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da5c      	bge.n	8001472 <update_ADNS3080+0xf2>
    {
        delta_x = (int8_t)rbuf[2];
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <update_ADNS3080+0x10c>)
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	b25a      	sxtb	r2, r3
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <update_ADNS3080+0x118>)
 80013c0:	701a      	strb	r2, [r3, #0]
        delta_y = (int8_t)rbuf[3];
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <update_ADNS3080+0x10c>)
 80013c4:	78db      	ldrb	r3, [r3, #3]
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <update_ADNS3080+0x11c>)
 80013ca:	701a      	strb	r2, [r3, #0]
        integral_x += delta_x;
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <update_ADNS3080+0x118>)
 80013ce:	f993 3000 	ldrsb.w	r3, [r3]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <update_ADNS3080+0x120>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <update_ADNS3080+0x120>)
 80013dc:	6013      	str	r3, [r2, #0]
        integral_y += delta_y;
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <update_ADNS3080+0x11c>)
 80013e0:	f993 3000 	ldrsb.w	r3, [r3]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <update_ADNS3080+0x124>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <update_ADNS3080+0x124>)
 80013ee:	6013      	str	r3, [r2, #0]
        shutter_speed = (rbuf[5] << 8) | rbuf[6];
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <update_ADNS3080+0x10c>)
 80013f2:	795b      	ldrb	r3, [r3, #5]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	4a25      	ldr	r2, [pc, #148]	; (800148c <update_ADNS3080+0x10c>)
 80013f8:	7992      	ldrb	r2, [r2, #6]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <update_ADNS3080+0x128>)
 8001400:	601a      	str	r2, [r3, #0]
        integral_xx += (float)delta_x * shutter_speed / 500;
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <update_ADNS3080+0x118>)
 8001404:	f993 3000 	ldrsb.w	r3, [r3]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <update_ADNS3080+0x128>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eddf 6a22 	vldr	s13, [pc, #136]	; 80014ac <update_ADNS3080+0x12c>
 8001424:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <update_ADNS3080+0x130>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <update_ADNS3080+0x130>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
        integral_yy += (float)delta_y * shutter_speed/ 500;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <update_ADNS3080+0x11c>)
 800143a:	f993 3000 	ldrsb.w	r3, [r3]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <update_ADNS3080+0x128>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001456:	eddf 6a15 	vldr	s13, [pc, #84]	; 80014ac <update_ADNS3080+0x12c>
 800145a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <update_ADNS3080+0x134>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <update_ADNS3080+0x134>)
 800146a:	edc3 7a00 	vstr	s15, [r3]
        return true;
 800146e:	2301      	movs	r3, #1
 8001470:	e006      	b.n	8001480 <update_ADNS3080+0x100>
    }else{
    	delta_x = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <update_ADNS3080+0x118>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
    	delta_y = 0;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <update_ADNS3080+0x11c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
    	return false;
 800147e:	2300      	movs	r3, #0
    }
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200003b4 	.word	0x200003b4
 800148c:	200003c4 	.word	0x200003c4
 8001490:	200004d0 	.word	0x200004d0
 8001494:	200003d6 	.word	0x200003d6
 8001498:	200003d4 	.word	0x200003d4
 800149c:	200003d5 	.word	0x200003d5
 80014a0:	200003d8 	.word	0x200003d8
 80014a4:	200003dc 	.word	0x200003dc
 80014a8:	200003e0 	.word	0x200003e0
 80014ac:	43fa0000 	.word	0x43fa0000
 80014b0:	200003e4 	.word	0x200003e4
 80014b4:	200003e8 	.word	0x200003e8

080014b8 <get_DeltaX_ADNS3080>:


int8_t get_DeltaX_ADNS3080(void){
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
    return delta_x;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <get_DeltaX_ADNS3080+0x14>)
 80014be:	f993 3000 	ldrsb.w	r3, [r3]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	200003d4 	.word	0x200003d4

080014d0 <get_DeltaY_ADNS3080>:
int8_t get_DeltaY_ADNS3080(void){
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    return delta_y;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <get_DeltaY_ADNS3080+0x14>)
 80014d6:	f993 3000 	ldrsb.w	r3, [r3]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	200003d5 	.word	0x200003d5

080014e8 <get_Qualty_ADNS3080>:
uint8_t get_Qualty_ADNS3080(void){
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    return quality;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <get_Qualty_ADNS3080+0x14>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200003d6 	.word	0x200003d6

08001500 <get_X_ADNS3080>:

void clear_XY_ADNS3080(void){
    integral_x = 0;
    integral_y = 0;
}
int32_t get_X_ADNS3080(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
    return integral_x;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <get_X_ADNS3080+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200003d8 	.word	0x200003d8

08001518 <get_Y_ADNS3080>:
int32_t get_Y_ADNS3080(void){
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
    return integral_y;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <get_Y_ADNS3080+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200003dc 	.word	0x200003dc

08001530 <get_ShutterSpeed_ADNS3080>:
uint16_t get_ShutterSpeed_ADNS3080(void) { return shutter_speed; }
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <get_ShutterSpeed_ADNS3080+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	200003e0 	.word	0x200003e0

08001548 <get_XX_ADNS3080>:

float get_XX_ADNS3080() { return integral_xx; }
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <get_XX_ADNS3080+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	200003e4 	.word	0x200003e4

08001564 <get_YY_ADNS3080>:
float get_YY_ADNS3080() { return integral_yy; }
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <get_YY_ADNS3080+0x18>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eeb0 0a67 	vmov.f32	s0, s15
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	200003e8 	.word	0x200003e8

08001580 <frame_print_ADNS3080>:

void frame_print_ADNS3080(void){
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af02      	add	r7, sp, #8
    char scale[] = "#987654321-,.'` ";
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <frame_print_ADNS3080+0xc8>)
 8001588:	1d3c      	adds	r4, r7, #4
 800158a:	461d      	mov	r5, r3
 800158c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001590:	682b      	ldr	r3, [r5, #0]
 8001592:	7023      	strb	r3, [r4, #0]
    sbuf[0] = ADNS3080_FRAME_CAPTURE | ADNS3080_REG_WRITE; // frame capture write
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <frame_print_ADNS3080+0xcc>)
 8001596:	2293      	movs	r2, #147	; 0x93
 8001598:	701a      	strb	r2, [r3, #0]
    sbuf[1] = ADNS3080_FRAME_CAPTURE_START;
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <frame_print_ADNS3080+0xcc>)
 800159c:	2283      	movs	r2, #131	; 0x83
 800159e:	705a      	strb	r2, [r3, #1]
    start_transmit();
 80015a0:	f7ff fe1a 	bl	80011d8 <start_transmit>
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 80015a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	4a28      	ldr	r2, [pc, #160]	; (8001650 <frame_print_ADNS3080+0xd0>)
 80015ae:	4927      	ldr	r1, [pc, #156]	; (800164c <frame_print_ADNS3080+0xcc>)
 80015b0:	4828      	ldr	r0, [pc, #160]	; (8001654 <frame_print_ADNS3080+0xd4>)
 80015b2:	f007 f9e4 	bl	800897e <HAL_SPI_TransmitReceive>
    end_transmit();
 80015b6:	f7ff fe1a 	bl	80011ee <end_transmit>
    HAL_Delay(2);
 80015ba:	2002      	movs	r0, #2
 80015bc:	f003 f94a 	bl	8004854 <HAL_Delay>

    for (int pixel_x = 0; pixel_x < ADNS3080_PIXELS_X; pixel_x++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e036      	b.n	8001634 <frame_print_ADNS3080+0xb4>
    {
        for (int pixel_y = 0; pixel_y < ADNS3080_PIXELS_Y; pixel_y++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	e02a      	b.n	8001622 <frame_print_ADNS3080+0xa2>
        {
            sbuf[0] = ADNS3080_FRAME_CAPTURE; // frame capture
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <frame_print_ADNS3080+0xcc>)
 80015ce:	2213      	movs	r2, #19
 80015d0:	701a      	strb	r2, [r3, #0]
            start_transmit();
 80015d2:	f7ff fe01 	bl	80011d8 <start_transmit>
            HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2302      	movs	r3, #2
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <frame_print_ADNS3080+0xd0>)
 80015e0:	491a      	ldr	r1, [pc, #104]	; (800164c <frame_print_ADNS3080+0xcc>)
 80015e2:	481c      	ldr	r0, [pc, #112]	; (8001654 <frame_print_ADNS3080+0xd4>)
 80015e4:	f007 f9cb 	bl	800897e <HAL_SPI_TransmitReceive>
            end_transmit();
 80015e8:	f7ff fe01 	bl	80011ee <end_transmit>

            p("%c ", scale[(rbuf[1] % 0x3F) >> 2]);
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <frame_print_ADNS3080+0xd0>)
 80015ee:	785a      	ldrb	r2, [r3, #1]
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <frame_print_ADNS3080+0xd8>)
 80015f2:	fba3 1302 	umull	r1, r3, r3, r2
 80015f6:	1ad1      	subs	r1, r2, r3
 80015f8:	0849      	lsrs	r1, r1, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	0959      	lsrs	r1, r3, #5
 80015fe:	460b      	mov	r3, r1
 8001600:	019b      	lsls	r3, r3, #6
 8001602:	1a5b      	subs	r3, r3, r1
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3320      	adds	r3, #32
 800160e:	443b      	add	r3, r7
 8001610:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001614:	4619      	mov	r1, r3
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <frame_print_ADNS3080+0xdc>)
 8001618:	f002 ffdc 	bl	80045d4 <p>
        for (int pixel_y = 0; pixel_y < ADNS3080_PIXELS_Y; pixel_y++)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	3301      	adds	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b1d      	cmp	r3, #29
 8001626:	ddd1      	ble.n	80015cc <frame_print_ADNS3080+0x4c>
        }
        p("\n");
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <frame_print_ADNS3080+0xe0>)
 800162a:	f002 ffd3 	bl	80045d4 <p>
    for (int pixel_x = 0; pixel_x < ADNS3080_PIXELS_X; pixel_x++)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b1d      	cmp	r3, #29
 8001638:	ddc5      	ble.n	80015c6 <frame_print_ADNS3080+0x46>
    }
    p("\n\n");
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <frame_print_ADNS3080+0xe4>)
 800163c:	f002 ffca 	bl	80045d4 <p>
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bdb0      	pop	{r4, r5, r7, pc}
 8001648:	0800e6fc 	.word	0x0800e6fc
 800164c:	200003b4 	.word	0x200003b4
 8001650:	200003c4 	.word	0x200003c4
 8001654:	200004d0 	.word	0x200004d0
 8001658:	04104105 	.word	0x04104105
 800165c:	0800e6f0 	.word	0x0800e6f0
 8001660:	0800e6f4 	.word	0x0800e6f4
 8001664:	0800e6f8 	.word	0x0800e6f8

08001668 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_CAN_Init+0x64>)
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <MX_CAN_Init+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_CAN_Init+0x64>)
 8001674:	2202      	movs	r2, #2
 8001676:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_CAN_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_CAN_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_CAN_Init+0x64>)
 8001686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800168a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_CAN_Init+0x64>)
 800168e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001692:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_CAN_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_CAN_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_CAN_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_CAN_Init+0x64>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_CAN_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_CAN_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_CAN_Init+0x64>)
 80016ba:	f004 f95b 	bl	8005974 <HAL_CAN_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_CAN_Init+0x60>
    Error_Handler();
 80016c4:	f002 fa45 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200003ec 	.word	0x200003ec
 80016d0:	40006400 	.word	0x40006400

080016d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef * canHandle)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if (canHandle->Instance == CAN) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <HAL_CAN_MspInit+0x90>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d131      	bne.n	800175a <HAL_CAN_MspInit+0x86>
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_CAN_MspInit+0x94>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_CAN_MspInit+0x94>)
 80016fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_CAN_MspInit+0x94>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_CAN_MspInit+0x94>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_CAN_MspInit+0x94>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_CAN_MspInit+0x94>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001738:	2309      	movs	r3, #9
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f005 faa1 	bl	8006c8c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2101      	movs	r1, #1
 800174e:	2014      	movs	r0, #20
 8001750:	f005 f83b 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001754:	2014      	movs	r0, #20
 8001756:	f005 f854 	bl	8006802 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN_MspInit 1 */

    /* USER CODE END CAN_MspInit 1 */
  }
}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40006400 	.word	0x40006400
 8001768:	40021000 	.word	0x40021000

0800176c <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001772:	2301      	movs	r3, #1
 8001774:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x00) << 5;
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x100) << 5;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x010) << 5;
 8001788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x110) << 5;
 800178e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001792:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	480a      	ldr	r0, [pc, #40]	; (80017d0 <CAN_Filter_Init+0x64>)
 80017a6:	f004 f9e0 	bl	8005b6a <HAL_CAN_ConfigFilter>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <CAN_Filter_Init+0x48>
    Error_Handler();
 80017b0:	f002 f9cf 	bl	8003b52 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80017b4:	2102      	movs	r1, #2
 80017b6:	4806      	ldr	r0, [pc, #24]	; (80017d0 <CAN_Filter_Init+0x64>)
 80017b8:	f004 fcd7 	bl	800616a <HAL_CAN_ActivateNotification>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <CAN_Filter_Init+0x5a>
    Error_Handler();
 80017c2:	f002 f9c6 	bl	8003b52 <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200003ec 	.word	0x200003ec

080017d4 <sendCanTemp>:
static CAN_TxHeaderTypeDef can_header;
static uint8_t can_data[8];
static uint32_t can_mailbox;
static can_msg_buf_t tx;
void sendCanTemp(uint8_t temp_fet, uint8_t temp_coil_1, uint8_t temp_coil_2)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	460b      	mov	r3, r1
 80017e0:	71bb      	strb	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	717b      	strb	r3, [r7, #5]
  can_header.StdId = 0x224;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <sendCanTemp+0x58>)
 80017e8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80017ec:	601a      	str	r2, [r3, #0]
  can_header.RTR = CAN_RTR_DATA;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <sendCanTemp+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
  can_header.DLC = 8;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <sendCanTemp+0x58>)
 80017f6:	2208      	movs	r2, #8
 80017f8:	611a      	str	r2, [r3, #16]
  can_header.TransmitGlobalTime = DISABLE;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <sendCanTemp+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	751a      	strb	r2, [r3, #20]
  can_data[0] = temp_fet;
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <sendCanTemp+0x5c>)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	7013      	strb	r3, [r2, #0]
  can_data[1] = temp_coil_1;
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <sendCanTemp+0x5c>)
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	7053      	strb	r3, [r2, #1]
  can_data[2] = temp_coil_2;
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <sendCanTemp+0x5c>)
 800180e:	797b      	ldrb	r3, [r7, #5]
 8001810:	7093      	strb	r3, [r2, #2]
  can_data[3] = 1;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <sendCanTemp+0x5c>)
 8001814:	2201      	movs	r2, #1
 8001816:	70da      	strb	r2, [r3, #3]
  HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <sendCanTemp+0x60>)
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <sendCanTemp+0x5c>)
 800181c:	4903      	ldr	r1, [pc, #12]	; (800182c <sendCanTemp+0x58>)
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <sendCanTemp+0x64>)
 8001820:	f004 fab1 	bl	8005d86 <HAL_CAN_AddTxMessage>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000414 	.word	0x20000414
 8001830:	2000042c 	.word	0x2000042c
 8001834:	20000434 	.word	0x20000434
 8001838:	200003ec 	.word	0x200003ec

0800183c <sendCanMouse>:

void sendCanMouse(int16_t delta_x, int16_t delta_y, uint16_t quality)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
 8001846:	460b      	mov	r3, r1
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	807b      	strh	r3, [r7, #2]
  can_header.StdId = 0x241;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <sendCanMouse+0x54>)
 8001850:	f240 2241 	movw	r2, #577	; 0x241
 8001854:	601a      	str	r2, [r3, #0]
  can_header.RTR = CAN_RTR_DATA;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <sendCanMouse+0x54>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  can_header.DLC = 6;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <sendCanMouse+0x54>)
 800185e:	2206      	movs	r2, #6
 8001860:	611a      	str	r2, [r3, #16]
  can_header.TransmitGlobalTime = DISABLE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <sendCanMouse+0x54>)
 8001864:	2200      	movs	r2, #0
 8001866:	751a      	strb	r2, [r3, #20]
  tx.mouse.delta_x = delta_x;
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <sendCanMouse+0x58>)
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	8013      	strh	r3, [r2, #0]
  tx.mouse.delta_y = delta_y;
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <sendCanMouse+0x58>)
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	8053      	strh	r3, [r2, #2]
  tx.mouse.quality = quality;
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <sendCanMouse+0x58>)
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	8093      	strh	r3, [r2, #4]
  HAL_CAN_AddTxMessage(&hcan, &can_header, tx.data, &can_mailbox);
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <sendCanMouse+0x5c>)
 800187c:	4a05      	ldr	r2, [pc, #20]	; (8001894 <sendCanMouse+0x58>)
 800187e:	4904      	ldr	r1, [pc, #16]	; (8001890 <sendCanMouse+0x54>)
 8001880:	4806      	ldr	r0, [pc, #24]	; (800189c <sendCanMouse+0x60>)
 8001882:	f004 fa80 	bl	8005d86 <HAL_CAN_AddTxMessage>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000414 	.word	0x20000414
 8001894:	20000438 	.word	0x20000438
 8001898:	20000434 	.word	0x20000434
 800189c:	200003ec 	.word	0x200003ec

080018a0 <sendCanError>:

void sendCanError(uint16_t info, float value)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	ed87 0a00 	vstr	s0, [r7]
 80018ac:	80fb      	strh	r3, [r7, #6]
  can_header.StdId = 0x0;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <sendCanError+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
  can_header.RTR = CAN_RTR_DATA;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <sendCanError+0x4c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  can_header.DLC = 8;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <sendCanError+0x4c>)
 80018bc:	2208      	movs	r2, #8
 80018be:	611a      	str	r2, [r3, #16]
  can_header.TransmitGlobalTime = DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <sendCanError+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	751a      	strb	r2, [r3, #20]
  tx.error.node_id = 100;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <sendCanError+0x50>)
 80018c8:	2264      	movs	r2, #100	; 0x64
 80018ca:	801a      	strh	r2, [r3, #0]
  tx.error.info = info;
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <sendCanError+0x50>)
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	8053      	strh	r3, [r2, #2]
  tx.error.value = value;
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <sendCanError+0x50>)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6053      	str	r3, [r2, #4]
  HAL_CAN_AddTxMessage(&hcan, &can_header, tx.data, &can_mailbox);
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <sendCanError+0x54>)
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <sendCanError+0x50>)
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <sendCanError+0x4c>)
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <sendCanError+0x58>)
 80018e0:	f004 fa51 	bl	8005d86 <HAL_CAN_AddTxMessage>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000414 	.word	0x20000414
 80018f0:	20000438 	.word	0x20000438
 80018f4:	20000434 	.word	0x20000434
 80018f8:	200003ec 	.word	0x200003ec

080018fc <sendFloat>:

void sendFloat(uint32_t can_id, float data)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	ed87 0a00 	vstr	s0, [r7]
  can_header.StdId = can_id;
 8001908:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <sendFloat+0x4c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  can_header.ExtId = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <sendFloat+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  can_header.RTR = CAN_RTR_DATA;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <sendFloat+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  can_header.DLC = 4;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <sendFloat+0x4c>)
 800191c:	2204      	movs	r2, #4
 800191e:	611a      	str	r2, [r3, #16]
  can_header.IDE = CAN_ID_STD;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <sendFloat+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  can_header.TransmitGlobalTime = DISABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <sendFloat+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	751a      	strb	r2, [r3, #20]
  tx.voltage.value = data;
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <sendFloat+0x50>)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6013      	str	r3, [r2, #0]
  HAL_CAN_AddTxMessage(&hcan, &can_header, tx.data, &can_mailbox);
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <sendFloat+0x54>)
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <sendFloat+0x50>)
 8001936:	4904      	ldr	r1, [pc, #16]	; (8001948 <sendFloat+0x4c>)
 8001938:	4806      	ldr	r0, [pc, #24]	; (8001954 <sendFloat+0x58>)
 800193a:	f004 fa24 	bl	8005d86 <HAL_CAN_AddTxMessage>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000414 	.word	0x20000414
 800194c:	20000438 	.word	0x20000438
 8001950:	20000434 	.word	0x20000434
 8001954:	200003ec 	.word	0x200003ec

08001958 <sendCanBatteryVoltage>:

void sendCanBatteryVoltage(float voltage) { sendFloat(0x215, voltage); }
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001962:	ed97 0a01 	vldr	s0, [r7, #4]
 8001966:	f240 2015 	movw	r0, #533	; 0x215
 800196a:	f7ff ffc7 	bl	80018fc <sendFloat>
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <sendCanKickerVoltage>:
void sendCanKickerVoltage(float voltage) { sendFloat(0x216, voltage); }
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001980:	ed97 0a01 	vldr	s0, [r7, #4]
 8001984:	f240 2016 	movw	r0, #534	; 0x216
 8001988:	f7ff ffb8 	bl	80018fc <sendFloat>
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <sendCanBatteryCurrent>:
void sendCanBatteryCurrent(float current) { sendFloat(0x234, current); }
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	ed87 0a01 	vstr	s0, [r7, #4]
 800199e:	ed97 0a01 	vldr	s0, [r7, #4]
 80019a2:	f44f 700d 	mov.w	r0, #564	; 0x234
 80019a6:	f7ff ffa9 	bl	80018fc <sendFloat>
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <MX_DMA_Init+0x80>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <MX_DMA_Init+0x80>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6153      	str	r3, [r2, #20]
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_DMA_Init+0x80>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_DMA_Init+0x80>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <MX_DMA_Init+0x80>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6153      	str	r3, [r2, #20]
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_DMA_Init+0x80>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	200b      	movs	r0, #11
 80019f0:	f004 feeb 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f4:	200b      	movs	r0, #11
 80019f6:	f004 ff04 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	200e      	movs	r0, #14
 8001a00:	f004 fee3 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a04:	200e      	movs	r0, #14
 8001a06:	f004 fefc 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2039      	movs	r0, #57	; 0x39
 8001a10:	f004 fedb 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001a14:	2039      	movs	r0, #57	; 0x39
 8001a16:	f004 fef4 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	203c      	movs	r0, #60	; 0x3c
 8001a20:	f004 fed3 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001a24:	203c      	movs	r0, #60	; 0x3c
 8001a26:	f004 feec 	bl	8006802 <HAL_NVIC_EnableIRQ>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001ab4:	4828      	ldr	r0, [pc, #160]	; (8001b58 <MX_GPIO_Init+0x120>)
 8001ab6:	f005 fa7b 	bl	8006fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CURRENT_Pin|MOUSE_NSS_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f248 0110 	movw	r1, #32784	; 0x8010
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac4:	f005 fa74 	bl	8006fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POWER_SW_EN_Pin|LED_4_Pin|LED_5_Pin|MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f640 4144 	movw	r1, #3140	; 0xc44
 8001ace:	4823      	ldr	r0, [pc, #140]	; (8001b5c <MX_GPIO_Init+0x124>)
 8001ad0:	f005 fa6e 	bl	8006fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8001ad4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	481a      	ldr	r0, [pc, #104]	; (8001b58 <MX_GPIO_Init+0x120>)
 8001aee:	f005 f8cd 	bl	8006c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_CURRENT_Pin|MOUSE_NSS_Pin;
 8001af2:	f248 0310 	movw	r3, #32784	; 0x8010
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f005 f8bd 	bl	8006c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_SW_EN_Pin|LED_4_Pin|LED_5_Pin|MOUSE_RST_Pin;
 8001b12:	f640 4344 	movw	r3, #3140	; 0xc44
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <MX_GPIO_Init+0x124>)
 8001b2c:	f005 f8ae 	bl	8006c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8001b30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_GPIO_Init+0x124>)
 8001b46:	f005 f8a1 	bl	8006c8c <HAL_GPIO_Init>

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000800 	.word	0x48000800
 8001b5c:	48000400 	.word	0x48000400

08001b60 <powerOutputEnable>:

/* USER CODE BEGIN 2 */
void powerOutputEnable(void) { HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET); }
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	2201      	movs	r2, #1
 8001b66:	2104      	movs	r1, #4
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <powerOutputEnable+0x14>)
 8001b6a:	f005 fa21 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	48000400 	.word	0x48000400

08001b78 <powerOutputDisable>:
void powerOutputDisable(void) { HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_RESET); }
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2104      	movs	r1, #4
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <powerOutputDisable+0x14>)
 8001b82:	f005 fa15 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	48000400 	.word	0x48000400

08001b90 <mouseLedEnable>:
void mouseLedEnable(void) { HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET); }
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	2201      	movs	r2, #1
 8001b96:	2110      	movs	r1, #16
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f005 fa08 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <mouseLedDisable>:
void mouseLedDisable(void) { HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_RESET); }
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2110      	movs	r1, #16
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f005 f9fe 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <setErrorLedHigh>:

void setErrorLedHigh(void) { HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET); };
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc2:	4802      	ldr	r0, [pc, #8]	; (8001bcc <setErrorLedHigh+0x14>)
 8001bc4:	f005 f9f4 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	48000800 	.word	0x48000800

08001bd0 <setErrorLedLow>:
void setErrorLedLow(void) { HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET); };
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <setErrorLedLow+0x14>)
 8001bdc:	f005 f9e8 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	48000800 	.word	0x48000800

08001be8 <setOutSwLedHigh>:

void setOutSwLedHigh(void) { HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET); };
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf2:	4802      	ldr	r0, [pc, #8]	; (8001bfc <setOutSwLedHigh+0x14>)
 8001bf4:	f005 f9dc 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	48000800 	.word	0x48000800

08001c00 <setOutSwLedLow>:
void setOutSwLedLow(void) { HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET); };
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0a:	4802      	ldr	r0, [pc, #8]	; (8001c14 <setOutSwLedLow+0x14>)
 8001c0c:	f005 f9d0 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	48000800 	.word	0x48000800

08001c18 <setHVWarningLedHigh>:

void setHVWarningLedHigh(void) { HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET); };
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	4802      	ldr	r0, [pc, #8]	; (8001c2c <setHVWarningLedHigh+0x14>)
 8001c24:	f005 f9c4 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	48000800 	.word	0x48000800

08001c30 <setHVWarningLedLow>:
void setHVWarningLedLow(void) { HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET); };
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c3a:	4802      	ldr	r0, [pc, #8]	; (8001c44 <setHVWarningLedLow+0x14>)
 8001c3c:	f005 f9b8 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	48000800 	.word	0x48000800

08001c48 <setCanEnCmdLedHigh>:

void setCanEnCmdLedHigh(void) { HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET); };
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <setCanEnCmdLedHigh+0x14>)
 8001c54:	f005 f9ac 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	48000400 	.word	0x48000400

08001c60 <setCanEnCmdLedLow>:
void setCanEnCmdLedLow(void) { HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET); };
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6a:	4802      	ldr	r0, [pc, #8]	; (8001c74 <setCanEnCmdLedLow+0x14>)
 8001c6c:	f005 f9a0 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	48000400 	.word	0x48000400

08001c78 <setChargingLedHigh>:

void setChargingLedHigh(void) { HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET); };
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c82:	4802      	ldr	r0, [pc, #8]	; (8001c8c <setChargingLedHigh+0x14>)
 8001c84:	f005 f994 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	48000400 	.word	0x48000400

08001c90 <setChargingLedLow>:
void setChargingLedLow(void) { HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET); };
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c9a:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <setChargingLedLow+0x14>)
 8001c9c:	f005 f988 	bl	8006fb0 <HAL_GPIO_WritePin>
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <isPushedUserSw1>:

bool isPushedUserSw1(void) { return !(bool)HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin); };
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <isPushedUserSw1+0x20>)
 8001cb2:	f005 f965 	bl	8006f80 <HAL_GPIO_ReadPin>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	48000400 	.word	0x48000400

08001ccc <isPushedUserSw2>:
bool isPushedUserSw2(void) { return !(bool)HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin); };
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <isPushedUserSw2+0x20>)
 8001cd6:	f005 f953 	bl	8006f80 <HAL_GPIO_ReadPin>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	48000400 	.word	0x48000400

08001cf0 <setTargetVoltage>:
  int sw_enable_cnt;
  float min_v, max_v, max_c, fet_temp, coil_temp;
} power_cmd;

void setTargetVoltage(float target)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (target > 450) {
 8001cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cfe:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001d38 <setTargetVoltage+0x48>
 8001d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	dc0c      	bgt.n	8001d26 <setTargetVoltage+0x36>
    return;
    target = 450;
  }
  if (target < 20) {
 8001d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d10:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d405      	bmi.n	8001d2a <setTargetVoltage+0x3a>
    return;
    target = 20;
  }
  power_cmd.target_voltage = target;
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <setTargetVoltage+0x4c>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6053      	str	r3, [r2, #4]
 8001d24:	e002      	b.n	8001d2c <setTargetVoltage+0x3c>
    return;
 8001d26:	bf00      	nop
 8001d28:	e000      	b.n	8001d2c <setTargetVoltage+0x3c>
    return;
 8001d2a:	bf00      	nop
}
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	43e10000 	.word	0x43e10000
 8001d3c:	20000440 	.word	0x20000440

08001d40 <startKick>:
  float error_value;
  uint32_t system_loop_cnt;
} stat;

void startKick(uint8_t power)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if (stat.kick_cnt == 0) {
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <startKick+0x50>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d119      	bne.n	8001d86 <startKick+0x46>
    stat.kick_cnt = 100;
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <startKick+0x50>)
 8001d54:	2264      	movs	r2, #100	; 0x64
 8001d56:	605a      	str	r2, [r3, #4]
    stat.boost_cnt = 0;
 8001d58:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <startKick+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
    power_cmd.kick_power = TIM_KICK_PERI * power / 255;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <startKick+0x54>)
 8001d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d6e:	441a      	add	r2, r3
 8001d70:	11d2      	asrs	r2, r2, #7
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <startKick+0x58>)
 8001d78:	6093      	str	r3, [r2, #8]
    p("start kick! : %d\n", power_cmd.kick_power);
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <startKick+0x58>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4806      	ldr	r0, [pc, #24]	; (8001d9c <startKick+0x5c>)
 8001d82:	f002 fc27 	bl	80045d4 <p>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000464 	.word	0x20000464
 8001d94:	80808081 	.word	0x80808081
 8001d98:	20000440 	.word	0x20000440
 8001d9c:	0800e710 	.word	0x0800e710

08001da0 <startCharge>:

void startCharge()
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  if (stat.boost_cnt == 0 && stat.kick_cnt == 0) {
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <startCharge+0x28>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <startCharge+0x1c>
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <startCharge+0x28>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d103      	bne.n	8001dbc <startCharge+0x1c>
    // printf("boost start!!\n");
    stat.boost_cnt = 1000;
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <startCharge+0x28>)
 8001db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dba:	609a      	str	r2, [r3, #8]
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000464 	.word	0x20000464

08001dcc <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef can_rx_header;
  can_msg_buf_t rx;

  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, rx.data) != HAL_OK) {
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	f107 0214 	add.w	r2, r7, #20
 8001ddc:	2100      	movs	r1, #0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f004 f8a1 	bl	8005f26 <HAL_CAN_GetRxMessage>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
    /* Reception Error */
    Error_Handler();
 8001dea:	f001 feb2 	bl	8003b52 <Error_Handler>
  }

  can_rx_cnt++;
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	4a3e      	ldr	r2, [pc, #248]	; (8001ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8001df6:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId) {
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001dfe:	d03c      	beq.n	8001e7a <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
 8001e00:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001e04:	d86e      	bhi.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d004      	beq.n	8001e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
        default:
          break;
      }
      break;
    default:
      break;
 8001e0e:	e069      	b.n	8001ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
      power_cmd.charge_enabled = false;
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
      break;
 8001e16:	e066      	b.n	8001ee6 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
      switch (rx.data[0]) {
 8001e18:	7b3b      	ldrb	r3, [r7, #12]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d829      	bhi.n	8001e72 <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	08001e4b 	.word	0x08001e4b
 8001e2c:	08001e53 	.word	0x08001e53
 8001e30:	08001e5b 	.word	0x08001e5b
 8001e34:	08001e63 	.word	0x08001e63
 8001e38:	08001e6b 	.word	0x08001e6b
          if (rx.power_en.enable) {
 8001e3c:	7b7b      	ldrb	r3, [r7, #13]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
            power_cmd.sw_enable_cnt = 200;
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001e44:	22c8      	movs	r2, #200	; 0xc8
 8001e46:	60da      	str	r2, [r3, #12]
          break;
 8001e48:	e015      	b.n	8001e76 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
          power_cmd.min_v = rx.set_protect_param.value;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001e4e:	6113      	str	r3, [r2, #16]
          break;
 8001e50:	e012      	b.n	8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
          power_cmd.max_v = rx.set_protect_param.value;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001e56:	6153      	str	r3, [r2, #20]
          break;
 8001e58:	e00e      	b.n	8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
          power_cmd.max_c = rx.set_protect_param.value;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001e5e:	6193      	str	r3, [r2, #24]
          break;
 8001e60:	e00a      	b.n	8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
          power_cmd.fet_temp = rx.set_protect_param.value;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001e66:	61d3      	str	r3, [r2, #28]
          break;
 8001e68:	e006      	b.n	8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
          power_cmd.coil_temp = rx.set_protect_param.value;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001e6e:	6213      	str	r3, [r2, #32]
          break;
 8001e70:	e002      	b.n	8001e78 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
          break;
 8001e72:	bf00      	nop
 8001e74:	e037      	b.n	8001ee6 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
          break;
 8001e76:	bf00      	nop
      break;
 8001e78:	e035      	b.n	8001ee6 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
      switch (rx.power.idx) {
 8001e7a:	7b3b      	ldrb	r3, [r7, #12]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d82f      	bhi.n	8001ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001ea7 	.word	0x08001ea7
 8001e90:	08001ec1 	.word	0x08001ec1
 8001e94:	08001ed7 	.word	0x08001ed7
          setTargetVoltage(rx.power.value);
 8001e98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	f7ff ff26 	bl	8001cf0 <setTargetVoltage>
          break;
 8001ea4:	e01d      	b.n	8001ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
          if (rx.data[1] == 1) {
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
            power_cmd.charge_enabled = true;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
            startCharge();
 8001eb2:	f7ff ff75 	bl	8001da0 <startCharge>
          break;
 8001eb6:	e014      	b.n	8001ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
            power_cmd.charge_enabled = false;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
          break;
 8001ebe:	e010      	b.n	8001ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
          if (rx.data[1] == 1) {
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d103      	bne.n	8001ece <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
            power_cmd.kick_chip_selected = true;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	705a      	strb	r2, [r3, #1]
          break;
 8001ecc:	e009      	b.n	8001ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
            power_cmd.kick_chip_selected = false;
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
          break;
 8001ed4:	e005      	b.n	8001ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
          startKick(rx.data[1]);
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff31 	bl	8001d40 <startKick>
          break;
 8001ede:	e000      	b.n	8001ee2 <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
          break;
 8001ee0:	bf00      	nop
      break;
 8001ee2:	e000      	b.n	8001ee6 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
      break;
 8001ee4:	bf00      	nop
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3730      	adds	r7, #48	; 0x30
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000047c 	.word	0x2000047c
 8001ef4:	20000440 	.word	0x20000440

08001ef8 <HAL_UART_RxCpltCallback>:

uint8_t uart1_rx_it_buffer;
uint32_t uart1_rx_cnt = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_UART_RxCpltCallback+0x30>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d109      	bne.n	8001f1e <HAL_UART_RxCpltCallback+0x26>
    uart1_rx_cnt++;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_UART_RxCpltCallback+0x34>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_UART_RxCpltCallback+0x34>)
 8001f12:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&huart1, &uart1_rx_it_buffer, 1);
 8001f14:	2201      	movs	r2, #1
 8001f16:	4906      	ldr	r1, [pc, #24]	; (8001f30 <HAL_UART_RxCpltCallback+0x38>)
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <HAL_UART_RxCpltCallback+0x3c>)
 8001f1a:	f008 f99b 	bl	800a254 <HAL_UART_Receive_IT>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	20000484 	.word	0x20000484
 8001f30:	20000480 	.word	0x20000480
 8001f34:	20000668 	.word	0x20000668

08001f38 <updateADCs>:
  float gd_16p_min, gd_16m_min;
  float batt_cs_max;
} peak;

void updateADCs(void)
{
 8001f38:	b5b0      	push	{r4, r5, r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  sensor.batt_v = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * 3.3 / 4096 * 11 / 1;
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	48de      	ldr	r0, [pc, #888]	; (80022b8 <updateADCs+0x380>)
 8001f40:	f002 ffa2 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 8001f44:	ee07 0a90 	vmov	s15, r0
 8001f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4c:	ee17 0a90 	vmov	r0, s15
 8001f50:	f7fe fafa 	bl	8000548 <__aeabi_f2d>
 8001f54:	a3d6      	add	r3, pc, #856	; (adr r3, 80022b0 <updateADCs+0x378>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb4d 	bl	80005f8 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4bd4      	ldr	r3, [pc, #848]	; (80022bc <updateADCs+0x384>)
 8001f6c:	f7fe fc6e 	bl	800084c <__aeabi_ddiv>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4bd0      	ldr	r3, [pc, #832]	; (80022c0 <updateADCs+0x388>)
 8001f7e:	f7fe fb3b 	bl	80005f8 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe0d 	bl	8000ba8 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4acc      	ldr	r2, [pc, #816]	; (80022c4 <updateADCs+0x38c>)
 8001f92:	6053      	str	r3, [r2, #4]
  sensor.gd_16p = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2) * 3.3 / 4096 * 11 / 1;
 8001f94:	2102      	movs	r1, #2
 8001f96:	48c8      	ldr	r0, [pc, #800]	; (80022b8 <updateADCs+0x380>)
 8001f98:	f002 ff76 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 8001f9c:	ee07 0a90 	vmov	s15, r0
 8001fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa4:	ee17 0a90 	vmov	r0, s15
 8001fa8:	f7fe face 	bl	8000548 <__aeabi_f2d>
 8001fac:	a3c0      	add	r3, pc, #768	; (adr r3, 80022b0 <updateADCs+0x378>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fb21 	bl	80005f8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4bbe      	ldr	r3, [pc, #760]	; (80022bc <updateADCs+0x384>)
 8001fc4:	f7fe fc42 	bl	800084c <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4bba      	ldr	r3, [pc, #744]	; (80022c0 <updateADCs+0x388>)
 8001fd6:	f7fe fb0f 	bl	80005f8 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fde1 	bl	8000ba8 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4ab6      	ldr	r2, [pc, #728]	; (80022c4 <updateADCs+0x38c>)
 8001fea:	6093      	str	r3, [r2, #8]
  sensor.gd_16m = (((float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3) * 3.3 / 4096) * 21 - sensor.gd_16p * 11) / 10;
 8001fec:	2103      	movs	r1, #3
 8001fee:	48b2      	ldr	r0, [pc, #712]	; (80022b8 <updateADCs+0x380>)
 8001ff0:	f002 ff4a 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 8001ff4:	ee07 0a90 	vmov	s15, r0
 8001ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffc:	ee17 0a90 	vmov	r0, s15
 8002000:	f7fe faa2 	bl	8000548 <__aeabi_f2d>
 8002004:	a3aa      	add	r3, pc, #680	; (adr r3, 80022b0 <updateADCs+0x378>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe faf5 	bl	80005f8 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4ba8      	ldr	r3, [pc, #672]	; (80022bc <updateADCs+0x384>)
 800201c:	f7fe fc16 	bl	800084c <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4ba6      	ldr	r3, [pc, #664]	; (80022c8 <updateADCs+0x390>)
 800202e:	f7fe fae3 	bl	80005f8 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4614      	mov	r4, r2
 8002038:	461d      	mov	r5, r3
 800203a:	4ba2      	ldr	r3, [pc, #648]	; (80022c4 <updateADCs+0x38c>)
 800203c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002040:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8002044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002048:	ee17 0a90 	vmov	r0, s15
 800204c:	f7fe fa7c 	bl	8000548 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	f7fe f916 	bl	8000288 <__aeabi_dsub>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	4b98      	ldr	r3, [pc, #608]	; (80022cc <updateADCs+0x394>)
 800206a:	f7fe fbef 	bl	800084c <__aeabi_ddiv>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd97 	bl	8000ba8 <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4a91      	ldr	r2, [pc, #580]	; (80022c4 <updateADCs+0x38c>)
 800207e:	60d3      	str	r3, [r2, #12]
  sensor.boost_v = (float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_3) * 213 * 3.3 / 4096;  // * 1.038; // 1.038 is calib(v3),
 8002080:	2103      	movs	r1, #3
 8002082:	4893      	ldr	r0, [pc, #588]	; (80022d0 <updateADCs+0x398>)
 8002084:	f002 ff00 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 8002088:	ee07 0a90 	vmov	s15, r0
 800208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002090:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80022d4 <updateADCs+0x39c>
 8002094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002098:	ee17 0a90 	vmov	r0, s15
 800209c:	f7fe fa54 	bl	8000548 <__aeabi_f2d>
 80020a0:	a383      	add	r3, pc, #524	; (adr r3, 80022b0 <updateADCs+0x378>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe faa7 	bl	80005f8 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b81      	ldr	r3, [pc, #516]	; (80022bc <updateADCs+0x384>)
 80020b8:	f7fe fbc8 	bl	800084c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fd70 	bl	8000ba8 <__aeabi_d2f>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a7e      	ldr	r2, [pc, #504]	; (80022c4 <updateADCs+0x38c>)
 80020cc:	6013      	str	r3, [r2, #0]
  // 33A-max (v3 board)

  // ZXCT1085 : 25V/V
  //  2m ohm x 25VV -> 50m V / A
  // 66A-max (v4 board)
  sensor.batt_cs = ((float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1) * 3.3 / 4096) * 20 - 2;  // 2A offset is manual offfset (~0.14V~)
 80020ce:	2101      	movs	r1, #1
 80020d0:	487f      	ldr	r0, [pc, #508]	; (80022d0 <updateADCs+0x398>)
 80020d2:	f002 fed9 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 80020d6:	ee07 0a90 	vmov	s15, r0
 80020da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020de:	ee17 0a90 	vmov	r0, s15
 80020e2:	f7fe fa31 	bl	8000548 <__aeabi_f2d>
 80020e6:	a372      	add	r3, pc, #456	; (adr r3, 80022b0 <updateADCs+0x378>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fa84 	bl	80005f8 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <updateADCs+0x384>)
 80020fe:	f7fe fba5 	bl	800084c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <updateADCs+0x3a0>)
 8002110:	f7fe fa72 	bl	80005f8 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002124:	f7fe f8b0 	bl	8000288 <__aeabi_dsub>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f7fe fd3a 	bl	8000ba8 <__aeabi_d2f>
 8002134:	4603      	mov	r3, r0
 8002136:	4a63      	ldr	r2, [pc, #396]	; (80022c4 <updateADCs+0x38c>)
 8002138:	6113      	str	r3, [r2, #16]
  sensor.temp_fet = (-((float)HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_1) * 3.3 / 4096) + 1.5) * 70 + 25;
 800213a:	2101      	movs	r1, #1
 800213c:	4867      	ldr	r0, [pc, #412]	; (80022dc <updateADCs+0x3a4>)
 800213e:	f002 fea3 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 8002142:	ee07 0a90 	vmov	s15, r0
 8002146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214a:	ee17 0a90 	vmov	r0, s15
 800214e:	f7fe f9fb 	bl	8000548 <__aeabi_f2d>
 8002152:	a357      	add	r3, pc, #348	; (adr r3, 80022b0 <updateADCs+0x378>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	f7fe fa4e 	bl	80005f8 <__aeabi_dmul>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4b54      	ldr	r3, [pc, #336]	; (80022bc <updateADCs+0x384>)
 800216a:	f7fe fb6f 	bl	800084c <__aeabi_ddiv>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	495a      	ldr	r1, [pc, #360]	; (80022e0 <updateADCs+0x3a8>)
 8002178:	f7fe f886 	bl	8000288 <__aeabi_dsub>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	4b56      	ldr	r3, [pc, #344]	; (80022e4 <updateADCs+0x3ac>)
 800218a:	f7fe fa35 	bl	80005f8 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <updateADCs+0x3b0>)
 800219c:	f7fe f876 	bl	800028c <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe fcfe 	bl	8000ba8 <__aeabi_d2f>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a45      	ldr	r2, [pc, #276]	; (80022c4 <updateADCs+0x38c>)
 80021b0:	61d3      	str	r3, [r2, #28]
  sensor.temp_coil_1 = (-((float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_2) * 3.3 / 4096) + 1.5) * 70 + 25;
 80021b2:	2102      	movs	r1, #2
 80021b4:	4846      	ldr	r0, [pc, #280]	; (80022d0 <updateADCs+0x398>)
 80021b6:	f002 fe67 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 80021ba:	ee07 0a90 	vmov	s15, r0
 80021be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c2:	ee17 0a90 	vmov	r0, s15
 80021c6:	f7fe f9bf 	bl	8000548 <__aeabi_f2d>
 80021ca:	a339      	add	r3, pc, #228	; (adr r3, 80022b0 <updateADCs+0x378>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fa12 	bl	80005f8 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <updateADCs+0x384>)
 80021e2:	f7fe fb33 	bl	800084c <__aeabi_ddiv>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	f04f 0000 	mov.w	r0, #0
 80021ee:	493c      	ldr	r1, [pc, #240]	; (80022e0 <updateADCs+0x3a8>)
 80021f0:	f7fe f84a 	bl	8000288 <__aeabi_dsub>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <updateADCs+0x3ac>)
 8002202:	f7fe f9f9 	bl	80005f8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <updateADCs+0x3b0>)
 8002214:	f7fe f83a 	bl	800028c <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f7fe fcc2 	bl	8000ba8 <__aeabi_d2f>
 8002224:	4603      	mov	r3, r0
 8002226:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <updateADCs+0x38c>)
 8002228:	6153      	str	r3, [r2, #20]
  sensor.temp_coil_2 = (-((float)HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_2) * 3.3 / 4096) + 1.5) * 70 + 25;
 800222a:	2102      	movs	r1, #2
 800222c:	482b      	ldr	r0, [pc, #172]	; (80022dc <updateADCs+0x3a4>)
 800222e:	f002 fe2b 	bl	8004e88 <HAL_ADCEx_InjectedGetValue>
 8002232:	ee07 0a90 	vmov	s15, r0
 8002236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223a:	ee17 0a90 	vmov	r0, s15
 800223e:	f7fe f983 	bl	8000548 <__aeabi_f2d>
 8002242:	a31b      	add	r3, pc, #108	; (adr r3, 80022b0 <updateADCs+0x378>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe f9d6 	bl	80005f8 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <updateADCs+0x384>)
 800225a:	f7fe faf7 	bl	800084c <__aeabi_ddiv>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	491e      	ldr	r1, [pc, #120]	; (80022e0 <updateADCs+0x3a8>)
 8002268:	f7fe f80e 	bl	8000288 <__aeabi_dsub>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <updateADCs+0x3ac>)
 800227a:	f7fe f9bd 	bl	80005f8 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <updateADCs+0x3b0>)
 800228c:	f7fd fffe 	bl	800028c <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe fc86 	bl	8000ba8 <__aeabi_d2f>
 800229c:	4603      	mov	r3, r0
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <updateADCs+0x38c>)
 80022a0:	6193      	str	r3, [r2, #24]

  // real : normal -> 1.4V
  // 80~100deg -> 0.7V
  // 0.7V / 50 deg ->

  if (sensor.batt_v < peak.batt_v_min) {
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <updateADCs+0x38c>)
 80022a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80022a8:	e020      	b.n	80022ec <updateADCs+0x3b4>
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	66666666 	.word	0x66666666
 80022b4:	400a6666 	.word	0x400a6666
 80022b8:	200001f4 	.word	0x200001f4
 80022bc:	40b00000 	.word	0x40b00000
 80022c0:	40260000 	.word	0x40260000
 80022c4:	20000488 	.word	0x20000488
 80022c8:	40350000 	.word	0x40350000
 80022cc:	40240000 	.word	0x40240000
 80022d0:	20000244 	.word	0x20000244
 80022d4:	43550000 	.word	0x43550000
 80022d8:	40340000 	.word	0x40340000
 80022dc:	20000294 	.word	0x20000294
 80022e0:	3ff80000 	.word	0x3ff80000
 80022e4:	40518000 	.word	0x40518000
 80022e8:	40390000 	.word	0x40390000
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <updateADCs+0x44c>)
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d503      	bpl.n	8002304 <updateADCs+0x3cc>
    peak.batt_v_min = sensor.batt_v;
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <updateADCs+0x450>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <updateADCs+0x44c>)
 8002302:	6013      	str	r3, [r2, #0]
  }
  if (sensor.batt_v > peak.batt_v_max) {
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <updateADCs+0x450>)
 8002306:	ed93 7a01 	vldr	s14, [r3, #4]
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <updateADCs+0x44c>)
 800230c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	dd03      	ble.n	8002322 <updateADCs+0x3ea>
    peak.batt_v_max = sensor.batt_v;
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <updateADCs+0x450>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a19      	ldr	r2, [pc, #100]	; (8002384 <updateADCs+0x44c>)
 8002320:	6053      	str	r3, [r2, #4]
  }
  if (sensor.batt_cs > peak.batt_cs_max) {
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <updateADCs+0x450>)
 8002324:	ed93 7a04 	vldr	s14, [r3, #16]
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <updateADCs+0x44c>)
 800232a:	edd3 7a04 	vldr	s15, [r3, #16]
 800232e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	dd03      	ble.n	8002340 <updateADCs+0x408>
    peak.batt_cs_max = sensor.batt_cs;
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <updateADCs+0x450>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <updateADCs+0x44c>)
 800233e:	6113      	str	r3, [r2, #16]
  }
  if (sensor.gd_16p < peak.gd_16p_min) {
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <updateADCs+0x450>)
 8002342:	ed93 7a02 	vldr	s14, [r3, #8]
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <updateADCs+0x44c>)
 8002348:	edd3 7a02 	vldr	s15, [r3, #8]
 800234c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	d503      	bpl.n	800235e <updateADCs+0x426>
    peak.gd_16p_min = sensor.gd_16p;
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <updateADCs+0x450>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <updateADCs+0x44c>)
 800235c:	6093      	str	r3, [r2, #8]
  }
  if (sensor.gd_16m > peak.gd_16m_min) {
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <updateADCs+0x450>)
 8002360:	ed93 7a03 	vldr	s14, [r3, #12]
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <updateADCs+0x44c>)
 8002366:	edd3 7a03 	vldr	s15, [r3, #12]
 800236a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	dc00      	bgt.n	8002376 <updateADCs+0x43e>
    peak.gd_16m_min = sensor.gd_16m;
  }
}
 8002374:	e003      	b.n	800237e <updateADCs+0x446>
    peak.gd_16m_min = sensor.gd_16m;
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <updateADCs+0x450>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a02      	ldr	r2, [pc, #8]	; (8002384 <updateADCs+0x44c>)
 800237c:	60d3      	str	r3, [r2, #12]
}
 800237e:	bf00      	nop
 8002380:	bdb0      	pop	{r4, r5, r7, pc}
 8002382:	bf00      	nop
 8002384:	200004a8 	.word	0x200004a8
 8002388:	20000488 	.word	0x20000488

0800238c <protecter>:

#define FET_TEST_TEMP (80)
#define COIL_OVER_HEAT_TEMP (80)

void protecter(void)
{
 800238c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002390:	b08a      	sub	sp, #40	; 0x28
 8002392:	af08      	add	r7, sp, #32
  static uint16_t pre_sys_error = NONE;
  if (sensor.batt_v < 18 && stat.power_enabled) {
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <protecter+0x124>)
 8002396:	edd3 7a01 	vldr	s15, [r3, #4]
 800239a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 800239e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a6:	d51a      	bpl.n	80023de <protecter+0x52>
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <protecter+0x128>)
 80023aa:	7b1b      	ldrb	r3, [r3, #12]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <protecter+0x52>
    stat.error |= UNDER_VOLTAGE;
 80023b2:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <protecter+0x128>)
 80023b4:	89db      	ldrh	r3, [r3, #14]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <protecter+0x128>)
 80023c0:	81da      	strh	r2, [r3, #14]
    stat.error_value = sensor.batt_v;
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <protecter+0x124>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <protecter+0x128>)
 80023c8:	6113      	str	r3, [r2, #16]
    if (pre_sys_error != stat.error) {
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <protecter+0x128>)
 80023cc:	89db      	ldrh	r3, [r3, #14]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <protecter+0x12c>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d002      	beq.n	80023de <protecter+0x52>
      p("\n\n[ERR] UNDER_VOLTAGE\n\n");
 80023d8:	4838      	ldr	r0, [pc, #224]	; (80024bc <protecter+0x130>)
 80023da:	f002 f8fb 	bl	80045d4 <p>
    }
  }
  if (sensor.batt_v > 35) {
 80023de:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <protecter+0x124>)
 80023e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80023e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80024c0 <protecter+0x134>
 80023e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f0:	dd15      	ble.n	800241e <protecter+0x92>
    stat.error |= OVER_VOLTAGE;
 80023f2:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <protecter+0x128>)
 80023f4:	89db      	ldrh	r3, [r3, #14]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <protecter+0x128>)
 8002400:	81da      	strh	r2, [r3, #14]
    stat.error_value = sensor.batt_v;
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <protecter+0x124>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <protecter+0x128>)
 8002408:	6113      	str	r3, [r2, #16]
    if (pre_sys_error != stat.error) {
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <protecter+0x128>)
 800240c:	89db      	ldrh	r3, [r3, #14]
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <protecter+0x12c>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d002      	beq.n	800241e <protecter+0x92>
      p("\n\n[ERR] OVER_VOLTAGE\n\n");
 8002418:	482a      	ldr	r0, [pc, #168]	; (80024c4 <protecter+0x138>)
 800241a:	f002 f8db 	bl	80045d4 <p>
    }
  }
  if (sensor.batt_cs > 30) {
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <protecter+0x124>)
 8002420:	edd3 7a04 	vldr	s15, [r3, #16]
 8002424:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	dd15      	ble.n	800245e <protecter+0xd2>
    stat.error |= SHORT_CURCUIT;
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <protecter+0x128>)
 8002434:	89db      	ldrh	r3, [r3, #14]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <protecter+0x128>)
 8002440:	81da      	strh	r2, [r3, #14]
    stat.error_value = sensor.batt_cs;
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <protecter+0x124>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <protecter+0x128>)
 8002448:	6113      	str	r3, [r2, #16]
    if (pre_sys_error != stat.error) {
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <protecter+0x128>)
 800244c:	89db      	ldrh	r3, [r3, #14]
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <protecter+0x12c>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d002      	beq.n	800245e <protecter+0xd2>
      p("\n\n[ERR] SHORT_CURCUIT\n\n");
 8002458:	481b      	ldr	r0, [pc, #108]	; (80024c8 <protecter+0x13c>)
 800245a:	f002 f8bb 	bl	80045d4 <p>
    }
  }
  if (stat.boost_cnt > 10) {
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <protecter+0x128>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b0a      	cmp	r3, #10
 8002464:	dd34      	ble.n	80024d0 <protecter+0x144>
    if (sensor.batt_cs > 25) {
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <protecter+0x124>)
 8002468:	edd3 7a04 	vldr	s15, [r3, #16]
 800246c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	dd4d      	ble.n	8002516 <protecter+0x18a>
      stat.error |= OVER_CURRENT;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <protecter+0x128>)
 800247c:	89db      	ldrh	r3, [r3, #14]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <protecter+0x128>)
 8002488:	81da      	strh	r2, [r3, #14]
      stat.error_value = sensor.batt_cs;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <protecter+0x124>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <protecter+0x128>)
 8002490:	6113      	str	r3, [r2, #16]
      if (pre_sys_error != stat.error) {
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <protecter+0x128>)
 8002494:	89db      	ldrh	r3, [r3, #14]
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <protecter+0x12c>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d03a      	beq.n	8002516 <protecter+0x18a>
        p("\n\n[ERR] OVER_CURRENT cnt %d\n\n", stat.boost_cnt);
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <protecter+0x128>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4809      	ldr	r0, [pc, #36]	; (80024cc <protecter+0x140>)
 80024a8:	f002 f894 	bl	80045d4 <p>
 80024ac:	e033      	b.n	8002516 <protecter+0x18a>
 80024ae:	bf00      	nop
 80024b0:	20000488 	.word	0x20000488
 80024b4:	20000464 	.word	0x20000464
 80024b8:	200004bc 	.word	0x200004bc
 80024bc:	0800e724 	.word	0x0800e724
 80024c0:	420c0000 	.word	0x420c0000
 80024c4:	0800e73c 	.word	0x0800e73c
 80024c8:	0800e754 	.word	0x0800e754
 80024cc:	0800e76c 	.word	0x0800e76c
      }
    }
  } else {
    if (sensor.batt_cs > 12) {
 80024d0:	4b57      	ldr	r3, [pc, #348]	; (8002630 <protecter+0x2a4>)
 80024d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80024d6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80024da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	dd18      	ble.n	8002516 <protecter+0x18a>
      stat.error |= OVER_CURRENT;
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <protecter+0x2a8>)
 80024e6:	89db      	ldrh	r3, [r3, #14]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <protecter+0x2a8>)
 80024f2:	81da      	strh	r2, [r3, #14]
      stat.error_value = sensor.batt_cs;
 80024f4:	4b4e      	ldr	r3, [pc, #312]	; (8002630 <protecter+0x2a4>)
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4a4e      	ldr	r2, [pc, #312]	; (8002634 <protecter+0x2a8>)
 80024fa:	6113      	str	r3, [r2, #16]
      if (pre_sys_error != stat.error) {
 80024fc:	4b4d      	ldr	r3, [pc, #308]	; (8002634 <protecter+0x2a8>)
 80024fe:	89db      	ldrh	r3, [r3, #14]
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <protecter+0x2ac>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d005      	beq.n	8002516 <protecter+0x18a>
        p("\n\n[ERR] OVER_CURRENT %d\n\n", stat.boost_cnt);
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <protecter+0x2a8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4619      	mov	r1, r3
 8002510:	484a      	ldr	r0, [pc, #296]	; (800263c <protecter+0x2b0>)
 8002512:	f002 f85f 	bl	80045d4 <p>
      }
    }
  }
  if (sensor.gd_16p < 10) {
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <protecter+0x2a4>)
 8002518:	edd3 7a02 	vldr	s15, [r3, #8]
 800251c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	d515      	bpl.n	8002556 <protecter+0x1ca>
    stat.error |= GD_POWER_FAIL;
 800252a:	4b42      	ldr	r3, [pc, #264]	; (8002634 <protecter+0x2a8>)
 800252c:	89db      	ldrh	r3, [r3, #14]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <protecter+0x2a8>)
 8002538:	81da      	strh	r2, [r3, #14]
    stat.error_value = sensor.gd_16p;
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <protecter+0x2a4>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a3d      	ldr	r2, [pc, #244]	; (8002634 <protecter+0x2a8>)
 8002540:	6113      	str	r3, [r2, #16]
    if (pre_sys_error != stat.error) {
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <protecter+0x2a8>)
 8002544:	89db      	ldrh	r3, [r3, #14]
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <protecter+0x2ac>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d002      	beq.n	8002556 <protecter+0x1ca>
      p("\n\n[ERR] GD_POWER_FAIL P\n\n");
 8002550:	483b      	ldr	r0, [pc, #236]	; (8002640 <protecter+0x2b4>)
 8002552:	f002 f83f 	bl	80045d4 <p>
    }
  }
  if (sensor.gd_16m > -5) {
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <protecter+0x2a4>)
 8002558:	edd3 7a03 	vldr	s15, [r3, #12]
 800255c:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002568:	dd15      	ble.n	8002596 <protecter+0x20a>
    stat.error |= GD_POWER_FAIL;
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <protecter+0x2a8>)
 800256c:	89db      	ldrh	r3, [r3, #14]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002574:	b29a      	uxth	r2, r3
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <protecter+0x2a8>)
 8002578:	81da      	strh	r2, [r3, #14]
    stat.error_value = sensor.gd_16m;
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <protecter+0x2a4>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4a2d      	ldr	r2, [pc, #180]	; (8002634 <protecter+0x2a8>)
 8002580:	6113      	str	r3, [r2, #16]
    if (pre_sys_error != stat.error) {
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <protecter+0x2a8>)
 8002584:	89db      	ldrh	r3, [r3, #14]
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <protecter+0x2ac>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d002      	beq.n	8002596 <protecter+0x20a>
      p("\n\n[ERR] GD_POWER_FAIL M\n\n");
 8002590:	482c      	ldr	r0, [pc, #176]	; (8002644 <protecter+0x2b8>)
 8002592:	f002 f81f 	bl	80045d4 <p>
    }
  }

  if (sensor.boost_v > 460) {
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <protecter+0x2a4>)
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002648 <protecter+0x2bc>
 80025a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dd15      	ble.n	80025d6 <protecter+0x24a>
    stat.error |= NO_CAP;
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <protecter+0x2a8>)
 80025ac:	89db      	ldrh	r3, [r3, #14]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <protecter+0x2a8>)
 80025b8:	81da      	strh	r2, [r3, #14]
    stat.error_value = sensor.boost_v;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <protecter+0x2a4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <protecter+0x2a8>)
 80025c0:	6113      	str	r3, [r2, #16]
    if (pre_sys_error != stat.error) {
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <protecter+0x2a8>)
 80025c4:	89db      	ldrh	r3, [r3, #14]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <protecter+0x2ac>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d002      	beq.n	80025d6 <protecter+0x24a>
      p("\n\n[ERR] NO_CAP\n\n");
 80025d0:	481e      	ldr	r0, [pc, #120]	; (800264c <protecter+0x2c0>)
 80025d2:	f001 ffff 	bl	80045d4 <p>
    }
  }

  if (sensor.temp_coil_1 > COIL_OVER_HEAT_TEMP || sensor.temp_coil_2 > COIL_OVER_HEAT_TEMP) {
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <protecter+0x2a4>)
 80025d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80025dc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002650 <protecter+0x2c4>
 80025e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	dc09      	bgt.n	80025fe <protecter+0x272>
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <protecter+0x2a4>)
 80025ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80025f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002650 <protecter+0x2c4>
 80025f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dd38      	ble.n	8002670 <protecter+0x2e4>
    stat.error |= COIL_OVER_HEAT;
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <protecter+0x2a8>)
 8002600:	89db      	ldrh	r3, [r3, #14]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <protecter+0x2a8>)
 800260c:	81da      	strh	r2, [r3, #14]
    if (sensor.temp_coil_1 > sensor.temp_coil_2) {
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <protecter+0x2a4>)
 8002610:	ed93 7a05 	vldr	s14, [r3, #20]
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <protecter+0x2a4>)
 8002616:	edd3 7a06 	vldr	s15, [r3, #24]
 800261a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	dd17      	ble.n	8002654 <protecter+0x2c8>
      stat.error_value = sensor.temp_coil_1;
 8002624:	4b02      	ldr	r3, [pc, #8]	; (8002630 <protecter+0x2a4>)
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4a02      	ldr	r2, [pc, #8]	; (8002634 <protecter+0x2a8>)
 800262a:	6113      	str	r3, [r2, #16]
 800262c:	e016      	b.n	800265c <protecter+0x2d0>
 800262e:	bf00      	nop
 8002630:	20000488 	.word	0x20000488
 8002634:	20000464 	.word	0x20000464
 8002638:	200004bc 	.word	0x200004bc
 800263c:	0800e78c 	.word	0x0800e78c
 8002640:	0800e7a8 	.word	0x0800e7a8
 8002644:	0800e7c4 	.word	0x0800e7c4
 8002648:	43e60000 	.word	0x43e60000
 800264c:	0800e7e0 	.word	0x0800e7e0
 8002650:	42a00000 	.word	0x42a00000
    } else {
      stat.error_value = sensor.temp_coil_2;
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <protecter+0x418>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a53      	ldr	r2, [pc, #332]	; (80027a8 <protecter+0x41c>)
 800265a:	6113      	str	r3, [r2, #16]
    }
    if (pre_sys_error != stat.error) {
 800265c:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <protecter+0x41c>)
 800265e:	89db      	ldrh	r3, [r3, #14]
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b52      	ldr	r3, [pc, #328]	; (80027ac <protecter+0x420>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d002      	beq.n	8002670 <protecter+0x2e4>
      p("\n\n[ERR] COIL_OVER_HEAT\n\n");
 800266a:	4851      	ldr	r0, [pc, #324]	; (80027b0 <protecter+0x424>)
 800266c:	f001 ffb2 	bl	80045d4 <p>
    }
  }

  if (sensor.temp_fet > FET_TEST_TEMP) {
 8002670:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <protecter+0x418>)
 8002672:	edd3 7a07 	vldr	s15, [r3, #28]
 8002676:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80027b4 <protecter+0x428>
 800267a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	dd15      	ble.n	80026b0 <protecter+0x324>
    stat.error |= FET_OVER_HEAT;
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <protecter+0x41c>)
 8002686:	89db      	ldrh	r3, [r3, #14]
 8002688:	b29b      	uxth	r3, r3
 800268a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <protecter+0x41c>)
 8002692:	81da      	strh	r2, [r3, #14]
    stat.error_value = sensor.temp_fet;
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <protecter+0x418>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a43      	ldr	r2, [pc, #268]	; (80027a8 <protecter+0x41c>)
 800269a:	6113      	str	r3, [r2, #16]
    if (pre_sys_error != stat.error) {
 800269c:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <protecter+0x41c>)
 800269e:	89db      	ldrh	r3, [r3, #14]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <protecter+0x420>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d002      	beq.n	80026b0 <protecter+0x324>
      p("\n\n[ERR] FET_OVER_HEAT\n\n");
 80026aa:	4843      	ldr	r0, [pc, #268]	; (80027b8 <protecter+0x42c>)
 80026ac:	f001 ff92 	bl	80045d4 <p>
    }
  }

  if (stat.error && stat.error != pre_sys_error) {
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <protecter+0x41c>)
 80026b2:	89db      	ldrh	r3, [r3, #14]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06a      	beq.n	8002790 <protecter+0x404>
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <protecter+0x41c>)
 80026bc:	89db      	ldrh	r3, [r3, #14]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <protecter+0x420>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d063      	beq.n	8002790 <protecter+0x404>
    powerOutputDisable();  // output disable
 80026c8:	f7ff fa56 	bl	8001b78 <powerOutputDisable>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <protecter+0x430>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80026d4:	4b39      	ldr	r3, [pc, #228]	; (80027bc <protecter+0x430>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80026dc:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <protecter+0x434>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
    sendCanError(stat.error, stat.error_value);
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <protecter+0x41c>)
 80026e6:	89db      	ldrh	r3, [r3, #14]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <protecter+0x41c>)
 80026ec:	edd2 7a04 	vldr	s15, [r2, #16]
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f8d3 	bl	80018a0 <sendCanError>

    p("[ERR] power line error!!! / battv %6.2f battcs %6.3f / GDp %+5.2f GDm %+5.2f boost %6.2f\n", sensor.batt_v, sensor.batt_cs, sensor.gd_16p, sensor.gd_16m, sensor.boost_v);
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <protecter+0x418>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff22 	bl	8000548 <__aeabi_f2d>
 8002704:	e9c7 0100 	strd	r0, r1, [r7]
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <protecter+0x418>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff1b 	bl	8000548 <__aeabi_f2d>
 8002712:	4604      	mov	r4, r0
 8002714:	460d      	mov	r5, r1
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <protecter+0x418>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff14 	bl	8000548 <__aeabi_f2d>
 8002720:	4680      	mov	r8, r0
 8002722:	4689      	mov	r9, r1
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <protecter+0x418>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd ff0d 	bl	8000548 <__aeabi_f2d>
 800272e:	4682      	mov	sl, r0
 8002730:	468b      	mov	fp, r1
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <protecter+0x418>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff06 	bl	8000548 <__aeabi_f2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002744:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002748:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800274c:	e9cd 4500 	strd	r4, r5, [sp]
 8002750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002754:	481b      	ldr	r0, [pc, #108]	; (80027c4 <protecter+0x438>)
 8002756:	f001 ff3d 	bl	80045d4 <p>
    if (stat.error == UNDER_VOLTAGE) {
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <protecter+0x41c>)
 800275c:	89db      	ldrh	r3, [r3, #14]
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10f      	bne.n	8002784 <protecter+0x3f8>
      // discharge!!
      p("DISCHARGE!!!\n");
 8002764:	4818      	ldr	r0, [pc, #96]	; (80027c8 <protecter+0x43c>)
 8002766:	f001 ff35 	bl	80045d4 <p>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, TIM_KICK_PERI / 20);
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <protecter+0x430>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2264      	movs	r2, #100	; 0x64
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, TIM_KICK_PERI / 20);
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <protecter+0x430>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2264      	movs	r2, #100	; 0x64
 8002778:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(1000);
 800277a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800277e:	f002 f869 	bl	8004854 <HAL_Delay>
 8002782:	e005      	b.n	8002790 <protecter+0x404>
    } else {
      stat.kick_cnt = 0;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <protecter+0x41c>)
 8002786:	2200      	movs	r2, #0
 8002788:	605a      	str	r2, [r3, #4]
      stat.boost_cnt = 0;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <protecter+0x41c>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
    }
  }
  pre_sys_error = stat.error;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <protecter+0x41c>)
 8002792:	89db      	ldrh	r3, [r3, #14]
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <protecter+0x420>)
 8002798:	801a      	strh	r2, [r3, #0]
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a4:	20000488 	.word	0x20000488
 80027a8:	20000464 	.word	0x20000464
 80027ac:	200004bc 	.word	0x200004bc
 80027b0:	0800e7f4 	.word	0x0800e7f4
 80027b4:	42a00000 	.word	0x42a00000
 80027b8:	0800e810 	.word	0x0800e810
 80027bc:	200005d0 	.word	0x200005d0
 80027c0:	20000584 	.word	0x20000584
 80027c4:	0800e828 	.word	0x0800e828
 80027c8:	0800e884 	.word	0x0800e884

080027cc <boostControl>:

void boostControl(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af02      	add	r7, sp, #8
  static int temp_pwm_autoreload = 1000, pre_pwm_autoreload = 0;

  if (sensor.boost_v < power_cmd.target_voltage && stat.boost_cnt > 0) {
 80027d2:	4b5a      	ldr	r3, [pc, #360]	; (800293c <boostControl+0x170>)
 80027d4:	ed93 7a00 	vldr	s14, [r3]
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <boostControl+0x174>)
 80027da:	edd3 7a01 	vldr	s15, [r3, #4]
 80027de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	f140 8083 	bpl.w	80028f0 <boostControl+0x124>
 80027ea:	4b56      	ldr	r3, [pc, #344]	; (8002944 <boostControl+0x178>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	dd7e      	ble.n	80028f0 <boostControl+0x124>
    stat.boost_cnt--;
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <boostControl+0x178>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <boostControl+0x178>)
 80027fa:	6093      	str	r3, [r2, #8]
    if (sensor.boost_v < 50) {
 80027fc:	4b4f      	ldr	r3, [pc, #316]	; (800293c <boostControl+0x170>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002948 <boostControl+0x17c>
 8002806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d504      	bpl.n	800281a <boostControl+0x4e>
      temp_pwm_autoreload = PWM_CNT * 10;
 8002810:	4b4e      	ldr	r3, [pc, #312]	; (800294c <boostControl+0x180>)
 8002812:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e03f      	b.n	800289a <boostControl+0xce>
    } else if (sensor.boost_v < 100) {
 800281a:	4b48      	ldr	r3, [pc, #288]	; (800293c <boostControl+0x170>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002950 <boostControl+0x184>
 8002824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	d504      	bpl.n	8002838 <boostControl+0x6c>
      temp_pwm_autoreload = PWM_CNT * 3;
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <boostControl+0x180>)
 8002830:	f640 0234 	movw	r2, #2100	; 0x834
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e030      	b.n	800289a <boostControl+0xce>
    } else if (sensor.boost_v < 200) {
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <boostControl+0x170>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002954 <boostControl+0x188>
 8002842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	d504      	bpl.n	8002856 <boostControl+0x8a>
      temp_pwm_autoreload = PWM_CNT * 1.5;
 800284c:	4b3f      	ldr	r3, [pc, #252]	; (800294c <boostControl+0x180>)
 800284e:	f240 421a 	movw	r2, #1050	; 0x41a
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e021      	b.n	800289a <boostControl+0xce>
    } else if (sensor.boost_v < 300) {
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <boostControl+0x170>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002958 <boostControl+0x18c>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	d504      	bpl.n	8002874 <boostControl+0xa8>
      temp_pwm_autoreload = PWM_CNT * 1.4;
 800286a:	4b38      	ldr	r3, [pc, #224]	; (800294c <boostControl+0x180>)
 800286c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e012      	b.n	800289a <boostControl+0xce>
    } else if (sensor.boost_v < 400) {
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <boostControl+0x170>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800295c <boostControl+0x190>
 800287e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	d504      	bpl.n	8002892 <boostControl+0xc6>
      temp_pwm_autoreload = PWM_CNT * 1.3;
 8002888:	4b30      	ldr	r3, [pc, #192]	; (800294c <boostControl+0x180>)
 800288a:	f240 328e 	movw	r2, #910	; 0x38e
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e003      	b.n	800289a <boostControl+0xce>
    } else {
      temp_pwm_autoreload = PWM_CNT * 1.25;
 8002892:	4b2e      	ldr	r3, [pc, #184]	; (800294c <boostControl+0x180>)
 8002894:	f240 326b 	movw	r2, #875	; 0x36b
 8002898:	601a      	str	r2, [r3, #0]
    }
    if (pre_pwm_autoreload != temp_pwm_autoreload) {
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <boostControl+0x194>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b2b      	ldr	r3, [pc, #172]	; (800294c <boostControl+0x180>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d00d      	beq.n	80028c2 <boostControl+0xf6>
      htim2.Instance->CNT = 0;
 80028a6:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <boostControl+0x198>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_TIM_SET_AUTORELOAD(&htim2, temp_pwm_autoreload);
 80028ae:	4b27      	ldr	r3, [pc, #156]	; (800294c <boostControl+0x180>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <boostControl+0x198>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <boostControl+0x180>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <boostControl+0x198>)
 80028c0:	60da      	str	r2, [r3, #12]
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM_CNT);
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <boostControl+0x198>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
    pre_pwm_autoreload = temp_pwm_autoreload;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <boostControl+0x180>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a23      	ldr	r2, [pc, #140]	; (8002960 <boostControl+0x194>)
 80028d2:	6013      	str	r3, [r2, #0]

    setChargingLedHigh();
 80028d4:	f7ff f9d0 	bl	8001c78 <setChargingLedHigh>
    if (stat.boost_cnt == 0) {
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <boostControl+0x178>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d129      	bne.n	8002934 <boostControl+0x168>
      p("[ERR] boost timeout!!\n");
 80028e0:	4821      	ldr	r0, [pc, #132]	; (8002968 <boostControl+0x19c>)
 80028e2:	f001 fe77 	bl	80045d4 <p>
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <boostControl+0x198>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
    if (stat.boost_cnt == 0) {
 80028ee:	e021      	b.n	8002934 <boostControl+0x168>
    }
  } else {
    if (stat.boost_cnt != 0) {
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <boostControl+0x178>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <boostControl+0x15a>
      if (stat.boost_cnt < 900) {
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <boostControl+0x178>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002900:	da0e      	bge.n	8002920 <boostControl+0x154>
        p("boost end!! / %4.2f V / %3d\n", sensor.boost_v, 1000 - stat.boost_cnt);
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <boostControl+0x170>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fe1e 	bl	8000548 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <boostControl+0x178>)
 8002912:	6889      	ldr	r1, [r1, #8]
 8002914:	f5c1 717a 	rsb	r1, r1, #1000	; 0x3e8
 8002918:	9100      	str	r1, [sp, #0]
 800291a:	4814      	ldr	r0, [pc, #80]	; (800296c <boostControl+0x1a0>)
 800291c:	f001 fe5a 	bl	80045d4 <p>
      }
      stat.boost_cnt = 0;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <boostControl+0x178>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <boostControl+0x198>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
    setChargingLedLow();
 800292e:	f7ff f9af 	bl	8001c90 <setChargingLedLow>
  }
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000488 	.word	0x20000488
 8002940:	20000440 	.word	0x20000440
 8002944:	20000464 	.word	0x20000464
 8002948:	42480000 	.word	0x42480000
 800294c:	20000000 	.word	0x20000000
 8002950:	42c80000 	.word	0x42c80000
 8002954:	43480000 	.word	0x43480000
 8002958:	43960000 	.word	0x43960000
 800295c:	43c80000 	.word	0x43c80000
 8002960:	200004c0 	.word	0x200004c0
 8002964:	20000584 	.word	0x20000584
 8002968:	0800e894 	.word	0x0800e894
 800296c:	0800e8ac 	.word	0x0800e8ac

08002970 <kickControl>:

void kickControl(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  if (stat.kick_cnt > 0) {
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <kickControl+0xa4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d040      	beq.n	80029fe <kickControl+0x8e>
    // kick!!!
    if (power_cmd.kick_chip_selected) {
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <kickControl+0xa8>)
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <kickControl+0x2a>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, power_cmd.kick_power);  // chip
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <kickControl+0xa8>)
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <kickControl+0xac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <kickControl+0xac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
 8002998:	e008      	b.n	80029ac <kickControl+0x3c>
    } else {
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, power_cmd.kick_power);  // straight
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <kickControl+0xa8>)
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <kickControl+0xac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <kickControl+0xac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
    stat.kick_cnt--;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <kickControl+0xa4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <kickControl+0xa4>)
 80029b4:	6053      	str	r3, [r2, #4]

    if (sensor.boost_v < 30) {
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <kickControl+0xb0>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80029c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c8:	d505      	bpl.n	80029d6 <kickControl+0x66>
      stat.kick_cnt = 0;
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <kickControl+0xa4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
      p("complete discharge!!\n");
 80029d0:	4814      	ldr	r0, [pc, #80]	; (8002a24 <kickControl+0xb4>)
 80029d2:	f001 fdff 	bl	80045d4 <p>
    }

    if (stat.kick_cnt == 0) {
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <kickControl+0xa4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d117      	bne.n	8002a0e <kickControl+0x9e>
      // p("kick end!!\n");
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <kickControl+0xac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <kickControl+0xac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
      if (power_cmd.charge_enabled) {
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <kickControl+0xa8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <kickControl+0x9e>
        // p("continue charge!!\n");
        startCharge();
 80029f8:	f7ff f9d2 	bl	8001da0 <startCharge>
  } else {
    // idol
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
  }
}
 80029fc:	e007      	b.n	8002a0e <kickControl+0x9e>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <kickControl+0xac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <kickControl+0xac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000464 	.word	0x20000464
 8002a18:	20000440 	.word	0x20000440
 8002a1c:	200005d0 	.word	0x200005d0
 8002a20:	20000488 	.word	0x20000488
 8002a24:	0800e8cc 	.word	0x0800e8cc

08002a28 <userInterface>:

void userInterface(void)
{
 8002a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	b097      	sub	sp, #92	; 0x5c
 8002a2e:	af0e      	add	r7, sp, #56	; 0x38
  static bool pre_sw_pushed[2], user_control_chip_select = false;
  static uint32_t print_idx = 0;

  // User SW control
  if (isPushedUserSw1()) {
 8002a30:	f7ff f93a 	bl	8001ca8 <isPushedUserSw1>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d02e      	beq.n	8002a98 <userInterface+0x70>
    if (!pre_sw_pushed[0] && power_cmd.sw_enable_cnt == 0) {
 8002a3a:	4b8c      	ldr	r3, [pc, #560]	; (8002c6c <userInterface+0x244>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d02a      	beq.n	8002a9e <userInterface+0x76>
 8002a48:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <userInterface+0x248>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d126      	bne.n	8002a9e <userInterface+0x76>
      pre_sw_pushed[0] = true;
 8002a50:	4b86      	ldr	r3, [pc, #536]	; (8002c6c <userInterface+0x244>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
      p("[USR] kick start!! : chip %d\n", user_control_chip_select);
 8002a56:	4b87      	ldr	r3, [pc, #540]	; (8002c74 <userInterface+0x24c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4886      	ldr	r0, [pc, #536]	; (8002c78 <userInterface+0x250>)
 8002a5e:	f001 fdb9 	bl	80045d4 <p>
      startKick(100);
 8002a62:	2064      	movs	r0, #100	; 0x64
 8002a64:	f7ff f96c 	bl	8001d40 <startKick>
      power_cmd.sw_enable_cnt = 1000;
 8002a68:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <userInterface+0x248>)
 8002a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a6e:	60da      	str	r2, [r3, #12]
      power_cmd.kick_chip_selected = user_control_chip_select;
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <userInterface+0x24c>)
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	4b7e      	ldr	r3, [pc, #504]	; (8002c70 <userInterface+0x248>)
 8002a76:	705a      	strb	r2, [r3, #1]
      user_control_chip_select = !user_control_chip_select;
 8002a78:	4b7e      	ldr	r3, [pc, #504]	; (8002c74 <userInterface+0x24c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <userInterface+0x24c>)
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e002      	b.n	8002a9e <userInterface+0x76>
    }
  } else {
    pre_sw_pushed[0] = false;
 8002a98:	4b74      	ldr	r3, [pc, #464]	; (8002c6c <userInterface+0x244>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
  }
  if (isPushedUserSw2()) {
 8002a9e:	f7ff f915 	bl	8001ccc <isPushedUserSw2>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <userInterface+0xa8>
    if (!pre_sw_pushed[1]) {
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <userInterface+0x244>)
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00f      	beq.n	8002ad6 <userInterface+0xae>
      pre_sw_pushed[1] = true;
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <userInterface+0x244>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	705a      	strb	r2, [r3, #1]
      p("[USR] boost start!!\n");
 8002abc:	486f      	ldr	r0, [pc, #444]	; (8002c7c <userInterface+0x254>)
 8002abe:	f001 fd89 	bl	80045d4 <p>
      startCharge();
 8002ac2:	f7ff f96d 	bl	8001da0 <startCharge>
      power_cmd.sw_enable_cnt = 1000;
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <userInterface+0x248>)
 8002ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	e002      	b.n	8002ad6 <userInterface+0xae>
    }
  } else {
    pre_sw_pushed[1] = false;
 8002ad0:	4b66      	ldr	r3, [pc, #408]	; (8002c6c <userInterface+0x244>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	705a      	strb	r2, [r3, #1]
  }

  stat.print_loop_cnt++;
 8002ad6:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <userInterface+0x258>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3301      	adds	r3, #1
 8002adc:	4a68      	ldr	r2, [pc, #416]	; (8002c80 <userInterface+0x258>)
 8002ade:	6013      	str	r3, [r2, #0]
  // debug print
  if (stat.print_loop_cnt >= 50) {
 8002ae0:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <userInterface+0x258>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b31      	cmp	r3, #49	; 0x31
 8002ae6:	f240 817c 	bls.w	8002de2 <userInterface+0x3ba>
    stat.print_loop_cnt = 0;
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <userInterface+0x258>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

    if (uart1_rx_cnt) {
 8002af0:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <userInterface+0x25c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <userInterface+0xe0>
      uart1_rx_cnt = 0;
 8002af8:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <userInterface+0x25c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
      print_idx++;
 8002afe:	4b62      	ldr	r3, [pc, #392]	; (8002c88 <userInterface+0x260>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	4a60      	ldr	r2, [pc, #384]	; (8002c88 <userInterface+0x260>)
 8002b06:	6013      	str	r3, [r2, #0]
    }

    if (stat.error) {
 8002b08:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <userInterface+0x258>)
 8002b0a:	89db      	ldrh	r3, [r3, #14]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <userInterface+0xfa>
      p("E:0x%04x ", stat.error);
 8002b12:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <userInterface+0x258>)
 8002b14:	89db      	ldrh	r3, [r3, #14]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	485c      	ldr	r0, [pc, #368]	; (8002c8c <userInterface+0x264>)
 8002b1c:	f001 fd5a 	bl	80045d4 <p>
 8002b20:	e002      	b.n	8002b28 <userInterface+0x100>
    } else {
      p("         ");
 8002b22:	485b      	ldr	r0, [pc, #364]	; (8002c90 <userInterface+0x268>)
 8002b24:	f001 fd56 	bl	80045d4 <p>
    }
    switch (print_idx) {
 8002b28:	4b57      	ldr	r3, [pc, #348]	; (8002c88 <userInterface+0x260>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <userInterface+0x110>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	f000 80b9 	beq.w	8002ca8 <userInterface+0x280>
 8002b36:	e139      	b.n	8002dac <userInterface+0x384>
      case 0:
        p("PW %3d BV %3.0f, CK %d, Ch %d / TargetV %3.0f,", power_cmd.sw_enable_cnt, power_cmd.target_voltage, power_cmd.kick_chip_selected, power_cmd.charge_enabled, power_cmd.target_voltage);
 8002b38:	4b4d      	ldr	r3, [pc, #308]	; (8002c70 <userInterface+0x248>)
 8002b3a:	68de      	ldr	r6, [r3, #12]
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <userInterface+0x248>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fd01 	bl	8000548 <__aeabi_f2d>
 8002b46:	4604      	mov	r4, r0
 8002b48:	460d      	mov	r5, r1
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <userInterface+0x248>)
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <userInterface+0x248>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <userInterface+0x248>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd fcf2 	bl	8000548 <__aeabi_f2d>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	9201      	str	r2, [sp, #4]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4622      	mov	r2, r4
 8002b76:	462b      	mov	r3, r5
 8002b78:	4631      	mov	r1, r6
 8002b7a:	4846      	ldr	r0, [pc, #280]	; (8002c94 <userInterface+0x26c>)
 8002b7c:	f001 fd2a 	bl	80045d4 <p>

        p("BattV %3.1f, BoostV %3.0f, BattCS %+5.1f fet %2.0f coil1 %2.0f coil2 %2.0f ", sensor.batt_v, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002b80:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <userInterface+0x270>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fcdf 	bl	8000548 <__aeabi_f2d>
 8002b8a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002b8e:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <userInterface+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fcd8 	bl	8000548 <__aeabi_f2d>
 8002b98:	4604      	mov	r4, r0
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <userInterface+0x270>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fcd1 	bl	8000548 <__aeabi_f2d>
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	4689      	mov	r9, r1
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <userInterface+0x270>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fcca 	bl	8000548 <__aeabi_f2d>
 8002bb4:	4682      	mov	sl, r0
 8002bb6:	468b      	mov	fp, r1
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <userInterface+0x270>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcc3 	bl	8000548 <__aeabi_f2d>
 8002bc2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <userInterface+0x270>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fcbc 	bl	8000548 <__aeabi_f2d>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002bd8:	ed97 7b04 	vldr	d7, [r7, #16]
 8002bdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002be0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002be4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002be8:	e9cd 4500 	strd	r4, r5, [sp]
 8002bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf0:	482a      	ldr	r0, [pc, #168]	; (8002c9c <userInterface+0x274>)
 8002bf2:	f001 fcef 	bl	80045d4 <p>
        p("XX %+8.2f YY %+8.2f %6d", get_XX_ADNS3080(), get_YY_ADNS3080(), get_ShutterSpeed_ADNS3080());
 8002bf6:	f7fe fca7 	bl	8001548 <get_XX_ADNS3080>
 8002bfa:	ee10 3a10 	vmov	r3, s0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fca2 	bl	8000548 <__aeabi_f2d>
 8002c04:	4680      	mov	r8, r0
 8002c06:	4689      	mov	r9, r1
 8002c08:	f7fe fcac 	bl	8001564 <get_YY_ADNS3080>
 8002c0c:	ee10 3a10 	vmov	r3, s0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fc99 	bl	8000548 <__aeabi_f2d>
 8002c16:	4604      	mov	r4, r0
 8002c18:	460d      	mov	r5, r1
 8002c1a:	f7fe fc89 	bl	8001530 <get_ShutterSpeed_ADNS3080>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	9302      	str	r3, [sp, #8]
 8002c22:	e9cd 4500 	strd	r4, r5, [sp]
 8002c26:	4642      	mov	r2, r8
 8002c28:	464b      	mov	r3, r9
 8002c2a:	481d      	ldr	r0, [pc, #116]	; (8002ca0 <userInterface+0x278>)
 8002c2c:	f001 fcd2 	bl	80045d4 <p>
        p("loop %4d D x%+3d y%+3d I x%+6d y%+6d Q%3d\n", stat.system_loop_cnt, get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_X_ADNS3080(), get_Y_ADNS3080(), get_Qualty_ADNS3080());
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <userInterface+0x258>)
 8002c32:	695c      	ldr	r4, [r3, #20]
 8002c34:	f7fe fc40 	bl	80014b8 <get_DeltaX_ADNS3080>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4698      	mov	r8, r3
 8002c3c:	f7fe fc48 	bl	80014d0 <get_DeltaY_ADNS3080>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4699      	mov	r9, r3
 8002c44:	f7fe fc5c 	bl	8001500 <get_X_ADNS3080>
 8002c48:	4605      	mov	r5, r0
 8002c4a:	f7fe fc65 	bl	8001518 <get_Y_ADNS3080>
 8002c4e:	4606      	mov	r6, r0
 8002c50:	f7fe fc4a 	bl	80014e8 <get_Qualty_ADNS3080>
 8002c54:	4603      	mov	r3, r0
 8002c56:	9302      	str	r3, [sp, #8]
 8002c58:	9601      	str	r6, [sp, #4]
 8002c5a:	9500      	str	r5, [sp, #0]
 8002c5c:	464b      	mov	r3, r9
 8002c5e:	4642      	mov	r2, r8
 8002c60:	4621      	mov	r1, r4
 8002c62:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <userInterface+0x27c>)
 8002c64:	f001 fcb6 	bl	80045d4 <p>
        break;
 8002c68:	e0a4      	b.n	8002db4 <userInterface+0x38c>
 8002c6a:	bf00      	nop
 8002c6c:	200004c4 	.word	0x200004c4
 8002c70:	20000440 	.word	0x20000440
 8002c74:	200004c6 	.word	0x200004c6
 8002c78:	0800e8e4 	.word	0x0800e8e4
 8002c7c:	0800e904 	.word	0x0800e904
 8002c80:	20000464 	.word	0x20000464
 8002c84:	20000484 	.word	0x20000484
 8002c88:	200004c8 	.word	0x200004c8
 8002c8c:	0800e91c 	.word	0x0800e91c
 8002c90:	0800e928 	.word	0x0800e928
 8002c94:	0800e934 	.word	0x0800e934
 8002c98:	20000488 	.word	0x20000488
 8002c9c:	0800e964 	.word	0x0800e964
 8002ca0:	0800e9b0 	.word	0x0800e9b0
 8002ca4:	0800e9c8 	.word	0x0800e9c8

      case 1:
        //p("Vm %3.1f VM %3.1f CM %3.1f DF %3.1f DC %3.1f", power_cmd.min_v, power_cmd.max_v, power_cmd.max_c, power_cmd.fet_temp, power_cmd.coil_temp);
        p("BattV %3.1f GD-P %+4.1f GD-N %+4.1f BoostV %3.0f BattCS %+5.1f fet %2.0f coil1 %2.0f coil2 %2.0f / ", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002ca8:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <userInterface+0x3e4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc4b 	bl	8000548 <__aeabi_f2d>
 8002cb2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002cb6:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <userInterface+0x3e4>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fc44 	bl	8000548 <__aeabi_f2d>
 8002cc0:	4682      	mov	sl, r0
 8002cc2:	468b      	mov	fp, r1
 8002cc4:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <userInterface+0x3e4>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc3d 	bl	8000548 <__aeabi_f2d>
 8002cce:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002cd2:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <userInterface+0x3e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fc36 	bl	8000548 <__aeabi_f2d>
 8002cdc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <userInterface+0x3e4>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fc2f 	bl	8000548 <__aeabi_f2d>
 8002cea:	e9c7 0100 	strd	r0, r1, [r7]
          sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <userInterface+0x3e4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
        p("BattV %3.1f GD-P %+4.1f GD-N %+4.1f BoostV %3.0f BattCS %+5.1f fet %2.0f coil1 %2.0f coil2 %2.0f / ", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc28 	bl	8000548 <__aeabi_f2d>
 8002cf8:	4680      	mov	r8, r0
 8002cfa:	4689      	mov	r9, r1
          sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <userInterface+0x3e4>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
        p("BattV %3.1f GD-P %+4.1f GD-N %+4.1f BoostV %3.0f BattCS %+5.1f fet %2.0f coil1 %2.0f coil2 %2.0f / ", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc21 	bl	8000548 <__aeabi_f2d>
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
          sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002d0a:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <userInterface+0x3e4>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
        p("BattV %3.1f GD-P %+4.1f GD-N %+4.1f BoostV %3.0f BattCS %+5.1f fet %2.0f coil1 %2.0f coil2 %2.0f / ", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fc1a 	bl	8000548 <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002d1c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002d20:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002d24:	ed97 7b00 	vldr	d7, [r7]
 8002d28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d2c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d34:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d3c:	e9cd ab00 	strd	sl, fp, [sp]
 8002d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d44:	4832      	ldr	r0, [pc, #200]	; (8002e10 <userInterface+0x3e8>)
 8002d46:	f001 fc45 	bl	80045d4 <p>
        p("PEAK BattV-max %3.1f BattV-min %3.1f GD+ min %+4.1f GD- min %+4.1f BattCS %+5.1f \n", peak.batt_v_max, peak.batt_v_min, peak.gd_16p_min, peak.gd_16m_min, peak.batt_cs_max);
 8002d4a:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <userInterface+0x3ec>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbfa 	bl	8000548 <__aeabi_f2d>
 8002d54:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002d58:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <userInterface+0x3ec>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fbf3 	bl	8000548 <__aeabi_f2d>
 8002d62:	4604      	mov	r4, r0
 8002d64:	460d      	mov	r5, r1
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <userInterface+0x3ec>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbec 	bl	8000548 <__aeabi_f2d>
 8002d70:	4680      	mov	r8, r0
 8002d72:	4689      	mov	r9, r1
 8002d74:	4b27      	ldr	r3, [pc, #156]	; (8002e14 <userInterface+0x3ec>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fbe5 	bl	8000548 <__aeabi_f2d>
 8002d7e:	4682      	mov	sl, r0
 8002d80:	468b      	mov	fp, r1
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <userInterface+0x3ec>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbde 	bl	8000548 <__aeabi_f2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002d94:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002d98:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002d9c:	e9cd 4500 	strd	r4, r5, [sp]
 8002da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da4:	481c      	ldr	r0, [pc, #112]	; (8002e18 <userInterface+0x3f0>)
 8002da6:	f001 fc15 	bl	80045d4 <p>
        break;
 8002daa:	e003      	b.n	8002db4 <userInterface+0x38c>

      default:
        print_idx = 0;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <userInterface+0x3f4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
        break;
 8002db2:	bf00      	nop
    }

    if (!stat.power_enabled && stat.error) {
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <userInterface+0x3f8>)
 8002db6:	7b1b      	ldrb	r3, [r3, #12]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00e      	beq.n	8002de2 <userInterface+0x3ba>
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <userInterface+0x3f8>)
 8002dc6:	89db      	ldrh	r3, [r3, #14]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <userInterface+0x3ba>
      p("!! clear Error : %d !!\n", stat.error);
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <userInterface+0x3f8>)
 8002dd0:	89db      	ldrh	r3, [r3, #14]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4813      	ldr	r0, [pc, #76]	; (8002e24 <userInterface+0x3fc>)
 8002dd8:	f001 fbfc 	bl	80045d4 <p>
      stat.error = 0;
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <userInterface+0x3f8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	81da      	strh	r2, [r3, #14]
    }
  }
  // charge-indication
  if (sensor.boost_v > 100) {
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <userInterface+0x3e4>)
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002e28 <userInterface+0x400>
 8002dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	dd02      	ble.n	8002dfc <userInterface+0x3d4>
    setHVWarningLedHigh();
 8002df6:	f7fe ff0f 	bl	8001c18 <setHVWarningLedHigh>
  } else {
    setHVWarningLedLow();
  }
}
 8002dfa:	e001      	b.n	8002e00 <userInterface+0x3d8>
    setHVWarningLedLow();
 8002dfc:	f7fe ff18 	bl	8001c30 <setHVWarningLedLow>
}
 8002e00:	bf00      	nop
 8002e02:	3724      	adds	r7, #36	; 0x24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000488 	.word	0x20000488
 8002e10:	0800e9f4 	.word	0x0800e9f4
 8002e14:	200004a8 	.word	0x200004a8
 8002e18:	0800ea58 	.word	0x0800ea58
 8002e1c:	200004c8 	.word	0x200004c8
 8002e20:	20000464 	.word	0x20000464
 8002e24:	0800eaac 	.word	0x0800eaac
 8002e28:	42c80000 	.word	0x42c80000

08002e2c <canDataSender>:

void canDataSender()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  static uint8_t data_idx = 0;
  data_idx++;
 8002e32:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <canDataSender+0xb4>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <canDataSender+0xb4>)
 8002e3c:	701a      	strb	r2, [r3, #0]
  switch (data_idx) {
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <canDataSender+0xb4>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d842      	bhi.n	8002ece <canDataSender+0xa2>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <canDataSender+0x24>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e61 	.word	0x08002e61
 8002e54:	08002e9f 	.word	0x08002e9f
 8002e58:	08002eaf 	.word	0x08002eaf
 8002e5c:	08002ebf 	.word	0x08002ebf
    case 1:
      sendCanTemp((uint8_t)sensor.temp_fet, (uint8_t)sensor.temp_coil_1, (uint8_t)sensor.temp_coil_2);
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <canDataSender+0xb8>)
 8002e62:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e6e:	793b      	ldrb	r3, [r7, #4]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <canDataSender+0xb8>)
 8002e74:	edd2 7a05 	vldr	s15, [r2, #20]
 8002e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e80:	793a      	ldrb	r2, [r7, #4]
 8002e82:	b2d1      	uxtb	r1, r2
 8002e84:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <canDataSender+0xb8>)
 8002e86:	edd2 7a06 	vldr	s15, [r2, #24]
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e92:	793a      	ldrb	r2, [r7, #4]
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fc9c 	bl	80017d4 <sendCanTemp>
      break;
 8002e9c:	e01b      	b.n	8002ed6 <canDataSender+0xaa>
    case 2:
      sendCanBatteryVoltage(sensor.batt_v);
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <canDataSender+0xb8>)
 8002ea0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea8:	f7fe fd56 	bl	8001958 <sendCanBatteryVoltage>
      break;
 8002eac:	e013      	b.n	8002ed6 <canDataSender+0xaa>
    case 3:
      sendCanKickerVoltage(sensor.boost_v);
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <canDataSender+0xb8>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	f7fe fd5d 	bl	8001976 <sendCanKickerVoltage>
      break;
 8002ebc:	e00b      	b.n	8002ed6 <canDataSender+0xaa>
    case 4:
      sendCanBatteryCurrent(sensor.batt_cs);
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <canDataSender+0xb8>)
 8002ec0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec8:	f7fe fd64 	bl	8001994 <sendCanBatteryCurrent>
      break;
 8002ecc:	e003      	b.n	8002ed6 <canDataSender+0xaa>

    default:
      data_idx = 0;
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <canDataSender+0xb4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
      break;
 8002ed4:	bf00      	nop
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200004cc 	.word	0x200004cc
 8002ee4:	20000488 	.word	0x20000488

08002ee8 <connectionTest>:

void connectionTest(void)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b098      	sub	sp, #96	; 0x60
 8002eee:	af0e      	add	r7, sp, #56	; 0x38
  while (1) {
    updateADCs();
 8002ef0:	f7ff f822 	bl	8001f38 <updateADCs>
    HAL_Delay(100);
 8002ef4:	2064      	movs	r0, #100	; 0x64
 8002ef6:	f001 fcad 	bl	8004854 <HAL_Delay>
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002efa:	4bb3      	ldr	r3, [pc, #716]	; (80031c8 <connectionTest+0x2e0>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb22 	bl	8000548 <__aeabi_f2d>
 8002f04:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002f08:	4baf      	ldr	r3, [pc, #700]	; (80031c8 <connectionTest+0x2e0>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fb1b 	bl	8000548 <__aeabi_f2d>
 8002f12:	4682      	mov	sl, r0
 8002f14:	468b      	mov	fp, r1
 8002f16:	4bac      	ldr	r3, [pc, #688]	; (80031c8 <connectionTest+0x2e0>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb14 	bl	8000548 <__aeabi_f2d>
 8002f20:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002f24:	4ba8      	ldr	r3, [pc, #672]	; (80031c8 <connectionTest+0x2e0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fb0d 	bl	8000548 <__aeabi_f2d>
 8002f2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002f32:	4ba5      	ldr	r3, [pc, #660]	; (80031c8 <connectionTest+0x2e0>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fb06 	bl	8000548 <__aeabi_f2d>
 8002f3c:	e9c7 0100 	strd	r0, r1, [r7]
      sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002f40:	4ba1      	ldr	r3, [pc, #644]	; (80031c8 <connectionTest+0x2e0>)
 8002f42:	69db      	ldr	r3, [r3, #28]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd faff 	bl	8000548 <__aeabi_f2d>
 8002f4a:	4680      	mov	r8, r0
 8002f4c:	4689      	mov	r9, r1
      sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002f4e:	4b9e      	ldr	r3, [pc, #632]	; (80031c8 <connectionTest+0x2e0>)
 8002f50:	695b      	ldr	r3, [r3, #20]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd faf8 	bl	8000548 <__aeabi_f2d>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	460d      	mov	r5, r1
      sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002f5c:	4b9a      	ldr	r3, [pc, #616]	; (80031c8 <connectionTest+0x2e0>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd faf1 	bl	8000548 <__aeabi_f2d>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002f6e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002f72:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002f76:	ed97 7b00 	vldr	d7, [r7]
 8002f7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f7e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f82:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002f86:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002f8e:	e9cd ab00 	strd	sl, fp, [sp]
 8002f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f96:	488d      	ldr	r0, [pc, #564]	; (80031cc <connectionTest+0x2e4>)
 8002f98:	f001 fb1c 	bl	80045d4 <p>
    if (
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 8002f9c:	4b8a      	ldr	r3, [pc, #552]	; (80031c8 <connectionTest+0x2e0>)
 8002f9e:	edd3 7a01 	vldr	s15, [r3, #4]
    if (
 8002fa2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fae:	dd4e      	ble.n	800304e <connectionTest+0x166>
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 8002fb0:	4b85      	ldr	r3, [pc, #532]	; (80031c8 <connectionTest+0x2e0>)
 8002fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fb6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8002fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc2:	dd44      	ble.n	800304e <connectionTest+0x166>
 8002fc4:	4b80      	ldr	r3, [pc, #512]	; (80031c8 <connectionTest+0x2e0>)
 8002fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fca:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8002fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	d53a      	bpl.n	800304e <connectionTest+0x166>
 8002fd8:	4b7b      	ldr	r3, [pc, #492]	; (80031c8 <connectionTest+0x2e0>)
 8002fda:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	d530      	bpl.n	800304e <connectionTest+0x166>
 8002fec:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <connectionTest+0x2e0>)
 8002fee:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ff2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80031d0 <connectionTest+0x2e8>
 8002ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	d526      	bpl.n	800304e <connectionTest+0x166>
 8003000:	4b71      	ldr	r3, [pc, #452]	; (80031c8 <connectionTest+0x2e0>)
 8003002:	edd3 7a05 	vldr	s15, [r3, #20]
 8003006:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80031d0 <connectionTest+0x2e8>
 800300a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003012:	d51c      	bpl.n	800304e <connectionTest+0x166>
      sensor.temp_coil_2 < COIL_OVER_HEAT_TEMP) {
 8003014:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <connectionTest+0x2e0>)
 8003016:	edd3 7a06 	vldr	s15, [r3, #24]
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 800301a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80031d0 <connectionTest+0x2e8>
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d512      	bpl.n	800304e <connectionTest+0x166>
      p("Pre-test OK!!\n");
 8003028:	486a      	ldr	r0, [pc, #424]	; (80031d4 <connectionTest+0x2ec>)
 800302a:	f001 fad3 	bl	80045d4 <p>
      break;
 800302e:	bf00      	nop
    }
  }
  powerOutputEnable();
 8003030:	f7fe fd96 	bl	8001b60 <powerOutputEnable>

  setChargingLedLow();
 8003034:	f7fe fe2c 	bl	8001c90 <setChargingLedLow>
  setCanEnCmdLedHigh();
 8003038:	f7fe fe06 	bl	8001c48 <setCanEnCmdLedHigh>
  setHVWarningLedLow();
 800303c:	f7fe fdf8 	bl	8001c30 <setHVWarningLedLow>
  setOutSwLedHigh();
 8003040:	f7fe fdd2 	bl	8001be8 <setOutSwLedHigh>
  setErrorLedLow();
 8003044:	f7fe fdc4 	bl	8001bd0 <setErrorLedLow>

  int timeout_cnt = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
 800304c:	e000      	b.n	8003050 <connectionTest+0x168>
    updateADCs();
 800304e:	e74f      	b.n	8002ef0 <connectionTest+0x8>
  while (1) {
    timeout_cnt++;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3301      	adds	r3, #1
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
    updateADCs();
 8003056:	f7fe ff6f 	bl	8001f38 <updateADCs>
    if (
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 800305a:	4b5b      	ldr	r3, [pc, #364]	; (80031c8 <connectionTest+0x2e0>)
 800305c:	edd3 7a01 	vldr	s15, [r3, #4]
    if (
 8003060:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	f340 80ba 	ble.w	80031e4 <connectionTest+0x2fc>
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <connectionTest+0x2e0>)
 8003072:	edd3 7a02 	vldr	s15, [r3, #8]
 8003076:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800307a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	f340 80af 	ble.w	80031e4 <connectionTest+0x2fc>
 8003086:	4b50      	ldr	r3, [pc, #320]	; (80031c8 <connectionTest+0x2e0>)
 8003088:	edd3 7a03 	vldr	s15, [r3, #12]
 800308c:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003098:	f140 80a4 	bpl.w	80031e4 <connectionTest+0x2fc>
 800309c:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <connectionTest+0x2e0>)
 800309e:	edd3 7a04 	vldr	s15, [r3, #16]
 80030a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ae:	f140 8099 	bpl.w	80031e4 <connectionTest+0x2fc>
 80030b2:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <connectionTest+0x2e0>)
 80030b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80030b8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80031d0 <connectionTest+0x2e8>
 80030bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c4:	f140 808e 	bpl.w	80031e4 <connectionTest+0x2fc>
 80030c8:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <connectionTest+0x2e0>)
 80030ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80030ce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80031d0 <connectionTest+0x2e8>
 80030d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	f140 8083 	bpl.w	80031e4 <connectionTest+0x2fc>
      sensor.temp_coil_2 < COIL_OVER_HEAT_TEMP) {
 80030de:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <connectionTest+0x2e0>)
 80030e0:	edd3 7a06 	vldr	s15, [r3, #24]
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 80030e4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80031d0 <connectionTest+0x2e8>
 80030e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	d578      	bpl.n	80031e4 <connectionTest+0x2fc>
      p("PowerOn-test   OK!! cnt %3d : ", timeout_cnt);
 80030f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030f4:	4838      	ldr	r0, [pc, #224]	; (80031d8 <connectionTest+0x2f0>)
 80030f6:	f001 fa6d 	bl	80045d4 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <connectionTest+0x2e0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fa22 	bl	8000548 <__aeabi_f2d>
 8003104:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003108:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <connectionTest+0x2e0>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fa1b 	bl	8000548 <__aeabi_f2d>
 8003112:	4682      	mov	sl, r0
 8003114:	468b      	mov	fp, r1
 8003116:	4b2c      	ldr	r3, [pc, #176]	; (80031c8 <connectionTest+0x2e0>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fa14 	bl	8000548 <__aeabi_f2d>
 8003120:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <connectionTest+0x2e0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd fa0d 	bl	8000548 <__aeabi_f2d>
 800312e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003132:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <connectionTest+0x2e0>)
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fa06 	bl	8000548 <__aeabi_f2d>
 800313c:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8003140:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <connectionTest+0x2e0>)
 8003142:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f9ff 	bl	8000548 <__aeabi_f2d>
 800314a:	4680      	mov	r8, r0
 800314c:	4689      	mov	r9, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <connectionTest+0x2e0>)
 8003150:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f9f8 	bl	8000548 <__aeabi_f2d>
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <connectionTest+0x2e0>)
 800315e:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f9f1 	bl	8000548 <__aeabi_f2d>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800316e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003172:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003176:	ed97 7b00 	vldr	d7, [r7]
 800317a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800317e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003182:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003186:	ed97 7b04 	vldr	d7, [r7, #16]
 800318a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800318e:	e9cd ab00 	strd	sl, fp, [sp]
 8003192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003196:	4811      	ldr	r0, [pc, #68]	; (80031dc <connectionTest+0x2f4>)
 8003198:	f001 fa1c 	bl	80045d4 <p>
      break;
 800319c:	bf00      	nop
      while (1)
        ;
    }
  }

  setChargingLedLow();
 800319e:	f7fe fd77 	bl	8001c90 <setChargingLedLow>
  setCanEnCmdLedHigh();
 80031a2:	f7fe fd51 	bl	8001c48 <setCanEnCmdLedHigh>
  setHVWarningLedHigh();
 80031a6:	f7fe fd37 	bl	8001c18 <setHVWarningLedHigh>
  setOutSwLedHigh();
 80031aa:	f7fe fd1d 	bl	8001be8 <setOutSwLedHigh>
  setErrorLedLow();
 80031ae:	f7fe fd0f 	bl	8001bd0 <setErrorLedLow>

  timeout_cnt = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, TIM_KICK_PERI / 10);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <connectionTest+0x2f8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	22c8      	movs	r2, #200	; 0xc8
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, TIM_KICK_PERI / 10);
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <connectionTest+0x2f8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22c8      	movs	r2, #200	; 0xc8
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
 80031c6:	e06a      	b.n	800329e <connectionTest+0x3b6>
 80031c8:	20000488 	.word	0x20000488
 80031cc:	0800eac4 	.word	0x0800eac4
 80031d0:	42a00000 	.word	0x42a00000
 80031d4:	0800eb34 	.word	0x0800eb34
 80031d8:	0800eb44 	.word	0x0800eb44
 80031dc:	0800eb64 	.word	0x0800eb64
 80031e0:	200005d0 	.word	0x200005d0
    if (timeout_cnt > 10) {
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	2b0a      	cmp	r3, #10
 80031e8:	f77f af32 	ble.w	8003050 <connectionTest+0x168>
      powerOutputDisable();
 80031ec:	f7fe fcc4 	bl	8001b78 <powerOutputDisable>
      p("PowerOn-test FAIL!! : ");
 80031f0:	4896      	ldr	r0, [pc, #600]	; (800344c <connectionTest+0x564>)
 80031f2:	f001 f9ef 	bl	80045d4 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80031f6:	4b96      	ldr	r3, [pc, #600]	; (8003450 <connectionTest+0x568>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f9a4 	bl	8000548 <__aeabi_f2d>
 8003200:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003204:	4b92      	ldr	r3, [pc, #584]	; (8003450 <connectionTest+0x568>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f99d 	bl	8000548 <__aeabi_f2d>
 800320e:	4682      	mov	sl, r0
 8003210:	468b      	mov	fp, r1
 8003212:	4b8f      	ldr	r3, [pc, #572]	; (8003450 <connectionTest+0x568>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f996 	bl	8000548 <__aeabi_f2d>
 800321c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003220:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <connectionTest+0x568>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f98f 	bl	8000548 <__aeabi_f2d>
 800322a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800322e:	4b88      	ldr	r3, [pc, #544]	; (8003450 <connectionTest+0x568>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f988 	bl	8000548 <__aeabi_f2d>
 8003238:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 800323c:	4b84      	ldr	r3, [pc, #528]	; (8003450 <connectionTest+0x568>)
 800323e:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd f981 	bl	8000548 <__aeabi_f2d>
 8003246:	4680      	mov	r8, r0
 8003248:	4689      	mov	r9, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 800324a:	4b81      	ldr	r3, [pc, #516]	; (8003450 <connectionTest+0x568>)
 800324c:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f97a 	bl	8000548 <__aeabi_f2d>
 8003254:	4604      	mov	r4, r0
 8003256:	460d      	mov	r5, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8003258:	4b7d      	ldr	r3, [pc, #500]	; (8003450 <connectionTest+0x568>)
 800325a:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f973 	bl	8000548 <__aeabi_f2d>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800326a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800326e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003272:	ed97 7b00 	vldr	d7, [r7]
 8003276:	ed8d 7b06 	vstr	d7, [sp, #24]
 800327a:	ed97 7b02 	vldr	d7, [r7, #8]
 800327e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003282:	ed97 7b04 	vldr	d7, [r7, #16]
 8003286:	ed8d 7b02 	vstr	d7, [sp, #8]
 800328a:	e9cd ab00 	strd	sl, fp, [sp]
 800328e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003292:	4870      	ldr	r0, [pc, #448]	; (8003454 <connectionTest+0x56c>)
 8003294:	f001 f99e 	bl	80045d4 <p>
      setErrorLedHigh();
 8003298:	f7fe fc8e 	bl	8001bb8 <setErrorLedHigh>
      while (1)
 800329c:	e7fe      	b.n	800329c <connectionTest+0x3b4>

  while (1) {
    timeout_cnt++;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	3301      	adds	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
    updateADCs();
 80032a4:	f7fe fe48 	bl	8001f38 <updateADCs>
    HAL_Delay(1);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f001 fad3 	bl	8004854 <HAL_Delay>
    if (
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 80032ae:	4b68      	ldr	r3, [pc, #416]	; (8003450 <connectionTest+0x568>)
 80032b0:	edd3 7a01 	vldr	s15, [r3, #4]
    if (
 80032b4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80032b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	f340 80d4 	ble.w	800346c <connectionTest+0x584>
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 80032c4:	4b62      	ldr	r3, [pc, #392]	; (8003450 <connectionTest+0x568>)
 80032c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ca:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80032ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d6:	f340 80c9 	ble.w	800346c <connectionTest+0x584>
 80032da:	4b5d      	ldr	r3, [pc, #372]	; (8003450 <connectionTest+0x568>)
 80032dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80032e0:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	f140 80be 	bpl.w	800346c <connectionTest+0x584>
 80032f0:	4b57      	ldr	r3, [pc, #348]	; (8003450 <connectionTest+0x568>)
 80032f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80032f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	f140 80b3 	bpl.w	800346c <connectionTest+0x584>
 8003306:	4b52      	ldr	r3, [pc, #328]	; (8003450 <connectionTest+0x568>)
 8003308:	edd3 7a07 	vldr	s15, [r3, #28]
 800330c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003458 <connectionTest+0x570>
 8003310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	f140 80a8 	bpl.w	800346c <connectionTest+0x584>
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <connectionTest+0x568>)
 800331e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003322:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003458 <connectionTest+0x570>
 8003326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	f140 809d 	bpl.w	800346c <connectionTest+0x584>
      sensor.temp_coil_2 < COIL_OVER_HEAT_TEMP && sensor.boost_v < 20) {
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <connectionTest+0x568>)
 8003334:	edd3 7a06 	vldr	s15, [r3, #24]
      sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < -8 && sensor.batt_cs < 0.5 && sensor.temp_fet < FET_TEST_TEMP && sensor.temp_coil_1 < COIL_OVER_HEAT_TEMP &&
 8003338:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003458 <connectionTest+0x570>
 800333c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003344:	f140 8092 	bpl.w	800346c <connectionTest+0x584>
      sensor.temp_coil_2 < COIL_OVER_HEAT_TEMP && sensor.boost_v < 20) {
 8003348:	4b41      	ldr	r3, [pc, #260]	; (8003450 <connectionTest+0x568>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	f140 8087 	bpl.w	800346c <connectionTest+0x584>
      p("DisCharge-test OK!! cnt %3d : ", timeout_cnt);
 800335e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003360:	483e      	ldr	r0, [pc, #248]	; (800345c <connectionTest+0x574>)
 8003362:	f001 f937 	bl	80045d4 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003366:	4b3a      	ldr	r3, [pc, #232]	; (8003450 <connectionTest+0x568>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f8ec 	bl	8000548 <__aeabi_f2d>
 8003370:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <connectionTest+0x568>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8e5 	bl	8000548 <__aeabi_f2d>
 800337e:	4682      	mov	sl, r0
 8003380:	468b      	mov	fp, r1
 8003382:	4b33      	ldr	r3, [pc, #204]	; (8003450 <connectionTest+0x568>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8de 	bl	8000548 <__aeabi_f2d>
 800338c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003390:	4b2f      	ldr	r3, [pc, #188]	; (8003450 <connectionTest+0x568>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8d7 	bl	8000548 <__aeabi_f2d>
 800339a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <connectionTest+0x568>)
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f8d0 	bl	8000548 <__aeabi_f2d>
 80033a8:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <connectionTest+0x568>)
 80033ae:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f8c9 	bl	8000548 <__aeabi_f2d>
 80033b6:	4680      	mov	r8, r0
 80033b8:	4689      	mov	r9, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80033ba:	4b25      	ldr	r3, [pc, #148]	; (8003450 <connectionTest+0x568>)
 80033bc:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f8c2 	bl	8000548 <__aeabi_f2d>
 80033c4:	4604      	mov	r4, r0
 80033c6:	460d      	mov	r5, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80033c8:	4b21      	ldr	r3, [pc, #132]	; (8003450 <connectionTest+0x568>)
 80033ca:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8bb 	bl	8000548 <__aeabi_f2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80033da:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80033de:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80033e2:	ed97 7b00 	vldr	d7, [r7]
 80033e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80033ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80033ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80033f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80033f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80033fa:	e9cd ab00 	strd	sl, fp, [sp]
 80033fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003402:	4814      	ldr	r0, [pc, #80]	; (8003454 <connectionTest+0x56c>)
 8003404:	f001 f8e6 	bl	80045d4 <p>
      break;
 8003408:	bf00      	nop
      while (1)
        ;
    }
  }

  setChargingLedHigh();
 800340a:	f7fe fc35 	bl	8001c78 <setChargingLedHigh>
  setCanEnCmdLedLow();
 800340e:	f7fe fc27 	bl	8001c60 <setCanEnCmdLedLow>
  setHVWarningLedHigh();
 8003412:	f7fe fc01 	bl	8001c18 <setHVWarningLedHigh>
  setOutSwLedHigh();
 8003416:	f7fe fbe7 	bl	8001be8 <setOutSwLedHigh>
  setErrorLedLow();
 800341a:	f7fe fbd9 	bl	8001bd0 <setErrorLedLow>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <connectionTest+0x578>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <connectionTest+0x578>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	639a      	str	r2, [r3, #56]	; 0x38

  timeout_cnt = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  __HAL_TIM_SET_AUTORELOAD(&htim2, 72000);
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <connectionTest+0x57c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <connectionTest+0x580>)
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <connectionTest+0x57c>)
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <connectionTest+0x580>)
 800343e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100);
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <connectionTest+0x57c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2264      	movs	r2, #100	; 0x64
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
 8003448:	e06c      	b.n	8003524 <connectionTest+0x63c>
 800344a:	bf00      	nop
 800344c:	0800ebc8 	.word	0x0800ebc8
 8003450:	20000488 	.word	0x20000488
 8003454:	0800eb64 	.word	0x0800eb64
 8003458:	42a00000 	.word	0x42a00000
 800345c:	0800ebe0 	.word	0x0800ebe0
 8003460:	200005d0 	.word	0x200005d0
 8003464:	20000584 	.word	0x20000584
 8003468:	00011940 	.word	0x00011940
    if (timeout_cnt > 1000) {
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003472:	f77f af14 	ble.w	800329e <connectionTest+0x3b6>
      p("DisCharge-test FAIL!! : ");
 8003476:	489a      	ldr	r0, [pc, #616]	; (80036e0 <connectionTest+0x7f8>)
 8003478:	f001 f8ac 	bl	80045d4 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 800347c:	4b99      	ldr	r3, [pc, #612]	; (80036e4 <connectionTest+0x7fc>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd f861 	bl	8000548 <__aeabi_f2d>
 8003486:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800348a:	4b96      	ldr	r3, [pc, #600]	; (80036e4 <connectionTest+0x7fc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd f85a 	bl	8000548 <__aeabi_f2d>
 8003494:	4682      	mov	sl, r0
 8003496:	468b      	mov	fp, r1
 8003498:	4b92      	ldr	r3, [pc, #584]	; (80036e4 <connectionTest+0x7fc>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd f853 	bl	8000548 <__aeabi_f2d>
 80034a2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80034a6:	4b8f      	ldr	r3, [pc, #572]	; (80036e4 <connectionTest+0x7fc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd f84c 	bl	8000548 <__aeabi_f2d>
 80034b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80034b4:	4b8b      	ldr	r3, [pc, #556]	; (80036e4 <connectionTest+0x7fc>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd f845 	bl	8000548 <__aeabi_f2d>
 80034be:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80034c2:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <connectionTest+0x7fc>)
 80034c4:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f83e 	bl	8000548 <__aeabi_f2d>
 80034cc:	4680      	mov	r8, r0
 80034ce:	4689      	mov	r9, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80034d0:	4b84      	ldr	r3, [pc, #528]	; (80036e4 <connectionTest+0x7fc>)
 80034d2:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f837 	bl	8000548 <__aeabi_f2d>
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80034de:	4b81      	ldr	r3, [pc, #516]	; (80036e4 <connectionTest+0x7fc>)
 80034e0:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd f830 	bl	8000548 <__aeabi_f2d>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80034f0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80034f4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80034f8:	ed97 7b00 	vldr	d7, [r7]
 80034fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003500:	ed97 7b02 	vldr	d7, [r7, #8]
 8003504:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003508:	ed97 7b04 	vldr	d7, [r7, #16]
 800350c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003510:	e9cd ab00 	strd	sl, fp, [sp]
 8003514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003518:	4873      	ldr	r0, [pc, #460]	; (80036e8 <connectionTest+0x800>)
 800351a:	f001 f85b 	bl	80045d4 <p>
      setErrorLedHigh();
 800351e:	f7fe fb4b 	bl	8001bb8 <setErrorLedHigh>
      while (1)
 8003522:	e7fe      	b.n	8003522 <connectionTest+0x63a>

  while (1) {
    timeout_cnt++;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	3301      	adds	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    updateADCs();
 800352a:	f7fe fd05 	bl	8001f38 <updateADCs>
    if (sensor.boost_v > 30 || sensor.batt_cs > 1.0) {
 800352e:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <connectionTest+0x7fc>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	dc09      	bgt.n	8003556 <connectionTest+0x66e>
 8003542:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <connectionTest+0x7fc>)
 8003544:	edd3 7a04 	vldr	s15, [r3, #16]
 8003548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800354c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	dd5d      	ble.n	8003612 <connectionTest+0x72a>
      powerOutputDisable();
 8003556:	f7fe fb0f 	bl	8001b78 <powerOutputDisable>
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800355a:	4b64      	ldr	r3, [pc, #400]	; (80036ec <connectionTest+0x804>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
      p("Capacitor-test FAIL!! %d : ", timeout_cnt);
 8003562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003564:	4862      	ldr	r0, [pc, #392]	; (80036f0 <connectionTest+0x808>)
 8003566:	f001 f835 	bl	80045d4 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <connectionTest+0x7fc>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fc ffea 	bl	8000548 <__aeabi_f2d>
 8003574:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003578:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <connectionTest+0x7fc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ffe3 	bl	8000548 <__aeabi_f2d>
 8003582:	4682      	mov	sl, r0
 8003584:	468b      	mov	fp, r1
 8003586:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <connectionTest+0x7fc>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc ffdc 	bl	8000548 <__aeabi_f2d>
 8003590:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003594:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <connectionTest+0x7fc>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7fc ffd5 	bl	8000548 <__aeabi_f2d>
 800359e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80035a2:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <connectionTest+0x7fc>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc ffce 	bl	8000548 <__aeabi_f2d>
 80035ac:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80035b0:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <connectionTest+0x7fc>)
 80035b2:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ffc7 	bl	8000548 <__aeabi_f2d>
 80035ba:	4680      	mov	r8, r0
 80035bc:	4689      	mov	r9, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <connectionTest+0x7fc>)
 80035c0:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ffc0 	bl	8000548 <__aeabi_f2d>
 80035c8:	4604      	mov	r4, r0
 80035ca:	460d      	mov	r5, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80035cc:	4b45      	ldr	r3, [pc, #276]	; (80036e4 <connectionTest+0x7fc>)
 80035ce:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffb9 	bl	8000548 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80035de:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80035e2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80035e6:	ed97 7b00 	vldr	d7, [r7]
 80035ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80035ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80035f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80035f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80035fa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80035fe:	e9cd ab00 	strd	sl, fp, [sp]
 8003602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003606:	4838      	ldr	r0, [pc, #224]	; (80036e8 <connectionTest+0x800>)
 8003608:	f000 ffe4 	bl	80045d4 <p>
      setErrorLedHigh();
 800360c:	f7fe fad4 	bl	8001bb8 <setErrorLedHigh>
      while (1)
 8003610:	e7fe      	b.n	8003610 <connectionTest+0x728>
        ;
    }
    if (timeout_cnt > 100) {
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	2b64      	cmp	r3, #100	; 0x64
 8003616:	dd55      	ble.n	80036c4 <connectionTest+0x7dc>
      p("Capacitor-test OK!! cnt %3d : ", timeout_cnt);
 8003618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361a:	4836      	ldr	r0, [pc, #216]	; (80036f4 <connectionTest+0x80c>)
 800361c:	f000 ffda 	bl	80045d4 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003620:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <connectionTest+0x7fc>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ff8f 	bl	8000548 <__aeabi_f2d>
 800362a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <connectionTest+0x7fc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc ff88 	bl	8000548 <__aeabi_f2d>
 8003638:	4682      	mov	sl, r0
 800363a:	468b      	mov	fp, r1
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <connectionTest+0x7fc>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ff81 	bl	8000548 <__aeabi_f2d>
 8003646:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <connectionTest+0x7fc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fc ff7a 	bl	8000548 <__aeabi_f2d>
 8003654:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003658:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <connectionTest+0x7fc>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc ff73 	bl	8000548 <__aeabi_f2d>
 8003662:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <connectionTest+0x7fc>)
 8003668:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff6c 	bl	8000548 <__aeabi_f2d>
 8003670:	4680      	mov	r8, r0
 8003672:	4689      	mov	r9, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <connectionTest+0x7fc>)
 8003676:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff65 	bl	8000548 <__aeabi_f2d>
 800367e:	4604      	mov	r4, r0
 8003680:	460d      	mov	r5, r1
        sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <connectionTest+0x7fc>)
 8003684:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p, sensor.gd_16m, sensor.boost_v, sensor.batt_cs,
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff5e 	bl	8000548 <__aeabi_f2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003694:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003698:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800369c:	ed97 7b00 	vldr	d7, [r7]
 80036a0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80036a4:	ed97 7b02 	vldr	d7, [r7, #8]
 80036a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80036ac:	ed97 7b04 	vldr	d7, [r7, #16]
 80036b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80036b4:	e9cd ab00 	strd	sl, fp, [sp]
 80036b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036bc:	480a      	ldr	r0, [pc, #40]	; (80036e8 <connectionTest+0x800>)
 80036be:	f000 ff89 	bl	80045d4 <p>
      break;
 80036c2:	e003      	b.n	80036cc <connectionTest+0x7e4>
    }
    HAL_Delay(1);
 80036c4:	2001      	movs	r0, #1
 80036c6:	f001 f8c5 	bl	8004854 <HAL_Delay>
    timeout_cnt++;
 80036ca:	e72b      	b.n	8003524 <connectionTest+0x63c>
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <connectionTest+0x804>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80036d4:	bf00      	nop
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	0800ec00 	.word	0x0800ec00
 80036e4:	20000488 	.word	0x20000488
 80036e8:	0800eb64 	.word	0x0800eb64
 80036ec:	20000584 	.word	0x20000584
 80036f0:	0800ec1c 	.word	0x0800ec1c
 80036f4:	0800ec38 	.word	0x0800ec38

080036f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036fc:	b087      	sub	sp, #28
 80036fe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003700:	f001 f842 	bl	8004788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003704:	f000 f9c2 	bl	8003a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003708:	f7fe f996 	bl	8001a38 <MX_GPIO_Init>
  MX_DMA_Init();
 800370c:	f7fe f952 	bl	80019b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003710:	f7fd fa9a 	bl	8000c48 <MX_ADC1_Init>
  MX_ADC3_Init();
 8003714:	f7fd fb2a 	bl	8000d6c <MX_ADC3_Init>
  MX_ADC4_Init();
 8003718:	f7fd fbbc 	bl	8000e94 <MX_ADC4_Init>
  MX_CAN_Init();
 800371c:	f7fd ffa4 	bl	8001668 <MX_CAN_Init>
  MX_SPI1_Init();
 8003720:	f000 fa1c 	bl	8003b5c <MX_SPI1_Init>
  MX_TIM2_Init();
 8003724:	f000 fc52 	bl	8003fcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8003728:	f000 fcaa 	bl	8004080 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800372c:	f000 fe4e 	bl	80043cc <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8003730:	f000 fd0c 	bl	800414c <MX_TIM4_Init>
  MX_TIM1_Init();
 8003734:	f000 fbf6 	bl	8003f24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  powerOutputDisable();
 8003738:	f7fe fa1e 	bl	8001b78 <powerOutputDisable>

  mouseLedEnable();
 800373c:	f7fe fa28 	bl	8001b90 <mouseLedEnable>
  HAL_Delay(100);
 8003740:	2064      	movs	r0, #100	; 0x64
 8003742:	f001 f887 	bl	8004854 <HAL_Delay>
  mouseLedDisable();
 8003746:	f7fe fa2d 	bl	8001ba4 <mouseLedDisable>

  setChargingLedHigh();
 800374a:	f7fe fa95 	bl	8001c78 <setChargingLedHigh>
  setCanEnCmdLedHigh();
 800374e:	f7fe fa7b 	bl	8001c48 <setCanEnCmdLedHigh>
  setHVWarningLedHigh();
 8003752:	f7fe fa61 	bl	8001c18 <setHVWarningLedHigh>
  setOutSwLedHigh();
 8003756:	f7fe fa47 	bl	8001be8 <setOutSwLedHigh>
  setErrorLedHigh();
 800375a:	f7fe fa2d 	bl	8001bb8 <setErrorLedHigh>

  p("\n\nstart ORION BOOST v4\n\n");
 800375e:	48b4      	ldr	r0, [pc, #720]	; (8003a30 <main+0x338>)
 8003760:	f000 ff38 	bl	80045d4 <p>

  HAL_TIM_Base_Start(&htim1);
 8003764:	48b3      	ldr	r0, [pc, #716]	; (8003a34 <main+0x33c>)
 8003766:	f005 fce9 	bl	800913c <HAL_TIM_Base_Start>

  // 1000ms -> 7400cnt
  // 7.4cnt per 1ms

  // kick
  HAL_TIM_PWM_Init(&htim3);
 800376a:	48b3      	ldr	r0, [pc, #716]	; (8003a38 <main+0x340>)
 800376c:	f005 fd48 	bl	8009200 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8003770:	4bb1      	ldr	r3, [pc, #708]	; (8003a38 <main+0x340>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2200      	movs	r2, #0
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003778:	4baf      	ldr	r3, [pc, #700]	; (8003a38 <main+0x340>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8003780:	4bad      	ldr	r3, [pc, #692]	; (8003a38 <main+0x340>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c
 800378a:	4bab      	ldr	r3, [pc, #684]	; (8003a38 <main+0x340>)
 800378c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003790:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8003792:	4ba9      	ldr	r3, [pc, #676]	; (8003a38 <main+0x340>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c
 800379c:	4ba6      	ldr	r3, [pc, #664]	; (8003a38 <main+0x340>)
 800379e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037a2:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80037a4:	2100      	movs	r1, #0
 80037a6:	48a4      	ldr	r0, [pc, #656]	; (8003a38 <main+0x340>)
 80037a8:	f005 fd82 	bl	80092b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80037ac:	2104      	movs	r1, #4
 80037ae:	48a2      	ldr	r0, [pc, #648]	; (8003a38 <main+0x340>)
 80037b0:	f005 fd7e 	bl	80092b0 <HAL_TIM_PWM_Start>

  // boost
  HAL_TIM_PWM_Init(&htim2);
 80037b4:	48a1      	ldr	r0, [pc, #644]	; (8003a3c <main+0x344>)
 80037b6:	f005 fd23 	bl	8009200 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80037ba:	4ba0      	ldr	r3, [pc, #640]	; (8003a3c <main+0x344>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 80037c2:	4b9e      	ldr	r3, [pc, #632]	; (8003a3c <main+0x344>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80037cc:	4b9b      	ldr	r3, [pc, #620]	; (8003a3c <main+0x344>)
 80037ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037d2:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80037d4:	210c      	movs	r1, #12
 80037d6:	4899      	ldr	r0, [pc, #612]	; (8003a3c <main+0x344>)
 80037d8:	f005 fd6a 	bl	80092b0 <HAL_TIM_PWM_Start>

  // GD negative PS
  HAL_TIM_PWM_Init(&htim4);
 80037dc:	4898      	ldr	r0, [pc, #608]	; (8003a40 <main+0x348>)
 80037de:	f005 fd0f 	bl	8009200 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
 80037e2:	4b97      	ldr	r3, [pc, #604]	; (8003a40 <main+0x348>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim4, 2000);
 80037ec:	4b94      	ldr	r3, [pc, #592]	; (8003a40 <main+0x348>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80037f6:	4b92      	ldr	r3, [pc, #584]	; (8003a40 <main+0x348>)
 80037f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037fc:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80037fe:	2104      	movs	r1, #4
 8003800:	488f      	ldr	r0, [pc, #572]	; (8003a40 <main+0x348>)
 8003802:	f005 fd55 	bl	80092b0 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 8003806:	2064      	movs	r0, #100	; 0x64
 8003808:	f001 f824 	bl	8004854 <HAL_Delay>
  // wait charging

  // can init
  CAN_Filter_Init();
 800380c:	f7fd ffae 	bl	800176c <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8003810:	488c      	ldr	r0, [pc, #560]	; (8003a44 <main+0x34c>)
 8003812:	f002 fa74 	bl	8005cfe <HAL_CAN_Start>

  setbuf(stdout, NULL);
 8003816:	4b8c      	ldr	r3, [pc, #560]	; (8003a48 <main+0x350>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f008 fd42 	bl	800c2a8 <setbuf>

  HAL_UART_Init(&huart1);
 8003824:	4889      	ldr	r0, [pc, #548]	; (8003a4c <main+0x354>)
 8003826:	f006 fcc7 	bl	800a1b8 <HAL_UART_Init>

  HAL_ADC_Start(&hadc1);
 800382a:	4889      	ldr	r0, [pc, #548]	; (8003a50 <main+0x358>)
 800382c:	f001 fa16 	bl	8004c5c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8003830:	4888      	ldr	r0, [pc, #544]	; (8003a54 <main+0x35c>)
 8003832:	f001 fa13 	bl	8004c5c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 8003836:	4888      	ldr	r0, [pc, #544]	; (8003a58 <main+0x360>)
 8003838:	f001 fa10 	bl	8004c5c <HAL_ADC_Start>

  if (is_connect_ADNS3080()) {
 800383c:	f7fd fd10 	bl	8001260 <is_connect_ADNS3080>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <main+0x166>
    p("ADNS3080 OK!\n");
 8003846:	4885      	ldr	r0, [pc, #532]	; (8003a5c <main+0x364>)
 8003848:	f000 fec4 	bl	80045d4 <p>
    while (1) {
      /* code */
    }
  }

  init_ADNS3080(true);
 800384c:	2001      	movs	r0, #1
 800384e:	f7fd fd35 	bl	80012bc <init_ADNS3080>

  if (isPushedUserSw1()) {
 8003852:	f7fe fa29 	bl	8001ca8 <isPushedUserSw1>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d045      	beq.n	80038e8 <main+0x1f0>
 800385c:	e003      	b.n	8003866 <main+0x16e>
    p("ADNS3080 not found...\n");
 800385e:	4880      	ldr	r0, [pc, #512]	; (8003a60 <main+0x368>)
 8003860:	f000 feb8 	bl	80045d4 <p>
    while (1) {
 8003864:	e7fe      	b.n	8003864 <main+0x16c>
    mouseLedEnable();
 8003866:	f7fe f993 	bl	8001b90 <mouseLedEnable>

    while (true) {
      // frame_print_ADNS3080();
      HAL_Delay(1);
 800386a:	2001      	movs	r0, #1
 800386c:	f000 fff2 	bl	8004854 <HAL_Delay>

      update_ADNS3080();
 8003870:	f7fd fd86 	bl	8001380 <update_ADNS3080>
      p("Xv, %+3d, Yv, %+3d, QL, %4d, PosX, %5.3f, PosY, %5.3f\n", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080(), (float)get_X_ADNS3080() / 1000, (float)get_Y_ADNS3080() / 1000);
 8003874:	f7fd fe20 	bl	80014b8 <get_DeltaX_ADNS3080>
 8003878:	4603      	mov	r3, r0
 800387a:	461e      	mov	r6, r3
 800387c:	f7fd fe28 	bl	80014d0 <get_DeltaY_ADNS3080>
 8003880:	4603      	mov	r3, r0
 8003882:	4698      	mov	r8, r3
 8003884:	f7fd fe30 	bl	80014e8 <get_Qualty_ADNS3080>
 8003888:	4603      	mov	r3, r0
 800388a:	4699      	mov	r9, r3
 800388c:	f7fd fe38 	bl	8001500 <get_X_ADNS3080>
 8003890:	ee07 0a90 	vmov	s15, r0
 8003894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003898:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003a64 <main+0x36c>
 800389c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80038a0:	ee16 0a90 	vmov	r0, s13
 80038a4:	f7fc fe50 	bl	8000548 <__aeabi_f2d>
 80038a8:	4604      	mov	r4, r0
 80038aa:	460d      	mov	r5, r1
 80038ac:	f7fd fe34 	bl	8001518 <get_Y_ADNS3080>
 80038b0:	ee07 0a90 	vmov	s15, r0
 80038b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b8:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003a64 <main+0x36c>
 80038bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80038c0:	ee16 0a90 	vmov	r0, s13
 80038c4:	f7fc fe40 	bl	8000548 <__aeabi_f2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038d0:	e9cd 4500 	strd	r4, r5, [sp]
 80038d4:	464b      	mov	r3, r9
 80038d6:	4642      	mov	r2, r8
 80038d8:	4631      	mov	r1, r6
 80038da:	4863      	ldr	r0, [pc, #396]	; (8003a68 <main+0x370>)
 80038dc:	f000 fe7a 	bl	80045d4 <p>
      HAL_Delay(10);
 80038e0:	200a      	movs	r0, #10
 80038e2:	f000 ffb7 	bl	8004854 <HAL_Delay>
      HAL_Delay(1);
 80038e6:	e7c0      	b.n	800386a <main+0x172>
    }
  }
  if (isPushedUserSw2()) {
 80038e8:	f7fe f9f0 	bl	8001ccc <isPushedUserSw2>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <main+0x20a>
    mouseLedEnable();
 80038f2:	f7fe f94d 	bl	8001b90 <mouseLedEnable>
    while (true) {
      frame_print_ADNS3080();
 80038f6:	f7fd fe43 	bl	8001580 <frame_print_ADNS3080>
      HAL_Delay(100);
 80038fa:	2064      	movs	r0, #100	; 0x64
 80038fc:	f000 ffaa 	bl	8004854 <HAL_Delay>
      frame_print_ADNS3080();
 8003900:	e7f9      	b.n	80038f6 <main+0x1fe>
      // p("\n\n%+3d %+3d %4d\n\n", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(),
      // get_Qualty_ADNS3080()); HAL_Delay(100);
    }
  }

  setTargetVoltage(150);
 8003902:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8003a6c <main+0x374>
 8003906:	f7fe f9f3 	bl	8001cf0 <setTargetVoltage>
  peak.batt_v_min = 30;
 800390a:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <main+0x378>)
 800390c:	4a59      	ldr	r2, [pc, #356]	; (8003a74 <main+0x37c>)
 800390e:	601a      	str	r2, [r3, #0]
  peak.gd_16m_min = -10;
 8003910:	4b57      	ldr	r3, [pc, #348]	; (8003a70 <main+0x378>)
 8003912:	4a59      	ldr	r2, [pc, #356]	; (8003a78 <main+0x380>)
 8003914:	60da      	str	r2, [r3, #12]
  peak.gd_16p_min = 20;
 8003916:	4b56      	ldr	r3, [pc, #344]	; (8003a70 <main+0x378>)
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <main+0x384>)
 800391a:	609a      	str	r2, [r3, #8]

  connectionTest();
 800391c:	f7ff fae4 	bl	8002ee8 <connectionTest>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_it_buffer, 1);
 8003920:	2201      	movs	r2, #1
 8003922:	4957      	ldr	r1, [pc, #348]	; (8003a80 <main+0x388>)
 8003924:	4849      	ldr	r0, [pc, #292]	; (8003a4c <main+0x354>)
 8003926:	f006 fc95 	bl	800a254 <HAL_UART_Receive_IT>

  uint8_t mouse_read_cnt = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    mouse_read_cnt++;
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	3301      	adds	r3, #1
 8003932:	71fb      	strb	r3, [r7, #7]
    if (mouse_read_cnt > 10) {
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	2b0a      	cmp	r3, #10
 8003938:	d914      	bls.n	8003964 <main+0x26c>
      mouse_read_cnt = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	71fb      	strb	r3, [r7, #7]

      update_ADNS3080();
 800393e:	f7fd fd1f 	bl	8001380 <update_ADNS3080>
      sendCanMouse(get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 8003942:	f7fd fdb9 	bl	80014b8 <get_DeltaX_ADNS3080>
 8003946:	4603      	mov	r3, r0
 8003948:	b21c      	sxth	r4, r3
 800394a:	f7fd fdc1 	bl	80014d0 <get_DeltaY_ADNS3080>
 800394e:	4603      	mov	r3, r0
 8003950:	b21d      	sxth	r5, r3
 8003952:	f7fd fdc9 	bl	80014e8 <get_Qualty_ADNS3080>
 8003956:	4603      	mov	r3, r0
 8003958:	b29b      	uxth	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	4629      	mov	r1, r5
 800395e:	4620      	mov	r0, r4
 8003960:	f7fd ff6c 	bl	800183c <sendCanMouse>
    }

    // wait 2ms cycle
    stat.system_loop_cnt = htim1.Instance->CNT;
 8003964:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <main+0x33c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <main+0x38c>)
 800396c:	6153      	str	r3, [r2, #20]
    while (htim1.Instance->CNT < 2000) {
 800396e:	bf00      	nop
 8003970:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <main+0x33c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800397a:	d3f9      	bcc.n	8003970 <main+0x278>
    }
    htim1.Instance->CNT = htim1.Instance->CNT - 1000;
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <main+0x33c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <main+0x33c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f5a2 727a 	sub.w	r2, r2, #1000	; 0x3e8
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

    updateADCs();
 800398c:	f7fe fad4 	bl	8001f38 <updateADCs>
    protecter();
 8003990:	f7fe fcfc 	bl	800238c <protecter>
    userInterface();
 8003994:	f7ff f848 	bl	8002a28 <userInterface>
    canDataSender();
 8003998:	f7ff fa48 	bl	8002e2c <canDataSender>

    // power SW control (timeout)
    if (power_cmd.sw_enable_cnt > 0) {
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <main+0x390>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	dd0a      	ble.n	80039ba <main+0x2c2>
      power_cmd.sw_enable_cnt -= 1;
 80039a4:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <main+0x390>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	4a37      	ldr	r2, [pc, #220]	; (8003a88 <main+0x390>)
 80039ac:	60d3      	str	r3, [r2, #12]
      setCanEnCmdLedHigh();
 80039ae:	f7fe f94b 	bl	8001c48 <setCanEnCmdLedHigh>
      stat.power_enabled = true;
 80039b2:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <main+0x38c>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	731a      	strb	r2, [r3, #12]
 80039b8:	e004      	b.n	80039c4 <main+0x2cc>
    } else {
      setCanEnCmdLedLow();
 80039ba:	f7fe f951 	bl	8001c60 <setCanEnCmdLedLow>
      stat.power_enabled = false;
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <main+0x38c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	731a      	strb	r2, [r3, #12]
    }

    // stop control
    if (stat.error || !stat.power_enabled) {
 80039c4:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <main+0x38c>)
 80039c6:	89db      	ldrh	r3, [r3, #14]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d107      	bne.n	80039de <main+0x2e6>
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <main+0x38c>)
 80039d0:	7b1b      	ldrb	r3, [r3, #12]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f083 0301 	eor.w	r3, r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01a      	beq.n	8003a14 <main+0x31c>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <main+0x340>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80039e6:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <main+0x340>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <main+0x344>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
      powerOutputDisable();
 80039f6:	f7fe f8bf 	bl	8001b78 <powerOutputDisable>
      setErrorLedHigh();
 80039fa:	f7fe f8dd 	bl	8001bb8 <setErrorLedHigh>
      setOutSwLedLow();
 80039fe:	f7fe f8ff 	bl	8001c00 <setOutSwLedLow>
      mouseLedDisable();
 8003a02:	f7fe f8cf 	bl	8001ba4 <mouseLedDisable>
      stat.boost_cnt = 0;
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <main+0x38c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
      stat.kick_cnt = 0;
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <main+0x38c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	605a      	str	r2, [r3, #4]
      continue;
 8003a12:	e00b      	b.n	8003a2c <main+0x334>
    } else {
      mouseLedEnable();
 8003a14:	f7fe f8bc 	bl	8001b90 <mouseLedEnable>
      setOutSwLedHigh();
 8003a18:	f7fe f8e6 	bl	8001be8 <setOutSwLedHigh>
      setErrorLedLow();
 8003a1c:	f7fe f8d8 	bl	8001bd0 <setErrorLedLow>
      powerOutputEnable();
 8003a20:	f7fe f89e 	bl	8001b60 <powerOutputEnable>
    }

    kickControl();
 8003a24:	f7fe ffa4 	bl	8002970 <kickControl>
    boostControl();
 8003a28:	f7fe fed0 	bl	80027cc <boostControl>
    mouse_read_cnt++;
 8003a2c:	e77f      	b.n	800392e <main+0x236>
 8003a2e:	bf00      	nop
 8003a30:	0800ec58 	.word	0x0800ec58
 8003a34:	20000538 	.word	0x20000538
 8003a38:	200005d0 	.word	0x200005d0
 8003a3c:	20000584 	.word	0x20000584
 8003a40:	2000061c 	.word	0x2000061c
 8003a44:	200003ec 	.word	0x200003ec
 8003a48:	20000068 	.word	0x20000068
 8003a4c:	20000668 	.word	0x20000668
 8003a50:	200001f4 	.word	0x200001f4
 8003a54:	20000244 	.word	0x20000244
 8003a58:	20000294 	.word	0x20000294
 8003a5c:	0800ec74 	.word	0x0800ec74
 8003a60:	0800ec84 	.word	0x0800ec84
 8003a64:	447a0000 	.word	0x447a0000
 8003a68:	0800ec9c 	.word	0x0800ec9c
 8003a6c:	43160000 	.word	0x43160000
 8003a70:	200004a8 	.word	0x200004a8
 8003a74:	41f00000 	.word	0x41f00000
 8003a78:	c1200000 	.word	0xc1200000
 8003a7c:	41a00000 	.word	0x41a00000
 8003a80:	20000480 	.word	0x20000480
 8003a84:	20000464 	.word	0x20000464
 8003a88:	20000440 	.word	0x20000440

08003a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b09e      	sub	sp, #120	; 0x78
 8003a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a96:	2228      	movs	r2, #40	; 0x28
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f008 fd1e 	bl	800c4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aa0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	223c      	movs	r2, #60	; 0x3c
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f008 fd10 	bl	800c4dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003aca:	2301      	movs	r3, #1
 8003acc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ad6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003ad8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003adc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ade:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 fa7c 	bl	8006fe0 <HAL_RCC_OscConfig>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <SystemClock_Config+0x66>
    Error_Handler();
 8003aee:	f000 f830 	bl	8003b52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003af2:	230f      	movs	r3, #15
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003af6:	2302      	movs	r3, #2
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003afa:	2300      	movs	r3, #0
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b04:	2300      	movs	r3, #0
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003b08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 faa4 	bl	800805c <HAL_RCC_ClockConfig>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <SystemClock_Config+0x92>
    Error_Handler();
 8003b1a:	f000 f81a 	bl	8003b52 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_ADC12 | RCC_PERIPHCLK_ADC34;
 8003b1e:	f241 1381 	movw	r3, #4481	; 0x1181
 8003b22:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003b38:	463b      	mov	r3, r7
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fcc4 	bl	80084c8 <HAL_RCCEx_PeriphCLKConfig>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <SystemClock_Config+0xbe>
    Error_Handler();
 8003b46:	f000 f804 	bl	8003b52 <Error_Handler>
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3778      	adds	r7, #120	; 0x78
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b56:	b672      	cpsid	i
}
 8003b58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8003b5a:	e7fe      	b.n	8003b5a <Error_Handler+0x8>

08003b5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <MX_SPI1_Init+0x78>)
 8003b64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b74:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b7e:	2202      	movs	r2, #2
 8003b80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b92:	2228      	movs	r2, #40	; 0x28
 8003b94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003baa:	2207      	movs	r2, #7
 8003bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bba:	4805      	ldr	r0, [pc, #20]	; (8003bd0 <MX_SPI1_Init+0x74>)
 8003bbc:	f004 fe34 	bl	8008828 <HAL_SPI_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003bc6:	f7ff ffc4 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200004d0 	.word	0x200004d0
 8003bd4:	40013000 	.word	0x40013000

08003bd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_SPI_MspInit+0x7c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d127      	bne.n	8003c4a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <HAL_SPI_MspInit+0x80>)
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <HAL_SPI_MspInit+0x80>)
 8003c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c04:	6193      	str	r3, [r2, #24]
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_SPI_MspInit+0x80>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <HAL_SPI_MspInit+0x80>)
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <HAL_SPI_MspInit+0x80>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6153      	str	r3, [r2, #20]
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_SPI_MspInit+0x80>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003c2a:	2338      	movs	r3, #56	; 0x38
 8003c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c36:	2303      	movs	r3, #3
 8003c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4619      	mov	r1, r3
 8003c44:	4805      	ldr	r0, [pc, #20]	; (8003c5c <HAL_SPI_MspInit+0x84>)
 8003c46:	f003 f821 	bl	8006c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	3728      	adds	r7, #40	; 0x28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40013000 	.word	0x40013000
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	48000400 	.word	0x48000400

08003c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6193      	str	r3, [r2, #24]
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c88:	61d3      	str	r3, [r2, #28]
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_MspInit+0x44>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cac:	e7fe      	b.n	8003cac <NMI_Handler+0x4>

08003cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cb2:	e7fe      	b.n	8003cb2 <HardFault_Handler+0x4>

08003cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <MemManage_Handler+0x4>

08003cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cbe:	e7fe      	b.n	8003cbe <BusFault_Handler+0x4>

08003cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <UsageFault_Handler+0x4>

08003cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cf4:	f000 fd8e 	bl	8004814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <DMA1_Channel1_IRQHandler+0x10>)
 8003d02:	f002 feb5 	bl	8006a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200002e4 	.word	0x200002e4

08003d10 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <DMA1_Channel4_IRQHandler+0x10>)
 8003d16:	f002 feab 	bl	8006a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	200006f0 	.word	0x200006f0

08003d24 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8003d2a:	f002 fa44 	bl	80061b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200003ec 	.word	0x200003ec

08003d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <USART1_IRQHandler+0x10>)
 8003d3e:	f006 fb49 	bl	800a3d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000668 	.word	0x20000668

08003d4c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <DMA2_Channel2_IRQHandler+0x10>)
 8003d52:	f002 fe8d 	bl	8006a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000036c 	.word	0x2000036c

08003d60 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <DMA2_Channel5_IRQHandler+0x10>)
 8003d66:	f002 fe83 	bl	8006a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000328 	.word	0x20000328

08003d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
	return 1;
 8003d78:	2301      	movs	r3, #1
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <_kill>:

int _kill(int pid, int sig)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d8e:	f008 fbf7 	bl	800c580 <__errno>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2216      	movs	r2, #22
 8003d96:	601a      	str	r2, [r3, #0]
	return -1;
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <_exit>:

void _exit (int status)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dac:	f04f 31ff 	mov.w	r1, #4294967295
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ffe7 	bl	8003d84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003db6:	e7fe      	b.n	8003db6 <_exit+0x12>

08003db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e00a      	b.n	8003de0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dca:	f3af 8000 	nop.w
 8003dce:	4601      	mov	r1, r0
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	60ba      	str	r2, [r7, #8]
 8003dd6:	b2ca      	uxtb	r2, r1
 8003dd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	dbf0      	blt.n	8003dca <_read+0x12>
	}

return len;
 8003de8:	687b      	ldr	r3, [r7, #4]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e009      	b.n	8003e18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	60ba      	str	r2, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3301      	adds	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	dbf1      	blt.n	8003e04 <_write+0x12>
	}
	return len;
 8003e20:	687b      	ldr	r3, [r7, #4]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_close>:

int _close(int file)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
	return -1;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e52:	605a      	str	r2, [r3, #4]
	return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_isatty>:

int _isatty(int file)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	return 1;
 8003e6a:	2301      	movs	r3, #1
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	return 0;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <_sbrk+0x5c>)
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <_sbrk+0x60>)
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <_sbrk+0x64>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <_sbrk+0x64>)
 8003eb2:	4a12      	ldr	r2, [pc, #72]	; (8003efc <_sbrk+0x68>)
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <_sbrk+0x64>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d207      	bcs.n	8003ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ec4:	f008 fb5c 	bl	800c580 <__errno>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	220c      	movs	r2, #12
 8003ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	e009      	b.n	8003ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <_sbrk+0x64>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <_sbrk+0x64>)
 8003ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20008000 	.word	0x20008000
 8003ef4:	00000400 	.word	0x00000400
 8003ef8:	20000534 	.word	0x20000534
 8003efc:	20000ed0 	.word	0x20000ed0

08003f00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <SystemInit+0x20>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <SystemInit+0x20>)
 8003f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f2a:	f107 0310 	add.w	r3, r7, #16
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	605a      	str	r2, [r3, #4]
 8003f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f44:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <MX_TIM1_Init+0xa4>)
 8003f46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f4a:	2248      	movs	r2, #72	; 0x48
 8003f4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f6e:	4815      	ldr	r0, [pc, #84]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f70:	f005 f88c 	bl	800908c <HAL_TIM_Base_Init>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003f7a:	f7ff fdea 	bl	8003b52 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	4619      	mov	r1, r3
 8003f8a:	480e      	ldr	r0, [pc, #56]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003f8c:	f005 fba4 	bl	80096d8 <HAL_TIM_ConfigClockSource>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003f96:	f7ff fddc 	bl	8003b52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <MX_TIM1_Init+0xa0>)
 8003fac:	f006 f884 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003fb6:	f7ff fdcc 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003fba:	bf00      	nop
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000538 	.word	0x20000538
 8003fc8:	40012c00 	.word	0x40012c00

08003fcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd2:	f107 031c 	add.w	r3, r7, #28
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fde:	463b      	mov	r3, r7
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	611a      	str	r2, [r3, #16]
 8003fec:	615a      	str	r2, [r3, #20]
 8003fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <MX_TIM2_Init+0xb0>)
 8003ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ff8:	4b20      	ldr	r3, [pc, #128]	; (800407c <MX_TIM2_Init+0xb0>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffe:	4b1f      	ldr	r3, [pc, #124]	; (800407c <MX_TIM2_Init+0xb0>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <MX_TIM2_Init+0xb0>)
 8004006:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800400a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <MX_TIM2_Init+0xb0>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <MX_TIM2_Init+0xb0>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004018:	4818      	ldr	r0, [pc, #96]	; (800407c <MX_TIM2_Init+0xb0>)
 800401a:	f005 f8f1 	bl	8009200 <HAL_TIM_PWM_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004024:	f7ff fd95 	bl	8003b52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004030:	f107 031c 	add.w	r3, r7, #28
 8004034:	4619      	mov	r1, r3
 8004036:	4811      	ldr	r0, [pc, #68]	; (800407c <MX_TIM2_Init+0xb0>)
 8004038:	f006 f83e 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8004042:	f7ff fd86 	bl	8003b52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004046:	2360      	movs	r3, #96	; 0x60
 8004048:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004056:	463b      	mov	r3, r7
 8004058:	220c      	movs	r2, #12
 800405a:	4619      	mov	r1, r3
 800405c:	4807      	ldr	r0, [pc, #28]	; (800407c <MX_TIM2_Init+0xb0>)
 800405e:	f005 fa27 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8004068:	f7ff fd73 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800406c:	4803      	ldr	r0, [pc, #12]	; (800407c <MX_TIM2_Init+0xb0>)
 800406e:	f000 f92d 	bl	80042cc <HAL_TIM_MspPostInit>

}
 8004072:	bf00      	nop
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000584 	.word	0x20000584

08004080 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004086:	f107 031c 	add.w	r3, r7, #28
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004092:	463b      	mov	r3, r7
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
 80040a0:	615a      	str	r2, [r3, #20]
 80040a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040a6:	4a28      	ldr	r2, [pc, #160]	; (8004148 <MX_TIM3_Init+0xc8>)
 80040a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b0:	4b24      	ldr	r3, [pc, #144]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80040bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040be:	4b21      	ldr	r3, [pc, #132]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c4:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040ca:	481e      	ldr	r0, [pc, #120]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040cc:	f005 f898 	bl	8009200 <HAL_TIM_PWM_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80040d6:	f7ff fd3c 	bl	8003b52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040e2:	f107 031c 	add.w	r3, r7, #28
 80040e6:	4619      	mov	r1, r3
 80040e8:	4816      	ldr	r0, [pc, #88]	; (8004144 <MX_TIM3_Init+0xc4>)
 80040ea:	f005 ffe5 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80040f4:	f7ff fd2d 	bl	8003b52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040f8:	2360      	movs	r3, #96	; 0x60
 80040fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004100:	2300      	movs	r3, #0
 8004102:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004108:	463b      	mov	r3, r7
 800410a:	2200      	movs	r2, #0
 800410c:	4619      	mov	r1, r3
 800410e:	480d      	ldr	r0, [pc, #52]	; (8004144 <MX_TIM3_Init+0xc4>)
 8004110:	f005 f9ce 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800411a:	f7ff fd1a 	bl	8003b52 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800411e:	463b      	mov	r3, r7
 8004120:	2204      	movs	r2, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4807      	ldr	r0, [pc, #28]	; (8004144 <MX_TIM3_Init+0xc4>)
 8004126:	f005 f9c3 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004130:	f7ff fd0f 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004134:	4803      	ldr	r0, [pc, #12]	; (8004144 <MX_TIM3_Init+0xc4>)
 8004136:	f000 f8c9 	bl	80042cc <HAL_TIM_MspPostInit>

}
 800413a:	bf00      	nop
 800413c:	3728      	adds	r7, #40	; 0x28
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200005d0 	.word	0x200005d0
 8004148:	40000400 	.word	0x40000400

0800414c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004152:	f107 031c 	add.w	r3, r7, #28
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800415e:	463b      	mov	r3, r7
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
 800416c:	615a      	str	r2, [r3, #20]
 800416e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <MX_TIM4_Init+0xac>)
 8004172:	4a22      	ldr	r2, [pc, #136]	; (80041fc <MX_TIM4_Init+0xb0>)
 8004174:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <MX_TIM4_Init+0xac>)
 8004178:	2200      	movs	r2, #0
 800417a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417c:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <MX_TIM4_Init+0xac>)
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600;
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <MX_TIM4_Init+0xac>)
 8004184:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004188:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <MX_TIM4_Init+0xac>)
 800418c:	2200      	movs	r2, #0
 800418e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <MX_TIM4_Init+0xac>)
 8004192:	2200      	movs	r2, #0
 8004194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004196:	4818      	ldr	r0, [pc, #96]	; (80041f8 <MX_TIM4_Init+0xac>)
 8004198:	f005 f832 	bl	8009200 <HAL_TIM_PWM_Init>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80041a2:	f7ff fcd6 	bl	8003b52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041ae:	f107 031c 	add.w	r3, r7, #28
 80041b2:	4619      	mov	r1, r3
 80041b4:	4810      	ldr	r0, [pc, #64]	; (80041f8 <MX_TIM4_Init+0xac>)
 80041b6:	f005 ff7f 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80041c0:	f7ff fcc7 	bl	8003b52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041c4:	2360      	movs	r3, #96	; 0x60
 80041c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041d4:	463b      	mov	r3, r7
 80041d6:	2204      	movs	r2, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4807      	ldr	r0, [pc, #28]	; (80041f8 <MX_TIM4_Init+0xac>)
 80041dc:	f005 f968 	bl	80094b0 <HAL_TIM_PWM_ConfigChannel>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80041e6:	f7ff fcb4 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80041ea:	4803      	ldr	r0, [pc, #12]	; (80041f8 <MX_TIM4_Init+0xac>)
 80041ec:	f000 f86e 	bl	80042cc <HAL_TIM_MspPostInit>

}
 80041f0:	bf00      	nop
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	2000061c 	.word	0x2000061c
 80041fc:	40000800 	.word	0x40000800

08004200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <HAL_TIM_Base_MspInit+0x38>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10b      	bne.n	800422a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_TIM_Base_MspInit+0x3c>)
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <HAL_TIM_Base_MspInit+0x3c>)
 8004218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800421c:	6193      	str	r3, [r2, #24]
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_TIM_Base_MspInit+0x3c>)
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40021000 	.word	0x40021000

08004240 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004250:	d10c      	bne.n	800426c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	61d3      	str	r3, [r2, #28]
 800425e:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800426a:	e022      	b.n	80042b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <HAL_TIM_PWM_MspInit+0x84>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d10c      	bne.n	8004290 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	61d3      	str	r3, [r2, #28]
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]
}
 800428e:	e010      	b.n	80042b2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <HAL_TIM_PWM_MspInit+0x88>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10b      	bne.n	80042b2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	61d3      	str	r3, [r2, #28]
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_TIM_PWM_MspInit+0x80>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800

080042cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d11d      	bne.n	800432a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4a32      	ldr	r2, [pc, #200]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 80042f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f8:	6153      	str	r3, [r2, #20]
 80042fa:	4b30      	ldr	r3, [pc, #192]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BOOST_SW_Pin;
 8004306:	2308      	movs	r3, #8
 8004308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004316:	2301      	movs	r3, #1
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_SW_GPIO_Port, &GPIO_InitStruct);
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	4619      	mov	r1, r3
 8004320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004324:	f002 fcb2 	bl	8006c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004328:	e043      	b.n	80043b2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <HAL_TIM_MspPostInit+0xf4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d11d      	bne.n	8004370 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004334:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	4a20      	ldr	r2, [pc, #128]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433e:	6153      	str	r3, [r2, #20]
 8004340:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = KICK_1_Pin|KICK_2_Pin;
 800434c:	23c0      	movs	r3, #192	; 0xc0
 800434e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	2302      	movs	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800435c:	2302      	movs	r3, #2
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4619      	mov	r1, r3
 8004366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800436a:	f002 fc8f 	bl	8006c8c <HAL_GPIO_Init>
}
 800436e:	e020      	b.n	80043b2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <HAL_TIM_MspPostInit+0xf8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d11b      	bne.n	80043b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4a0f      	ldr	r2, [pc, #60]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 8004380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004384:	6153      	str	r3, [r2, #20]
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <HAL_TIM_MspPostInit+0xf0>)
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD_16M_PWM_Pin;
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	2302      	movs	r3, #2
 8004398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043a2:	2302      	movs	r3, #2
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GD_16M_PWM_GPIO_Port, &GPIO_InitStruct);
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	4619      	mov	r1, r3
 80043ac:	4806      	ldr	r0, [pc, #24]	; (80043c8 <HAL_TIM_MspPostInit+0xfc>)
 80043ae:	f002 fc6d 	bl	8006c8c <HAL_GPIO_Init>
}
 80043b2:	bf00      	nop
 80043b4:	3728      	adds	r7, #40	; 0x28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	48000400 	.word	0x48000400

080043cc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043d2:	4a14      	ldr	r2, [pc, #80]	; (8004424 <MX_USART1_UART_Init+0x58>)
 80043d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043d8:	4a13      	ldr	r2, [pc, #76]	; (8004428 <MX_USART1_UART_Init+0x5c>)
 80043da:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043f0:	220c      	movs	r2, #12
 80043f2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <MX_USART1_UART_Init+0x54>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <MX_USART1_UART_Init+0x54>)
 8004402:	2200      	movs	r2, #0
 8004404:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <MX_USART1_UART_Init+0x54>)
 8004408:	2200      	movs	r2, #0
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800440c:	4804      	ldr	r0, [pc, #16]	; (8004420 <MX_USART1_UART_Init+0x54>)
 800440e:	f005 fed3 	bl	800a1b8 <HAL_UART_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8004418:	f7ff fb9b 	bl	8003b52 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000668 	.word	0x20000668
 8004424:	40013800 	.word	0x40013800
 8004428:	001e8480 	.word	0x001e8480

0800442c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
 8004442:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <HAL_UART_MspInit+0xdc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d157      	bne.n	80044fe <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800444e:	4b2f      	ldr	r3, [pc, #188]	; (800450c <HAL_UART_MspInit+0xe0>)
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	4a2e      	ldr	r2, [pc, #184]	; (800450c <HAL_UART_MspInit+0xe0>)
 8004454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004458:	6193      	str	r3, [r2, #24]
 800445a:	4b2c      	ldr	r3, [pc, #176]	; (800450c <HAL_UART_MspInit+0xe0>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <HAL_UART_MspInit+0xe0>)
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4a28      	ldr	r2, [pc, #160]	; (800450c <HAL_UART_MspInit+0xe0>)
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	6153      	str	r3, [r2, #20]
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <HAL_UART_MspInit+0xe0>)
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800447e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004484:	2302      	movs	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800448c:	2303      	movs	r3, #3
 800448e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004490:	2307      	movs	r3, #7
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004494:	f107 0314 	add.w	r3, r7, #20
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800449e:	f002 fbf5 	bl	8006c8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044a4:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_UART_MspInit+0xe8>)
 80044a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044aa:	2210      	movs	r2, #16
 80044ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044b6:	2280      	movs	r2, #128	; 0x80
 80044b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044c0:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044cc:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80044d2:	480f      	ldr	r0, [pc, #60]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044d4:	f002 f9af 	bl	8006836 <HAL_DMA_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80044de:	f7ff fb38 	bl	8003b52 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044e6:	671a      	str	r2, [r3, #112]	; 0x70
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <HAL_UART_MspInit+0xe4>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044ee:	2200      	movs	r2, #0
 80044f0:	2100      	movs	r1, #0
 80044f2:	2025      	movs	r0, #37	; 0x25
 80044f4:	f002 f969 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044f8:	2025      	movs	r0, #37	; 0x25
 80044fa:	f002 f982 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80044fe:	bf00      	nop
 8004500:	3728      	adds	r7, #40	; 0x28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	200006f0 	.word	0x200006f0
 8004514:	40020044 	.word	0x40020044

08004518 <HAL_UART_TxCpltCallback>:
static char second_buf[UART_TEMP_BUF_SIZE];
volatile int second_buf_len = 0, first_buf_len = 0;
volatile bool sending_second_buf = false, sending_first_buf = false;
volatile bool is_in_printf_func = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

  if (sending_first_buf) {     // FIRST buf complete
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_UART_TxCpltCallback+0x9c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01d      	beq.n	8004566 <HAL_UART_TxCpltCallback+0x4e>
    sending_first_buf = false; // complete!
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_UART_TxCpltCallback+0x9c>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]

    if (second_buf_len > 0 && is_in_printf_func == false) { // another buffer?
 8004530:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_UART_TxCpltCallback+0xa0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	dd38      	ble.n	80045aa <HAL_UART_TxCpltCallback+0x92>
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <HAL_UART_TxCpltCallback+0xa4>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f083 0301 	eor.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d030      	beq.n	80045aa <HAL_UART_TxCpltCallback+0x92>
      sending_second_buf = true;
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_UART_TxCpltCallback+0xa8>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_UART_TxCpltCallback+0xa0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	491b      	ldr	r1, [pc, #108]	; (80045c4 <HAL_UART_TxCpltCallback+0xac>)
 8004558:	481b      	ldr	r0, [pc, #108]	; (80045c8 <HAL_UART_TxCpltCallback+0xb0>)
 800455a:	f005 febf 	bl	800a2dc <HAL_UART_Transmit_DMA>
      second_buf_len = 0;
 800455e:	4b16      	ldr	r3, [pc, #88]	; (80045b8 <HAL_UART_TxCpltCallback+0xa0>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
      sending_first_buf = true;
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
      first_buf_len = 0;
    }
  }
}
 8004564:	e021      	b.n	80045aa <HAL_UART_TxCpltCallback+0x92>
  } else if (sending_second_buf) { // SECOND buf complete
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <HAL_UART_TxCpltCallback+0xa8>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01c      	beq.n	80045aa <HAL_UART_TxCpltCallback+0x92>
    sending_second_buf = false;    // complete!
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_UART_TxCpltCallback+0xa8>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
    if (first_buf_len > 0 && is_in_printf_func == false) { // another buffer?
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_UART_TxCpltCallback+0xb4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	dd15      	ble.n	80045aa <HAL_UART_TxCpltCallback+0x92>
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <HAL_UART_TxCpltCallback+0xa4>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f083 0301 	eor.w	r3, r3, #1
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <HAL_UART_TxCpltCallback+0x92>
      sending_first_buf = true;
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_UART_TxCpltCallback+0x9c>)
 8004590:	2201      	movs	r2, #1
 8004592:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <HAL_UART_TxCpltCallback+0xb4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	490c      	ldr	r1, [pc, #48]	; (80045d0 <HAL_UART_TxCpltCallback+0xb8>)
 800459e:	480a      	ldr	r0, [pc, #40]	; (80045c8 <HAL_UART_TxCpltCallback+0xb0>)
 80045a0:	f005 fe9c 	bl	800a2dc <HAL_UART_Transmit_DMA>
      first_buf_len = 0;
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_UART_TxCpltCallback+0xb4>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000d7d 	.word	0x20000d7d
 80045b8:	20000d74 	.word	0x20000d74
 80045bc:	20000d7e 	.word	0x20000d7e
 80045c0:	20000d7c 	.word	0x20000d7c
 80045c4:	20000a54 	.word	0x20000a54
 80045c8:	20000668 	.word	0x20000668
 80045cc:	20000d78 	.word	0x20000d78
 80045d0:	20000734 	.word	0x20000734

080045d4 <p>:

void p(const char *format, ...) {
 80045d4:	b40f      	push	{r0, r1, r2, r3}
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, format);
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	607b      	str	r3, [r7, #4]
  is_in_printf_func = true;
 80045e2:	4b4c      	ldr	r3, [pc, #304]	; (8004714 <p+0x140>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]

  if (sending_first_buf) {
 80045e8:	4b4b      	ldr	r3, [pc, #300]	; (8004718 <p+0x144>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d030      	beq.n	8004654 <p+0x80>
    if (second_buf_len > UART_TEMP_BUF_SIZE / 2) {
 80045f2:	4b4a      	ldr	r3, [pc, #296]	; (800471c <p+0x148>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80045fa:	dd03      	ble.n	8004604 <p+0x30>
      is_in_printf_func = false;
 80045fc:	4b45      	ldr	r3, [pc, #276]	; (8004714 <p+0x140>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
      return;
 8004602:	e081      	b.n	8004708 <p+0x134>
    }
    second_buf_len += vsprintf(second_buf + second_buf_len, format, ap);
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <p+0x148>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	4b45      	ldr	r3, [pc, #276]	; (8004720 <p+0x14c>)
 800460c:	4413      	add	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6939      	ldr	r1, [r7, #16]
 8004612:	4618      	mov	r0, r3
 8004614:	f007 ff58 	bl	800c4c8 <vsiprintf>
 8004618:	4602      	mov	r2, r0
 800461a:	4b40      	ldr	r3, [pc, #256]	; (800471c <p+0x148>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4413      	add	r3, r2
 8004620:	4a3e      	ldr	r2, [pc, #248]	; (800471c <p+0x148>)
 8004622:	6013      	str	r3, [r2, #0]
    va_end(ap);
    if (sending_first_buf == false) {
 8004624:	4b3c      	ldr	r3, [pc, #240]	; (8004718 <p+0x144>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f083 0301 	eor.w	r3, r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d065      	beq.n	8004700 <p+0x12c>
      second_buf_len = (int)strlen(second_buf);
 8004634:	483a      	ldr	r0, [pc, #232]	; (8004720 <p+0x14c>)
 8004636:	f7fb fe1b 	bl	8000270 <strlen>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	4b37      	ldr	r3, [pc, #220]	; (800471c <p+0x148>)
 8004640:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len); // 2ms
 8004642:	4b36      	ldr	r3, [pc, #216]	; (800471c <p+0x148>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	4935      	ldr	r1, [pc, #212]	; (8004720 <p+0x14c>)
 800464c:	4835      	ldr	r0, [pc, #212]	; (8004724 <p+0x150>)
 800464e:	f005 fe45 	bl	800a2dc <HAL_UART_Transmit_DMA>
 8004652:	e055      	b.n	8004700 <p+0x12c>
    }
  } else if (sending_second_buf) {
 8004654:	4b34      	ldr	r3, [pc, #208]	; (8004728 <p+0x154>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d030      	beq.n	80046c0 <p+0xec>
    if (first_buf_len > UART_TEMP_BUF_SIZE / 2) {
 800465e:	4b33      	ldr	r3, [pc, #204]	; (800472c <p+0x158>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004666:	dd03      	ble.n	8004670 <p+0x9c>

      is_in_printf_func = false;
 8004668:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <p+0x140>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
      return;
 800466e:	e04b      	b.n	8004708 <p+0x134>
    }

    first_buf_len += vsprintf(first_buf + first_buf_len, format, ap);
 8004670:	4b2e      	ldr	r3, [pc, #184]	; (800472c <p+0x158>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <p+0x15c>)
 8004678:	4413      	add	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	4618      	mov	r0, r3
 8004680:	f007 ff22 	bl	800c4c8 <vsiprintf>
 8004684:	4602      	mov	r2, r0
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <p+0x158>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4413      	add	r3, r2
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <p+0x158>)
 800468e:	6013      	str	r3, [r2, #0]
    va_end(ap);

    if (sending_second_buf == false) {
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <p+0x154>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f083 0301 	eor.w	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02f      	beq.n	8004700 <p+0x12c>
      first_buf_len = (int)strlen(first_buf);
 80046a0:	4823      	ldr	r0, [pc, #140]	; (8004730 <p+0x15c>)
 80046a2:	f7fb fde5 	bl	8000270 <strlen>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <p+0x158>)
 80046ac:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <p+0x158>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	491e      	ldr	r1, [pc, #120]	; (8004730 <p+0x15c>)
 80046b8:	481a      	ldr	r0, [pc, #104]	; (8004724 <p+0x150>)
 80046ba:	f005 fe0f 	bl	800a2dc <HAL_UART_Transmit_DMA>
 80046be:	e01f      	b.n	8004700 <p+0x12c>
    }
  } else {
    // start !!
    first_buf_len = vsprintf(first_buf, format, ap);
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6939      	ldr	r1, [r7, #16]
 80046c4:	481a      	ldr	r0, [pc, #104]	; (8004730 <p+0x15c>)
 80046c6:	f007 feff 	bl	800c4c8 <vsiprintf>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a17      	ldr	r2, [pc, #92]	; (800472c <p+0x158>)
 80046ce:	6013      	str	r3, [r2, #0]
    va_end(ap);
    sending_first_buf = true;
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <p+0x144>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <p+0x158>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	4914      	ldr	r1, [pc, #80]	; (8004730 <p+0x15c>)
 80046e0:	4810      	ldr	r0, [pc, #64]	; (8004724 <p+0x150>)
 80046e2:	f005 fdfb 	bl	800a2dc <HAL_UART_Transmit_DMA>
    first_buf_len = (int)strlen(first_buf);
 80046e6:	4812      	ldr	r0, [pc, #72]	; (8004730 <p+0x15c>)
 80046e8:	f7fb fdc2 	bl	8000270 <strlen>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <p+0x158>)
 80046f2:	601a      	str	r2, [r3, #0]
    first_buf_len = 0;
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <p+0x158>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    second_buf_len = 0;
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <p+0x148>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
  }
  is_in_printf_func = false;
 8004700:	4b04      	ldr	r3, [pc, #16]	; (8004714 <p+0x140>)
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
  return;
 8004706:	bf00      	nop
}
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004710:	b004      	add	sp, #16
 8004712:	4770      	bx	lr
 8004714:	20000d7e 	.word	0x20000d7e
 8004718:	20000d7d 	.word	0x20000d7d
 800471c:	20000d74 	.word	0x20000d74
 8004720:	20000a54 	.word	0x20000a54
 8004724:	20000668 	.word	0x20000668
 8004728:	20000d7c 	.word	0x20000d7c
 800472c:	20000d78 	.word	0x20000d78
 8004730:	20000734 	.word	0x20000734

08004734 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800476c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004738:	480d      	ldr	r0, [pc, #52]	; (8004770 <LoopForever+0x6>)
  ldr r1, =_edata
 800473a:	490e      	ldr	r1, [pc, #56]	; (8004774 <LoopForever+0xa>)
  ldr r2, =_sidata
 800473c:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <LoopForever+0xe>)
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004740:	e002      	b.n	8004748 <LoopCopyDataInit>

08004742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004746:	3304      	adds	r3, #4

08004748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800474a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800474c:	d3f9      	bcc.n	8004742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800474e:	4a0b      	ldr	r2, [pc, #44]	; (800477c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004750:	4c0b      	ldr	r4, [pc, #44]	; (8004780 <LoopForever+0x16>)
  movs r3, #0
 8004752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004754:	e001      	b.n	800475a <LoopFillZerobss>

08004756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004758:	3204      	adds	r2, #4

0800475a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800475a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800475c:	d3fb      	bcc.n	8004756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800475e:	f7ff fbcf 	bl	8003f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004762:	f007 ff13 	bl	800c58c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004766:	f7fe ffc7 	bl	80036f8 <main>

0800476a <LoopForever>:

LoopForever:
    b LoopForever
 800476a:	e7fe      	b.n	800476a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800476c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004774:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004778:	0800f084 	.word	0x0800f084
  ldr r2, =_sbss
 800477c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004780:	20000ed0 	.word	0x20000ed0

08004784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004784:	e7fe      	b.n	8004784 <ADC1_2_IRQHandler>
	...

08004788 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_Init+0x28>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <HAL_Init+0x28>)
 8004792:	f043 0310 	orr.w	r3, r3, #16
 8004796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004798:	2003      	movs	r0, #3
 800479a:	f002 f80b 	bl	80067b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800479e:	200f      	movs	r0, #15
 80047a0:	f000 f808 	bl	80047b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a4:	f7ff fa5c 	bl	8003c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40022000 	.word	0x40022000

080047b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047bc:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_InitTick+0x54>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <HAL_InitTick+0x58>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	f002 f823 	bl	800681e <HAL_SYSTICK_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e00e      	b.n	8004800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b0f      	cmp	r3, #15
 80047e6:	d80a      	bhi.n	80047fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047e8:	2200      	movs	r2, #0
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	f001 ffeb 	bl	80067ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047f4:	4a06      	ldr	r2, [pc, #24]	; (8004810 <HAL_InitTick+0x5c>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000004 	.word	0x20000004
 800480c:	2000000c 	.word	0x2000000c
 8004810:	20000008 	.word	0x20000008

08004814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_IncTick+0x20>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_IncTick+0x24>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4413      	add	r3, r2
 8004824:	4a04      	ldr	r2, [pc, #16]	; (8004838 <HAL_IncTick+0x24>)
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000000c 	.word	0x2000000c
 8004838:	20000d80 	.word	0x20000d80

0800483c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return uwTick;  
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_GetTick+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000d80 	.word	0x20000d80

08004854 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7ff ffee 	bl	800483c <HAL_GetTick>
 8004860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d005      	beq.n	800487a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_Delay+0x44>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800487a:	bf00      	nop
 800487c:	f7ff ffde 	bl	800483c <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d8f7      	bhi.n	800487c <HAL_Delay+0x28>
  {
  }
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	2000000c 	.word	0x2000000c

0800489c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b09a      	sub	sp, #104	; 0x68
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e1c9      	b.n	8004c50 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d176      	bne.n	80049bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d152      	bne.n	800497c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fc fb3f 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d13b      	bne.n	800497c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 ffcf 	bl	80058a8 <ADC_Disable>
 800490a:	4603      	mov	r3, r0
 800490c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d12f      	bne.n	800497c <HAL_ADC_Init+0xe0>
 800491c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004920:	2b00      	cmp	r3, #0
 8004922:	d12b      	bne.n	800497c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800492c:	f023 0302 	bic.w	r3, r3, #2
 8004930:	f043 0202 	orr.w	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004946:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004956:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004958:	4b86      	ldr	r3, [pc, #536]	; (8004b74 <HAL_ADC_Init+0x2d8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a86      	ldr	r2, [pc, #536]	; (8004b78 <HAL_ADC_Init+0x2dc>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0c9a      	lsrs	r2, r3, #18
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800496e:	e002      	b.n	8004976 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	3b01      	subs	r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f9      	bne.n	8004970 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004998:	d110      	bne.n	80049bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f023 0312 	bic.w	r3, r3, #18
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 8136 	bne.w	8004c36 <HAL_ADC_Init+0x39a>
 80049ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 8131 	bne.w	8004c36 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 8129 	bne.w	8004c36 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049ec:	f043 0202 	orr.w	r2, r3, #2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049fc:	d004      	beq.n	8004a08 <HAL_ADC_Init+0x16c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a5e      	ldr	r2, [pc, #376]	; (8004b7c <HAL_ADC_Init+0x2e0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d101      	bne.n	8004a0c <HAL_ADC_Init+0x170>
 8004a08:	4b5d      	ldr	r3, [pc, #372]	; (8004b80 <HAL_ADC_Init+0x2e4>)
 8004a0a:	e000      	b.n	8004a0e <HAL_ADC_Init+0x172>
 8004a0c:	4b5d      	ldr	r3, [pc, #372]	; (8004b84 <HAL_ADC_Init+0x2e8>)
 8004a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a18:	d102      	bne.n	8004a20 <HAL_ADC_Init+0x184>
 8004a1a:	4b58      	ldr	r3, [pc, #352]	; (8004b7c <HAL_ADC_Init+0x2e0>)
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e01a      	b.n	8004a56 <HAL_ADC_Init+0x1ba>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a55      	ldr	r2, [pc, #340]	; (8004b7c <HAL_ADC_Init+0x2e0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d103      	bne.n	8004a32 <HAL_ADC_Init+0x196>
 8004a2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	e011      	b.n	8004a56 <HAL_ADC_Init+0x1ba>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a54      	ldr	r2, [pc, #336]	; (8004b88 <HAL_ADC_Init+0x2ec>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <HAL_ADC_Init+0x1a6>
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_ADC_Init+0x2f0>)
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e009      	b.n	8004a56 <HAL_ADC_Init+0x1ba>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a51      	ldr	r2, [pc, #324]	; (8004b8c <HAL_ADC_Init+0x2f0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d102      	bne.n	8004a52 <HAL_ADC_Init+0x1b6>
 8004a4c:	4b4e      	ldr	r3, [pc, #312]	; (8004b88 <HAL_ADC_Init+0x2ec>)
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e001      	b.n	8004a56 <HAL_ADC_Init+0x1ba>
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d108      	bne.n	8004a76 <HAL_ADC_Init+0x1da>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_Init+0x1da>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_ADC_Init+0x1dc>
 8004a76:	2300      	movs	r3, #0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11c      	bne.n	8004ab6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d010      	beq.n	8004aa4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <HAL_ADC_Init+0x202>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_ADC_Init+0x202>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_ADC_Init+0x204>
 8004a9e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7e5b      	ldrb	r3, [r3, #25]
 8004aba:	035b      	lsls	r3, r3, #13
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ac0:	2a01      	cmp	r2, #1
 8004ac2:	d002      	beq.n	8004aca <HAL_ADC_Init+0x22e>
 8004ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ac8:	e000      	b.n	8004acc <HAL_ADC_Init+0x230>
 8004aca:	2200      	movs	r2, #0
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004adc:	4313      	orrs	r3, r2
 8004ade:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d11b      	bne.n	8004b22 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7e5b      	ldrb	r3, [r3, #25]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	3b01      	subs	r3, #1
 8004af8:	045a      	lsls	r2, r3, #17
 8004afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b02:	663b      	str	r3, [r7, #96]	; 0x60
 8004b04:	e00d      	b.n	8004b22 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f043 0201 	orr.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d03a      	beq.n	8004ba0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <HAL_ADC_Init+0x2ec>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_ADC_Init+0x2a2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <HAL_ADC_Init+0x2f0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d128      	bne.n	8004b90 <HAL_ADC_Init+0x2f4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004b46:	d012      	beq.n	8004b6e <HAL_ADC_Init+0x2d2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b50:	d00a      	beq.n	8004b68 <HAL_ADC_Init+0x2cc>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004b5a:	d002      	beq.n	8004b62 <HAL_ADC_Init+0x2c6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	e018      	b.n	8004b94 <HAL_ADC_Init+0x2f8>
 8004b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b66:	e015      	b.n	8004b94 <HAL_ADC_Init+0x2f8>
 8004b68:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004b6c:	e012      	b.n	8004b94 <HAL_ADC_Init+0x2f8>
 8004b6e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004b72:	e00f      	b.n	8004b94 <HAL_ADC_Init+0x2f8>
 8004b74:	20000004 	.word	0x20000004
 8004b78:	431bde83 	.word	0x431bde83
 8004b7c:	50000100 	.word	0x50000100
 8004b80:	50000300 	.word	0x50000300
 8004b84:	50000700 	.word	0x50000700
 8004b88:	50000400 	.word	0x50000400
 8004b8c:	50000500 	.word	0x50000500
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d114      	bne.n	8004bd8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bbc:	f023 0302 	bic.w	r3, r3, #2
 8004bc0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	7e1b      	ldrb	r3, [r3, #24]
 8004bc6:	039a      	lsls	r2, r3, #14
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <HAL_ADC_Init+0x3bc>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004be8:	430b      	orrs	r3, r1
 8004bea:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10c      	bne.n	8004c0e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f023 010f 	bic.w	r1, r3, #15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c0c:	e007      	b.n	8004c1e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 020f 	bic.w	r2, r2, #15
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f023 0303 	bic.w	r3, r3, #3
 8004c2c:	f043 0201 	orr.w	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
 8004c34:	e00a      	b.n	8004c4c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f023 0312 	bic.w	r3, r3, #18
 8004c3e:	f043 0210 	orr.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3768      	adds	r7, #104	; 0x68
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	fff0c007 	.word	0xfff0c007

08004c5c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 80f9 	bne.w	8004e6a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_Start+0x2a>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e0f4      	b.n	8004e70 <HAL_ADC_Start+0x214>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fda6 	bl	80057e0 <ADC_Enable>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 80e0 	bne.w	8004e60 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cbc:	d004      	beq.n	8004cc8 <HAL_ADC_Start+0x6c>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6d      	ldr	r2, [pc, #436]	; (8004e78 <HAL_ADC_Start+0x21c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d106      	bne.n	8004cd6 <HAL_ADC_Start+0x7a>
 8004cc8:	4b6c      	ldr	r3, [pc, #432]	; (8004e7c <HAL_ADC_Start+0x220>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d010      	beq.n	8004cf6 <HAL_ADC_Start+0x9a>
 8004cd4:	e005      	b.n	8004ce2 <HAL_ADC_Start+0x86>
 8004cd6:	4b6a      	ldr	r3, [pc, #424]	; (8004e80 <HAL_ADC_Start+0x224>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_ADC_Start+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cea:	d004      	beq.n	8004cf6 <HAL_ADC_Start+0x9a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a64      	ldr	r2, [pc, #400]	; (8004e84 <HAL_ADC_Start+0x228>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d115      	bne.n	8004d22 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d036      	beq.n	8004d7e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004d20:	e02d      	b.n	8004d7e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d36:	d004      	beq.n	8004d42 <HAL_ADC_Start+0xe6>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a4e      	ldr	r2, [pc, #312]	; (8004e78 <HAL_ADC_Start+0x21c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10a      	bne.n	8004d58 <HAL_ADC_Start+0xfc>
 8004d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_ADC_Start+0x10e>
 8004d58:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <HAL_ADC_Start+0x228>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d106      	bne.n	8004d9a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	f023 0206 	bic.w	r2, r3, #6
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	645a      	str	r2, [r3, #68]	; 0x44
 8004d98:	e002      	b.n	8004da0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	221c      	movs	r2, #28
 8004dae:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db8:	d004      	beq.n	8004dc4 <HAL_ADC_Start+0x168>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2e      	ldr	r2, [pc, #184]	; (8004e78 <HAL_ADC_Start+0x21c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d106      	bne.n	8004dd2 <HAL_ADC_Start+0x176>
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_ADC_Start+0x220>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d03e      	beq.n	8004e4e <HAL_ADC_Start+0x1f2>
 8004dd0:	e005      	b.n	8004dde <HAL_ADC_Start+0x182>
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <HAL_ADC_Start+0x224>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d037      	beq.n	8004e4e <HAL_ADC_Start+0x1f2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de6:	d004      	beq.n	8004df2 <HAL_ADC_Start+0x196>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <HAL_ADC_Start+0x21c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d106      	bne.n	8004e00 <HAL_ADC_Start+0x1a4>
 8004df2:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <HAL_ADC_Start+0x220>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d027      	beq.n	8004e4e <HAL_ADC_Start+0x1f2>
 8004dfe:	e005      	b.n	8004e0c <HAL_ADC_Start+0x1b0>
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <HAL_ADC_Start+0x224>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	d020      	beq.n	8004e4e <HAL_ADC_Start+0x1f2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e14:	d004      	beq.n	8004e20 <HAL_ADC_Start+0x1c4>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_ADC_Start+0x21c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d106      	bne.n	8004e2e <HAL_ADC_Start+0x1d2>
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_ADC_Start+0x220>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	2b09      	cmp	r3, #9
 8004e2a:	d010      	beq.n	8004e4e <HAL_ADC_Start+0x1f2>
 8004e2c:	e005      	b.n	8004e3a <HAL_ADC_Start+0x1de>
 8004e2e:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <HAL_ADC_Start+0x224>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2b09      	cmp	r3, #9
 8004e38:	d009      	beq.n	8004e4e <HAL_ADC_Start+0x1f2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e42:	d004      	beq.n	8004e4e <HAL_ADC_Start+0x1f2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0e      	ldr	r2, [pc, #56]	; (8004e84 <HAL_ADC_Start+0x228>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10f      	bne.n	8004e6e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0204 	orr.w	r2, r2, #4
 8004e5c:	609a      	str	r2, [r3, #8]
 8004e5e:	e006      	b.n	8004e6e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e68:	e001      	b.n	8004e6e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	50000100 	.word	0x50000100
 8004e7c:	50000300 	.word	0x50000300
 8004e80:	50000700 	.word	0x50000700
 8004e84:	50000400 	.word	0x50000400

08004e88 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d009      	beq.n	8004eb0 <HAL_ADCEx_InjectedGetValue+0x28>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d818      	bhi.n	8004ed4 <HAL_ADCEx_InjectedGetValue+0x4c>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d00f      	beq.n	8004ec8 <HAL_ADCEx_InjectedGetValue+0x40>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d006      	beq.n	8004ebc <HAL_ADCEx_InjectedGetValue+0x34>
 8004eae:	e011      	b.n	8004ed4 <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb8:	60fb      	str	r3, [r7, #12]
      break;
 8004eba:	e011      	b.n	8004ee0 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	60fb      	str	r3, [r7, #12]
      break;
 8004ec6:	e00b      	b.n	8004ee0 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed0:	60fb      	str	r3, [r7, #12]
      break;
 8004ed2:	e005      	b.n	8004ee0 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004edc:	60fb      	str	r3, [r7, #12]
      break;
 8004ede:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b09d      	sub	sp, #116	; 0x74
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e362      	b.n	80055dc <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d151      	bne.n	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d143      	bne.n	8004fbe <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d02b      	beq.n	8004f96 <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4984      	ldr	r1, [pc, #528]	; (800515c <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	d004      	beq.n	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x68>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4983      	ldr	r1, [pc, #524]	; (8005160 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8004f54:	428b      	cmp	r3, r1
 8004f56:	d114      	bne.n	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x92>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d00e      	beq.n	8004f7e <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	2b14      	cmp	r3, #20
 8004f66:	d008      	beq.n	8004f7a <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	2b1c      	cmp	r3, #28
 8004f6e:	d002      	beq.n	8004f76 <HAL_ADCEx_InjectedConfigChannel+0x86>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	e007      	b.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8004f76:	2310      	movs	r3, #16
 8004f78:	e005      	b.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8004f7a:	231c      	movs	r3, #28
 8004f7c:	e003      	b.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8004f7e:	2334      	movs	r3, #52	; 0x34
 8004f80:	e001      	b.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f90:	4313      	orrs	r3, r2
 8004f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f94:	e005      	b.n	8004fa2 <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa8:	4b6e      	ldr	r3, [pc, #440]	; (8005164 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fba:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004fbc:	e07f      	b.n	80050be <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004fd0:	e075      	b.n	80050be <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d140      	bne.n	800505c <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d02d      	beq.n	800504c <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	1e59      	subs	r1, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4857      	ldr	r0, [pc, #348]	; (800515c <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8005000:	4283      	cmp	r3, r0
 8005002:	d004      	beq.n	800500e <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4855      	ldr	r0, [pc, #340]	; (8005160 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 800500a:	4283      	cmp	r3, r0
 800500c:	d114      	bne.n	8005038 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	2b08      	cmp	r3, #8
 8005014:	d00e      	beq.n	8005034 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	2b14      	cmp	r3, #20
 800501c:	d008      	beq.n	8005030 <HAL_ADCEx_InjectedConfigChannel+0x140>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	2b1c      	cmp	r3, #28
 8005024:	d002      	beq.n	800502c <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	e007      	b.n	800503c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800502c:	2310      	movs	r3, #16
 800502e:	e005      	b.n	800503c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005030:	231c      	movs	r3, #28
 8005032:	e003      	b.n	800503c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005034:	2334      	movs	r3, #52	; 0x34
 8005036:	e001      	b.n	800503c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	4319      	orrs	r1, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	430b      	orrs	r3, r1
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	649a      	str	r2, [r3, #72]	; 0x48
 800504a:	e007      	b.n	800505c <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	3b01      	subs	r3, #1
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4413      	add	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	3302      	adds	r3, #2
 800506e:	221f      	movs	r2, #31
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	4019      	ands	r1, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	3302      	adds	r3, #2
 800508a:	fa00 f303 	lsl.w	r3, r0, r3
 800508e:	ea41 0203 	orr.w	r2, r1, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509a:	1e5a      	subs	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ae:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	430b      	orrs	r3, r1
 80050bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d12d      	bne.n	8005128 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	7f5b      	ldrb	r3, [r3, #29]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d110      	bne.n	80050f6 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	7f9b      	ldrb	r3, [r3, #30]
 80050e2:	055a      	lsls	r2, r3, #21
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	7f1b      	ldrb	r3, [r3, #28]
 80050e8:	051b      	lsls	r3, r3, #20
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	e018      	b.n	8005128 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	7f9b      	ldrb	r3, [r3, #30]
 8005104:	055a      	lsls	r2, r3, #21
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	7f1b      	ldrb	r3, [r3, #28]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d108      	bne.n	8005128 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b00      	cmp	r3, #0
 8005134:	f040 8111 	bne.w	800535a <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d113      	bne.n	8005168 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	7f5b      	ldrb	r3, [r3, #29]
 800514e:	065a      	lsls	r2, r3, #25
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]
 8005158:	e01b      	b.n	8005192 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 800515a:	bf00      	nop
 800515c:	50000400 	.word	0x50000400
 8005160:	50000500 	.word	0x50000500
 8005164:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005176:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	7f5b      	ldrb	r3, [r3, #29]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d108      	bne.n	8005192 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b09      	cmp	r3, #9
 8005198:	d91c      	bls.n	80051d4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6999      	ldr	r1, [r3, #24]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4413      	add	r3, r2
 80051aa:	3b1e      	subs	r3, #30
 80051ac:	2207      	movs	r2, #7
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43db      	mvns	r3, r3
 80051b4:	4019      	ands	r1, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6898      	ldr	r0, [r3, #8]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	3b1e      	subs	r3, #30
 80051c6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	619a      	str	r2, [r3, #24]
 80051d2:	e019      	b.n	8005208 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6959      	ldr	r1, [r3, #20]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	2207      	movs	r2, #7
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	4019      	ands	r1, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6898      	ldr	r0, [r3, #8]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	fa00 f203 	lsl.w	r2, r0, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	08db      	lsrs	r3, r3, #3
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	3b01      	subs	r3, #1
 8005226:	2b03      	cmp	r3, #3
 8005228:	d84e      	bhi.n	80052c8 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	08005263 	.word	0x08005263
 8005238:	08005285 	.word	0x08005285
 800523c:	080052a7 	.word	0x080052a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005246:	4b99      	ldr	r3, [pc, #612]	; (80054ac <HAL_ADCEx_InjectedConfigChannel+0x5bc>)
 8005248:	4013      	ands	r3, r2
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	0691      	lsls	r1, r2, #26
 8005250:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005252:	430a      	orrs	r2, r1
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800525e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005260:	e07b      	b.n	800535a <HAL_ADCEx_InjectedConfigChannel+0x46a>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005268:	4b90      	ldr	r3, [pc, #576]	; (80054ac <HAL_ADCEx_InjectedConfigChannel+0x5bc>)
 800526a:	4013      	ands	r3, r2
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	0691      	lsls	r1, r2, #26
 8005272:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005274:	430a      	orrs	r2, r1
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005280:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8005282:	e06a      	b.n	800535a <HAL_ADCEx_InjectedConfigChannel+0x46a>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800528a:	4b88      	ldr	r3, [pc, #544]	; (80054ac <HAL_ADCEx_InjectedConfigChannel+0x5bc>)
 800528c:	4013      	ands	r3, r2
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	0691      	lsls	r1, r2, #26
 8005294:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005296:	430a      	orrs	r2, r1
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80052a4:	e059      	b.n	800535a <HAL_ADCEx_InjectedConfigChannel+0x46a>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052ac:	4b7f      	ldr	r3, [pc, #508]	; (80054ac <HAL_ADCEx_InjectedConfigChannel+0x5bc>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	0691      	lsls	r1, r2, #26
 80052b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052b8:	430a      	orrs	r2, r1
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80052c6:	e048      	b.n	800535a <HAL_ADCEx_InjectedConfigChannel+0x46a>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	069b      	lsls	r3, r3, #26
 80052d8:	429a      	cmp	r2, r3
 80052da:	d107      	bne.n	80052ec <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	069b      	lsls	r3, r3, #26
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d107      	bne.n	8005310 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800530e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	069b      	lsls	r3, r3, #26
 8005320:	429a      	cmp	r2, r3
 8005322:	d107      	bne.n	8005334 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005332:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	069b      	lsls	r3, r3, #26
 8005344:	429a      	cmp	r2, r3
 8005346:	d107      	bne.n	8005358 <HAL_ADCEx_InjectedConfigChannel+0x468>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005356:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005358:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d108      	bne.n	800537a <HAL_ADCEx_InjectedConfigChannel+0x48a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_ADCEx_InjectedConfigChannel+0x48a>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <HAL_ADCEx_InjectedConfigChannel+0x48c>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	f040 8127 	bne.w	80055d0 <HAL_ADCEx_InjectedConfigChannel+0x6e0>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d00f      	beq.n	80053aa <HAL_ADCEx_InjectedConfigChannel+0x4ba>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2201      	movs	r2, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43da      	mvns	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	400a      	ands	r2, r1
 80053a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80053a8:	e049      	b.n	800543e <HAL_ADCEx_InjectedConfigChannel+0x54e>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2201      	movs	r2, #1
 80053b8:	409a      	lsls	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b09      	cmp	r3, #9
 80053ca:	d91c      	bls.n	8005406 <HAL_ADCEx_InjectedConfigChannel+0x516>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	3b1b      	subs	r3, #27
 80053de:	2207      	movs	r2, #7
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	4019      	ands	r1, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6898      	ldr	r0, [r3, #8]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	4413      	add	r3, r2
 80053f6:	3b1b      	subs	r3, #27
 80053f8:	fa00 f203 	lsl.w	r2, r0, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	619a      	str	r2, [r3, #24]
 8005404:	e01b      	b.n	800543e <HAL_ADCEx_InjectedConfigChannel+0x54e>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6959      	ldr	r1, [r3, #20]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	4613      	mov	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4413      	add	r3, r2
 8005418:	2207      	movs	r2, #7
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43db      	mvns	r3, r3
 8005420:	4019      	ands	r1, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6898      	ldr	r0, [r3, #8]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	4613      	mov	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	4413      	add	r3, r2
 8005432:	fa00 f203 	lsl.w	r2, r0, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005446:	d004      	beq.n	8005452 <HAL_ADCEx_InjectedConfigChannel+0x562>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <HAL_ADCEx_InjectedConfigChannel+0x566>
 8005452:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8005454:	e000      	b.n	8005458 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8005456:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 8005458:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b10      	cmp	r3, #16
 8005460:	d105      	bne.n	800546e <HAL_ADCEx_InjectedConfigChannel+0x57e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <HAL_ADCEx_InjectedConfigChannel+0x5aa>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005472:	2b11      	cmp	r3, #17
 8005474:	d105      	bne.n	8005482 <HAL_ADCEx_InjectedConfigChannel+0x592>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_ADCEx_InjectedConfigChannel+0x5aa>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005486:	2b12      	cmp	r3, #18
 8005488:	f040 80a2 	bne.w	80055d0 <HAL_ADCEx_InjectedConfigChannel+0x6e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800548c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8005494:	2b00      	cmp	r3, #0
 8005496:	f040 809b 	bne.w	80055d0 <HAL_ADCEx_InjectedConfigChannel+0x6e0>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054a2:	d10b      	bne.n	80054bc <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80054a4:	4b02      	ldr	r3, [pc, #8]	; (80054b0 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e023      	b.n	80054f2 <HAL_ADCEx_InjectedConfigChannel+0x602>
 80054aa:	bf00      	nop
 80054ac:	83fff000 	.word	0x83fff000
 80054b0:	50000100 	.word	0x50000100
 80054b4:	50000300 	.word	0x50000300
 80054b8:	50000700 	.word	0x50000700
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a49      	ldr	r2, [pc, #292]	; (80055e8 <HAL_ADCEx_InjectedConfigChannel+0x6f8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d103      	bne.n	80054ce <HAL_ADCEx_InjectedConfigChannel+0x5de>
 80054c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e011      	b.n	80054f2 <HAL_ADCEx_InjectedConfigChannel+0x602>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a46      	ldr	r2, [pc, #280]	; (80055ec <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d102      	bne.n	80054de <HAL_ADCEx_InjectedConfigChannel+0x5ee>
 80054d8:	4b45      	ldr	r3, [pc, #276]	; (80055f0 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	e009      	b.n	80054f2 <HAL_ADCEx_InjectedConfigChannel+0x602>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a43      	ldr	r2, [pc, #268]	; (80055f0 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d102      	bne.n	80054ee <HAL_ADCEx_InjectedConfigChannel+0x5fe>
 80054e8:	4b40      	ldr	r3, [pc, #256]	; (80055ec <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	e001      	b.n	80054f2 <HAL_ADCEx_InjectedConfigChannel+0x602>
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d108      	bne.n	8005512 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_ADCEx_InjectedConfigChannel+0x622>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <HAL_ADCEx_InjectedConfigChannel+0x624>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d150      	bne.n	80055ba <HAL_ADCEx_InjectedConfigChannel+0x6ca>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005518:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <HAL_ADCEx_InjectedConfigChannel+0x650>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <HAL_ADCEx_InjectedConfigChannel+0x64a>
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_ADCEx_InjectedConfigChannel+0x64a>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_ADCEx_InjectedConfigChannel+0x64c>
 800553a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800553c:	2b00      	cmp	r3, #0
 800553e:	d13c      	bne.n	80055ba <HAL_ADCEx_InjectedConfigChannel+0x6ca>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d11d      	bne.n	8005584 <HAL_ADCEx_InjectedConfigChannel+0x694>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005550:	d118      	bne.n	8005584 <HAL_ADCEx_InjectedConfigChannel+0x694>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	0c9a      	lsrs	r2, r3, #18
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8005574:	e002      	b.n	800557c <HAL_ADCEx_InjectedConfigChannel+0x68c>
          {
            wait_loop_index--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3b01      	subs	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f9      	bne.n	8005576 <HAL_ADCEx_InjectedConfigChannel+0x686>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005582:	e024      	b.n	80055ce <HAL_ADCEx_InjectedConfigChannel+0x6de>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b11      	cmp	r3, #17
 800558a:	d10b      	bne.n	80055a4 <HAL_ADCEx_InjectedConfigChannel+0x6b4>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005594:	d106      	bne.n	80055a4 <HAL_ADCEx_InjectedConfigChannel+0x6b4>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800559e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055a0:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055a2:	e014      	b.n	80055ce <HAL_ADCEx_InjectedConfigChannel+0x6de>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b12      	cmp	r3, #18
 80055aa:	d110      	bne.n	80055ce <HAL_ADCEx_InjectedConfigChannel+0x6de>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80055ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80055b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b6:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055b8:	e009      	b.n	80055ce <HAL_ADCEx_InjectedConfigChannel+0x6de>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f043 0220 	orr.w	r2, r3, #32
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80055cc:	e000      	b.n	80055d0 <HAL_ADCEx_InjectedConfigChannel+0x6e0>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055ce:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80055d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3774      	adds	r7, #116	; 0x74
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	50000100 	.word	0x50000100
 80055ec:	50000400 	.word	0x50000400
 80055f0:	50000500 	.word	0x50000500
 80055f4:	20000004 	.word	0x20000004
 80055f8:	431bde83 	.word	0x431bde83

080055fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b099      	sub	sp, #100	; 0x64
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005614:	d102      	bne.n	800561c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005616:	4b6d      	ldr	r3, [pc, #436]	; (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	e01a      	b.n	8005652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a6a      	ldr	r2, [pc, #424]	; (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d103      	bne.n	800562e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	e011      	b.n	8005652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a67      	ldr	r2, [pc, #412]	; (80057d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d102      	bne.n	800563e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005638:	4b66      	ldr	r3, [pc, #408]	; (80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800563a:	60bb      	str	r3, [r7, #8]
 800563c:	e009      	b.n	8005652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a64      	ldr	r2, [pc, #400]	; (80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d102      	bne.n	800564e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005648:	4b61      	ldr	r3, [pc, #388]	; (80057d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	e001      	b.n	8005652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0b0      	b.n	80057be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005666:	2302      	movs	r3, #2
 8005668:	e0a9      	b.n	80057be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	f040 808d 	bne.w	800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 8086 	bne.w	800579c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005698:	d004      	beq.n	80056a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a4b      	ldr	r2, [pc, #300]	; (80057cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80056a4:	4b4c      	ldr	r3, [pc, #304]	; (80057d8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80056a6:	e000      	b.n	80056aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80056a8:	4b4c      	ldr	r3, [pc, #304]	; (80057dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80056aa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d040      	beq.n	8005736 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80056b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056c6:	035b      	lsls	r3, r3, #13
 80056c8:	430b      	orrs	r3, r1
 80056ca:	431a      	orrs	r2, r3
 80056cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d108      	bne.n	80056f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80056f0:	2300      	movs	r3, #0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d15c      	bne.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d107      	bne.n	8005712 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005712:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005714:	2b00      	cmp	r3, #0
 8005716:	d14b      	bne.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005720:	f023 030f 	bic.w	r3, r3, #15
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	6811      	ldr	r1, [r2, #0]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	6892      	ldr	r2, [r2, #8]
 800572c:	430a      	orrs	r2, r1
 800572e:	431a      	orrs	r2, r3
 8005730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005732:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005734:	e03c      	b.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800573e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005740:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d108      	bne.n	8005762 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d123      	bne.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b01      	cmp	r3, #1
 8005772:	d107      	bne.n	8005784 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005784:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005786:	2b00      	cmp	r3, #0
 8005788:	d112      	bne.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800578a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005792:	f023 030f 	bic.w	r3, r3, #15
 8005796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005798:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800579a:	e009      	b.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80057ae:	e000      	b.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80057b0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80057ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80057be:	4618      	mov	r0, r3
 80057c0:	3764      	adds	r7, #100	; 0x64
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	50000100 	.word	0x50000100
 80057d0:	50000400 	.word	0x50000400
 80057d4:	50000500 	.word	0x50000500
 80057d8:	50000300 	.word	0x50000300
 80057dc:	50000700 	.word	0x50000700

080057e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d108      	bne.n	800580c <ADC_Enable+0x2c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <ADC_Enable+0x2c>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <ADC_Enable+0x2e>
 800580c:	2300      	movs	r3, #0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d143      	bne.n	800589a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <ADC_Enable+0xc4>)
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0210 	orr.w	r2, r3, #16
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e02f      	b.n	800589c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800584c:	f7fe fff6 	bl	800483c <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005852:	e01b      	b.n	800588c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005854:	f7fe fff2 	bl	800483c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d914      	bls.n	800588c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d00d      	beq.n	800588c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	f043 0210 	orr.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f043 0201 	orr.w	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e007      	b.n	800589c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b01      	cmp	r3, #1
 8005898:	d1dc      	bne.n	8005854 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	8000003f 	.word	0x8000003f

080058a8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d108      	bne.n	80058d4 <ADC_Disable+0x2c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <ADC_Disable+0x2c>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <ADC_Disable+0x2e>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d047      	beq.n	800596a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 030d 	and.w	r3, r3, #13
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d10f      	bne.n	8005908 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0202 	orr.w	r2, r2, #2
 80058f6:	609a      	str	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2203      	movs	r2, #3
 80058fe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005900:	f7fe ff9c 	bl	800483c <HAL_GetTick>
 8005904:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005906:	e029      	b.n	800595c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f043 0210 	orr.w	r2, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	f043 0201 	orr.w	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e023      	b.n	800596c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005924:	f7fe ff8a 	bl	800483c <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d914      	bls.n	800595c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d10d      	bne.n	800595c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	f043 0210 	orr.w	r2, r3, #16
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f043 0201 	orr.w	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b01      	cmp	r3, #1
 8005968:	d0dc      	beq.n	8005924 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e0ed      	b.n	8005b62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb fe9e 	bl	80016d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059a8:	f7fe ff48 	bl	800483c <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80059ae:	e012      	b.n	80059d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80059b0:	f7fe ff44 	bl	800483c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b0a      	cmp	r3, #10
 80059bc:	d90b      	bls.n	80059d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2205      	movs	r2, #5
 80059ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0c5      	b.n	8005b62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0e5      	beq.n	80059b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0202 	bic.w	r2, r2, #2
 80059f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059f4:	f7fe ff22 	bl	800483c <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80059fa:	e012      	b.n	8005a22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80059fc:	f7fe ff1e 	bl	800483c <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b0a      	cmp	r3, #10
 8005a08:	d90b      	bls.n	8005a22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2205      	movs	r2, #5
 8005a1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e09f      	b.n	8005b62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	7e1b      	ldrb	r3, [r3, #24]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d108      	bne.n	8005a4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	e007      	b.n	8005a5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7e5b      	ldrb	r3, [r3, #25]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d108      	bne.n	8005a74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e007      	b.n	8005a84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	7e9b      	ldrb	r3, [r3, #26]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d108      	bne.n	8005a9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0220 	orr.w	r2, r2, #32
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e007      	b.n	8005aae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0220 	bic.w	r2, r2, #32
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	7edb      	ldrb	r3, [r3, #27]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d108      	bne.n	8005ac8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0210 	bic.w	r2, r2, #16
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e007      	b.n	8005ad8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0210 	orr.w	r2, r2, #16
 8005ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7f1b      	ldrb	r3, [r3, #28]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d108      	bne.n	8005af2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0208 	orr.w	r2, r2, #8
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e007      	b.n	8005b02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0208 	bic.w	r2, r2, #8
 8005b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	7f5b      	ldrb	r3, [r3, #29]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d108      	bne.n	8005b1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0204 	orr.w	r2, r2, #4
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e007      	b.n	8005b2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0204 	bic.w	r2, r2, #4
 8005b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	ea42 0103 	orr.w	r1, r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	1e5a      	subs	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b80:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005b82:	7cfb      	ldrb	r3, [r7, #19]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d003      	beq.n	8005b90 <HAL_CAN_ConfigFilter+0x26>
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	f040 80aa 	bne.w	8005ce4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b96:	f043 0201 	orr.w	r2, r3, #1
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	2201      	movs	r2, #1
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	401a      	ands	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d123      	bne.n	8005c12 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	401a      	ands	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005bec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	3248      	adds	r2, #72	; 0x48
 8005bf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c08:	6979      	ldr	r1, [r7, #20]
 8005c0a:	3348      	adds	r3, #72	; 0x48
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	440b      	add	r3, r1
 8005c10:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d122      	bne.n	8005c60 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005c3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3248      	adds	r2, #72	; 0x48
 8005c40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c56:	6979      	ldr	r1, [r7, #20]
 8005c58:	3348      	adds	r3, #72	; 0x48
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	440b      	add	r3, r1
 8005c5e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	401a      	ands	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005c7a:	e007      	b.n	8005c8c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005ca6:	e007      	b.n	8005cb8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d107      	bne.n	8005cd0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e006      	b.n	8005cf2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d12e      	bne.n	8005d70 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0201 	bic.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d2a:	f7fe fd87 	bl	800483c <HAL_GetTick>
 8005d2e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005d30:	e012      	b.n	8005d58 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d32:	f7fe fd83 	bl	800483c <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b0a      	cmp	r3, #10
 8005d3e:	d90b      	bls.n	8005d58 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2205      	movs	r2, #5
 8005d50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e012      	b.n	8005d7e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e5      	bne.n	8005d32 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e006      	b.n	8005d7e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
  }
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b089      	sub	sp, #36	; 0x24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005da4:	7ffb      	ldrb	r3, [r7, #31]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d003      	beq.n	8005db2 <HAL_CAN_AddTxMessage+0x2c>
 8005daa:	7ffb      	ldrb	r3, [r7, #31]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	f040 80ad 	bne.w	8005f0c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8095 	beq.w	8005efc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	0e1b      	lsrs	r3, r3, #24
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005ddc:	2201      	movs	r2, #1
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	409a      	lsls	r2, r3
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	6809      	ldr	r1, [r1, #0]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	3318      	adds	r3, #24
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	440b      	add	r3, r1
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e00f      	b.n	8005e2a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e14:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005e1e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3318      	adds	r3, #24
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	440b      	add	r3, r1
 8005e28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	3318      	adds	r3, #24
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	440b      	add	r3, r1
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	7d1b      	ldrb	r3, [r3, #20]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d111      	bne.n	8005e6a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	3318      	adds	r3, #24
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	4413      	add	r3, r2
 8005e52:	3304      	adds	r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	6811      	ldr	r1, [r2, #0]
 8005e5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	3318      	adds	r3, #24
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	440b      	add	r3, r1
 8005e66:	3304      	adds	r3, #4
 8005e68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3307      	adds	r3, #7
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	061a      	lsls	r2, r3, #24
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3306      	adds	r3, #6
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3305      	adds	r3, #5
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	4313      	orrs	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	3204      	adds	r2, #4
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	6811      	ldr	r1, [r2, #0]
 8005e92:	ea43 0200 	orr.w	r2, r3, r0
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005ea0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3303      	adds	r3, #3
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	061a      	lsls	r2, r3, #24
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3302      	adds	r3, #2
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	041b      	lsls	r3, r3, #16
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	6811      	ldr	r1, [r2, #0]
 8005ec8:	ea43 0200 	orr.w	r2, r3, r0
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	440b      	add	r3, r1
 8005ed2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005ed6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	3318      	adds	r3, #24
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	4413      	add	r3, r2
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	6811      	ldr	r1, [r2, #0]
 8005eea:	f043 0201 	orr.w	r2, r3, #1
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	3318      	adds	r3, #24
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	440b      	add	r3, r1
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e00e      	b.n	8005f1a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e006      	b.n	8005f1a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3724      	adds	r7, #36	; 0x24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005f26:	b480      	push	{r7}
 8005f28:	b087      	sub	sp, #28
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f3a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d003      	beq.n	8005f4a <HAL_CAN_GetRxMessage+0x24>
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f040 8103 	bne.w	8006150 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10e      	bne.n	8005f6e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d116      	bne.n	8005f8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0f7      	b.n	800615e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0e8      	b.n	800615e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	331b      	adds	r3, #27
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	4413      	add	r3, r2
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0204 	and.w	r2, r3, #4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	331b      	adds	r3, #27
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	4413      	add	r3, r2
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	0d5b      	lsrs	r3, r3, #21
 8005fba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	e00b      	b.n	8005fdc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	331b      	adds	r3, #27
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	4413      	add	r3, r2
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	08db      	lsrs	r3, r3, #3
 8005fd4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	331b      	adds	r3, #27
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	4413      	add	r3, r2
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0202 	and.w	r2, r3, #2
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	331b      	adds	r3, #27
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3304      	adds	r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2208      	movs	r2, #8
 800600e:	611a      	str	r2, [r3, #16]
 8006010:	e00b      	b.n	800602a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	331b      	adds	r3, #27
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	4413      	add	r3, r2
 800601e:	3304      	adds	r3, #4
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	331b      	adds	r3, #27
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	4413      	add	r3, r2
 8006036:	3304      	adds	r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	b2da      	uxtb	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	331b      	adds	r3, #27
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	4413      	add	r3, r2
 800604e:	3304      	adds	r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	b29a      	uxth	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	4413      	add	r3, r2
 8006064:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	4413      	add	r3, r2
 800607a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	0a1a      	lsrs	r2, r3, #8
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	3301      	adds	r3, #1
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	4413      	add	r3, r2
 8006094:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	0c1a      	lsrs	r2, r3, #16
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	3302      	adds	r3, #2
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	0e1a      	lsrs	r2, r3, #24
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	3303      	adds	r3, #3
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	4413      	add	r3, r2
 80060e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	0a1a      	lsrs	r2, r3, #8
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	3305      	adds	r3, #5
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	0c1a      	lsrs	r2, r3, #16
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	3306      	adds	r3, #6
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	4413      	add	r3, r2
 8006114:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	0e1a      	lsrs	r2, r3, #24
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	3307      	adds	r3, #7
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0220 	orr.w	r2, r2, #32
 8006138:	60da      	str	r2, [r3, #12]
 800613a:	e007      	b.n	800614c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0220 	orr.w	r2, r2, #32
 800614a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e006      	b.n	800615e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800617a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d002      	beq.n	8006188 <HAL_CAN_ActivateNotification+0x1e>
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d109      	bne.n	800619c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6959      	ldr	r1, [r3, #20]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	e006      	b.n	80061aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
  }
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b08a      	sub	sp, #40	; 0x28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d07c      	beq.n	80062f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d023      	beq.n	800624e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2201      	movs	r2, #1
 800620c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f983 	bl	8006524 <HAL_CAN_TxMailbox0CompleteCallback>
 800621e:	e016      	b.n	800624e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
 8006232:	e00c      	b.n	800624e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
 8006246:	e002      	b.n	800624e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f989 	bl	8006560 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d024      	beq.n	80062a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006260:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f963 	bl	8006538 <HAL_CAN_TxMailbox1CompleteCallback>
 8006272:	e016      	b.n	80062a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
 8006286:	e00c      	b.n	80062a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800628e:	2b00      	cmp	r3, #0
 8006290:	d004      	beq.n	800629c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
 800629a:	e002      	b.n	80062a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f969 	bl	8006574 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d024      	beq.n	80062f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80062b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f943 	bl	800654c <HAL_CAN_TxMailbox2CompleteCallback>
 80062c6:	e016      	b.n	80062f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d004      	beq.n	80062dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
 80062da:	e00c      	b.n	80062f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
 80062ee:	e002      	b.n	80062f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f949 	bl	8006588 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00c      	beq.n	800631a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2210      	movs	r2, #16
 8006318:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d006      	beq.n	800633c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2208      	movs	r2, #8
 8006334:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f930 	bl	800659c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fb fd39 	bl	8001dcc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00c      	beq.n	800637e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006374:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2210      	movs	r2, #16
 800637c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d006      	beq.n	80063a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2208      	movs	r2, #8
 8006398:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f912 	bl	80065c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f8f9 	bl	80065b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2210      	movs	r2, #16
 80063d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f8fc 	bl	80065d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00b      	beq.n	8006402 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d006      	beq.n	8006402 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2208      	movs	r2, #8
 80063fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f8f5 	bl	80065ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d07b      	beq.n	8006504 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	d072      	beq.n	80064fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	f043 0302 	orr.w	r3, r3, #2
 800644c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	f043 0304 	orr.w	r3, r3, #4
 8006468:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006470:	2b00      	cmp	r3, #0
 8006472:	d043      	beq.n	80064fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800647a:	2b00      	cmp	r3, #0
 800647c:	d03e      	beq.n	80064fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006484:	2b60      	cmp	r3, #96	; 0x60
 8006486:	d02b      	beq.n	80064e0 <HAL_CAN_IRQHandler+0x32a>
 8006488:	2b60      	cmp	r3, #96	; 0x60
 800648a:	d82e      	bhi.n	80064ea <HAL_CAN_IRQHandler+0x334>
 800648c:	2b50      	cmp	r3, #80	; 0x50
 800648e:	d022      	beq.n	80064d6 <HAL_CAN_IRQHandler+0x320>
 8006490:	2b50      	cmp	r3, #80	; 0x50
 8006492:	d82a      	bhi.n	80064ea <HAL_CAN_IRQHandler+0x334>
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d019      	beq.n	80064cc <HAL_CAN_IRQHandler+0x316>
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d826      	bhi.n	80064ea <HAL_CAN_IRQHandler+0x334>
 800649c:	2b30      	cmp	r3, #48	; 0x30
 800649e:	d010      	beq.n	80064c2 <HAL_CAN_IRQHandler+0x30c>
 80064a0:	2b30      	cmp	r3, #48	; 0x30
 80064a2:	d822      	bhi.n	80064ea <HAL_CAN_IRQHandler+0x334>
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d002      	beq.n	80064ae <HAL_CAN_IRQHandler+0x2f8>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d005      	beq.n	80064b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80064ac:	e01d      	b.n	80064ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	f043 0308 	orr.w	r3, r3, #8
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064b6:	e019      	b.n	80064ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	f043 0310 	orr.w	r3, r3, #16
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064c0:	e014      	b.n	80064ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	f043 0320 	orr.w	r3, r3, #32
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064ca:	e00f      	b.n	80064ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064d4:	e00a      	b.n	80064ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064de:	e005      	b.n	80064ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064e8:	e000      	b.n	80064ec <HAL_CAN_IRQHandler+0x336>
            break;
 80064ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2204      	movs	r2, #4
 8006502:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d008      	beq.n	800651c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f872 	bl	8006600 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800651c:	bf00      	nop
 800651e:	3728      	adds	r7, #40	; 0x28
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <__NVIC_SetPriorityGrouping+0x44>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006630:	4013      	ands	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800663c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006646:	4a04      	ldr	r2, [pc, #16]	; (8006658 <__NVIC_SetPriorityGrouping+0x44>)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	60d3      	str	r3, [r2, #12]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	e000ed00 	.word	0xe000ed00

0800665c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <__NVIC_GetPriorityGrouping+0x18>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	f003 0307 	and.w	r3, r3, #7
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006686:	2b00      	cmp	r3, #0
 8006688:	db0b      	blt.n	80066a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	f003 021f 	and.w	r2, r3, #31
 8006690:	4907      	ldr	r1, [pc, #28]	; (80066b0 <__NVIC_EnableIRQ+0x38>)
 8006692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	2001      	movs	r0, #1
 800669a:	fa00 f202 	lsl.w	r2, r0, r2
 800669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	e000e100 	.word	0xe000e100

080066b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	db0a      	blt.n	80066de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	490c      	ldr	r1, [pc, #48]	; (8006700 <__NVIC_SetPriority+0x4c>)
 80066ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	440b      	add	r3, r1
 80066d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066dc:	e00a      	b.n	80066f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	4908      	ldr	r1, [pc, #32]	; (8006704 <__NVIC_SetPriority+0x50>)
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	3b04      	subs	r3, #4
 80066ec:	0112      	lsls	r2, r2, #4
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	440b      	add	r3, r1
 80066f2:	761a      	strb	r2, [r3, #24]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	e000e100 	.word	0xe000e100
 8006704:	e000ed00 	.word	0xe000ed00

08006708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	; 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f1c3 0307 	rsb	r3, r3, #7
 8006722:	2b04      	cmp	r3, #4
 8006724:	bf28      	it	cs
 8006726:	2304      	movcs	r3, #4
 8006728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3304      	adds	r3, #4
 800672e:	2b06      	cmp	r3, #6
 8006730:	d902      	bls.n	8006738 <NVIC_EncodePriority+0x30>
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3b03      	subs	r3, #3
 8006736:	e000      	b.n	800673a <NVIC_EncodePriority+0x32>
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43da      	mvns	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	401a      	ands	r2, r3
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006750:	f04f 31ff 	mov.w	r1, #4294967295
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	fa01 f303 	lsl.w	r3, r1, r3
 800675a:	43d9      	mvns	r1, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006760:	4313      	orrs	r3, r2
         );
}
 8006762:	4618      	mov	r0, r3
 8006764:	3724      	adds	r7, #36	; 0x24
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b01      	subs	r3, #1
 800677c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006780:	d301      	bcc.n	8006786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006782:	2301      	movs	r3, #1
 8006784:	e00f      	b.n	80067a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006786:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <SysTick_Config+0x40>)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3b01      	subs	r3, #1
 800678c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800678e:	210f      	movs	r1, #15
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	f7ff ff8e 	bl	80066b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <SysTick_Config+0x40>)
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <SysTick_Config+0x40>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	e000e010 	.word	0xe000e010

080067b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ff29 	bl	8006614 <__NVIC_SetPriorityGrouping>
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4603      	mov	r3, r0
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067dc:	f7ff ff3e 	bl	800665c <__NVIC_GetPriorityGrouping>
 80067e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	6978      	ldr	r0, [r7, #20]
 80067e8:	f7ff ff8e 	bl	8006708 <NVIC_EncodePriority>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff ff5d 	bl	80066b4 <__NVIC_SetPriority>
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	4603      	mov	r3, r0
 800680a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800680c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff ff31 	bl	8006678 <__NVIC_EnableIRQ>
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ffa2 	bl	8006770 <SysTick_Config>
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e037      	b.n	80068bc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006862:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006866:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800687c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f9b8 	bl	8006c14 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}  
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_DMA_Start_IT+0x20>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e04a      	b.n	800697a <HAL_DMA_Start_IT+0xb6>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d13a      	bne.n	800696c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f94b 	bl	8006bb6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 020e 	orr.w	r2, r2, #14
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	e00f      	b.n	800695a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 020a 	orr.w	r2, r2, #10
 8006948:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0204 	bic.w	r2, r2, #4
 8006958:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e005      	b.n	8006978 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006974:	2302      	movs	r3, #2
 8006976:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006978:	7dfb      	ldrb	r3, [r7, #23]
} 
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006990:	2b02      	cmp	r3, #2
 8006992:	d008      	beq.n	80069a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2204      	movs	r2, #4
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e020      	b.n	80069e8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 020e 	bic.w	r2, r2, #14
 80069b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	2101      	movs	r1, #1
 80069d0:	fa01 f202 	lsl.w	r2, r1, r2
 80069d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d005      	beq.n	8006a16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	e027      	b.n	8006a66 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 020e 	bic.w	r2, r2, #14
 8006a24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2101      	movs	r1, #1
 8006a40:	fa01 f202 	lsl.w	r2, r1, r2
 8006a44:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    } 
  }
  return status;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d024      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x72>
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01f      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d107      	bne.n	8006ac0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0204 	bic.w	r2, r2, #4
 8006abe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac8:	2104      	movs	r1, #4
 8006aca:	fa01 f202 	lsl.w	r2, r1, r2
 8006ace:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d06a      	beq.n	8006bae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006ae0:	e065      	b.n	8006bae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	409a      	lsls	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d02c      	beq.n	8006b4c <HAL_DMA_IRQHandler+0xdc>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d027      	beq.n	8006b4c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 020a 	bic.w	r2, r2, #10
 8006b18:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b30:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d035      	beq.n	8006bae <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006b4a:	e030      	b.n	8006bae <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	2208      	movs	r2, #8
 8006b52:	409a      	lsls	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d028      	beq.n	8006bae <HAL_DMA_IRQHandler+0x13e>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d023      	beq.n	8006bae <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 020e 	bic.w	r2, r2, #14
 8006b74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7e:	2101      	movs	r1, #1
 8006b80:	fa01 f202 	lsl.w	r2, r1, r2
 8006b84:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d004      	beq.n	8006bae <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
    }
  }
}  
 8006bac:	e7ff      	b.n	8006bae <HAL_DMA_IRQHandler+0x13e>
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
 8006bc2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bcc:	2101      	movs	r1, #1
 8006bce:	fa01 f202 	lsl.w	r2, r1, r2
 8006bd2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b10      	cmp	r3, #16
 8006be2:	d108      	bne.n	8006bf6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006bf4:	e007      	b.n	8006c06 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	60da      	str	r2, [r3, #12]
}
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <DMA_CalcBaseAndBitshift+0x60>)
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d80f      	bhi.n	8006c48 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <DMA_CalcBaseAndBitshift+0x64>)
 8006c30:	4413      	add	r3, r2
 8006c32:	4a12      	ldr	r2, [pc, #72]	; (8006c7c <DMA_CalcBaseAndBitshift+0x68>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	091b      	lsrs	r3, r3, #4
 8006c3a:	009a      	lsls	r2, r3, #2
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a0f      	ldr	r2, [pc, #60]	; (8006c80 <DMA_CalcBaseAndBitshift+0x6c>)
 8006c44:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006c46:	e00e      	b.n	8006c66 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <DMA_CalcBaseAndBitshift+0x70>)
 8006c50:	4413      	add	r3, r2
 8006c52:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <DMA_CalcBaseAndBitshift+0x68>)
 8006c54:	fba2 2303 	umull	r2, r3, r2, r3
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	009a      	lsls	r2, r3, #2
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a09      	ldr	r2, [pc, #36]	; (8006c88 <DMA_CalcBaseAndBitshift+0x74>)
 8006c64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40020407 	.word	0x40020407
 8006c78:	bffdfff8 	.word	0xbffdfff8
 8006c7c:	cccccccd 	.word	0xcccccccd
 8006c80:	40020000 	.word	0x40020000
 8006c84:	bffdfbf8 	.word	0xbffdfbf8
 8006c88:	40020400 	.word	0x40020400

08006c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c9a:	e154      	b.n	8006f46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca8:	4013      	ands	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8146 	beq.w	8006f40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d005      	beq.n	8006ccc <HAL_GPIO_Init+0x40>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d130      	bne.n	8006d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d02:	2201      	movs	r2, #1
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	43db      	mvns	r3, r3
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	091b      	lsrs	r3, r3, #4
 8006d18:	f003 0201 	and.w	r2, r3, #1
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d017      	beq.n	8006d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	2203      	movs	r2, #3
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d123      	bne.n	8006dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	08da      	lsrs	r2, r3, #3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3208      	adds	r2, #8
 8006d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	220f      	movs	r2, #15
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	43db      	mvns	r3, r3
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4013      	ands	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	fa02 f303 	lsl.w	r3, r2, r3
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	08da      	lsrs	r2, r3, #3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3208      	adds	r2, #8
 8006db8:	6939      	ldr	r1, [r7, #16]
 8006dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	2203      	movs	r2, #3
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 0203 	and.w	r2, r3, #3
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 80a0 	beq.w	8006f40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e00:	4b58      	ldr	r3, [pc, #352]	; (8006f64 <HAL_GPIO_Init+0x2d8>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	4a57      	ldr	r2, [pc, #348]	; (8006f64 <HAL_GPIO_Init+0x2d8>)
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	6193      	str	r3, [r2, #24]
 8006e0c:	4b55      	ldr	r3, [pc, #340]	; (8006f64 <HAL_GPIO_Init+0x2d8>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	60bb      	str	r3, [r7, #8]
 8006e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006e18:	4a53      	ldr	r2, [pc, #332]	; (8006f68 <HAL_GPIO_Init+0x2dc>)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	089b      	lsrs	r3, r3, #2
 8006e1e:	3302      	adds	r3, #2
 8006e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	220f      	movs	r2, #15
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	43db      	mvns	r3, r3
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e42:	d019      	beq.n	8006e78 <HAL_GPIO_Init+0x1ec>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a49      	ldr	r2, [pc, #292]	; (8006f6c <HAL_GPIO_Init+0x2e0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d013      	beq.n	8006e74 <HAL_GPIO_Init+0x1e8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a48      	ldr	r2, [pc, #288]	; (8006f70 <HAL_GPIO_Init+0x2e4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00d      	beq.n	8006e70 <HAL_GPIO_Init+0x1e4>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a47      	ldr	r2, [pc, #284]	; (8006f74 <HAL_GPIO_Init+0x2e8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <HAL_GPIO_Init+0x1e0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a46      	ldr	r2, [pc, #280]	; (8006f78 <HAL_GPIO_Init+0x2ec>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d101      	bne.n	8006e68 <HAL_GPIO_Init+0x1dc>
 8006e64:	2304      	movs	r3, #4
 8006e66:	e008      	b.n	8006e7a <HAL_GPIO_Init+0x1ee>
 8006e68:	2305      	movs	r3, #5
 8006e6a:	e006      	b.n	8006e7a <HAL_GPIO_Init+0x1ee>
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e004      	b.n	8006e7a <HAL_GPIO_Init+0x1ee>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e002      	b.n	8006e7a <HAL_GPIO_Init+0x1ee>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_GPIO_Init+0x1ee>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	f002 0203 	and.w	r2, r2, #3
 8006e80:	0092      	lsls	r2, r2, #2
 8006e82:	4093      	lsls	r3, r2
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e8a:	4937      	ldr	r1, [pc, #220]	; (8006f68 <HAL_GPIO_Init+0x2dc>)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	089b      	lsrs	r3, r3, #2
 8006e90:	3302      	adds	r3, #2
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e98:	4b38      	ldr	r3, [pc, #224]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006ebc:	4a2f      	ldr	r2, [pc, #188]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006ee6:	4a25      	ldr	r2, [pc, #148]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006eec:	4b23      	ldr	r3, [pc, #140]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006f10:	4a1a      	ldr	r2, [pc, #104]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f16:	4b19      	ldr	r3, [pc, #100]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4013      	ands	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006f3a:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <HAL_GPIO_Init+0x2f0>)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3301      	adds	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f47f aea3 	bne.w	8006c9c <HAL_GPIO_Init+0x10>
  }
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	40021000 	.word	0x40021000
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	48000400 	.word	0x48000400
 8006f70:	48000800 	.word	0x48000800
 8006f74:	48000c00 	.word	0x48000c00
 8006f78:	48001000 	.word	0x48001000
 8006f7c:	40010400 	.word	0x40010400

08006f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	887b      	ldrh	r3, [r7, #2]
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
 8006f9c:	e001      	b.n	8006fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	807b      	strh	r3, [r7, #2]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fc0:	787b      	ldrb	r3, [r7, #1]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fc6:	887a      	ldrh	r2, [r7, #2]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006fcc:	e002      	b.n	8006fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ff0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	f001 b823 	b.w	800804c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800700a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 817d 	beq.w	8007316 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800701c:	4bbc      	ldr	r3, [pc, #752]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 030c 	and.w	r3, r3, #12
 8007024:	2b04      	cmp	r3, #4
 8007026:	d00c      	beq.n	8007042 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007028:	4bb9      	ldr	r3, [pc, #740]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f003 030c 	and.w	r3, r3, #12
 8007030:	2b08      	cmp	r3, #8
 8007032:	d15c      	bne.n	80070ee <HAL_RCC_OscConfig+0x10e>
 8007034:	4bb6      	ldr	r3, [pc, #728]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800703c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007040:	d155      	bne.n	80070ee <HAL_RCC_OscConfig+0x10e>
 8007042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007046:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800704e:	fa93 f3a3 	rbit	r3, r3
 8007052:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007056:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800705a:	fab3 f383 	clz	r3, r3
 800705e:	b2db      	uxtb	r3, r3
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	d102      	bne.n	8007074 <HAL_RCC_OscConfig+0x94>
 800706e:	4ba8      	ldr	r3, [pc, #672]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	e015      	b.n	80070a0 <HAL_RCC_OscConfig+0xc0>
 8007074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007078:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800707c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007080:	fa93 f3a3 	rbit	r3, r3
 8007084:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800708c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007090:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007094:	fa93 f3a3 	rbit	r3, r3
 8007098:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800709c:	4b9c      	ldr	r3, [pc, #624]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80070a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80070a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80070ac:	fa92 f2a2 	rbit	r2, r2
 80070b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80070b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80070b8:	fab2 f282 	clz	r2, r2
 80070bc:	b2d2      	uxtb	r2, r2
 80070be:	f042 0220 	orr.w	r2, r2, #32
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	f002 021f 	and.w	r2, r2, #31
 80070c8:	2101      	movs	r1, #1
 80070ca:	fa01 f202 	lsl.w	r2, r1, r2
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 811f 	beq.w	8007314 <HAL_RCC_OscConfig+0x334>
 80070d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f040 8116 	bne.w	8007314 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f000 bfaf 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fe:	d106      	bne.n	800710e <HAL_RCC_OscConfig+0x12e>
 8007100:	4b83      	ldr	r3, [pc, #524]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a82      	ldr	r2, [pc, #520]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	e036      	b.n	800717c <HAL_RCC_OscConfig+0x19c>
 800710e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <HAL_RCC_OscConfig+0x158>
 800711e:	4b7c      	ldr	r3, [pc, #496]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a7b      	ldr	r2, [pc, #492]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	4b79      	ldr	r3, [pc, #484]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a78      	ldr	r2, [pc, #480]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e021      	b.n	800717c <HAL_RCC_OscConfig+0x19c>
 8007138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800713c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007148:	d10c      	bne.n	8007164 <HAL_RCC_OscConfig+0x184>
 800714a:	4b71      	ldr	r3, [pc, #452]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a70      	ldr	r2, [pc, #448]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	4b6e      	ldr	r3, [pc, #440]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a6d      	ldr	r2, [pc, #436]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800715c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	e00b      	b.n	800717c <HAL_RCC_OscConfig+0x19c>
 8007164:	4b6a      	ldr	r3, [pc, #424]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a69      	ldr	r2, [pc, #420]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800716a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	4b67      	ldr	r3, [pc, #412]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a66      	ldr	r2, [pc, #408]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800717c:	4b64      	ldr	r3, [pc, #400]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	f023 020f 	bic.w	r2, r3, #15
 8007184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	495f      	ldr	r1, [pc, #380]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007192:	4313      	orrs	r3, r2
 8007194:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800719a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d059      	beq.n	800725a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a6:	f7fd fb49 	bl	800483c <HAL_GetTick>
 80071aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ae:	e00a      	b.n	80071c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071b0:	f7fd fb44 	bl	800483c <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b64      	cmp	r3, #100	; 0x64
 80071be:	d902      	bls.n	80071c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	f000 bf43 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
 80071c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80071d2:	fa93 f3a3 	rbit	r3, r3
 80071d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80071da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071de:	fab3 f383 	clz	r3, r3
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	095b      	lsrs	r3, r3, #5
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d102      	bne.n	80071f8 <HAL_RCC_OscConfig+0x218>
 80071f2:	4b47      	ldr	r3, [pc, #284]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	e015      	b.n	8007224 <HAL_RCC_OscConfig+0x244>
 80071f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007200:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007204:	fa93 f3a3 	rbit	r3, r3
 8007208:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800720c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007210:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007214:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007218:	fa93 f3a3 	rbit	r3, r3
 800721c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007220:	4b3b      	ldr	r3, [pc, #236]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007228:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800722c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007230:	fa92 f2a2 	rbit	r2, r2
 8007234:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007238:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800723c:	fab2 f282 	clz	r2, r2
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	f042 0220 	orr.w	r2, r2, #32
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	f002 021f 	and.w	r2, r2, #31
 800724c:	2101      	movs	r1, #1
 800724e:	fa01 f202 	lsl.w	r2, r1, r2
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0ab      	beq.n	80071b0 <HAL_RCC_OscConfig+0x1d0>
 8007258:	e05d      	b.n	8007316 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725a:	f7fd faef 	bl	800483c <HAL_GetTick>
 800725e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007262:	e00a      	b.n	800727a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007264:	f7fd faea 	bl	800483c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b64      	cmp	r3, #100	; 0x64
 8007272:	d902      	bls.n	800727a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	f000 bee9 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
 800727a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800727e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007282:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007286:	fa93 f3a3 	rbit	r3, r3
 800728a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800728e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007292:	fab3 f383 	clz	r3, r3
 8007296:	b2db      	uxtb	r3, r3
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d102      	bne.n	80072ac <HAL_RCC_OscConfig+0x2cc>
 80072a6:	4b1a      	ldr	r3, [pc, #104]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	e015      	b.n	80072d8 <HAL_RCC_OscConfig+0x2f8>
 80072ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80072b8:	fa93 f3a3 	rbit	r3, r3
 80072bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80072c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80072c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80072cc:	fa93 f3a3 	rbit	r3, r3
 80072d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <HAL_RCC_OscConfig+0x330>)
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80072e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80072e4:	fa92 f2a2 	rbit	r2, r2
 80072e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80072ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80072f0:	fab2 f282 	clz	r2, r2
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	f042 0220 	orr.w	r2, r2, #32
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	f002 021f 	and.w	r2, r2, #31
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f202 	lsl.w	r2, r1, r2
 8007306:	4013      	ands	r3, r2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1ab      	bne.n	8007264 <HAL_RCC_OscConfig+0x284>
 800730c:	e003      	b.n	8007316 <HAL_RCC_OscConfig+0x336>
 800730e:	bf00      	nop
 8007310:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800731a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 817d 	beq.w	8007626 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800732c:	4ba6      	ldr	r3, [pc, #664]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007338:	4ba3      	ldr	r3, [pc, #652]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f003 030c 	and.w	r3, r3, #12
 8007340:	2b08      	cmp	r3, #8
 8007342:	d172      	bne.n	800742a <HAL_RCC_OscConfig+0x44a>
 8007344:	4ba0      	ldr	r3, [pc, #640]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d16c      	bne.n	800742a <HAL_RCC_OscConfig+0x44a>
 8007350:	2302      	movs	r3, #2
 8007352:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007356:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800735a:	fa93 f3a3 	rbit	r3, r3
 800735e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007362:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007366:	fab3 f383 	clz	r3, r3
 800736a:	b2db      	uxtb	r3, r3
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f043 0301 	orr.w	r3, r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b01      	cmp	r3, #1
 8007378:	d102      	bne.n	8007380 <HAL_RCC_OscConfig+0x3a0>
 800737a:	4b93      	ldr	r3, [pc, #588]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	e013      	b.n	80073a8 <HAL_RCC_OscConfig+0x3c8>
 8007380:	2302      	movs	r3, #2
 8007382:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007386:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800738a:	fa93 f3a3 	rbit	r3, r3
 800738e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007392:	2302      	movs	r3, #2
 8007394:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007398:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800739c:	fa93 f3a3 	rbit	r3, r3
 80073a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80073a4:	4b88      	ldr	r3, [pc, #544]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2202      	movs	r2, #2
 80073aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80073ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80073b2:	fa92 f2a2 	rbit	r2, r2
 80073b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80073ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80073be:	fab2 f282 	clz	r2, r2
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	f042 0220 	orr.w	r2, r2, #32
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	f002 021f 	and.w	r2, r2, #31
 80073ce:	2101      	movs	r1, #1
 80073d0:	fa01 f202 	lsl.w	r2, r1, r2
 80073d4:	4013      	ands	r3, r2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCC_OscConfig+0x410>
 80073da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d002      	beq.n	80073f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f000 be2e 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f0:	4b75      	ldr	r3, [pc, #468]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	21f8      	movs	r1, #248	; 0xf8
 8007406:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800740a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800740e:	fa91 f1a1 	rbit	r1, r1
 8007412:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007416:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800741a:	fab1 f181 	clz	r1, r1
 800741e:	b2c9      	uxtb	r1, r1
 8007420:	408b      	lsls	r3, r1
 8007422:	4969      	ldr	r1, [pc, #420]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 8007424:	4313      	orrs	r3, r2
 8007426:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007428:	e0fd      	b.n	8007626 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800742a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800742e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8088 	beq.w	800754c <HAL_RCC_OscConfig+0x56c>
 800743c:	2301      	movs	r3, #1
 800743e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007442:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007446:	fa93 f3a3 	rbit	r3, r3
 800744a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800744e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007452:	fab3 f383 	clz	r3, r3
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800745c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	461a      	mov	r2, r3
 8007464:	2301      	movs	r3, #1
 8007466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007468:	f7fd f9e8 	bl	800483c <HAL_GetTick>
 800746c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007470:	e00a      	b.n	8007488 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007472:	f7fd f9e3 	bl	800483c <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d902      	bls.n	8007488 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	f000 bde2 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
 8007488:	2302      	movs	r3, #2
 800748a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007492:	fa93 f3a3 	rbit	r3, r3
 8007496:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800749a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800749e:	fab3 f383 	clz	r3, r3
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d102      	bne.n	80074b8 <HAL_RCC_OscConfig+0x4d8>
 80074b2:	4b45      	ldr	r3, [pc, #276]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	e013      	b.n	80074e0 <HAL_RCC_OscConfig+0x500>
 80074b8:	2302      	movs	r3, #2
 80074ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80074c2:	fa93 f3a3 	rbit	r3, r3
 80074c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80074ca:	2302      	movs	r3, #2
 80074cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80074d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80074d4:	fa93 f3a3 	rbit	r3, r3
 80074d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80074dc:	4b3a      	ldr	r3, [pc, #232]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	2202      	movs	r2, #2
 80074e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80074e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80074ea:	fa92 f2a2 	rbit	r2, r2
 80074ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80074f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80074f6:	fab2 f282 	clz	r2, r2
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	f042 0220 	orr.w	r2, r2, #32
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	f002 021f 	and.w	r2, r2, #31
 8007506:	2101      	movs	r1, #1
 8007508:	fa01 f202 	lsl.w	r2, r1, r2
 800750c:	4013      	ands	r3, r2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0af      	beq.n	8007472 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007512:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800751a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800751e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	21f8      	movs	r1, #248	; 0xf8
 8007528:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800752c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007530:	fa91 f1a1 	rbit	r1, r1
 8007534:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007538:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800753c:	fab1 f181 	clz	r1, r1
 8007540:	b2c9      	uxtb	r1, r1
 8007542:	408b      	lsls	r3, r1
 8007544:	4920      	ldr	r1, [pc, #128]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 8007546:	4313      	orrs	r3, r2
 8007548:	600b      	str	r3, [r1, #0]
 800754a:	e06c      	b.n	8007626 <HAL_RCC_OscConfig+0x646>
 800754c:	2301      	movs	r3, #1
 800754e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007552:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007556:	fa93 f3a3 	rbit	r3, r3
 800755a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800755e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007562:	fab3 f383 	clz	r3, r3
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800756c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	461a      	mov	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007578:	f7fd f960 	bl	800483c <HAL_GetTick>
 800757c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007580:	e00a      	b.n	8007598 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007582:	f7fd f95b 	bl	800483c <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d902      	bls.n	8007598 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	f000 bd5a 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
 8007598:	2302      	movs	r3, #2
 800759a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075a2:	fa93 f3a3 	rbit	r3, r3
 80075a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80075aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075ae:	fab3 f383 	clz	r3, r3
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d104      	bne.n	80075cc <HAL_RCC_OscConfig+0x5ec>
 80075c2:	4b01      	ldr	r3, [pc, #4]	; (80075c8 <HAL_RCC_OscConfig+0x5e8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	e015      	b.n	80075f4 <HAL_RCC_OscConfig+0x614>
 80075c8:	40021000 	.word	0x40021000
 80075cc:	2302      	movs	r3, #2
 80075ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075d6:	fa93 f3a3 	rbit	r3, r3
 80075da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075de:	2302      	movs	r3, #2
 80075e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075e8:	fa93 f3a3 	rbit	r3, r3
 80075ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075f0:	4bc8      	ldr	r3, [pc, #800]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2202      	movs	r2, #2
 80075f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80075fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80075fe:	fa92 f2a2 	rbit	r2, r2
 8007602:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007606:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800760a:	fab2 f282 	clz	r2, r2
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	f042 0220 	orr.w	r2, r2, #32
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	f002 021f 	and.w	r2, r2, #31
 800761a:	2101      	movs	r1, #1
 800761c:	fa01 f202 	lsl.w	r2, r1, r2
 8007620:	4013      	ands	r3, r2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1ad      	bne.n	8007582 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0308 	and.w	r3, r3, #8
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 8110 	beq.w	800785c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800763c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d079      	beq.n	8007740 <HAL_RCC_OscConfig+0x760>
 800764c:	2301      	movs	r3, #1
 800764e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007652:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007656:	fa93 f3a3 	rbit	r3, r3
 800765a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800765e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007662:	fab3 f383 	clz	r3, r3
 8007666:	b2db      	uxtb	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	4bab      	ldr	r3, [pc, #684]	; (8007918 <HAL_RCC_OscConfig+0x938>)
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	461a      	mov	r2, r3
 8007672:	2301      	movs	r3, #1
 8007674:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007676:	f7fd f8e1 	bl	800483c <HAL_GetTick>
 800767a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767e:	e00a      	b.n	8007696 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007680:	f7fd f8dc 	bl	800483c <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d902      	bls.n	8007696 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	f000 bcdb 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
 8007696:	2302      	movs	r3, #2
 8007698:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076a0:	fa93 f3a3 	rbit	r3, r3
 80076a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80076b0:	2202      	movs	r2, #2
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	fa93 f2a3 	rbit	r2, r3
 80076c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d4:	2202      	movs	r2, #2
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	fa93 f2a3 	rbit	r2, r3
 80076e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f0:	4b88      	ldr	r3, [pc, #544]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 80076f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80076fc:	2102      	movs	r1, #2
 80076fe:	6019      	str	r1, [r3, #0]
 8007700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007704:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	fa93 f1a3 	rbit	r1, r3
 800770e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007716:	6019      	str	r1, [r3, #0]
  return result;
 8007718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800771c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	fab3 f383 	clz	r3, r3
 8007726:	b2db      	uxtb	r3, r3
 8007728:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	2101      	movs	r1, #1
 8007734:	fa01 f303 	lsl.w	r3, r1, r3
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0a0      	beq.n	8007680 <HAL_RCC_OscConfig+0x6a0>
 800773e:	e08d      	b.n	800785c <HAL_RCC_OscConfig+0x87c>
 8007740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007744:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007750:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	fa93 f2a3 	rbit	r2, r3
 800775a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800775e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007762:	601a      	str	r2, [r3, #0]
  return result;
 8007764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007768:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800776c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800776e:	fab3 f383 	clz	r3, r3
 8007772:	b2db      	uxtb	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	4b68      	ldr	r3, [pc, #416]	; (8007918 <HAL_RCC_OscConfig+0x938>)
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	461a      	mov	r2, r3
 800777e:	2300      	movs	r3, #0
 8007780:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007782:	f7fd f85b 	bl	800483c <HAL_GetTick>
 8007786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800778a:	e00a      	b.n	80077a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800778c:	f7fd f856 	bl	800483c <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d902      	bls.n	80077a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	f000 bc55 	b.w	800804c <HAL_RCC_OscConfig+0x106c>
 80077a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80077aa:	2202      	movs	r2, #2
 80077ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	fa93 f2a3 	rbit	r2, r3
 80077bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80077ce:	2202      	movs	r2, #2
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	fa93 f2a3 	rbit	r2, r3
 80077e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f2:	2202      	movs	r2, #2
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	fa93 f2a3 	rbit	r2, r3
 8007804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007808:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800780c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800780e:	4b41      	ldr	r3, [pc, #260]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 8007810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007816:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800781a:	2102      	movs	r1, #2
 800781c:	6019      	str	r1, [r3, #0]
 800781e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007822:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	fa93 f1a3 	rbit	r1, r3
 800782c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007830:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007834:	6019      	str	r1, [r3, #0]
  return result;
 8007836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800783a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	fab3 f383 	clz	r3, r3
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f003 031f 	and.w	r3, r3, #31
 8007850:	2101      	movs	r1, #1
 8007852:	fa01 f303 	lsl.w	r3, r1, r3
 8007856:	4013      	ands	r3, r2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d197      	bne.n	800778c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800785c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 81a1 	beq.w	8007bb4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007872:	2300      	movs	r3, #0
 8007874:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007878:	4b26      	ldr	r3, [pc, #152]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d116      	bne.n	80078b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007884:	4b23      	ldr	r3, [pc, #140]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	4a22      	ldr	r2, [pc, #136]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 800788a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800788e:	61d3      	str	r3, [r2, #28]
 8007890:	4b20      	ldr	r3, [pc, #128]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800789c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80078aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b2:	4b1a      	ldr	r3, [pc, #104]	; (800791c <HAL_RCC_OscConfig+0x93c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d11a      	bne.n	80078f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078be:	4b17      	ldr	r3, [pc, #92]	; (800791c <HAL_RCC_OscConfig+0x93c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a16      	ldr	r2, [pc, #88]	; (800791c <HAL_RCC_OscConfig+0x93c>)
 80078c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ca:	f7fc ffb7 	bl	800483c <HAL_GetTick>
 80078ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d2:	e009      	b.n	80078e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d4:	f7fc ffb2 	bl	800483c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b64      	cmp	r3, #100	; 0x64
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e3b1      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <HAL_RCC_OscConfig+0x93c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0ef      	beq.n	80078d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d10d      	bne.n	8007920 <HAL_RCC_OscConfig+0x940>
 8007904:	4b03      	ldr	r3, [pc, #12]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	4a02      	ldr	r2, [pc, #8]	; (8007914 <HAL_RCC_OscConfig+0x934>)
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	6213      	str	r3, [r2, #32]
 8007910:	e03c      	b.n	800798c <HAL_RCC_OscConfig+0x9ac>
 8007912:	bf00      	nop
 8007914:	40021000 	.word	0x40021000
 8007918:	10908120 	.word	0x10908120
 800791c:	40007000 	.word	0x40007000
 8007920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007924:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10c      	bne.n	800794a <HAL_RCC_OscConfig+0x96a>
 8007930:	4bc1      	ldr	r3, [pc, #772]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	4ac0      	ldr	r2, [pc, #768]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	6213      	str	r3, [r2, #32]
 800793c:	4bbe      	ldr	r3, [pc, #760]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	4abd      	ldr	r2, [pc, #756]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007942:	f023 0304 	bic.w	r3, r3, #4
 8007946:	6213      	str	r3, [r2, #32]
 8007948:	e020      	b.n	800798c <HAL_RCC_OscConfig+0x9ac>
 800794a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	2b05      	cmp	r3, #5
 8007958:	d10c      	bne.n	8007974 <HAL_RCC_OscConfig+0x994>
 800795a:	4bb7      	ldr	r3, [pc, #732]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	4ab6      	ldr	r2, [pc, #728]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007960:	f043 0304 	orr.w	r3, r3, #4
 8007964:	6213      	str	r3, [r2, #32]
 8007966:	4bb4      	ldr	r3, [pc, #720]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	4ab3      	ldr	r2, [pc, #716]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	6213      	str	r3, [r2, #32]
 8007972:	e00b      	b.n	800798c <HAL_RCC_OscConfig+0x9ac>
 8007974:	4bb0      	ldr	r3, [pc, #704]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	4aaf      	ldr	r2, [pc, #700]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	6213      	str	r3, [r2, #32]
 8007980:	4bad      	ldr	r3, [pc, #692]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	4aac      	ldr	r2, [pc, #688]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007986:	f023 0304 	bic.w	r3, r3, #4
 800798a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800798c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8081 	beq.w	8007aa0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800799e:	f7fc ff4d 	bl	800483c <HAL_GetTick>
 80079a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a6:	e00b      	b.n	80079c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a8:	f7fc ff48 	bl	800483c <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e345      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
 80079c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80079c8:	2202      	movs	r2, #2
 80079ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	fa93 f2a3 	rbit	r2, r3
 80079da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80079ec:	2202      	movs	r2, #2
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	fa93 f2a3 	rbit	r2, r3
 80079fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a06:	601a      	str	r2, [r3, #0]
  return result;
 8007a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a12:	fab3 f383 	clz	r3, r3
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	095b      	lsrs	r3, r3, #5
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f043 0302 	orr.w	r3, r3, #2
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d102      	bne.n	8007a2c <HAL_RCC_OscConfig+0xa4c>
 8007a26:	4b84      	ldr	r3, [pc, #528]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	e013      	b.n	8007a54 <HAL_RCC_OscConfig+0xa74>
 8007a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007a34:	2202      	movs	r2, #2
 8007a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	fa93 f2a3 	rbit	r2, r3
 8007a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	4b79      	ldr	r3, [pc, #484]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	6011      	str	r1, [r2, #0]
 8007a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	fa92 f1a2 	rbit	r1, r2
 8007a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007a76:	6011      	str	r1, [r2, #0]
  return result;
 8007a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a7c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	fab2 f282 	clz	r2, r2
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	f002 021f 	and.w	r2, r2, #31
 8007a92:	2101      	movs	r1, #1
 8007a94:	fa01 f202 	lsl.w	r2, r1, r2
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d084      	beq.n	80079a8 <HAL_RCC_OscConfig+0x9c8>
 8007a9e:	e07f      	b.n	8007ba0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aa0:	f7fc fecc 	bl	800483c <HAL_GetTick>
 8007aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa8:	e00b      	b.n	8007ac2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aaa:	f7fc fec7 	bl	800483c <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e2c4      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
 8007ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007aca:	2202      	movs	r2, #2
 8007acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ad2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	fa93 f2a3 	rbit	r2, r3
 8007adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ae0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007aee:	2202      	movs	r2, #2
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007af6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	fa93 f2a3 	rbit	r2, r3
 8007b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b08:	601a      	str	r2, [r3, #0]
  return result;
 8007b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b0e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b14:	fab3 f383 	clz	r3, r3
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f043 0302 	orr.w	r3, r3, #2
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d102      	bne.n	8007b2e <HAL_RCC_OscConfig+0xb4e>
 8007b28:	4b43      	ldr	r3, [pc, #268]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	e013      	b.n	8007b56 <HAL_RCC_OscConfig+0xb76>
 8007b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007b36:	2202      	movs	r2, #2
 8007b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	fa93 f2a3 	rbit	r2, r3
 8007b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	4b39      	ldr	r3, [pc, #228]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007b5e:	2102      	movs	r1, #2
 8007b60:	6011      	str	r1, [r2, #0]
 8007b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007b6a:	6812      	ldr	r2, [r2, #0]
 8007b6c:	fa92 f1a2 	rbit	r1, r2
 8007b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007b78:	6011      	str	r1, [r2, #0]
  return result;
 8007b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b7e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007b82:	6812      	ldr	r2, [r2, #0]
 8007b84:	fab2 f282 	clz	r2, r2
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	f002 021f 	and.w	r2, r2, #31
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f202 	lsl.w	r2, r1, r2
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d184      	bne.n	8007aaa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ba0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d105      	bne.n	8007bb4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ba8:	4b23      	ldr	r3, [pc, #140]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	4a22      	ldr	r2, [pc, #136]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8242 	beq.w	800804a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bc6:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <HAL_RCC_OscConfig+0xc58>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f003 030c 	and.w	r3, r3, #12
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	f000 8213 	beq.w	8007ffa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	f040 8162 	bne.w	8007eaa <HAL_RCC_OscConfig+0xeca>
 8007be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bf8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	fa93 f2a3 	rbit	r2, r3
 8007c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c0a:	601a      	str	r2, [r3, #0]
  return result;
 8007c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c16:	fab3 f383 	clz	r3, r3
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	461a      	mov	r2, r3
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c2c:	f7fc fe06 	bl	800483c <HAL_GetTick>
 8007c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c34:	e00c      	b.n	8007c50 <HAL_RCC_OscConfig+0xc70>
 8007c36:	bf00      	nop
 8007c38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c3c:	f7fc fdfe 	bl	800483c <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e1fd      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
 8007c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	fa93 f2a3 	rbit	r2, r3
 8007c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007c74:	601a      	str	r2, [r3, #0]
  return result;
 8007c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007c7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c80:	fab3 f383 	clz	r3, r3
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d102      	bne.n	8007c9a <HAL_RCC_OscConfig+0xcba>
 8007c94:	4bb0      	ldr	r3, [pc, #704]	; (8007f58 <HAL_RCC_OscConfig+0xf78>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	e027      	b.n	8007cea <HAL_RCC_OscConfig+0xd0a>
 8007c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	fa93 f2a3 	rbit	r2, r3
 8007cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cd2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	fa93 f2a3 	rbit	r2, r3
 8007cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	4b9c      	ldr	r3, [pc, #624]	; (8007f58 <HAL_RCC_OscConfig+0xf78>)
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007cf2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007cf6:	6011      	str	r1, [r2, #0]
 8007cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cfc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	fa92 f1a2 	rbit	r1, r2
 8007d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d0e:	6011      	str	r1, [r2, #0]
  return result;
 8007d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d18:	6812      	ldr	r2, [r2, #0]
 8007d1a:	fab2 f282 	clz	r2, r2
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	f042 0220 	orr.w	r2, r2, #32
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	f002 021f 	and.w	r2, r2, #31
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d182      	bne.n	8007c3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d36:	4b88      	ldr	r3, [pc, #544]	; (8007f58 <HAL_RCC_OscConfig+0xf78>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	430b      	orrs	r3, r1
 8007d58:	497f      	ldr	r1, [pc, #508]	; (8007f58 <HAL_RCC_OscConfig+0xf78>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	604b      	str	r3, [r1, #4]
 8007d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007d66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	fa93 f2a3 	rbit	r2, r3
 8007d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007d82:	601a      	str	r2, [r3, #0]
  return result;
 8007d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007d8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d8e:	fab3 f383 	clz	r3, r3
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	461a      	mov	r2, r3
 8007da0:	2301      	movs	r3, #1
 8007da2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da4:	f7fc fd4a 	bl	800483c <HAL_GetTick>
 8007da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007dac:	e009      	b.n	8007dc2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dae:	f7fc fd45 	bl	800483c <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e144      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
 8007dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	fa93 f2a3 	rbit	r2, r3
 8007dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007de6:	601a      	str	r2, [r3, #0]
  return result;
 8007de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007df0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007df2:	fab3 f383 	clz	r3, r3
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	095b      	lsrs	r3, r3, #5
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d102      	bne.n	8007e0c <HAL_RCC_OscConfig+0xe2c>
 8007e06:	4b54      	ldr	r3, [pc, #336]	; (8007f58 <HAL_RCC_OscConfig+0xf78>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	e027      	b.n	8007e5c <HAL_RCC_OscConfig+0xe7c>
 8007e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	fa93 f2a3 	rbit	r2, r3
 8007e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	fa93 f2a3 	rbit	r2, r3
 8007e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	4b3f      	ldr	r3, [pc, #252]	; (8007f58 <HAL_RCC_OscConfig+0xf78>)
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007e64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007e68:	6011      	str	r1, [r2, #0]
 8007e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	fa92 f1a2 	rbit	r1, r2
 8007e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007e80:	6011      	str	r1, [r2, #0]
  return result;
 8007e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	fab2 f282 	clz	r2, r2
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	f042 0220 	orr.w	r2, r2, #32
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	f002 021f 	and.w	r2, r2, #31
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d082      	beq.n	8007dae <HAL_RCC_OscConfig+0xdce>
 8007ea8:	e0cf      	b.n	800804a <HAL_RCC_OscConfig+0x106a>
 8007eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007eb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ebc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	fa93 f2a3 	rbit	r2, r3
 8007ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007ece:	601a      	str	r2, [r3, #0]
  return result;
 8007ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ed4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007ed8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eda:	fab3 f383 	clz	r3, r3
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	461a      	mov	r2, r3
 8007eec:	2300      	movs	r3, #0
 8007eee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ef0:	f7fc fca4 	bl	800483c <HAL_GetTick>
 8007ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ef8:	e009      	b.n	8007f0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007efa:	f7fc fc9f 	bl	800483c <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e09e      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
 8007f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	fa93 f2a3 	rbit	r2, r3
 8007f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007f32:	601a      	str	r2, [r3, #0]
  return result;
 8007f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007f3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f3e:	fab3 f383 	clz	r3, r3
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f043 0301 	orr.w	r3, r3, #1
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d104      	bne.n	8007f5c <HAL_RCC_OscConfig+0xf7c>
 8007f52:	4b01      	ldr	r3, [pc, #4]	; (8007f58 <HAL_RCC_OscConfig+0xf78>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	e029      	b.n	8007fac <HAL_RCC_OscConfig+0xfcc>
 8007f58:	40021000 	.word	0x40021000
 8007f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	fa93 f2a3 	rbit	r2, r3
 8007f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	fa93 f2a3 	rbit	r2, r3
 8007f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	4b2b      	ldr	r3, [pc, #172]	; (8008058 <HAL_RCC_OscConfig+0x1078>)
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fb0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007fb8:	6011      	str	r1, [r2, #0]
 8007fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	fa92 f1a2 	rbit	r1, r2
 8007fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007fd0:	6011      	str	r1, [r2, #0]
  return result;
 8007fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007fd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	fab2 f282 	clz	r2, r2
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	f042 0220 	orr.w	r2, r2, #32
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	f002 021f 	and.w	r2, r2, #31
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f202 	lsl.w	r2, r1, r2
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d180      	bne.n	8007efa <HAL_RCC_OscConfig+0xf1a>
 8007ff8:	e027      	b.n	800804a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e01e      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <HAL_RCC_OscConfig+0x1078>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008016:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800801a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800801e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	429a      	cmp	r2, r3
 800802c:	d10b      	bne.n	8008046 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800802e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800803a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008042:	429a      	cmp	r2, r3
 8008044:	d001      	beq.n	800804a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40021000 	.word	0x40021000

0800805c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b09e      	sub	sp, #120	; 0x78
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e162      	b.n	800833a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008074:	4b90      	ldr	r3, [pc, #576]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d910      	bls.n	80080a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008082:	4b8d      	ldr	r3, [pc, #564]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f023 0207 	bic.w	r2, r3, #7
 800808a:	498b      	ldr	r1, [pc, #556]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	4313      	orrs	r3, r2
 8008090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008092:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d001      	beq.n	80080a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e14a      	b.n	800833a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080b0:	4b82      	ldr	r3, [pc, #520]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	497f      	ldr	r1, [pc, #508]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80dc 	beq.w	8008288 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d13c      	bne.n	8008152 <HAL_RCC_ClockConfig+0xf6>
 80080d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80080dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080e0:	fa93 f3a3 	rbit	r3, r3
 80080e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80080e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080e8:	fab3 f383 	clz	r3, r3
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d102      	bne.n	8008102 <HAL_RCC_ClockConfig+0xa6>
 80080fc:	4b6f      	ldr	r3, [pc, #444]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	e00f      	b.n	8008122 <HAL_RCC_ClockConfig+0xc6>
 8008102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008106:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800810a:	fa93 f3a3 	rbit	r3, r3
 800810e:	667b      	str	r3, [r7, #100]	; 0x64
 8008110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008114:	663b      	str	r3, [r7, #96]	; 0x60
 8008116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008118:	fa93 f3a3 	rbit	r3, r3
 800811c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800811e:	4b67      	ldr	r3, [pc, #412]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008126:	65ba      	str	r2, [r7, #88]	; 0x58
 8008128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800812a:	fa92 f2a2 	rbit	r2, r2
 800812e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008132:	fab2 f282 	clz	r2, r2
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	f042 0220 	orr.w	r2, r2, #32
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	f002 021f 	and.w	r2, r2, #31
 8008142:	2101      	movs	r1, #1
 8008144:	fa01 f202 	lsl.w	r2, r1, r2
 8008148:	4013      	ands	r3, r2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d17b      	bne.n	8008246 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e0f3      	b.n	800833a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b02      	cmp	r3, #2
 8008158:	d13c      	bne.n	80081d4 <HAL_RCC_ClockConfig+0x178>
 800815a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800815e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008162:	fa93 f3a3 	rbit	r3, r3
 8008166:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800816a:	fab3 f383 	clz	r3, r3
 800816e:	b2db      	uxtb	r3, r3
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f043 0301 	orr.w	r3, r3, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b01      	cmp	r3, #1
 800817c:	d102      	bne.n	8008184 <HAL_RCC_ClockConfig+0x128>
 800817e:	4b4f      	ldr	r3, [pc, #316]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	e00f      	b.n	80081a4 <HAL_RCC_ClockConfig+0x148>
 8008184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008188:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818c:	fa93 f3a3 	rbit	r3, r3
 8008190:	647b      	str	r3, [r7, #68]	; 0x44
 8008192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008196:	643b      	str	r3, [r7, #64]	; 0x40
 8008198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819a:	fa93 f3a3 	rbit	r3, r3
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a0:	4b46      	ldr	r3, [pc, #280]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80081aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ac:	fa92 f2a2 	rbit	r2, r2
 80081b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80081b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081b4:	fab2 f282 	clz	r2, r2
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	f042 0220 	orr.w	r2, r2, #32
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	f002 021f 	and.w	r2, r2, #31
 80081c4:	2101      	movs	r1, #1
 80081c6:	fa01 f202 	lsl.w	r2, r1, r2
 80081ca:	4013      	ands	r3, r2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d13a      	bne.n	8008246 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0b2      	b.n	800833a <HAL_RCC_ClockConfig+0x2de>
 80081d4:	2302      	movs	r3, #2
 80081d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	fa93 f3a3 	rbit	r3, r3
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081e2:	fab3 f383 	clz	r3, r3
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	095b      	lsrs	r3, r3, #5
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d102      	bne.n	80081fc <HAL_RCC_ClockConfig+0x1a0>
 80081f6:	4b31      	ldr	r3, [pc, #196]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	e00d      	b.n	8008218 <HAL_RCC_ClockConfig+0x1bc>
 80081fc:	2302      	movs	r3, #2
 80081fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	fa93 f3a3 	rbit	r3, r3
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
 8008208:	2302      	movs	r3, #2
 800820a:	623b      	str	r3, [r7, #32]
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	fa93 f3a3 	rbit	r3, r3
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	4b29      	ldr	r3, [pc, #164]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2202      	movs	r2, #2
 800821a:	61ba      	str	r2, [r7, #24]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	fa92 f2a2 	rbit	r2, r2
 8008222:	617a      	str	r2, [r7, #20]
  return result;
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	fab2 f282 	clz	r2, r2
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	f042 0220 	orr.w	r2, r2, #32
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	f002 021f 	and.w	r2, r2, #31
 8008236:	2101      	movs	r1, #1
 8008238:	fa01 f202 	lsl.w	r2, r1, r2
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e079      	b.n	800833a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008246:	4b1d      	ldr	r3, [pc, #116]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f023 0203 	bic.w	r2, r3, #3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	491a      	ldr	r1, [pc, #104]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 8008254:	4313      	orrs	r3, r2
 8008256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008258:	f7fc faf0 	bl	800483c <HAL_GetTick>
 800825c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800825e:	e00a      	b.n	8008276 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008260:	f7fc faec 	bl	800483c <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	f241 3288 	movw	r2, #5000	; 0x1388
 800826e:	4293      	cmp	r3, r2
 8008270:	d901      	bls.n	8008276 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e061      	b.n	800833a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_RCC_ClockConfig+0x260>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f003 020c 	and.w	r2, r3, #12
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	429a      	cmp	r2, r3
 8008286:	d1eb      	bne.n	8008260 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d214      	bcs.n	80082c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008296:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 0207 	bic.w	r2, r3, #7
 800829e:	4906      	ldr	r1, [pc, #24]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082a6:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <HAL_RCC_ClockConfig+0x25c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d005      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e040      	b.n	800833a <HAL_RCC_ClockConfig+0x2de>
 80082b8:	40022000 	.word	0x40022000
 80082bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082cc:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <HAL_RCC_ClockConfig+0x2e8>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	491a      	ldr	r1, [pc, #104]	; (8008344 <HAL_RCC_ClockConfig+0x2e8>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082ea:	4b16      	ldr	r3, [pc, #88]	; (8008344 <HAL_RCC_ClockConfig+0x2e8>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	4912      	ldr	r1, [pc, #72]	; (8008344 <HAL_RCC_ClockConfig+0x2e8>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80082fe:	f000 f829 	bl	8008354 <HAL_RCC_GetSysClockFreq>
 8008302:	4601      	mov	r1, r0
 8008304:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <HAL_RCC_ClockConfig+0x2e8>)
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800830c:	22f0      	movs	r2, #240	; 0xf0
 800830e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	fa92 f2a2 	rbit	r2, r2
 8008316:	60fa      	str	r2, [r7, #12]
  return result;
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	fab2 f282 	clz	r2, r2
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	40d3      	lsrs	r3, r2
 8008322:	4a09      	ldr	r2, [pc, #36]	; (8008348 <HAL_RCC_ClockConfig+0x2ec>)
 8008324:	5cd3      	ldrb	r3, [r2, r3]
 8008326:	fa21 f303 	lsr.w	r3, r1, r3
 800832a:	4a08      	ldr	r2, [pc, #32]	; (800834c <HAL_RCC_ClockConfig+0x2f0>)
 800832c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800832e:	4b08      	ldr	r3, [pc, #32]	; (8008350 <HAL_RCC_ClockConfig+0x2f4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7fc fa3e 	bl	80047b4 <HAL_InitTick>
  
  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3778      	adds	r7, #120	; 0x78
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	40021000 	.word	0x40021000
 8008348:	0800ecd4 	.word	0x0800ecd4
 800834c:	20000004 	.word	0x20000004
 8008350:	20000008 	.word	0x20000008

08008354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008354:	b480      	push	{r7}
 8008356:	b08b      	sub	sp, #44	; 0x2c
 8008358:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800836e:	4b29      	ldr	r3, [pc, #164]	; (8008414 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f003 030c 	and.w	r3, r3, #12
 800837a:	2b04      	cmp	r3, #4
 800837c:	d002      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0x30>
 800837e:	2b08      	cmp	r3, #8
 8008380:	d003      	beq.n	800838a <HAL_RCC_GetSysClockFreq+0x36>
 8008382:	e03c      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008384:	4b24      	ldr	r3, [pc, #144]	; (8008418 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008386:	623b      	str	r3, [r7, #32]
      break;
 8008388:	e03c      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008390:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008394:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	fa92 f2a2 	rbit	r2, r2
 800839c:	607a      	str	r2, [r7, #4]
  return result;
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	fab2 f282 	clz	r2, r2
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	40d3      	lsrs	r3, r2
 80083a8:	4a1c      	ldr	r2, [pc, #112]	; (800841c <HAL_RCC_GetSysClockFreq+0xc8>)
 80083aa:	5cd3      	ldrb	r3, [r2, r3]
 80083ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80083ae:	4b19      	ldr	r3, [pc, #100]	; (8008414 <HAL_RCC_GetSysClockFreq+0xc0>)
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	220f      	movs	r2, #15
 80083b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	fa92 f2a2 	rbit	r2, r2
 80083c0:	60fa      	str	r2, [r7, #12]
  return result;
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	fab2 f282 	clz	r2, r2
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	40d3      	lsrs	r3, r2
 80083cc:	4a14      	ldr	r2, [pc, #80]	; (8008420 <HAL_RCC_GetSysClockFreq+0xcc>)
 80083ce:	5cd3      	ldrb	r3, [r2, r3]
 80083d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d008      	beq.n	80083ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80083dc:	4a0e      	ldr	r2, [pc, #56]	; (8008418 <HAL_RCC_GetSysClockFreq+0xc4>)
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
 80083ec:	e004      	b.n	80083f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	4a0c      	ldr	r2, [pc, #48]	; (8008424 <HAL_RCC_GetSysClockFreq+0xd0>)
 80083f2:	fb02 f303 	mul.w	r3, r2, r3
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	623b      	str	r3, [r7, #32]
      break;
 80083fc:	e002      	b.n	8008404 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80083fe:	4b06      	ldr	r3, [pc, #24]	; (8008418 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008400:	623b      	str	r3, [r7, #32]
      break;
 8008402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008404:	6a3b      	ldr	r3, [r7, #32]
}
 8008406:	4618      	mov	r0, r3
 8008408:	372c      	adds	r7, #44	; 0x2c
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40021000 	.word	0x40021000
 8008418:	007a1200 	.word	0x007a1200
 800841c:	0800ecec 	.word	0x0800ecec
 8008420:	0800ecfc 	.word	0x0800ecfc
 8008424:	003d0900 	.word	0x003d0900

08008428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800842c:	4b03      	ldr	r3, [pc, #12]	; (800843c <HAL_RCC_GetHCLKFreq+0x14>)
 800842e:	681b      	ldr	r3, [r3, #0]
}
 8008430:	4618      	mov	r0, r3
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20000004 	.word	0x20000004

08008440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008446:	f7ff ffef 	bl	8008428 <HAL_RCC_GetHCLKFreq>
 800844a:	4601      	mov	r1, r0
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008454:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008458:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	fa92 f2a2 	rbit	r2, r2
 8008460:	603a      	str	r2, [r7, #0]
  return result;
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	fab2 f282 	clz	r2, r2
 8008468:	b2d2      	uxtb	r2, r2
 800846a:	40d3      	lsrs	r3, r2
 800846c:	4a04      	ldr	r2, [pc, #16]	; (8008480 <HAL_RCC_GetPCLK1Freq+0x40>)
 800846e:	5cd3      	ldrb	r3, [r2, r3]
 8008470:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40021000 	.word	0x40021000
 8008480:	0800ece4 	.word	0x0800ece4

08008484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800848a:	f7ff ffcd 	bl	8008428 <HAL_RCC_GetHCLKFreq>
 800848e:	4601      	mov	r1, r0
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008498:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800849c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	fa92 f2a2 	rbit	r2, r2
 80084a4:	603a      	str	r2, [r7, #0]
  return result;
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	fab2 f282 	clz	r2, r2
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	40d3      	lsrs	r3, r2
 80084b0:	4a04      	ldr	r2, [pc, #16]	; (80084c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80084b2:	5cd3      	ldrb	r3, [r2, r3]
 80084b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	40021000 	.word	0x40021000
 80084c4:	0800ece4 	.word	0x0800ece4

080084c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b092      	sub	sp, #72	; 0x48
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 80d4 	beq.w	8008694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084ec:	4b4e      	ldr	r3, [pc, #312]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10e      	bne.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084f8:	4b4b      	ldr	r3, [pc, #300]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	4a4a      	ldr	r2, [pc, #296]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008502:	61d3      	str	r3, [r2, #28]
 8008504:	4b48      	ldr	r3, [pc, #288]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800850c:	60bb      	str	r3, [r7, #8]
 800850e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008510:	2301      	movs	r3, #1
 8008512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008516:	4b45      	ldr	r3, [pc, #276]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d118      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008522:	4b42      	ldr	r3, [pc, #264]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a41      	ldr	r2, [pc, #260]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800852e:	f7fc f985 	bl	800483c <HAL_GetTick>
 8008532:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008534:	e008      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008536:	f7fc f981 	bl	800483c <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b64      	cmp	r3, #100	; 0x64
 8008542:	d901      	bls.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e169      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008548:	4b38      	ldr	r3, [pc, #224]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008554:	4b34      	ldr	r3, [pc, #208]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 8084 	beq.w	800866e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800856e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008570:	429a      	cmp	r2, r3
 8008572:	d07c      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008574:	4b2c      	ldr	r3, [pc, #176]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800857e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	fa93 f3a3 	rbit	r3, r3
 800858a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800858e:	fab3 f383 	clz	r3, r3
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	4b26      	ldr	r3, [pc, #152]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	461a      	mov	r2, r3
 800859e:	2301      	movs	r3, #1
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	fa93 f3a3 	rbit	r3, r3
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085b2:	fab3 f383 	clz	r3, r3
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	4b1d      	ldr	r3, [pc, #116]	; (8008630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	461a      	mov	r2, r3
 80085c2:	2300      	movs	r3, #0
 80085c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80085c6:	4a18      	ldr	r2, [pc, #96]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80085cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d04b      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d6:	f7fc f931 	bl	800483c <HAL_GetTick>
 80085da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085dc:	e00a      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085de:	f7fc f92d 	bl	800483c <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d901      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e113      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80085f4:	2302      	movs	r3, #2
 80085f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	fa93 f3a3 	rbit	r3, r3
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008600:	2302      	movs	r3, #2
 8008602:	623b      	str	r3, [r7, #32]
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	fa93 f3a3 	rbit	r3, r3
 800860a:	61fb      	str	r3, [r7, #28]
  return result;
 800860c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800860e:	fab3 f383 	clz	r3, r3
 8008612:	b2db      	uxtb	r3, r3
 8008614:	095b      	lsrs	r3, r3, #5
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f043 0302 	orr.w	r3, r3, #2
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b02      	cmp	r3, #2
 8008620:	d108      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008622:	4b01      	ldr	r3, [pc, #4]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	e00d      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008628:	40021000 	.word	0x40021000
 800862c:	40007000 	.word	0x40007000
 8008630:	10908100 	.word	0x10908100
 8008634:	2302      	movs	r3, #2
 8008636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	fa93 f3a3 	rbit	r3, r3
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	4b78      	ldr	r3, [pc, #480]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2202      	movs	r2, #2
 8008646:	613a      	str	r2, [r7, #16]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	fa92 f2a2 	rbit	r2, r2
 800864e:	60fa      	str	r2, [r7, #12]
  return result;
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	fab2 f282 	clz	r2, r2
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	f002 021f 	and.w	r2, r2, #31
 8008662:	2101      	movs	r1, #1
 8008664:	fa01 f202 	lsl.w	r2, r1, r2
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0b7      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800866e:	4b6d      	ldr	r3, [pc, #436]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	496a      	ldr	r1, [pc, #424]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800867c:	4313      	orrs	r3, r2
 800867e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008684:	2b01      	cmp	r3, #1
 8008686:	d105      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008688:	4b66      	ldr	r3, [pc, #408]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	4a65      	ldr	r2, [pc, #404]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800868e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d008      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086a0:	4b60      	ldr	r3, [pc, #384]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	f023 0203 	bic.w	r2, r3, #3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	495d      	ldr	r1, [pc, #372]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d008      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086be:	4b59      	ldr	r3, [pc, #356]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	4956      	ldr	r1, [pc, #344]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d008      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086dc:	4b51      	ldr	r3, [pc, #324]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	494e      	ldr	r1, [pc, #312]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d008      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086fa:	4b4a      	ldr	r3, [pc, #296]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f023 0210 	bic.w	r2, r3, #16
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	4947      	ldr	r1, [pc, #284]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008708:	4313      	orrs	r3, r2
 800870a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d008      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008718:	4b42      	ldr	r3, [pc, #264]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	493f      	ldr	r1, [pc, #252]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008726:	4313      	orrs	r3, r2
 8008728:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d008      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008736:	4b3b      	ldr	r3, [pc, #236]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f023 0220 	bic.w	r2, r3, #32
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	4938      	ldr	r1, [pc, #224]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008744:	4313      	orrs	r3, r2
 8008746:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008754:	4b33      	ldr	r3, [pc, #204]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	4930      	ldr	r1, [pc, #192]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008762:	4313      	orrs	r3, r2
 8008764:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0310 	and.w	r3, r3, #16
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008772:	4b2c      	ldr	r3, [pc, #176]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	4929      	ldr	r1, [pc, #164]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008780:	4313      	orrs	r3, r2
 8008782:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800878c:	2b00      	cmp	r3, #0
 800878e:	d008      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008790:	4b24      	ldr	r3, [pc, #144]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	4921      	ldr	r1, [pc, #132]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d008      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80087ae:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	491a      	ldr	r1, [pc, #104]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d008      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80087cc:	4b15      	ldr	r3, [pc, #84]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	4912      	ldr	r1, [pc, #72]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d008      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80087ea:	4b0e      	ldr	r3, [pc, #56]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	490b      	ldr	r1, [pc, #44]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	4903      	ldr	r1, [pc, #12]	; (8008824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3748      	adds	r7, #72	; 0x48
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40021000 	.word	0x40021000

08008828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e09d      	b.n	8008976 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b00      	cmp	r3, #0
 8008840:	d108      	bne.n	8008854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800884a:	d009      	beq.n	8008860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	61da      	str	r2, [r3, #28]
 8008852:	e005      	b.n	8008860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7fb f9ac 	bl	8003bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008896:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088a0:	d902      	bls.n	80088a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
 80088a6:	e002      	b.n	80088ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088b6:	d007      	beq.n	80088c8 <HAL_SPI_Init+0xa0>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088c0:	d002      	beq.n	80088c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890a:	ea42 0103 	orr.w	r1, r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	f003 0204 	and.w	r2, r3, #4
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	f003 0310 	and.w	r3, r3, #16
 8008930:	431a      	orrs	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008944:	ea42 0103 	orr.w	r1, r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69da      	ldr	r2, [r3, #28]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008964:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b08a      	sub	sp, #40	; 0x28
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800898c:	2301      	movs	r3, #1
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_SPI_TransmitReceive+0x26>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e20a      	b.n	8008dba <HAL_SPI_TransmitReceive+0x43c>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089ac:	f7fb ff46 	bl	800483c <HAL_GetTick>
 80089b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80089c0:	887b      	ldrh	r3, [r7, #2]
 80089c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80089c4:	887b      	ldrh	r3, [r7, #2]
 80089c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80089c8:	7efb      	ldrb	r3, [r7, #27]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d00e      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x6e>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d4:	d106      	bne.n	80089e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <HAL_SPI_TransmitReceive+0x66>
 80089de:	7efb      	ldrb	r3, [r7, #27]
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d003      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
 80089e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80089ea:	e1e0      	b.n	8008dae <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d005      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x80>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <HAL_SPI_TransmitReceive+0x80>
 80089f8:	887b      	ldrh	r3, [r7, #2]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d103      	bne.n	8008a06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008a04:	e1d3      	b.n	8008dae <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d003      	beq.n	8008a1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2205      	movs	r2, #5
 8008a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	887a      	ldrh	r2, [r7, #2]
 8008a2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	887a      	ldrh	r2, [r7, #2]
 8008a32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	887a      	ldrh	r2, [r7, #2]
 8008a40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	887a      	ldrh	r2, [r7, #2]
 8008a46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a5c:	d802      	bhi.n	8008a64 <HAL_SPI_TransmitReceive+0xe6>
 8008a5e:	8a3b      	ldrh	r3, [r7, #16]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d908      	bls.n	8008a76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a72:	605a      	str	r2, [r3, #4]
 8008a74:	e007      	b.n	8008a86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a90:	2b40      	cmp	r3, #64	; 0x40
 8008a92:	d007      	beq.n	8008aa4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aac:	f240 8081 	bls.w	8008bb2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <HAL_SPI_TransmitReceive+0x140>
 8008ab8:	8a7b      	ldrh	r3, [r7, #18]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d16d      	bne.n	8008b9a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	881a      	ldrh	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	1c9a      	adds	r2, r3, #2
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae2:	e05a      	b.n	8008b9a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d11b      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x1ac>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d016      	beq.n	8008b2a <HAL_SPI_TransmitReceive+0x1ac>
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d113      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	881a      	ldrh	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b12:	1c9a      	adds	r2, r3, #2
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d11c      	bne.n	8008b72 <HAL_SPI_TransmitReceive+0x1f4>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d016      	beq.n	8008b72 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	b292      	uxth	r2, r2
 8008b50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	1c9a      	adds	r2, r3, #2
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b72:	f7fb fe63 	bl	800483c <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d80b      	bhi.n	8008b9a <HAL_SPI_TransmitReceive+0x21c>
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b88:	d007      	beq.n	8008b9a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8008b98:	e109      	b.n	8008dae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d19f      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x166>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d199      	bne.n	8008ae4 <HAL_SPI_TransmitReceive+0x166>
 8008bb0:	e0e3      	b.n	8008d7a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_SPI_TransmitReceive+0x244>
 8008bba:	8a7b      	ldrh	r3, [r7, #18]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	f040 80cf 	bne.w	8008d60 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d912      	bls.n	8008bf2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	881a      	ldrh	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	1c9a      	adds	r2, r3, #2
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b02      	subs	r3, #2
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bf0:	e0b6      	b.n	8008d60 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	330c      	adds	r3, #12
 8008bfc:	7812      	ldrb	r2, [r2, #0]
 8008bfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c18:	e0a2      	b.n	8008d60 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d134      	bne.n	8008c92 <HAL_SPI_TransmitReceive+0x314>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d02f      	beq.n	8008c92 <HAL_SPI_TransmitReceive+0x314>
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d12c      	bne.n	8008c92 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d912      	bls.n	8008c68 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	881a      	ldrh	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c52:	1c9a      	adds	r2, r3, #2
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3b02      	subs	r3, #2
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c66:	e012      	b.n	8008c8e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	330c      	adds	r3, #12
 8008c72:	7812      	ldrb	r2, [r2, #0]
 8008c74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d148      	bne.n	8008d32 <HAL_SPI_TransmitReceive+0x3b4>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d042      	beq.n	8008d32 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d923      	bls.n	8008d00 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	b292      	uxth	r2, r2
 8008cc4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	1c9a      	adds	r2, r3, #2
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b02      	subs	r3, #2
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d81f      	bhi.n	8008d2e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008cfc:	605a      	str	r2, [r3, #4]
 8008cfe:	e016      	b.n	8008d2e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f103 020c 	add.w	r2, r3, #12
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0c:	7812      	ldrb	r2, [r2, #0]
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d32:	f7fb fd83 	bl	800483c <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d803      	bhi.n	8008d4a <HAL_SPI_TransmitReceive+0x3cc>
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d48:	d102      	bne.n	8008d50 <HAL_SPI_TransmitReceive+0x3d2>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d107      	bne.n	8008d60 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8008d5e:	e026      	b.n	8008dae <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f47f af57 	bne.w	8008c1a <HAL_SPI_TransmitReceive+0x29c>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f47f af50 	bne.w	8008c1a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 f93e 	bl	8009000 <SPI_EndRxTxTransaction>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008da4:	e003      	b.n	8008dae <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008db6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3728      	adds	r7, #40	; 0x28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008dd4:	f7fb fd32 	bl	800483c <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4413      	add	r3, r2
 8008de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008de4:	f7fb fd2a 	bl	800483c <HAL_GetTick>
 8008de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008dea:	4b39      	ldr	r3, [pc, #228]	; (8008ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	015b      	lsls	r3, r3, #5
 8008df0:	0d1b      	lsrs	r3, r3, #20
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	fb02 f303 	mul.w	r3, r2, r3
 8008df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dfa:	e054      	b.n	8008ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d050      	beq.n	8008ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e04:	f7fb fd1a 	bl	800483c <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d902      	bls.n	8008e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d13d      	bne.n	8008e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e32:	d111      	bne.n	8008e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3c:	d004      	beq.n	8008e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e46:	d107      	bne.n	8008e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e60:	d10f      	bne.n	8008e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e017      	b.n	8008ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	bf0c      	ite	eq
 8008eb6:	2301      	moveq	r3, #1
 8008eb8:	2300      	movne	r3, #0
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d19b      	bne.n	8008dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000004 	.word	0x20000004

08008ed4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08a      	sub	sp, #40	; 0x28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008ee6:	f7fb fca9 	bl	800483c <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008ef6:	f7fb fca1 	bl	800483c <HAL_GetTick>
 8008efa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f04:	4b3d      	ldr	r3, [pc, #244]	; (8008ffc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	00da      	lsls	r2, r3, #3
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	0d1b      	lsrs	r3, r3, #20
 8008f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008f1c:	e060      	b.n	8008fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f24:	d107      	bne.n	8008f36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3c:	d050      	beq.n	8008fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f3e:	f7fb fc7d 	bl	800483c <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d902      	bls.n	8008f54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d13d      	bne.n	8008fd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f6c:	d111      	bne.n	8008f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f76:	d004      	beq.n	8008f82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f80:	d107      	bne.n	8008f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f9a:	d10f      	bne.n	8008fbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e010      	b.n	8008ff2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689a      	ldr	r2, [r3, #8]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d196      	bne.n	8008f1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3728      	adds	r7, #40	; 0x28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000004 	.word	0x20000004

08009000 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2200      	movs	r2, #0
 8009014:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7ff ff5b 	bl	8008ed4 <SPI_WaitFifoStateUntilTimeout>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009028:	f043 0220 	orr.w	r2, r3, #32
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e027      	b.n	8009084 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	2180      	movs	r1, #128	; 0x80
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f7ff fec0 	bl	8008dc4 <SPI_WaitFlagStateUntilTimeout>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d007      	beq.n	800905a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800904e:	f043 0220 	orr.w	r2, r3, #32
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e014      	b.n	8009084 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f7ff ff34 	bl	8008ed4 <SPI_WaitFifoStateUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009076:	f043 0220 	orr.w	r2, r3, #32
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e000      	b.n	8009084 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e049      	b.n	8009132 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fb f8a4 	bl	8004200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f000 fbce 	bl	800986c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b01      	cmp	r3, #1
 800914e:	d001      	beq.n	8009154 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e042      	b.n	80091da <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a21      	ldr	r2, [pc, #132]	; (80091e8 <HAL_TIM_Base_Start+0xac>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d018      	beq.n	8009198 <HAL_TIM_Base_Start+0x5c>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916e:	d013      	beq.n	8009198 <HAL_TIM_Base_Start+0x5c>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a1d      	ldr	r2, [pc, #116]	; (80091ec <HAL_TIM_Base_Start+0xb0>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00e      	beq.n	8009198 <HAL_TIM_Base_Start+0x5c>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a1c      	ldr	r2, [pc, #112]	; (80091f0 <HAL_TIM_Base_Start+0xb4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d009      	beq.n	8009198 <HAL_TIM_Base_Start+0x5c>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a1a      	ldr	r2, [pc, #104]	; (80091f4 <HAL_TIM_Base_Start+0xb8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <HAL_TIM_Base_Start+0x5c>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a19      	ldr	r2, [pc, #100]	; (80091f8 <HAL_TIM_Base_Start+0xbc>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d115      	bne.n	80091c4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	4b17      	ldr	r3, [pc, #92]	; (80091fc <HAL_TIM_Base_Start+0xc0>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b06      	cmp	r3, #6
 80091a8:	d015      	beq.n	80091d6 <HAL_TIM_Base_Start+0x9a>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b0:	d011      	beq.n	80091d6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0201 	orr.w	r2, r2, #1
 80091c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c2:	e008      	b.n	80091d6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0201 	orr.w	r2, r2, #1
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e000      	b.n	80091d8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40012c00 	.word	0x40012c00
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40013400 	.word	0x40013400
 80091f8:	40014000 	.word	0x40014000
 80091fc:	00010007 	.word	0x00010007

08009200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e049      	b.n	80092a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d106      	bne.n	800922c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7fb f80a 	bl	8004240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3304      	adds	r3, #4
 800923c:	4619      	mov	r1, r3
 800923e:	4610      	mov	r0, r2
 8009240:	f000 fb14 	bl	800986c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d109      	bne.n	80092d4 <HAL_TIM_PWM_Start+0x24>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	bf14      	ite	ne
 80092cc:	2301      	movne	r3, #1
 80092ce:	2300      	moveq	r3, #0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	e03c      	b.n	800934e <HAL_TIM_PWM_Start+0x9e>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	d109      	bne.n	80092ee <HAL_TIM_PWM_Start+0x3e>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	bf14      	ite	ne
 80092e6:	2301      	movne	r3, #1
 80092e8:	2300      	moveq	r3, #0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	e02f      	b.n	800934e <HAL_TIM_PWM_Start+0x9e>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b08      	cmp	r3, #8
 80092f2:	d109      	bne.n	8009308 <HAL_TIM_PWM_Start+0x58>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	bf14      	ite	ne
 8009300:	2301      	movne	r3, #1
 8009302:	2300      	moveq	r3, #0
 8009304:	b2db      	uxtb	r3, r3
 8009306:	e022      	b.n	800934e <HAL_TIM_PWM_Start+0x9e>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b0c      	cmp	r3, #12
 800930c:	d109      	bne.n	8009322 <HAL_TIM_PWM_Start+0x72>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b01      	cmp	r3, #1
 8009318:	bf14      	ite	ne
 800931a:	2301      	movne	r3, #1
 800931c:	2300      	moveq	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	e015      	b.n	800934e <HAL_TIM_PWM_Start+0x9e>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b10      	cmp	r3, #16
 8009326:	d109      	bne.n	800933c <HAL_TIM_PWM_Start+0x8c>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b01      	cmp	r3, #1
 8009332:	bf14      	ite	ne
 8009334:	2301      	movne	r3, #1
 8009336:	2300      	moveq	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	e008      	b.n	800934e <HAL_TIM_PWM_Start+0x9e>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	bf14      	ite	ne
 8009348:	2301      	movne	r3, #1
 800934a:	2300      	moveq	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e097      	b.n	8009486 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d104      	bne.n	8009366 <HAL_TIM_PWM_Start+0xb6>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009364:	e023      	b.n	80093ae <HAL_TIM_PWM_Start+0xfe>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b04      	cmp	r3, #4
 800936a:	d104      	bne.n	8009376 <HAL_TIM_PWM_Start+0xc6>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009374:	e01b      	b.n	80093ae <HAL_TIM_PWM_Start+0xfe>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b08      	cmp	r3, #8
 800937a:	d104      	bne.n	8009386 <HAL_TIM_PWM_Start+0xd6>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009384:	e013      	b.n	80093ae <HAL_TIM_PWM_Start+0xfe>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b0c      	cmp	r3, #12
 800938a:	d104      	bne.n	8009396 <HAL_TIM_PWM_Start+0xe6>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009394:	e00b      	b.n	80093ae <HAL_TIM_PWM_Start+0xfe>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b10      	cmp	r3, #16
 800939a:	d104      	bne.n	80093a6 <HAL_TIM_PWM_Start+0xf6>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093a4:	e003      	b.n	80093ae <HAL_TIM_PWM_Start+0xfe>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2201      	movs	r2, #1
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fe58 	bl	800a06c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a33      	ldr	r2, [pc, #204]	; (8009490 <HAL_TIM_PWM_Start+0x1e0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <HAL_TIM_PWM_Start+0x13e>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a32      	ldr	r2, [pc, #200]	; (8009494 <HAL_TIM_PWM_Start+0x1e4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00e      	beq.n	80093ee <HAL_TIM_PWM_Start+0x13e>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a30      	ldr	r2, [pc, #192]	; (8009498 <HAL_TIM_PWM_Start+0x1e8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d009      	beq.n	80093ee <HAL_TIM_PWM_Start+0x13e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a2f      	ldr	r2, [pc, #188]	; (800949c <HAL_TIM_PWM_Start+0x1ec>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d004      	beq.n	80093ee <HAL_TIM_PWM_Start+0x13e>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a2d      	ldr	r2, [pc, #180]	; (80094a0 <HAL_TIM_PWM_Start+0x1f0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d101      	bne.n	80093f2 <HAL_TIM_PWM_Start+0x142>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <HAL_TIM_PWM_Start+0x144>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d007      	beq.n	8009408 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009406:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a20      	ldr	r2, [pc, #128]	; (8009490 <HAL_TIM_PWM_Start+0x1e0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d018      	beq.n	8009444 <HAL_TIM_PWM_Start+0x194>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800941a:	d013      	beq.n	8009444 <HAL_TIM_PWM_Start+0x194>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a20      	ldr	r2, [pc, #128]	; (80094a4 <HAL_TIM_PWM_Start+0x1f4>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d00e      	beq.n	8009444 <HAL_TIM_PWM_Start+0x194>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <HAL_TIM_PWM_Start+0x1f8>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d009      	beq.n	8009444 <HAL_TIM_PWM_Start+0x194>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a17      	ldr	r2, [pc, #92]	; (8009494 <HAL_TIM_PWM_Start+0x1e4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d004      	beq.n	8009444 <HAL_TIM_PWM_Start+0x194>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a16      	ldr	r2, [pc, #88]	; (8009498 <HAL_TIM_PWM_Start+0x1e8>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d115      	bne.n	8009470 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	4b18      	ldr	r3, [pc, #96]	; (80094ac <HAL_TIM_PWM_Start+0x1fc>)
 800944c:	4013      	ands	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b06      	cmp	r3, #6
 8009454:	d015      	beq.n	8009482 <HAL_TIM_PWM_Start+0x1d2>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800945c:	d011      	beq.n	8009482 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f042 0201 	orr.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946e:	e008      	b.n	8009482 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0201 	orr.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]
 8009480:	e000      	b.n	8009484 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40012c00 	.word	0x40012c00
 8009494:	40013400 	.word	0x40013400
 8009498:	40014000 	.word	0x40014000
 800949c:	40014400 	.word	0x40014400
 80094a0:	40014800 	.word	0x40014800
 80094a4:	40000400 	.word	0x40000400
 80094a8:	40000800 	.word	0x40000800
 80094ac:	00010007 	.word	0x00010007

080094b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e0ff      	b.n	80096ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b14      	cmp	r3, #20
 80094da:	f200 80f0 	bhi.w	80096be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094de:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009539 	.word	0x08009539
 80094e8:	080096bf 	.word	0x080096bf
 80094ec:	080096bf 	.word	0x080096bf
 80094f0:	080096bf 	.word	0x080096bf
 80094f4:	08009579 	.word	0x08009579
 80094f8:	080096bf 	.word	0x080096bf
 80094fc:	080096bf 	.word	0x080096bf
 8009500:	080096bf 	.word	0x080096bf
 8009504:	080095bb 	.word	0x080095bb
 8009508:	080096bf 	.word	0x080096bf
 800950c:	080096bf 	.word	0x080096bf
 8009510:	080096bf 	.word	0x080096bf
 8009514:	080095fb 	.word	0x080095fb
 8009518:	080096bf 	.word	0x080096bf
 800951c:	080096bf 	.word	0x080096bf
 8009520:	080096bf 	.word	0x080096bf
 8009524:	0800963d 	.word	0x0800963d
 8009528:	080096bf 	.word	0x080096bf
 800952c:	080096bf 	.word	0x080096bf
 8009530:	080096bf 	.word	0x080096bf
 8009534:	0800967d 	.word	0x0800967d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fa24 	bl	800998c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0208 	orr.w	r2, r2, #8
 8009552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0204 	bic.w	r2, r2, #4
 8009562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6999      	ldr	r1, [r3, #24]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	691a      	ldr	r2, [r3, #16]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	619a      	str	r2, [r3, #24]
      break;
 8009576:	e0a5      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fa94 	bl	8009aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	699a      	ldr	r2, [r3, #24]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6999      	ldr	r1, [r3, #24]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	021a      	lsls	r2, r3, #8
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	430a      	orrs	r2, r1
 80095b6:	619a      	str	r2, [r3, #24]
      break;
 80095b8:	e084      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fafd 	bl	8009bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f042 0208 	orr.w	r2, r2, #8
 80095d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0204 	bic.w	r2, r2, #4
 80095e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69d9      	ldr	r1, [r3, #28]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	61da      	str	r2, [r3, #28]
      break;
 80095f8:	e064      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68b9      	ldr	r1, [r7, #8]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fb65 	bl	8009cd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69da      	ldr	r2, [r3, #28]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69d9      	ldr	r1, [r3, #28]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	021a      	lsls	r2, r3, #8
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	61da      	str	r2, [r3, #28]
      break;
 800963a:	e043      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fbae 	bl	8009da4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0208 	orr.w	r2, r2, #8
 8009656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0204 	bic.w	r2, r2, #4
 8009666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800967a:	e023      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68b9      	ldr	r1, [r7, #8]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fbf2 	bl	8009e6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009696:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	021a      	lsls	r2, r3, #8
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80096bc:	e002      	b.n	80096c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	75fb      	strb	r3, [r7, #23]
      break;
 80096c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop

080096d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d101      	bne.n	80096f4 <HAL_TIM_ConfigClockSource+0x1c>
 80096f0:	2302      	movs	r3, #2
 80096f2:	e0b6      	b.n	8009862 <HAL_TIM_ConfigClockSource+0x18a>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2202      	movs	r2, #2
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800971e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009730:	d03e      	beq.n	80097b0 <HAL_TIM_ConfigClockSource+0xd8>
 8009732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009736:	f200 8087 	bhi.w	8009848 <HAL_TIM_ConfigClockSource+0x170>
 800973a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973e:	f000 8086 	beq.w	800984e <HAL_TIM_ConfigClockSource+0x176>
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009746:	d87f      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
 8009748:	2b70      	cmp	r3, #112	; 0x70
 800974a:	d01a      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0xaa>
 800974c:	2b70      	cmp	r3, #112	; 0x70
 800974e:	d87b      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
 8009750:	2b60      	cmp	r3, #96	; 0x60
 8009752:	d050      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0x11e>
 8009754:	2b60      	cmp	r3, #96	; 0x60
 8009756:	d877      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
 8009758:	2b50      	cmp	r3, #80	; 0x50
 800975a:	d03c      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0xfe>
 800975c:	2b50      	cmp	r3, #80	; 0x50
 800975e:	d873      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
 8009760:	2b40      	cmp	r3, #64	; 0x40
 8009762:	d058      	beq.n	8009816 <HAL_TIM_ConfigClockSource+0x13e>
 8009764:	2b40      	cmp	r3, #64	; 0x40
 8009766:	d86f      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
 8009768:	2b30      	cmp	r3, #48	; 0x30
 800976a:	d064      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15e>
 800976c:	2b30      	cmp	r3, #48	; 0x30
 800976e:	d86b      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
 8009770:	2b20      	cmp	r3, #32
 8009772:	d060      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15e>
 8009774:	2b20      	cmp	r3, #32
 8009776:	d867      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d05c      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15e>
 800977c:	2b10      	cmp	r3, #16
 800977e:	d05a      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15e>
 8009780:	e062      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009792:	f000 fc4b 	bl	800a02c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	609a      	str	r2, [r3, #8]
      break;
 80097ae:	e04f      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097c0:	f000 fc34 	bl	800a02c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097d2:	609a      	str	r2, [r3, #8]
      break;
 80097d4:	e03c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097e2:	461a      	mov	r2, r3
 80097e4:	f000 fba8 	bl	8009f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2150      	movs	r1, #80	; 0x50
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fc01 	bl	8009ff6 <TIM_ITRx_SetConfig>
      break;
 80097f4:	e02c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009802:	461a      	mov	r2, r3
 8009804:	f000 fbc7 	bl	8009f96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2160      	movs	r1, #96	; 0x60
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fbf1 	bl	8009ff6 <TIM_ITRx_SetConfig>
      break;
 8009814:	e01c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009822:	461a      	mov	r2, r3
 8009824:	f000 fb88 	bl	8009f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2140      	movs	r1, #64	; 0x40
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fbe1 	bl	8009ff6 <TIM_ITRx_SetConfig>
      break;
 8009834:	e00c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4619      	mov	r1, r3
 8009840:	4610      	mov	r0, r2
 8009842:	f000 fbd8 	bl	8009ff6 <TIM_ITRx_SetConfig>
      break;
 8009846:	e003      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
      break;
 800984c:	e000      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800984e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
	...

0800986c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a3c      	ldr	r2, [pc, #240]	; (8009970 <TIM_Base_SetConfig+0x104>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00f      	beq.n	80098a4 <TIM_Base_SetConfig+0x38>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988a:	d00b      	beq.n	80098a4 <TIM_Base_SetConfig+0x38>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a39      	ldr	r2, [pc, #228]	; (8009974 <TIM_Base_SetConfig+0x108>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d007      	beq.n	80098a4 <TIM_Base_SetConfig+0x38>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a38      	ldr	r2, [pc, #224]	; (8009978 <TIM_Base_SetConfig+0x10c>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d003      	beq.n	80098a4 <TIM_Base_SetConfig+0x38>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a37      	ldr	r2, [pc, #220]	; (800997c <TIM_Base_SetConfig+0x110>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d108      	bne.n	80098b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2d      	ldr	r2, [pc, #180]	; (8009970 <TIM_Base_SetConfig+0x104>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d01b      	beq.n	80098f6 <TIM_Base_SetConfig+0x8a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c4:	d017      	beq.n	80098f6 <TIM_Base_SetConfig+0x8a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a2a      	ldr	r2, [pc, #168]	; (8009974 <TIM_Base_SetConfig+0x108>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d013      	beq.n	80098f6 <TIM_Base_SetConfig+0x8a>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a29      	ldr	r2, [pc, #164]	; (8009978 <TIM_Base_SetConfig+0x10c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00f      	beq.n	80098f6 <TIM_Base_SetConfig+0x8a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a28      	ldr	r2, [pc, #160]	; (800997c <TIM_Base_SetConfig+0x110>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00b      	beq.n	80098f6 <TIM_Base_SetConfig+0x8a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a27      	ldr	r2, [pc, #156]	; (8009980 <TIM_Base_SetConfig+0x114>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d007      	beq.n	80098f6 <TIM_Base_SetConfig+0x8a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a26      	ldr	r2, [pc, #152]	; (8009984 <TIM_Base_SetConfig+0x118>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d003      	beq.n	80098f6 <TIM_Base_SetConfig+0x8a>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a25      	ldr	r2, [pc, #148]	; (8009988 <TIM_Base_SetConfig+0x11c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d108      	bne.n	8009908 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a10      	ldr	r2, [pc, #64]	; (8009970 <TIM_Base_SetConfig+0x104>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d00f      	beq.n	8009954 <TIM_Base_SetConfig+0xe8>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a11      	ldr	r2, [pc, #68]	; (800997c <TIM_Base_SetConfig+0x110>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d00b      	beq.n	8009954 <TIM_Base_SetConfig+0xe8>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a10      	ldr	r2, [pc, #64]	; (8009980 <TIM_Base_SetConfig+0x114>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d007      	beq.n	8009954 <TIM_Base_SetConfig+0xe8>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a0f      	ldr	r2, [pc, #60]	; (8009984 <TIM_Base_SetConfig+0x118>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d003      	beq.n	8009954 <TIM_Base_SetConfig+0xe8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a0e      	ldr	r2, [pc, #56]	; (8009988 <TIM_Base_SetConfig+0x11c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d103      	bne.n	800995c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	691a      	ldr	r2, [r3, #16]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	615a      	str	r2, [r3, #20]
}
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	40012c00 	.word	0x40012c00
 8009974:	40000400 	.word	0x40000400
 8009978:	40000800 	.word	0x40000800
 800997c:	40013400 	.word	0x40013400
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800

0800998c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f023 0201 	bic.w	r2, r3, #1
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f023 0302 	bic.w	r3, r3, #2
 80099d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a2c      	ldr	r2, [pc, #176]	; (8009a98 <TIM_OC1_SetConfig+0x10c>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d00f      	beq.n	8009a0c <TIM_OC1_SetConfig+0x80>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a2b      	ldr	r2, [pc, #172]	; (8009a9c <TIM_OC1_SetConfig+0x110>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00b      	beq.n	8009a0c <TIM_OC1_SetConfig+0x80>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a2a      	ldr	r2, [pc, #168]	; (8009aa0 <TIM_OC1_SetConfig+0x114>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d007      	beq.n	8009a0c <TIM_OC1_SetConfig+0x80>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a29      	ldr	r2, [pc, #164]	; (8009aa4 <TIM_OC1_SetConfig+0x118>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d003      	beq.n	8009a0c <TIM_OC1_SetConfig+0x80>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a28      	ldr	r2, [pc, #160]	; (8009aa8 <TIM_OC1_SetConfig+0x11c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d10c      	bne.n	8009a26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f023 0308 	bic.w	r3, r3, #8
 8009a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f023 0304 	bic.w	r3, r3, #4
 8009a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <TIM_OC1_SetConfig+0x10c>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d00f      	beq.n	8009a4e <TIM_OC1_SetConfig+0xc2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a1a      	ldr	r2, [pc, #104]	; (8009a9c <TIM_OC1_SetConfig+0x110>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00b      	beq.n	8009a4e <TIM_OC1_SetConfig+0xc2>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a19      	ldr	r2, [pc, #100]	; (8009aa0 <TIM_OC1_SetConfig+0x114>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d007      	beq.n	8009a4e <TIM_OC1_SetConfig+0xc2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a18      	ldr	r2, [pc, #96]	; (8009aa4 <TIM_OC1_SetConfig+0x118>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d003      	beq.n	8009a4e <TIM_OC1_SetConfig+0xc2>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a17      	ldr	r2, [pc, #92]	; (8009aa8 <TIM_OC1_SetConfig+0x11c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d111      	bne.n	8009a72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	621a      	str	r2, [r3, #32]
}
 8009a8c:	bf00      	nop
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	40012c00 	.word	0x40012c00
 8009a9c:	40013400 	.word	0x40013400
 8009aa0:	40014000 	.word	0x40014000
 8009aa4:	40014400 	.word	0x40014400
 8009aa8:	40014800 	.word	0x40014800

08009aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	f023 0210 	bic.w	r2, r3, #16
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f023 0320 	bic.w	r3, r3, #32
 8009afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	011b      	lsls	r3, r3, #4
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a28      	ldr	r2, [pc, #160]	; (8009bac <TIM_OC2_SetConfig+0x100>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d003      	beq.n	8009b18 <TIM_OC2_SetConfig+0x6c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a27      	ldr	r2, [pc, #156]	; (8009bb0 <TIM_OC2_SetConfig+0x104>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d10d      	bne.n	8009b34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a1d      	ldr	r2, [pc, #116]	; (8009bac <TIM_OC2_SetConfig+0x100>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00f      	beq.n	8009b5c <TIM_OC2_SetConfig+0xb0>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a1c      	ldr	r2, [pc, #112]	; (8009bb0 <TIM_OC2_SetConfig+0x104>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00b      	beq.n	8009b5c <TIM_OC2_SetConfig+0xb0>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a1b      	ldr	r2, [pc, #108]	; (8009bb4 <TIM_OC2_SetConfig+0x108>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d007      	beq.n	8009b5c <TIM_OC2_SetConfig+0xb0>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a1a      	ldr	r2, [pc, #104]	; (8009bb8 <TIM_OC2_SetConfig+0x10c>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d003      	beq.n	8009b5c <TIM_OC2_SetConfig+0xb0>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <TIM_OC2_SetConfig+0x110>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d113      	bne.n	8009b84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b62:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b6a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	621a      	str	r2, [r3, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	40012c00 	.word	0x40012c00
 8009bb0:	40013400 	.word	0x40013400
 8009bb4:	40014000 	.word	0x40014000
 8009bb8:	40014400 	.word	0x40014400
 8009bbc:	40014800 	.word	0x40014800

08009bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a27      	ldr	r2, [pc, #156]	; (8009cbc <TIM_OC3_SetConfig+0xfc>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d003      	beq.n	8009c2a <TIM_OC3_SetConfig+0x6a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a26      	ldr	r2, [pc, #152]	; (8009cc0 <TIM_OC3_SetConfig+0x100>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d10d      	bne.n	8009c46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a1c      	ldr	r2, [pc, #112]	; (8009cbc <TIM_OC3_SetConfig+0xfc>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d00f      	beq.n	8009c6e <TIM_OC3_SetConfig+0xae>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a1b      	ldr	r2, [pc, #108]	; (8009cc0 <TIM_OC3_SetConfig+0x100>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00b      	beq.n	8009c6e <TIM_OC3_SetConfig+0xae>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a1a      	ldr	r2, [pc, #104]	; (8009cc4 <TIM_OC3_SetConfig+0x104>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d007      	beq.n	8009c6e <TIM_OC3_SetConfig+0xae>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a19      	ldr	r2, [pc, #100]	; (8009cc8 <TIM_OC3_SetConfig+0x108>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d003      	beq.n	8009c6e <TIM_OC3_SetConfig+0xae>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a18      	ldr	r2, [pc, #96]	; (8009ccc <TIM_OC3_SetConfig+0x10c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d113      	bne.n	8009c96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	011b      	lsls	r3, r3, #4
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	621a      	str	r2, [r3, #32]
}
 8009cb0:	bf00      	nop
 8009cb2:	371c      	adds	r7, #28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	40012c00 	.word	0x40012c00
 8009cc0:	40013400 	.word	0x40013400
 8009cc4:	40014000 	.word	0x40014000
 8009cc8:	40014400 	.word	0x40014400
 8009ccc:	40014800 	.word	0x40014800

08009cd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	031b      	lsls	r3, r3, #12
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a18      	ldr	r2, [pc, #96]	; (8009d90 <TIM_OC4_SetConfig+0xc0>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d00f      	beq.n	8009d54 <TIM_OC4_SetConfig+0x84>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a17      	ldr	r2, [pc, #92]	; (8009d94 <TIM_OC4_SetConfig+0xc4>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00b      	beq.n	8009d54 <TIM_OC4_SetConfig+0x84>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a16      	ldr	r2, [pc, #88]	; (8009d98 <TIM_OC4_SetConfig+0xc8>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_OC4_SetConfig+0x84>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a15      	ldr	r2, [pc, #84]	; (8009d9c <TIM_OC4_SetConfig+0xcc>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_OC4_SetConfig+0x84>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a14      	ldr	r2, [pc, #80]	; (8009da0 <TIM_OC4_SetConfig+0xd0>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d109      	bne.n	8009d68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	019b      	lsls	r3, r3, #6
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	621a      	str	r2, [r3, #32]
}
 8009d82:	bf00      	nop
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	40012c00 	.word	0x40012c00
 8009d94:	40013400 	.word	0x40013400
 8009d98:	40014000 	.word	0x40014000
 8009d9c:	40014400 	.word	0x40014400
 8009da0:	40014800 	.word	0x40014800

08009da4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009de8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a17      	ldr	r2, [pc, #92]	; (8009e58 <TIM_OC5_SetConfig+0xb4>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00f      	beq.n	8009e1e <TIM_OC5_SetConfig+0x7a>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a16      	ldr	r2, [pc, #88]	; (8009e5c <TIM_OC5_SetConfig+0xb8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d00b      	beq.n	8009e1e <TIM_OC5_SetConfig+0x7a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <TIM_OC5_SetConfig+0xbc>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d007      	beq.n	8009e1e <TIM_OC5_SetConfig+0x7a>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a14      	ldr	r2, [pc, #80]	; (8009e64 <TIM_OC5_SetConfig+0xc0>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d003      	beq.n	8009e1e <TIM_OC5_SetConfig+0x7a>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a13      	ldr	r2, [pc, #76]	; (8009e68 <TIM_OC5_SetConfig+0xc4>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d109      	bne.n	8009e32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	021b      	lsls	r3, r3, #8
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	621a      	str	r2, [r3, #32]
}
 8009e4c:	bf00      	nop
 8009e4e:	371c      	adds	r7, #28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	40012c00 	.word	0x40012c00
 8009e5c:	40013400 	.word	0x40013400
 8009e60:	40014000 	.word	0x40014000
 8009e64:	40014400 	.word	0x40014400
 8009e68:	40014800 	.word	0x40014800

08009e6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	021b      	lsls	r3, r3, #8
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	051b      	lsls	r3, r3, #20
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a18      	ldr	r2, [pc, #96]	; (8009f24 <TIM_OC6_SetConfig+0xb8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d00f      	beq.n	8009ee8 <TIM_OC6_SetConfig+0x7c>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a17      	ldr	r2, [pc, #92]	; (8009f28 <TIM_OC6_SetConfig+0xbc>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00b      	beq.n	8009ee8 <TIM_OC6_SetConfig+0x7c>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a16      	ldr	r2, [pc, #88]	; (8009f2c <TIM_OC6_SetConfig+0xc0>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d007      	beq.n	8009ee8 <TIM_OC6_SetConfig+0x7c>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a15      	ldr	r2, [pc, #84]	; (8009f30 <TIM_OC6_SetConfig+0xc4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d003      	beq.n	8009ee8 <TIM_OC6_SetConfig+0x7c>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a14      	ldr	r2, [pc, #80]	; (8009f34 <TIM_OC6_SetConfig+0xc8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d109      	bne.n	8009efc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	029b      	lsls	r3, r3, #10
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	621a      	str	r2, [r3, #32]
}
 8009f16:	bf00      	nop
 8009f18:	371c      	adds	r7, #28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	40012c00 	.word	0x40012c00
 8009f28:	40013400 	.word	0x40013400
 8009f2c:	40014000 	.word	0x40014000
 8009f30:	40014400 	.word	0x40014400
 8009f34:	40014800 	.word	0x40014800

08009f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a1b      	ldr	r3, [r3, #32]
 8009f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	f023 0201 	bic.w	r2, r3, #1
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	f023 030a 	bic.w	r3, r3, #10
 8009f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	621a      	str	r2, [r3, #32]
}
 8009f8a:	bf00      	nop
 8009f8c:	371c      	adds	r7, #28
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b087      	sub	sp, #28
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	60f8      	str	r0, [r7, #12]
 8009f9e:	60b9      	str	r1, [r7, #8]
 8009fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	f023 0210 	bic.w	r2, r3, #16
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	031b      	lsls	r3, r3, #12
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	621a      	str	r2, [r3, #32]
}
 8009fea:	bf00      	nop
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4313      	orrs	r3, r2
 800a014:	f043 0307 	orr.w	r3, r3, #7
 800a018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	609a      	str	r2, [r3, #8]
}
 800a020:	bf00      	nop
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	021a      	lsls	r2, r3, #8
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	431a      	orrs	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	4313      	orrs	r3, r2
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	4313      	orrs	r3, r2
 800a058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	609a      	str	r2, [r3, #8]
}
 800a060:	bf00      	nop
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f003 031f 	and.w	r3, r3, #31
 800a07e:	2201      	movs	r2, #1
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a1a      	ldr	r2, [r3, #32]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	43db      	mvns	r3, r3
 800a08e:	401a      	ands	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a1a      	ldr	r2, [r3, #32]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f003 031f 	and.w	r3, r3, #31
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	621a      	str	r2, [r3, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	371c      	adds	r7, #28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e063      	b.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a2b      	ldr	r2, [pc, #172]	; (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a2a      	ldr	r2, [pc, #168]	; (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d108      	bne.n	800a116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a10a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	4313      	orrs	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1b      	ldr	r2, [pc, #108]	; (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d018      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a142:	d013      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a18      	ldr	r2, [pc, #96]	; (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00e      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a17      	ldr	r2, [pc, #92]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d009      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a12      	ldr	r2, [pc, #72]	; (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a13      	ldr	r2, [pc, #76]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d10c      	bne.n	800a186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	40012c00 	.word	0x40012c00
 800a1a8:	40013400 	.word	0x40013400
 800a1ac:	40000400 	.word	0x40000400
 800a1b0:	40000800 	.word	0x40000800
 800a1b4:	40014000 	.word	0x40014000

0800a1b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e040      	b.n	800a24c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7fa f926 	bl	800442c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2224      	movs	r2, #36	; 0x24
 800a1e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0201 	bic.w	r2, r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fbf2 	bl	800a9e0 <UART_SetConfig>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e022      	b.n	800a24c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fdba 	bl	800ad88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fe41 	bl	800aecc <UART_CheckIdleState>
 800a24a:	4603      	mov	r3, r0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	; 0x28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	4613      	mov	r3, r2
 800a260:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a268:	2b20      	cmp	r3, #32
 800a26a:	d132      	bne.n	800a2d2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <HAL_UART_Receive_IT+0x24>
 800a272:	88fb      	ldrh	r3, [r7, #6]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e02b      	b.n	800a2d4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d018      	beq.n	800a2c2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	e853 3f00 	ldrex	r3, [r3]
 800a29c:	613b      	str	r3, [r7, #16]
   return(result);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	623b      	str	r3, [r7, #32]
 800a2b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	69f9      	ldr	r1, [r7, #28]
 800a2b4:	6a3a      	ldr	r2, [r7, #32]
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e6      	bne.n	800a290 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a2c2:	88fb      	ldrh	r3, [r7, #6]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 ff0f 	bl	800b0ec <UART_Start_Receive_IT>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	e000      	b.n	800a2d4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a2d2:	2302      	movs	r3, #2
  }
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3728      	adds	r7, #40	; 0x28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08a      	sub	sp, #40	; 0x28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ee:	2b20      	cmp	r3, #32
 800a2f0:	d165      	bne.n	800a3be <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <HAL_UART_Transmit_DMA+0x22>
 800a2f8:	88fb      	ldrh	r3, [r7, #6]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e05e      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	88fa      	ldrh	r2, [r7, #6]
 800a30c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	88fa      	ldrh	r2, [r7, #6]
 800a314:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2221      	movs	r2, #33	; 0x21
 800a324:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d027      	beq.n	800a37e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a332:	4a25      	ldr	r2, [pc, #148]	; (800a3c8 <HAL_UART_Transmit_DMA+0xec>)
 800a334:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33a:	4a24      	ldr	r2, [pc, #144]	; (800a3cc <HAL_UART_Transmit_DMA+0xf0>)
 800a33c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	4a23      	ldr	r2, [pc, #140]	; (800a3d0 <HAL_UART_Transmit_DMA+0xf4>)
 800a344:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a34a:	2200      	movs	r2, #0
 800a34c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a356:	4619      	mov	r1, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3328      	adds	r3, #40	; 0x28
 800a35e:	461a      	mov	r2, r3
 800a360:	88fb      	ldrh	r3, [r7, #6]
 800a362:	f7fc faaf 	bl	80068c4 <HAL_DMA_Start_IT>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d008      	beq.n	800a37e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2210      	movs	r2, #16
 800a370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2220      	movs	r2, #32
 800a378:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e020      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2240      	movs	r2, #64	; 0x40
 800a384:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3308      	adds	r3, #8
 800a38c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	613b      	str	r3, [r7, #16]
   return(result);
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a6:	623a      	str	r2, [r7, #32]
 800a3a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	69f9      	ldr	r1, [r7, #28]
 800a3ac:	6a3a      	ldr	r2, [r7, #32]
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e5      	bne.n	800a386 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e000      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a3be:	2302      	movs	r3, #2
  }
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3728      	adds	r7, #40	; 0x28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	0800b369 	.word	0x0800b369
 800a3cc:	0800b3fd 	.word	0x0800b3fd
 800a3d0:	0800b419 	.word	0x0800b419

0800a3d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b0ba      	sub	sp, #232	; 0xe8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	69db      	ldr	r3, [r3, #28]
 800a3e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a3fe:	f640 030f 	movw	r3, #2063	; 0x80f
 800a402:	4013      	ands	r3, r2
 800a404:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d115      	bne.n	800a43c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a414:	f003 0320 	and.w	r3, r3, #32
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00f      	beq.n	800a43c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a41c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b00      	cmp	r3, #0
 800a426:	d009      	beq.n	800a43c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 82ab 	beq.w	800a988 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	4798      	blx	r3
      }
      return;
 800a43a:	e2a5      	b.n	800a988 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a43c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 8117 	beq.w	800a674 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d106      	bne.n	800a460 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a452:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a456:	4b85      	ldr	r3, [pc, #532]	; (800a66c <HAL_UART_IRQHandler+0x298>)
 800a458:	4013      	ands	r3, r2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 810a 	beq.w	800a674 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d011      	beq.n	800a490 <HAL_UART_IRQHandler+0xbc>
 800a46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00b      	beq.n	800a490 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2201      	movs	r2, #1
 800a47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a486:	f043 0201 	orr.w	r2, r3, #1
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d011      	beq.n	800a4c0 <HAL_UART_IRQHandler+0xec>
 800a49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00b      	beq.n	800a4c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4b6:	f043 0204 	orr.w	r2, r3, #4
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d011      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x11c>
 800a4cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2204      	movs	r2, #4
 800a4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e6:	f043 0202 	orr.w	r2, r3, #2
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f4:	f003 0308 	and.w	r3, r3, #8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d017      	beq.n	800a52c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b00      	cmp	r3, #0
 800a506:	d105      	bne.n	800a514 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a50c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00b      	beq.n	800a52c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2208      	movs	r2, #8
 800a51a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a522:	f043 0208 	orr.w	r2, r3, #8
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a534:	2b00      	cmp	r3, #0
 800a536:	d012      	beq.n	800a55e <HAL_UART_IRQHandler+0x18a>
 800a538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a53c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00c      	beq.n	800a55e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a54c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a554:	f043 0220 	orr.w	r2, r3, #32
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8211 	beq.w	800a98c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00d      	beq.n	800a592 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a57a:	f003 0320 	and.w	r3, r3, #32
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d007      	beq.n	800a592 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a6:	2b40      	cmp	r3, #64	; 0x40
 800a5a8:	d005      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d04f      	beq.n	800a656 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fe72 	bl	800b2a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c6:	2b40      	cmp	r3, #64	; 0x40
 800a5c8:	d141      	bne.n	800a64e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a5e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a5f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a5fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a606:	e841 2300 	strex	r3, r2, [r1]
 800a60a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a60e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1d9      	bne.n	800a5ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d013      	beq.n	800a646 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a622:	4a13      	ldr	r2, [pc, #76]	; (800a670 <HAL_UART_IRQHandler+0x29c>)
 800a624:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fc f9e2 	bl	80069f4 <HAL_DMA_Abort_IT>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d017      	beq.n	800a666 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a640:	4610      	mov	r0, r2
 800a642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a644:	e00f      	b.n	800a666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f9b4 	bl	800a9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a64c:	e00b      	b.n	800a666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f9b0 	bl	800a9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a654:	e007      	b.n	800a666 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f9ac 	bl	800a9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a664:	e192      	b.n	800a98c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a666:	bf00      	nop
    return;
 800a668:	e190      	b.n	800a98c <HAL_UART_IRQHandler+0x5b8>
 800a66a:	bf00      	nop
 800a66c:	04000120 	.word	0x04000120
 800a670:	0800b497 	.word	0x0800b497

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a678:	2b01      	cmp	r3, #1
 800a67a:	f040 814b 	bne.w	800a914 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	f003 0310 	and.w	r3, r3, #16
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 8144 	beq.w	800a914 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a690:	f003 0310 	and.w	r3, r3, #16
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 813d 	beq.w	800a914 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2210      	movs	r2, #16
 800a6a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	f040 80b5 	bne.w	800a81c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 8164 	beq.w	800a990 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a6ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	f080 815c 	bcs.w	800a990 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	2b20      	cmp	r3, #32
 800a6ea:	f000 8086 	beq.w	800a7fa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a70a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a71c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a720:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a724:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a728:	e841 2300 	strex	r3, r2, [r1]
 800a72c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1da      	bne.n	800a6ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3308      	adds	r3, #8
 800a73e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a74a:	f023 0301 	bic.w	r3, r3, #1
 800a74e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3308      	adds	r3, #8
 800a758:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a75c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a760:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a762:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a764:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a76e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e1      	bne.n	800a738 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a78a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3308      	adds	r3, #8
 800a794:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a798:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a79a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a79e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7a0:	e841 2300 	strex	r3, r2, [r1]
 800a7a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e3      	bne.n	800a774 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ca:	f023 0310 	bic.w	r3, r3, #16
 800a7ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7e4:	e841 2300 	strex	r3, r2, [r1]
 800a7e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e4      	bne.n	800a7ba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fc f8c4 	bl	8006982 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	b29b      	uxth	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f8d7 	bl	800a9c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a81a:	e0b9      	b.n	800a990 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a828:	b29b      	uxth	r3, r3
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80ab 	beq.w	800a994 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800a83e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 80a6 	beq.w	800a994 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a85c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	461a      	mov	r2, r3
 800a866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a86a:	647b      	str	r3, [r7, #68]	; 0x44
 800a86c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e4      	bne.n	800a848 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3308      	adds	r3, #8
 800a884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	623b      	str	r3, [r7, #32]
   return(result);
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	f023 0301 	bic.w	r3, r3, #1
 800a894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3308      	adds	r3, #8
 800a89e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e3      	bne.n	800a87e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0310 	bic.w	r3, r3, #16
 800a8de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8ec:	61fb      	str	r3, [r7, #28]
 800a8ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f0:	69b9      	ldr	r1, [r7, #24]
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	e841 2300 	strex	r3, r2, [r1]
 800a8f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1e4      	bne.n	800a8ca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f85b 	bl	800a9c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a912:	e03f      	b.n	800a994 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00e      	beq.n	800a93e <HAL_UART_IRQHandler+0x56a>
 800a920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d008      	beq.n	800a93e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 ff95 	bl	800b866 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a93c:	e02d      	b.n	800a99a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00e      	beq.n	800a968 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a94a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a952:	2b00      	cmp	r3, #0
 800a954:	d008      	beq.n	800a968 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d01c      	beq.n	800a998 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
    }
    return;
 800a966:	e017      	b.n	800a998 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d012      	beq.n	800a99a <HAL_UART_IRQHandler+0x5c6>
 800a974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00c      	beq.n	800a99a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fd9e 	bl	800b4c2 <UART_EndTransmit_IT>
    return;
 800a986:	e008      	b.n	800a99a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a988:	bf00      	nop
 800a98a:	e006      	b.n	800a99a <HAL_UART_IRQHandler+0x5c6>
    return;
 800a98c:	bf00      	nop
 800a98e:	e004      	b.n	800a99a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a990:	bf00      	nop
 800a992:	e002      	b.n	800a99a <HAL_UART_IRQHandler+0x5c6>
      return;
 800a994:	bf00      	nop
 800a996:	e000      	b.n	800a99a <HAL_UART_IRQHandler+0x5c6>
    return;
 800a998:	bf00      	nop
  }

}
 800a99a:	37e8      	adds	r7, #232	; 0xe8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689a      	ldr	r2, [r3, #8]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800aa0e:	f023 030c 	bic.w	r3, r3, #12
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	6812      	ldr	r2, [r2, #0]
 800aa16:	6979      	ldr	r1, [r7, #20]
 800aa18:	430b      	orrs	r3, r1
 800aa1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68da      	ldr	r2, [r3, #12]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4aa7      	ldr	r2, [pc, #668]	; (800acf8 <UART_SetConfig+0x318>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d120      	bne.n	800aaa2 <UART_SetConfig+0xc2>
 800aa60:	4ba6      	ldr	r3, [pc, #664]	; (800acfc <UART_SetConfig+0x31c>)
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	f003 0303 	and.w	r3, r3, #3
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d817      	bhi.n	800aa9c <UART_SetConfig+0xbc>
 800aa6c:	a201      	add	r2, pc, #4	; (adr r2, 800aa74 <UART_SetConfig+0x94>)
 800aa6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa72:	bf00      	nop
 800aa74:	0800aa85 	.word	0x0800aa85
 800aa78:	0800aa91 	.word	0x0800aa91
 800aa7c:	0800aa97 	.word	0x0800aa97
 800aa80:	0800aa8b 	.word	0x0800aa8b
 800aa84:	2301      	movs	r3, #1
 800aa86:	77fb      	strb	r3, [r7, #31]
 800aa88:	e0b5      	b.n	800abf6 <UART_SetConfig+0x216>
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	77fb      	strb	r3, [r7, #31]
 800aa8e:	e0b2      	b.n	800abf6 <UART_SetConfig+0x216>
 800aa90:	2304      	movs	r3, #4
 800aa92:	77fb      	strb	r3, [r7, #31]
 800aa94:	e0af      	b.n	800abf6 <UART_SetConfig+0x216>
 800aa96:	2308      	movs	r3, #8
 800aa98:	77fb      	strb	r3, [r7, #31]
 800aa9a:	e0ac      	b.n	800abf6 <UART_SetConfig+0x216>
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	77fb      	strb	r3, [r7, #31]
 800aaa0:	e0a9      	b.n	800abf6 <UART_SetConfig+0x216>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a96      	ldr	r2, [pc, #600]	; (800ad00 <UART_SetConfig+0x320>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d124      	bne.n	800aaf6 <UART_SetConfig+0x116>
 800aaac:	4b93      	ldr	r3, [pc, #588]	; (800acfc <UART_SetConfig+0x31c>)
 800aaae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aab4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aab8:	d011      	beq.n	800aade <UART_SetConfig+0xfe>
 800aaba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aabe:	d817      	bhi.n	800aaf0 <UART_SetConfig+0x110>
 800aac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac4:	d011      	beq.n	800aaea <UART_SetConfig+0x10a>
 800aac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaca:	d811      	bhi.n	800aaf0 <UART_SetConfig+0x110>
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <UART_SetConfig+0xf8>
 800aad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aad4:	d006      	beq.n	800aae4 <UART_SetConfig+0x104>
 800aad6:	e00b      	b.n	800aaf0 <UART_SetConfig+0x110>
 800aad8:	2300      	movs	r3, #0
 800aada:	77fb      	strb	r3, [r7, #31]
 800aadc:	e08b      	b.n	800abf6 <UART_SetConfig+0x216>
 800aade:	2302      	movs	r3, #2
 800aae0:	77fb      	strb	r3, [r7, #31]
 800aae2:	e088      	b.n	800abf6 <UART_SetConfig+0x216>
 800aae4:	2304      	movs	r3, #4
 800aae6:	77fb      	strb	r3, [r7, #31]
 800aae8:	e085      	b.n	800abf6 <UART_SetConfig+0x216>
 800aaea:	2308      	movs	r3, #8
 800aaec:	77fb      	strb	r3, [r7, #31]
 800aaee:	e082      	b.n	800abf6 <UART_SetConfig+0x216>
 800aaf0:	2310      	movs	r3, #16
 800aaf2:	77fb      	strb	r3, [r7, #31]
 800aaf4:	e07f      	b.n	800abf6 <UART_SetConfig+0x216>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a82      	ldr	r2, [pc, #520]	; (800ad04 <UART_SetConfig+0x324>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d124      	bne.n	800ab4a <UART_SetConfig+0x16a>
 800ab00:	4b7e      	ldr	r3, [pc, #504]	; (800acfc <UART_SetConfig+0x31c>)
 800ab02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ab08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ab0c:	d011      	beq.n	800ab32 <UART_SetConfig+0x152>
 800ab0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ab12:	d817      	bhi.n	800ab44 <UART_SetConfig+0x164>
 800ab14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab18:	d011      	beq.n	800ab3e <UART_SetConfig+0x15e>
 800ab1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab1e:	d811      	bhi.n	800ab44 <UART_SetConfig+0x164>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <UART_SetConfig+0x14c>
 800ab24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab28:	d006      	beq.n	800ab38 <UART_SetConfig+0x158>
 800ab2a:	e00b      	b.n	800ab44 <UART_SetConfig+0x164>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	77fb      	strb	r3, [r7, #31]
 800ab30:	e061      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab32:	2302      	movs	r3, #2
 800ab34:	77fb      	strb	r3, [r7, #31]
 800ab36:	e05e      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab38:	2304      	movs	r3, #4
 800ab3a:	77fb      	strb	r3, [r7, #31]
 800ab3c:	e05b      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab3e:	2308      	movs	r3, #8
 800ab40:	77fb      	strb	r3, [r7, #31]
 800ab42:	e058      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab44:	2310      	movs	r3, #16
 800ab46:	77fb      	strb	r3, [r7, #31]
 800ab48:	e055      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a6e      	ldr	r2, [pc, #440]	; (800ad08 <UART_SetConfig+0x328>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d124      	bne.n	800ab9e <UART_SetConfig+0x1be>
 800ab54:	4b69      	ldr	r3, [pc, #420]	; (800acfc <UART_SetConfig+0x31c>)
 800ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ab5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab60:	d011      	beq.n	800ab86 <UART_SetConfig+0x1a6>
 800ab62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab66:	d817      	bhi.n	800ab98 <UART_SetConfig+0x1b8>
 800ab68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab6c:	d011      	beq.n	800ab92 <UART_SetConfig+0x1b2>
 800ab6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab72:	d811      	bhi.n	800ab98 <UART_SetConfig+0x1b8>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <UART_SetConfig+0x1a0>
 800ab78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab7c:	d006      	beq.n	800ab8c <UART_SetConfig+0x1ac>
 800ab7e:	e00b      	b.n	800ab98 <UART_SetConfig+0x1b8>
 800ab80:	2300      	movs	r3, #0
 800ab82:	77fb      	strb	r3, [r7, #31]
 800ab84:	e037      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab86:	2302      	movs	r3, #2
 800ab88:	77fb      	strb	r3, [r7, #31]
 800ab8a:	e034      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	77fb      	strb	r3, [r7, #31]
 800ab90:	e031      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab92:	2308      	movs	r3, #8
 800ab94:	77fb      	strb	r3, [r7, #31]
 800ab96:	e02e      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab98:	2310      	movs	r3, #16
 800ab9a:	77fb      	strb	r3, [r7, #31]
 800ab9c:	e02b      	b.n	800abf6 <UART_SetConfig+0x216>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a5a      	ldr	r2, [pc, #360]	; (800ad0c <UART_SetConfig+0x32c>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d124      	bne.n	800abf2 <UART_SetConfig+0x212>
 800aba8:	4b54      	ldr	r3, [pc, #336]	; (800acfc <UART_SetConfig+0x31c>)
 800abaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800abb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800abb4:	d011      	beq.n	800abda <UART_SetConfig+0x1fa>
 800abb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800abba:	d817      	bhi.n	800abec <UART_SetConfig+0x20c>
 800abbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abc0:	d011      	beq.n	800abe6 <UART_SetConfig+0x206>
 800abc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abc6:	d811      	bhi.n	800abec <UART_SetConfig+0x20c>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <UART_SetConfig+0x1f4>
 800abcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abd0:	d006      	beq.n	800abe0 <UART_SetConfig+0x200>
 800abd2:	e00b      	b.n	800abec <UART_SetConfig+0x20c>
 800abd4:	2300      	movs	r3, #0
 800abd6:	77fb      	strb	r3, [r7, #31]
 800abd8:	e00d      	b.n	800abf6 <UART_SetConfig+0x216>
 800abda:	2302      	movs	r3, #2
 800abdc:	77fb      	strb	r3, [r7, #31]
 800abde:	e00a      	b.n	800abf6 <UART_SetConfig+0x216>
 800abe0:	2304      	movs	r3, #4
 800abe2:	77fb      	strb	r3, [r7, #31]
 800abe4:	e007      	b.n	800abf6 <UART_SetConfig+0x216>
 800abe6:	2308      	movs	r3, #8
 800abe8:	77fb      	strb	r3, [r7, #31]
 800abea:	e004      	b.n	800abf6 <UART_SetConfig+0x216>
 800abec:	2310      	movs	r3, #16
 800abee:	77fb      	strb	r3, [r7, #31]
 800abf0:	e001      	b.n	800abf6 <UART_SetConfig+0x216>
 800abf2:	2310      	movs	r3, #16
 800abf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abfe:	d15b      	bne.n	800acb8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800ac00:	7ffb      	ldrb	r3, [r7, #31]
 800ac02:	2b08      	cmp	r3, #8
 800ac04:	d827      	bhi.n	800ac56 <UART_SetConfig+0x276>
 800ac06:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <UART_SetConfig+0x22c>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac39 	.word	0x0800ac39
 800ac14:	0800ac41 	.word	0x0800ac41
 800ac18:	0800ac57 	.word	0x0800ac57
 800ac1c:	0800ac47 	.word	0x0800ac47
 800ac20:	0800ac57 	.word	0x0800ac57
 800ac24:	0800ac57 	.word	0x0800ac57
 800ac28:	0800ac57 	.word	0x0800ac57
 800ac2c:	0800ac4f 	.word	0x0800ac4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac30:	f7fd fc06 	bl	8008440 <HAL_RCC_GetPCLK1Freq>
 800ac34:	61b8      	str	r0, [r7, #24]
        break;
 800ac36:	e013      	b.n	800ac60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac38:	f7fd fc24 	bl	8008484 <HAL_RCC_GetPCLK2Freq>
 800ac3c:	61b8      	str	r0, [r7, #24]
        break;
 800ac3e:	e00f      	b.n	800ac60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac40:	4b33      	ldr	r3, [pc, #204]	; (800ad10 <UART_SetConfig+0x330>)
 800ac42:	61bb      	str	r3, [r7, #24]
        break;
 800ac44:	e00c      	b.n	800ac60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac46:	f7fd fb85 	bl	8008354 <HAL_RCC_GetSysClockFreq>
 800ac4a:	61b8      	str	r0, [r7, #24]
        break;
 800ac4c:	e008      	b.n	800ac60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac52:	61bb      	str	r3, [r7, #24]
        break;
 800ac54:	e004      	b.n	800ac60 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	77bb      	strb	r3, [r7, #30]
        break;
 800ac5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 8082 	beq.w	800ad6c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	005a      	lsls	r2, r3, #1
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	441a      	add	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	2b0f      	cmp	r3, #15
 800ac82:	d916      	bls.n	800acb2 <UART_SetConfig+0x2d2>
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8a:	d212      	bcs.n	800acb2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f023 030f 	bic.w	r3, r3, #15
 800ac94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	085b      	lsrs	r3, r3, #1
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	f003 0307 	and.w	r3, r3, #7
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	89fb      	ldrh	r3, [r7, #14]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	89fa      	ldrh	r2, [r7, #14]
 800acae:	60da      	str	r2, [r3, #12]
 800acb0:	e05c      	b.n	800ad6c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	77bb      	strb	r3, [r7, #30]
 800acb6:	e059      	b.n	800ad6c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acb8:	7ffb      	ldrb	r3, [r7, #31]
 800acba:	2b08      	cmp	r3, #8
 800acbc:	d835      	bhi.n	800ad2a <UART_SetConfig+0x34a>
 800acbe:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <UART_SetConfig+0x2e4>)
 800acc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc4:	0800ace9 	.word	0x0800ace9
 800acc8:	0800acf1 	.word	0x0800acf1
 800accc:	0800ad15 	.word	0x0800ad15
 800acd0:	0800ad2b 	.word	0x0800ad2b
 800acd4:	0800ad1b 	.word	0x0800ad1b
 800acd8:	0800ad2b 	.word	0x0800ad2b
 800acdc:	0800ad2b 	.word	0x0800ad2b
 800ace0:	0800ad2b 	.word	0x0800ad2b
 800ace4:	0800ad23 	.word	0x0800ad23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ace8:	f7fd fbaa 	bl	8008440 <HAL_RCC_GetPCLK1Freq>
 800acec:	61b8      	str	r0, [r7, #24]
        break;
 800acee:	e021      	b.n	800ad34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acf0:	f7fd fbc8 	bl	8008484 <HAL_RCC_GetPCLK2Freq>
 800acf4:	61b8      	str	r0, [r7, #24]
        break;
 800acf6:	e01d      	b.n	800ad34 <UART_SetConfig+0x354>
 800acf8:	40013800 	.word	0x40013800
 800acfc:	40021000 	.word	0x40021000
 800ad00:	40004400 	.word	0x40004400
 800ad04:	40004800 	.word	0x40004800
 800ad08:	40004c00 	.word	0x40004c00
 800ad0c:	40005000 	.word	0x40005000
 800ad10:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad14:	4b1b      	ldr	r3, [pc, #108]	; (800ad84 <UART_SetConfig+0x3a4>)
 800ad16:	61bb      	str	r3, [r7, #24]
        break;
 800ad18:	e00c      	b.n	800ad34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad1a:	f7fd fb1b 	bl	8008354 <HAL_RCC_GetSysClockFreq>
 800ad1e:	61b8      	str	r0, [r7, #24]
        break;
 800ad20:	e008      	b.n	800ad34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad26:	61bb      	str	r3, [r7, #24]
        break;
 800ad28:	e004      	b.n	800ad34 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	77bb      	strb	r3, [r7, #30]
        break;
 800ad32:	bf00      	nop
    }

    if (pclk != 0U)
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d018      	beq.n	800ad6c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	085a      	lsrs	r2, r3, #1
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	441a      	add	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	2b0f      	cmp	r3, #15
 800ad52:	d909      	bls.n	800ad68 <UART_SetConfig+0x388>
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad5a:	d205      	bcs.n	800ad68 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60da      	str	r2, [r3, #12]
 800ad66:	e001      	b.n	800ad6c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ad78:	7fbb      	ldrb	r3, [r7, #30]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3720      	adds	r7, #32
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	007a1200 	.word	0x007a1200

0800ad88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	f003 0301 	and.w	r3, r3, #1
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	f003 0302 	and.w	r3, r3, #2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00a      	beq.n	800adf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	f003 0308 	and.w	r3, r3, #8
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	f003 0310 	and.w	r3, r3, #16
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00a      	beq.n	800ae3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00a      	beq.n	800ae5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01a      	beq.n	800ae9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae86:	d10a      	bne.n	800ae9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	605a      	str	r2, [r3, #4]
  }
}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b098      	sub	sp, #96	; 0x60
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aedc:	f7f9 fcae 	bl	800483c <HAL_GetTick>
 800aee0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0308 	and.w	r3, r3, #8
 800aeec:	2b08      	cmp	r3, #8
 800aeee:	d12e      	bne.n	800af4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aef8:	2200      	movs	r2, #0
 800aefa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f88c 	bl	800b01c <UART_WaitOnFlagUntilTimeout>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d021      	beq.n	800af4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	e853 3f00 	ldrex	r3, [r3]
 800af16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af1e:	653b      	str	r3, [r7, #80]	; 0x50
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af28:	647b      	str	r3, [r7, #68]	; 0x44
 800af2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af30:	e841 2300 	strex	r3, r2, [r1]
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e6      	bne.n	800af0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2220      	movs	r2, #32
 800af40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e062      	b.n	800b014 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b04      	cmp	r3, #4
 800af5a:	d149      	bne.n	800aff0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af64:	2200      	movs	r2, #0
 800af66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f856 	bl	800b01c <UART_WaitOnFlagUntilTimeout>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d03c      	beq.n	800aff0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	e853 3f00 	ldrex	r3, [r3]
 800af82:	623b      	str	r3, [r7, #32]
   return(result);
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	461a      	mov	r2, r3
 800af92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af94:	633b      	str	r3, [r7, #48]	; 0x30
 800af96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af9c:	e841 2300 	strex	r3, r2, [r1]
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1e6      	bne.n	800af76 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3308      	adds	r3, #8
 800afae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	e853 3f00 	ldrex	r3, [r3]
 800afb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0301 	bic.w	r3, r3, #1
 800afbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3308      	adds	r3, #8
 800afc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afc8:	61fa      	str	r2, [r7, #28]
 800afca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afcc:	69b9      	ldr	r1, [r7, #24]
 800afce:	69fa      	ldr	r2, [r7, #28]
 800afd0:	e841 2300 	strex	r3, r2, [r1]
 800afd4:	617b      	str	r3, [r7, #20]
   return(result);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1e5      	bne.n	800afa8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e011      	b.n	800b014 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2220      	movs	r2, #32
 800aff4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2220      	movs	r2, #32
 800affa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3758      	adds	r7, #88	; 0x58
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	603b      	str	r3, [r7, #0]
 800b028:	4613      	mov	r3, r2
 800b02a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b02c:	e049      	b.n	800b0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b034:	d045      	beq.n	800b0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b036:	f7f9 fc01 	bl	800483c <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	429a      	cmp	r2, r3
 800b044:	d302      	bcc.n	800b04c <UART_WaitOnFlagUntilTimeout+0x30>
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e048      	b.n	800b0e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0304 	and.w	r3, r3, #4
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d031      	beq.n	800b0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	f003 0308 	and.w	r3, r3, #8
 800b068:	2b08      	cmp	r3, #8
 800b06a:	d110      	bne.n	800b08e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2208      	movs	r2, #8
 800b072:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 f913 	bl	800b2a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2208      	movs	r2, #8
 800b07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e029      	b.n	800b0e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b09c:	d111      	bne.n	800b0c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 f8f9 	bl	800b2a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e00f      	b.n	800b0e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	bf0c      	ite	eq
 800b0d2:	2301      	moveq	r3, #1
 800b0d4:	2300      	movne	r3, #0
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	461a      	mov	r2, r3
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d0a6      	beq.n	800b02e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b097      	sub	sp, #92	; 0x5c
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	88fa      	ldrh	r2, [r7, #6]
 800b104:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	88fa      	ldrh	r2, [r7, #6]
 800b10c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b11e:	d10e      	bne.n	800b13e <UART_Start_Receive_IT+0x52>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d105      	bne.n	800b134 <UART_Start_Receive_IT+0x48>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b12e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b132:	e01a      	b.n	800b16a <UART_Start_Receive_IT+0x7e>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	22ff      	movs	r2, #255	; 0xff
 800b138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b13c:	e015      	b.n	800b16a <UART_Start_Receive_IT+0x7e>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10d      	bne.n	800b162 <UART_Start_Receive_IT+0x76>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d104      	bne.n	800b158 <UART_Start_Receive_IT+0x6c>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	22ff      	movs	r2, #255	; 0xff
 800b152:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b156:	e008      	b.n	800b16a <UART_Start_Receive_IT+0x7e>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	227f      	movs	r2, #127	; 0x7f
 800b15c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b160:	e003      	b.n	800b16a <UART_Start_Receive_IT+0x7e>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2222      	movs	r2, #34	; 0x22
 800b176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3308      	adds	r3, #8
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b184:	e853 3f00 	ldrex	r3, [r3]
 800b188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	f043 0301 	orr.w	r3, r3, #1
 800b190:	657b      	str	r3, [r7, #84]	; 0x54
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3308      	adds	r3, #8
 800b198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b19a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b19c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e5      	bne.n	800b17a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b6:	d107      	bne.n	800b1c8 <UART_Start_Receive_IT+0xdc>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d103      	bne.n	800b1c8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4a22      	ldr	r2, [pc, #136]	; (800b24c <UART_Start_Receive_IT+0x160>)
 800b1c4:	669a      	str	r2, [r3, #104]	; 0x68
 800b1c6:	e002      	b.n	800b1ce <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4a21      	ldr	r2, [pc, #132]	; (800b250 <UART_Start_Receive_IT+0x164>)
 800b1cc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d019      	beq.n	800b20a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b1f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1fc:	e841 2300 	strex	r3, r2, [r1]
 800b200:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e6      	bne.n	800b1d6 <UART_Start_Receive_IT+0xea>
 800b208:	e018      	b.n	800b23c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	e853 3f00 	ldrex	r3, [r3]
 800b216:	613b      	str	r3, [r7, #16]
   return(result);
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f043 0320 	orr.w	r3, r3, #32
 800b21e:	653b      	str	r3, [r7, #80]	; 0x50
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b228:	623b      	str	r3, [r7, #32]
 800b22a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22c:	69f9      	ldr	r1, [r7, #28]
 800b22e:	6a3a      	ldr	r2, [r7, #32]
 800b230:	e841 2300 	strex	r3, r2, [r1]
 800b234:	61bb      	str	r3, [r7, #24]
   return(result);
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1e6      	bne.n	800b20a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	375c      	adds	r7, #92	; 0x5c
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	0800b6bf 	.word	0x0800b6bf
 800b250:	0800b517 	.word	0x0800b517

0800b254 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b089      	sub	sp, #36	; 0x24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	e853 3f00 	ldrex	r3, [r3]
 800b268:	60bb      	str	r3, [r7, #8]
   return(result);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b270:	61fb      	str	r3, [r7, #28]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	61bb      	str	r3, [r7, #24]
 800b27c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27e:	6979      	ldr	r1, [r7, #20]
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	613b      	str	r3, [r7, #16]
   return(result);
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e6      	bne.n	800b25c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2220      	movs	r2, #32
 800b292:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b294:	bf00      	nop
 800b296:	3724      	adds	r7, #36	; 0x24
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b095      	sub	sp, #84	; 0x54
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c6:	643b      	str	r3, [r7, #64]	; 0x40
 800b2c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e6      	bne.n	800b2a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	f023 0301 	bic.w	r3, r3, #1
 800b2f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e5      	bne.n	800b2da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b312:	2b01      	cmp	r3, #1
 800b314:	d118      	bne.n	800b348 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	e853 3f00 	ldrex	r3, [r3]
 800b322:	60bb      	str	r3, [r7, #8]
   return(result);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f023 0310 	bic.w	r3, r3, #16
 800b32a:	647b      	str	r3, [r7, #68]	; 0x44
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	461a      	mov	r2, r3
 800b332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b334:	61bb      	str	r3, [r7, #24]
 800b336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b338:	6979      	ldr	r1, [r7, #20]
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	e841 2300 	strex	r3, r2, [r1]
 800b340:	613b      	str	r3, [r7, #16]
   return(result);
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1e6      	bne.n	800b316 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2220      	movs	r2, #32
 800b34c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b35c:	bf00      	nop
 800b35e:	3754      	adds	r7, #84	; 0x54
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b090      	sub	sp, #64	; 0x40
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b374:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	2b20      	cmp	r3, #32
 800b37c:	d037      	beq.n	800b3ee <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b380:	2200      	movs	r2, #0
 800b382:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3308      	adds	r3, #8
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	e853 3f00 	ldrex	r3, [r3]
 800b394:	623b      	str	r3, [r7, #32]
   return(result);
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b39c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3308      	adds	r3, #8
 800b3a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3a6:	633a      	str	r2, [r7, #48]	; 0x30
 800b3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ae:	e841 2300 	strex	r3, r2, [r1]
 800b3b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1e5      	bne.n	800b386 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	e853 3f00 	ldrex	r3, [r3]
 800b3c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d8:	61fb      	str	r3, [r7, #28]
 800b3da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3dc:	69b9      	ldr	r1, [r7, #24]
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	e841 2300 	strex	r3, r2, [r1]
 800b3e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1e6      	bne.n	800b3ba <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3ec:	e002      	b.n	800b3f4 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800b3ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3f0:	f7f9 f892 	bl	8004518 <HAL_UART_TxCpltCallback>
}
 800b3f4:	bf00      	nop
 800b3f6:	3740      	adds	r7, #64	; 0x40
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fac8 	bl	800a9a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b410:	bf00      	nop
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b42a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b432:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b43e:	2b80      	cmp	r3, #128	; 0x80
 800b440:	d109      	bne.n	800b456 <UART_DMAError+0x3e>
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b21      	cmp	r3, #33	; 0x21
 800b446:	d106      	bne.n	800b456 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b450:	6978      	ldr	r0, [r7, #20]
 800b452:	f7ff feff 	bl	800b254 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d109      	bne.n	800b478 <UART_DMAError+0x60>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b22      	cmp	r3, #34	; 0x22
 800b468:	d106      	bne.n	800b478 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b472:	6978      	ldr	r0, [r7, #20]
 800b474:	f7ff ff14 	bl	800b2a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b47e:	f043 0210 	orr.w	r2, r3, #16
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b488:	6978      	ldr	r0, [r7, #20]
 800b48a:	f7ff fa93 	bl	800a9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b48e:	bf00      	nop
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7ff fa7d 	bl	800a9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b088      	sub	sp, #32
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	e853 3f00 	ldrex	r3, [r3]
 800b4d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4de:	61fb      	str	r3, [r7, #28]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	61bb      	str	r3, [r7, #24]
 800b4ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ec:	6979      	ldr	r1, [r7, #20]
 800b4ee:	69ba      	ldr	r2, [r7, #24]
 800b4f0:	e841 2300 	strex	r3, r2, [r1]
 800b4f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e6      	bne.n	800b4ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2220      	movs	r2, #32
 800b500:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7f9 f805 	bl	8004518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b50e:	bf00      	nop
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b09c      	sub	sp, #112	; 0x70
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b524:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b52e:	2b22      	cmp	r3, #34	; 0x22
 800b530:	f040 80b9 	bne.w	800b6a6 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b53a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b53e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b542:	b2d9      	uxtb	r1, r3
 800b544:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54e:	400a      	ands	r2, r1
 800b550:	b2d2      	uxtb	r2, r2
 800b552:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b558:	1c5a      	adds	r2, r3, #1
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b564:	b29b      	uxth	r3, r3
 800b566:	3b01      	subs	r3, #1
 800b568:	b29a      	uxth	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b576:	b29b      	uxth	r3, r3
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f040 809c 	bne.w	800b6b6 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b586:	e853 3f00 	ldrex	r3, [r3]
 800b58a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b58c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b58e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b592:	66bb      	str	r3, [r7, #104]	; 0x68
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	461a      	mov	r2, r3
 800b59a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b59c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b59e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e6      	bne.n	800b57e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3308      	adds	r3, #8
 800b5b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	e853 3f00 	ldrex	r3, [r3]
 800b5be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c2:	f023 0301 	bic.w	r3, r3, #1
 800b5c6:	667b      	str	r3, [r7, #100]	; 0x64
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b5d0:	647a      	str	r2, [r7, #68]	; 0x44
 800b5d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d8:	e841 2300 	strex	r3, r2, [r1]
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e5      	bne.n	800b5b0 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d018      	beq.n	800b638 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	e853 3f00 	ldrex	r3, [r3]
 800b612:	623b      	str	r3, [r7, #32]
   return(result);
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b61a:	663b      	str	r3, [r7, #96]	; 0x60
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	461a      	mov	r2, r3
 800b622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b624:	633b      	str	r3, [r7, #48]	; 0x30
 800b626:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b628:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b62a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b62c:	e841 2300 	strex	r3, r2, [r1]
 800b630:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1e6      	bne.n	800b606 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d12e      	bne.n	800b69e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	e853 3f00 	ldrex	r3, [r3]
 800b652:	60fb      	str	r3, [r7, #12]
   return(result);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f023 0310 	bic.w	r3, r3, #16
 800b65a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	69b9      	ldr	r1, [r7, #24]
 800b66a:	69fa      	ldr	r2, [r7, #28]
 800b66c:	e841 2300 	strex	r3, r2, [r1]
 800b670:	617b      	str	r3, [r7, #20]
   return(result);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e6      	bne.n	800b646 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	f003 0310 	and.w	r3, r3, #16
 800b682:	2b10      	cmp	r3, #16
 800b684:	d103      	bne.n	800b68e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2210      	movs	r2, #16
 800b68c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff f996 	bl	800a9c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b69c:	e00b      	b.n	800b6b6 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7f6 fc2a 	bl	8001ef8 <HAL_UART_RxCpltCallback>
}
 800b6a4:	e007      	b.n	800b6b6 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	699a      	ldr	r2, [r3, #24]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f042 0208 	orr.w	r2, r2, #8
 800b6b4:	619a      	str	r2, [r3, #24]
}
 800b6b6:	bf00      	nop
 800b6b8:	3770      	adds	r7, #112	; 0x70
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b09c      	sub	sp, #112	; 0x70
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b6cc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6d6:	2b22      	cmp	r3, #34	; 0x22
 800b6d8:	f040 80b9 	bne.w	800b84e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b6e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ea:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b6ec:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b6f0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b700:	1c9a      	adds	r2, r3, #2
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	b29a      	uxth	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b71e:	b29b      	uxth	r3, r3
 800b720:	2b00      	cmp	r3, #0
 800b722:	f040 809c 	bne.w	800b85e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b72e:	e853 3f00 	ldrex	r3, [r3]
 800b732:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b73a:	667b      	str	r3, [r7, #100]	; 0x64
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	461a      	mov	r2, r3
 800b742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b744:	657b      	str	r3, [r7, #84]	; 0x54
 800b746:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b748:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b74a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b74c:	e841 2300 	strex	r3, r2, [r1]
 800b750:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1e6      	bne.n	800b726 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3308      	adds	r3, #8
 800b75e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b762:	e853 3f00 	ldrex	r3, [r3]
 800b766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76a:	f023 0301 	bic.w	r3, r3, #1
 800b76e:	663b      	str	r3, [r7, #96]	; 0x60
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b778:	643a      	str	r2, [r7, #64]	; 0x40
 800b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b77e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b780:	e841 2300 	strex	r3, r2, [r1]
 800b784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e5      	bne.n	800b758 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2220      	movs	r2, #32
 800b790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d018      	beq.n	800b7e0 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	e853 3f00 	ldrex	r3, [r3]
 800b7ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d4:	e841 2300 	strex	r3, r2, [r1]
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1e6      	bne.n	800b7ae <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d12e      	bne.n	800b846 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f023 0310 	bic.w	r3, r3, #16
 800b802:	65bb      	str	r3, [r7, #88]	; 0x58
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b80c:	61bb      	str	r3, [r7, #24]
 800b80e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6979      	ldr	r1, [r7, #20]
 800b812:	69ba      	ldr	r2, [r7, #24]
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	613b      	str	r3, [r7, #16]
   return(result);
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e6      	bne.n	800b7ee <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	69db      	ldr	r3, [r3, #28]
 800b826:	f003 0310 	and.w	r3, r3, #16
 800b82a:	2b10      	cmp	r3, #16
 800b82c:	d103      	bne.n	800b836 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2210      	movs	r2, #16
 800b834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff f8c2 	bl	800a9c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b844:	e00b      	b.n	800b85e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7f6 fb56 	bl	8001ef8 <HAL_UART_RxCpltCallback>
}
 800b84c:	e007      	b.n	800b85e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	699a      	ldr	r2, [r3, #24]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f042 0208 	orr.w	r2, r2, #8
 800b85c:	619a      	str	r2, [r3, #24]
}
 800b85e:	bf00      	nop
 800b860:	3770      	adds	r7, #112	; 0x70
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b866:	b480      	push	{r7}
 800b868:	b083      	sub	sp, #12
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b86e:	bf00      	nop
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <__cvt>:
 800b87a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b87e:	ec55 4b10 	vmov	r4, r5, d0
 800b882:	2d00      	cmp	r5, #0
 800b884:	460e      	mov	r6, r1
 800b886:	4619      	mov	r1, r3
 800b888:	462b      	mov	r3, r5
 800b88a:	bfbb      	ittet	lt
 800b88c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b890:	461d      	movlt	r5, r3
 800b892:	2300      	movge	r3, #0
 800b894:	232d      	movlt	r3, #45	; 0x2d
 800b896:	700b      	strb	r3, [r1, #0]
 800b898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b89a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b89e:	4691      	mov	r9, r2
 800b8a0:	f023 0820 	bic.w	r8, r3, #32
 800b8a4:	bfbc      	itt	lt
 800b8a6:	4622      	movlt	r2, r4
 800b8a8:	4614      	movlt	r4, r2
 800b8aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8ae:	d005      	beq.n	800b8bc <__cvt+0x42>
 800b8b0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b8b4:	d100      	bne.n	800b8b8 <__cvt+0x3e>
 800b8b6:	3601      	adds	r6, #1
 800b8b8:	2102      	movs	r1, #2
 800b8ba:	e000      	b.n	800b8be <__cvt+0x44>
 800b8bc:	2103      	movs	r1, #3
 800b8be:	ab03      	add	r3, sp, #12
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	ab02      	add	r3, sp, #8
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	ec45 4b10 	vmov	d0, r4, r5
 800b8ca:	4653      	mov	r3, sl
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	f000 ff0b 	bl	800c6e8 <_dtoa_r>
 800b8d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	d102      	bne.n	800b8e0 <__cvt+0x66>
 800b8da:	f019 0f01 	tst.w	r9, #1
 800b8de:	d022      	beq.n	800b926 <__cvt+0xac>
 800b8e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8e4:	eb07 0906 	add.w	r9, r7, r6
 800b8e8:	d110      	bne.n	800b90c <__cvt+0x92>
 800b8ea:	783b      	ldrb	r3, [r7, #0]
 800b8ec:	2b30      	cmp	r3, #48	; 0x30
 800b8ee:	d10a      	bne.n	800b906 <__cvt+0x8c>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	f7f5 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8fc:	b918      	cbnz	r0, 800b906 <__cvt+0x8c>
 800b8fe:	f1c6 0601 	rsb	r6, r6, #1
 800b902:	f8ca 6000 	str.w	r6, [sl]
 800b906:	f8da 3000 	ldr.w	r3, [sl]
 800b90a:	4499      	add	r9, r3
 800b90c:	2200      	movs	r2, #0
 800b90e:	2300      	movs	r3, #0
 800b910:	4620      	mov	r0, r4
 800b912:	4629      	mov	r1, r5
 800b914:	f7f5 f8d8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b918:	b108      	cbz	r0, 800b91e <__cvt+0xa4>
 800b91a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b91e:	2230      	movs	r2, #48	; 0x30
 800b920:	9b03      	ldr	r3, [sp, #12]
 800b922:	454b      	cmp	r3, r9
 800b924:	d307      	bcc.n	800b936 <__cvt+0xbc>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b92a:	1bdb      	subs	r3, r3, r7
 800b92c:	4638      	mov	r0, r7
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	b004      	add	sp, #16
 800b932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b936:	1c59      	adds	r1, r3, #1
 800b938:	9103      	str	r1, [sp, #12]
 800b93a:	701a      	strb	r2, [r3, #0]
 800b93c:	e7f0      	b.n	800b920 <__cvt+0xa6>

0800b93e <__exponent>:
 800b93e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b940:	4603      	mov	r3, r0
 800b942:	2900      	cmp	r1, #0
 800b944:	bfb8      	it	lt
 800b946:	4249      	neglt	r1, r1
 800b948:	f803 2b02 	strb.w	r2, [r3], #2
 800b94c:	bfb4      	ite	lt
 800b94e:	222d      	movlt	r2, #45	; 0x2d
 800b950:	222b      	movge	r2, #43	; 0x2b
 800b952:	2909      	cmp	r1, #9
 800b954:	7042      	strb	r2, [r0, #1]
 800b956:	dd2a      	ble.n	800b9ae <__exponent+0x70>
 800b958:	f10d 0207 	add.w	r2, sp, #7
 800b95c:	4617      	mov	r7, r2
 800b95e:	260a      	movs	r6, #10
 800b960:	4694      	mov	ip, r2
 800b962:	fb91 f5f6 	sdiv	r5, r1, r6
 800b966:	fb06 1415 	mls	r4, r6, r5, r1
 800b96a:	3430      	adds	r4, #48	; 0x30
 800b96c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b970:	460c      	mov	r4, r1
 800b972:	2c63      	cmp	r4, #99	; 0x63
 800b974:	f102 32ff 	add.w	r2, r2, #4294967295
 800b978:	4629      	mov	r1, r5
 800b97a:	dcf1      	bgt.n	800b960 <__exponent+0x22>
 800b97c:	3130      	adds	r1, #48	; 0x30
 800b97e:	f1ac 0402 	sub.w	r4, ip, #2
 800b982:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b986:	1c41      	adds	r1, r0, #1
 800b988:	4622      	mov	r2, r4
 800b98a:	42ba      	cmp	r2, r7
 800b98c:	d30a      	bcc.n	800b9a4 <__exponent+0x66>
 800b98e:	f10d 0209 	add.w	r2, sp, #9
 800b992:	eba2 020c 	sub.w	r2, r2, ip
 800b996:	42bc      	cmp	r4, r7
 800b998:	bf88      	it	hi
 800b99a:	2200      	movhi	r2, #0
 800b99c:	4413      	add	r3, r2
 800b99e:	1a18      	subs	r0, r3, r0
 800b9a0:	b003      	add	sp, #12
 800b9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b9a8:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b9ac:	e7ed      	b.n	800b98a <__exponent+0x4c>
 800b9ae:	2330      	movs	r3, #48	; 0x30
 800b9b0:	3130      	adds	r1, #48	; 0x30
 800b9b2:	7083      	strb	r3, [r0, #2]
 800b9b4:	70c1      	strb	r1, [r0, #3]
 800b9b6:	1d03      	adds	r3, r0, #4
 800b9b8:	e7f1      	b.n	800b99e <__exponent+0x60>
	...

0800b9bc <_printf_float>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	ed2d 8b02 	vpush	{d8}
 800b9c4:	b08d      	sub	sp, #52	; 0x34
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	f000 fd8b 	bl	800c4ec <_localeconv_r>
 800b9d6:	f8d0 a000 	ldr.w	sl, [r0]
 800b9da:	4650      	mov	r0, sl
 800b9dc:	f7f4 fc48 	bl	8000270 <strlen>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	9305      	str	r3, [sp, #20]
 800b9e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b9f0:	3307      	adds	r3, #7
 800b9f2:	f023 0307 	bic.w	r3, r3, #7
 800b9f6:	f103 0208 	add.w	r2, r3, #8
 800b9fa:	f8c8 2000 	str.w	r2, [r8]
 800b9fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba06:	9307      	str	r3, [sp, #28]
 800ba08:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba0c:	ee08 0a10 	vmov	s16, r0
 800ba10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ba14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba18:	4b9e      	ldr	r3, [pc, #632]	; (800bc94 <_printf_float+0x2d8>)
 800ba1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba1e:	f7f5 f885 	bl	8000b2c <__aeabi_dcmpun>
 800ba22:	bb88      	cbnz	r0, 800ba88 <_printf_float+0xcc>
 800ba24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba28:	4b9a      	ldr	r3, [pc, #616]	; (800bc94 <_printf_float+0x2d8>)
 800ba2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2e:	f7f5 f85f 	bl	8000af0 <__aeabi_dcmple>
 800ba32:	bb48      	cbnz	r0, 800ba88 <_printf_float+0xcc>
 800ba34:	2200      	movs	r2, #0
 800ba36:	2300      	movs	r3, #0
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	f7f5 f84e 	bl	8000adc <__aeabi_dcmplt>
 800ba40:	b110      	cbz	r0, 800ba48 <_printf_float+0x8c>
 800ba42:	232d      	movs	r3, #45	; 0x2d
 800ba44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba48:	4a93      	ldr	r2, [pc, #588]	; (800bc98 <_printf_float+0x2dc>)
 800ba4a:	4b94      	ldr	r3, [pc, #592]	; (800bc9c <_printf_float+0x2e0>)
 800ba4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ba50:	bf94      	ite	ls
 800ba52:	4690      	movls	r8, r2
 800ba54:	4698      	movhi	r8, r3
 800ba56:	2303      	movs	r3, #3
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	f023 0304 	bic.w	r3, r3, #4
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	f04f 0900 	mov.w	r9, #0
 800ba66:	9700      	str	r7, [sp, #0]
 800ba68:	4633      	mov	r3, r6
 800ba6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4628      	mov	r0, r5
 800ba70:	f000 f9da 	bl	800be28 <_printf_common>
 800ba74:	3001      	adds	r0, #1
 800ba76:	f040 8090 	bne.w	800bb9a <_printf_float+0x1de>
 800ba7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7e:	b00d      	add	sp, #52	; 0x34
 800ba80:	ecbd 8b02 	vpop	{d8}
 800ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba88:	4642      	mov	r2, r8
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	4649      	mov	r1, r9
 800ba90:	f7f5 f84c 	bl	8000b2c <__aeabi_dcmpun>
 800ba94:	b140      	cbz	r0, 800baa8 <_printf_float+0xec>
 800ba96:	464b      	mov	r3, r9
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	bfbc      	itt	lt
 800ba9c:	232d      	movlt	r3, #45	; 0x2d
 800ba9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800baa2:	4a7f      	ldr	r2, [pc, #508]	; (800bca0 <_printf_float+0x2e4>)
 800baa4:	4b7f      	ldr	r3, [pc, #508]	; (800bca4 <_printf_float+0x2e8>)
 800baa6:	e7d1      	b.n	800ba4c <_printf_float+0x90>
 800baa8:	6863      	ldr	r3, [r4, #4]
 800baaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800baae:	9206      	str	r2, [sp, #24]
 800bab0:	1c5a      	adds	r2, r3, #1
 800bab2:	d13f      	bne.n	800bb34 <_printf_float+0x178>
 800bab4:	2306      	movs	r3, #6
 800bab6:	6063      	str	r3, [r4, #4]
 800bab8:	9b05      	ldr	r3, [sp, #20]
 800baba:	6861      	ldr	r1, [r4, #4]
 800babc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bac0:	2300      	movs	r3, #0
 800bac2:	9303      	str	r3, [sp, #12]
 800bac4:	ab0a      	add	r3, sp, #40	; 0x28
 800bac6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800baca:	ab09      	add	r3, sp, #36	; 0x24
 800bacc:	ec49 8b10 	vmov	d0, r8, r9
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bad8:	4628      	mov	r0, r5
 800bada:	f7ff fece 	bl	800b87a <__cvt>
 800bade:	9b06      	ldr	r3, [sp, #24]
 800bae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bae2:	2b47      	cmp	r3, #71	; 0x47
 800bae4:	4680      	mov	r8, r0
 800bae6:	d108      	bne.n	800bafa <_printf_float+0x13e>
 800bae8:	1cc8      	adds	r0, r1, #3
 800baea:	db02      	blt.n	800baf2 <_printf_float+0x136>
 800baec:	6863      	ldr	r3, [r4, #4]
 800baee:	4299      	cmp	r1, r3
 800baf0:	dd41      	ble.n	800bb76 <_printf_float+0x1ba>
 800baf2:	f1ab 0302 	sub.w	r3, fp, #2
 800baf6:	fa5f fb83 	uxtb.w	fp, r3
 800bafa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bafe:	d820      	bhi.n	800bb42 <_printf_float+0x186>
 800bb00:	3901      	subs	r1, #1
 800bb02:	465a      	mov	r2, fp
 800bb04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb08:	9109      	str	r1, [sp, #36]	; 0x24
 800bb0a:	f7ff ff18 	bl	800b93e <__exponent>
 800bb0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb10:	1813      	adds	r3, r2, r0
 800bb12:	2a01      	cmp	r2, #1
 800bb14:	4681      	mov	r9, r0
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	dc02      	bgt.n	800bb20 <_printf_float+0x164>
 800bb1a:	6822      	ldr	r2, [r4, #0]
 800bb1c:	07d2      	lsls	r2, r2, #31
 800bb1e:	d501      	bpl.n	800bb24 <_printf_float+0x168>
 800bb20:	3301      	adds	r3, #1
 800bb22:	6123      	str	r3, [r4, #16]
 800bb24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d09c      	beq.n	800ba66 <_printf_float+0xaa>
 800bb2c:	232d      	movs	r3, #45	; 0x2d
 800bb2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb32:	e798      	b.n	800ba66 <_printf_float+0xaa>
 800bb34:	9a06      	ldr	r2, [sp, #24]
 800bb36:	2a47      	cmp	r2, #71	; 0x47
 800bb38:	d1be      	bne.n	800bab8 <_printf_float+0xfc>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1bc      	bne.n	800bab8 <_printf_float+0xfc>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e7b9      	b.n	800bab6 <_printf_float+0xfa>
 800bb42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bb46:	d118      	bne.n	800bb7a <_printf_float+0x1be>
 800bb48:	2900      	cmp	r1, #0
 800bb4a:	6863      	ldr	r3, [r4, #4]
 800bb4c:	dd0b      	ble.n	800bb66 <_printf_float+0x1aa>
 800bb4e:	6121      	str	r1, [r4, #16]
 800bb50:	b913      	cbnz	r3, 800bb58 <_printf_float+0x19c>
 800bb52:	6822      	ldr	r2, [r4, #0]
 800bb54:	07d0      	lsls	r0, r2, #31
 800bb56:	d502      	bpl.n	800bb5e <_printf_float+0x1a2>
 800bb58:	3301      	adds	r3, #1
 800bb5a:	440b      	add	r3, r1
 800bb5c:	6123      	str	r3, [r4, #16]
 800bb5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb60:	f04f 0900 	mov.w	r9, #0
 800bb64:	e7de      	b.n	800bb24 <_printf_float+0x168>
 800bb66:	b913      	cbnz	r3, 800bb6e <_printf_float+0x1b2>
 800bb68:	6822      	ldr	r2, [r4, #0]
 800bb6a:	07d2      	lsls	r2, r2, #31
 800bb6c:	d501      	bpl.n	800bb72 <_printf_float+0x1b6>
 800bb6e:	3302      	adds	r3, #2
 800bb70:	e7f4      	b.n	800bb5c <_printf_float+0x1a0>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e7f2      	b.n	800bb5c <_printf_float+0x1a0>
 800bb76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bb7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7c:	4299      	cmp	r1, r3
 800bb7e:	db05      	blt.n	800bb8c <_printf_float+0x1d0>
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	6121      	str	r1, [r4, #16]
 800bb84:	07d8      	lsls	r0, r3, #31
 800bb86:	d5ea      	bpl.n	800bb5e <_printf_float+0x1a2>
 800bb88:	1c4b      	adds	r3, r1, #1
 800bb8a:	e7e7      	b.n	800bb5c <_printf_float+0x1a0>
 800bb8c:	2900      	cmp	r1, #0
 800bb8e:	bfd4      	ite	le
 800bb90:	f1c1 0202 	rsble	r2, r1, #2
 800bb94:	2201      	movgt	r2, #1
 800bb96:	4413      	add	r3, r2
 800bb98:	e7e0      	b.n	800bb5c <_printf_float+0x1a0>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	055a      	lsls	r2, r3, #21
 800bb9e:	d407      	bmi.n	800bbb0 <_printf_float+0x1f4>
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	4642      	mov	r2, r8
 800bba4:	4631      	mov	r1, r6
 800bba6:	4628      	mov	r0, r5
 800bba8:	47b8      	blx	r7
 800bbaa:	3001      	adds	r0, #1
 800bbac:	d12c      	bne.n	800bc08 <_printf_float+0x24c>
 800bbae:	e764      	b.n	800ba7a <_printf_float+0xbe>
 800bbb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bbb4:	f240 80e0 	bls.w	800bd78 <_printf_float+0x3bc>
 800bbb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f7f4 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d034      	beq.n	800bc32 <_printf_float+0x276>
 800bbc8:	4a37      	ldr	r2, [pc, #220]	; (800bca8 <_printf_float+0x2ec>)
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b8      	blx	r7
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f43f af51 	beq.w	800ba7a <_printf_float+0xbe>
 800bbd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	db02      	blt.n	800bbe6 <_printf_float+0x22a>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	07d8      	lsls	r0, r3, #31
 800bbe4:	d510      	bpl.n	800bc08 <_printf_float+0x24c>
 800bbe6:	ee18 3a10 	vmov	r3, s16
 800bbea:	4652      	mov	r2, sl
 800bbec:	4631      	mov	r1, r6
 800bbee:	4628      	mov	r0, r5
 800bbf0:	47b8      	blx	r7
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	f43f af41 	beq.w	800ba7a <_printf_float+0xbe>
 800bbf8:	f04f 0800 	mov.w	r8, #0
 800bbfc:	f104 091a 	add.w	r9, r4, #26
 800bc00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc02:	3b01      	subs	r3, #1
 800bc04:	4543      	cmp	r3, r8
 800bc06:	dc09      	bgt.n	800bc1c <_printf_float+0x260>
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	079b      	lsls	r3, r3, #30
 800bc0c:	f100 8107 	bmi.w	800be1e <_printf_float+0x462>
 800bc10:	68e0      	ldr	r0, [r4, #12]
 800bc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc14:	4298      	cmp	r0, r3
 800bc16:	bfb8      	it	lt
 800bc18:	4618      	movlt	r0, r3
 800bc1a:	e730      	b.n	800ba7e <_printf_float+0xc2>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	464a      	mov	r2, r9
 800bc20:	4631      	mov	r1, r6
 800bc22:	4628      	mov	r0, r5
 800bc24:	47b8      	blx	r7
 800bc26:	3001      	adds	r0, #1
 800bc28:	f43f af27 	beq.w	800ba7a <_printf_float+0xbe>
 800bc2c:	f108 0801 	add.w	r8, r8, #1
 800bc30:	e7e6      	b.n	800bc00 <_printf_float+0x244>
 800bc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dc39      	bgt.n	800bcac <_printf_float+0x2f0>
 800bc38:	4a1b      	ldr	r2, [pc, #108]	; (800bca8 <_printf_float+0x2ec>)
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4628      	mov	r0, r5
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f af19 	beq.w	800ba7a <_printf_float+0xbe>
 800bc48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	d102      	bne.n	800bc56 <_printf_float+0x29a>
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	07d9      	lsls	r1, r3, #31
 800bc54:	d5d8      	bpl.n	800bc08 <_printf_float+0x24c>
 800bc56:	ee18 3a10 	vmov	r3, s16
 800bc5a:	4652      	mov	r2, sl
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	4628      	mov	r0, r5
 800bc60:	47b8      	blx	r7
 800bc62:	3001      	adds	r0, #1
 800bc64:	f43f af09 	beq.w	800ba7a <_printf_float+0xbe>
 800bc68:	f04f 0900 	mov.w	r9, #0
 800bc6c:	f104 0a1a 	add.w	sl, r4, #26
 800bc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc72:	425b      	negs	r3, r3
 800bc74:	454b      	cmp	r3, r9
 800bc76:	dc01      	bgt.n	800bc7c <_printf_float+0x2c0>
 800bc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc7a:	e792      	b.n	800bba2 <_printf_float+0x1e6>
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	4652      	mov	r2, sl
 800bc80:	4631      	mov	r1, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b8      	blx	r7
 800bc86:	3001      	adds	r0, #1
 800bc88:	f43f aef7 	beq.w	800ba7a <_printf_float+0xbe>
 800bc8c:	f109 0901 	add.w	r9, r9, #1
 800bc90:	e7ee      	b.n	800bc70 <_printf_float+0x2b4>
 800bc92:	bf00      	nop
 800bc94:	7fefffff 	.word	0x7fefffff
 800bc98:	0800ed0c 	.word	0x0800ed0c
 800bc9c:	0800ed10 	.word	0x0800ed10
 800bca0:	0800ed14 	.word	0x0800ed14
 800bca4:	0800ed18 	.word	0x0800ed18
 800bca8:	0800ed1c 	.word	0x0800ed1c
 800bcac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	bfa8      	it	ge
 800bcb4:	461a      	movge	r2, r3
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	4691      	mov	r9, r2
 800bcba:	dc37      	bgt.n	800bd2c <_printf_float+0x370>
 800bcbc:	f04f 0b00 	mov.w	fp, #0
 800bcc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcc4:	f104 021a 	add.w	r2, r4, #26
 800bcc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcca:	9305      	str	r3, [sp, #20]
 800bccc:	eba3 0309 	sub.w	r3, r3, r9
 800bcd0:	455b      	cmp	r3, fp
 800bcd2:	dc33      	bgt.n	800bd3c <_printf_float+0x380>
 800bcd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	db3b      	blt.n	800bd54 <_printf_float+0x398>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	07da      	lsls	r2, r3, #31
 800bce0:	d438      	bmi.n	800bd54 <_printf_float+0x398>
 800bce2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bce6:	eba2 0903 	sub.w	r9, r2, r3
 800bcea:	9b05      	ldr	r3, [sp, #20]
 800bcec:	1ad2      	subs	r2, r2, r3
 800bcee:	4591      	cmp	r9, r2
 800bcf0:	bfa8      	it	ge
 800bcf2:	4691      	movge	r9, r2
 800bcf4:	f1b9 0f00 	cmp.w	r9, #0
 800bcf8:	dc35      	bgt.n	800bd66 <_printf_float+0x3aa>
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd02:	f104 0a1a 	add.w	sl, r4, #26
 800bd06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd0a:	1a9b      	subs	r3, r3, r2
 800bd0c:	eba3 0309 	sub.w	r3, r3, r9
 800bd10:	4543      	cmp	r3, r8
 800bd12:	f77f af79 	ble.w	800bc08 <_printf_float+0x24c>
 800bd16:	2301      	movs	r3, #1
 800bd18:	4652      	mov	r2, sl
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b8      	blx	r7
 800bd20:	3001      	adds	r0, #1
 800bd22:	f43f aeaa 	beq.w	800ba7a <_printf_float+0xbe>
 800bd26:	f108 0801 	add.w	r8, r8, #1
 800bd2a:	e7ec      	b.n	800bd06 <_printf_float+0x34a>
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4642      	mov	r2, r8
 800bd32:	4628      	mov	r0, r5
 800bd34:	47b8      	blx	r7
 800bd36:	3001      	adds	r0, #1
 800bd38:	d1c0      	bne.n	800bcbc <_printf_float+0x300>
 800bd3a:	e69e      	b.n	800ba7a <_printf_float+0xbe>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4628      	mov	r0, r5
 800bd42:	9205      	str	r2, [sp, #20]
 800bd44:	47b8      	blx	r7
 800bd46:	3001      	adds	r0, #1
 800bd48:	f43f ae97 	beq.w	800ba7a <_printf_float+0xbe>
 800bd4c:	9a05      	ldr	r2, [sp, #20]
 800bd4e:	f10b 0b01 	add.w	fp, fp, #1
 800bd52:	e7b9      	b.n	800bcc8 <_printf_float+0x30c>
 800bd54:	ee18 3a10 	vmov	r3, s16
 800bd58:	4652      	mov	r2, sl
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b8      	blx	r7
 800bd60:	3001      	adds	r0, #1
 800bd62:	d1be      	bne.n	800bce2 <_printf_float+0x326>
 800bd64:	e689      	b.n	800ba7a <_printf_float+0xbe>
 800bd66:	9a05      	ldr	r2, [sp, #20]
 800bd68:	464b      	mov	r3, r9
 800bd6a:	4442      	add	r2, r8
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4628      	mov	r0, r5
 800bd70:	47b8      	blx	r7
 800bd72:	3001      	adds	r0, #1
 800bd74:	d1c1      	bne.n	800bcfa <_printf_float+0x33e>
 800bd76:	e680      	b.n	800ba7a <_printf_float+0xbe>
 800bd78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd7a:	2a01      	cmp	r2, #1
 800bd7c:	dc01      	bgt.n	800bd82 <_printf_float+0x3c6>
 800bd7e:	07db      	lsls	r3, r3, #31
 800bd80:	d53a      	bpl.n	800bdf8 <_printf_float+0x43c>
 800bd82:	2301      	movs	r3, #1
 800bd84:	4642      	mov	r2, r8
 800bd86:	4631      	mov	r1, r6
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b8      	blx	r7
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	f43f ae74 	beq.w	800ba7a <_printf_float+0xbe>
 800bd92:	ee18 3a10 	vmov	r3, s16
 800bd96:	4652      	mov	r2, sl
 800bd98:	4631      	mov	r1, r6
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	47b8      	blx	r7
 800bd9e:	3001      	adds	r0, #1
 800bda0:	f43f ae6b 	beq.w	800ba7a <_printf_float+0xbe>
 800bda4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bdb0:	f7f4 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdb4:	b9d8      	cbnz	r0, 800bdee <_printf_float+0x432>
 800bdb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bdba:	f108 0201 	add.w	r2, r8, #1
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	47b8      	blx	r7
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d10e      	bne.n	800bde6 <_printf_float+0x42a>
 800bdc8:	e657      	b.n	800ba7a <_printf_float+0xbe>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4652      	mov	r2, sl
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b8      	blx	r7
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f43f ae50 	beq.w	800ba7a <_printf_float+0xbe>
 800bdda:	f108 0801 	add.w	r8, r8, #1
 800bdde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde0:	3b01      	subs	r3, #1
 800bde2:	4543      	cmp	r3, r8
 800bde4:	dcf1      	bgt.n	800bdca <_printf_float+0x40e>
 800bde6:	464b      	mov	r3, r9
 800bde8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdec:	e6da      	b.n	800bba4 <_printf_float+0x1e8>
 800bdee:	f04f 0800 	mov.w	r8, #0
 800bdf2:	f104 0a1a 	add.w	sl, r4, #26
 800bdf6:	e7f2      	b.n	800bdde <_printf_float+0x422>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	4642      	mov	r2, r8
 800bdfc:	e7df      	b.n	800bdbe <_printf_float+0x402>
 800bdfe:	2301      	movs	r3, #1
 800be00:	464a      	mov	r2, r9
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	47b8      	blx	r7
 800be08:	3001      	adds	r0, #1
 800be0a:	f43f ae36 	beq.w	800ba7a <_printf_float+0xbe>
 800be0e:	f108 0801 	add.w	r8, r8, #1
 800be12:	68e3      	ldr	r3, [r4, #12]
 800be14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be16:	1a5b      	subs	r3, r3, r1
 800be18:	4543      	cmp	r3, r8
 800be1a:	dcf0      	bgt.n	800bdfe <_printf_float+0x442>
 800be1c:	e6f8      	b.n	800bc10 <_printf_float+0x254>
 800be1e:	f04f 0800 	mov.w	r8, #0
 800be22:	f104 0919 	add.w	r9, r4, #25
 800be26:	e7f4      	b.n	800be12 <_printf_float+0x456>

0800be28 <_printf_common>:
 800be28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be2c:	4616      	mov	r6, r2
 800be2e:	4699      	mov	r9, r3
 800be30:	688a      	ldr	r2, [r1, #8]
 800be32:	690b      	ldr	r3, [r1, #16]
 800be34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be38:	4293      	cmp	r3, r2
 800be3a:	bfb8      	it	lt
 800be3c:	4613      	movlt	r3, r2
 800be3e:	6033      	str	r3, [r6, #0]
 800be40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be44:	4607      	mov	r7, r0
 800be46:	460c      	mov	r4, r1
 800be48:	b10a      	cbz	r2, 800be4e <_printf_common+0x26>
 800be4a:	3301      	adds	r3, #1
 800be4c:	6033      	str	r3, [r6, #0]
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	0699      	lsls	r1, r3, #26
 800be52:	bf42      	ittt	mi
 800be54:	6833      	ldrmi	r3, [r6, #0]
 800be56:	3302      	addmi	r3, #2
 800be58:	6033      	strmi	r3, [r6, #0]
 800be5a:	6825      	ldr	r5, [r4, #0]
 800be5c:	f015 0506 	ands.w	r5, r5, #6
 800be60:	d106      	bne.n	800be70 <_printf_common+0x48>
 800be62:	f104 0a19 	add.w	sl, r4, #25
 800be66:	68e3      	ldr	r3, [r4, #12]
 800be68:	6832      	ldr	r2, [r6, #0]
 800be6a:	1a9b      	subs	r3, r3, r2
 800be6c:	42ab      	cmp	r3, r5
 800be6e:	dc26      	bgt.n	800bebe <_printf_common+0x96>
 800be70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be74:	1e13      	subs	r3, r2, #0
 800be76:	6822      	ldr	r2, [r4, #0]
 800be78:	bf18      	it	ne
 800be7a:	2301      	movne	r3, #1
 800be7c:	0692      	lsls	r2, r2, #26
 800be7e:	d42b      	bmi.n	800bed8 <_printf_common+0xb0>
 800be80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be84:	4649      	mov	r1, r9
 800be86:	4638      	mov	r0, r7
 800be88:	47c0      	blx	r8
 800be8a:	3001      	adds	r0, #1
 800be8c:	d01e      	beq.n	800becc <_printf_common+0xa4>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	6922      	ldr	r2, [r4, #16]
 800be92:	f003 0306 	and.w	r3, r3, #6
 800be96:	2b04      	cmp	r3, #4
 800be98:	bf02      	ittt	eq
 800be9a:	68e5      	ldreq	r5, [r4, #12]
 800be9c:	6833      	ldreq	r3, [r6, #0]
 800be9e:	1aed      	subeq	r5, r5, r3
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	bf0c      	ite	eq
 800bea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bea8:	2500      	movne	r5, #0
 800beaa:	4293      	cmp	r3, r2
 800beac:	bfc4      	itt	gt
 800beae:	1a9b      	subgt	r3, r3, r2
 800beb0:	18ed      	addgt	r5, r5, r3
 800beb2:	2600      	movs	r6, #0
 800beb4:	341a      	adds	r4, #26
 800beb6:	42b5      	cmp	r5, r6
 800beb8:	d11a      	bne.n	800bef0 <_printf_common+0xc8>
 800beba:	2000      	movs	r0, #0
 800bebc:	e008      	b.n	800bed0 <_printf_common+0xa8>
 800bebe:	2301      	movs	r3, #1
 800bec0:	4652      	mov	r2, sl
 800bec2:	4649      	mov	r1, r9
 800bec4:	4638      	mov	r0, r7
 800bec6:	47c0      	blx	r8
 800bec8:	3001      	adds	r0, #1
 800beca:	d103      	bne.n	800bed4 <_printf_common+0xac>
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed4:	3501      	adds	r5, #1
 800bed6:	e7c6      	b.n	800be66 <_printf_common+0x3e>
 800bed8:	18e1      	adds	r1, r4, r3
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	2030      	movs	r0, #48	; 0x30
 800bede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bee2:	4422      	add	r2, r4
 800bee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800beec:	3302      	adds	r3, #2
 800beee:	e7c7      	b.n	800be80 <_printf_common+0x58>
 800bef0:	2301      	movs	r3, #1
 800bef2:	4622      	mov	r2, r4
 800bef4:	4649      	mov	r1, r9
 800bef6:	4638      	mov	r0, r7
 800bef8:	47c0      	blx	r8
 800befa:	3001      	adds	r0, #1
 800befc:	d0e6      	beq.n	800becc <_printf_common+0xa4>
 800befe:	3601      	adds	r6, #1
 800bf00:	e7d9      	b.n	800beb6 <_printf_common+0x8e>
	...

0800bf04 <_printf_i>:
 800bf04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf08:	7e0f      	ldrb	r7, [r1, #24]
 800bf0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf0c:	2f78      	cmp	r7, #120	; 0x78
 800bf0e:	4691      	mov	r9, r2
 800bf10:	4680      	mov	r8, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	469a      	mov	sl, r3
 800bf16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf1a:	d807      	bhi.n	800bf2c <_printf_i+0x28>
 800bf1c:	2f62      	cmp	r7, #98	; 0x62
 800bf1e:	d80a      	bhi.n	800bf36 <_printf_i+0x32>
 800bf20:	2f00      	cmp	r7, #0
 800bf22:	f000 80d4 	beq.w	800c0ce <_printf_i+0x1ca>
 800bf26:	2f58      	cmp	r7, #88	; 0x58
 800bf28:	f000 80c0 	beq.w	800c0ac <_printf_i+0x1a8>
 800bf2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf34:	e03a      	b.n	800bfac <_printf_i+0xa8>
 800bf36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf3a:	2b15      	cmp	r3, #21
 800bf3c:	d8f6      	bhi.n	800bf2c <_printf_i+0x28>
 800bf3e:	a101      	add	r1, pc, #4	; (adr r1, 800bf44 <_printf_i+0x40>)
 800bf40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf44:	0800bf9d 	.word	0x0800bf9d
 800bf48:	0800bfb1 	.word	0x0800bfb1
 800bf4c:	0800bf2d 	.word	0x0800bf2d
 800bf50:	0800bf2d 	.word	0x0800bf2d
 800bf54:	0800bf2d 	.word	0x0800bf2d
 800bf58:	0800bf2d 	.word	0x0800bf2d
 800bf5c:	0800bfb1 	.word	0x0800bfb1
 800bf60:	0800bf2d 	.word	0x0800bf2d
 800bf64:	0800bf2d 	.word	0x0800bf2d
 800bf68:	0800bf2d 	.word	0x0800bf2d
 800bf6c:	0800bf2d 	.word	0x0800bf2d
 800bf70:	0800c0b5 	.word	0x0800c0b5
 800bf74:	0800bfdd 	.word	0x0800bfdd
 800bf78:	0800c06f 	.word	0x0800c06f
 800bf7c:	0800bf2d 	.word	0x0800bf2d
 800bf80:	0800bf2d 	.word	0x0800bf2d
 800bf84:	0800c0d7 	.word	0x0800c0d7
 800bf88:	0800bf2d 	.word	0x0800bf2d
 800bf8c:	0800bfdd 	.word	0x0800bfdd
 800bf90:	0800bf2d 	.word	0x0800bf2d
 800bf94:	0800bf2d 	.word	0x0800bf2d
 800bf98:	0800c077 	.word	0x0800c077
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	1d1a      	adds	r2, r3, #4
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	602a      	str	r2, [r5, #0]
 800bfa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfac:	2301      	movs	r3, #1
 800bfae:	e09f      	b.n	800c0f0 <_printf_i+0x1ec>
 800bfb0:	6820      	ldr	r0, [r4, #0]
 800bfb2:	682b      	ldr	r3, [r5, #0]
 800bfb4:	0607      	lsls	r7, r0, #24
 800bfb6:	f103 0104 	add.w	r1, r3, #4
 800bfba:	6029      	str	r1, [r5, #0]
 800bfbc:	d501      	bpl.n	800bfc2 <_printf_i+0xbe>
 800bfbe:	681e      	ldr	r6, [r3, #0]
 800bfc0:	e003      	b.n	800bfca <_printf_i+0xc6>
 800bfc2:	0646      	lsls	r6, r0, #25
 800bfc4:	d5fb      	bpl.n	800bfbe <_printf_i+0xba>
 800bfc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	da03      	bge.n	800bfd6 <_printf_i+0xd2>
 800bfce:	232d      	movs	r3, #45	; 0x2d
 800bfd0:	4276      	negs	r6, r6
 800bfd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfd6:	485a      	ldr	r0, [pc, #360]	; (800c140 <_printf_i+0x23c>)
 800bfd8:	230a      	movs	r3, #10
 800bfda:	e012      	b.n	800c002 <_printf_i+0xfe>
 800bfdc:	682b      	ldr	r3, [r5, #0]
 800bfde:	6820      	ldr	r0, [r4, #0]
 800bfe0:	1d19      	adds	r1, r3, #4
 800bfe2:	6029      	str	r1, [r5, #0]
 800bfe4:	0605      	lsls	r5, r0, #24
 800bfe6:	d501      	bpl.n	800bfec <_printf_i+0xe8>
 800bfe8:	681e      	ldr	r6, [r3, #0]
 800bfea:	e002      	b.n	800bff2 <_printf_i+0xee>
 800bfec:	0641      	lsls	r1, r0, #25
 800bfee:	d5fb      	bpl.n	800bfe8 <_printf_i+0xe4>
 800bff0:	881e      	ldrh	r6, [r3, #0]
 800bff2:	4853      	ldr	r0, [pc, #332]	; (800c140 <_printf_i+0x23c>)
 800bff4:	2f6f      	cmp	r7, #111	; 0x6f
 800bff6:	bf0c      	ite	eq
 800bff8:	2308      	moveq	r3, #8
 800bffa:	230a      	movne	r3, #10
 800bffc:	2100      	movs	r1, #0
 800bffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c002:	6865      	ldr	r5, [r4, #4]
 800c004:	60a5      	str	r5, [r4, #8]
 800c006:	2d00      	cmp	r5, #0
 800c008:	bfa2      	ittt	ge
 800c00a:	6821      	ldrge	r1, [r4, #0]
 800c00c:	f021 0104 	bicge.w	r1, r1, #4
 800c010:	6021      	strge	r1, [r4, #0]
 800c012:	b90e      	cbnz	r6, 800c018 <_printf_i+0x114>
 800c014:	2d00      	cmp	r5, #0
 800c016:	d04b      	beq.n	800c0b0 <_printf_i+0x1ac>
 800c018:	4615      	mov	r5, r2
 800c01a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c01e:	fb03 6711 	mls	r7, r3, r1, r6
 800c022:	5dc7      	ldrb	r7, [r0, r7]
 800c024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c028:	4637      	mov	r7, r6
 800c02a:	42bb      	cmp	r3, r7
 800c02c:	460e      	mov	r6, r1
 800c02e:	d9f4      	bls.n	800c01a <_printf_i+0x116>
 800c030:	2b08      	cmp	r3, #8
 800c032:	d10b      	bne.n	800c04c <_printf_i+0x148>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	07de      	lsls	r6, r3, #31
 800c038:	d508      	bpl.n	800c04c <_printf_i+0x148>
 800c03a:	6923      	ldr	r3, [r4, #16]
 800c03c:	6861      	ldr	r1, [r4, #4]
 800c03e:	4299      	cmp	r1, r3
 800c040:	bfde      	ittt	le
 800c042:	2330      	movle	r3, #48	; 0x30
 800c044:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c04c:	1b52      	subs	r2, r2, r5
 800c04e:	6122      	str	r2, [r4, #16]
 800c050:	f8cd a000 	str.w	sl, [sp]
 800c054:	464b      	mov	r3, r9
 800c056:	aa03      	add	r2, sp, #12
 800c058:	4621      	mov	r1, r4
 800c05a:	4640      	mov	r0, r8
 800c05c:	f7ff fee4 	bl	800be28 <_printf_common>
 800c060:	3001      	adds	r0, #1
 800c062:	d14a      	bne.n	800c0fa <_printf_i+0x1f6>
 800c064:	f04f 30ff 	mov.w	r0, #4294967295
 800c068:	b004      	add	sp, #16
 800c06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06e:	6823      	ldr	r3, [r4, #0]
 800c070:	f043 0320 	orr.w	r3, r3, #32
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	4833      	ldr	r0, [pc, #204]	; (800c144 <_printf_i+0x240>)
 800c078:	2778      	movs	r7, #120	; 0x78
 800c07a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c07e:	6823      	ldr	r3, [r4, #0]
 800c080:	6829      	ldr	r1, [r5, #0]
 800c082:	061f      	lsls	r7, r3, #24
 800c084:	f851 6b04 	ldr.w	r6, [r1], #4
 800c088:	d402      	bmi.n	800c090 <_printf_i+0x18c>
 800c08a:	065f      	lsls	r7, r3, #25
 800c08c:	bf48      	it	mi
 800c08e:	b2b6      	uxthmi	r6, r6
 800c090:	07df      	lsls	r7, r3, #31
 800c092:	bf48      	it	mi
 800c094:	f043 0320 	orrmi.w	r3, r3, #32
 800c098:	6029      	str	r1, [r5, #0]
 800c09a:	bf48      	it	mi
 800c09c:	6023      	strmi	r3, [r4, #0]
 800c09e:	b91e      	cbnz	r6, 800c0a8 <_printf_i+0x1a4>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	f023 0320 	bic.w	r3, r3, #32
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	2310      	movs	r3, #16
 800c0aa:	e7a7      	b.n	800bffc <_printf_i+0xf8>
 800c0ac:	4824      	ldr	r0, [pc, #144]	; (800c140 <_printf_i+0x23c>)
 800c0ae:	e7e4      	b.n	800c07a <_printf_i+0x176>
 800c0b0:	4615      	mov	r5, r2
 800c0b2:	e7bd      	b.n	800c030 <_printf_i+0x12c>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	6826      	ldr	r6, [r4, #0]
 800c0b8:	6961      	ldr	r1, [r4, #20]
 800c0ba:	1d18      	adds	r0, r3, #4
 800c0bc:	6028      	str	r0, [r5, #0]
 800c0be:	0635      	lsls	r5, r6, #24
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	d501      	bpl.n	800c0c8 <_printf_i+0x1c4>
 800c0c4:	6019      	str	r1, [r3, #0]
 800c0c6:	e002      	b.n	800c0ce <_printf_i+0x1ca>
 800c0c8:	0670      	lsls	r0, r6, #25
 800c0ca:	d5fb      	bpl.n	800c0c4 <_printf_i+0x1c0>
 800c0cc:	8019      	strh	r1, [r3, #0]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	6123      	str	r3, [r4, #16]
 800c0d2:	4615      	mov	r5, r2
 800c0d4:	e7bc      	b.n	800c050 <_printf_i+0x14c>
 800c0d6:	682b      	ldr	r3, [r5, #0]
 800c0d8:	1d1a      	adds	r2, r3, #4
 800c0da:	602a      	str	r2, [r5, #0]
 800c0dc:	681d      	ldr	r5, [r3, #0]
 800c0de:	6862      	ldr	r2, [r4, #4]
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f7f4 f874 	bl	80001d0 <memchr>
 800c0e8:	b108      	cbz	r0, 800c0ee <_printf_i+0x1ea>
 800c0ea:	1b40      	subs	r0, r0, r5
 800c0ec:	6060      	str	r0, [r4, #4]
 800c0ee:	6863      	ldr	r3, [r4, #4]
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0f8:	e7aa      	b.n	800c050 <_printf_i+0x14c>
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	4649      	mov	r1, r9
 800c100:	4640      	mov	r0, r8
 800c102:	47d0      	blx	sl
 800c104:	3001      	adds	r0, #1
 800c106:	d0ad      	beq.n	800c064 <_printf_i+0x160>
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	079b      	lsls	r3, r3, #30
 800c10c:	d413      	bmi.n	800c136 <_printf_i+0x232>
 800c10e:	68e0      	ldr	r0, [r4, #12]
 800c110:	9b03      	ldr	r3, [sp, #12]
 800c112:	4298      	cmp	r0, r3
 800c114:	bfb8      	it	lt
 800c116:	4618      	movlt	r0, r3
 800c118:	e7a6      	b.n	800c068 <_printf_i+0x164>
 800c11a:	2301      	movs	r3, #1
 800c11c:	4632      	mov	r2, r6
 800c11e:	4649      	mov	r1, r9
 800c120:	4640      	mov	r0, r8
 800c122:	47d0      	blx	sl
 800c124:	3001      	adds	r0, #1
 800c126:	d09d      	beq.n	800c064 <_printf_i+0x160>
 800c128:	3501      	adds	r5, #1
 800c12a:	68e3      	ldr	r3, [r4, #12]
 800c12c:	9903      	ldr	r1, [sp, #12]
 800c12e:	1a5b      	subs	r3, r3, r1
 800c130:	42ab      	cmp	r3, r5
 800c132:	dcf2      	bgt.n	800c11a <_printf_i+0x216>
 800c134:	e7eb      	b.n	800c10e <_printf_i+0x20a>
 800c136:	2500      	movs	r5, #0
 800c138:	f104 0619 	add.w	r6, r4, #25
 800c13c:	e7f5      	b.n	800c12a <_printf_i+0x226>
 800c13e:	bf00      	nop
 800c140:	0800ed1e 	.word	0x0800ed1e
 800c144:	0800ed2f 	.word	0x0800ed2f

0800c148 <std>:
 800c148:	2300      	movs	r3, #0
 800c14a:	b510      	push	{r4, lr}
 800c14c:	4604      	mov	r4, r0
 800c14e:	e9c0 3300 	strd	r3, r3, [r0]
 800c152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c156:	6083      	str	r3, [r0, #8]
 800c158:	8181      	strh	r1, [r0, #12]
 800c15a:	6643      	str	r3, [r0, #100]	; 0x64
 800c15c:	81c2      	strh	r2, [r0, #14]
 800c15e:	6183      	str	r3, [r0, #24]
 800c160:	4619      	mov	r1, r3
 800c162:	2208      	movs	r2, #8
 800c164:	305c      	adds	r0, #92	; 0x5c
 800c166:	f000 f9b9 	bl	800c4dc <memset>
 800c16a:	4b05      	ldr	r3, [pc, #20]	; (800c180 <std+0x38>)
 800c16c:	6263      	str	r3, [r4, #36]	; 0x24
 800c16e:	4b05      	ldr	r3, [pc, #20]	; (800c184 <std+0x3c>)
 800c170:	62a3      	str	r3, [r4, #40]	; 0x28
 800c172:	4b05      	ldr	r3, [pc, #20]	; (800c188 <std+0x40>)
 800c174:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <std+0x44>)
 800c178:	6224      	str	r4, [r4, #32]
 800c17a:	6323      	str	r3, [r4, #48]	; 0x30
 800c17c:	bd10      	pop	{r4, pc}
 800c17e:	bf00      	nop
 800c180:	0800c415 	.word	0x0800c415
 800c184:	0800c437 	.word	0x0800c437
 800c188:	0800c46f 	.word	0x0800c46f
 800c18c:	0800c493 	.word	0x0800c493

0800c190 <stdio_exit_handler>:
 800c190:	4a02      	ldr	r2, [pc, #8]	; (800c19c <stdio_exit_handler+0xc>)
 800c192:	4903      	ldr	r1, [pc, #12]	; (800c1a0 <stdio_exit_handler+0x10>)
 800c194:	4803      	ldr	r0, [pc, #12]	; (800c1a4 <stdio_exit_handler+0x14>)
 800c196:	f000 b869 	b.w	800c26c <_fwalk_sglue>
 800c19a:	bf00      	nop
 800c19c:	20000010 	.word	0x20000010
 800c1a0:	0800df81 	.word	0x0800df81
 800c1a4:	2000001c 	.word	0x2000001c

0800c1a8 <cleanup_stdio>:
 800c1a8:	6841      	ldr	r1, [r0, #4]
 800c1aa:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <cleanup_stdio+0x34>)
 800c1ac:	4299      	cmp	r1, r3
 800c1ae:	b510      	push	{r4, lr}
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	d001      	beq.n	800c1b8 <cleanup_stdio+0x10>
 800c1b4:	f001 fee4 	bl	800df80 <_fflush_r>
 800c1b8:	68a1      	ldr	r1, [r4, #8]
 800c1ba:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <cleanup_stdio+0x38>)
 800c1bc:	4299      	cmp	r1, r3
 800c1be:	d002      	beq.n	800c1c6 <cleanup_stdio+0x1e>
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f001 fedd 	bl	800df80 <_fflush_r>
 800c1c6:	68e1      	ldr	r1, [r4, #12]
 800c1c8:	4b06      	ldr	r3, [pc, #24]	; (800c1e4 <cleanup_stdio+0x3c>)
 800c1ca:	4299      	cmp	r1, r3
 800c1cc:	d004      	beq.n	800c1d8 <cleanup_stdio+0x30>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d4:	f001 bed4 	b.w	800df80 <_fflush_r>
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	bf00      	nop
 800c1dc:	20000d84 	.word	0x20000d84
 800c1e0:	20000dec 	.word	0x20000dec
 800c1e4:	20000e54 	.word	0x20000e54

0800c1e8 <global_stdio_init.part.0>:
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <global_stdio_init.part.0+0x30>)
 800c1ec:	4c0b      	ldr	r4, [pc, #44]	; (800c21c <global_stdio_init.part.0+0x34>)
 800c1ee:	4a0c      	ldr	r2, [pc, #48]	; (800c220 <global_stdio_init.part.0+0x38>)
 800c1f0:	601a      	str	r2, [r3, #0]
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2104      	movs	r1, #4
 800c1f8:	f7ff ffa6 	bl	800c148 <std>
 800c1fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c200:	2201      	movs	r2, #1
 800c202:	2109      	movs	r1, #9
 800c204:	f7ff ffa0 	bl	800c148 <std>
 800c208:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c20c:	2202      	movs	r2, #2
 800c20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c212:	2112      	movs	r1, #18
 800c214:	f7ff bf98 	b.w	800c148 <std>
 800c218:	20000ebc 	.word	0x20000ebc
 800c21c:	20000d84 	.word	0x20000d84
 800c220:	0800c191 	.word	0x0800c191

0800c224 <__sfp_lock_acquire>:
 800c224:	4801      	ldr	r0, [pc, #4]	; (800c22c <__sfp_lock_acquire+0x8>)
 800c226:	f000 b9d5 	b.w	800c5d4 <__retarget_lock_acquire_recursive>
 800c22a:	bf00      	nop
 800c22c:	20000ec5 	.word	0x20000ec5

0800c230 <__sfp_lock_release>:
 800c230:	4801      	ldr	r0, [pc, #4]	; (800c238 <__sfp_lock_release+0x8>)
 800c232:	f000 b9d0 	b.w	800c5d6 <__retarget_lock_release_recursive>
 800c236:	bf00      	nop
 800c238:	20000ec5 	.word	0x20000ec5

0800c23c <__sinit>:
 800c23c:	b510      	push	{r4, lr}
 800c23e:	4604      	mov	r4, r0
 800c240:	f7ff fff0 	bl	800c224 <__sfp_lock_acquire>
 800c244:	6a23      	ldr	r3, [r4, #32]
 800c246:	b11b      	cbz	r3, 800c250 <__sinit+0x14>
 800c248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c24c:	f7ff bff0 	b.w	800c230 <__sfp_lock_release>
 800c250:	4b04      	ldr	r3, [pc, #16]	; (800c264 <__sinit+0x28>)
 800c252:	6223      	str	r3, [r4, #32]
 800c254:	4b04      	ldr	r3, [pc, #16]	; (800c268 <__sinit+0x2c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1f5      	bne.n	800c248 <__sinit+0xc>
 800c25c:	f7ff ffc4 	bl	800c1e8 <global_stdio_init.part.0>
 800c260:	e7f2      	b.n	800c248 <__sinit+0xc>
 800c262:	bf00      	nop
 800c264:	0800c1a9 	.word	0x0800c1a9
 800c268:	20000ebc 	.word	0x20000ebc

0800c26c <_fwalk_sglue>:
 800c26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c270:	4607      	mov	r7, r0
 800c272:	4688      	mov	r8, r1
 800c274:	4614      	mov	r4, r2
 800c276:	2600      	movs	r6, #0
 800c278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c27c:	f1b9 0901 	subs.w	r9, r9, #1
 800c280:	d505      	bpl.n	800c28e <_fwalk_sglue+0x22>
 800c282:	6824      	ldr	r4, [r4, #0]
 800c284:	2c00      	cmp	r4, #0
 800c286:	d1f7      	bne.n	800c278 <_fwalk_sglue+0xc>
 800c288:	4630      	mov	r0, r6
 800c28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d907      	bls.n	800c2a4 <_fwalk_sglue+0x38>
 800c294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c298:	3301      	adds	r3, #1
 800c29a:	d003      	beq.n	800c2a4 <_fwalk_sglue+0x38>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4638      	mov	r0, r7
 800c2a0:	47c0      	blx	r8
 800c2a2:	4306      	orrs	r6, r0
 800c2a4:	3568      	adds	r5, #104	; 0x68
 800c2a6:	e7e9      	b.n	800c27c <_fwalk_sglue+0x10>

0800c2a8 <setbuf>:
 800c2a8:	fab1 f281 	clz	r2, r1
 800c2ac:	0952      	lsrs	r2, r2, #5
 800c2ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2b2:	0052      	lsls	r2, r2, #1
 800c2b4:	f000 b800 	b.w	800c2b8 <setvbuf>

0800c2b8 <setvbuf>:
 800c2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2bc:	461d      	mov	r5, r3
 800c2be:	4b54      	ldr	r3, [pc, #336]	; (800c410 <setvbuf+0x158>)
 800c2c0:	681f      	ldr	r7, [r3, #0]
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	460e      	mov	r6, r1
 800c2c6:	4690      	mov	r8, r2
 800c2c8:	b127      	cbz	r7, 800c2d4 <setvbuf+0x1c>
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	b913      	cbnz	r3, 800c2d4 <setvbuf+0x1c>
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	f7ff ffb4 	bl	800c23c <__sinit>
 800c2d4:	f1b8 0f02 	cmp.w	r8, #2
 800c2d8:	d006      	beq.n	800c2e8 <setvbuf+0x30>
 800c2da:	f1b8 0f01 	cmp.w	r8, #1
 800c2de:	f200 8094 	bhi.w	800c40a <setvbuf+0x152>
 800c2e2:	2d00      	cmp	r5, #0
 800c2e4:	f2c0 8091 	blt.w	800c40a <setvbuf+0x152>
 800c2e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ea:	07da      	lsls	r2, r3, #31
 800c2ec:	d405      	bmi.n	800c2fa <setvbuf+0x42>
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	059b      	lsls	r3, r3, #22
 800c2f2:	d402      	bmi.n	800c2fa <setvbuf+0x42>
 800c2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2f6:	f000 f96d 	bl	800c5d4 <__retarget_lock_acquire_recursive>
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f001 fe3f 	bl	800df80 <_fflush_r>
 800c302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c304:	b141      	cbz	r1, 800c318 <setvbuf+0x60>
 800c306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c30a:	4299      	cmp	r1, r3
 800c30c:	d002      	beq.n	800c314 <setvbuf+0x5c>
 800c30e:	4638      	mov	r0, r7
 800c310:	f000 ffdc 	bl	800d2cc <_free_r>
 800c314:	2300      	movs	r3, #0
 800c316:	6363      	str	r3, [r4, #52]	; 0x34
 800c318:	2300      	movs	r3, #0
 800c31a:	61a3      	str	r3, [r4, #24]
 800c31c:	6063      	str	r3, [r4, #4]
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	0618      	lsls	r0, r3, #24
 800c322:	d503      	bpl.n	800c32c <setvbuf+0x74>
 800c324:	6921      	ldr	r1, [r4, #16]
 800c326:	4638      	mov	r0, r7
 800c328:	f000 ffd0 	bl	800d2cc <_free_r>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c332:	f023 0303 	bic.w	r3, r3, #3
 800c336:	f1b8 0f02 	cmp.w	r8, #2
 800c33a:	81a3      	strh	r3, [r4, #12]
 800c33c:	d05f      	beq.n	800c3fe <setvbuf+0x146>
 800c33e:	ab01      	add	r3, sp, #4
 800c340:	466a      	mov	r2, sp
 800c342:	4621      	mov	r1, r4
 800c344:	4638      	mov	r0, r7
 800c346:	f001 fe43 	bl	800dfd0 <__swhatbuf_r>
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	4318      	orrs	r0, r3
 800c34e:	81a0      	strh	r0, [r4, #12]
 800c350:	bb2d      	cbnz	r5, 800c39e <setvbuf+0xe6>
 800c352:	9d00      	ldr	r5, [sp, #0]
 800c354:	4628      	mov	r0, r5
 800c356:	f001 f805 	bl	800d364 <malloc>
 800c35a:	4606      	mov	r6, r0
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d150      	bne.n	800c402 <setvbuf+0x14a>
 800c360:	f8dd 9000 	ldr.w	r9, [sp]
 800c364:	45a9      	cmp	r9, r5
 800c366:	d13e      	bne.n	800c3e6 <setvbuf+0x12e>
 800c368:	f04f 35ff 	mov.w	r5, #4294967295
 800c36c:	2200      	movs	r2, #0
 800c36e:	60a2      	str	r2, [r4, #8]
 800c370:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800c374:	6022      	str	r2, [r4, #0]
 800c376:	6122      	str	r2, [r4, #16]
 800c378:	2201      	movs	r2, #1
 800c37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37e:	6162      	str	r2, [r4, #20]
 800c380:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c382:	f043 0302 	orr.w	r3, r3, #2
 800c386:	07d1      	lsls	r1, r2, #31
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	d404      	bmi.n	800c396 <setvbuf+0xde>
 800c38c:	059b      	lsls	r3, r3, #22
 800c38e:	d402      	bmi.n	800c396 <setvbuf+0xde>
 800c390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c392:	f000 f920 	bl	800c5d6 <__retarget_lock_release_recursive>
 800c396:	4628      	mov	r0, r5
 800c398:	b003      	add	sp, #12
 800c39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d0d8      	beq.n	800c354 <setvbuf+0x9c>
 800c3a2:	6a3b      	ldr	r3, [r7, #32]
 800c3a4:	b913      	cbnz	r3, 800c3ac <setvbuf+0xf4>
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	f7ff ff48 	bl	800c23c <__sinit>
 800c3ac:	f1b8 0f01 	cmp.w	r8, #1
 800c3b0:	bf08      	it	eq
 800c3b2:	89a3      	ldrheq	r3, [r4, #12]
 800c3b4:	6026      	str	r6, [r4, #0]
 800c3b6:	bf04      	itt	eq
 800c3b8:	f043 0301 	orreq.w	r3, r3, #1
 800c3bc:	81a3      	strheq	r3, [r4, #12]
 800c3be:	89a3      	ldrh	r3, [r4, #12]
 800c3c0:	f013 0208 	ands.w	r2, r3, #8
 800c3c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c3c8:	d01d      	beq.n	800c406 <setvbuf+0x14e>
 800c3ca:	07da      	lsls	r2, r3, #31
 800c3cc:	bf41      	itttt	mi
 800c3ce:	2200      	movmi	r2, #0
 800c3d0:	426d      	negmi	r5, r5
 800c3d2:	60a2      	strmi	r2, [r4, #8]
 800c3d4:	61a5      	strmi	r5, [r4, #24]
 800c3d6:	bf58      	it	pl
 800c3d8:	60a5      	strpl	r5, [r4, #8]
 800c3da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c3dc:	f015 0501 	ands.w	r5, r5, #1
 800c3e0:	d0d4      	beq.n	800c38c <setvbuf+0xd4>
 800c3e2:	2500      	movs	r5, #0
 800c3e4:	e7d7      	b.n	800c396 <setvbuf+0xde>
 800c3e6:	4648      	mov	r0, r9
 800c3e8:	f000 ffbc 	bl	800d364 <malloc>
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d0ba      	beq.n	800c368 <setvbuf+0xb0>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3f8:	81a3      	strh	r3, [r4, #12]
 800c3fa:	464d      	mov	r5, r9
 800c3fc:	e7d1      	b.n	800c3a2 <setvbuf+0xea>
 800c3fe:	2500      	movs	r5, #0
 800c400:	e7b4      	b.n	800c36c <setvbuf+0xb4>
 800c402:	46a9      	mov	r9, r5
 800c404:	e7f5      	b.n	800c3f2 <setvbuf+0x13a>
 800c406:	60a2      	str	r2, [r4, #8]
 800c408:	e7e7      	b.n	800c3da <setvbuf+0x122>
 800c40a:	f04f 35ff 	mov.w	r5, #4294967295
 800c40e:	e7c2      	b.n	800c396 <setvbuf+0xde>
 800c410:	20000068 	.word	0x20000068

0800c414 <__sread>:
 800c414:	b510      	push	{r4, lr}
 800c416:	460c      	mov	r4, r1
 800c418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41c:	f000 f88c 	bl	800c538 <_read_r>
 800c420:	2800      	cmp	r0, #0
 800c422:	bfab      	itete	ge
 800c424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c426:	89a3      	ldrhlt	r3, [r4, #12]
 800c428:	181b      	addge	r3, r3, r0
 800c42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c42e:	bfac      	ite	ge
 800c430:	6563      	strge	r3, [r4, #84]	; 0x54
 800c432:	81a3      	strhlt	r3, [r4, #12]
 800c434:	bd10      	pop	{r4, pc}

0800c436 <__swrite>:
 800c436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c43a:	461f      	mov	r7, r3
 800c43c:	898b      	ldrh	r3, [r1, #12]
 800c43e:	05db      	lsls	r3, r3, #23
 800c440:	4605      	mov	r5, r0
 800c442:	460c      	mov	r4, r1
 800c444:	4616      	mov	r6, r2
 800c446:	d505      	bpl.n	800c454 <__swrite+0x1e>
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	2302      	movs	r3, #2
 800c44e:	2200      	movs	r2, #0
 800c450:	f000 f860 	bl	800c514 <_lseek_r>
 800c454:	89a3      	ldrh	r3, [r4, #12]
 800c456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c45a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c45e:	81a3      	strh	r3, [r4, #12]
 800c460:	4632      	mov	r2, r6
 800c462:	463b      	mov	r3, r7
 800c464:	4628      	mov	r0, r5
 800c466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	f000 b877 	b.w	800c55c <_write_r>

0800c46e <__sseek>:
 800c46e:	b510      	push	{r4, lr}
 800c470:	460c      	mov	r4, r1
 800c472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c476:	f000 f84d 	bl	800c514 <_lseek_r>
 800c47a:	1c43      	adds	r3, r0, #1
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	bf15      	itete	ne
 800c480:	6560      	strne	r0, [r4, #84]	; 0x54
 800c482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c48a:	81a3      	strheq	r3, [r4, #12]
 800c48c:	bf18      	it	ne
 800c48e:	81a3      	strhne	r3, [r4, #12]
 800c490:	bd10      	pop	{r4, pc}

0800c492 <__sclose>:
 800c492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c496:	f000 b82d 	b.w	800c4f4 <_close_r>
	...

0800c49c <_vsiprintf_r>:
 800c49c:	b500      	push	{lr}
 800c49e:	b09b      	sub	sp, #108	; 0x6c
 800c4a0:	9100      	str	r1, [sp, #0]
 800c4a2:	9104      	str	r1, [sp, #16]
 800c4a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4a8:	9105      	str	r1, [sp, #20]
 800c4aa:	9102      	str	r1, [sp, #8]
 800c4ac:	4905      	ldr	r1, [pc, #20]	; (800c4c4 <_vsiprintf_r+0x28>)
 800c4ae:	9103      	str	r1, [sp, #12]
 800c4b0:	4669      	mov	r1, sp
 800c4b2:	f001 fbe1 	bl	800dc78 <_svfiprintf_r>
 800c4b6:	9b00      	ldr	r3, [sp, #0]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	b01b      	add	sp, #108	; 0x6c
 800c4be:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4c2:	bf00      	nop
 800c4c4:	ffff0208 	.word	0xffff0208

0800c4c8 <vsiprintf>:
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	460a      	mov	r2, r1
 800c4cc:	4601      	mov	r1, r0
 800c4ce:	4802      	ldr	r0, [pc, #8]	; (800c4d8 <vsiprintf+0x10>)
 800c4d0:	6800      	ldr	r0, [r0, #0]
 800c4d2:	f7ff bfe3 	b.w	800c49c <_vsiprintf_r>
 800c4d6:	bf00      	nop
 800c4d8:	20000068 	.word	0x20000068

0800c4dc <memset>:
 800c4dc:	4402      	add	r2, r0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d100      	bne.n	800c4e6 <memset+0xa>
 800c4e4:	4770      	bx	lr
 800c4e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ea:	e7f9      	b.n	800c4e0 <memset+0x4>

0800c4ec <_localeconv_r>:
 800c4ec:	4800      	ldr	r0, [pc, #0]	; (800c4f0 <_localeconv_r+0x4>)
 800c4ee:	4770      	bx	lr
 800c4f0:	2000015c 	.word	0x2000015c

0800c4f4 <_close_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d06      	ldr	r5, [pc, #24]	; (800c510 <_close_r+0x1c>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	602b      	str	r3, [r5, #0]
 800c500:	f7f7 fc93 	bl	8003e2a <_close>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	d102      	bne.n	800c50e <_close_r+0x1a>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	b103      	cbz	r3, 800c50e <_close_r+0x1a>
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
 800c510:	20000ec0 	.word	0x20000ec0

0800c514 <_lseek_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d07      	ldr	r5, [pc, #28]	; (800c534 <_lseek_r+0x20>)
 800c518:	4604      	mov	r4, r0
 800c51a:	4608      	mov	r0, r1
 800c51c:	4611      	mov	r1, r2
 800c51e:	2200      	movs	r2, #0
 800c520:	602a      	str	r2, [r5, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	f7f7 fca8 	bl	8003e78 <_lseek>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_lseek_r+0x1e>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_lseek_r+0x1e>
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	20000ec0 	.word	0x20000ec0

0800c538 <_read_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4d07      	ldr	r5, [pc, #28]	; (800c558 <_read_r+0x20>)
 800c53c:	4604      	mov	r4, r0
 800c53e:	4608      	mov	r0, r1
 800c540:	4611      	mov	r1, r2
 800c542:	2200      	movs	r2, #0
 800c544:	602a      	str	r2, [r5, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	f7f7 fc36 	bl	8003db8 <_read>
 800c54c:	1c43      	adds	r3, r0, #1
 800c54e:	d102      	bne.n	800c556 <_read_r+0x1e>
 800c550:	682b      	ldr	r3, [r5, #0]
 800c552:	b103      	cbz	r3, 800c556 <_read_r+0x1e>
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	bd38      	pop	{r3, r4, r5, pc}
 800c558:	20000ec0 	.word	0x20000ec0

0800c55c <_write_r>:
 800c55c:	b538      	push	{r3, r4, r5, lr}
 800c55e:	4d07      	ldr	r5, [pc, #28]	; (800c57c <_write_r+0x20>)
 800c560:	4604      	mov	r4, r0
 800c562:	4608      	mov	r0, r1
 800c564:	4611      	mov	r1, r2
 800c566:	2200      	movs	r2, #0
 800c568:	602a      	str	r2, [r5, #0]
 800c56a:	461a      	mov	r2, r3
 800c56c:	f7f7 fc41 	bl	8003df2 <_write>
 800c570:	1c43      	adds	r3, r0, #1
 800c572:	d102      	bne.n	800c57a <_write_r+0x1e>
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	b103      	cbz	r3, 800c57a <_write_r+0x1e>
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
 800c57c:	20000ec0 	.word	0x20000ec0

0800c580 <__errno>:
 800c580:	4b01      	ldr	r3, [pc, #4]	; (800c588 <__errno+0x8>)
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	20000068 	.word	0x20000068

0800c58c <__libc_init_array>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	4d0d      	ldr	r5, [pc, #52]	; (800c5c4 <__libc_init_array+0x38>)
 800c590:	4c0d      	ldr	r4, [pc, #52]	; (800c5c8 <__libc_init_array+0x3c>)
 800c592:	1b64      	subs	r4, r4, r5
 800c594:	10a4      	asrs	r4, r4, #2
 800c596:	2600      	movs	r6, #0
 800c598:	42a6      	cmp	r6, r4
 800c59a:	d109      	bne.n	800c5b0 <__libc_init_array+0x24>
 800c59c:	4d0b      	ldr	r5, [pc, #44]	; (800c5cc <__libc_init_array+0x40>)
 800c59e:	4c0c      	ldr	r4, [pc, #48]	; (800c5d0 <__libc_init_array+0x44>)
 800c5a0:	f002 f892 	bl	800e6c8 <_init>
 800c5a4:	1b64      	subs	r4, r4, r5
 800c5a6:	10a4      	asrs	r4, r4, #2
 800c5a8:	2600      	movs	r6, #0
 800c5aa:	42a6      	cmp	r6, r4
 800c5ac:	d105      	bne.n	800c5ba <__libc_init_array+0x2e>
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b4:	4798      	blx	r3
 800c5b6:	3601      	adds	r6, #1
 800c5b8:	e7ee      	b.n	800c598 <__libc_init_array+0xc>
 800c5ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5be:	4798      	blx	r3
 800c5c0:	3601      	adds	r6, #1
 800c5c2:	e7f2      	b.n	800c5aa <__libc_init_array+0x1e>
 800c5c4:	0800f07c 	.word	0x0800f07c
 800c5c8:	0800f07c 	.word	0x0800f07c
 800c5cc:	0800f07c 	.word	0x0800f07c
 800c5d0:	0800f080 	.word	0x0800f080

0800c5d4 <__retarget_lock_acquire_recursive>:
 800c5d4:	4770      	bx	lr

0800c5d6 <__retarget_lock_release_recursive>:
 800c5d6:	4770      	bx	lr

0800c5d8 <quorem>:
 800c5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	6903      	ldr	r3, [r0, #16]
 800c5de:	690c      	ldr	r4, [r1, #16]
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	4607      	mov	r7, r0
 800c5e4:	db7e      	blt.n	800c6e4 <quorem+0x10c>
 800c5e6:	3c01      	subs	r4, #1
 800c5e8:	f101 0814 	add.w	r8, r1, #20
 800c5ec:	f100 0514 	add.w	r5, r0, #20
 800c5f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5f4:	9301      	str	r3, [sp, #4]
 800c5f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5fe:	3301      	adds	r3, #1
 800c600:	429a      	cmp	r2, r3
 800c602:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c606:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c60a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c60e:	d331      	bcc.n	800c674 <quorem+0x9c>
 800c610:	f04f 0e00 	mov.w	lr, #0
 800c614:	4640      	mov	r0, r8
 800c616:	46ac      	mov	ip, r5
 800c618:	46f2      	mov	sl, lr
 800c61a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c61e:	b293      	uxth	r3, r2
 800c620:	fb06 e303 	mla	r3, r6, r3, lr
 800c624:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c628:	0c1a      	lsrs	r2, r3, #16
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	ebaa 0303 	sub.w	r3, sl, r3
 800c630:	f8dc a000 	ldr.w	sl, [ip]
 800c634:	fa13 f38a 	uxtah	r3, r3, sl
 800c638:	fb06 220e 	mla	r2, r6, lr, r2
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	9b00      	ldr	r3, [sp, #0]
 800c640:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c644:	b292      	uxth	r2, r2
 800c646:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c64a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c64e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c652:	4581      	cmp	r9, r0
 800c654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c658:	f84c 3b04 	str.w	r3, [ip], #4
 800c65c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c660:	d2db      	bcs.n	800c61a <quorem+0x42>
 800c662:	f855 300b 	ldr.w	r3, [r5, fp]
 800c666:	b92b      	cbnz	r3, 800c674 <quorem+0x9c>
 800c668:	9b01      	ldr	r3, [sp, #4]
 800c66a:	3b04      	subs	r3, #4
 800c66c:	429d      	cmp	r5, r3
 800c66e:	461a      	mov	r2, r3
 800c670:	d32c      	bcc.n	800c6cc <quorem+0xf4>
 800c672:	613c      	str	r4, [r7, #16]
 800c674:	4638      	mov	r0, r7
 800c676:	f001 f9a5 	bl	800d9c4 <__mcmp>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	db22      	blt.n	800c6c4 <quorem+0xec>
 800c67e:	3601      	adds	r6, #1
 800c680:	4629      	mov	r1, r5
 800c682:	2000      	movs	r0, #0
 800c684:	f858 2b04 	ldr.w	r2, [r8], #4
 800c688:	f8d1 c000 	ldr.w	ip, [r1]
 800c68c:	b293      	uxth	r3, r2
 800c68e:	1ac3      	subs	r3, r0, r3
 800c690:	0c12      	lsrs	r2, r2, #16
 800c692:	fa13 f38c 	uxtah	r3, r3, ip
 800c696:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c69a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6a4:	45c1      	cmp	r9, r8
 800c6a6:	f841 3b04 	str.w	r3, [r1], #4
 800c6aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c6ae:	d2e9      	bcs.n	800c684 <quorem+0xac>
 800c6b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6b8:	b922      	cbnz	r2, 800c6c4 <quorem+0xec>
 800c6ba:	3b04      	subs	r3, #4
 800c6bc:	429d      	cmp	r5, r3
 800c6be:	461a      	mov	r2, r3
 800c6c0:	d30a      	bcc.n	800c6d8 <quorem+0x100>
 800c6c2:	613c      	str	r4, [r7, #16]
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	b003      	add	sp, #12
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	6812      	ldr	r2, [r2, #0]
 800c6ce:	3b04      	subs	r3, #4
 800c6d0:	2a00      	cmp	r2, #0
 800c6d2:	d1ce      	bne.n	800c672 <quorem+0x9a>
 800c6d4:	3c01      	subs	r4, #1
 800c6d6:	e7c9      	b.n	800c66c <quorem+0x94>
 800c6d8:	6812      	ldr	r2, [r2, #0]
 800c6da:	3b04      	subs	r3, #4
 800c6dc:	2a00      	cmp	r2, #0
 800c6de:	d1f0      	bne.n	800c6c2 <quorem+0xea>
 800c6e0:	3c01      	subs	r4, #1
 800c6e2:	e7eb      	b.n	800c6bc <quorem+0xe4>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e7ee      	b.n	800c6c6 <quorem+0xee>

0800c6e8 <_dtoa_r>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	ed2d 8b04 	vpush	{d8-d9}
 800c6f0:	69c5      	ldr	r5, [r0, #28]
 800c6f2:	b093      	sub	sp, #76	; 0x4c
 800c6f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c6f8:	ec57 6b10 	vmov	r6, r7, d0
 800c6fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c700:	9107      	str	r1, [sp, #28]
 800c702:	4604      	mov	r4, r0
 800c704:	920a      	str	r2, [sp, #40]	; 0x28
 800c706:	930d      	str	r3, [sp, #52]	; 0x34
 800c708:	b975      	cbnz	r5, 800c728 <_dtoa_r+0x40>
 800c70a:	2010      	movs	r0, #16
 800c70c:	f000 fe2a 	bl	800d364 <malloc>
 800c710:	4602      	mov	r2, r0
 800c712:	61e0      	str	r0, [r4, #28]
 800c714:	b920      	cbnz	r0, 800c720 <_dtoa_r+0x38>
 800c716:	4bae      	ldr	r3, [pc, #696]	; (800c9d0 <_dtoa_r+0x2e8>)
 800c718:	21ef      	movs	r1, #239	; 0xef
 800c71a:	48ae      	ldr	r0, [pc, #696]	; (800c9d4 <_dtoa_r+0x2ec>)
 800c71c:	f001 fd14 	bl	800e148 <__assert_func>
 800c720:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c724:	6005      	str	r5, [r0, #0]
 800c726:	60c5      	str	r5, [r0, #12]
 800c728:	69e3      	ldr	r3, [r4, #28]
 800c72a:	6819      	ldr	r1, [r3, #0]
 800c72c:	b151      	cbz	r1, 800c744 <_dtoa_r+0x5c>
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	604a      	str	r2, [r1, #4]
 800c732:	2301      	movs	r3, #1
 800c734:	4093      	lsls	r3, r2
 800c736:	608b      	str	r3, [r1, #8]
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 ff07 	bl	800d54c <_Bfree>
 800c73e:	69e3      	ldr	r3, [r4, #28]
 800c740:	2200      	movs	r2, #0
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	1e3b      	subs	r3, r7, #0
 800c746:	bfbb      	ittet	lt
 800c748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c74c:	9303      	strlt	r3, [sp, #12]
 800c74e:	2300      	movge	r3, #0
 800c750:	2201      	movlt	r2, #1
 800c752:	bfac      	ite	ge
 800c754:	f8c8 3000 	strge.w	r3, [r8]
 800c758:	f8c8 2000 	strlt.w	r2, [r8]
 800c75c:	4b9e      	ldr	r3, [pc, #632]	; (800c9d8 <_dtoa_r+0x2f0>)
 800c75e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c762:	ea33 0308 	bics.w	r3, r3, r8
 800c766:	d11b      	bne.n	800c7a0 <_dtoa_r+0xb8>
 800c768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c76a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c774:	4333      	orrs	r3, r6
 800c776:	f000 8593 	beq.w	800d2a0 <_dtoa_r+0xbb8>
 800c77a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c77c:	b963      	cbnz	r3, 800c798 <_dtoa_r+0xb0>
 800c77e:	4b97      	ldr	r3, [pc, #604]	; (800c9dc <_dtoa_r+0x2f4>)
 800c780:	e027      	b.n	800c7d2 <_dtoa_r+0xea>
 800c782:	4b97      	ldr	r3, [pc, #604]	; (800c9e0 <_dtoa_r+0x2f8>)
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	3308      	adds	r3, #8
 800c788:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	9800      	ldr	r0, [sp, #0]
 800c78e:	b013      	add	sp, #76	; 0x4c
 800c790:	ecbd 8b04 	vpop	{d8-d9}
 800c794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c798:	4b90      	ldr	r3, [pc, #576]	; (800c9dc <_dtoa_r+0x2f4>)
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	3303      	adds	r3, #3
 800c79e:	e7f3      	b.n	800c788 <_dtoa_r+0xa0>
 800c7a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	ec51 0b17 	vmov	r0, r1, d7
 800c7aa:	eeb0 8a47 	vmov.f32	s16, s14
 800c7ae:	eef0 8a67 	vmov.f32	s17, s15
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f7f4 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7b8:	4681      	mov	r9, r0
 800c7ba:	b160      	cbz	r0, 800c7d6 <_dtoa_r+0xee>
 800c7bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7be:	2301      	movs	r3, #1
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 8568 	beq.w	800d29a <_dtoa_r+0xbb2>
 800c7ca:	4b86      	ldr	r3, [pc, #536]	; (800c9e4 <_dtoa_r+0x2fc>)
 800c7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	e7da      	b.n	800c78c <_dtoa_r+0xa4>
 800c7d6:	aa10      	add	r2, sp, #64	; 0x40
 800c7d8:	a911      	add	r1, sp, #68	; 0x44
 800c7da:	4620      	mov	r0, r4
 800c7dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c7e0:	eef0 0a68 	vmov.f32	s1, s17
 800c7e4:	f001 f994 	bl	800db10 <__d2b>
 800c7e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	2d00      	cmp	r5, #0
 800c7f0:	d07f      	beq.n	800c8f2 <_dtoa_r+0x20a>
 800c7f2:	ee18 3a90 	vmov	r3, s17
 800c7f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c7fe:	ec51 0b18 	vmov	r0, r1, d8
 800c802:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c80a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c80e:	4619      	mov	r1, r3
 800c810:	2200      	movs	r2, #0
 800c812:	4b75      	ldr	r3, [pc, #468]	; (800c9e8 <_dtoa_r+0x300>)
 800c814:	f7f3 fd38 	bl	8000288 <__aeabi_dsub>
 800c818:	a367      	add	r3, pc, #412	; (adr r3, 800c9b8 <_dtoa_r+0x2d0>)
 800c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81e:	f7f3 feeb 	bl	80005f8 <__aeabi_dmul>
 800c822:	a367      	add	r3, pc, #412	; (adr r3, 800c9c0 <_dtoa_r+0x2d8>)
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	f7f3 fd30 	bl	800028c <__adddf3>
 800c82c:	4606      	mov	r6, r0
 800c82e:	4628      	mov	r0, r5
 800c830:	460f      	mov	r7, r1
 800c832:	f7f3 fe77 	bl	8000524 <__aeabi_i2d>
 800c836:	a364      	add	r3, pc, #400	; (adr r3, 800c9c8 <_dtoa_r+0x2e0>)
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f7f3 fedc 	bl	80005f8 <__aeabi_dmul>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f7f3 fd20 	bl	800028c <__adddf3>
 800c84c:	4606      	mov	r6, r0
 800c84e:	460f      	mov	r7, r1
 800c850:	f7f4 f982 	bl	8000b58 <__aeabi_d2iz>
 800c854:	2200      	movs	r2, #0
 800c856:	4683      	mov	fp, r0
 800c858:	2300      	movs	r3, #0
 800c85a:	4630      	mov	r0, r6
 800c85c:	4639      	mov	r1, r7
 800c85e:	f7f4 f93d 	bl	8000adc <__aeabi_dcmplt>
 800c862:	b148      	cbz	r0, 800c878 <_dtoa_r+0x190>
 800c864:	4658      	mov	r0, fp
 800c866:	f7f3 fe5d 	bl	8000524 <__aeabi_i2d>
 800c86a:	4632      	mov	r2, r6
 800c86c:	463b      	mov	r3, r7
 800c86e:	f7f4 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c872:	b908      	cbnz	r0, 800c878 <_dtoa_r+0x190>
 800c874:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c878:	f1bb 0f16 	cmp.w	fp, #22
 800c87c:	d857      	bhi.n	800c92e <_dtoa_r+0x246>
 800c87e:	4b5b      	ldr	r3, [pc, #364]	; (800c9ec <_dtoa_r+0x304>)
 800c880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	ec51 0b18 	vmov	r0, r1, d8
 800c88c:	f7f4 f926 	bl	8000adc <__aeabi_dcmplt>
 800c890:	2800      	cmp	r0, #0
 800c892:	d04e      	beq.n	800c932 <_dtoa_r+0x24a>
 800c894:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c898:	2300      	movs	r3, #0
 800c89a:	930c      	str	r3, [sp, #48]	; 0x30
 800c89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c89e:	1b5b      	subs	r3, r3, r5
 800c8a0:	1e5a      	subs	r2, r3, #1
 800c8a2:	bf45      	ittet	mi
 800c8a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c8a8:	9305      	strmi	r3, [sp, #20]
 800c8aa:	2300      	movpl	r3, #0
 800c8ac:	2300      	movmi	r3, #0
 800c8ae:	9206      	str	r2, [sp, #24]
 800c8b0:	bf54      	ite	pl
 800c8b2:	9305      	strpl	r3, [sp, #20]
 800c8b4:	9306      	strmi	r3, [sp, #24]
 800c8b6:	f1bb 0f00 	cmp.w	fp, #0
 800c8ba:	db3c      	blt.n	800c936 <_dtoa_r+0x24e>
 800c8bc:	9b06      	ldr	r3, [sp, #24]
 800c8be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c8c2:	445b      	add	r3, fp
 800c8c4:	9306      	str	r3, [sp, #24]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	9308      	str	r3, [sp, #32]
 800c8ca:	9b07      	ldr	r3, [sp, #28]
 800c8cc:	2b09      	cmp	r3, #9
 800c8ce:	d868      	bhi.n	800c9a2 <_dtoa_r+0x2ba>
 800c8d0:	2b05      	cmp	r3, #5
 800c8d2:	bfc4      	itt	gt
 800c8d4:	3b04      	subgt	r3, #4
 800c8d6:	9307      	strgt	r3, [sp, #28]
 800c8d8:	9b07      	ldr	r3, [sp, #28]
 800c8da:	f1a3 0302 	sub.w	r3, r3, #2
 800c8de:	bfcc      	ite	gt
 800c8e0:	2500      	movgt	r5, #0
 800c8e2:	2501      	movle	r5, #1
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	f200 8085 	bhi.w	800c9f4 <_dtoa_r+0x30c>
 800c8ea:	e8df f003 	tbb	[pc, r3]
 800c8ee:	3b2e      	.short	0x3b2e
 800c8f0:	5839      	.short	0x5839
 800c8f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c8f6:	441d      	add	r5, r3
 800c8f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c8fc:	2b20      	cmp	r3, #32
 800c8fe:	bfc1      	itttt	gt
 800c900:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c904:	fa08 f803 	lslgt.w	r8, r8, r3
 800c908:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c90c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c910:	bfd6      	itet	le
 800c912:	f1c3 0320 	rsble	r3, r3, #32
 800c916:	ea48 0003 	orrgt.w	r0, r8, r3
 800c91a:	fa06 f003 	lslle.w	r0, r6, r3
 800c91e:	f7f3 fdf1 	bl	8000504 <__aeabi_ui2d>
 800c922:	2201      	movs	r2, #1
 800c924:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c928:	3d01      	subs	r5, #1
 800c92a:	920e      	str	r2, [sp, #56]	; 0x38
 800c92c:	e76f      	b.n	800c80e <_dtoa_r+0x126>
 800c92e:	2301      	movs	r3, #1
 800c930:	e7b3      	b.n	800c89a <_dtoa_r+0x1b2>
 800c932:	900c      	str	r0, [sp, #48]	; 0x30
 800c934:	e7b2      	b.n	800c89c <_dtoa_r+0x1b4>
 800c936:	9b05      	ldr	r3, [sp, #20]
 800c938:	eba3 030b 	sub.w	r3, r3, fp
 800c93c:	9305      	str	r3, [sp, #20]
 800c93e:	f1cb 0300 	rsb	r3, fp, #0
 800c942:	9308      	str	r3, [sp, #32]
 800c944:	2300      	movs	r3, #0
 800c946:	930b      	str	r3, [sp, #44]	; 0x2c
 800c948:	e7bf      	b.n	800c8ca <_dtoa_r+0x1e2>
 800c94a:	2300      	movs	r3, #0
 800c94c:	9309      	str	r3, [sp, #36]	; 0x24
 800c94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c950:	2b00      	cmp	r3, #0
 800c952:	dc52      	bgt.n	800c9fa <_dtoa_r+0x312>
 800c954:	2301      	movs	r3, #1
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	461a      	mov	r2, r3
 800c95c:	920a      	str	r2, [sp, #40]	; 0x28
 800c95e:	e00b      	b.n	800c978 <_dtoa_r+0x290>
 800c960:	2301      	movs	r3, #1
 800c962:	e7f3      	b.n	800c94c <_dtoa_r+0x264>
 800c964:	2300      	movs	r3, #0
 800c966:	9309      	str	r3, [sp, #36]	; 0x24
 800c968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c96a:	445b      	add	r3, fp
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	3301      	adds	r3, #1
 800c970:	2b01      	cmp	r3, #1
 800c972:	9304      	str	r3, [sp, #16]
 800c974:	bfb8      	it	lt
 800c976:	2301      	movlt	r3, #1
 800c978:	69e0      	ldr	r0, [r4, #28]
 800c97a:	2100      	movs	r1, #0
 800c97c:	2204      	movs	r2, #4
 800c97e:	f102 0614 	add.w	r6, r2, #20
 800c982:	429e      	cmp	r6, r3
 800c984:	d93d      	bls.n	800ca02 <_dtoa_r+0x31a>
 800c986:	6041      	str	r1, [r0, #4]
 800c988:	4620      	mov	r0, r4
 800c98a:	f000 fd9f 	bl	800d4cc <_Balloc>
 800c98e:	9000      	str	r0, [sp, #0]
 800c990:	2800      	cmp	r0, #0
 800c992:	d139      	bne.n	800ca08 <_dtoa_r+0x320>
 800c994:	4b16      	ldr	r3, [pc, #88]	; (800c9f0 <_dtoa_r+0x308>)
 800c996:	4602      	mov	r2, r0
 800c998:	f240 11af 	movw	r1, #431	; 0x1af
 800c99c:	e6bd      	b.n	800c71a <_dtoa_r+0x32>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e7e1      	b.n	800c966 <_dtoa_r+0x27e>
 800c9a2:	2501      	movs	r5, #1
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	9307      	str	r3, [sp, #28]
 800c9a8:	9509      	str	r5, [sp, #36]	; 0x24
 800c9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	9304      	str	r3, [sp, #16]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2312      	movs	r3, #18
 800c9b6:	e7d1      	b.n	800c95c <_dtoa_r+0x274>
 800c9b8:	636f4361 	.word	0x636f4361
 800c9bc:	3fd287a7 	.word	0x3fd287a7
 800c9c0:	8b60c8b3 	.word	0x8b60c8b3
 800c9c4:	3fc68a28 	.word	0x3fc68a28
 800c9c8:	509f79fb 	.word	0x509f79fb
 800c9cc:	3fd34413 	.word	0x3fd34413
 800c9d0:	0800ed4d 	.word	0x0800ed4d
 800c9d4:	0800ed64 	.word	0x0800ed64
 800c9d8:	7ff00000 	.word	0x7ff00000
 800c9dc:	0800ed49 	.word	0x0800ed49
 800c9e0:	0800ed40 	.word	0x0800ed40
 800c9e4:	0800ed1d 	.word	0x0800ed1d
 800c9e8:	3ff80000 	.word	0x3ff80000
 800c9ec:	0800ee50 	.word	0x0800ee50
 800c9f0:	0800edbc 	.word	0x0800edbc
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f8:	e7d7      	b.n	800c9aa <_dtoa_r+0x2c2>
 800c9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	e7ba      	b.n	800c978 <_dtoa_r+0x290>
 800ca02:	3101      	adds	r1, #1
 800ca04:	0052      	lsls	r2, r2, #1
 800ca06:	e7ba      	b.n	800c97e <_dtoa_r+0x296>
 800ca08:	69e3      	ldr	r3, [r4, #28]
 800ca0a:	9a00      	ldr	r2, [sp, #0]
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	2b0e      	cmp	r3, #14
 800ca12:	f200 80a8 	bhi.w	800cb66 <_dtoa_r+0x47e>
 800ca16:	2d00      	cmp	r5, #0
 800ca18:	f000 80a5 	beq.w	800cb66 <_dtoa_r+0x47e>
 800ca1c:	f1bb 0f00 	cmp.w	fp, #0
 800ca20:	dd38      	ble.n	800ca94 <_dtoa_r+0x3ac>
 800ca22:	4bc0      	ldr	r3, [pc, #768]	; (800cd24 <_dtoa_r+0x63c>)
 800ca24:	f00b 020f 	and.w	r2, fp, #15
 800ca28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ca30:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ca34:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ca38:	d019      	beq.n	800ca6e <_dtoa_r+0x386>
 800ca3a:	4bbb      	ldr	r3, [pc, #748]	; (800cd28 <_dtoa_r+0x640>)
 800ca3c:	ec51 0b18 	vmov	r0, r1, d8
 800ca40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca44:	f7f3 ff02 	bl	800084c <__aeabi_ddiv>
 800ca48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca4c:	f008 080f 	and.w	r8, r8, #15
 800ca50:	2503      	movs	r5, #3
 800ca52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cd28 <_dtoa_r+0x640>
 800ca56:	f1b8 0f00 	cmp.w	r8, #0
 800ca5a:	d10a      	bne.n	800ca72 <_dtoa_r+0x38a>
 800ca5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca60:	4632      	mov	r2, r6
 800ca62:	463b      	mov	r3, r7
 800ca64:	f7f3 fef2 	bl	800084c <__aeabi_ddiv>
 800ca68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca6c:	e02b      	b.n	800cac6 <_dtoa_r+0x3de>
 800ca6e:	2502      	movs	r5, #2
 800ca70:	e7ef      	b.n	800ca52 <_dtoa_r+0x36a>
 800ca72:	f018 0f01 	tst.w	r8, #1
 800ca76:	d008      	beq.n	800ca8a <_dtoa_r+0x3a2>
 800ca78:	4630      	mov	r0, r6
 800ca7a:	4639      	mov	r1, r7
 800ca7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ca80:	f7f3 fdba 	bl	80005f8 <__aeabi_dmul>
 800ca84:	3501      	adds	r5, #1
 800ca86:	4606      	mov	r6, r0
 800ca88:	460f      	mov	r7, r1
 800ca8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ca8e:	f109 0908 	add.w	r9, r9, #8
 800ca92:	e7e0      	b.n	800ca56 <_dtoa_r+0x36e>
 800ca94:	f000 809f 	beq.w	800cbd6 <_dtoa_r+0x4ee>
 800ca98:	f1cb 0600 	rsb	r6, fp, #0
 800ca9c:	4ba1      	ldr	r3, [pc, #644]	; (800cd24 <_dtoa_r+0x63c>)
 800ca9e:	4fa2      	ldr	r7, [pc, #648]	; (800cd28 <_dtoa_r+0x640>)
 800caa0:	f006 020f 	and.w	r2, r6, #15
 800caa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	ec51 0b18 	vmov	r0, r1, d8
 800cab0:	f7f3 fda2 	bl	80005f8 <__aeabi_dmul>
 800cab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cab8:	1136      	asrs	r6, r6, #4
 800caba:	2300      	movs	r3, #0
 800cabc:	2502      	movs	r5, #2
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	d17e      	bne.n	800cbc0 <_dtoa_r+0x4d8>
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1d0      	bne.n	800ca68 <_dtoa_r+0x380>
 800cac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cac8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f000 8084 	beq.w	800cbda <_dtoa_r+0x4f2>
 800cad2:	4b96      	ldr	r3, [pc, #600]	; (800cd2c <_dtoa_r+0x644>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	4640      	mov	r0, r8
 800cad8:	4649      	mov	r1, r9
 800cada:	f7f3 ffff 	bl	8000adc <__aeabi_dcmplt>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d07b      	beq.n	800cbda <_dtoa_r+0x4f2>
 800cae2:	9b04      	ldr	r3, [sp, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d078      	beq.n	800cbda <_dtoa_r+0x4f2>
 800cae8:	9b01      	ldr	r3, [sp, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	dd39      	ble.n	800cb62 <_dtoa_r+0x47a>
 800caee:	4b90      	ldr	r3, [pc, #576]	; (800cd30 <_dtoa_r+0x648>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	4640      	mov	r0, r8
 800caf4:	4649      	mov	r1, r9
 800caf6:	f7f3 fd7f 	bl	80005f8 <__aeabi_dmul>
 800cafa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cafe:	9e01      	ldr	r6, [sp, #4]
 800cb00:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cb04:	3501      	adds	r5, #1
 800cb06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f7f3 fd0a 	bl	8000524 <__aeabi_i2d>
 800cb10:	4642      	mov	r2, r8
 800cb12:	464b      	mov	r3, r9
 800cb14:	f7f3 fd70 	bl	80005f8 <__aeabi_dmul>
 800cb18:	4b86      	ldr	r3, [pc, #536]	; (800cd34 <_dtoa_r+0x64c>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f7f3 fbb6 	bl	800028c <__adddf3>
 800cb20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cb24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb28:	9303      	str	r3, [sp, #12]
 800cb2a:	2e00      	cmp	r6, #0
 800cb2c:	d158      	bne.n	800cbe0 <_dtoa_r+0x4f8>
 800cb2e:	4b82      	ldr	r3, [pc, #520]	; (800cd38 <_dtoa_r+0x650>)
 800cb30:	2200      	movs	r2, #0
 800cb32:	4640      	mov	r0, r8
 800cb34:	4649      	mov	r1, r9
 800cb36:	f7f3 fba7 	bl	8000288 <__aeabi_dsub>
 800cb3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb3e:	4680      	mov	r8, r0
 800cb40:	4689      	mov	r9, r1
 800cb42:	f7f3 ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f040 8296 	bne.w	800d078 <_dtoa_r+0x990>
 800cb4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cb50:	4640      	mov	r0, r8
 800cb52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb56:	4649      	mov	r1, r9
 800cb58:	f7f3 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	f040 8289 	bne.w	800d074 <_dtoa_r+0x98c>
 800cb62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cb66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f2c0 814e 	blt.w	800ce0a <_dtoa_r+0x722>
 800cb6e:	f1bb 0f0e 	cmp.w	fp, #14
 800cb72:	f300 814a 	bgt.w	800ce0a <_dtoa_r+0x722>
 800cb76:	4b6b      	ldr	r3, [pc, #428]	; (800cd24 <_dtoa_r+0x63c>)
 800cb78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f280 80dc 	bge.w	800cd40 <_dtoa_r+0x658>
 800cb88:	9b04      	ldr	r3, [sp, #16]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f300 80d8 	bgt.w	800cd40 <_dtoa_r+0x658>
 800cb90:	f040 826f 	bne.w	800d072 <_dtoa_r+0x98a>
 800cb94:	4b68      	ldr	r3, [pc, #416]	; (800cd38 <_dtoa_r+0x650>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	4640      	mov	r0, r8
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	f7f3 fd2c 	bl	80005f8 <__aeabi_dmul>
 800cba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cba4:	f7f3 ffae 	bl	8000b04 <__aeabi_dcmpge>
 800cba8:	9e04      	ldr	r6, [sp, #16]
 800cbaa:	4637      	mov	r7, r6
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f040 8245 	bne.w	800d03c <_dtoa_r+0x954>
 800cbb2:	9d00      	ldr	r5, [sp, #0]
 800cbb4:	2331      	movs	r3, #49	; 0x31
 800cbb6:	f805 3b01 	strb.w	r3, [r5], #1
 800cbba:	f10b 0b01 	add.w	fp, fp, #1
 800cbbe:	e241      	b.n	800d044 <_dtoa_r+0x95c>
 800cbc0:	07f2      	lsls	r2, r6, #31
 800cbc2:	d505      	bpl.n	800cbd0 <_dtoa_r+0x4e8>
 800cbc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc8:	f7f3 fd16 	bl	80005f8 <__aeabi_dmul>
 800cbcc:	3501      	adds	r5, #1
 800cbce:	2301      	movs	r3, #1
 800cbd0:	1076      	asrs	r6, r6, #1
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	e773      	b.n	800cabe <_dtoa_r+0x3d6>
 800cbd6:	2502      	movs	r5, #2
 800cbd8:	e775      	b.n	800cac6 <_dtoa_r+0x3de>
 800cbda:	9e04      	ldr	r6, [sp, #16]
 800cbdc:	465f      	mov	r7, fp
 800cbde:	e792      	b.n	800cb06 <_dtoa_r+0x41e>
 800cbe0:	9900      	ldr	r1, [sp, #0]
 800cbe2:	4b50      	ldr	r3, [pc, #320]	; (800cd24 <_dtoa_r+0x63c>)
 800cbe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbe8:	4431      	add	r1, r6
 800cbea:	9102      	str	r1, [sp, #8]
 800cbec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbee:	eeb0 9a47 	vmov.f32	s18, s14
 800cbf2:	eef0 9a67 	vmov.f32	s19, s15
 800cbf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cbfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbfe:	2900      	cmp	r1, #0
 800cc00:	d044      	beq.n	800cc8c <_dtoa_r+0x5a4>
 800cc02:	494e      	ldr	r1, [pc, #312]	; (800cd3c <_dtoa_r+0x654>)
 800cc04:	2000      	movs	r0, #0
 800cc06:	f7f3 fe21 	bl	800084c <__aeabi_ddiv>
 800cc0a:	ec53 2b19 	vmov	r2, r3, d9
 800cc0e:	f7f3 fb3b 	bl	8000288 <__aeabi_dsub>
 800cc12:	9d00      	ldr	r5, [sp, #0]
 800cc14:	ec41 0b19 	vmov	d9, r0, r1
 800cc18:	4649      	mov	r1, r9
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	f7f3 ff9c 	bl	8000b58 <__aeabi_d2iz>
 800cc20:	4606      	mov	r6, r0
 800cc22:	f7f3 fc7f 	bl	8000524 <__aeabi_i2d>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4640      	mov	r0, r8
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	f7f3 fb2b 	bl	8000288 <__aeabi_dsub>
 800cc32:	3630      	adds	r6, #48	; 0x30
 800cc34:	f805 6b01 	strb.w	r6, [r5], #1
 800cc38:	ec53 2b19 	vmov	r2, r3, d9
 800cc3c:	4680      	mov	r8, r0
 800cc3e:	4689      	mov	r9, r1
 800cc40:	f7f3 ff4c 	bl	8000adc <__aeabi_dcmplt>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d164      	bne.n	800cd12 <_dtoa_r+0x62a>
 800cc48:	4642      	mov	r2, r8
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	4937      	ldr	r1, [pc, #220]	; (800cd2c <_dtoa_r+0x644>)
 800cc4e:	2000      	movs	r0, #0
 800cc50:	f7f3 fb1a 	bl	8000288 <__aeabi_dsub>
 800cc54:	ec53 2b19 	vmov	r2, r3, d9
 800cc58:	f7f3 ff40 	bl	8000adc <__aeabi_dcmplt>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	f040 80b6 	bne.w	800cdce <_dtoa_r+0x6e6>
 800cc62:	9b02      	ldr	r3, [sp, #8]
 800cc64:	429d      	cmp	r5, r3
 800cc66:	f43f af7c 	beq.w	800cb62 <_dtoa_r+0x47a>
 800cc6a:	4b31      	ldr	r3, [pc, #196]	; (800cd30 <_dtoa_r+0x648>)
 800cc6c:	ec51 0b19 	vmov	r0, r1, d9
 800cc70:	2200      	movs	r2, #0
 800cc72:	f7f3 fcc1 	bl	80005f8 <__aeabi_dmul>
 800cc76:	4b2e      	ldr	r3, [pc, #184]	; (800cd30 <_dtoa_r+0x648>)
 800cc78:	ec41 0b19 	vmov	d9, r0, r1
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4640      	mov	r0, r8
 800cc80:	4649      	mov	r1, r9
 800cc82:	f7f3 fcb9 	bl	80005f8 <__aeabi_dmul>
 800cc86:	4680      	mov	r8, r0
 800cc88:	4689      	mov	r9, r1
 800cc8a:	e7c5      	b.n	800cc18 <_dtoa_r+0x530>
 800cc8c:	ec51 0b17 	vmov	r0, r1, d7
 800cc90:	f7f3 fcb2 	bl	80005f8 <__aeabi_dmul>
 800cc94:	9b02      	ldr	r3, [sp, #8]
 800cc96:	9d00      	ldr	r5, [sp, #0]
 800cc98:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc9a:	ec41 0b19 	vmov	d9, r0, r1
 800cc9e:	4649      	mov	r1, r9
 800cca0:	4640      	mov	r0, r8
 800cca2:	f7f3 ff59 	bl	8000b58 <__aeabi_d2iz>
 800cca6:	4606      	mov	r6, r0
 800cca8:	f7f3 fc3c 	bl	8000524 <__aeabi_i2d>
 800ccac:	3630      	adds	r6, #48	; 0x30
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	f7f3 fae7 	bl	8000288 <__aeabi_dsub>
 800ccba:	f805 6b01 	strb.w	r6, [r5], #1
 800ccbe:	9b02      	ldr	r3, [sp, #8]
 800ccc0:	429d      	cmp	r5, r3
 800ccc2:	4680      	mov	r8, r0
 800ccc4:	4689      	mov	r9, r1
 800ccc6:	f04f 0200 	mov.w	r2, #0
 800ccca:	d124      	bne.n	800cd16 <_dtoa_r+0x62e>
 800cccc:	4b1b      	ldr	r3, [pc, #108]	; (800cd3c <_dtoa_r+0x654>)
 800ccce:	ec51 0b19 	vmov	r0, r1, d9
 800ccd2:	f7f3 fadb 	bl	800028c <__adddf3>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4640      	mov	r0, r8
 800ccdc:	4649      	mov	r1, r9
 800ccde:	f7f3 ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d173      	bne.n	800cdce <_dtoa_r+0x6e6>
 800cce6:	ec53 2b19 	vmov	r2, r3, d9
 800ccea:	4914      	ldr	r1, [pc, #80]	; (800cd3c <_dtoa_r+0x654>)
 800ccec:	2000      	movs	r0, #0
 800ccee:	f7f3 facb 	bl	8000288 <__aeabi_dsub>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	f7f3 feef 	bl	8000adc <__aeabi_dcmplt>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f43f af2f 	beq.w	800cb62 <_dtoa_r+0x47a>
 800cd04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd06:	1e6b      	subs	r3, r5, #1
 800cd08:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd0e:	2b30      	cmp	r3, #48	; 0x30
 800cd10:	d0f8      	beq.n	800cd04 <_dtoa_r+0x61c>
 800cd12:	46bb      	mov	fp, r7
 800cd14:	e04a      	b.n	800cdac <_dtoa_r+0x6c4>
 800cd16:	4b06      	ldr	r3, [pc, #24]	; (800cd30 <_dtoa_r+0x648>)
 800cd18:	f7f3 fc6e 	bl	80005f8 <__aeabi_dmul>
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	4689      	mov	r9, r1
 800cd20:	e7bd      	b.n	800cc9e <_dtoa_r+0x5b6>
 800cd22:	bf00      	nop
 800cd24:	0800ee50 	.word	0x0800ee50
 800cd28:	0800ee28 	.word	0x0800ee28
 800cd2c:	3ff00000 	.word	0x3ff00000
 800cd30:	40240000 	.word	0x40240000
 800cd34:	401c0000 	.word	0x401c0000
 800cd38:	40140000 	.word	0x40140000
 800cd3c:	3fe00000 	.word	0x3fe00000
 800cd40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd44:	9d00      	ldr	r5, [sp, #0]
 800cd46:	4642      	mov	r2, r8
 800cd48:	464b      	mov	r3, r9
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	f7f3 fd7d 	bl	800084c <__aeabi_ddiv>
 800cd52:	f7f3 ff01 	bl	8000b58 <__aeabi_d2iz>
 800cd56:	9001      	str	r0, [sp, #4]
 800cd58:	f7f3 fbe4 	bl	8000524 <__aeabi_i2d>
 800cd5c:	4642      	mov	r2, r8
 800cd5e:	464b      	mov	r3, r9
 800cd60:	f7f3 fc4a 	bl	80005f8 <__aeabi_dmul>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4630      	mov	r0, r6
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	f7f3 fa8c 	bl	8000288 <__aeabi_dsub>
 800cd70:	9e01      	ldr	r6, [sp, #4]
 800cd72:	9f04      	ldr	r7, [sp, #16]
 800cd74:	3630      	adds	r6, #48	; 0x30
 800cd76:	f805 6b01 	strb.w	r6, [r5], #1
 800cd7a:	9e00      	ldr	r6, [sp, #0]
 800cd7c:	1bae      	subs	r6, r5, r6
 800cd7e:	42b7      	cmp	r7, r6
 800cd80:	4602      	mov	r2, r0
 800cd82:	460b      	mov	r3, r1
 800cd84:	d134      	bne.n	800cdf0 <_dtoa_r+0x708>
 800cd86:	f7f3 fa81 	bl	800028c <__adddf3>
 800cd8a:	4642      	mov	r2, r8
 800cd8c:	464b      	mov	r3, r9
 800cd8e:	4606      	mov	r6, r0
 800cd90:	460f      	mov	r7, r1
 800cd92:	f7f3 fec1 	bl	8000b18 <__aeabi_dcmpgt>
 800cd96:	b9c8      	cbnz	r0, 800cdcc <_dtoa_r+0x6e4>
 800cd98:	4642      	mov	r2, r8
 800cd9a:	464b      	mov	r3, r9
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	4639      	mov	r1, r7
 800cda0:	f7f3 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 800cda4:	b110      	cbz	r0, 800cdac <_dtoa_r+0x6c4>
 800cda6:	9b01      	ldr	r3, [sp, #4]
 800cda8:	07db      	lsls	r3, r3, #31
 800cdaa:	d40f      	bmi.n	800cdcc <_dtoa_r+0x6e4>
 800cdac:	4651      	mov	r1, sl
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f000 fbcc 	bl	800d54c <_Bfree>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdb8:	702b      	strb	r3, [r5, #0]
 800cdba:	f10b 0301 	add.w	r3, fp, #1
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f43f ace2 	beq.w	800c78c <_dtoa_r+0xa4>
 800cdc8:	601d      	str	r5, [r3, #0]
 800cdca:	e4df      	b.n	800c78c <_dtoa_r+0xa4>
 800cdcc:	465f      	mov	r7, fp
 800cdce:	462b      	mov	r3, r5
 800cdd0:	461d      	mov	r5, r3
 800cdd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdd6:	2a39      	cmp	r2, #57	; 0x39
 800cdd8:	d106      	bne.n	800cde8 <_dtoa_r+0x700>
 800cdda:	9a00      	ldr	r2, [sp, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d1f7      	bne.n	800cdd0 <_dtoa_r+0x6e8>
 800cde0:	9900      	ldr	r1, [sp, #0]
 800cde2:	2230      	movs	r2, #48	; 0x30
 800cde4:	3701      	adds	r7, #1
 800cde6:	700a      	strb	r2, [r1, #0]
 800cde8:	781a      	ldrb	r2, [r3, #0]
 800cdea:	3201      	adds	r2, #1
 800cdec:	701a      	strb	r2, [r3, #0]
 800cdee:	e790      	b.n	800cd12 <_dtoa_r+0x62a>
 800cdf0:	4ba3      	ldr	r3, [pc, #652]	; (800d080 <_dtoa_r+0x998>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	460f      	mov	r7, r1
 800ce00:	f7f3 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d09e      	beq.n	800cd46 <_dtoa_r+0x65e>
 800ce08:	e7d0      	b.n	800cdac <_dtoa_r+0x6c4>
 800ce0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce0c:	2a00      	cmp	r2, #0
 800ce0e:	f000 80ca 	beq.w	800cfa6 <_dtoa_r+0x8be>
 800ce12:	9a07      	ldr	r2, [sp, #28]
 800ce14:	2a01      	cmp	r2, #1
 800ce16:	f300 80ad 	bgt.w	800cf74 <_dtoa_r+0x88c>
 800ce1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce1c:	2a00      	cmp	r2, #0
 800ce1e:	f000 80a5 	beq.w	800cf6c <_dtoa_r+0x884>
 800ce22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce26:	9e08      	ldr	r6, [sp, #32]
 800ce28:	9d05      	ldr	r5, [sp, #20]
 800ce2a:	9a05      	ldr	r2, [sp, #20]
 800ce2c:	441a      	add	r2, r3
 800ce2e:	9205      	str	r2, [sp, #20]
 800ce30:	9a06      	ldr	r2, [sp, #24]
 800ce32:	2101      	movs	r1, #1
 800ce34:	441a      	add	r2, r3
 800ce36:	4620      	mov	r0, r4
 800ce38:	9206      	str	r2, [sp, #24]
 800ce3a:	f000 fc3d 	bl	800d6b8 <__i2b>
 800ce3e:	4607      	mov	r7, r0
 800ce40:	b165      	cbz	r5, 800ce5c <_dtoa_r+0x774>
 800ce42:	9b06      	ldr	r3, [sp, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dd09      	ble.n	800ce5c <_dtoa_r+0x774>
 800ce48:	42ab      	cmp	r3, r5
 800ce4a:	9a05      	ldr	r2, [sp, #20]
 800ce4c:	bfa8      	it	ge
 800ce4e:	462b      	movge	r3, r5
 800ce50:	1ad2      	subs	r2, r2, r3
 800ce52:	9205      	str	r2, [sp, #20]
 800ce54:	9a06      	ldr	r2, [sp, #24]
 800ce56:	1aed      	subs	r5, r5, r3
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	9306      	str	r3, [sp, #24]
 800ce5c:	9b08      	ldr	r3, [sp, #32]
 800ce5e:	b1f3      	cbz	r3, 800ce9e <_dtoa_r+0x7b6>
 800ce60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 80a3 	beq.w	800cfae <_dtoa_r+0x8c6>
 800ce68:	2e00      	cmp	r6, #0
 800ce6a:	dd10      	ble.n	800ce8e <_dtoa_r+0x7a6>
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	4632      	mov	r2, r6
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fce1 	bl	800d838 <__pow5mult>
 800ce76:	4652      	mov	r2, sl
 800ce78:	4601      	mov	r1, r0
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 fc31 	bl	800d6e4 <__multiply>
 800ce82:	4651      	mov	r1, sl
 800ce84:	4680      	mov	r8, r0
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 fb60 	bl	800d54c <_Bfree>
 800ce8c:	46c2      	mov	sl, r8
 800ce8e:	9b08      	ldr	r3, [sp, #32]
 800ce90:	1b9a      	subs	r2, r3, r6
 800ce92:	d004      	beq.n	800ce9e <_dtoa_r+0x7b6>
 800ce94:	4651      	mov	r1, sl
 800ce96:	4620      	mov	r0, r4
 800ce98:	f000 fcce 	bl	800d838 <__pow5mult>
 800ce9c:	4682      	mov	sl, r0
 800ce9e:	2101      	movs	r1, #1
 800cea0:	4620      	mov	r0, r4
 800cea2:	f000 fc09 	bl	800d6b8 <__i2b>
 800cea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	4606      	mov	r6, r0
 800ceac:	f340 8081 	ble.w	800cfb2 <_dtoa_r+0x8ca>
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f000 fcbf 	bl	800d838 <__pow5mult>
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	4606      	mov	r6, r0
 800cec0:	dd7a      	ble.n	800cfb8 <_dtoa_r+0x8d0>
 800cec2:	f04f 0800 	mov.w	r8, #0
 800cec6:	6933      	ldr	r3, [r6, #16]
 800cec8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cecc:	6918      	ldr	r0, [r3, #16]
 800cece:	f000 fba5 	bl	800d61c <__hi0bits>
 800ced2:	f1c0 0020 	rsb	r0, r0, #32
 800ced6:	9b06      	ldr	r3, [sp, #24]
 800ced8:	4418      	add	r0, r3
 800ceda:	f010 001f 	ands.w	r0, r0, #31
 800cede:	f000 8094 	beq.w	800d00a <_dtoa_r+0x922>
 800cee2:	f1c0 0320 	rsb	r3, r0, #32
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	f340 8085 	ble.w	800cff6 <_dtoa_r+0x90e>
 800ceec:	9b05      	ldr	r3, [sp, #20]
 800ceee:	f1c0 001c 	rsb	r0, r0, #28
 800cef2:	4403      	add	r3, r0
 800cef4:	9305      	str	r3, [sp, #20]
 800cef6:	9b06      	ldr	r3, [sp, #24]
 800cef8:	4403      	add	r3, r0
 800cefa:	4405      	add	r5, r0
 800cefc:	9306      	str	r3, [sp, #24]
 800cefe:	9b05      	ldr	r3, [sp, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dd05      	ble.n	800cf10 <_dtoa_r+0x828>
 800cf04:	4651      	mov	r1, sl
 800cf06:	461a      	mov	r2, r3
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f000 fcef 	bl	800d8ec <__lshift>
 800cf0e:	4682      	mov	sl, r0
 800cf10:	9b06      	ldr	r3, [sp, #24]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dd05      	ble.n	800cf22 <_dtoa_r+0x83a>
 800cf16:	4631      	mov	r1, r6
 800cf18:	461a      	mov	r2, r3
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f000 fce6 	bl	800d8ec <__lshift>
 800cf20:	4606      	mov	r6, r0
 800cf22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d072      	beq.n	800d00e <_dtoa_r+0x926>
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4650      	mov	r0, sl
 800cf2c:	f000 fd4a 	bl	800d9c4 <__mcmp>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	da6c      	bge.n	800d00e <_dtoa_r+0x926>
 800cf34:	2300      	movs	r3, #0
 800cf36:	4651      	mov	r1, sl
 800cf38:	220a      	movs	r2, #10
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f000 fb28 	bl	800d590 <__multadd>
 800cf40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf46:	4682      	mov	sl, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 81b0 	beq.w	800d2ae <_dtoa_r+0xbc6>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	4639      	mov	r1, r7
 800cf52:	220a      	movs	r2, #10
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fb1b 	bl	800d590 <__multadd>
 800cf5a:	9b01      	ldr	r3, [sp, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	4607      	mov	r7, r0
 800cf60:	f300 8096 	bgt.w	800d090 <_dtoa_r+0x9a8>
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	dc59      	bgt.n	800d01e <_dtoa_r+0x936>
 800cf6a:	e091      	b.n	800d090 <_dtoa_r+0x9a8>
 800cf6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf72:	e758      	b.n	800ce26 <_dtoa_r+0x73e>
 800cf74:	9b04      	ldr	r3, [sp, #16]
 800cf76:	1e5e      	subs	r6, r3, #1
 800cf78:	9b08      	ldr	r3, [sp, #32]
 800cf7a:	42b3      	cmp	r3, r6
 800cf7c:	bfbf      	itttt	lt
 800cf7e:	9b08      	ldrlt	r3, [sp, #32]
 800cf80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cf82:	9608      	strlt	r6, [sp, #32]
 800cf84:	1af3      	sublt	r3, r6, r3
 800cf86:	bfb4      	ite	lt
 800cf88:	18d2      	addlt	r2, r2, r3
 800cf8a:	1b9e      	subge	r6, r3, r6
 800cf8c:	9b04      	ldr	r3, [sp, #16]
 800cf8e:	bfbc      	itt	lt
 800cf90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cf92:	2600      	movlt	r6, #0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	bfb7      	itett	lt
 800cf98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cf9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cfa0:	1a9d      	sublt	r5, r3, r2
 800cfa2:	2300      	movlt	r3, #0
 800cfa4:	e741      	b.n	800ce2a <_dtoa_r+0x742>
 800cfa6:	9e08      	ldr	r6, [sp, #32]
 800cfa8:	9d05      	ldr	r5, [sp, #20]
 800cfaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cfac:	e748      	b.n	800ce40 <_dtoa_r+0x758>
 800cfae:	9a08      	ldr	r2, [sp, #32]
 800cfb0:	e770      	b.n	800ce94 <_dtoa_r+0x7ac>
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	dc19      	bgt.n	800cfec <_dtoa_r+0x904>
 800cfb8:	9b02      	ldr	r3, [sp, #8]
 800cfba:	b9bb      	cbnz	r3, 800cfec <_dtoa_r+0x904>
 800cfbc:	9b03      	ldr	r3, [sp, #12]
 800cfbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfc2:	b99b      	cbnz	r3, 800cfec <_dtoa_r+0x904>
 800cfc4:	9b03      	ldr	r3, [sp, #12]
 800cfc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfca:	0d1b      	lsrs	r3, r3, #20
 800cfcc:	051b      	lsls	r3, r3, #20
 800cfce:	b183      	cbz	r3, 800cff2 <_dtoa_r+0x90a>
 800cfd0:	9b05      	ldr	r3, [sp, #20]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	9305      	str	r3, [sp, #20]
 800cfd6:	9b06      	ldr	r3, [sp, #24]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	9306      	str	r3, [sp, #24]
 800cfdc:	f04f 0801 	mov.w	r8, #1
 800cfe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f47f af6f 	bne.w	800cec6 <_dtoa_r+0x7de>
 800cfe8:	2001      	movs	r0, #1
 800cfea:	e774      	b.n	800ced6 <_dtoa_r+0x7ee>
 800cfec:	f04f 0800 	mov.w	r8, #0
 800cff0:	e7f6      	b.n	800cfe0 <_dtoa_r+0x8f8>
 800cff2:	4698      	mov	r8, r3
 800cff4:	e7f4      	b.n	800cfe0 <_dtoa_r+0x8f8>
 800cff6:	d082      	beq.n	800cefe <_dtoa_r+0x816>
 800cff8:	9a05      	ldr	r2, [sp, #20]
 800cffa:	331c      	adds	r3, #28
 800cffc:	441a      	add	r2, r3
 800cffe:	9205      	str	r2, [sp, #20]
 800d000:	9a06      	ldr	r2, [sp, #24]
 800d002:	441a      	add	r2, r3
 800d004:	441d      	add	r5, r3
 800d006:	9206      	str	r2, [sp, #24]
 800d008:	e779      	b.n	800cefe <_dtoa_r+0x816>
 800d00a:	4603      	mov	r3, r0
 800d00c:	e7f4      	b.n	800cff8 <_dtoa_r+0x910>
 800d00e:	9b04      	ldr	r3, [sp, #16]
 800d010:	2b00      	cmp	r3, #0
 800d012:	dc37      	bgt.n	800d084 <_dtoa_r+0x99c>
 800d014:	9b07      	ldr	r3, [sp, #28]
 800d016:	2b02      	cmp	r3, #2
 800d018:	dd34      	ble.n	800d084 <_dtoa_r+0x99c>
 800d01a:	9b04      	ldr	r3, [sp, #16]
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	b963      	cbnz	r3, 800d03c <_dtoa_r+0x954>
 800d022:	4631      	mov	r1, r6
 800d024:	2205      	movs	r2, #5
 800d026:	4620      	mov	r0, r4
 800d028:	f000 fab2 	bl	800d590 <__multadd>
 800d02c:	4601      	mov	r1, r0
 800d02e:	4606      	mov	r6, r0
 800d030:	4650      	mov	r0, sl
 800d032:	f000 fcc7 	bl	800d9c4 <__mcmp>
 800d036:	2800      	cmp	r0, #0
 800d038:	f73f adbb 	bgt.w	800cbb2 <_dtoa_r+0x4ca>
 800d03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d03e:	9d00      	ldr	r5, [sp, #0]
 800d040:	ea6f 0b03 	mvn.w	fp, r3
 800d044:	f04f 0800 	mov.w	r8, #0
 800d048:	4631      	mov	r1, r6
 800d04a:	4620      	mov	r0, r4
 800d04c:	f000 fa7e 	bl	800d54c <_Bfree>
 800d050:	2f00      	cmp	r7, #0
 800d052:	f43f aeab 	beq.w	800cdac <_dtoa_r+0x6c4>
 800d056:	f1b8 0f00 	cmp.w	r8, #0
 800d05a:	d005      	beq.n	800d068 <_dtoa_r+0x980>
 800d05c:	45b8      	cmp	r8, r7
 800d05e:	d003      	beq.n	800d068 <_dtoa_r+0x980>
 800d060:	4641      	mov	r1, r8
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fa72 	bl	800d54c <_Bfree>
 800d068:	4639      	mov	r1, r7
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 fa6e 	bl	800d54c <_Bfree>
 800d070:	e69c      	b.n	800cdac <_dtoa_r+0x6c4>
 800d072:	2600      	movs	r6, #0
 800d074:	4637      	mov	r7, r6
 800d076:	e7e1      	b.n	800d03c <_dtoa_r+0x954>
 800d078:	46bb      	mov	fp, r7
 800d07a:	4637      	mov	r7, r6
 800d07c:	e599      	b.n	800cbb2 <_dtoa_r+0x4ca>
 800d07e:	bf00      	nop
 800d080:	40240000 	.word	0x40240000
 800d084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 80c8 	beq.w	800d21c <_dtoa_r+0xb34>
 800d08c:	9b04      	ldr	r3, [sp, #16]
 800d08e:	9301      	str	r3, [sp, #4]
 800d090:	2d00      	cmp	r5, #0
 800d092:	dd05      	ble.n	800d0a0 <_dtoa_r+0x9b8>
 800d094:	4639      	mov	r1, r7
 800d096:	462a      	mov	r2, r5
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 fc27 	bl	800d8ec <__lshift>
 800d09e:	4607      	mov	r7, r0
 800d0a0:	f1b8 0f00 	cmp.w	r8, #0
 800d0a4:	d05b      	beq.n	800d15e <_dtoa_r+0xa76>
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fa0f 	bl	800d4cc <_Balloc>
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	b928      	cbnz	r0, 800d0be <_dtoa_r+0x9d6>
 800d0b2:	4b83      	ldr	r3, [pc, #524]	; (800d2c0 <_dtoa_r+0xbd8>)
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d0ba:	f7ff bb2e 	b.w	800c71a <_dtoa_r+0x32>
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	3202      	adds	r2, #2
 800d0c2:	0092      	lsls	r2, r2, #2
 800d0c4:	f107 010c 	add.w	r1, r7, #12
 800d0c8:	300c      	adds	r0, #12
 800d0ca:	f001 f82f 	bl	800e12c <memcpy>
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f000 fc0a 	bl	800d8ec <__lshift>
 800d0d8:	9b00      	ldr	r3, [sp, #0]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	9308      	str	r3, [sp, #32]
 800d0e6:	9b02      	ldr	r3, [sp, #8]
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	46b8      	mov	r8, r7
 800d0ee:	9306      	str	r3, [sp, #24]
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	9b04      	ldr	r3, [sp, #16]
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	4650      	mov	r0, sl
 800d0fa:	9301      	str	r3, [sp, #4]
 800d0fc:	f7ff fa6c 	bl	800c5d8 <quorem>
 800d100:	4641      	mov	r1, r8
 800d102:	9002      	str	r0, [sp, #8]
 800d104:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d108:	4650      	mov	r0, sl
 800d10a:	f000 fc5b 	bl	800d9c4 <__mcmp>
 800d10e:	463a      	mov	r2, r7
 800d110:	9005      	str	r0, [sp, #20]
 800d112:	4631      	mov	r1, r6
 800d114:	4620      	mov	r0, r4
 800d116:	f000 fc71 	bl	800d9fc <__mdiff>
 800d11a:	68c2      	ldr	r2, [r0, #12]
 800d11c:	4605      	mov	r5, r0
 800d11e:	bb02      	cbnz	r2, 800d162 <_dtoa_r+0xa7a>
 800d120:	4601      	mov	r1, r0
 800d122:	4650      	mov	r0, sl
 800d124:	f000 fc4e 	bl	800d9c4 <__mcmp>
 800d128:	4602      	mov	r2, r0
 800d12a:	4629      	mov	r1, r5
 800d12c:	4620      	mov	r0, r4
 800d12e:	9209      	str	r2, [sp, #36]	; 0x24
 800d130:	f000 fa0c 	bl	800d54c <_Bfree>
 800d134:	9b07      	ldr	r3, [sp, #28]
 800d136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d138:	9d04      	ldr	r5, [sp, #16]
 800d13a:	ea43 0102 	orr.w	r1, r3, r2
 800d13e:	9b06      	ldr	r3, [sp, #24]
 800d140:	4319      	orrs	r1, r3
 800d142:	d110      	bne.n	800d166 <_dtoa_r+0xa7e>
 800d144:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d148:	d029      	beq.n	800d19e <_dtoa_r+0xab6>
 800d14a:	9b05      	ldr	r3, [sp, #20]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	dd02      	ble.n	800d156 <_dtoa_r+0xa6e>
 800d150:	9b02      	ldr	r3, [sp, #8]
 800d152:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d156:	9b01      	ldr	r3, [sp, #4]
 800d158:	f883 9000 	strb.w	r9, [r3]
 800d15c:	e774      	b.n	800d048 <_dtoa_r+0x960>
 800d15e:	4638      	mov	r0, r7
 800d160:	e7ba      	b.n	800d0d8 <_dtoa_r+0x9f0>
 800d162:	2201      	movs	r2, #1
 800d164:	e7e1      	b.n	800d12a <_dtoa_r+0xa42>
 800d166:	9b05      	ldr	r3, [sp, #20]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	db04      	blt.n	800d176 <_dtoa_r+0xa8e>
 800d16c:	9907      	ldr	r1, [sp, #28]
 800d16e:	430b      	orrs	r3, r1
 800d170:	9906      	ldr	r1, [sp, #24]
 800d172:	430b      	orrs	r3, r1
 800d174:	d120      	bne.n	800d1b8 <_dtoa_r+0xad0>
 800d176:	2a00      	cmp	r2, #0
 800d178:	dded      	ble.n	800d156 <_dtoa_r+0xa6e>
 800d17a:	4651      	mov	r1, sl
 800d17c:	2201      	movs	r2, #1
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 fbb4 	bl	800d8ec <__lshift>
 800d184:	4631      	mov	r1, r6
 800d186:	4682      	mov	sl, r0
 800d188:	f000 fc1c 	bl	800d9c4 <__mcmp>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	dc03      	bgt.n	800d198 <_dtoa_r+0xab0>
 800d190:	d1e1      	bne.n	800d156 <_dtoa_r+0xa6e>
 800d192:	f019 0f01 	tst.w	r9, #1
 800d196:	d0de      	beq.n	800d156 <_dtoa_r+0xa6e>
 800d198:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d19c:	d1d8      	bne.n	800d150 <_dtoa_r+0xa68>
 800d19e:	9a01      	ldr	r2, [sp, #4]
 800d1a0:	2339      	movs	r3, #57	; 0x39
 800d1a2:	7013      	strb	r3, [r2, #0]
 800d1a4:	462b      	mov	r3, r5
 800d1a6:	461d      	mov	r5, r3
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d1ae:	2a39      	cmp	r2, #57	; 0x39
 800d1b0:	d06c      	beq.n	800d28c <_dtoa_r+0xba4>
 800d1b2:	3201      	adds	r2, #1
 800d1b4:	701a      	strb	r2, [r3, #0]
 800d1b6:	e747      	b.n	800d048 <_dtoa_r+0x960>
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	dd07      	ble.n	800d1cc <_dtoa_r+0xae4>
 800d1bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d1c0:	d0ed      	beq.n	800d19e <_dtoa_r+0xab6>
 800d1c2:	9a01      	ldr	r2, [sp, #4]
 800d1c4:	f109 0301 	add.w	r3, r9, #1
 800d1c8:	7013      	strb	r3, [r2, #0]
 800d1ca:	e73d      	b.n	800d048 <_dtoa_r+0x960>
 800d1cc:	9b04      	ldr	r3, [sp, #16]
 800d1ce:	9a08      	ldr	r2, [sp, #32]
 800d1d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d043      	beq.n	800d260 <_dtoa_r+0xb78>
 800d1d8:	4651      	mov	r1, sl
 800d1da:	2300      	movs	r3, #0
 800d1dc:	220a      	movs	r2, #10
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 f9d6 	bl	800d590 <__multadd>
 800d1e4:	45b8      	cmp	r8, r7
 800d1e6:	4682      	mov	sl, r0
 800d1e8:	f04f 0300 	mov.w	r3, #0
 800d1ec:	f04f 020a 	mov.w	r2, #10
 800d1f0:	4641      	mov	r1, r8
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	d107      	bne.n	800d206 <_dtoa_r+0xb1e>
 800d1f6:	f000 f9cb 	bl	800d590 <__multadd>
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	9b04      	ldr	r3, [sp, #16]
 800d200:	3301      	adds	r3, #1
 800d202:	9304      	str	r3, [sp, #16]
 800d204:	e775      	b.n	800d0f2 <_dtoa_r+0xa0a>
 800d206:	f000 f9c3 	bl	800d590 <__multadd>
 800d20a:	4639      	mov	r1, r7
 800d20c:	4680      	mov	r8, r0
 800d20e:	2300      	movs	r3, #0
 800d210:	220a      	movs	r2, #10
 800d212:	4620      	mov	r0, r4
 800d214:	f000 f9bc 	bl	800d590 <__multadd>
 800d218:	4607      	mov	r7, r0
 800d21a:	e7f0      	b.n	800d1fe <_dtoa_r+0xb16>
 800d21c:	9b04      	ldr	r3, [sp, #16]
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	9d00      	ldr	r5, [sp, #0]
 800d222:	4631      	mov	r1, r6
 800d224:	4650      	mov	r0, sl
 800d226:	f7ff f9d7 	bl	800c5d8 <quorem>
 800d22a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d22e:	9b00      	ldr	r3, [sp, #0]
 800d230:	f805 9b01 	strb.w	r9, [r5], #1
 800d234:	1aea      	subs	r2, r5, r3
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	4293      	cmp	r3, r2
 800d23a:	dd07      	ble.n	800d24c <_dtoa_r+0xb64>
 800d23c:	4651      	mov	r1, sl
 800d23e:	2300      	movs	r3, #0
 800d240:	220a      	movs	r2, #10
 800d242:	4620      	mov	r0, r4
 800d244:	f000 f9a4 	bl	800d590 <__multadd>
 800d248:	4682      	mov	sl, r0
 800d24a:	e7ea      	b.n	800d222 <_dtoa_r+0xb3a>
 800d24c:	9b01      	ldr	r3, [sp, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	bfc8      	it	gt
 800d252:	461d      	movgt	r5, r3
 800d254:	9b00      	ldr	r3, [sp, #0]
 800d256:	bfd8      	it	le
 800d258:	2501      	movle	r5, #1
 800d25a:	441d      	add	r5, r3
 800d25c:	f04f 0800 	mov.w	r8, #0
 800d260:	4651      	mov	r1, sl
 800d262:	2201      	movs	r2, #1
 800d264:	4620      	mov	r0, r4
 800d266:	f000 fb41 	bl	800d8ec <__lshift>
 800d26a:	4631      	mov	r1, r6
 800d26c:	4682      	mov	sl, r0
 800d26e:	f000 fba9 	bl	800d9c4 <__mcmp>
 800d272:	2800      	cmp	r0, #0
 800d274:	dc96      	bgt.n	800d1a4 <_dtoa_r+0xabc>
 800d276:	d102      	bne.n	800d27e <_dtoa_r+0xb96>
 800d278:	f019 0f01 	tst.w	r9, #1
 800d27c:	d192      	bne.n	800d1a4 <_dtoa_r+0xabc>
 800d27e:	462b      	mov	r3, r5
 800d280:	461d      	mov	r5, r3
 800d282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d286:	2a30      	cmp	r2, #48	; 0x30
 800d288:	d0fa      	beq.n	800d280 <_dtoa_r+0xb98>
 800d28a:	e6dd      	b.n	800d048 <_dtoa_r+0x960>
 800d28c:	9a00      	ldr	r2, [sp, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d189      	bne.n	800d1a6 <_dtoa_r+0xabe>
 800d292:	f10b 0b01 	add.w	fp, fp, #1
 800d296:	2331      	movs	r3, #49	; 0x31
 800d298:	e796      	b.n	800d1c8 <_dtoa_r+0xae0>
 800d29a:	4b0a      	ldr	r3, [pc, #40]	; (800d2c4 <_dtoa_r+0xbdc>)
 800d29c:	f7ff ba99 	b.w	800c7d2 <_dtoa_r+0xea>
 800d2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f47f aa6d 	bne.w	800c782 <_dtoa_r+0x9a>
 800d2a8:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <_dtoa_r+0xbe0>)
 800d2aa:	f7ff ba92 	b.w	800c7d2 <_dtoa_r+0xea>
 800d2ae:	9b01      	ldr	r3, [sp, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	dcb5      	bgt.n	800d220 <_dtoa_r+0xb38>
 800d2b4:	9b07      	ldr	r3, [sp, #28]
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	f73f aeb1 	bgt.w	800d01e <_dtoa_r+0x936>
 800d2bc:	e7b0      	b.n	800d220 <_dtoa_r+0xb38>
 800d2be:	bf00      	nop
 800d2c0:	0800edbc 	.word	0x0800edbc
 800d2c4:	0800ed1c 	.word	0x0800ed1c
 800d2c8:	0800ed40 	.word	0x0800ed40

0800d2cc <_free_r>:
 800d2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2ce:	2900      	cmp	r1, #0
 800d2d0:	d044      	beq.n	800d35c <_free_r+0x90>
 800d2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2d6:	9001      	str	r0, [sp, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f1a1 0404 	sub.w	r4, r1, #4
 800d2de:	bfb8      	it	lt
 800d2e0:	18e4      	addlt	r4, r4, r3
 800d2e2:	f000 f8e7 	bl	800d4b4 <__malloc_lock>
 800d2e6:	4a1e      	ldr	r2, [pc, #120]	; (800d360 <_free_r+0x94>)
 800d2e8:	9801      	ldr	r0, [sp, #4]
 800d2ea:	6813      	ldr	r3, [r2, #0]
 800d2ec:	b933      	cbnz	r3, 800d2fc <_free_r+0x30>
 800d2ee:	6063      	str	r3, [r4, #4]
 800d2f0:	6014      	str	r4, [r2, #0]
 800d2f2:	b003      	add	sp, #12
 800d2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2f8:	f000 b8e2 	b.w	800d4c0 <__malloc_unlock>
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	d908      	bls.n	800d312 <_free_r+0x46>
 800d300:	6825      	ldr	r5, [r4, #0]
 800d302:	1961      	adds	r1, r4, r5
 800d304:	428b      	cmp	r3, r1
 800d306:	bf01      	itttt	eq
 800d308:	6819      	ldreq	r1, [r3, #0]
 800d30a:	685b      	ldreq	r3, [r3, #4]
 800d30c:	1949      	addeq	r1, r1, r5
 800d30e:	6021      	streq	r1, [r4, #0]
 800d310:	e7ed      	b.n	800d2ee <_free_r+0x22>
 800d312:	461a      	mov	r2, r3
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	b10b      	cbz	r3, 800d31c <_free_r+0x50>
 800d318:	42a3      	cmp	r3, r4
 800d31a:	d9fa      	bls.n	800d312 <_free_r+0x46>
 800d31c:	6811      	ldr	r1, [r2, #0]
 800d31e:	1855      	adds	r5, r2, r1
 800d320:	42a5      	cmp	r5, r4
 800d322:	d10b      	bne.n	800d33c <_free_r+0x70>
 800d324:	6824      	ldr	r4, [r4, #0]
 800d326:	4421      	add	r1, r4
 800d328:	1854      	adds	r4, r2, r1
 800d32a:	42a3      	cmp	r3, r4
 800d32c:	6011      	str	r1, [r2, #0]
 800d32e:	d1e0      	bne.n	800d2f2 <_free_r+0x26>
 800d330:	681c      	ldr	r4, [r3, #0]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	6053      	str	r3, [r2, #4]
 800d336:	440c      	add	r4, r1
 800d338:	6014      	str	r4, [r2, #0]
 800d33a:	e7da      	b.n	800d2f2 <_free_r+0x26>
 800d33c:	d902      	bls.n	800d344 <_free_r+0x78>
 800d33e:	230c      	movs	r3, #12
 800d340:	6003      	str	r3, [r0, #0]
 800d342:	e7d6      	b.n	800d2f2 <_free_r+0x26>
 800d344:	6825      	ldr	r5, [r4, #0]
 800d346:	1961      	adds	r1, r4, r5
 800d348:	428b      	cmp	r3, r1
 800d34a:	bf04      	itt	eq
 800d34c:	6819      	ldreq	r1, [r3, #0]
 800d34e:	685b      	ldreq	r3, [r3, #4]
 800d350:	6063      	str	r3, [r4, #4]
 800d352:	bf04      	itt	eq
 800d354:	1949      	addeq	r1, r1, r5
 800d356:	6021      	streq	r1, [r4, #0]
 800d358:	6054      	str	r4, [r2, #4]
 800d35a:	e7ca      	b.n	800d2f2 <_free_r+0x26>
 800d35c:	b003      	add	sp, #12
 800d35e:	bd30      	pop	{r4, r5, pc}
 800d360:	20000ec8 	.word	0x20000ec8

0800d364 <malloc>:
 800d364:	4b02      	ldr	r3, [pc, #8]	; (800d370 <malloc+0xc>)
 800d366:	4601      	mov	r1, r0
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	f000 b823 	b.w	800d3b4 <_malloc_r>
 800d36e:	bf00      	nop
 800d370:	20000068 	.word	0x20000068

0800d374 <sbrk_aligned>:
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	4e0e      	ldr	r6, [pc, #56]	; (800d3b0 <sbrk_aligned+0x3c>)
 800d378:	460c      	mov	r4, r1
 800d37a:	6831      	ldr	r1, [r6, #0]
 800d37c:	4605      	mov	r5, r0
 800d37e:	b911      	cbnz	r1, 800d386 <sbrk_aligned+0x12>
 800d380:	f000 fec4 	bl	800e10c <_sbrk_r>
 800d384:	6030      	str	r0, [r6, #0]
 800d386:	4621      	mov	r1, r4
 800d388:	4628      	mov	r0, r5
 800d38a:	f000 febf 	bl	800e10c <_sbrk_r>
 800d38e:	1c43      	adds	r3, r0, #1
 800d390:	d00a      	beq.n	800d3a8 <sbrk_aligned+0x34>
 800d392:	1cc4      	adds	r4, r0, #3
 800d394:	f024 0403 	bic.w	r4, r4, #3
 800d398:	42a0      	cmp	r0, r4
 800d39a:	d007      	beq.n	800d3ac <sbrk_aligned+0x38>
 800d39c:	1a21      	subs	r1, r4, r0
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f000 feb4 	bl	800e10c <_sbrk_r>
 800d3a4:	3001      	adds	r0, #1
 800d3a6:	d101      	bne.n	800d3ac <sbrk_aligned+0x38>
 800d3a8:	f04f 34ff 	mov.w	r4, #4294967295
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}
 800d3b0:	20000ecc 	.word	0x20000ecc

0800d3b4 <_malloc_r>:
 800d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	1ccd      	adds	r5, r1, #3
 800d3ba:	f025 0503 	bic.w	r5, r5, #3
 800d3be:	3508      	adds	r5, #8
 800d3c0:	2d0c      	cmp	r5, #12
 800d3c2:	bf38      	it	cc
 800d3c4:	250c      	movcc	r5, #12
 800d3c6:	2d00      	cmp	r5, #0
 800d3c8:	4607      	mov	r7, r0
 800d3ca:	db01      	blt.n	800d3d0 <_malloc_r+0x1c>
 800d3cc:	42a9      	cmp	r1, r5
 800d3ce:	d905      	bls.n	800d3dc <_malloc_r+0x28>
 800d3d0:	230c      	movs	r3, #12
 800d3d2:	603b      	str	r3, [r7, #0]
 800d3d4:	2600      	movs	r6, #0
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d4b0 <_malloc_r+0xfc>
 800d3e0:	f000 f868 	bl	800d4b4 <__malloc_lock>
 800d3e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d3e8:	461c      	mov	r4, r3
 800d3ea:	bb5c      	cbnz	r4, 800d444 <_malloc_r+0x90>
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	f7ff ffc0 	bl	800d374 <sbrk_aligned>
 800d3f4:	1c43      	adds	r3, r0, #1
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	d155      	bne.n	800d4a6 <_malloc_r+0xf2>
 800d3fa:	f8d8 4000 	ldr.w	r4, [r8]
 800d3fe:	4626      	mov	r6, r4
 800d400:	2e00      	cmp	r6, #0
 800d402:	d145      	bne.n	800d490 <_malloc_r+0xdc>
 800d404:	2c00      	cmp	r4, #0
 800d406:	d048      	beq.n	800d49a <_malloc_r+0xe6>
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	4631      	mov	r1, r6
 800d40c:	4638      	mov	r0, r7
 800d40e:	eb04 0903 	add.w	r9, r4, r3
 800d412:	f000 fe7b 	bl	800e10c <_sbrk_r>
 800d416:	4581      	cmp	r9, r0
 800d418:	d13f      	bne.n	800d49a <_malloc_r+0xe6>
 800d41a:	6821      	ldr	r1, [r4, #0]
 800d41c:	1a6d      	subs	r5, r5, r1
 800d41e:	4629      	mov	r1, r5
 800d420:	4638      	mov	r0, r7
 800d422:	f7ff ffa7 	bl	800d374 <sbrk_aligned>
 800d426:	3001      	adds	r0, #1
 800d428:	d037      	beq.n	800d49a <_malloc_r+0xe6>
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	442b      	add	r3, r5
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	f8d8 3000 	ldr.w	r3, [r8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d038      	beq.n	800d4aa <_malloc_r+0xf6>
 800d438:	685a      	ldr	r2, [r3, #4]
 800d43a:	42a2      	cmp	r2, r4
 800d43c:	d12b      	bne.n	800d496 <_malloc_r+0xe2>
 800d43e:	2200      	movs	r2, #0
 800d440:	605a      	str	r2, [r3, #4]
 800d442:	e00f      	b.n	800d464 <_malloc_r+0xb0>
 800d444:	6822      	ldr	r2, [r4, #0]
 800d446:	1b52      	subs	r2, r2, r5
 800d448:	d41f      	bmi.n	800d48a <_malloc_r+0xd6>
 800d44a:	2a0b      	cmp	r2, #11
 800d44c:	d917      	bls.n	800d47e <_malloc_r+0xca>
 800d44e:	1961      	adds	r1, r4, r5
 800d450:	42a3      	cmp	r3, r4
 800d452:	6025      	str	r5, [r4, #0]
 800d454:	bf18      	it	ne
 800d456:	6059      	strne	r1, [r3, #4]
 800d458:	6863      	ldr	r3, [r4, #4]
 800d45a:	bf08      	it	eq
 800d45c:	f8c8 1000 	streq.w	r1, [r8]
 800d460:	5162      	str	r2, [r4, r5]
 800d462:	604b      	str	r3, [r1, #4]
 800d464:	4638      	mov	r0, r7
 800d466:	f104 060b 	add.w	r6, r4, #11
 800d46a:	f000 f829 	bl	800d4c0 <__malloc_unlock>
 800d46e:	f026 0607 	bic.w	r6, r6, #7
 800d472:	1d23      	adds	r3, r4, #4
 800d474:	1af2      	subs	r2, r6, r3
 800d476:	d0ae      	beq.n	800d3d6 <_malloc_r+0x22>
 800d478:	1b9b      	subs	r3, r3, r6
 800d47a:	50a3      	str	r3, [r4, r2]
 800d47c:	e7ab      	b.n	800d3d6 <_malloc_r+0x22>
 800d47e:	42a3      	cmp	r3, r4
 800d480:	6862      	ldr	r2, [r4, #4]
 800d482:	d1dd      	bne.n	800d440 <_malloc_r+0x8c>
 800d484:	f8c8 2000 	str.w	r2, [r8]
 800d488:	e7ec      	b.n	800d464 <_malloc_r+0xb0>
 800d48a:	4623      	mov	r3, r4
 800d48c:	6864      	ldr	r4, [r4, #4]
 800d48e:	e7ac      	b.n	800d3ea <_malloc_r+0x36>
 800d490:	4634      	mov	r4, r6
 800d492:	6876      	ldr	r6, [r6, #4]
 800d494:	e7b4      	b.n	800d400 <_malloc_r+0x4c>
 800d496:	4613      	mov	r3, r2
 800d498:	e7cc      	b.n	800d434 <_malloc_r+0x80>
 800d49a:	230c      	movs	r3, #12
 800d49c:	603b      	str	r3, [r7, #0]
 800d49e:	4638      	mov	r0, r7
 800d4a0:	f000 f80e 	bl	800d4c0 <__malloc_unlock>
 800d4a4:	e797      	b.n	800d3d6 <_malloc_r+0x22>
 800d4a6:	6025      	str	r5, [r4, #0]
 800d4a8:	e7dc      	b.n	800d464 <_malloc_r+0xb0>
 800d4aa:	605b      	str	r3, [r3, #4]
 800d4ac:	deff      	udf	#255	; 0xff
 800d4ae:	bf00      	nop
 800d4b0:	20000ec8 	.word	0x20000ec8

0800d4b4 <__malloc_lock>:
 800d4b4:	4801      	ldr	r0, [pc, #4]	; (800d4bc <__malloc_lock+0x8>)
 800d4b6:	f7ff b88d 	b.w	800c5d4 <__retarget_lock_acquire_recursive>
 800d4ba:	bf00      	nop
 800d4bc:	20000ec4 	.word	0x20000ec4

0800d4c0 <__malloc_unlock>:
 800d4c0:	4801      	ldr	r0, [pc, #4]	; (800d4c8 <__malloc_unlock+0x8>)
 800d4c2:	f7ff b888 	b.w	800c5d6 <__retarget_lock_release_recursive>
 800d4c6:	bf00      	nop
 800d4c8:	20000ec4 	.word	0x20000ec4

0800d4cc <_Balloc>:
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	69c6      	ldr	r6, [r0, #28]
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	460d      	mov	r5, r1
 800d4d4:	b976      	cbnz	r6, 800d4f4 <_Balloc+0x28>
 800d4d6:	2010      	movs	r0, #16
 800d4d8:	f7ff ff44 	bl	800d364 <malloc>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	61e0      	str	r0, [r4, #28]
 800d4e0:	b920      	cbnz	r0, 800d4ec <_Balloc+0x20>
 800d4e2:	4b18      	ldr	r3, [pc, #96]	; (800d544 <_Balloc+0x78>)
 800d4e4:	4818      	ldr	r0, [pc, #96]	; (800d548 <_Balloc+0x7c>)
 800d4e6:	216b      	movs	r1, #107	; 0x6b
 800d4e8:	f000 fe2e 	bl	800e148 <__assert_func>
 800d4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4f0:	6006      	str	r6, [r0, #0]
 800d4f2:	60c6      	str	r6, [r0, #12]
 800d4f4:	69e6      	ldr	r6, [r4, #28]
 800d4f6:	68f3      	ldr	r3, [r6, #12]
 800d4f8:	b183      	cbz	r3, 800d51c <_Balloc+0x50>
 800d4fa:	69e3      	ldr	r3, [r4, #28]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d502:	b9b8      	cbnz	r0, 800d534 <_Balloc+0x68>
 800d504:	2101      	movs	r1, #1
 800d506:	fa01 f605 	lsl.w	r6, r1, r5
 800d50a:	1d72      	adds	r2, r6, #5
 800d50c:	0092      	lsls	r2, r2, #2
 800d50e:	4620      	mov	r0, r4
 800d510:	f000 fe38 	bl	800e184 <_calloc_r>
 800d514:	b160      	cbz	r0, 800d530 <_Balloc+0x64>
 800d516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d51a:	e00e      	b.n	800d53a <_Balloc+0x6e>
 800d51c:	2221      	movs	r2, #33	; 0x21
 800d51e:	2104      	movs	r1, #4
 800d520:	4620      	mov	r0, r4
 800d522:	f000 fe2f 	bl	800e184 <_calloc_r>
 800d526:	69e3      	ldr	r3, [r4, #28]
 800d528:	60f0      	str	r0, [r6, #12]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1e4      	bne.n	800d4fa <_Balloc+0x2e>
 800d530:	2000      	movs	r0, #0
 800d532:	bd70      	pop	{r4, r5, r6, pc}
 800d534:	6802      	ldr	r2, [r0, #0]
 800d536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d53a:	2300      	movs	r3, #0
 800d53c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d540:	e7f7      	b.n	800d532 <_Balloc+0x66>
 800d542:	bf00      	nop
 800d544:	0800ed4d 	.word	0x0800ed4d
 800d548:	0800edcd 	.word	0x0800edcd

0800d54c <_Bfree>:
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	69c6      	ldr	r6, [r0, #28]
 800d550:	4605      	mov	r5, r0
 800d552:	460c      	mov	r4, r1
 800d554:	b976      	cbnz	r6, 800d574 <_Bfree+0x28>
 800d556:	2010      	movs	r0, #16
 800d558:	f7ff ff04 	bl	800d364 <malloc>
 800d55c:	4602      	mov	r2, r0
 800d55e:	61e8      	str	r0, [r5, #28]
 800d560:	b920      	cbnz	r0, 800d56c <_Bfree+0x20>
 800d562:	4b09      	ldr	r3, [pc, #36]	; (800d588 <_Bfree+0x3c>)
 800d564:	4809      	ldr	r0, [pc, #36]	; (800d58c <_Bfree+0x40>)
 800d566:	218f      	movs	r1, #143	; 0x8f
 800d568:	f000 fdee 	bl	800e148 <__assert_func>
 800d56c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d570:	6006      	str	r6, [r0, #0]
 800d572:	60c6      	str	r6, [r0, #12]
 800d574:	b13c      	cbz	r4, 800d586 <_Bfree+0x3a>
 800d576:	69eb      	ldr	r3, [r5, #28]
 800d578:	6862      	ldr	r2, [r4, #4]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d580:	6021      	str	r1, [r4, #0]
 800d582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d586:	bd70      	pop	{r4, r5, r6, pc}
 800d588:	0800ed4d 	.word	0x0800ed4d
 800d58c:	0800edcd 	.word	0x0800edcd

0800d590 <__multadd>:
 800d590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d594:	690d      	ldr	r5, [r1, #16]
 800d596:	4607      	mov	r7, r0
 800d598:	460c      	mov	r4, r1
 800d59a:	461e      	mov	r6, r3
 800d59c:	f101 0c14 	add.w	ip, r1, #20
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	f8dc 3000 	ldr.w	r3, [ip]
 800d5a6:	b299      	uxth	r1, r3
 800d5a8:	fb02 6101 	mla	r1, r2, r1, r6
 800d5ac:	0c1e      	lsrs	r6, r3, #16
 800d5ae:	0c0b      	lsrs	r3, r1, #16
 800d5b0:	fb02 3306 	mla	r3, r2, r6, r3
 800d5b4:	b289      	uxth	r1, r1
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d5bc:	4285      	cmp	r5, r0
 800d5be:	f84c 1b04 	str.w	r1, [ip], #4
 800d5c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d5c6:	dcec      	bgt.n	800d5a2 <__multadd+0x12>
 800d5c8:	b30e      	cbz	r6, 800d60e <__multadd+0x7e>
 800d5ca:	68a3      	ldr	r3, [r4, #8]
 800d5cc:	42ab      	cmp	r3, r5
 800d5ce:	dc19      	bgt.n	800d604 <__multadd+0x74>
 800d5d0:	6861      	ldr	r1, [r4, #4]
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	3101      	adds	r1, #1
 800d5d6:	f7ff ff79 	bl	800d4cc <_Balloc>
 800d5da:	4680      	mov	r8, r0
 800d5dc:	b928      	cbnz	r0, 800d5ea <__multadd+0x5a>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	4b0c      	ldr	r3, [pc, #48]	; (800d614 <__multadd+0x84>)
 800d5e2:	480d      	ldr	r0, [pc, #52]	; (800d618 <__multadd+0x88>)
 800d5e4:	21ba      	movs	r1, #186	; 0xba
 800d5e6:	f000 fdaf 	bl	800e148 <__assert_func>
 800d5ea:	6922      	ldr	r2, [r4, #16]
 800d5ec:	3202      	adds	r2, #2
 800d5ee:	f104 010c 	add.w	r1, r4, #12
 800d5f2:	0092      	lsls	r2, r2, #2
 800d5f4:	300c      	adds	r0, #12
 800d5f6:	f000 fd99 	bl	800e12c <memcpy>
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	4638      	mov	r0, r7
 800d5fe:	f7ff ffa5 	bl	800d54c <_Bfree>
 800d602:	4644      	mov	r4, r8
 800d604:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d608:	3501      	adds	r5, #1
 800d60a:	615e      	str	r6, [r3, #20]
 800d60c:	6125      	str	r5, [r4, #16]
 800d60e:	4620      	mov	r0, r4
 800d610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d614:	0800edbc 	.word	0x0800edbc
 800d618:	0800edcd 	.word	0x0800edcd

0800d61c <__hi0bits>:
 800d61c:	0c03      	lsrs	r3, r0, #16
 800d61e:	041b      	lsls	r3, r3, #16
 800d620:	b9d3      	cbnz	r3, 800d658 <__hi0bits+0x3c>
 800d622:	0400      	lsls	r0, r0, #16
 800d624:	2310      	movs	r3, #16
 800d626:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d62a:	bf04      	itt	eq
 800d62c:	0200      	lsleq	r0, r0, #8
 800d62e:	3308      	addeq	r3, #8
 800d630:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d634:	bf04      	itt	eq
 800d636:	0100      	lsleq	r0, r0, #4
 800d638:	3304      	addeq	r3, #4
 800d63a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d63e:	bf04      	itt	eq
 800d640:	0080      	lsleq	r0, r0, #2
 800d642:	3302      	addeq	r3, #2
 800d644:	2800      	cmp	r0, #0
 800d646:	db05      	blt.n	800d654 <__hi0bits+0x38>
 800d648:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d64c:	f103 0301 	add.w	r3, r3, #1
 800d650:	bf08      	it	eq
 800d652:	2320      	moveq	r3, #32
 800d654:	4618      	mov	r0, r3
 800d656:	4770      	bx	lr
 800d658:	2300      	movs	r3, #0
 800d65a:	e7e4      	b.n	800d626 <__hi0bits+0xa>

0800d65c <__lo0bits>:
 800d65c:	6803      	ldr	r3, [r0, #0]
 800d65e:	f013 0207 	ands.w	r2, r3, #7
 800d662:	d00c      	beq.n	800d67e <__lo0bits+0x22>
 800d664:	07d9      	lsls	r1, r3, #31
 800d666:	d422      	bmi.n	800d6ae <__lo0bits+0x52>
 800d668:	079a      	lsls	r2, r3, #30
 800d66a:	bf49      	itett	mi
 800d66c:	085b      	lsrmi	r3, r3, #1
 800d66e:	089b      	lsrpl	r3, r3, #2
 800d670:	6003      	strmi	r3, [r0, #0]
 800d672:	2201      	movmi	r2, #1
 800d674:	bf5c      	itt	pl
 800d676:	6003      	strpl	r3, [r0, #0]
 800d678:	2202      	movpl	r2, #2
 800d67a:	4610      	mov	r0, r2
 800d67c:	4770      	bx	lr
 800d67e:	b299      	uxth	r1, r3
 800d680:	b909      	cbnz	r1, 800d686 <__lo0bits+0x2a>
 800d682:	0c1b      	lsrs	r3, r3, #16
 800d684:	2210      	movs	r2, #16
 800d686:	b2d9      	uxtb	r1, r3
 800d688:	b909      	cbnz	r1, 800d68e <__lo0bits+0x32>
 800d68a:	3208      	adds	r2, #8
 800d68c:	0a1b      	lsrs	r3, r3, #8
 800d68e:	0719      	lsls	r1, r3, #28
 800d690:	bf04      	itt	eq
 800d692:	091b      	lsreq	r3, r3, #4
 800d694:	3204      	addeq	r2, #4
 800d696:	0799      	lsls	r1, r3, #30
 800d698:	bf04      	itt	eq
 800d69a:	089b      	lsreq	r3, r3, #2
 800d69c:	3202      	addeq	r2, #2
 800d69e:	07d9      	lsls	r1, r3, #31
 800d6a0:	d403      	bmi.n	800d6aa <__lo0bits+0x4e>
 800d6a2:	085b      	lsrs	r3, r3, #1
 800d6a4:	f102 0201 	add.w	r2, r2, #1
 800d6a8:	d003      	beq.n	800d6b2 <__lo0bits+0x56>
 800d6aa:	6003      	str	r3, [r0, #0]
 800d6ac:	e7e5      	b.n	800d67a <__lo0bits+0x1e>
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	e7e3      	b.n	800d67a <__lo0bits+0x1e>
 800d6b2:	2220      	movs	r2, #32
 800d6b4:	e7e1      	b.n	800d67a <__lo0bits+0x1e>
	...

0800d6b8 <__i2b>:
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	2101      	movs	r1, #1
 800d6be:	f7ff ff05 	bl	800d4cc <_Balloc>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	b928      	cbnz	r0, 800d6d2 <__i2b+0x1a>
 800d6c6:	4b05      	ldr	r3, [pc, #20]	; (800d6dc <__i2b+0x24>)
 800d6c8:	4805      	ldr	r0, [pc, #20]	; (800d6e0 <__i2b+0x28>)
 800d6ca:	f240 1145 	movw	r1, #325	; 0x145
 800d6ce:	f000 fd3b 	bl	800e148 <__assert_func>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	6144      	str	r4, [r0, #20]
 800d6d6:	6103      	str	r3, [r0, #16]
 800d6d8:	bd10      	pop	{r4, pc}
 800d6da:	bf00      	nop
 800d6dc:	0800edbc 	.word	0x0800edbc
 800d6e0:	0800edcd 	.word	0x0800edcd

0800d6e4 <__multiply>:
 800d6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e8:	4691      	mov	r9, r2
 800d6ea:	690a      	ldr	r2, [r1, #16]
 800d6ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	bfb8      	it	lt
 800d6f4:	460b      	movlt	r3, r1
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	bfbc      	itt	lt
 800d6fa:	464c      	movlt	r4, r9
 800d6fc:	4699      	movlt	r9, r3
 800d6fe:	6927      	ldr	r7, [r4, #16]
 800d700:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d704:	68a3      	ldr	r3, [r4, #8]
 800d706:	6861      	ldr	r1, [r4, #4]
 800d708:	eb07 060a 	add.w	r6, r7, sl
 800d70c:	42b3      	cmp	r3, r6
 800d70e:	b085      	sub	sp, #20
 800d710:	bfb8      	it	lt
 800d712:	3101      	addlt	r1, #1
 800d714:	f7ff feda 	bl	800d4cc <_Balloc>
 800d718:	b930      	cbnz	r0, 800d728 <__multiply+0x44>
 800d71a:	4602      	mov	r2, r0
 800d71c:	4b44      	ldr	r3, [pc, #272]	; (800d830 <__multiply+0x14c>)
 800d71e:	4845      	ldr	r0, [pc, #276]	; (800d834 <__multiply+0x150>)
 800d720:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d724:	f000 fd10 	bl	800e148 <__assert_func>
 800d728:	f100 0514 	add.w	r5, r0, #20
 800d72c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d730:	462b      	mov	r3, r5
 800d732:	2200      	movs	r2, #0
 800d734:	4543      	cmp	r3, r8
 800d736:	d321      	bcc.n	800d77c <__multiply+0x98>
 800d738:	f104 0314 	add.w	r3, r4, #20
 800d73c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d740:	f109 0314 	add.w	r3, r9, #20
 800d744:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d748:	9202      	str	r2, [sp, #8]
 800d74a:	1b3a      	subs	r2, r7, r4
 800d74c:	3a15      	subs	r2, #21
 800d74e:	f022 0203 	bic.w	r2, r2, #3
 800d752:	3204      	adds	r2, #4
 800d754:	f104 0115 	add.w	r1, r4, #21
 800d758:	428f      	cmp	r7, r1
 800d75a:	bf38      	it	cc
 800d75c:	2204      	movcc	r2, #4
 800d75e:	9201      	str	r2, [sp, #4]
 800d760:	9a02      	ldr	r2, [sp, #8]
 800d762:	9303      	str	r3, [sp, #12]
 800d764:	429a      	cmp	r2, r3
 800d766:	d80c      	bhi.n	800d782 <__multiply+0x9e>
 800d768:	2e00      	cmp	r6, #0
 800d76a:	dd03      	ble.n	800d774 <__multiply+0x90>
 800d76c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d770:	2b00      	cmp	r3, #0
 800d772:	d05b      	beq.n	800d82c <__multiply+0x148>
 800d774:	6106      	str	r6, [r0, #16]
 800d776:	b005      	add	sp, #20
 800d778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77c:	f843 2b04 	str.w	r2, [r3], #4
 800d780:	e7d8      	b.n	800d734 <__multiply+0x50>
 800d782:	f8b3 a000 	ldrh.w	sl, [r3]
 800d786:	f1ba 0f00 	cmp.w	sl, #0
 800d78a:	d024      	beq.n	800d7d6 <__multiply+0xf2>
 800d78c:	f104 0e14 	add.w	lr, r4, #20
 800d790:	46a9      	mov	r9, r5
 800d792:	f04f 0c00 	mov.w	ip, #0
 800d796:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d79a:	f8d9 1000 	ldr.w	r1, [r9]
 800d79e:	fa1f fb82 	uxth.w	fp, r2
 800d7a2:	b289      	uxth	r1, r1
 800d7a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d7a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d7ac:	f8d9 2000 	ldr.w	r2, [r9]
 800d7b0:	4461      	add	r1, ip
 800d7b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d7ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7be:	b289      	uxth	r1, r1
 800d7c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d7c4:	4577      	cmp	r7, lr
 800d7c6:	f849 1b04 	str.w	r1, [r9], #4
 800d7ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7ce:	d8e2      	bhi.n	800d796 <__multiply+0xb2>
 800d7d0:	9a01      	ldr	r2, [sp, #4]
 800d7d2:	f845 c002 	str.w	ip, [r5, r2]
 800d7d6:	9a03      	ldr	r2, [sp, #12]
 800d7d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d7dc:	3304      	adds	r3, #4
 800d7de:	f1b9 0f00 	cmp.w	r9, #0
 800d7e2:	d021      	beq.n	800d828 <__multiply+0x144>
 800d7e4:	6829      	ldr	r1, [r5, #0]
 800d7e6:	f104 0c14 	add.w	ip, r4, #20
 800d7ea:	46ae      	mov	lr, r5
 800d7ec:	f04f 0a00 	mov.w	sl, #0
 800d7f0:	f8bc b000 	ldrh.w	fp, [ip]
 800d7f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d7f8:	fb09 220b 	mla	r2, r9, fp, r2
 800d7fc:	4452      	add	r2, sl
 800d7fe:	b289      	uxth	r1, r1
 800d800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d804:	f84e 1b04 	str.w	r1, [lr], #4
 800d808:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d80c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d810:	f8be 1000 	ldrh.w	r1, [lr]
 800d814:	fb09 110a 	mla	r1, r9, sl, r1
 800d818:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d81c:	4567      	cmp	r7, ip
 800d81e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d822:	d8e5      	bhi.n	800d7f0 <__multiply+0x10c>
 800d824:	9a01      	ldr	r2, [sp, #4]
 800d826:	50a9      	str	r1, [r5, r2]
 800d828:	3504      	adds	r5, #4
 800d82a:	e799      	b.n	800d760 <__multiply+0x7c>
 800d82c:	3e01      	subs	r6, #1
 800d82e:	e79b      	b.n	800d768 <__multiply+0x84>
 800d830:	0800edbc 	.word	0x0800edbc
 800d834:	0800edcd 	.word	0x0800edcd

0800d838 <__pow5mult>:
 800d838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d83c:	4615      	mov	r5, r2
 800d83e:	f012 0203 	ands.w	r2, r2, #3
 800d842:	4606      	mov	r6, r0
 800d844:	460f      	mov	r7, r1
 800d846:	d007      	beq.n	800d858 <__pow5mult+0x20>
 800d848:	4c25      	ldr	r4, [pc, #148]	; (800d8e0 <__pow5mult+0xa8>)
 800d84a:	3a01      	subs	r2, #1
 800d84c:	2300      	movs	r3, #0
 800d84e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d852:	f7ff fe9d 	bl	800d590 <__multadd>
 800d856:	4607      	mov	r7, r0
 800d858:	10ad      	asrs	r5, r5, #2
 800d85a:	d03d      	beq.n	800d8d8 <__pow5mult+0xa0>
 800d85c:	69f4      	ldr	r4, [r6, #28]
 800d85e:	b97c      	cbnz	r4, 800d880 <__pow5mult+0x48>
 800d860:	2010      	movs	r0, #16
 800d862:	f7ff fd7f 	bl	800d364 <malloc>
 800d866:	4602      	mov	r2, r0
 800d868:	61f0      	str	r0, [r6, #28]
 800d86a:	b928      	cbnz	r0, 800d878 <__pow5mult+0x40>
 800d86c:	4b1d      	ldr	r3, [pc, #116]	; (800d8e4 <__pow5mult+0xac>)
 800d86e:	481e      	ldr	r0, [pc, #120]	; (800d8e8 <__pow5mult+0xb0>)
 800d870:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d874:	f000 fc68 	bl	800e148 <__assert_func>
 800d878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d87c:	6004      	str	r4, [r0, #0]
 800d87e:	60c4      	str	r4, [r0, #12]
 800d880:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d888:	b94c      	cbnz	r4, 800d89e <__pow5mult+0x66>
 800d88a:	f240 2171 	movw	r1, #625	; 0x271
 800d88e:	4630      	mov	r0, r6
 800d890:	f7ff ff12 	bl	800d6b8 <__i2b>
 800d894:	2300      	movs	r3, #0
 800d896:	f8c8 0008 	str.w	r0, [r8, #8]
 800d89a:	4604      	mov	r4, r0
 800d89c:	6003      	str	r3, [r0, #0]
 800d89e:	f04f 0900 	mov.w	r9, #0
 800d8a2:	07eb      	lsls	r3, r5, #31
 800d8a4:	d50a      	bpl.n	800d8bc <__pow5mult+0x84>
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7ff ff1a 	bl	800d6e4 <__multiply>
 800d8b0:	4639      	mov	r1, r7
 800d8b2:	4680      	mov	r8, r0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	f7ff fe49 	bl	800d54c <_Bfree>
 800d8ba:	4647      	mov	r7, r8
 800d8bc:	106d      	asrs	r5, r5, #1
 800d8be:	d00b      	beq.n	800d8d8 <__pow5mult+0xa0>
 800d8c0:	6820      	ldr	r0, [r4, #0]
 800d8c2:	b938      	cbnz	r0, 800d8d4 <__pow5mult+0x9c>
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f7ff ff0b 	bl	800d6e4 <__multiply>
 800d8ce:	6020      	str	r0, [r4, #0]
 800d8d0:	f8c0 9000 	str.w	r9, [r0]
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	e7e4      	b.n	800d8a2 <__pow5mult+0x6a>
 800d8d8:	4638      	mov	r0, r7
 800d8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8de:	bf00      	nop
 800d8e0:	0800ef18 	.word	0x0800ef18
 800d8e4:	0800ed4d 	.word	0x0800ed4d
 800d8e8:	0800edcd 	.word	0x0800edcd

0800d8ec <__lshift>:
 800d8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f0:	460c      	mov	r4, r1
 800d8f2:	6849      	ldr	r1, [r1, #4]
 800d8f4:	6923      	ldr	r3, [r4, #16]
 800d8f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8fa:	68a3      	ldr	r3, [r4, #8]
 800d8fc:	4607      	mov	r7, r0
 800d8fe:	4691      	mov	r9, r2
 800d900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d904:	f108 0601 	add.w	r6, r8, #1
 800d908:	42b3      	cmp	r3, r6
 800d90a:	db0b      	blt.n	800d924 <__lshift+0x38>
 800d90c:	4638      	mov	r0, r7
 800d90e:	f7ff fddd 	bl	800d4cc <_Balloc>
 800d912:	4605      	mov	r5, r0
 800d914:	b948      	cbnz	r0, 800d92a <__lshift+0x3e>
 800d916:	4602      	mov	r2, r0
 800d918:	4b28      	ldr	r3, [pc, #160]	; (800d9bc <__lshift+0xd0>)
 800d91a:	4829      	ldr	r0, [pc, #164]	; (800d9c0 <__lshift+0xd4>)
 800d91c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d920:	f000 fc12 	bl	800e148 <__assert_func>
 800d924:	3101      	adds	r1, #1
 800d926:	005b      	lsls	r3, r3, #1
 800d928:	e7ee      	b.n	800d908 <__lshift+0x1c>
 800d92a:	2300      	movs	r3, #0
 800d92c:	f100 0114 	add.w	r1, r0, #20
 800d930:	f100 0210 	add.w	r2, r0, #16
 800d934:	4618      	mov	r0, r3
 800d936:	4553      	cmp	r3, sl
 800d938:	db33      	blt.n	800d9a2 <__lshift+0xb6>
 800d93a:	6920      	ldr	r0, [r4, #16]
 800d93c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d940:	f104 0314 	add.w	r3, r4, #20
 800d944:	f019 091f 	ands.w	r9, r9, #31
 800d948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d94c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d950:	d02b      	beq.n	800d9aa <__lshift+0xbe>
 800d952:	f1c9 0e20 	rsb	lr, r9, #32
 800d956:	468a      	mov	sl, r1
 800d958:	2200      	movs	r2, #0
 800d95a:	6818      	ldr	r0, [r3, #0]
 800d95c:	fa00 f009 	lsl.w	r0, r0, r9
 800d960:	4310      	orrs	r0, r2
 800d962:	f84a 0b04 	str.w	r0, [sl], #4
 800d966:	f853 2b04 	ldr.w	r2, [r3], #4
 800d96a:	459c      	cmp	ip, r3
 800d96c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d970:	d8f3      	bhi.n	800d95a <__lshift+0x6e>
 800d972:	ebac 0304 	sub.w	r3, ip, r4
 800d976:	3b15      	subs	r3, #21
 800d978:	f023 0303 	bic.w	r3, r3, #3
 800d97c:	3304      	adds	r3, #4
 800d97e:	f104 0015 	add.w	r0, r4, #21
 800d982:	4584      	cmp	ip, r0
 800d984:	bf38      	it	cc
 800d986:	2304      	movcc	r3, #4
 800d988:	50ca      	str	r2, [r1, r3]
 800d98a:	b10a      	cbz	r2, 800d990 <__lshift+0xa4>
 800d98c:	f108 0602 	add.w	r6, r8, #2
 800d990:	3e01      	subs	r6, #1
 800d992:	4638      	mov	r0, r7
 800d994:	612e      	str	r6, [r5, #16]
 800d996:	4621      	mov	r1, r4
 800d998:	f7ff fdd8 	bl	800d54c <_Bfree>
 800d99c:	4628      	mov	r0, r5
 800d99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	e7c5      	b.n	800d936 <__lshift+0x4a>
 800d9aa:	3904      	subs	r1, #4
 800d9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9b4:	459c      	cmp	ip, r3
 800d9b6:	d8f9      	bhi.n	800d9ac <__lshift+0xc0>
 800d9b8:	e7ea      	b.n	800d990 <__lshift+0xa4>
 800d9ba:	bf00      	nop
 800d9bc:	0800edbc 	.word	0x0800edbc
 800d9c0:	0800edcd 	.word	0x0800edcd

0800d9c4 <__mcmp>:
 800d9c4:	b530      	push	{r4, r5, lr}
 800d9c6:	6902      	ldr	r2, [r0, #16]
 800d9c8:	690c      	ldr	r4, [r1, #16]
 800d9ca:	1b12      	subs	r2, r2, r4
 800d9cc:	d10e      	bne.n	800d9ec <__mcmp+0x28>
 800d9ce:	f100 0314 	add.w	r3, r0, #20
 800d9d2:	3114      	adds	r1, #20
 800d9d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d9d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d9dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d9e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d9e4:	42a5      	cmp	r5, r4
 800d9e6:	d003      	beq.n	800d9f0 <__mcmp+0x2c>
 800d9e8:	d305      	bcc.n	800d9f6 <__mcmp+0x32>
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	bd30      	pop	{r4, r5, pc}
 800d9f0:	4283      	cmp	r3, r0
 800d9f2:	d3f3      	bcc.n	800d9dc <__mcmp+0x18>
 800d9f4:	e7fa      	b.n	800d9ec <__mcmp+0x28>
 800d9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9fa:	e7f7      	b.n	800d9ec <__mcmp+0x28>

0800d9fc <__mdiff>:
 800d9fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	460c      	mov	r4, r1
 800da02:	4606      	mov	r6, r0
 800da04:	4611      	mov	r1, r2
 800da06:	4620      	mov	r0, r4
 800da08:	4690      	mov	r8, r2
 800da0a:	f7ff ffdb 	bl	800d9c4 <__mcmp>
 800da0e:	1e05      	subs	r5, r0, #0
 800da10:	d110      	bne.n	800da34 <__mdiff+0x38>
 800da12:	4629      	mov	r1, r5
 800da14:	4630      	mov	r0, r6
 800da16:	f7ff fd59 	bl	800d4cc <_Balloc>
 800da1a:	b930      	cbnz	r0, 800da2a <__mdiff+0x2e>
 800da1c:	4b3a      	ldr	r3, [pc, #232]	; (800db08 <__mdiff+0x10c>)
 800da1e:	4602      	mov	r2, r0
 800da20:	f240 2137 	movw	r1, #567	; 0x237
 800da24:	4839      	ldr	r0, [pc, #228]	; (800db0c <__mdiff+0x110>)
 800da26:	f000 fb8f 	bl	800e148 <__assert_func>
 800da2a:	2301      	movs	r3, #1
 800da2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da34:	bfa4      	itt	ge
 800da36:	4643      	movge	r3, r8
 800da38:	46a0      	movge	r8, r4
 800da3a:	4630      	mov	r0, r6
 800da3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da40:	bfa6      	itte	ge
 800da42:	461c      	movge	r4, r3
 800da44:	2500      	movge	r5, #0
 800da46:	2501      	movlt	r5, #1
 800da48:	f7ff fd40 	bl	800d4cc <_Balloc>
 800da4c:	b920      	cbnz	r0, 800da58 <__mdiff+0x5c>
 800da4e:	4b2e      	ldr	r3, [pc, #184]	; (800db08 <__mdiff+0x10c>)
 800da50:	4602      	mov	r2, r0
 800da52:	f240 2145 	movw	r1, #581	; 0x245
 800da56:	e7e5      	b.n	800da24 <__mdiff+0x28>
 800da58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da5c:	6926      	ldr	r6, [r4, #16]
 800da5e:	60c5      	str	r5, [r0, #12]
 800da60:	f104 0914 	add.w	r9, r4, #20
 800da64:	f108 0514 	add.w	r5, r8, #20
 800da68:	f100 0e14 	add.w	lr, r0, #20
 800da6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800da70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da74:	f108 0210 	add.w	r2, r8, #16
 800da78:	46f2      	mov	sl, lr
 800da7a:	2100      	movs	r1, #0
 800da7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800da80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da84:	fa11 f88b 	uxtah	r8, r1, fp
 800da88:	b299      	uxth	r1, r3
 800da8a:	0c1b      	lsrs	r3, r3, #16
 800da8c:	eba8 0801 	sub.w	r8, r8, r1
 800da90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da98:	fa1f f888 	uxth.w	r8, r8
 800da9c:	1419      	asrs	r1, r3, #16
 800da9e:	454e      	cmp	r6, r9
 800daa0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800daa4:	f84a 3b04 	str.w	r3, [sl], #4
 800daa8:	d8e8      	bhi.n	800da7c <__mdiff+0x80>
 800daaa:	1b33      	subs	r3, r6, r4
 800daac:	3b15      	subs	r3, #21
 800daae:	f023 0303 	bic.w	r3, r3, #3
 800dab2:	3304      	adds	r3, #4
 800dab4:	3415      	adds	r4, #21
 800dab6:	42a6      	cmp	r6, r4
 800dab8:	bf38      	it	cc
 800daba:	2304      	movcc	r3, #4
 800dabc:	441d      	add	r5, r3
 800dabe:	4473      	add	r3, lr
 800dac0:	469e      	mov	lr, r3
 800dac2:	462e      	mov	r6, r5
 800dac4:	4566      	cmp	r6, ip
 800dac6:	d30e      	bcc.n	800dae6 <__mdiff+0xea>
 800dac8:	f10c 0203 	add.w	r2, ip, #3
 800dacc:	1b52      	subs	r2, r2, r5
 800dace:	f022 0203 	bic.w	r2, r2, #3
 800dad2:	3d03      	subs	r5, #3
 800dad4:	45ac      	cmp	ip, r5
 800dad6:	bf38      	it	cc
 800dad8:	2200      	movcc	r2, #0
 800dada:	4413      	add	r3, r2
 800dadc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dae0:	b17a      	cbz	r2, 800db02 <__mdiff+0x106>
 800dae2:	6107      	str	r7, [r0, #16]
 800dae4:	e7a4      	b.n	800da30 <__mdiff+0x34>
 800dae6:	f856 8b04 	ldr.w	r8, [r6], #4
 800daea:	fa11 f288 	uxtah	r2, r1, r8
 800daee:	1414      	asrs	r4, r2, #16
 800daf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800daf4:	b292      	uxth	r2, r2
 800daf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dafa:	f84e 2b04 	str.w	r2, [lr], #4
 800dafe:	1421      	asrs	r1, r4, #16
 800db00:	e7e0      	b.n	800dac4 <__mdiff+0xc8>
 800db02:	3f01      	subs	r7, #1
 800db04:	e7ea      	b.n	800dadc <__mdiff+0xe0>
 800db06:	bf00      	nop
 800db08:	0800edbc 	.word	0x0800edbc
 800db0c:	0800edcd 	.word	0x0800edcd

0800db10 <__d2b>:
 800db10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db14:	460f      	mov	r7, r1
 800db16:	2101      	movs	r1, #1
 800db18:	ec59 8b10 	vmov	r8, r9, d0
 800db1c:	4616      	mov	r6, r2
 800db1e:	f7ff fcd5 	bl	800d4cc <_Balloc>
 800db22:	4604      	mov	r4, r0
 800db24:	b930      	cbnz	r0, 800db34 <__d2b+0x24>
 800db26:	4602      	mov	r2, r0
 800db28:	4b24      	ldr	r3, [pc, #144]	; (800dbbc <__d2b+0xac>)
 800db2a:	4825      	ldr	r0, [pc, #148]	; (800dbc0 <__d2b+0xb0>)
 800db2c:	f240 310f 	movw	r1, #783	; 0x30f
 800db30:	f000 fb0a 	bl	800e148 <__assert_func>
 800db34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db3c:	bb2d      	cbnz	r5, 800db8a <__d2b+0x7a>
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	f1b8 0300 	subs.w	r3, r8, #0
 800db44:	d026      	beq.n	800db94 <__d2b+0x84>
 800db46:	4668      	mov	r0, sp
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	f7ff fd87 	bl	800d65c <__lo0bits>
 800db4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db52:	b1e8      	cbz	r0, 800db90 <__d2b+0x80>
 800db54:	f1c0 0320 	rsb	r3, r0, #32
 800db58:	fa02 f303 	lsl.w	r3, r2, r3
 800db5c:	430b      	orrs	r3, r1
 800db5e:	40c2      	lsrs	r2, r0
 800db60:	6163      	str	r3, [r4, #20]
 800db62:	9201      	str	r2, [sp, #4]
 800db64:	9b01      	ldr	r3, [sp, #4]
 800db66:	61a3      	str	r3, [r4, #24]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	bf14      	ite	ne
 800db6c:	2202      	movne	r2, #2
 800db6e:	2201      	moveq	r2, #1
 800db70:	6122      	str	r2, [r4, #16]
 800db72:	b1bd      	cbz	r5, 800dba4 <__d2b+0x94>
 800db74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db78:	4405      	add	r5, r0
 800db7a:	603d      	str	r5, [r7, #0]
 800db7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db80:	6030      	str	r0, [r6, #0]
 800db82:	4620      	mov	r0, r4
 800db84:	b003      	add	sp, #12
 800db86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db8e:	e7d6      	b.n	800db3e <__d2b+0x2e>
 800db90:	6161      	str	r1, [r4, #20]
 800db92:	e7e7      	b.n	800db64 <__d2b+0x54>
 800db94:	a801      	add	r0, sp, #4
 800db96:	f7ff fd61 	bl	800d65c <__lo0bits>
 800db9a:	9b01      	ldr	r3, [sp, #4]
 800db9c:	6163      	str	r3, [r4, #20]
 800db9e:	3020      	adds	r0, #32
 800dba0:	2201      	movs	r2, #1
 800dba2:	e7e5      	b.n	800db70 <__d2b+0x60>
 800dba4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbac:	6038      	str	r0, [r7, #0]
 800dbae:	6918      	ldr	r0, [r3, #16]
 800dbb0:	f7ff fd34 	bl	800d61c <__hi0bits>
 800dbb4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbb8:	e7e2      	b.n	800db80 <__d2b+0x70>
 800dbba:	bf00      	nop
 800dbbc:	0800edbc 	.word	0x0800edbc
 800dbc0:	0800edcd 	.word	0x0800edcd

0800dbc4 <__ssputs_r>:
 800dbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc8:	688e      	ldr	r6, [r1, #8]
 800dbca:	461f      	mov	r7, r3
 800dbcc:	42be      	cmp	r6, r7
 800dbce:	680b      	ldr	r3, [r1, #0]
 800dbd0:	4682      	mov	sl, r0
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	4690      	mov	r8, r2
 800dbd6:	d82c      	bhi.n	800dc32 <__ssputs_r+0x6e>
 800dbd8:	898a      	ldrh	r2, [r1, #12]
 800dbda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbde:	d026      	beq.n	800dc2e <__ssputs_r+0x6a>
 800dbe0:	6965      	ldr	r5, [r4, #20]
 800dbe2:	6909      	ldr	r1, [r1, #16]
 800dbe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbe8:	eba3 0901 	sub.w	r9, r3, r1
 800dbec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbf0:	1c7b      	adds	r3, r7, #1
 800dbf2:	444b      	add	r3, r9
 800dbf4:	106d      	asrs	r5, r5, #1
 800dbf6:	429d      	cmp	r5, r3
 800dbf8:	bf38      	it	cc
 800dbfa:	461d      	movcc	r5, r3
 800dbfc:	0553      	lsls	r3, r2, #21
 800dbfe:	d527      	bpl.n	800dc50 <__ssputs_r+0x8c>
 800dc00:	4629      	mov	r1, r5
 800dc02:	f7ff fbd7 	bl	800d3b4 <_malloc_r>
 800dc06:	4606      	mov	r6, r0
 800dc08:	b360      	cbz	r0, 800dc64 <__ssputs_r+0xa0>
 800dc0a:	6921      	ldr	r1, [r4, #16]
 800dc0c:	464a      	mov	r2, r9
 800dc0e:	f000 fa8d 	bl	800e12c <memcpy>
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	6126      	str	r6, [r4, #16]
 800dc20:	6165      	str	r5, [r4, #20]
 800dc22:	444e      	add	r6, r9
 800dc24:	eba5 0509 	sub.w	r5, r5, r9
 800dc28:	6026      	str	r6, [r4, #0]
 800dc2a:	60a5      	str	r5, [r4, #8]
 800dc2c:	463e      	mov	r6, r7
 800dc2e:	42be      	cmp	r6, r7
 800dc30:	d900      	bls.n	800dc34 <__ssputs_r+0x70>
 800dc32:	463e      	mov	r6, r7
 800dc34:	6820      	ldr	r0, [r4, #0]
 800dc36:	4632      	mov	r2, r6
 800dc38:	4641      	mov	r1, r8
 800dc3a:	f000 fa2b 	bl	800e094 <memmove>
 800dc3e:	68a3      	ldr	r3, [r4, #8]
 800dc40:	1b9b      	subs	r3, r3, r6
 800dc42:	60a3      	str	r3, [r4, #8]
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	4433      	add	r3, r6
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc50:	462a      	mov	r2, r5
 800dc52:	f000 fabf 	bl	800e1d4 <_realloc_r>
 800dc56:	4606      	mov	r6, r0
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d1e0      	bne.n	800dc1e <__ssputs_r+0x5a>
 800dc5c:	6921      	ldr	r1, [r4, #16]
 800dc5e:	4650      	mov	r0, sl
 800dc60:	f7ff fb34 	bl	800d2cc <_free_r>
 800dc64:	230c      	movs	r3, #12
 800dc66:	f8ca 3000 	str.w	r3, [sl]
 800dc6a:	89a3      	ldrh	r3, [r4, #12]
 800dc6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc70:	81a3      	strh	r3, [r4, #12]
 800dc72:	f04f 30ff 	mov.w	r0, #4294967295
 800dc76:	e7e9      	b.n	800dc4c <__ssputs_r+0x88>

0800dc78 <_svfiprintf_r>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	4698      	mov	r8, r3
 800dc7e:	898b      	ldrh	r3, [r1, #12]
 800dc80:	061b      	lsls	r3, r3, #24
 800dc82:	b09d      	sub	sp, #116	; 0x74
 800dc84:	4607      	mov	r7, r0
 800dc86:	460d      	mov	r5, r1
 800dc88:	4614      	mov	r4, r2
 800dc8a:	d50e      	bpl.n	800dcaa <_svfiprintf_r+0x32>
 800dc8c:	690b      	ldr	r3, [r1, #16]
 800dc8e:	b963      	cbnz	r3, 800dcaa <_svfiprintf_r+0x32>
 800dc90:	2140      	movs	r1, #64	; 0x40
 800dc92:	f7ff fb8f 	bl	800d3b4 <_malloc_r>
 800dc96:	6028      	str	r0, [r5, #0]
 800dc98:	6128      	str	r0, [r5, #16]
 800dc9a:	b920      	cbnz	r0, 800dca6 <_svfiprintf_r+0x2e>
 800dc9c:	230c      	movs	r3, #12
 800dc9e:	603b      	str	r3, [r7, #0]
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	e0d0      	b.n	800de48 <_svfiprintf_r+0x1d0>
 800dca6:	2340      	movs	r3, #64	; 0x40
 800dca8:	616b      	str	r3, [r5, #20]
 800dcaa:	2300      	movs	r3, #0
 800dcac:	9309      	str	r3, [sp, #36]	; 0x24
 800dcae:	2320      	movs	r3, #32
 800dcb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcb8:	2330      	movs	r3, #48	; 0x30
 800dcba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800de60 <_svfiprintf_r+0x1e8>
 800dcbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcc2:	f04f 0901 	mov.w	r9, #1
 800dcc6:	4623      	mov	r3, r4
 800dcc8:	469a      	mov	sl, r3
 800dcca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcce:	b10a      	cbz	r2, 800dcd4 <_svfiprintf_r+0x5c>
 800dcd0:	2a25      	cmp	r2, #37	; 0x25
 800dcd2:	d1f9      	bne.n	800dcc8 <_svfiprintf_r+0x50>
 800dcd4:	ebba 0b04 	subs.w	fp, sl, r4
 800dcd8:	d00b      	beq.n	800dcf2 <_svfiprintf_r+0x7a>
 800dcda:	465b      	mov	r3, fp
 800dcdc:	4622      	mov	r2, r4
 800dcde:	4629      	mov	r1, r5
 800dce0:	4638      	mov	r0, r7
 800dce2:	f7ff ff6f 	bl	800dbc4 <__ssputs_r>
 800dce6:	3001      	adds	r0, #1
 800dce8:	f000 80a9 	beq.w	800de3e <_svfiprintf_r+0x1c6>
 800dcec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcee:	445a      	add	r2, fp
 800dcf0:	9209      	str	r2, [sp, #36]	; 0x24
 800dcf2:	f89a 3000 	ldrb.w	r3, [sl]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f000 80a1 	beq.w	800de3e <_svfiprintf_r+0x1c6>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dd02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd06:	f10a 0a01 	add.w	sl, sl, #1
 800dd0a:	9304      	str	r3, [sp, #16]
 800dd0c:	9307      	str	r3, [sp, #28]
 800dd0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd12:	931a      	str	r3, [sp, #104]	; 0x68
 800dd14:	4654      	mov	r4, sl
 800dd16:	2205      	movs	r2, #5
 800dd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1c:	4850      	ldr	r0, [pc, #320]	; (800de60 <_svfiprintf_r+0x1e8>)
 800dd1e:	f7f2 fa57 	bl	80001d0 <memchr>
 800dd22:	9a04      	ldr	r2, [sp, #16]
 800dd24:	b9d8      	cbnz	r0, 800dd5e <_svfiprintf_r+0xe6>
 800dd26:	06d0      	lsls	r0, r2, #27
 800dd28:	bf44      	itt	mi
 800dd2a:	2320      	movmi	r3, #32
 800dd2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd30:	0711      	lsls	r1, r2, #28
 800dd32:	bf44      	itt	mi
 800dd34:	232b      	movmi	r3, #43	; 0x2b
 800dd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd3e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd40:	d015      	beq.n	800dd6e <_svfiprintf_r+0xf6>
 800dd42:	9a07      	ldr	r2, [sp, #28]
 800dd44:	4654      	mov	r4, sl
 800dd46:	2000      	movs	r0, #0
 800dd48:	f04f 0c0a 	mov.w	ip, #10
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd52:	3b30      	subs	r3, #48	; 0x30
 800dd54:	2b09      	cmp	r3, #9
 800dd56:	d94d      	bls.n	800ddf4 <_svfiprintf_r+0x17c>
 800dd58:	b1b0      	cbz	r0, 800dd88 <_svfiprintf_r+0x110>
 800dd5a:	9207      	str	r2, [sp, #28]
 800dd5c:	e014      	b.n	800dd88 <_svfiprintf_r+0x110>
 800dd5e:	eba0 0308 	sub.w	r3, r0, r8
 800dd62:	fa09 f303 	lsl.w	r3, r9, r3
 800dd66:	4313      	orrs	r3, r2
 800dd68:	9304      	str	r3, [sp, #16]
 800dd6a:	46a2      	mov	sl, r4
 800dd6c:	e7d2      	b.n	800dd14 <_svfiprintf_r+0x9c>
 800dd6e:	9b03      	ldr	r3, [sp, #12]
 800dd70:	1d19      	adds	r1, r3, #4
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	9103      	str	r1, [sp, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	bfbb      	ittet	lt
 800dd7a:	425b      	neglt	r3, r3
 800dd7c:	f042 0202 	orrlt.w	r2, r2, #2
 800dd80:	9307      	strge	r3, [sp, #28]
 800dd82:	9307      	strlt	r3, [sp, #28]
 800dd84:	bfb8      	it	lt
 800dd86:	9204      	strlt	r2, [sp, #16]
 800dd88:	7823      	ldrb	r3, [r4, #0]
 800dd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800dd8c:	d10c      	bne.n	800dda8 <_svfiprintf_r+0x130>
 800dd8e:	7863      	ldrb	r3, [r4, #1]
 800dd90:	2b2a      	cmp	r3, #42	; 0x2a
 800dd92:	d134      	bne.n	800ddfe <_svfiprintf_r+0x186>
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	1d1a      	adds	r2, r3, #4
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	9203      	str	r2, [sp, #12]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfb8      	it	lt
 800dda0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dda4:	3402      	adds	r4, #2
 800dda6:	9305      	str	r3, [sp, #20]
 800dda8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800de70 <_svfiprintf_r+0x1f8>
 800ddac:	7821      	ldrb	r1, [r4, #0]
 800ddae:	2203      	movs	r2, #3
 800ddb0:	4650      	mov	r0, sl
 800ddb2:	f7f2 fa0d 	bl	80001d0 <memchr>
 800ddb6:	b138      	cbz	r0, 800ddc8 <_svfiprintf_r+0x150>
 800ddb8:	9b04      	ldr	r3, [sp, #16]
 800ddba:	eba0 000a 	sub.w	r0, r0, sl
 800ddbe:	2240      	movs	r2, #64	; 0x40
 800ddc0:	4082      	lsls	r2, r0
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	3401      	adds	r4, #1
 800ddc6:	9304      	str	r3, [sp, #16]
 800ddc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddcc:	4825      	ldr	r0, [pc, #148]	; (800de64 <_svfiprintf_r+0x1ec>)
 800ddce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddd2:	2206      	movs	r2, #6
 800ddd4:	f7f2 f9fc 	bl	80001d0 <memchr>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d038      	beq.n	800de4e <_svfiprintf_r+0x1d6>
 800dddc:	4b22      	ldr	r3, [pc, #136]	; (800de68 <_svfiprintf_r+0x1f0>)
 800ddde:	bb1b      	cbnz	r3, 800de28 <_svfiprintf_r+0x1b0>
 800dde0:	9b03      	ldr	r3, [sp, #12]
 800dde2:	3307      	adds	r3, #7
 800dde4:	f023 0307 	bic.w	r3, r3, #7
 800dde8:	3308      	adds	r3, #8
 800ddea:	9303      	str	r3, [sp, #12]
 800ddec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddee:	4433      	add	r3, r6
 800ddf0:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf2:	e768      	b.n	800dcc6 <_svfiprintf_r+0x4e>
 800ddf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	2001      	movs	r0, #1
 800ddfc:	e7a6      	b.n	800dd4c <_svfiprintf_r+0xd4>
 800ddfe:	2300      	movs	r3, #0
 800de00:	3401      	adds	r4, #1
 800de02:	9305      	str	r3, [sp, #20]
 800de04:	4619      	mov	r1, r3
 800de06:	f04f 0c0a 	mov.w	ip, #10
 800de0a:	4620      	mov	r0, r4
 800de0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de10:	3a30      	subs	r2, #48	; 0x30
 800de12:	2a09      	cmp	r2, #9
 800de14:	d903      	bls.n	800de1e <_svfiprintf_r+0x1a6>
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0c6      	beq.n	800dda8 <_svfiprintf_r+0x130>
 800de1a:	9105      	str	r1, [sp, #20]
 800de1c:	e7c4      	b.n	800dda8 <_svfiprintf_r+0x130>
 800de1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800de22:	4604      	mov	r4, r0
 800de24:	2301      	movs	r3, #1
 800de26:	e7f0      	b.n	800de0a <_svfiprintf_r+0x192>
 800de28:	ab03      	add	r3, sp, #12
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	462a      	mov	r2, r5
 800de2e:	4b0f      	ldr	r3, [pc, #60]	; (800de6c <_svfiprintf_r+0x1f4>)
 800de30:	a904      	add	r1, sp, #16
 800de32:	4638      	mov	r0, r7
 800de34:	f7fd fdc2 	bl	800b9bc <_printf_float>
 800de38:	1c42      	adds	r2, r0, #1
 800de3a:	4606      	mov	r6, r0
 800de3c:	d1d6      	bne.n	800ddec <_svfiprintf_r+0x174>
 800de3e:	89ab      	ldrh	r3, [r5, #12]
 800de40:	065b      	lsls	r3, r3, #25
 800de42:	f53f af2d 	bmi.w	800dca0 <_svfiprintf_r+0x28>
 800de46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de48:	b01d      	add	sp, #116	; 0x74
 800de4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4e:	ab03      	add	r3, sp, #12
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	462a      	mov	r2, r5
 800de54:	4b05      	ldr	r3, [pc, #20]	; (800de6c <_svfiprintf_r+0x1f4>)
 800de56:	a904      	add	r1, sp, #16
 800de58:	4638      	mov	r0, r7
 800de5a:	f7fe f853 	bl	800bf04 <_printf_i>
 800de5e:	e7eb      	b.n	800de38 <_svfiprintf_r+0x1c0>
 800de60:	0800ef24 	.word	0x0800ef24
 800de64:	0800ef2e 	.word	0x0800ef2e
 800de68:	0800b9bd 	.word	0x0800b9bd
 800de6c:	0800dbc5 	.word	0x0800dbc5
 800de70:	0800ef2a 	.word	0x0800ef2a

0800de74 <__sflush_r>:
 800de74:	898a      	ldrh	r2, [r1, #12]
 800de76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7a:	4605      	mov	r5, r0
 800de7c:	0710      	lsls	r0, r2, #28
 800de7e:	460c      	mov	r4, r1
 800de80:	d458      	bmi.n	800df34 <__sflush_r+0xc0>
 800de82:	684b      	ldr	r3, [r1, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	dc05      	bgt.n	800de94 <__sflush_r+0x20>
 800de88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	dc02      	bgt.n	800de94 <__sflush_r+0x20>
 800de8e:	2000      	movs	r0, #0
 800de90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de96:	2e00      	cmp	r6, #0
 800de98:	d0f9      	beq.n	800de8e <__sflush_r+0x1a>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dea0:	682f      	ldr	r7, [r5, #0]
 800dea2:	6a21      	ldr	r1, [r4, #32]
 800dea4:	602b      	str	r3, [r5, #0]
 800dea6:	d032      	beq.n	800df0e <__sflush_r+0x9a>
 800dea8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800deaa:	89a3      	ldrh	r3, [r4, #12]
 800deac:	075a      	lsls	r2, r3, #29
 800deae:	d505      	bpl.n	800debc <__sflush_r+0x48>
 800deb0:	6863      	ldr	r3, [r4, #4]
 800deb2:	1ac0      	subs	r0, r0, r3
 800deb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deb6:	b10b      	cbz	r3, 800debc <__sflush_r+0x48>
 800deb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deba:	1ac0      	subs	r0, r0, r3
 800debc:	2300      	movs	r3, #0
 800debe:	4602      	mov	r2, r0
 800dec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dec2:	6a21      	ldr	r1, [r4, #32]
 800dec4:	4628      	mov	r0, r5
 800dec6:	47b0      	blx	r6
 800dec8:	1c43      	adds	r3, r0, #1
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	d106      	bne.n	800dedc <__sflush_r+0x68>
 800dece:	6829      	ldr	r1, [r5, #0]
 800ded0:	291d      	cmp	r1, #29
 800ded2:	d82b      	bhi.n	800df2c <__sflush_r+0xb8>
 800ded4:	4a29      	ldr	r2, [pc, #164]	; (800df7c <__sflush_r+0x108>)
 800ded6:	410a      	asrs	r2, r1
 800ded8:	07d6      	lsls	r6, r2, #31
 800deda:	d427      	bmi.n	800df2c <__sflush_r+0xb8>
 800dedc:	2200      	movs	r2, #0
 800dede:	6062      	str	r2, [r4, #4]
 800dee0:	04d9      	lsls	r1, r3, #19
 800dee2:	6922      	ldr	r2, [r4, #16]
 800dee4:	6022      	str	r2, [r4, #0]
 800dee6:	d504      	bpl.n	800def2 <__sflush_r+0x7e>
 800dee8:	1c42      	adds	r2, r0, #1
 800deea:	d101      	bne.n	800def0 <__sflush_r+0x7c>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b903      	cbnz	r3, 800def2 <__sflush_r+0x7e>
 800def0:	6560      	str	r0, [r4, #84]	; 0x54
 800def2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800def4:	602f      	str	r7, [r5, #0]
 800def6:	2900      	cmp	r1, #0
 800def8:	d0c9      	beq.n	800de8e <__sflush_r+0x1a>
 800defa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800defe:	4299      	cmp	r1, r3
 800df00:	d002      	beq.n	800df08 <__sflush_r+0x94>
 800df02:	4628      	mov	r0, r5
 800df04:	f7ff f9e2 	bl	800d2cc <_free_r>
 800df08:	2000      	movs	r0, #0
 800df0a:	6360      	str	r0, [r4, #52]	; 0x34
 800df0c:	e7c0      	b.n	800de90 <__sflush_r+0x1c>
 800df0e:	2301      	movs	r3, #1
 800df10:	4628      	mov	r0, r5
 800df12:	47b0      	blx	r6
 800df14:	1c41      	adds	r1, r0, #1
 800df16:	d1c8      	bne.n	800deaa <__sflush_r+0x36>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0c5      	beq.n	800deaa <__sflush_r+0x36>
 800df1e:	2b1d      	cmp	r3, #29
 800df20:	d001      	beq.n	800df26 <__sflush_r+0xb2>
 800df22:	2b16      	cmp	r3, #22
 800df24:	d101      	bne.n	800df2a <__sflush_r+0xb6>
 800df26:	602f      	str	r7, [r5, #0]
 800df28:	e7b1      	b.n	800de8e <__sflush_r+0x1a>
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	e7ad      	b.n	800de90 <__sflush_r+0x1c>
 800df34:	690f      	ldr	r7, [r1, #16]
 800df36:	2f00      	cmp	r7, #0
 800df38:	d0a9      	beq.n	800de8e <__sflush_r+0x1a>
 800df3a:	0793      	lsls	r3, r2, #30
 800df3c:	680e      	ldr	r6, [r1, #0]
 800df3e:	bf08      	it	eq
 800df40:	694b      	ldreq	r3, [r1, #20]
 800df42:	600f      	str	r7, [r1, #0]
 800df44:	bf18      	it	ne
 800df46:	2300      	movne	r3, #0
 800df48:	eba6 0807 	sub.w	r8, r6, r7
 800df4c:	608b      	str	r3, [r1, #8]
 800df4e:	f1b8 0f00 	cmp.w	r8, #0
 800df52:	dd9c      	ble.n	800de8e <__sflush_r+0x1a>
 800df54:	6a21      	ldr	r1, [r4, #32]
 800df56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df58:	4643      	mov	r3, r8
 800df5a:	463a      	mov	r2, r7
 800df5c:	4628      	mov	r0, r5
 800df5e:	47b0      	blx	r6
 800df60:	2800      	cmp	r0, #0
 800df62:	dc06      	bgt.n	800df72 <__sflush_r+0xfe>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df6a:	81a3      	strh	r3, [r4, #12]
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295
 800df70:	e78e      	b.n	800de90 <__sflush_r+0x1c>
 800df72:	4407      	add	r7, r0
 800df74:	eba8 0800 	sub.w	r8, r8, r0
 800df78:	e7e9      	b.n	800df4e <__sflush_r+0xda>
 800df7a:	bf00      	nop
 800df7c:	dfbffffe 	.word	0xdfbffffe

0800df80 <_fflush_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	690b      	ldr	r3, [r1, #16]
 800df84:	4605      	mov	r5, r0
 800df86:	460c      	mov	r4, r1
 800df88:	b913      	cbnz	r3, 800df90 <_fflush_r+0x10>
 800df8a:	2500      	movs	r5, #0
 800df8c:	4628      	mov	r0, r5
 800df8e:	bd38      	pop	{r3, r4, r5, pc}
 800df90:	b118      	cbz	r0, 800df9a <_fflush_r+0x1a>
 800df92:	6a03      	ldr	r3, [r0, #32]
 800df94:	b90b      	cbnz	r3, 800df9a <_fflush_r+0x1a>
 800df96:	f7fe f951 	bl	800c23c <__sinit>
 800df9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d0f3      	beq.n	800df8a <_fflush_r+0xa>
 800dfa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfa4:	07d0      	lsls	r0, r2, #31
 800dfa6:	d404      	bmi.n	800dfb2 <_fflush_r+0x32>
 800dfa8:	0599      	lsls	r1, r3, #22
 800dfaa:	d402      	bmi.n	800dfb2 <_fflush_r+0x32>
 800dfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfae:	f7fe fb11 	bl	800c5d4 <__retarget_lock_acquire_recursive>
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	f7ff ff5d 	bl	800de74 <__sflush_r>
 800dfba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfbc:	07da      	lsls	r2, r3, #31
 800dfbe:	4605      	mov	r5, r0
 800dfc0:	d4e4      	bmi.n	800df8c <_fflush_r+0xc>
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	059b      	lsls	r3, r3, #22
 800dfc6:	d4e1      	bmi.n	800df8c <_fflush_r+0xc>
 800dfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfca:	f7fe fb04 	bl	800c5d6 <__retarget_lock_release_recursive>
 800dfce:	e7dd      	b.n	800df8c <_fflush_r+0xc>

0800dfd0 <__swhatbuf_r>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd8:	2900      	cmp	r1, #0
 800dfda:	b096      	sub	sp, #88	; 0x58
 800dfdc:	4615      	mov	r5, r2
 800dfde:	461e      	mov	r6, r3
 800dfe0:	da0d      	bge.n	800dffe <__swhatbuf_r+0x2e>
 800dfe2:	89a3      	ldrh	r3, [r4, #12]
 800dfe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dfe8:	f04f 0100 	mov.w	r1, #0
 800dfec:	bf0c      	ite	eq
 800dfee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dff2:	2340      	movne	r3, #64	; 0x40
 800dff4:	2000      	movs	r0, #0
 800dff6:	6031      	str	r1, [r6, #0]
 800dff8:	602b      	str	r3, [r5, #0]
 800dffa:	b016      	add	sp, #88	; 0x58
 800dffc:	bd70      	pop	{r4, r5, r6, pc}
 800dffe:	466a      	mov	r2, sp
 800e000:	f000 f862 	bl	800e0c8 <_fstat_r>
 800e004:	2800      	cmp	r0, #0
 800e006:	dbec      	blt.n	800dfe2 <__swhatbuf_r+0x12>
 800e008:	9901      	ldr	r1, [sp, #4]
 800e00a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e00e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e012:	4259      	negs	r1, r3
 800e014:	4159      	adcs	r1, r3
 800e016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e01a:	e7eb      	b.n	800dff4 <__swhatbuf_r+0x24>

0800e01c <__smakebuf_r>:
 800e01c:	898b      	ldrh	r3, [r1, #12]
 800e01e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e020:	079d      	lsls	r5, r3, #30
 800e022:	4606      	mov	r6, r0
 800e024:	460c      	mov	r4, r1
 800e026:	d507      	bpl.n	800e038 <__smakebuf_r+0x1c>
 800e028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	6123      	str	r3, [r4, #16]
 800e030:	2301      	movs	r3, #1
 800e032:	6163      	str	r3, [r4, #20]
 800e034:	b002      	add	sp, #8
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	ab01      	add	r3, sp, #4
 800e03a:	466a      	mov	r2, sp
 800e03c:	f7ff ffc8 	bl	800dfd0 <__swhatbuf_r>
 800e040:	9900      	ldr	r1, [sp, #0]
 800e042:	4605      	mov	r5, r0
 800e044:	4630      	mov	r0, r6
 800e046:	f7ff f9b5 	bl	800d3b4 <_malloc_r>
 800e04a:	b948      	cbnz	r0, 800e060 <__smakebuf_r+0x44>
 800e04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e050:	059a      	lsls	r2, r3, #22
 800e052:	d4ef      	bmi.n	800e034 <__smakebuf_r+0x18>
 800e054:	f023 0303 	bic.w	r3, r3, #3
 800e058:	f043 0302 	orr.w	r3, r3, #2
 800e05c:	81a3      	strh	r3, [r4, #12]
 800e05e:	e7e3      	b.n	800e028 <__smakebuf_r+0xc>
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	6020      	str	r0, [r4, #0]
 800e064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e068:	81a3      	strh	r3, [r4, #12]
 800e06a:	9b00      	ldr	r3, [sp, #0]
 800e06c:	6163      	str	r3, [r4, #20]
 800e06e:	9b01      	ldr	r3, [sp, #4]
 800e070:	6120      	str	r0, [r4, #16]
 800e072:	b15b      	cbz	r3, 800e08c <__smakebuf_r+0x70>
 800e074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e078:	4630      	mov	r0, r6
 800e07a:	f000 f837 	bl	800e0ec <_isatty_r>
 800e07e:	b128      	cbz	r0, 800e08c <__smakebuf_r+0x70>
 800e080:	89a3      	ldrh	r3, [r4, #12]
 800e082:	f023 0303 	bic.w	r3, r3, #3
 800e086:	f043 0301 	orr.w	r3, r3, #1
 800e08a:	81a3      	strh	r3, [r4, #12]
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	431d      	orrs	r5, r3
 800e090:	81a5      	strh	r5, [r4, #12]
 800e092:	e7cf      	b.n	800e034 <__smakebuf_r+0x18>

0800e094 <memmove>:
 800e094:	4288      	cmp	r0, r1
 800e096:	b510      	push	{r4, lr}
 800e098:	eb01 0402 	add.w	r4, r1, r2
 800e09c:	d902      	bls.n	800e0a4 <memmove+0x10>
 800e09e:	4284      	cmp	r4, r0
 800e0a0:	4623      	mov	r3, r4
 800e0a2:	d807      	bhi.n	800e0b4 <memmove+0x20>
 800e0a4:	1e43      	subs	r3, r0, #1
 800e0a6:	42a1      	cmp	r1, r4
 800e0a8:	d008      	beq.n	800e0bc <memmove+0x28>
 800e0aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0b2:	e7f8      	b.n	800e0a6 <memmove+0x12>
 800e0b4:	4402      	add	r2, r0
 800e0b6:	4601      	mov	r1, r0
 800e0b8:	428a      	cmp	r2, r1
 800e0ba:	d100      	bne.n	800e0be <memmove+0x2a>
 800e0bc:	bd10      	pop	{r4, pc}
 800e0be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0c6:	e7f7      	b.n	800e0b8 <memmove+0x24>

0800e0c8 <_fstat_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4d07      	ldr	r5, [pc, #28]	; (800e0e8 <_fstat_r+0x20>)
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	4608      	mov	r0, r1
 800e0d2:	4611      	mov	r1, r2
 800e0d4:	602b      	str	r3, [r5, #0]
 800e0d6:	f7f5 feb4 	bl	8003e42 <_fstat>
 800e0da:	1c43      	adds	r3, r0, #1
 800e0dc:	d102      	bne.n	800e0e4 <_fstat_r+0x1c>
 800e0de:	682b      	ldr	r3, [r5, #0]
 800e0e0:	b103      	cbz	r3, 800e0e4 <_fstat_r+0x1c>
 800e0e2:	6023      	str	r3, [r4, #0]
 800e0e4:	bd38      	pop	{r3, r4, r5, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20000ec0 	.word	0x20000ec0

0800e0ec <_isatty_r>:
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	4d06      	ldr	r5, [pc, #24]	; (800e108 <_isatty_r+0x1c>)
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	4608      	mov	r0, r1
 800e0f6:	602b      	str	r3, [r5, #0]
 800e0f8:	f7f5 feb3 	bl	8003e62 <_isatty>
 800e0fc:	1c43      	adds	r3, r0, #1
 800e0fe:	d102      	bne.n	800e106 <_isatty_r+0x1a>
 800e100:	682b      	ldr	r3, [r5, #0]
 800e102:	b103      	cbz	r3, 800e106 <_isatty_r+0x1a>
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	bd38      	pop	{r3, r4, r5, pc}
 800e108:	20000ec0 	.word	0x20000ec0

0800e10c <_sbrk_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	4d06      	ldr	r5, [pc, #24]	; (800e128 <_sbrk_r+0x1c>)
 800e110:	2300      	movs	r3, #0
 800e112:	4604      	mov	r4, r0
 800e114:	4608      	mov	r0, r1
 800e116:	602b      	str	r3, [r5, #0]
 800e118:	f7f5 febc 	bl	8003e94 <_sbrk>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <_sbrk_r+0x1a>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	b103      	cbz	r3, 800e126 <_sbrk_r+0x1a>
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	20000ec0 	.word	0x20000ec0

0800e12c <memcpy>:
 800e12c:	440a      	add	r2, r1
 800e12e:	4291      	cmp	r1, r2
 800e130:	f100 33ff 	add.w	r3, r0, #4294967295
 800e134:	d100      	bne.n	800e138 <memcpy+0xc>
 800e136:	4770      	bx	lr
 800e138:	b510      	push	{r4, lr}
 800e13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e13e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e142:	4291      	cmp	r1, r2
 800e144:	d1f9      	bne.n	800e13a <memcpy+0xe>
 800e146:	bd10      	pop	{r4, pc}

0800e148 <__assert_func>:
 800e148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e14a:	4614      	mov	r4, r2
 800e14c:	461a      	mov	r2, r3
 800e14e:	4b09      	ldr	r3, [pc, #36]	; (800e174 <__assert_func+0x2c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4605      	mov	r5, r0
 800e154:	68d8      	ldr	r0, [r3, #12]
 800e156:	b14c      	cbz	r4, 800e16c <__assert_func+0x24>
 800e158:	4b07      	ldr	r3, [pc, #28]	; (800e178 <__assert_func+0x30>)
 800e15a:	9100      	str	r1, [sp, #0]
 800e15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e160:	4906      	ldr	r1, [pc, #24]	; (800e17c <__assert_func+0x34>)
 800e162:	462b      	mov	r3, r5
 800e164:	f000 f872 	bl	800e24c <fiprintf>
 800e168:	f000 f882 	bl	800e270 <abort>
 800e16c:	4b04      	ldr	r3, [pc, #16]	; (800e180 <__assert_func+0x38>)
 800e16e:	461c      	mov	r4, r3
 800e170:	e7f3      	b.n	800e15a <__assert_func+0x12>
 800e172:	bf00      	nop
 800e174:	20000068 	.word	0x20000068
 800e178:	0800ef3f 	.word	0x0800ef3f
 800e17c:	0800ef4c 	.word	0x0800ef4c
 800e180:	0800ef7a 	.word	0x0800ef7a

0800e184 <_calloc_r>:
 800e184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e186:	fba1 2402 	umull	r2, r4, r1, r2
 800e18a:	b94c      	cbnz	r4, 800e1a0 <_calloc_r+0x1c>
 800e18c:	4611      	mov	r1, r2
 800e18e:	9201      	str	r2, [sp, #4]
 800e190:	f7ff f910 	bl	800d3b4 <_malloc_r>
 800e194:	9a01      	ldr	r2, [sp, #4]
 800e196:	4605      	mov	r5, r0
 800e198:	b930      	cbnz	r0, 800e1a8 <_calloc_r+0x24>
 800e19a:	4628      	mov	r0, r5
 800e19c:	b003      	add	sp, #12
 800e19e:	bd30      	pop	{r4, r5, pc}
 800e1a0:	220c      	movs	r2, #12
 800e1a2:	6002      	str	r2, [r0, #0]
 800e1a4:	2500      	movs	r5, #0
 800e1a6:	e7f8      	b.n	800e19a <_calloc_r+0x16>
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	f7fe f997 	bl	800c4dc <memset>
 800e1ae:	e7f4      	b.n	800e19a <_calloc_r+0x16>

0800e1b0 <__ascii_mbtowc>:
 800e1b0:	b082      	sub	sp, #8
 800e1b2:	b901      	cbnz	r1, 800e1b6 <__ascii_mbtowc+0x6>
 800e1b4:	a901      	add	r1, sp, #4
 800e1b6:	b142      	cbz	r2, 800e1ca <__ascii_mbtowc+0x1a>
 800e1b8:	b14b      	cbz	r3, 800e1ce <__ascii_mbtowc+0x1e>
 800e1ba:	7813      	ldrb	r3, [r2, #0]
 800e1bc:	600b      	str	r3, [r1, #0]
 800e1be:	7812      	ldrb	r2, [r2, #0]
 800e1c0:	1e10      	subs	r0, r2, #0
 800e1c2:	bf18      	it	ne
 800e1c4:	2001      	movne	r0, #1
 800e1c6:	b002      	add	sp, #8
 800e1c8:	4770      	bx	lr
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	e7fb      	b.n	800e1c6 <__ascii_mbtowc+0x16>
 800e1ce:	f06f 0001 	mvn.w	r0, #1
 800e1d2:	e7f8      	b.n	800e1c6 <__ascii_mbtowc+0x16>

0800e1d4 <_realloc_r>:
 800e1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d8:	4680      	mov	r8, r0
 800e1da:	4614      	mov	r4, r2
 800e1dc:	460e      	mov	r6, r1
 800e1de:	b921      	cbnz	r1, 800e1ea <_realloc_r+0x16>
 800e1e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e4:	4611      	mov	r1, r2
 800e1e6:	f7ff b8e5 	b.w	800d3b4 <_malloc_r>
 800e1ea:	b92a      	cbnz	r2, 800e1f8 <_realloc_r+0x24>
 800e1ec:	f7ff f86e 	bl	800d2cc <_free_r>
 800e1f0:	4625      	mov	r5, r4
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f8:	f000 f841 	bl	800e27e <_malloc_usable_size_r>
 800e1fc:	4284      	cmp	r4, r0
 800e1fe:	4607      	mov	r7, r0
 800e200:	d802      	bhi.n	800e208 <_realloc_r+0x34>
 800e202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e206:	d812      	bhi.n	800e22e <_realloc_r+0x5a>
 800e208:	4621      	mov	r1, r4
 800e20a:	4640      	mov	r0, r8
 800e20c:	f7ff f8d2 	bl	800d3b4 <_malloc_r>
 800e210:	4605      	mov	r5, r0
 800e212:	2800      	cmp	r0, #0
 800e214:	d0ed      	beq.n	800e1f2 <_realloc_r+0x1e>
 800e216:	42bc      	cmp	r4, r7
 800e218:	4622      	mov	r2, r4
 800e21a:	4631      	mov	r1, r6
 800e21c:	bf28      	it	cs
 800e21e:	463a      	movcs	r2, r7
 800e220:	f7ff ff84 	bl	800e12c <memcpy>
 800e224:	4631      	mov	r1, r6
 800e226:	4640      	mov	r0, r8
 800e228:	f7ff f850 	bl	800d2cc <_free_r>
 800e22c:	e7e1      	b.n	800e1f2 <_realloc_r+0x1e>
 800e22e:	4635      	mov	r5, r6
 800e230:	e7df      	b.n	800e1f2 <_realloc_r+0x1e>

0800e232 <__ascii_wctomb>:
 800e232:	b149      	cbz	r1, 800e248 <__ascii_wctomb+0x16>
 800e234:	2aff      	cmp	r2, #255	; 0xff
 800e236:	bf85      	ittet	hi
 800e238:	238a      	movhi	r3, #138	; 0x8a
 800e23a:	6003      	strhi	r3, [r0, #0]
 800e23c:	700a      	strbls	r2, [r1, #0]
 800e23e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e242:	bf98      	it	ls
 800e244:	2001      	movls	r0, #1
 800e246:	4770      	bx	lr
 800e248:	4608      	mov	r0, r1
 800e24a:	4770      	bx	lr

0800e24c <fiprintf>:
 800e24c:	b40e      	push	{r1, r2, r3}
 800e24e:	b503      	push	{r0, r1, lr}
 800e250:	4601      	mov	r1, r0
 800e252:	ab03      	add	r3, sp, #12
 800e254:	4805      	ldr	r0, [pc, #20]	; (800e26c <fiprintf+0x20>)
 800e256:	f853 2b04 	ldr.w	r2, [r3], #4
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	f000 f83f 	bl	800e2e0 <_vfiprintf_r>
 800e262:	b002      	add	sp, #8
 800e264:	f85d eb04 	ldr.w	lr, [sp], #4
 800e268:	b003      	add	sp, #12
 800e26a:	4770      	bx	lr
 800e26c:	20000068 	.word	0x20000068

0800e270 <abort>:
 800e270:	b508      	push	{r3, lr}
 800e272:	2006      	movs	r0, #6
 800e274:	f000 fa0c 	bl	800e690 <raise>
 800e278:	2001      	movs	r0, #1
 800e27a:	f7f5 fd93 	bl	8003da4 <_exit>

0800e27e <_malloc_usable_size_r>:
 800e27e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e282:	1f18      	subs	r0, r3, #4
 800e284:	2b00      	cmp	r3, #0
 800e286:	bfbc      	itt	lt
 800e288:	580b      	ldrlt	r3, [r1, r0]
 800e28a:	18c0      	addlt	r0, r0, r3
 800e28c:	4770      	bx	lr

0800e28e <__sfputc_r>:
 800e28e:	6893      	ldr	r3, [r2, #8]
 800e290:	3b01      	subs	r3, #1
 800e292:	2b00      	cmp	r3, #0
 800e294:	b410      	push	{r4}
 800e296:	6093      	str	r3, [r2, #8]
 800e298:	da08      	bge.n	800e2ac <__sfputc_r+0x1e>
 800e29a:	6994      	ldr	r4, [r2, #24]
 800e29c:	42a3      	cmp	r3, r4
 800e29e:	db01      	blt.n	800e2a4 <__sfputc_r+0x16>
 800e2a0:	290a      	cmp	r1, #10
 800e2a2:	d103      	bne.n	800e2ac <__sfputc_r+0x1e>
 800e2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2a8:	f000 b934 	b.w	800e514 <__swbuf_r>
 800e2ac:	6813      	ldr	r3, [r2, #0]
 800e2ae:	1c58      	adds	r0, r3, #1
 800e2b0:	6010      	str	r0, [r2, #0]
 800e2b2:	7019      	strb	r1, [r3, #0]
 800e2b4:	4608      	mov	r0, r1
 800e2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <__sfputs_r>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	4606      	mov	r6, r0
 800e2c0:	460f      	mov	r7, r1
 800e2c2:	4614      	mov	r4, r2
 800e2c4:	18d5      	adds	r5, r2, r3
 800e2c6:	42ac      	cmp	r4, r5
 800e2c8:	d101      	bne.n	800e2ce <__sfputs_r+0x12>
 800e2ca:	2000      	movs	r0, #0
 800e2cc:	e007      	b.n	800e2de <__sfputs_r+0x22>
 800e2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d2:	463a      	mov	r2, r7
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7ff ffda 	bl	800e28e <__sfputc_r>
 800e2da:	1c43      	adds	r3, r0, #1
 800e2dc:	d1f3      	bne.n	800e2c6 <__sfputs_r+0xa>
 800e2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2e0 <_vfiprintf_r>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	460d      	mov	r5, r1
 800e2e6:	b09d      	sub	sp, #116	; 0x74
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	4698      	mov	r8, r3
 800e2ec:	4606      	mov	r6, r0
 800e2ee:	b118      	cbz	r0, 800e2f8 <_vfiprintf_r+0x18>
 800e2f0:	6a03      	ldr	r3, [r0, #32]
 800e2f2:	b90b      	cbnz	r3, 800e2f8 <_vfiprintf_r+0x18>
 800e2f4:	f7fd ffa2 	bl	800c23c <__sinit>
 800e2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2fa:	07d9      	lsls	r1, r3, #31
 800e2fc:	d405      	bmi.n	800e30a <_vfiprintf_r+0x2a>
 800e2fe:	89ab      	ldrh	r3, [r5, #12]
 800e300:	059a      	lsls	r2, r3, #22
 800e302:	d402      	bmi.n	800e30a <_vfiprintf_r+0x2a>
 800e304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e306:	f7fe f965 	bl	800c5d4 <__retarget_lock_acquire_recursive>
 800e30a:	89ab      	ldrh	r3, [r5, #12]
 800e30c:	071b      	lsls	r3, r3, #28
 800e30e:	d501      	bpl.n	800e314 <_vfiprintf_r+0x34>
 800e310:	692b      	ldr	r3, [r5, #16]
 800e312:	b99b      	cbnz	r3, 800e33c <_vfiprintf_r+0x5c>
 800e314:	4629      	mov	r1, r5
 800e316:	4630      	mov	r0, r6
 800e318:	f000 f93a 	bl	800e590 <__swsetup_r>
 800e31c:	b170      	cbz	r0, 800e33c <_vfiprintf_r+0x5c>
 800e31e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e320:	07dc      	lsls	r4, r3, #31
 800e322:	d504      	bpl.n	800e32e <_vfiprintf_r+0x4e>
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	b01d      	add	sp, #116	; 0x74
 800e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e32e:	89ab      	ldrh	r3, [r5, #12]
 800e330:	0598      	lsls	r0, r3, #22
 800e332:	d4f7      	bmi.n	800e324 <_vfiprintf_r+0x44>
 800e334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e336:	f7fe f94e 	bl	800c5d6 <__retarget_lock_release_recursive>
 800e33a:	e7f3      	b.n	800e324 <_vfiprintf_r+0x44>
 800e33c:	2300      	movs	r3, #0
 800e33e:	9309      	str	r3, [sp, #36]	; 0x24
 800e340:	2320      	movs	r3, #32
 800e342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e346:	f8cd 800c 	str.w	r8, [sp, #12]
 800e34a:	2330      	movs	r3, #48	; 0x30
 800e34c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e500 <_vfiprintf_r+0x220>
 800e350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e354:	f04f 0901 	mov.w	r9, #1
 800e358:	4623      	mov	r3, r4
 800e35a:	469a      	mov	sl, r3
 800e35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e360:	b10a      	cbz	r2, 800e366 <_vfiprintf_r+0x86>
 800e362:	2a25      	cmp	r2, #37	; 0x25
 800e364:	d1f9      	bne.n	800e35a <_vfiprintf_r+0x7a>
 800e366:	ebba 0b04 	subs.w	fp, sl, r4
 800e36a:	d00b      	beq.n	800e384 <_vfiprintf_r+0xa4>
 800e36c:	465b      	mov	r3, fp
 800e36e:	4622      	mov	r2, r4
 800e370:	4629      	mov	r1, r5
 800e372:	4630      	mov	r0, r6
 800e374:	f7ff ffa2 	bl	800e2bc <__sfputs_r>
 800e378:	3001      	adds	r0, #1
 800e37a:	f000 80a9 	beq.w	800e4d0 <_vfiprintf_r+0x1f0>
 800e37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e380:	445a      	add	r2, fp
 800e382:	9209      	str	r2, [sp, #36]	; 0x24
 800e384:	f89a 3000 	ldrb.w	r3, [sl]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 80a1 	beq.w	800e4d0 <_vfiprintf_r+0x1f0>
 800e38e:	2300      	movs	r3, #0
 800e390:	f04f 32ff 	mov.w	r2, #4294967295
 800e394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e398:	f10a 0a01 	add.w	sl, sl, #1
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	9307      	str	r3, [sp, #28]
 800e3a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3a4:	931a      	str	r3, [sp, #104]	; 0x68
 800e3a6:	4654      	mov	r4, sl
 800e3a8:	2205      	movs	r2, #5
 800e3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ae:	4854      	ldr	r0, [pc, #336]	; (800e500 <_vfiprintf_r+0x220>)
 800e3b0:	f7f1 ff0e 	bl	80001d0 <memchr>
 800e3b4:	9a04      	ldr	r2, [sp, #16]
 800e3b6:	b9d8      	cbnz	r0, 800e3f0 <_vfiprintf_r+0x110>
 800e3b8:	06d1      	lsls	r1, r2, #27
 800e3ba:	bf44      	itt	mi
 800e3bc:	2320      	movmi	r3, #32
 800e3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3c2:	0713      	lsls	r3, r2, #28
 800e3c4:	bf44      	itt	mi
 800e3c6:	232b      	movmi	r3, #43	; 0x2b
 800e3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3d2:	d015      	beq.n	800e400 <_vfiprintf_r+0x120>
 800e3d4:	9a07      	ldr	r2, [sp, #28]
 800e3d6:	4654      	mov	r4, sl
 800e3d8:	2000      	movs	r0, #0
 800e3da:	f04f 0c0a 	mov.w	ip, #10
 800e3de:	4621      	mov	r1, r4
 800e3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3e4:	3b30      	subs	r3, #48	; 0x30
 800e3e6:	2b09      	cmp	r3, #9
 800e3e8:	d94d      	bls.n	800e486 <_vfiprintf_r+0x1a6>
 800e3ea:	b1b0      	cbz	r0, 800e41a <_vfiprintf_r+0x13a>
 800e3ec:	9207      	str	r2, [sp, #28]
 800e3ee:	e014      	b.n	800e41a <_vfiprintf_r+0x13a>
 800e3f0:	eba0 0308 	sub.w	r3, r0, r8
 800e3f4:	fa09 f303 	lsl.w	r3, r9, r3
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	9304      	str	r3, [sp, #16]
 800e3fc:	46a2      	mov	sl, r4
 800e3fe:	e7d2      	b.n	800e3a6 <_vfiprintf_r+0xc6>
 800e400:	9b03      	ldr	r3, [sp, #12]
 800e402:	1d19      	adds	r1, r3, #4
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	9103      	str	r1, [sp, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bfbb      	ittet	lt
 800e40c:	425b      	neglt	r3, r3
 800e40e:	f042 0202 	orrlt.w	r2, r2, #2
 800e412:	9307      	strge	r3, [sp, #28]
 800e414:	9307      	strlt	r3, [sp, #28]
 800e416:	bfb8      	it	lt
 800e418:	9204      	strlt	r2, [sp, #16]
 800e41a:	7823      	ldrb	r3, [r4, #0]
 800e41c:	2b2e      	cmp	r3, #46	; 0x2e
 800e41e:	d10c      	bne.n	800e43a <_vfiprintf_r+0x15a>
 800e420:	7863      	ldrb	r3, [r4, #1]
 800e422:	2b2a      	cmp	r3, #42	; 0x2a
 800e424:	d134      	bne.n	800e490 <_vfiprintf_r+0x1b0>
 800e426:	9b03      	ldr	r3, [sp, #12]
 800e428:	1d1a      	adds	r2, r3, #4
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	9203      	str	r2, [sp, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	bfb8      	it	lt
 800e432:	f04f 33ff 	movlt.w	r3, #4294967295
 800e436:	3402      	adds	r4, #2
 800e438:	9305      	str	r3, [sp, #20]
 800e43a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e510 <_vfiprintf_r+0x230>
 800e43e:	7821      	ldrb	r1, [r4, #0]
 800e440:	2203      	movs	r2, #3
 800e442:	4650      	mov	r0, sl
 800e444:	f7f1 fec4 	bl	80001d0 <memchr>
 800e448:	b138      	cbz	r0, 800e45a <_vfiprintf_r+0x17a>
 800e44a:	9b04      	ldr	r3, [sp, #16]
 800e44c:	eba0 000a 	sub.w	r0, r0, sl
 800e450:	2240      	movs	r2, #64	; 0x40
 800e452:	4082      	lsls	r2, r0
 800e454:	4313      	orrs	r3, r2
 800e456:	3401      	adds	r4, #1
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e45e:	4829      	ldr	r0, [pc, #164]	; (800e504 <_vfiprintf_r+0x224>)
 800e460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e464:	2206      	movs	r2, #6
 800e466:	f7f1 feb3 	bl	80001d0 <memchr>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d03f      	beq.n	800e4ee <_vfiprintf_r+0x20e>
 800e46e:	4b26      	ldr	r3, [pc, #152]	; (800e508 <_vfiprintf_r+0x228>)
 800e470:	bb1b      	cbnz	r3, 800e4ba <_vfiprintf_r+0x1da>
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	3307      	adds	r3, #7
 800e476:	f023 0307 	bic.w	r3, r3, #7
 800e47a:	3308      	adds	r3, #8
 800e47c:	9303      	str	r3, [sp, #12]
 800e47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e480:	443b      	add	r3, r7
 800e482:	9309      	str	r3, [sp, #36]	; 0x24
 800e484:	e768      	b.n	800e358 <_vfiprintf_r+0x78>
 800e486:	fb0c 3202 	mla	r2, ip, r2, r3
 800e48a:	460c      	mov	r4, r1
 800e48c:	2001      	movs	r0, #1
 800e48e:	e7a6      	b.n	800e3de <_vfiprintf_r+0xfe>
 800e490:	2300      	movs	r3, #0
 800e492:	3401      	adds	r4, #1
 800e494:	9305      	str	r3, [sp, #20]
 800e496:	4619      	mov	r1, r3
 800e498:	f04f 0c0a 	mov.w	ip, #10
 800e49c:	4620      	mov	r0, r4
 800e49e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4a2:	3a30      	subs	r2, #48	; 0x30
 800e4a4:	2a09      	cmp	r2, #9
 800e4a6:	d903      	bls.n	800e4b0 <_vfiprintf_r+0x1d0>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d0c6      	beq.n	800e43a <_vfiprintf_r+0x15a>
 800e4ac:	9105      	str	r1, [sp, #20]
 800e4ae:	e7c4      	b.n	800e43a <_vfiprintf_r+0x15a>
 800e4b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e7f0      	b.n	800e49c <_vfiprintf_r+0x1bc>
 800e4ba:	ab03      	add	r3, sp, #12
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	462a      	mov	r2, r5
 800e4c0:	4b12      	ldr	r3, [pc, #72]	; (800e50c <_vfiprintf_r+0x22c>)
 800e4c2:	a904      	add	r1, sp, #16
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f7fd fa79 	bl	800b9bc <_printf_float>
 800e4ca:	4607      	mov	r7, r0
 800e4cc:	1c78      	adds	r0, r7, #1
 800e4ce:	d1d6      	bne.n	800e47e <_vfiprintf_r+0x19e>
 800e4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e4d2:	07d9      	lsls	r1, r3, #31
 800e4d4:	d405      	bmi.n	800e4e2 <_vfiprintf_r+0x202>
 800e4d6:	89ab      	ldrh	r3, [r5, #12]
 800e4d8:	059a      	lsls	r2, r3, #22
 800e4da:	d402      	bmi.n	800e4e2 <_vfiprintf_r+0x202>
 800e4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e4de:	f7fe f87a 	bl	800c5d6 <__retarget_lock_release_recursive>
 800e4e2:	89ab      	ldrh	r3, [r5, #12]
 800e4e4:	065b      	lsls	r3, r3, #25
 800e4e6:	f53f af1d 	bmi.w	800e324 <_vfiprintf_r+0x44>
 800e4ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4ec:	e71c      	b.n	800e328 <_vfiprintf_r+0x48>
 800e4ee:	ab03      	add	r3, sp, #12
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	462a      	mov	r2, r5
 800e4f4:	4b05      	ldr	r3, [pc, #20]	; (800e50c <_vfiprintf_r+0x22c>)
 800e4f6:	a904      	add	r1, sp, #16
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f7fd fd03 	bl	800bf04 <_printf_i>
 800e4fe:	e7e4      	b.n	800e4ca <_vfiprintf_r+0x1ea>
 800e500:	0800ef24 	.word	0x0800ef24
 800e504:	0800ef2e 	.word	0x0800ef2e
 800e508:	0800b9bd 	.word	0x0800b9bd
 800e50c:	0800e2bd 	.word	0x0800e2bd
 800e510:	0800ef2a 	.word	0x0800ef2a

0800e514 <__swbuf_r>:
 800e514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e516:	460e      	mov	r6, r1
 800e518:	4614      	mov	r4, r2
 800e51a:	4605      	mov	r5, r0
 800e51c:	b118      	cbz	r0, 800e526 <__swbuf_r+0x12>
 800e51e:	6a03      	ldr	r3, [r0, #32]
 800e520:	b90b      	cbnz	r3, 800e526 <__swbuf_r+0x12>
 800e522:	f7fd fe8b 	bl	800c23c <__sinit>
 800e526:	69a3      	ldr	r3, [r4, #24]
 800e528:	60a3      	str	r3, [r4, #8]
 800e52a:	89a3      	ldrh	r3, [r4, #12]
 800e52c:	071a      	lsls	r2, r3, #28
 800e52e:	d525      	bpl.n	800e57c <__swbuf_r+0x68>
 800e530:	6923      	ldr	r3, [r4, #16]
 800e532:	b31b      	cbz	r3, 800e57c <__swbuf_r+0x68>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	6922      	ldr	r2, [r4, #16]
 800e538:	1a98      	subs	r0, r3, r2
 800e53a:	6963      	ldr	r3, [r4, #20]
 800e53c:	b2f6      	uxtb	r6, r6
 800e53e:	4283      	cmp	r3, r0
 800e540:	4637      	mov	r7, r6
 800e542:	dc04      	bgt.n	800e54e <__swbuf_r+0x3a>
 800e544:	4621      	mov	r1, r4
 800e546:	4628      	mov	r0, r5
 800e548:	f7ff fd1a 	bl	800df80 <_fflush_r>
 800e54c:	b9e0      	cbnz	r0, 800e588 <__swbuf_r+0x74>
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	3b01      	subs	r3, #1
 800e552:	60a3      	str	r3, [r4, #8]
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	6022      	str	r2, [r4, #0]
 800e55a:	701e      	strb	r6, [r3, #0]
 800e55c:	6962      	ldr	r2, [r4, #20]
 800e55e:	1c43      	adds	r3, r0, #1
 800e560:	429a      	cmp	r2, r3
 800e562:	d004      	beq.n	800e56e <__swbuf_r+0x5a>
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	07db      	lsls	r3, r3, #31
 800e568:	d506      	bpl.n	800e578 <__swbuf_r+0x64>
 800e56a:	2e0a      	cmp	r6, #10
 800e56c:	d104      	bne.n	800e578 <__swbuf_r+0x64>
 800e56e:	4621      	mov	r1, r4
 800e570:	4628      	mov	r0, r5
 800e572:	f7ff fd05 	bl	800df80 <_fflush_r>
 800e576:	b938      	cbnz	r0, 800e588 <__swbuf_r+0x74>
 800e578:	4638      	mov	r0, r7
 800e57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e57c:	4621      	mov	r1, r4
 800e57e:	4628      	mov	r0, r5
 800e580:	f000 f806 	bl	800e590 <__swsetup_r>
 800e584:	2800      	cmp	r0, #0
 800e586:	d0d5      	beq.n	800e534 <__swbuf_r+0x20>
 800e588:	f04f 37ff 	mov.w	r7, #4294967295
 800e58c:	e7f4      	b.n	800e578 <__swbuf_r+0x64>
	...

0800e590 <__swsetup_r>:
 800e590:	b538      	push	{r3, r4, r5, lr}
 800e592:	4b2a      	ldr	r3, [pc, #168]	; (800e63c <__swsetup_r+0xac>)
 800e594:	4605      	mov	r5, r0
 800e596:	6818      	ldr	r0, [r3, #0]
 800e598:	460c      	mov	r4, r1
 800e59a:	b118      	cbz	r0, 800e5a4 <__swsetup_r+0x14>
 800e59c:	6a03      	ldr	r3, [r0, #32]
 800e59e:	b90b      	cbnz	r3, 800e5a4 <__swsetup_r+0x14>
 800e5a0:	f7fd fe4c 	bl	800c23c <__sinit>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5aa:	0718      	lsls	r0, r3, #28
 800e5ac:	d422      	bmi.n	800e5f4 <__swsetup_r+0x64>
 800e5ae:	06d9      	lsls	r1, r3, #27
 800e5b0:	d407      	bmi.n	800e5c2 <__swsetup_r+0x32>
 800e5b2:	2309      	movs	r3, #9
 800e5b4:	602b      	str	r3, [r5, #0]
 800e5b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e5ba:	81a3      	strh	r3, [r4, #12]
 800e5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c0:	e034      	b.n	800e62c <__swsetup_r+0x9c>
 800e5c2:	0758      	lsls	r0, r3, #29
 800e5c4:	d512      	bpl.n	800e5ec <__swsetup_r+0x5c>
 800e5c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5c8:	b141      	cbz	r1, 800e5dc <__swsetup_r+0x4c>
 800e5ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5ce:	4299      	cmp	r1, r3
 800e5d0:	d002      	beq.n	800e5d8 <__swsetup_r+0x48>
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f7fe fe7a 	bl	800d2cc <_free_r>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	6363      	str	r3, [r4, #52]	; 0x34
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5e2:	81a3      	strh	r3, [r4, #12]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	6063      	str	r3, [r4, #4]
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	6023      	str	r3, [r4, #0]
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	f043 0308 	orr.w	r3, r3, #8
 800e5f2:	81a3      	strh	r3, [r4, #12]
 800e5f4:	6923      	ldr	r3, [r4, #16]
 800e5f6:	b94b      	cbnz	r3, 800e60c <__swsetup_r+0x7c>
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e602:	d003      	beq.n	800e60c <__swsetup_r+0x7c>
 800e604:	4621      	mov	r1, r4
 800e606:	4628      	mov	r0, r5
 800e608:	f7ff fd08 	bl	800e01c <__smakebuf_r>
 800e60c:	89a0      	ldrh	r0, [r4, #12]
 800e60e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e612:	f010 0301 	ands.w	r3, r0, #1
 800e616:	d00a      	beq.n	800e62e <__swsetup_r+0x9e>
 800e618:	2300      	movs	r3, #0
 800e61a:	60a3      	str	r3, [r4, #8]
 800e61c:	6963      	ldr	r3, [r4, #20]
 800e61e:	425b      	negs	r3, r3
 800e620:	61a3      	str	r3, [r4, #24]
 800e622:	6923      	ldr	r3, [r4, #16]
 800e624:	b943      	cbnz	r3, 800e638 <__swsetup_r+0xa8>
 800e626:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e62a:	d1c4      	bne.n	800e5b6 <__swsetup_r+0x26>
 800e62c:	bd38      	pop	{r3, r4, r5, pc}
 800e62e:	0781      	lsls	r1, r0, #30
 800e630:	bf58      	it	pl
 800e632:	6963      	ldrpl	r3, [r4, #20]
 800e634:	60a3      	str	r3, [r4, #8]
 800e636:	e7f4      	b.n	800e622 <__swsetup_r+0x92>
 800e638:	2000      	movs	r0, #0
 800e63a:	e7f7      	b.n	800e62c <__swsetup_r+0x9c>
 800e63c:	20000068 	.word	0x20000068

0800e640 <_raise_r>:
 800e640:	291f      	cmp	r1, #31
 800e642:	b538      	push	{r3, r4, r5, lr}
 800e644:	4604      	mov	r4, r0
 800e646:	460d      	mov	r5, r1
 800e648:	d904      	bls.n	800e654 <_raise_r+0x14>
 800e64a:	2316      	movs	r3, #22
 800e64c:	6003      	str	r3, [r0, #0]
 800e64e:	f04f 30ff 	mov.w	r0, #4294967295
 800e652:	bd38      	pop	{r3, r4, r5, pc}
 800e654:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e656:	b112      	cbz	r2, 800e65e <_raise_r+0x1e>
 800e658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e65c:	b94b      	cbnz	r3, 800e672 <_raise_r+0x32>
 800e65e:	4620      	mov	r0, r4
 800e660:	f000 f830 	bl	800e6c4 <_getpid_r>
 800e664:	462a      	mov	r2, r5
 800e666:	4601      	mov	r1, r0
 800e668:	4620      	mov	r0, r4
 800e66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e66e:	f000 b817 	b.w	800e6a0 <_kill_r>
 800e672:	2b01      	cmp	r3, #1
 800e674:	d00a      	beq.n	800e68c <_raise_r+0x4c>
 800e676:	1c59      	adds	r1, r3, #1
 800e678:	d103      	bne.n	800e682 <_raise_r+0x42>
 800e67a:	2316      	movs	r3, #22
 800e67c:	6003      	str	r3, [r0, #0]
 800e67e:	2001      	movs	r0, #1
 800e680:	e7e7      	b.n	800e652 <_raise_r+0x12>
 800e682:	2400      	movs	r4, #0
 800e684:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e688:	4628      	mov	r0, r5
 800e68a:	4798      	blx	r3
 800e68c:	2000      	movs	r0, #0
 800e68e:	e7e0      	b.n	800e652 <_raise_r+0x12>

0800e690 <raise>:
 800e690:	4b02      	ldr	r3, [pc, #8]	; (800e69c <raise+0xc>)
 800e692:	4601      	mov	r1, r0
 800e694:	6818      	ldr	r0, [r3, #0]
 800e696:	f7ff bfd3 	b.w	800e640 <_raise_r>
 800e69a:	bf00      	nop
 800e69c:	20000068 	.word	0x20000068

0800e6a0 <_kill_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4d07      	ldr	r5, [pc, #28]	; (800e6c0 <_kill_r+0x20>)
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	4608      	mov	r0, r1
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	602b      	str	r3, [r5, #0]
 800e6ae:	f7f5 fb69 	bl	8003d84 <_kill>
 800e6b2:	1c43      	adds	r3, r0, #1
 800e6b4:	d102      	bne.n	800e6bc <_kill_r+0x1c>
 800e6b6:	682b      	ldr	r3, [r5, #0]
 800e6b8:	b103      	cbz	r3, 800e6bc <_kill_r+0x1c>
 800e6ba:	6023      	str	r3, [r4, #0]
 800e6bc:	bd38      	pop	{r3, r4, r5, pc}
 800e6be:	bf00      	nop
 800e6c0:	20000ec0 	.word	0x20000ec0

0800e6c4 <_getpid_r>:
 800e6c4:	f7f5 bb56 	b.w	8003d74 <_getpid>

0800e6c8 <_init>:
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	bf00      	nop
 800e6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ce:	bc08      	pop	{r3}
 800e6d0:	469e      	mov	lr, r3
 800e6d2:	4770      	bx	lr

0800e6d4 <_fini>:
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	bf00      	nop
 800e6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6da:	bc08      	pop	{r3}
 800e6dc:	469e      	mov	lr, r3
 800e6de:	4770      	bx	lr
