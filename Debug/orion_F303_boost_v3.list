
orion_F303_boost_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800a0e8  0800a0e8  0001a0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a574  0800a574  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a574  0800a574  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a574  0800a574  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a574  0800a574  0001a574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000414  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f0  200005f0  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016bf5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003463  00000000  00000000  00036e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002197e  00000000  00000000  0003c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a844  00000000  00000000  0005e10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c68b5  00000000  00000000  00078952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f207  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061b0  00000000  00000000  0013f258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0cc 	.word	0x0800a0cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a0cc 	.word	0x0800a0cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2228      	movs	r2, #40	; 0x28
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f006 fbab 	bl	800731c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd4:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bda:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bee:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf4:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c14:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c16:	f001 fb31 	bl	800227c <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 fe59 	bl	80018d6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c30:	f002 f9a2 	bl	8002f78 <HAL_ADCEx_MultiModeConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000c3a:	f000 fe4c 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c56:	2301      	movs	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c7a:	f001 fdf5 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 fe27 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c96:	f001 fde7 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ca0:	f000 fe19 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000cb2:	f001 fdd9 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000cbc:	f000 fe0b 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001f8 	.word	0x200001f8

08000ccc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2228      	movs	r2, #40	; 0x28
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 fb19 	bl	800731c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cec:	4a40      	ldr	r2, [pc, #256]	; (8000df0 <MX_ADC3_Init+0x124>)
 8000cee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cfc:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d36:	482d      	ldr	r0, [pc, #180]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d38:	f001 faa0 	bl	800227c <HAL_ADC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8000d42:	f000 fdc8 	bl	80018d6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4826      	ldr	r0, [pc, #152]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d52:	f002 f911 	bl	8002f78 <HAL_ADCEx_MultiModeConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f000 fdbb 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000d70:	2306      	movs	r3, #6
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d9c:	f001 fd64 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000da6:	f000 fd96 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000daa:	2305      	movs	r3, #5
 8000dac:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_ADC3_Init+0x120>)
 8000db8:	f001 fd56 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8000dc2:	f000 fd88 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_ADC3_Init+0x120>)
 8000dd4:	f001 fd48 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8000dde:	f000 fd7a 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000248 	.word	0x20000248
 8000df0:	50000400 	.word	0x50000400

08000df4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2228      	movs	r2, #40	; 0x28
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 fa8b 	bl	800731c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <MX_ADC4_Init+0xdc>)
 8000e0a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e54:	f001 fa12 	bl	800227c <HAL_ADC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC4_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 fd3a 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e62:	2303      	movs	r3, #3
 8000e64:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e72:	2306      	movs	r3, #6
 8000e74:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e98:	f001 fce6 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC4_Init+0xb2>
  {
    Error_Handler();
 8000ea2:	f000 fd18 	bl	80018d6 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000eb4:	f001 fcd8 	bl	8002868 <HAL_ADCEx_InjectedConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000ebe:	f000 fd0a 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000298 	.word	0x20000298
 8000ed0:	50000500 	.word	0x50000500

08000ed4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef4:	d14d      	bne.n	8000f92 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b85      	ldr	r3, [pc, #532]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a84      	ldr	r2, [pc, #528]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b82      	ldr	r3, [pc, #520]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a7e      	ldr	r2, [pc, #504]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b7c      	ldr	r3, [pc, #496]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f26:	2307      	movs	r3, #7
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f002 fd0c 	bl	8003958 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f40:	4b73      	ldr	r3, [pc, #460]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f42:	4a74      	ldr	r2, [pc, #464]	; (8001114 <HAL_ADC_MspInit+0x240>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4c:	4b70      	ldr	r3, [pc, #448]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f52:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f58:	4b6d      	ldr	r3, [pc, #436]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f68:	4b69      	ldr	r3, [pc, #420]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f74:	4866      	ldr	r0, [pc, #408]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f76:	f002 fbc8 	bl	800370a <HAL_DMA_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000f80:	f000 fca9 	bl	80018d6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a62      	ldr	r2, [pc, #392]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8a:	4a61      	ldr	r2, [pc, #388]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000f90:	e0b7      	b.n	8001102 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <HAL_ADC_MspInit+0x244>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d157      	bne.n	800104c <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a5e      	ldr	r2, [pc, #376]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000fa4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10b      	bne.n	8000fc6 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b51      	ldr	r3, [pc, #324]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a50      	ldr	r2, [pc, #320]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BOOST_V_Pin|BATT_CS_Pin|TEMP_COIL_1_Pin;
 8000fde:	f242 0303 	movw	r3, #8195	; 0x2003
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	484b      	ldr	r0, [pc, #300]	; (8001120 <HAL_ADC_MspInit+0x24c>)
 8000ff4:	f002 fcb0 	bl	8003958 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8000ffa:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_ADC_MspInit+0x254>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001004:	4b47      	ldr	r3, [pc, #284]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_ADC_MspInit+0x250>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001010:	4b44      	ldr	r3, [pc, #272]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001016:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001018:	4b42      	ldr	r3, [pc, #264]	; (8001124 <HAL_ADC_MspInit+0x250>)
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001022:	2220      	movs	r2, #32
 8001024:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800102e:	483d      	ldr	r0, [pc, #244]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001030:	f002 fb6b 	bl	800370a <HAL_DMA_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 800103a:	f000 fc4c 	bl	80018d6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a38      	ldr	r2, [pc, #224]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
 8001044:	4a37      	ldr	r2, [pc, #220]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6253      	str	r3, [r2, #36]	; 0x24
}
 800104a:	e05a      	b.n	8001102 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a36      	ldr	r2, [pc, #216]	; (800112c <HAL_ADC_MspInit+0x258>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d155      	bne.n	8001102 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_ADC_MspInit+0x248>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a2f      	ldr	r2, [pc, #188]	; (800111c <HAL_ADC_MspInit+0x248>)
 800105e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_ADC_MspInit+0x248>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d10b      	bne.n	8001080 <HAL_ADC_MspInit+0x1ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_ADC_MspInit+0x238>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <HAL_ADC_MspInit+0x238>)
 800106e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001072:	6153      	str	r3, [r2, #20]
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108a:	6153      	str	r3, [r2, #20]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_ADC_MspInit+0x238>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_FET_Pin|TEMP_COIL_2_Pin;
 8001098:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	481c      	ldr	r0, [pc, #112]	; (8001120 <HAL_ADC_MspInit+0x24c>)
 80010ae:	f002 fc53 	bl	8003958 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010b4:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_ADC_MspInit+0x260>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010dc:	2220      	movs	r2, #32
 80010de:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80010e6:	4812      	ldr	r0, [pc, #72]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010e8:	f002 fb0f 	bl	800370a <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 80010f2:	f000 fbf0 	bl	80018d6 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
 80010fc:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	200002e8 	.word	0x200002e8
 8001114:	40020008 	.word	0x40020008
 8001118:	50000400 	.word	0x50000400
 800111c:	200003b4 	.word	0x200003b4
 8001120:	48000400 	.word	0x48000400
 8001124:	2000032c 	.word	0x2000032c
 8001128:	40020458 	.word	0x40020458
 800112c:	50000500 	.word	0x50000500
 8001130:	20000370 	.word	0x20000370
 8001134:	4002041c 	.word	0x4002041c

08001138 <start_transmit>:
int8_t delta_x, delta_y;
uint8_t quality;
int32_t integral_x, integral_y;

void start_transmit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f002 fd81 	bl	8003c4c <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <end_transmit>:

void end_transmit(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f002 fd76 	bl	8003c4c <HAL_GPIO_WritePin>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <reset>:


static void reset(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af02      	add	r7, sp, #8
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <reset+0x48>)
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <reset+0x4c>)
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <reset+0x50>)
 8001178:	f004 fa4f 	bl	800561a <HAL_SPI_TransmitReceive>
    end_transmit();
 800117c:	f7ff ffe7 	bl	800114e <end_transmit>
    // set clk,nss polaryty


    HAL_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f001 f857 	bl	8002234 <HAL_Delay>

    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2140      	movs	r1, #64	; 0x40
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <reset+0x54>)
 800118c:	f002 fd5e 	bl	8003c4c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001190:	2001      	movs	r0, #1
 8001192:	f001 f84f 	bl	8002234 <HAL_Delay>
    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <reset+0x54>)
 800119c:	f002 fd56 	bl	8003c4c <HAL_GPIO_WritePin>

    HAL_Delay(250); // waiting for self-test
 80011a0:	20fa      	movs	r0, #250	; 0xfa
 80011a2:	f001 f847 	bl	8002234 <HAL_Delay>
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200003c8 	.word	0x200003c8
 80011b0:	200003b8 	.word	0x200003b8
 80011b4:	2000040c 	.word	0x2000040c
 80011b8:	48000400 	.word	0x48000400

080011bc <is_connect_ADNS3080>:

bool is_connect_ADNS3080(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af02      	add	r7, sp, #8
    HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2110      	movs	r1, #16
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f002 fd3f 	bl	8003c4c <HAL_GPIO_WritePin>

    reset();
 80011ce:	f7ff ffc9 	bl	8001164 <reset>


    start_transmit();
 80011d2:	f7ff ffb1 	bl	8001138 <start_transmit>

    sbuf[0] = ADNS3080_PRODUCT_ID;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <is_connect_ADNS3080+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2302      	movs	r3, #2
 80011e4:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <is_connect_ADNS3080+0x5c>)
 80011e6:	490b      	ldr	r1, [pc, #44]	; (8001214 <is_connect_ADNS3080+0x58>)
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <is_connect_ADNS3080+0x60>)
 80011ea:	f004 fa16 	bl	800561a <HAL_SPI_TransmitReceive>
    
    end_transmit();
 80011ee:	f7ff ffae 	bl	800114e <end_transmit>

    printf("SPI ID : %d\n", rbuf[1]);
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <is_connect_ADNS3080+0x5c>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <is_connect_ADNS3080+0x64>)
 80011fa:	f006 fd01 	bl	8007c00 <iprintf>

    if (rbuf[1] == ADNS3080_PRODUCT_ID_VALUE)
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <is_connect_ADNS3080+0x5c>)
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	2b17      	cmp	r3, #23
 8001204:	d101      	bne.n	800120a <is_connect_ADNS3080+0x4e>
    {
        return true;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <is_connect_ADNS3080+0x50>
    }
    else
    {
        return false;
 800120a:	2300      	movs	r3, #0
    }
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200003b8 	.word	0x200003b8
 8001218:	200003c8 	.word	0x200003c8
 800121c:	2000040c 	.word	0x2000040c
 8001220:	0800a0e8 	.word	0x0800a0e8

08001224 <init_ADNS3080>:

void init_ADNS3080(bool ips_1600)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af02      	add	r7, sp, #8
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
    delta_x = 0;
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <init_ADNS3080+0x8c>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
    delta_y = 0;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <init_ADNS3080+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
    quality = 0;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <init_ADNS3080+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
    integral_x = 0;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <init_ADNS3080+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
    integral_y = 0;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <init_ADNS3080+0x9c>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
    reset();
 800124c:	f7ff ff8a 	bl	8001164 <reset>


    start_transmit();
 8001250:	f7ff ff72 	bl	8001138 <start_transmit>

    sbuf[0] = ADNS3080_REG_WRITE & ADNS3080_CONFIGURATION_BITS; // config write
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <init_ADNS3080+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <init_ADNS3080+0xa4>)
 8001264:	4917      	ldr	r1, [pc, #92]	; (80012c4 <init_ADNS3080+0xa0>)
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <init_ADNS3080+0xa8>)
 8001268:	f004 f9d7 	bl	800561a <HAL_SPI_TransmitReceive>

    //delay >75us
    for (int i = 0; i < 1000; i++)
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e002      	b.n	8001278 <init_ADNS3080+0x54>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800127e:	dbf8      	blt.n	8001272 <init_ADNS3080+0x4e>
    {
    }

    uint8_t mouse_config = rbuf[1];
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <init_ADNS3080+0xa4>)
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	72fb      	strb	r3, [r7, #11]
    sbuf[0] = mouse_config | ADNS3080_BIT_1600IPS; // set 1600 ips
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <init_ADNS3080+0xa0>)
 8001290:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <init_ADNS3080+0xa4>)
 800129c:	4909      	ldr	r1, [pc, #36]	; (80012c4 <init_ADNS3080+0xa0>)
 800129e:	480b      	ldr	r0, [pc, #44]	; (80012cc <init_ADNS3080+0xa8>)
 80012a0:	f004 f9bb 	bl	800561a <HAL_SPI_TransmitReceive>
    
    end_transmit();
 80012a4:	f7ff ff53 	bl	800114e <end_transmit>
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200003d8 	.word	0x200003d8
 80012b4:	200003d9 	.word	0x200003d9
 80012b8:	200003da 	.word	0x200003da
 80012bc:	200003dc 	.word	0x200003dc
 80012c0:	200003e0 	.word	0x200003e0
 80012c4:	200003b8 	.word	0x200003b8
 80012c8:	200003c8 	.word	0x200003c8
 80012cc:	2000040c 	.word	0x2000040c

080012d0 <frame_print_ADNS3080>:
}
int32_t get_Y_ADNS3080(void){
    return integral_y;
}

void frame_print_ADNS3080(void){
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af02      	add	r7, sp, #8
    char scale[] = "#987654321-,.'` ";
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <frame_print_ADNS3080+0xc8>)
 80012d8:	1d3c      	adds	r4, r7, #4
 80012da:	461d      	mov	r5, r3
 80012dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	7023      	strb	r3, [r4, #0]
    sbuf[0] = ADNS3080_FRAME_CAPTURE | ADNS3080_REG_WRITE; // frame capture write
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <frame_print_ADNS3080+0xcc>)
 80012e6:	2293      	movs	r2, #147	; 0x93
 80012e8:	701a      	strb	r2, [r3, #0]
    sbuf[1] = ADNS3080_FRAME_CAPTURE_START;
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <frame_print_ADNS3080+0xcc>)
 80012ec:	2283      	movs	r2, #131	; 0x83
 80012ee:	705a      	strb	r2, [r3, #1]
    start_transmit();
 80012f0:	f7ff ff22 	bl	8001138 <start_transmit>
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2302      	movs	r3, #2
 80012fc:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <frame_print_ADNS3080+0xd0>)
 80012fe:	4927      	ldr	r1, [pc, #156]	; (800139c <frame_print_ADNS3080+0xcc>)
 8001300:	4828      	ldr	r0, [pc, #160]	; (80013a4 <frame_print_ADNS3080+0xd4>)
 8001302:	f004 f98a 	bl	800561a <HAL_SPI_TransmitReceive>
    end_transmit();
 8001306:	f7ff ff22 	bl	800114e <end_transmit>
    HAL_Delay(2);
 800130a:	2002      	movs	r0, #2
 800130c:	f000 ff92 	bl	8002234 <HAL_Delay>

    for (int pixel_x = 0; pixel_x < ADNS3080_PIXELS_X; pixel_x++)
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e035      	b.n	8001382 <frame_print_ADNS3080+0xb2>
    {
        for (int pixel_y = 0; pixel_y < ADNS3080_PIXELS_Y; pixel_y++)
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	e029      	b.n	8001370 <frame_print_ADNS3080+0xa0>
        {
            sbuf[0] = ADNS3080_FRAME_CAPTURE; // frame capture
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <frame_print_ADNS3080+0xcc>)
 800131e:	2213      	movs	r2, #19
 8001320:	701a      	strb	r2, [r3, #0]
            start_transmit();
 8001322:	f7ff ff09 	bl	8001138 <start_transmit>
            HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2302      	movs	r3, #2
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <frame_print_ADNS3080+0xd0>)
 8001330:	491a      	ldr	r1, [pc, #104]	; (800139c <frame_print_ADNS3080+0xcc>)
 8001332:	481c      	ldr	r0, [pc, #112]	; (80013a4 <frame_print_ADNS3080+0xd4>)
 8001334:	f004 f971 	bl	800561a <HAL_SPI_TransmitReceive>
            end_transmit();
 8001338:	f7ff ff09 	bl	800114e <end_transmit>

            printf("%c", scale[(rbuf[1] % 0x3F) >> 2]);
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <frame_print_ADNS3080+0xd0>)
 800133e:	785a      	ldrb	r2, [r3, #1]
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <frame_print_ADNS3080+0xd8>)
 8001342:	fba3 1302 	umull	r1, r3, r3, r2
 8001346:	1ad1      	subs	r1, r2, r3
 8001348:	0849      	lsrs	r1, r1, #1
 800134a:	440b      	add	r3, r1
 800134c:	0959      	lsrs	r1, r3, #5
 800134e:	460b      	mov	r3, r1
 8001350:	019b      	lsls	r3, r3, #6
 8001352:	1a5b      	subs	r3, r3, r1
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	b2db      	uxtb	r3, r3
 800135c:	3320      	adds	r3, #32
 800135e:	443b      	add	r3, r7
 8001360:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001364:	4618      	mov	r0, r3
 8001366:	f006 fc63 	bl	8007c30 <putchar>
        for (int pixel_y = 0; pixel_y < ADNS3080_PIXELS_Y; pixel_y++)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	3301      	adds	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b1d      	cmp	r3, #29
 8001374:	ddd2      	ble.n	800131c <frame_print_ADNS3080+0x4c>
        }
        printf("\n");
 8001376:	200a      	movs	r0, #10
 8001378:	f006 fc5a 	bl	8007c30 <putchar>
    for (int pixel_x = 0; pixel_x < ADNS3080_PIXELS_X; pixel_x++)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	3301      	adds	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2b1d      	cmp	r3, #29
 8001386:	ddc6      	ble.n	8001316 <frame_print_ADNS3080+0x46>
    }
    printf("\n\n");
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <frame_print_ADNS3080+0xdc>)
 800138a:	f006 fcd5 	bl	8007d38 <puts>
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	0800a0fc 	.word	0x0800a0fc
 800139c:	200003b8 	.word	0x200003b8
 80013a0:	200003c8 	.word	0x200003c8
 80013a4:	2000040c 	.word	0x2000040c
 80013a8:	04104105 	.word	0x04104105
 80013ac:	0800a0f8 	.word	0x0800a0f8

080013b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_CAN_Init+0x64>)
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <MX_CAN_Init+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_CAN_Init+0x64>)
 80013bc:	2202      	movs	r2, #2
 80013be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_CAN_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_CAN_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_CAN_Init+0x64>)
 80013ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_CAN_Init+0x64>)
 80013d6:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80013da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <MX_CAN_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_CAN_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_CAN_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_CAN_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_CAN_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_CAN_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_CAN_Init+0x64>)
 8001402:	f001 ff75 	bl	80032f0 <HAL_CAN_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800140c:	f000 fa63 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200003e4 	.word	0x200003e4
 8001418:	40006400 	.word	0x40006400

0800141c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <HAL_CAN_MspInit+0x80>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d129      	bne.n	8001492 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_CAN_MspInit+0x84>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_CAN_MspInit+0x84>)
 8001444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_CAN_MspInit+0x84>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_CAN_MspInit+0x84>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_CAN_MspInit+0x84>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	6153      	str	r3, [r2, #20]
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_CAN_MspInit+0x84>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800146e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001480:	2309      	movs	r3, #9
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f002 fa63 	bl	8003958 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40006400 	.word	0x40006400
 80014a0:	40021000 	.word	0x40021000

080014a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_DMA_Init+0x70>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <MX_DMA_Init+0x70>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_DMA_Init+0x70>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_DMA_Init+0x70>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_DMA_Init+0x70>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_DMA_Init+0x70>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	200b      	movs	r0, #11
 80014e0:	f002 f8dd 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014e4:	200b      	movs	r0, #11
 80014e6:	f002 f8f6 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2039      	movs	r0, #57	; 0x39
 80014f0:	f002 f8d5 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80014f4:	2039      	movs	r0, #57	; 0x39
 80014f6:	f002 f8ee 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	203c      	movs	r0, #60	; 0x3c
 8001500:	f002 f8cd 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001504:	203c      	movs	r0, #60	; 0x3c
 8001506:	f002 f8e6 	bl	80036d6 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b40      	ldr	r3, [pc, #256]	; (8001630 <MX_GPIO_Init+0x118>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	4a3f      	ldr	r2, [pc, #252]	; (8001630 <MX_GPIO_Init+0x118>)
 8001534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001538:	6153      	str	r3, [r2, #20]
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <MX_GPIO_Init+0x118>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <MX_GPIO_Init+0x118>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a39      	ldr	r2, [pc, #228]	; (8001630 <MX_GPIO_Init+0x118>)
 800154c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <MX_GPIO_Init+0x118>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b34      	ldr	r3, [pc, #208]	; (8001630 <MX_GPIO_Init+0x118>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <MX_GPIO_Init+0x118>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <MX_GPIO_Init+0x118>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <MX_GPIO_Init+0x118>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <MX_GPIO_Init+0x118>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <MX_GPIO_Init+0x118>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001594:	4827      	ldr	r0, [pc, #156]	; (8001634 <MX_GPIO_Init+0x11c>)
 8001596:	f002 fb59 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CURRENT_Pin|MOUSE_NSS_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f248 0110 	movw	r1, #32784	; 0x8010
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f002 fb52 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POWER_SW_EN_Pin|MOUSE_RST_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2144      	movs	r1, #68	; 0x44
 80015ac:	4822      	ldr	r0, [pc, #136]	; (8001638 <MX_GPIO_Init+0x120>)
 80015ae:	f002 fb4d 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80015b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	481a      	ldr	r0, [pc, #104]	; (8001634 <MX_GPIO_Init+0x11c>)
 80015cc:	f002 f9c4 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_CURRENT_Pin|MOUSE_NSS_Pin;
 80015d0:	f248 0310 	movw	r3, #32784	; 0x8010
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f002 f9b4 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_SW_EN_Pin|MOUSE_RST_Pin;
 80015f0:	2344      	movs	r3, #68	; 0x44
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <MX_GPIO_Init+0x120>)
 8001608:	f002 f9a6 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 800160c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_GPIO_Init+0x120>)
 8001622:	f002 f999 	bl	8003958 <HAL_GPIO_Init>

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	48000800 	.word	0x48000800
 8001638:	48000400 	.word	0x48000400

0800163c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif

void __io_putchar(uint8_t ch)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001646:	1df9      	adds	r1, r7, #7
 8001648:	2301      	movs	r3, #1
 800164a:	2201      	movs	r2, #1
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <__io_putchar+0x20>)
 800164e:	f005 fa21 	bl	8006a94 <HAL_UART_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000558 	.word	0x20000558

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f000 fd7f 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166a:	f000 f8d3 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166e:	f7ff ff53 	bl	8001518 <MX_GPIO_Init>
  MX_DMA_Init();
 8001672:	f7ff ff17 	bl	80014a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001676:	f7ff fa97 	bl	8000ba8 <MX_ADC1_Init>
  MX_ADC3_Init();
 800167a:	f7ff fb27 	bl	8000ccc <MX_ADC3_Init>
  MX_ADC4_Init();
 800167e:	f7ff fbb9 	bl	8000df4 <MX_ADC4_Init>
  MX_CAN_Init();
 8001682:	f7ff fe95 	bl	80013b0 <MX_CAN_Init>
  MX_SPI1_Init();
 8001686:	f000 f92b 	bl	80018e0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800168a:	f000 faef 	bl	8001c6c <MX_TIM2_Init>
  MX_TIM3_Init();
 800168e:	f000 fb47 	bl	8001d20 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001692:	f000 fccb 	bl	800202c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001696:	f000 fba9 	bl	8001dec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



  //kick
  HAL_TIM_PWM_Init(&htim3);
 800169a:	4850      	ldr	r0, [pc, #320]	; (80017dc <main+0x17c>)
 800169c:	f004 fb34 	bl	8005d08 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80016a0:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <main+0x17c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80016a8:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <main+0x17c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim3, 2000);
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <main+0x17c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <main+0x17c>)
 80016bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016c0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim3, 2000);
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <main+0x17c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <main+0x17c>)
 80016ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016d2:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016d4:	2100      	movs	r1, #0
 80016d6:	4841      	ldr	r0, [pc, #260]	; (80017dc <main+0x17c>)
 80016d8:	f004 fb6e 	bl	8005db8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016dc:	2104      	movs	r1, #4
 80016de:	483f      	ldr	r0, [pc, #252]	; (80017dc <main+0x17c>)
 80016e0:	f004 fb6a 	bl	8005db8 <HAL_TIM_PWM_Start>

  // boost
  HAL_TIM_PWM_Init(&htim2);
 80016e4:	483e      	ldr	r0, [pc, #248]	; (80017e0 <main+0x180>)
 80016e6:	f004 fb0f 	bl	8005d08 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <main+0x180>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2200      	movs	r2, #0
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 80016f2:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <main+0x180>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <main+0x180>)
 80016fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001702:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001704:	210c      	movs	r1, #12
 8001706:	4836      	ldr	r0, [pc, #216]	; (80017e0 <main+0x180>)
 8001708:	f004 fb56 	bl	8005db8 <HAL_TIM_PWM_Start>

  // GD negative PS
  HAL_TIM_PWM_Init(&htim4);
 800170c:	4835      	ldr	r0, [pc, #212]	; (80017e4 <main+0x184>)
 800170e:	f004 fafb 	bl	8005d08 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
 8001712:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <main+0x184>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800171a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim4, 2000);
 800171c:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <main+0x184>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
 8001726:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <main+0x184>)
 8001728:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800172c:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800172e:	2104      	movs	r1, #4
 8001730:	482c      	ldr	r0, [pc, #176]	; (80017e4 <main+0x184>)
 8001732:	f004 fb41 	bl	8005db8 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 8001736:	2064      	movs	r0, #100	; 0x64
 8001738:	f000 fd7c 	bl	8002234 <HAL_Delay>
  //wait charging



  setbuf(stdout, NULL);
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <main+0x188>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f006 faff 	bl	8007d48 <setbuf>

  HAL_UART_Init(&huart1);
 800174a:	4828      	ldr	r0, [pc, #160]	; (80017ec <main+0x18c>)
 800174c:	f005 f954 	bl	80069f8 <HAL_UART_Init>

  uint8_t data[] = "orion boost v1 start!!\n";
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <main+0x190>)
 8001752:	463c      	mov	r4, r7
 8001754:	461d      	mov	r5, r3
 8001756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800175e:	e884 0003 	stmia.w	r4, {r0, r1}

  HAL_UART_Transmit(&huart1, data, sizeof(data), 100);
 8001762:	4639      	mov	r1, r7
 8001764:	2364      	movs	r3, #100	; 0x64
 8001766:	2218      	movs	r2, #24
 8001768:	4820      	ldr	r0, [pc, #128]	; (80017ec <main+0x18c>)
 800176a:	f005 f993 	bl	8006a94 <HAL_UART_Transmit>
  printf("hogehoge %d ,%f\n", 10, 1.0);
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <main+0x194>)
 8001774:	210a      	movs	r1, #10
 8001776:	4820      	ldr	r0, [pc, #128]	; (80017f8 <main+0x198>)
 8001778:	f006 fa42 	bl	8007c00 <iprintf>

  static uint32_t loop_cnt = 0, kick_cnt = 0;
  float boost_v = 0,batt_v,gd_16p,gd_16m,batt_cs;
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  int temp_coil_1,temp_coil_2,temp_fet;
  int boost_cnt = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]


  HAL_ADC_Start(&hadc1);
 8001786:	481d      	ldr	r0, [pc, #116]	; (80017fc <main+0x19c>)
 8001788:	f000 ff58 	bl	800263c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800178c:	481c      	ldr	r0, [pc, #112]	; (8001800 <main+0x1a0>)
 800178e:	f000 ff55 	bl	800263c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 8001792:	481c      	ldr	r0, [pc, #112]	; (8001804 <main+0x1a4>)
 8001794:	f000 ff52 	bl	800263c <HAL_ADC_Start>

  HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	2104      	movs	r1, #4
 800179c:	481a      	ldr	r0, [pc, #104]	; (8001808 <main+0x1a8>)
 800179e:	f002 fa55 	bl	8003c4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2110      	movs	r1, #16
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f002 fa4f 	bl	8003c4c <HAL_GPIO_WritePin>

  if (is_connect_ADNS3080())
 80017ae:	f7ff fd05 	bl	80011bc <is_connect_ADNS3080>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <main+0x166>
  {
    printf("ADNS3080 OK!\n");
 80017b8:	4814      	ldr	r0, [pc, #80]	; (800180c <main+0x1ac>)
 80017ba:	f006 fabd 	bl	8007d38 <puts>
      /* code */
    }
    
  }

  init_ADNS3080(true);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fd30 	bl	8001224 <init_ADNS3080>
 80017c4:	e003      	b.n	80017ce <main+0x16e>
    printf("ADNS3080 not found...\n");
 80017c6:	4812      	ldr	r0, [pc, #72]	; (8001810 <main+0x1b0>)
 80017c8:	f006 fab6 	bl	8007d38 <puts>
    while (1)
 80017cc:	e7fe      	b.n	80017cc <main+0x16c>

  while(1){
    frame_print_ADNS3080();
 80017ce:	f7ff fd7f 	bl	80012d0 <frame_print_ADNS3080>
    //update_ADNS3080();
    //printf("%+3d %+3d %4d\n",get_DeltaX_ADNS3080(),get_DeltaY_ADNS3080(),get_Qualty_ADNS3080());

    HAL_Delay(100);
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	f000 fd2e 	bl	8002234 <HAL_Delay>
    frame_print_ADNS3080();
 80017d8:	e7f9      	b.n	80017ce <main+0x16e>
 80017da:	bf00      	nop
 80017dc:	200004c0 	.word	0x200004c0
 80017e0:	20000474 	.word	0x20000474
 80017e4:	2000050c 	.word	0x2000050c
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000558 	.word	0x20000558
 80017f0:	0800a14c 	.word	0x0800a14c
 80017f4:	3ff00000 	.word	0x3ff00000
 80017f8:	0800a110 	.word	0x0800a110
 80017fc:	200001f8 	.word	0x200001f8
 8001800:	20000248 	.word	0x20000248
 8001804:	20000298 	.word	0x20000298
 8001808:	48000400 	.word	0x48000400
 800180c:	0800a124 	.word	0x0800a124
 8001810:	0800a134 	.word	0x0800a134

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b09e      	sub	sp, #120	; 0x78
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800181e:	2228      	movs	r2, #40	; 0x28
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f005 fd7a 	bl	800731c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	223c      	movs	r2, #60	; 0x3c
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f005 fd6c 	bl	800731c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001844:	2301      	movs	r3, #1
 8001846:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001852:	2301      	movs	r3, #1
 8001854:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001860:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001864:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001866:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fa06 	bl	8003c7c <HAL_RCC_OscConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001876:	f000 f82e 	bl	80018d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	230f      	movs	r3, #15
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800187e:	2302      	movs	r3, #2
 8001880:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001894:	2102      	movs	r1, #2
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fa2e 	bl	8004cf8 <HAL_RCC_ClockConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018a2:	f000 f818 	bl	80018d6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 80018a6:	f240 1381 	movw	r3, #385	; 0x181
 80018aa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80018b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 fc50 	bl	8005164 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80018ca:	f000 f804 	bl	80018d6 <Error_Handler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3778      	adds	r7, #120	; 0x78
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018da:	b672      	cpsid	i
}
 80018dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018de:	e7fe      	b.n	80018de <Error_Handler+0x8>

080018e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_SPI1_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <MX_SPI1_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_SPI1_Init+0x74>)
 80018ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_SPI1_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_SPI1_Init+0x74>)
 80018fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_SPI1_Init+0x74>)
 8001902:	2202      	movs	r2, #2
 8001904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_SPI1_Init+0x74>)
 8001908:	2201      	movs	r2, #1
 800190a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_SPI1_Init+0x74>)
 800190e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_SPI1_Init+0x74>)
 8001916:	2220      	movs	r2, #32
 8001918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_SPI1_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_SPI1_Init+0x74>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_SPI1_Init+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_SPI1_Init+0x74>)
 800192e:	2207      	movs	r2, #7
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_SPI1_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_SPI1_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_SPI1_Init+0x74>)
 8001940:	f003 fdc0 	bl	80054c4 <HAL_SPI_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800194a:	f7ff ffc4 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000040c 	.word	0x2000040c
 8001958:	40013000 	.word	0x40013000

0800195c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_SPI_MspInit+0x7c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d127      	bne.n	80019ce <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_SPI_MspInit+0x80>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <HAL_SPI_MspInit+0x80>)
 8001984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_SPI_MspInit+0x80>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_SPI_MspInit+0x80>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_SPI_MspInit+0x80>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a0:	6153      	str	r3, [r2, #20]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_SPI_MspInit+0x80>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019ae:	2338      	movs	r3, #56	; 0x38
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019be:	2305      	movs	r3, #5
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_SPI_MspInit+0x84>)
 80019ca:	f001 ffc5 	bl	8003958 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40013000 	.word	0x40013000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000400 	.word	0x48000400

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_MspInit+0x44>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_MspInit+0x44>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6193      	str	r3, [r2, #24]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_MspInit+0x44>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x44>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_MspInit+0x44>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_MspInit+0x44>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 fbbc 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <DMA1_Channel1_IRQHandler+0x10>)
 8001a86:	f001 fe87 	bl	8003798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002e8 	.word	0x200002e8

08001a94 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <DMA2_Channel2_IRQHandler+0x10>)
 8001a9a:	f001 fe7d 	bl	8003798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000370 	.word	0x20000370

08001aa8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA2_Channel5_IRQHandler+0x10>)
 8001aae:	f001 fe73 	bl	8003798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000032c 	.word	0x2000032c

08001abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
	return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_kill>:

int _kill(int pid, int sig)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ad6:	f005 fbf7 	bl	80072c8 <__errno>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2216      	movs	r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_exit>:

void _exit (int status)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffe7 	bl	8001acc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001afe:	e7fe      	b.n	8001afe <_exit+0x12>

08001b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e00a      	b.n	8001b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b12:	f3af 8000 	nop.w
 8001b16:	4601      	mov	r1, r0
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf0      	blt.n	8001b12 <_read+0x12>
	}

return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e009      	b.n	8001b60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fd71 	bl	800163c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbf1      	blt.n	8001b4c <_write+0x12>
	}
	return len;
 8001b68:	687b      	ldr	r3, [r7, #4]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_close>:

int _close(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_isatty>:

int _isatty(int file)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
	return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f005 fb5c 	bl	80072c8 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20008000 	.word	0x20008000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	20000470 	.word	0x20000470
 8001c44:	200005f0 	.word	0x200005f0

08001c48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <SystemInit+0x20>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <SystemInit+0x20>)
 8001c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	615a      	str	r2, [r3, #20]
 8001c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001ca6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb8:	4818      	ldr	r0, [pc, #96]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001cba:	f004 f825 	bl	8005d08 <HAL_TIM_PWM_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001cc4:	f7ff fe07 	bl	80018d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4811      	ldr	r0, [pc, #68]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001cd8:	f004 fe0e 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ce2:	f7ff fdf8 	bl	80018d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce6:	2360      	movs	r3, #96	; 0x60
 8001ce8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	220c      	movs	r2, #12
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001cfe:	f004 f95b 	bl	8005fb8 <HAL_TIM_PWM_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d08:	f7ff fde5 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <MX_TIM2_Init+0xb0>)
 8001d0e:	f000 f90d 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000474 	.word	0x20000474

08001d20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	463b      	mov	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	615a      	str	r2, [r3, #20]
 8001d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d46:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <MX_TIM3_Init+0xc8>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d58:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001d5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d6c:	f003 ffcc 	bl	8005d08 <HAL_TIM_PWM_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001d76:	f7ff fdae 	bl	80018d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4816      	ldr	r0, [pc, #88]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001d8a:	f004 fdb5 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001d94:	f7ff fd9f 	bl	80018d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d98:	2360      	movs	r3, #96	; 0x60
 8001d9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	4619      	mov	r1, r3
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001db0:	f004 f902 	bl	8005fb8 <HAL_TIM_PWM_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001dba:	f7ff fd8c 	bl	80018d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001dc6:	f004 f8f7 	bl	8005fb8 <HAL_TIM_PWM_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001dd0:	f7ff fd81 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <MX_TIM3_Init+0xc4>)
 8001dd6:	f000 f8a9 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200004c0 	.word	0x200004c0
 8001de8:	40000400 	.word	0x40000400

08001dec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	615a      	str	r2, [r3, #20]
 8001e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e10:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e12:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <MX_TIM4_Init+0xb0>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e24:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001e28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e36:	4818      	ldr	r0, [pc, #96]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e38:	f003 ff66 	bl	8005d08 <HAL_TIM_PWM_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e42:	f7ff fd48 	bl	80018d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	4810      	ldr	r0, [pc, #64]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e56:	f004 fd4f 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e60:	f7ff fd39 	bl	80018d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e64:	2360      	movs	r3, #96	; 0x60
 8001e66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	2204      	movs	r2, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e7c:	f004 f89c 	bl	8005fb8 <HAL_TIM_PWM_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e86:	f7ff fd26 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM4_Init+0xac>)
 8001e8c:	f000 f84e 	bl	8001f2c <HAL_TIM_MspPostInit>

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000050c 	.word	0x2000050c
 8001e9c:	40000800 	.word	0x40000800

08001ea0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001eca:	e022      	b.n	8001f12 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_TIM_PWM_MspInit+0x84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	61d3      	str	r3, [r2, #28]
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
}
 8001eee:	e010      	b.n	8001f12 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <HAL_TIM_PWM_MspInit+0x88>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10b      	bne.n	8001f12 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_TIM_PWM_MspInit+0x80>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800

08001f2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4c:	d11d      	bne.n	8001f8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4a32      	ldr	r2, [pc, #200]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	6153      	str	r3, [r2, #20]
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BOOST_SW_Pin;
 8001f66:	2308      	movs	r3, #8
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f76:	2301      	movs	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_SW_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f001 fce8 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f88:	e043      	b.n	8002012 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a24      	ldr	r2, [pc, #144]	; (8002020 <HAL_TIM_MspPostInit+0xf4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d11d      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	6153      	str	r3, [r2, #20]
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = KICK_1_Pin|KICK_2_Pin;
 8001fac:	23c0      	movs	r3, #192	; 0xc0
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fca:	f001 fcc5 	bl	8003958 <HAL_GPIO_Init>
}
 8001fce:	e020      	b.n	8002012 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_TIM_MspPostInit+0xf8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11b      	bne.n	8002012 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe4:	6153      	str	r3, [r2, #20]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_TIM_MspPostInit+0xf0>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD_16M_PWM_Pin;
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002002:	2302      	movs	r3, #2
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GD_16M_PWM_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <HAL_TIM_MspPostInit+0xfc>)
 800200e:	f001 fca3 	bl	8003958 <HAL_GPIO_Init>
}
 8002012:	bf00      	nop
 8002014:	3728      	adds	r7, #40	; 0x28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40000400 	.word	0x40000400
 8002024:	40000800 	.word	0x40000800
 8002028:	48000400 	.word	0x48000400

0800202c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_USART1_UART_Init+0x54>)
 8002032:	4a14      	ldr	r2, [pc, #80]	; (8002084 <MX_USART1_UART_Init+0x58>)
 8002034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MX_USART1_UART_Init+0x54>)
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <MX_USART1_UART_Init+0x5c>)
 800203a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <MX_USART1_UART_Init+0x54>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_USART1_UART_Init+0x54>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <MX_USART1_UART_Init+0x54>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_USART1_UART_Init+0x54>)
 8002050:	220c      	movs	r2, #12
 8002052:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <MX_USART1_UART_Init+0x54>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_USART1_UART_Init+0x54>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MX_USART1_UART_Init+0x54>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_USART1_UART_Init+0x54>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206c:	4804      	ldr	r0, [pc, #16]	; (8002080 <MX_USART1_UART_Init+0x54>)
 800206e:	f004 fcc3 	bl	80069f8 <HAL_UART_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8002078:	f7ff fc2d 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000558 	.word	0x20000558
 8002084:	40013800 	.word	0x40013800
 8002088:	001e8480 	.word	0x001e8480

0800208c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_UART_MspInit+0x80>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d129      	bne.n	8002102 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_UART_MspInit+0x84>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_UART_MspInit+0x84>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6193      	str	r3, [r2, #24]
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_UART_MspInit+0x84>)
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_UART_MspInit+0x84>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4a11      	ldr	r2, [pc, #68]	; (8002110 <HAL_UART_MspInit+0x84>)
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	6153      	str	r3, [r2, #20]
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_UART_MspInit+0x84>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f0:	2307      	movs	r3, #7
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f001 fc2b 	bl	8003958 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	; 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40013800 	.word	0x40013800
 8002110:	40021000 	.word	0x40021000

08002114 <Reset_Handler>:
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800214c <LoopForever+0x2>
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <LoopForever+0x6>)
 800211a:	490e      	ldr	r1, [pc, #56]	; (8002154 <LoopForever+0xa>)
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <LoopForever+0xe>)
 800211e:	2300      	movs	r3, #0
 8002120:	e002      	b.n	8002128 <LoopCopyDataInit>

08002122 <CopyDataInit>:
 8002122:	58d4      	ldr	r4, [r2, r3]
 8002124:	50c4      	str	r4, [r0, r3]
 8002126:	3304      	adds	r3, #4

08002128 <LoopCopyDataInit>:
 8002128:	18c4      	adds	r4, r0, r3
 800212a:	428c      	cmp	r4, r1
 800212c:	d3f9      	bcc.n	8002122 <CopyDataInit>
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <LoopForever+0x12>)
 8002130:	4c0b      	ldr	r4, [pc, #44]	; (8002160 <LoopForever+0x16>)
 8002132:	2300      	movs	r3, #0
 8002134:	e001      	b.n	800213a <LoopFillZerobss>

08002136 <FillZerobss>:
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	3204      	adds	r2, #4

0800213a <LoopFillZerobss>:
 800213a:	42a2      	cmp	r2, r4
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>
 800213e:	f7ff fd83 	bl	8001c48 <SystemInit>
 8002142:	f005 f8c7 	bl	80072d4 <__libc_init_array>
 8002146:	f7ff fa8b 	bl	8001660 <main>

0800214a <LoopForever>:
 800214a:	e7fe      	b.n	800214a <LoopForever>
 800214c:	20008000 	.word	0x20008000
 8002150:	20000000 	.word	0x20000000
 8002154:	200001dc 	.word	0x200001dc
 8002158:	0800a57c 	.word	0x0800a57c
 800215c:	200001dc 	.word	0x200001dc
 8002160:	200005f0 	.word	0x200005f0

08002164 <ADC1_2_IRQHandler>:
 8002164:	e7fe      	b.n	8002164 <ADC1_2_IRQHandler>
	...

08002168 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x28>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x28>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f001 fa85 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	200f      	movs	r0, #15
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff fc2e 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fa9d 	bl	80036f2 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f001 fa65 	bl	800369e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	200005dc 	.word	0x200005dc

0800221c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200005dc 	.word	0x200005dc

08002234 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008

0800227c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b09a      	sub	sp, #104	; 0x68
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e1c9      	b.n	8002630 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d176      	bne.n	800239c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d152      	bne.n	800235c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fe fdff 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d13b      	bne.n	800235c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 ff9d 	bl	8003224 <ADC_Disable>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d12f      	bne.n	800235c <HAL_ADC_Init+0xe0>
 80022fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002300:	2b00      	cmp	r3, #0
 8002302:	d12b      	bne.n	800235c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800230c:	f023 0302 	bic.w	r3, r3, #2
 8002310:	f043 0202 	orr.w	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002326:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002336:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002338:	4b86      	ldr	r3, [pc, #536]	; (8002554 <HAL_ADC_Init+0x2d8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a86      	ldr	r2, [pc, #536]	; (8002558 <HAL_ADC_Init+0x2dc>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9a      	lsrs	r2, r3, #18
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800234e:	e002      	b.n	8002356 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	3b01      	subs	r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002378:	d110      	bne.n	800239c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f023 0312 	bic.w	r3, r3, #18
 8002382:	f043 0210 	orr.w	r2, r3, #16
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 8136 	bne.w	8002616 <HAL_ADC_Init+0x39a>
 80023aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8131 	bne.w	8002616 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 8129 	bne.w	8002616 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023cc:	f043 0202 	orr.w	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023dc:	d004      	beq.n	80023e8 <HAL_ADC_Init+0x16c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5e      	ldr	r2, [pc, #376]	; (800255c <HAL_ADC_Init+0x2e0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_Init+0x170>
 80023e8:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <HAL_ADC_Init+0x2e4>)
 80023ea:	e000      	b.n	80023ee <HAL_ADC_Init+0x172>
 80023ec:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <HAL_ADC_Init+0x2e8>)
 80023ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f8:	d102      	bne.n	8002400 <HAL_ADC_Init+0x184>
 80023fa:	4b58      	ldr	r3, [pc, #352]	; (800255c <HAL_ADC_Init+0x2e0>)
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e01a      	b.n	8002436 <HAL_ADC_Init+0x1ba>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a55      	ldr	r2, [pc, #340]	; (800255c <HAL_ADC_Init+0x2e0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d103      	bne.n	8002412 <HAL_ADC_Init+0x196>
 800240a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e011      	b.n	8002436 <HAL_ADC_Init+0x1ba>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_ADC_Init+0x2ec>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_ADC_Init+0x1a6>
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_ADC_Init+0x2f0>)
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e009      	b.n	8002436 <HAL_ADC_Init+0x1ba>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a51      	ldr	r2, [pc, #324]	; (800256c <HAL_ADC_Init+0x2f0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d102      	bne.n	8002432 <HAL_ADC_Init+0x1b6>
 800242c:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <HAL_ADC_Init+0x2ec>)
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e001      	b.n	8002436 <HAL_ADC_Init+0x1ba>
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d108      	bne.n	8002456 <HAL_ADC_Init+0x1da>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Init+0x1da>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_ADC_Init+0x1dc>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11c      	bne.n	8002496 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800245c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_ADC_Init+0x202>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_ADC_Init+0x202>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_ADC_Init+0x204>
 800247e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002480:	2b00      	cmp	r3, #0
 8002482:	d108      	bne.n	8002496 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	431a      	orrs	r2, r3
 8002492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002494:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7e5b      	ldrb	r3, [r3, #25]
 800249a:	035b      	lsls	r3, r3, #13
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a0:	2a01      	cmp	r2, #1
 80024a2:	d002      	beq.n	80024aa <HAL_ADC_Init+0x22e>
 80024a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024a8:	e000      	b.n	80024ac <HAL_ADC_Init+0x230>
 80024aa:	2200      	movs	r2, #0
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024bc:	4313      	orrs	r3, r2
 80024be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d11b      	bne.n	8002502 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7e5b      	ldrb	r3, [r3, #25]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	3b01      	subs	r3, #1
 80024d8:	045a      	lsls	r2, r3, #17
 80024da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024dc:	4313      	orrs	r3, r2
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	663b      	str	r3, [r7, #96]	; 0x60
 80024e4:	e00d      	b.n	8002502 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024ee:	f043 0220 	orr.w	r2, r3, #32
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f043 0201 	orr.w	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	2b01      	cmp	r3, #1
 8002508:	d03a      	beq.n	8002580 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_ADC_Init+0x2ec>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_ADC_Init+0x2a2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_ADC_Init+0x2f0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d128      	bne.n	8002570 <HAL_ADC_Init+0x2f4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002526:	d012      	beq.n	800254e <HAL_ADC_Init+0x2d2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002530:	d00a      	beq.n	8002548 <HAL_ADC_Init+0x2cc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800253a:	d002      	beq.n	8002542 <HAL_ADC_Init+0x2c6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	e018      	b.n	8002574 <HAL_ADC_Init+0x2f8>
 8002542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002546:	e015      	b.n	8002574 <HAL_ADC_Init+0x2f8>
 8002548:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800254c:	e012      	b.n	8002574 <HAL_ADC_Init+0x2f8>
 800254e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002552:	e00f      	b.n	8002574 <HAL_ADC_Init+0x2f8>
 8002554:	20000000 	.word	0x20000000
 8002558:	431bde83 	.word	0x431bde83
 800255c:	50000100 	.word	0x50000100
 8002560:	50000300 	.word	0x50000300
 8002564:	50000700 	.word	0x50000700
 8002568:	50000400 	.word	0x50000400
 800256c:	50000500 	.word	0x50000500
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002578:	4313      	orrs	r3, r2
 800257a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800257c:	4313      	orrs	r3, r2
 800257e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d114      	bne.n	80025b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800259c:	f023 0302 	bic.w	r3, r3, #2
 80025a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7e1b      	ldrb	r3, [r3, #24]
 80025a6:	039a      	lsls	r2, r3, #14
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4313      	orrs	r3, r2
 80025b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025b4:	4313      	orrs	r3, r2
 80025b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_ADC_Init+0x3bc>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80025c8:	430b      	orrs	r3, r1
 80025ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10c      	bne.n	80025ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f023 010f 	bic.w	r1, r3, #15
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
 80025ec:	e007      	b.n	80025fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020f 	bic.w	r2, r2, #15
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f023 0303 	bic.w	r3, r3, #3
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
 8002614:	e00a      	b.n	800262c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f023 0312 	bic.w	r3, r3, #18
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800262c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002630:	4618      	mov	r0, r3
 8002632:	3768      	adds	r7, #104	; 0x68
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	fff0c007 	.word	0xfff0c007

0800263c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 80f9 	bne.w	800284a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_ADC_Start+0x2a>
 8002662:	2302      	movs	r3, #2
 8002664:	e0f4      	b.n	8002850 <HAL_ADC_Start+0x214>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fd74 	bl	800315c <ADC_Enable>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 80e0 	bne.w	8002840 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_Start+0x6c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6d      	ldr	r2, [pc, #436]	; (8002858 <HAL_ADC_Start+0x21c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d106      	bne.n	80026b6 <HAL_ADC_Start+0x7a>
 80026a8:	4b6c      	ldr	r3, [pc, #432]	; (800285c <HAL_ADC_Start+0x220>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d010      	beq.n	80026d6 <HAL_ADC_Start+0x9a>
 80026b4:	e005      	b.n	80026c2 <HAL_ADC_Start+0x86>
 80026b6:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_ADC_Start+0x224>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_ADC_Start+0x9a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_Start+0x9a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a64      	ldr	r2, [pc, #400]	; (8002864 <HAL_ADC_Start+0x228>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d115      	bne.n	8002702 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d036      	beq.n	800275e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002700:	e02d      	b.n	800275e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002716:	d004      	beq.n	8002722 <HAL_ADC_Start+0xe6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <HAL_ADC_Start+0x21c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10a      	bne.n	8002738 <HAL_ADC_Start+0xfc>
 8002722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e008      	b.n	800274a <HAL_ADC_Start+0x10e>
 8002738:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <HAL_ADC_Start+0x228>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002756:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	d106      	bne.n	800277a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f023 0206 	bic.w	r2, r3, #6
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
 8002778:	e002      	b.n	8002780 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	221c      	movs	r2, #28
 800278e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002798:	d004      	beq.n	80027a4 <HAL_ADC_Start+0x168>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_ADC_Start+0x21c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d106      	bne.n	80027b2 <HAL_ADC_Start+0x176>
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_ADC_Start+0x220>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03e      	beq.n	800282e <HAL_ADC_Start+0x1f2>
 80027b0:	e005      	b.n	80027be <HAL_ADC_Start+0x182>
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <HAL_ADC_Start+0x224>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d037      	beq.n	800282e <HAL_ADC_Start+0x1f2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c6:	d004      	beq.n	80027d2 <HAL_ADC_Start+0x196>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_ADC_Start+0x21c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_Start+0x1a4>
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_ADC_Start+0x220>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2b05      	cmp	r3, #5
 80027dc:	d027      	beq.n	800282e <HAL_ADC_Start+0x1f2>
 80027de:	e005      	b.n	80027ec <HAL_ADC_Start+0x1b0>
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <HAL_ADC_Start+0x224>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d020      	beq.n	800282e <HAL_ADC_Start+0x1f2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_Start+0x1c4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_ADC_Start+0x21c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d106      	bne.n	800280e <HAL_ADC_Start+0x1d2>
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_ADC_Start+0x220>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2b09      	cmp	r3, #9
 800280a:	d010      	beq.n	800282e <HAL_ADC_Start+0x1f2>
 800280c:	e005      	b.n	800281a <HAL_ADC_Start+0x1de>
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <HAL_ADC_Start+0x224>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2b09      	cmp	r3, #9
 8002818:	d009      	beq.n	800282e <HAL_ADC_Start+0x1f2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002822:	d004      	beq.n	800282e <HAL_ADC_Start+0x1f2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_ADC_Start+0x228>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10f      	bne.n	800284e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0204 	orr.w	r2, r2, #4
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e006      	b.n	800284e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002848:	e001      	b.n	800284e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	50000100 	.word	0x50000100
 800285c:	50000300 	.word	0x50000300
 8002860:	50000700 	.word	0x50000700
 8002864:	50000400 	.word	0x50000400

08002868 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002868:	b480      	push	{r7}
 800286a:	b09d      	sub	sp, #116	; 0x74
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ADCEx_InjectedConfigChannel+0x26>
 800288a:	2302      	movs	r3, #2
 800288c:	e364      	b.n	8002f58 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d151      	bne.n	800294a <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d143      	bne.n	8002936 <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d02b      	beq.n	800290e <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	021a      	lsls	r2, r3, #8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4984      	ldr	r1, [pc, #528]	; (8002ad4 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80028c2:	428b      	cmp	r3, r1
 80028c4:	d004      	beq.n	80028d0 <HAL_ADCEx_InjectedConfigChannel+0x68>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4983      	ldr	r1, [pc, #524]	; (8002ad8 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d114      	bne.n	80028fa <HAL_ADCEx_InjectedConfigChannel+0x92>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d00e      	beq.n	80028f6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	2b14      	cmp	r3, #20
 80028de:	d008      	beq.n	80028f2 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	2b1c      	cmp	r3, #28
 80028e6:	d002      	beq.n	80028ee <HAL_ADCEx_InjectedConfigChannel+0x86>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	e007      	b.n	80028fe <HAL_ADCEx_InjectedConfigChannel+0x96>
 80028ee:	2310      	movs	r3, #16
 80028f0:	e005      	b.n	80028fe <HAL_ADCEx_InjectedConfigChannel+0x96>
 80028f2:	231c      	movs	r3, #28
 80028f4:	e003      	b.n	80028fe <HAL_ADCEx_InjectedConfigChannel+0x96>
 80028f6:	2334      	movs	r3, #52	; 0x34
 80028f8:	e001      	b.n	80028fe <HAL_ADCEx_InjectedConfigChannel+0x96>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	431a      	orrs	r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	4313      	orrs	r3, r2
 8002906:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002908:	4313      	orrs	r3, r2
 800290a:	66bb      	str	r3, [r7, #104]	; 0x68
 800290c:	e005      	b.n	800291a <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002916:	4313      	orrs	r3, r2
 8002918:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002920:	4b6e      	ldr	r3, [pc, #440]	; (8002adc <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8002922:	4013      	ands	r3, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800292a:	430b      	orrs	r3, r1
 800292c:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002932:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002934:	e07f      	b.n	8002a36 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002948:	e075      	b.n	8002a36 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d140      	bne.n	80029d4 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d02d      	beq.n	80029c4 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	1e59      	subs	r1, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4857      	ldr	r0, [pc, #348]	; (8002ad4 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8002978:	4283      	cmp	r3, r0
 800297a:	d004      	beq.n	8002986 <HAL_ADCEx_InjectedConfigChannel+0x11e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4855      	ldr	r0, [pc, #340]	; (8002ad8 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8002982:	4283      	cmp	r3, r0
 8002984:	d114      	bne.n	80029b0 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d00e      	beq.n	80029ac <HAL_ADCEx_InjectedConfigChannel+0x144>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2b14      	cmp	r3, #20
 8002994:	d008      	beq.n	80029a8 <HAL_ADCEx_InjectedConfigChannel+0x140>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	2b1c      	cmp	r3, #28
 800299c:	d002      	beq.n	80029a4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	e007      	b.n	80029b4 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80029a4:	2310      	movs	r3, #16
 80029a6:	e005      	b.n	80029b4 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80029a8:	231c      	movs	r3, #28
 80029aa:	e003      	b.n	80029b4 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80029ac:	2334      	movs	r3, #52	; 0x34
 80029ae:	e001      	b.n	80029b4 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4319      	orrs	r1, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	430b      	orrs	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	649a      	str	r2, [r3, #72]	; 0x48
 80029c2:	e007      	b.n	80029d4 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	3302      	adds	r3, #2
 80029e6:	221f      	movs	r2, #31
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	4019      	ands	r1, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	3302      	adds	r3, #2
 8002a02:	fa00 f303 	lsl.w	r3, r0, r3
 8002a06:	ea41 0203 	orr.w	r2, r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	1e5a      	subs	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a26:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	430b      	orrs	r3, r1
 8002a34:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d12d      	bne.n	8002aa0 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	7f5b      	ldrb	r3, [r3, #29]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d110      	bne.n	8002a6e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	7f9b      	ldrb	r3, [r3, #30]
 8002a5a:	055a      	lsls	r2, r3, #21
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	7f1b      	ldrb	r3, [r3, #28]
 8002a60:	051b      	lsls	r3, r3, #20
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	e018      	b.n	8002aa0 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	7f9b      	ldrb	r3, [r3, #30]
 8002a7c:	055a      	lsls	r2, r3, #21
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7f1b      	ldrb	r3, [r3, #28]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 8111 	bne.w	8002cd2 <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d113      	bne.n	8002ae0 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	7f5b      	ldrb	r3, [r3, #29]
 8002ac6:	065a      	lsls	r2, r3, #25
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e01b      	b.n	8002b0a <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8002ad2:	bf00      	nop
 8002ad4:	50000400 	.word	0x50000400
 8002ad8:	50000500 	.word	0x50000500
 8002adc:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002aee:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	7f5b      	ldrb	r3, [r3, #29]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d108      	bne.n	8002b0a <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	d91c      	bls.n	8002b4c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6999      	ldr	r1, [r3, #24]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	3b1e      	subs	r3, #30
 8002b24:	2207      	movs	r2, #7
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4019      	ands	r1, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6898      	ldr	r0, [r3, #8]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b1e      	subs	r3, #30
 8002b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
 8002b4a:	e019      	b.n	8002b80 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6959      	ldr	r1, [r3, #20]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	4019      	ands	r1, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6898      	ldr	r0, [r3, #8]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	fa00 f203 	lsl.w	r2, r0, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	08db      	lsrs	r3, r3, #3
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d84e      	bhi.n	8002c40 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002bdb 	.word	0x08002bdb
 8002bb0:	08002bfd 	.word	0x08002bfd
 8002bb4:	08002c1f 	.word	0x08002c1f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bbe:	4b9a      	ldr	r3, [pc, #616]	; (8002e28 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	0691      	lsls	r1, r2, #26
 8002bc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bd6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002bd8:	e07e      	b.n	8002cd8 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002be0:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	0691      	lsls	r1, r2, #26
 8002bea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bec:	430a      	orrs	r2, r1
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bf8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002bfa:	e06d      	b.n	8002cd8 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c02:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	0691      	lsls	r1, r2, #26
 8002c0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c1a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002c1c:	e05c      	b.n	8002cd8 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c24:	4b80      	ldr	r3, [pc, #512]	; (8002e28 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	0691      	lsls	r1, r2, #26
 8002c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c30:	430a      	orrs	r2, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c3c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002c3e:	e04b      	b.n	8002cd8 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d107      	bne.n	8002c64 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c62:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	069b      	lsls	r3, r3, #26
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d107      	bne.n	8002c88 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c86:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	069b      	lsls	r3, r3, #26
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d107      	bne.n	8002cac <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002caa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	069b      	lsls	r3, r3, #26
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cce:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002cd0:	e001      	b.n	8002cd6 <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8002cd6:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d108      	bne.n	8002cf8 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_ADCEx_InjectedConfigChannel+0x492>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8126 	bne.w	8002f4c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d00f      	beq.n	8002d28 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	400a      	ands	r2, r1
 8002d22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002d26:	e049      	b.n	8002dbc <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2201      	movs	r2, #1
 8002d36:	409a      	lsls	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d91c      	bls.n	8002d84 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6999      	ldr	r1, [r3, #24]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b1b      	subs	r3, #27
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	4019      	ands	r1, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6898      	ldr	r0, [r3, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	3b1b      	subs	r3, #27
 8002d76:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	619a      	str	r2, [r3, #24]
 8002d82:	e01b      	b.n	8002dbc <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6959      	ldr	r1, [r3, #20]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	2207      	movs	r2, #7
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	4019      	ands	r1, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6898      	ldr	r0, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	fa00 f203 	lsl.w	r2, r0, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_ADCEx_InjectedConfigChannel+0x5cc>)
 8002dd6:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d105      	bne.n	8002dec <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002df0:	2b11      	cmp	r3, #17
 8002df2:	d105      	bne.n	8002e00 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	f040 80a1 	bne.w	8002f4c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 809a 	bne.w	8002f4c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e20:	d10a      	bne.n	8002e38 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
 8002e22:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	e022      	b.n	8002e6e <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002e28:	83fff000 	.word	0x83fff000
 8002e2c:	50000100 	.word	0x50000100
 8002e30:	50000300 	.word	0x50000300
 8002e34:	50000700 	.word	0x50000700
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a49      	ldr	r2, [pc, #292]	; (8002f64 <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d103      	bne.n	8002e4a <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8002e42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e011      	b.n	8002e6e <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a46      	ldr	r2, [pc, #280]	; (8002f68 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d102      	bne.n	8002e5a <HAL_ADCEx_InjectedConfigChannel+0x5f2>
 8002e54:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	e009      	b.n	8002e6e <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a43      	ldr	r2, [pc, #268]	; (8002f6c <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d102      	bne.n	8002e6a <HAL_ADCEx_InjectedConfigChannel+0x602>
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	e001      	b.n	8002e6e <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d108      	bne.n	8002e8e <HAL_ADCEx_InjectedConfigChannel+0x626>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_ADCEx_InjectedConfigChannel+0x626>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d150      	bne.n	8002f36 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e94:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <HAL_ADCEx_InjectedConfigChannel+0x654>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d107      	bne.n	8002eb6 <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8002eb6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d13c      	bne.n	8002f36 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d11d      	bne.n	8002f00 <HAL_ADCEx_InjectedConfigChannel+0x698>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d118      	bne.n	8002f00 <HAL_ADCEx_InjectedConfigChannel+0x698>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ed8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	0c9a      	lsrs	r2, r3, #18
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002ef0:	e002      	b.n	8002ef8 <HAL_ADCEx_InjectedConfigChannel+0x690>
          {
            wait_loop_index--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f9      	bne.n	8002ef2 <HAL_ADCEx_InjectedConfigChannel+0x68a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002efe:	e024      	b.n	8002f4a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b11      	cmp	r3, #17
 8002f06:	d10b      	bne.n	8002f20 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f10:	d106      	bne.n	8002f20 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1c:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f1e:	e014      	b.n	8002f4a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d110      	bne.n	8002f4a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f32:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f34:	e009      	b.n	8002f4a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002f48:	e000      	b.n	8002f4c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f4a:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3774      	adds	r7, #116	; 0x74
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	50000100 	.word	0x50000100
 8002f68:	50000400 	.word	0x50000400
 8002f6c:	50000500 	.word	0x50000500
 8002f70:	20000000 	.word	0x20000000
 8002f74:	431bde83 	.word	0x431bde83

08002f78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b099      	sub	sp, #100	; 0x64
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f90:	d102      	bne.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002f92:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	e01a      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6a      	ldr	r2, [pc, #424]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d103      	bne.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002fa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	e011      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a67      	ldr	r2, [pc, #412]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d102      	bne.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fb4:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	e009      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a64      	ldr	r2, [pc, #400]	; (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d102      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fc4:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e001      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b0      	b.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0a9      	b.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f040 808d 	bne.w	8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 8086 	bne.w	8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003014:	d004      	beq.n	8003020 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4b      	ldr	r2, [pc, #300]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003020:	4b4c      	ldr	r3, [pc, #304]	; (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003022:	e000      	b.n	8003026 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003026:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d040      	beq.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003042:	035b      	lsls	r3, r3, #13
 8003044:	430b      	orrs	r3, r1
 8003046:	431a      	orrs	r2, r3
 8003048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800304a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d15c      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d107      	bne.n	800308e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800308e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003090:	2b00      	cmp	r3, #0
 8003092:	d14b      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	6811      	ldr	r1, [r2, #0]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	6892      	ldr	r2, [r2, #8]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030b0:	e03c      	b.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d108      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d123      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003100:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d112      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800310e:	f023 030f 	bic.w	r3, r3, #15
 8003112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003114:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003116:	e009      	b.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800312a:	e000      	b.n	800312e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800312c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800313a:	4618      	mov	r0, r3
 800313c:	3764      	adds	r7, #100	; 0x64
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	50000100 	.word	0x50000100
 800314c:	50000400 	.word	0x50000400
 8003150:	50000500 	.word	0x50000500
 8003154:	50000300 	.word	0x50000300
 8003158:	50000700 	.word	0x50000700

0800315c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d108      	bne.n	8003188 <ADC_Enable+0x2c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <ADC_Enable+0x2c>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <ADC_Enable+0x2e>
 8003188:	2300      	movs	r3, #0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d143      	bne.n	8003216 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <ADC_Enable+0xc4>)
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e02f      	b.n	8003218 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80031c8:	f7ff f828 	bl	800221c <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031ce:	e01b      	b.n	8003208 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031d0:	f7ff f824 	bl	800221c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d914      	bls.n	8003208 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d00d      	beq.n	8003208 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d1dc      	bne.n	80031d0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	8000003f 	.word	0x8000003f

08003224 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d108      	bne.n	8003250 <ADC_Disable+0x2c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <ADC_Disable+0x2c>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <ADC_Disable+0x2e>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d047      	beq.n	80032e6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030d 	and.w	r3, r3, #13
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10f      	bne.n	8003284 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0202 	orr.w	r2, r2, #2
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2203      	movs	r2, #3
 800327a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800327c:	f7fe ffce 	bl	800221c <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003282:	e029      	b.n	80032d8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0210 	orr.w	r2, r3, #16
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e023      	b.n	80032e8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032a0:	f7fe ffbc 	bl	800221c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d914      	bls.n	80032d8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d10d      	bne.n	80032d8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0210 	orr.w	r2, r3, #16
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e007      	b.n	80032e8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d0dc      	beq.n	80032a0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0ed      	b.n	80034de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe f884 	bl	800141c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003324:	f7fe ff7a 	bl	800221c <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800332a:	e012      	b.n	8003352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800332c:	f7fe ff76 	bl	800221c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b0a      	cmp	r3, #10
 8003338:	d90b      	bls.n	8003352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0c5      	b.n	80034de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0e5      	beq.n	800332c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0202 	bic.w	r2, r2, #2
 800336e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003370:	f7fe ff54 	bl	800221c <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003376:	e012      	b.n	800339e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003378:	f7fe ff50 	bl	800221c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b0a      	cmp	r3, #10
 8003384:	d90b      	bls.n	800339e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2205      	movs	r2, #5
 8003396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e09f      	b.n	80034de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d108      	bne.n	80033c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e007      	b.n	80033d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7e5b      	ldrb	r3, [r3, #25]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d108      	bne.n	80033f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e9b      	ldrb	r3, [r3, #26]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d108      	bne.n	800341a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0220 	orr.w	r2, r2, #32
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e007      	b.n	800342a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0220 	bic.w	r2, r2, #32
 8003428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7edb      	ldrb	r3, [r3, #27]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0210 	bic.w	r2, r2, #16
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e007      	b.n	8003454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0210 	orr.w	r2, r2, #16
 8003452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7f1b      	ldrb	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0208 	orr.w	r2, r2, #8
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7f5b      	ldrb	r3, [r3, #29]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0204 	orr.w	r2, r2, #4
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	ea42 0103 	orr.w	r1, r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	; (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003654:	d301      	bcc.n	800365a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003656:	2301      	movs	r3, #1
 8003658:	e00f      	b.n	800367a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <SysTick_Config+0x40>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003662:	210f      	movs	r1, #15
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7ff ff8e 	bl	8003588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Config+0x40>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SysTick_Config+0x40>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff29 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b0:	f7ff ff3e 	bl	8003530 <__NVIC_GetPriorityGrouping>
 80036b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff8e 	bl	80035dc <NVIC_EncodePriority>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff5d 	bl	8003588 <__NVIC_SetPriority>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff31 	bl	800354c <__NVIC_EnableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffa2 	bl	8003644 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e037      	b.n	8003790 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003736:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800373a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003744:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003750:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8b4 	bl	80038e0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}  
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2204      	movs	r2, #4
 80037b6:	409a      	lsls	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d024      	beq.n	800380a <HAL_DMA_IRQHandler+0x72>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01f      	beq.n	800380a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	2104      	movs	r1, #4
 80037f2:	fa01 f202 	lsl.w	r2, r1, r2
 80037f6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d06a      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003808:	e065      	b.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	2202      	movs	r2, #2
 8003810:	409a      	lsls	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_IRQHandler+0xdc>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d027      	beq.n	8003874 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 020a 	bic.w	r2, r2, #10
 8003840:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	2102      	movs	r1, #2
 8003854:	fa01 f202 	lsl.w	r2, r1, r2
 8003858:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d035      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003872:	e030      	b.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2208      	movs	r2, #8
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d028      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d023      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 020e 	bic.w	r2, r2, #14
 800389c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
    }
  }
}  
 80038d4:	e7ff      	b.n	80038d6 <HAL_DMA_IRQHandler+0x13e>
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <DMA_CalcBaseAndBitshift+0x60>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d80f      	bhi.n	8003914 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <DMA_CalcBaseAndBitshift+0x64>)
 80038fc:	4413      	add	r3, r2
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <DMA_CalcBaseAndBitshift+0x68>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	009a      	lsls	r2, r3, #2
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0f      	ldr	r2, [pc, #60]	; (800394c <DMA_CalcBaseAndBitshift+0x6c>)
 8003910:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003912:	e00e      	b.n	8003932 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <DMA_CalcBaseAndBitshift+0x70>)
 800391c:	4413      	add	r3, r2
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <DMA_CalcBaseAndBitshift+0x68>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	009a      	lsls	r2, r3, #2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <DMA_CalcBaseAndBitshift+0x74>)
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40020407 	.word	0x40020407
 8003944:	bffdfff8 	.word	0xbffdfff8
 8003948:	cccccccd 	.word	0xcccccccd
 800394c:	40020000 	.word	0x40020000
 8003950:	bffdfbf8 	.word	0xbffdfbf8
 8003954:	40020400 	.word	0x40020400

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003966:	e154      	b.n	8003c12 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8146 	beq.w	8003c0c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d005      	beq.n	8003998 <HAL_GPIO_Init+0x40>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d130      	bne.n	80039fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ce:	2201      	movs	r2, #1
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 0201 	and.w	r2, r3, #1
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d017      	beq.n	8003a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	2203      	movs	r2, #3
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d123      	bne.n	8003a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	08da      	lsrs	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3208      	adds	r2, #8
 8003a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3208      	adds	r2, #8
 8003a84:	6939      	ldr	r1, [r7, #16]
 8003a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	2203      	movs	r2, #3
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0203 	and.w	r2, r3, #3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a0 	beq.w	8003c0c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003acc:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <HAL_GPIO_Init+0x2d8>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4a57      	ldr	r2, [pc, #348]	; (8003c30 <HAL_GPIO_Init+0x2d8>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6193      	str	r3, [r2, #24]
 8003ad8:	4b55      	ldr	r3, [pc, #340]	; (8003c30 <HAL_GPIO_Init+0x2d8>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ae4:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_GPIO_Init+0x2dc>)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	3302      	adds	r3, #2
 8003aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b0e:	d019      	beq.n	8003b44 <HAL_GPIO_Init+0x1ec>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a49      	ldr	r2, [pc, #292]	; (8003c38 <HAL_GPIO_Init+0x2e0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_GPIO_Init+0x1e8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a48      	ldr	r2, [pc, #288]	; (8003c3c <HAL_GPIO_Init+0x2e4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00d      	beq.n	8003b3c <HAL_GPIO_Init+0x1e4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a47      	ldr	r2, [pc, #284]	; (8003c40 <HAL_GPIO_Init+0x2e8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <HAL_GPIO_Init+0x1e0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a46      	ldr	r2, [pc, #280]	; (8003c44 <HAL_GPIO_Init+0x2ec>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_GPIO_Init+0x1dc>
 8003b30:	2304      	movs	r3, #4
 8003b32:	e008      	b.n	8003b46 <HAL_GPIO_Init+0x1ee>
 8003b34:	2305      	movs	r3, #5
 8003b36:	e006      	b.n	8003b46 <HAL_GPIO_Init+0x1ee>
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e004      	b.n	8003b46 <HAL_GPIO_Init+0x1ee>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e002      	b.n	8003b46 <HAL_GPIO_Init+0x1ee>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_GPIO_Init+0x1ee>
 8003b44:	2300      	movs	r3, #0
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	f002 0203 	and.w	r2, r2, #3
 8003b4c:	0092      	lsls	r2, r2, #2
 8003b4e:	4093      	lsls	r3, r2
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b56:	4937      	ldr	r1, [pc, #220]	; (8003c34 <HAL_GPIO_Init+0x2dc>)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b64:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b88:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b8e:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bb2:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bb8:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f47f aea3 	bne.w	8003968 <HAL_GPIO_Init+0x10>
  }
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40010000 	.word	0x40010000
 8003c38:	48000400 	.word	0x48000400
 8003c3c:	48000800 	.word	0x48000800
 8003c40:	48000c00 	.word	0x48000c00
 8003c44:	48001000 	.word	0x48001000
 8003c48:	40010400 	.word	0x40010400

08003c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c5c:	787b      	ldrb	r3, [r7, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c68:	e002      	b.n	8003c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c6a:	887a      	ldrh	r2, [r7, #2]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f001 b823 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 817d 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cb8:	4bbc      	ldr	r3, [pc, #752]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d00c      	beq.n	8003cde <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cc4:	4bb9      	ldr	r3, [pc, #740]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d15c      	bne.n	8003d8a <HAL_RCC_OscConfig+0x10e>
 8003cd0:	4bb6      	ldr	r3, [pc, #728]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cdc:	d155      	bne.n	8003d8a <HAL_RCC_OscConfig+0x10e>
 8003cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d102      	bne.n	8003d10 <HAL_RCC_OscConfig+0x94>
 8003d0a:	4ba8      	ldr	r3, [pc, #672]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	e015      	b.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003d38:	4b9c      	ldr	r3, [pc, #624]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003d44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d48:	fa92 f2a2 	rbit	r2, r2
 8003d4c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003d50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003d54:	fab2 f282 	clz	r2, r2
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	f042 0220 	orr.w	r2, r2, #32
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	f002 021f 	and.w	r2, r2, #31
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 811f 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x334>
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 8116 	bne.w	8003fb0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f000 bfaf 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9a:	d106      	bne.n	8003daa <HAL_RCC_OscConfig+0x12e>
 8003d9c:	4b83      	ldr	r3, [pc, #524]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a82      	ldr	r2, [pc, #520]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	e036      	b.n	8003e18 <HAL_RCC_OscConfig+0x19c>
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x158>
 8003dba:	4b7c      	ldr	r3, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7b      	ldr	r2, [pc, #492]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b79      	ldr	r3, [pc, #484]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a78      	ldr	r2, [pc, #480]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e021      	b.n	8003e18 <HAL_RCC_OscConfig+0x19c>
 8003dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x184>
 8003de6:	4b71      	ldr	r3, [pc, #452]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a70      	ldr	r2, [pc, #448]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b6e      	ldr	r3, [pc, #440]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x19c>
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a69      	ldr	r2, [pc, #420]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b67      	ldr	r3, [pc, #412]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a66      	ldr	r2, [pc, #408]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e16:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e18:	4b64      	ldr	r3, [pc, #400]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	f023 020f 	bic.w	r2, r3, #15
 8003e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	495f      	ldr	r1, [pc, #380]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d059      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7fe f9eb 	bl	800221c <HAL_GetTick>
 8003e46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fe f9e6 	bl	800221c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b64      	cmp	r3, #100	; 0x64
 8003e5a:	d902      	bls.n	8003e62 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	f000 bf43 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
 8003e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e66:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003e6e:	fa93 f3a3 	rbit	r3, r3
 8003e72:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003e76:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	fab3 f383 	clz	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_RCC_OscConfig+0x218>
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	e015      	b.n	8003ec0 <HAL_RCC_OscConfig+0x244>
 8003e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e98:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003eb0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ec4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003ec8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003ecc:	fa92 f2a2 	rbit	r2, r2
 8003ed0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ed4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ed8:	fab2 f282 	clz	r2, r2
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	f042 0220 	orr.w	r2, r2, #32
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	f002 021f 	and.w	r2, r2, #31
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f202 	lsl.w	r2, r1, r2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ab      	beq.n	8003e4c <HAL_RCC_OscConfig+0x1d0>
 8003ef4:	e05d      	b.n	8003fb2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef6:	f7fe f991 	bl	800221c <HAL_GetTick>
 8003efa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe f98c 	bl	800221c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b64      	cmp	r3, #100	; 0x64
 8003f0e:	d902      	bls.n	8003f16 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	f000 bee9 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
 8003f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f1a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003f2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d102      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2cc>
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	e015      	b.n	8003f74 <HAL_RCC_OscConfig+0x2f8>
 8003f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f4c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f60:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f64:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003f70:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <HAL_RCC_OscConfig+0x330>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f78:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003f7c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f80:	fa92 f2a2 	rbit	r2, r2
 8003f84:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003f88:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	f002 021f 	and.w	r2, r2, #31
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ab      	bne.n	8003f00 <HAL_RCC_OscConfig+0x284>
 8003fa8:	e003      	b.n	8003fb2 <HAL_RCC_OscConfig+0x336>
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 817d 	beq.w	80042c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fc8:	4ba6      	ldr	r3, [pc, #664]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fd4:	4ba3      	ldr	r3, [pc, #652]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d172      	bne.n	80040c6 <HAL_RCC_OscConfig+0x44a>
 8003fe0:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d16c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x44a>
 8003fec:	2302      	movs	r3, #2
 8003fee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ff6:	fa93 f3a3 	rbit	r3, r3
 8003ffa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003ffe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d102      	bne.n	800401c <HAL_RCC_OscConfig+0x3a0>
 8004016:	4b93      	ldr	r3, [pc, #588]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	e013      	b.n	8004044 <HAL_RCC_OscConfig+0x3c8>
 800401c:	2302      	movs	r3, #2
 800401e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800402e:	2302      	movs	r3, #2
 8004030:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004034:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004040:	4b88      	ldr	r3, [pc, #544]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2202      	movs	r2, #2
 8004046:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800404a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800404e:	fa92 f2a2 	rbit	r2, r2
 8004052:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004056:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800405a:	fab2 f282 	clz	r2, r2
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	f042 0220 	orr.w	r2, r2, #32
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	f002 021f 	and.w	r2, r2, #31
 800406a:	2101      	movs	r1, #1
 800406c:	fa01 f202 	lsl.w	r2, r1, r2
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCC_OscConfig+0x410>
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d002      	beq.n	800408c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f000 be2e 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408c:	4b75      	ldr	r3, [pc, #468]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	21f8      	movs	r1, #248	; 0xf8
 80040a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80040aa:	fa91 f1a1 	rbit	r1, r1
 80040ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80040b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80040b6:	fab1 f181 	clz	r1, r1
 80040ba:	b2c9      	uxtb	r1, r1
 80040bc:	408b      	lsls	r3, r1
 80040be:	4969      	ldr	r1, [pc, #420]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c4:	e0fd      	b.n	80042c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8088 	beq.w	80041e8 <HAL_RCC_OscConfig+0x56c>
 80040d8:	2301      	movs	r3, #1
 80040da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80040ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	461a      	mov	r2, r3
 8004100:	2301      	movs	r3, #1
 8004102:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fe f88a 	bl	800221c <HAL_GetTick>
 8004108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410e:	f7fe f885 	bl	800221c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d902      	bls.n	8004124 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	f000 bde2 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
 8004124:	2302      	movs	r3, #2
 8004126:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004136:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d102      	bne.n	8004154 <HAL_RCC_OscConfig+0x4d8>
 800414e:	4b45      	ldr	r3, [pc, #276]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	e013      	b.n	800417c <HAL_RCC_OscConfig+0x500>
 8004154:	2302      	movs	r3, #2
 8004156:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004166:	2302      	movs	r3, #2
 8004168:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800416c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2202      	movs	r2, #2
 800417e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004182:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004186:	fa92 f2a2 	rbit	r2, r2
 800418a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800418e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004192:	fab2 f282 	clz	r2, r2
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f042 0220 	orr.w	r2, r2, #32
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	f002 021f 	and.w	r2, r2, #31
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f202 	lsl.w	r2, r1, r2
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0af      	beq.n	800410e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	21f8      	movs	r1, #248	; 0xf8
 80041c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80041cc:	fa91 f1a1 	rbit	r1, r1
 80041d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80041d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80041d8:	fab1 f181 	clz	r1, r1
 80041dc:	b2c9      	uxtb	r1, r1
 80041de:	408b      	lsls	r3, r1
 80041e0:	4920      	ldr	r1, [pc, #128]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
 80041e6:	e06c      	b.n	80042c2 <HAL_RCC_OscConfig+0x646>
 80041e8:	2301      	movs	r3, #1
 80041ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80041fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004208:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe f802 	bl	800221c <HAL_GetTick>
 8004218:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421e:	f7fd fffd 	bl	800221c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d902      	bls.n	8004234 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	f000 bd5a 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
 8004234:	2302      	movs	r3, #2
 8004236:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d104      	bne.n	8004268 <HAL_RCC_OscConfig+0x5ec>
 800425e:	4b01      	ldr	r3, [pc, #4]	; (8004264 <HAL_RCC_OscConfig+0x5e8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e015      	b.n	8004290 <HAL_RCC_OscConfig+0x614>
 8004264:	40021000 	.word	0x40021000
 8004268:	2302      	movs	r3, #2
 800426a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800427a:	2302      	movs	r3, #2
 800427c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004280:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004284:	fa93 f3a3 	rbit	r3, r3
 8004288:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800428c:	4bc8      	ldr	r3, [pc, #800]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2202      	movs	r2, #2
 8004292:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004296:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800429a:	fa92 f2a2 	rbit	r2, r2
 800429e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80042a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80042a6:	fab2 f282 	clz	r2, r2
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	f042 0220 	orr.w	r2, r2, #32
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	f002 021f 	and.w	r2, r2, #31
 80042b6:	2101      	movs	r1, #1
 80042b8:	fa01 f202 	lsl.w	r2, r1, r2
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ad      	bne.n	800421e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8110 	beq.w	80044f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d079      	beq.n	80043dc <HAL_RCC_OscConfig+0x760>
 80042e8:	2301      	movs	r3, #1
 80042ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80042fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	4bab      	ldr	r3, [pc, #684]	; (80045b4 <HAL_RCC_OscConfig+0x938>)
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	461a      	mov	r2, r3
 800430e:	2301      	movs	r3, #1
 8004310:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7fd ff83 	bl	800221c <HAL_GetTick>
 8004316:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431c:	f7fd ff7e 	bl	800221c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d902      	bls.n	8004332 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	f000 bcdb 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
 8004332:	2302      	movs	r3, #2
 8004334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004348:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800434c:	2202      	movs	r2, #2
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004354:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	fa93 f2a3 	rbit	r2, r3
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800438a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438c:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 800438e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004394:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004398:	2102      	movs	r1, #2
 800439a:	6019      	str	r1, [r3, #0]
 800439c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	fa93 f1a3 	rbit	r1, r3
 80043aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043b2:	6019      	str	r1, [r3, #0]
  return result;
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2101      	movs	r1, #1
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0a0      	beq.n	800431c <HAL_RCC_OscConfig+0x6a0>
 80043da:	e08d      	b.n	80044f8 <HAL_RCC_OscConfig+0x87c>
 80043dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	fa93 f2a3 	rbit	r2, r3
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043fe:	601a      	str	r2, [r3, #0]
  return result;
 8004400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004404:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004408:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	4b68      	ldr	r3, [pc, #416]	; (80045b4 <HAL_RCC_OscConfig+0x938>)
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	461a      	mov	r2, r3
 800441a:	2300      	movs	r3, #0
 800441c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441e:	f7fd fefd 	bl	800221c <HAL_GetTick>
 8004422:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004428:	f7fd fef8 	bl	800221c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d902      	bls.n	800443e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	f000 bc55 	b.w	8004ce8 <HAL_RCC_OscConfig+0x106c>
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004446:	2202      	movs	r2, #2
 8004448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	fa93 f2a3 	rbit	r2, r3
 8004458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004466:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800446a:	2202      	movs	r2, #2
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004472:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	fa93 f2a3 	rbit	r2, r3
 800447c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800448e:	2202      	movs	r2, #2
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	fa93 f2a3 	rbit	r2, r3
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80044a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 80044ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044b6:	2102      	movs	r1, #2
 80044b8:	6019      	str	r1, [r3, #0]
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	fa93 f1a3 	rbit	r1, r3
 80044c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044d0:	6019      	str	r1, [r3, #0]
  return result;
 80044d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	fab3 f383 	clz	r3, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2101      	movs	r1, #1
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d197      	bne.n	8004428 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 81a1 	beq.w	8004850 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d116      	bne.n	800454e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004520:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	4a22      	ldr	r2, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	61d3      	str	r3, [r2, #28]
 800452c:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004542:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004546:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_RCC_OscConfig+0x93c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d11a      	bne.n	8004590 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <HAL_RCC_OscConfig+0x93c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <HAL_RCC_OscConfig+0x93c>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004566:	f7fd fe59 	bl	800221c <HAL_GetTick>
 800456a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456e:	e009      	b.n	8004584 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004570:	f7fd fe54 	bl	800221c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b64      	cmp	r3, #100	; 0x64
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e3b1      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <HAL_RCC_OscConfig+0x93c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ef      	beq.n	8004570 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d10d      	bne.n	80045bc <HAL_RCC_OscConfig+0x940>
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4a02      	ldr	r2, [pc, #8]	; (80045b0 <HAL_RCC_OscConfig+0x934>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6213      	str	r3, [r2, #32]
 80045ac:	e03c      	b.n	8004628 <HAL_RCC_OscConfig+0x9ac>
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	10908120 	.word	0x10908120
 80045b8:	40007000 	.word	0x40007000
 80045bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10c      	bne.n	80045e6 <HAL_RCC_OscConfig+0x96a>
 80045cc:	4bc1      	ldr	r3, [pc, #772]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4ac0      	ldr	r2, [pc, #768]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6213      	str	r3, [r2, #32]
 80045d8:	4bbe      	ldr	r3, [pc, #760]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4abd      	ldr	r2, [pc, #756]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6213      	str	r3, [r2, #32]
 80045e4:	e020      	b.n	8004628 <HAL_RCC_OscConfig+0x9ac>
 80045e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x994>
 80045f6:	4bb7      	ldr	r3, [pc, #732]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4ab6      	ldr	r2, [pc, #728]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80045fc:	f043 0304 	orr.w	r3, r3, #4
 8004600:	6213      	str	r3, [r2, #32]
 8004602:	4bb4      	ldr	r3, [pc, #720]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4ab3      	ldr	r2, [pc, #716]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6213      	str	r3, [r2, #32]
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0x9ac>
 8004610:	4bb0      	ldr	r3, [pc, #704]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4aaf      	ldr	r2, [pc, #700]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6213      	str	r3, [r2, #32]
 800461c:	4bad      	ldr	r3, [pc, #692]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	4aac      	ldr	r2, [pc, #688]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8081 	beq.w	800473c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463a:	f7fd fdef 	bl	800221c <HAL_GetTick>
 800463e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fd fdea 	bl	800221c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e345      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
 800465c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004660:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004664:	2202      	movs	r2, #2
 8004666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	fa93 f2a3 	rbit	r2, r3
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004684:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004690:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	fa93 f2a3 	rbit	r2, r3
 800469a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046a2:	601a      	str	r2, [r3, #0]
  return result;
 80046a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d102      	bne.n	80046c8 <HAL_RCC_OscConfig+0xa4c>
 80046c2:	4b84      	ldr	r3, [pc, #528]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	e013      	b.n	80046f0 <HAL_RCC_OscConfig+0xa74>
 80046c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046d0:	2202      	movs	r2, #2
 80046d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	fa93 f2a3 	rbit	r2, r3
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	4b79      	ldr	r3, [pc, #484]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80046f8:	2102      	movs	r1, #2
 80046fa:	6011      	str	r1, [r2, #0]
 80046fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004700:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	fa92 f1a2 	rbit	r1, r2
 800470a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800470e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004712:	6011      	str	r1, [r2, #0]
  return result;
 8004714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004718:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	fab2 f282 	clz	r2, r2
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	f002 021f 	and.w	r2, r2, #31
 800472e:	2101      	movs	r1, #1
 8004730:	fa01 f202 	lsl.w	r2, r1, r2
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d084      	beq.n	8004644 <HAL_RCC_OscConfig+0x9c8>
 800473a:	e07f      	b.n	800483c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473c:	f7fd fd6e 	bl	800221c <HAL_GetTick>
 8004740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004744:	e00b      	b.n	800475e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fd fd69 	bl	800221c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e2c4      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004766:	2202      	movs	r2, #2
 8004768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	fa93 f2a3 	rbit	r2, r3
 8004778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004786:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800478a:	2202      	movs	r2, #2
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004792:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	fa93 f2a3 	rbit	r2, r3
 800479c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047a4:	601a      	str	r2, [r3, #0]
  return result;
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	fab3 f383 	clz	r3, r3
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d102      	bne.n	80047ca <HAL_RCC_OscConfig+0xb4e>
 80047c4:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	e013      	b.n	80047f2 <HAL_RCC_OscConfig+0xb76>
 80047ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047d2:	2202      	movs	r2, #2
 80047d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	fa93 f2a3 	rbit	r2, r3
 80047e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80047fa:	2102      	movs	r1, #2
 80047fc:	6011      	str	r1, [r2, #0]
 80047fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004802:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	fa92 f1a2 	rbit	r1, r2
 800480c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004810:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004814:	6011      	str	r1, [r2, #0]
  return result;
 8004816:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800481a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	fab2 f282 	clz	r2, r2
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	f002 021f 	and.w	r2, r2, #31
 8004830:	2101      	movs	r1, #1
 8004832:	fa01 f202 	lsl.w	r2, r1, r2
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d184      	bne.n	8004746 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800483c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004854:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8242 	beq.w	8004ce6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004862:	4b1c      	ldr	r3, [pc, #112]	; (80048d4 <HAL_RCC_OscConfig+0xc58>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b08      	cmp	r3, #8
 800486c:	f000 8213 	beq.w	8004c96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004874:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b02      	cmp	r3, #2
 800487e:	f040 8162 	bne.w	8004b46 <HAL_RCC_OscConfig+0xeca>
 8004882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004886:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800488a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800488e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004894:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	fa93 f2a3 	rbit	r2, r3
 800489e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048a6:	601a      	str	r2, [r3, #0]
  return result;
 80048a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	461a      	mov	r2, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fd fca8 	bl	800221c <HAL_GetTick>
 80048cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d0:	e00c      	b.n	80048ec <HAL_RCC_OscConfig+0xc70>
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd fca0 	bl	800221c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e1fd      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
 80048ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fa93 f2a3 	rbit	r2, r3
 8004908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004910:	601a      	str	r2, [r3, #0]
  return result;
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800491a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491c:	fab3 f383 	clz	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d102      	bne.n	8004936 <HAL_RCC_OscConfig+0xcba>
 8004930:	4bb0      	ldr	r3, [pc, #704]	; (8004bf4 <HAL_RCC_OscConfig+0xf78>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	e027      	b.n	8004986 <HAL_RCC_OscConfig+0xd0a>
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800493e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	fa93 f2a3 	rbit	r2, r3
 8004978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4b9c      	ldr	r3, [pc, #624]	; (8004bf4 <HAL_RCC_OscConfig+0xf78>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800498a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800498e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004992:	6011      	str	r1, [r2, #0]
 8004994:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004998:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	fa92 f1a2 	rbit	r1, r2
 80049a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049aa:	6011      	str	r1, [r2, #0]
  return result;
 80049ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f002 021f 	and.w	r2, r2, #31
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d182      	bne.n	80048d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d2:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0xf78>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	430b      	orrs	r3, r1
 80049f4:	497f      	ldr	r1, [pc, #508]	; (8004bf4 <HAL_RCC_OscConfig+0xf78>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]
 80049fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004a02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	fa93 f2a3 	rbit	r2, r3
 8004a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a1e:	601a      	str	r2, [r3, #0]
  return result;
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fd fbec 	bl	800221c <HAL_GetTick>
 8004a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a48:	e009      	b.n	8004a5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fd fbe7 	bl	800221c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e144      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	fa93 f2a3 	rbit	r2, r3
 8004a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a82:	601a      	str	r2, [r3, #0]
  return result;
 8004a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d102      	bne.n	8004aa8 <HAL_RCC_OscConfig+0xe2c>
 8004aa2:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <HAL_RCC_OscConfig+0xf78>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	e027      	b.n	8004af8 <HAL_RCC_OscConfig+0xe7c>
 8004aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ab0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	fa93 f2a3 	rbit	r2, r3
 8004ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	fa93 f2a3 	rbit	r2, r3
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <HAL_RCC_OscConfig+0xf78>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004afc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004b00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b04:	6011      	str	r1, [r2, #0]
 8004b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	fa92 f1a2 	rbit	r1, r2
 8004b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b1c:	6011      	str	r1, [r2, #0]
  return result;
 8004b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	fab2 f282 	clz	r2, r2
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	f042 0220 	orr.w	r2, r2, #32
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	f002 021f 	and.w	r2, r2, #31
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d082      	beq.n	8004a4a <HAL_RCC_OscConfig+0xdce>
 8004b44:	e0cf      	b.n	8004ce6 <HAL_RCC_OscConfig+0x106a>
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	fa93 f2a3 	rbit	r2, r3
 8004b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b6a:	601a      	str	r2, [r3, #0]
  return result;
 8004b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	461a      	mov	r2, r3
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fb46 	bl	800221c <HAL_GetTick>
 8004b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b94:	e009      	b.n	8004baa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b96:	f7fd fb41 	bl	800221c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e09e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
 8004baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	fa93 f2a3 	rbit	r2, r3
 8004bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bce:	601a      	str	r2, [r3, #0]
  return result;
 8004bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bda:	fab3 f383 	clz	r3, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d104      	bne.n	8004bf8 <HAL_RCC_OscConfig+0xf7c>
 8004bee:	4b01      	ldr	r3, [pc, #4]	; (8004bf4 <HAL_RCC_OscConfig+0xf78>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	e029      	b.n	8004c48 <HAL_RCC_OscConfig+0xfcc>
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	fa93 f2a3 	rbit	r2, r3
 8004c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	fa93 f2a3 	rbit	r2, r3
 8004c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_OscConfig+0x1078>)
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	fa92 f1a2 	rbit	r1, r2
 8004c64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c6c:	6011      	str	r1, [r2, #0]
  return result;
 8004c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f042 0220 	orr.w	r2, r2, #32
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f002 021f 	and.w	r2, r2, #31
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d180      	bne.n	8004b96 <HAL_RCC_OscConfig+0xf1a>
 8004c94:	e027      	b.n	8004ce6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e01e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <HAL_RCC_OscConfig+0x1078>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004cb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004cca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000

08004cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b09e      	sub	sp, #120	; 0x78
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e162      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b90      	ldr	r3, [pc, #576]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d910      	bls.n	8004d40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b8d      	ldr	r3, [pc, #564]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 0207 	bic.w	r2, r3, #7
 8004d26:	498b      	ldr	r1, [pc, #556]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b89      	ldr	r3, [pc, #548]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e14a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4c:	4b82      	ldr	r3, [pc, #520]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	497f      	ldr	r1, [pc, #508]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80dc 	beq.w	8004f24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d13c      	bne.n	8004dee <HAL_RCC_ClockConfig+0xf6>
 8004d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d102      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xa6>
 8004d98:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	e00f      	b.n	8004dbe <HAL_RCC_ClockConfig+0xc6>
 8004d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004da2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	667b      	str	r3, [r7, #100]	; 0x64
 8004dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db0:	663b      	str	r3, [r7, #96]	; 0x60
 8004db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dba:	4b67      	ldr	r3, [pc, #412]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dc6:	fa92 f2a2 	rbit	r2, r2
 8004dca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dce:	fab2 f282 	clz	r2, r2
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f042 0220 	orr.w	r2, r2, #32
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f002 021f 	and.w	r2, r2, #31
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f202 	lsl.w	r2, r1, r2
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d17b      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0f3      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d13c      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x178>
 8004df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x128>
 8004e1a:	4b4f      	ldr	r3, [pc, #316]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	e00f      	b.n	8004e40 <HAL_RCC_ClockConfig+0x148>
 8004e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e32:	643b      	str	r3, [r7, #64]	; 0x40
 8004e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e36:	fa93 f3a3 	rbit	r3, r3
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3c:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e44:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e48:	fa92 f2a2 	rbit	r2, r2
 8004e4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e50:	fab2 f282 	clz	r2, r2
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	f042 0220 	orr.w	r2, r2, #32
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	f002 021f 	and.w	r2, r2, #31
 8004e60:	2101      	movs	r1, #1
 8004e62:	fa01 f202 	lsl.w	r2, r1, r2
 8004e66:	4013      	ands	r3, r2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d13a      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b2      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x2de>
 8004e70:	2302      	movs	r3, #2
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	fa93 f3a3 	rbit	r3, r3
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d102      	bne.n	8004e98 <HAL_RCC_ClockConfig+0x1a0>
 8004e92:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	e00d      	b.n	8004eb4 <HAL_RCC_ClockConfig+0x1bc>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	fa93 f3a3 	rbit	r3, r3
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	623b      	str	r3, [r7, #32]
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	61ba      	str	r2, [r7, #24]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	fa92 f2a2 	rbit	r2, r2
 8004ebe:	617a      	str	r2, [r7, #20]
  return result;
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	fab2 f282 	clz	r2, r2
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	f042 0220 	orr.w	r2, r2, #32
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	f002 021f 	and.w	r2, r2, #31
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e079      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f023 0203 	bic.w	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	491a      	ldr	r1, [pc, #104]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef4:	f7fd f992 	bl	800221c <HAL_GetTick>
 8004ef8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004efc:	f7fd f98e 	bl	800221c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e061      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <HAL_RCC_ClockConfig+0x260>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 020c 	and.w	r2, r3, #12
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d1eb      	bne.n	8004efc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d214      	bcs.n	8004f5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 0207 	bic.w	r2, r3, #7
 8004f3a:	4906      	ldr	r1, [pc, #24]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f42:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <HAL_RCC_ClockConfig+0x25c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e040      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x2de>
 8004f54:	40022000 	.word	0x40022000
 8004f58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	491a      	ldr	r1, [pc, #104]	; (8004fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4912      	ldr	r1, [pc, #72]	; (8004fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f9a:	f000 f829 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <HAL_RCC_ClockConfig+0x2e8>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa8:	22f0      	movs	r2, #240	; 0xf0
 8004faa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	fa92 f2a2 	rbit	r2, r2
 8004fb2:	60fa      	str	r2, [r7, #12]
  return result;
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	fab2 f282 	clz	r2, r2
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	40d3      	lsrs	r3, r2
 8004fbe:	4a09      	ldr	r2, [pc, #36]	; (8004fe4 <HAL_RCC_ClockConfig+0x2ec>)
 8004fc0:	5cd3      	ldrb	r3, [r2, r3]
 8004fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8004fc6:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <HAL_RCC_ClockConfig+0x2f0>)
 8004fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <HAL_RCC_ClockConfig+0x2f4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd f8e0 	bl	8002194 <HAL_InitTick>
  
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3778      	adds	r7, #120	; 0x78
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	0800a164 	.word	0x0800a164
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	20000004 	.word	0x20000004

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b08b      	sub	sp, #44	; 0x2c
 8004ff4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	2300      	movs	r3, #0
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800500a:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b04      	cmp	r3, #4
 8005018:	d002      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x30>
 800501a:	2b08      	cmp	r3, #8
 800501c:	d003      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x36>
 800501e:	e03c      	b.n	800509a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005022:	623b      	str	r3, [r7, #32]
      break;
 8005024:	e03c      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800502c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005030:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	fa92 f2a2 	rbit	r2, r2
 8005038:	607a      	str	r2, [r7, #4]
  return result;
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	fab2 f282 	clz	r2, r2
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	40d3      	lsrs	r3, r2
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005046:	5cd3      	ldrb	r3, [r2, r3]
 8005048:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800504a:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	220f      	movs	r2, #15
 8005054:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	fa92 f2a2 	rbit	r2, r2
 800505c:	60fa      	str	r2, [r7, #12]
  return result;
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	fab2 f282 	clz	r2, r2
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	40d3      	lsrs	r3, r2
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005078:	4a0e      	ldr	r2, [pc, #56]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
 8005088:	e004      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4a0c      	ldr	r2, [pc, #48]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	623b      	str	r3, [r7, #32]
      break;
 8005098:	e002      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800509c:	623b      	str	r3, [r7, #32]
      break;
 800509e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a0:	6a3b      	ldr	r3, [r7, #32]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	372c      	adds	r7, #44	; 0x2c
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	0800a17c 	.word	0x0800a17c
 80050bc:	0800a18c 	.word	0x0800a18c
 80050c0:	003d0900 	.word	0x003d0900

080050c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ca:	681b      	ldr	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000000 	.word	0x20000000

080050dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050e2:	f7ff ffef 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 80050e6:	4601      	mov	r1, r0
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80050f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	fa92 f2a2 	rbit	r2, r2
 80050fc:	603a      	str	r2, [r7, #0]
  return result;
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	fab2 f282 	clz	r2, r2
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	40d3      	lsrs	r3, r2
 8005108:	4a04      	ldr	r2, [pc, #16]	; (800511c <HAL_RCC_GetPCLK1Freq+0x40>)
 800510a:	5cd3      	ldrb	r3, [r2, r3]
 800510c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000
 800511c:	0800a174 	.word	0x0800a174

08005120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005126:	f7ff ffcd 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 800512a:	4601      	mov	r1, r0
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005134:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005138:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	fa92 f2a2 	rbit	r2, r2
 8005140:	603a      	str	r2, [r7, #0]
  return result;
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	fab2 f282 	clz	r2, r2
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	40d3      	lsrs	r3, r2
 800514c:	4a04      	ldr	r2, [pc, #16]	; (8005160 <HAL_RCC_GetPCLK2Freq+0x40>)
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40021000 	.word	0x40021000
 8005160:	0800a174 	.word	0x0800a174

08005164 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b092      	sub	sp, #72	; 0x48
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80d4 	beq.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005188:	4b4e      	ldr	r3, [pc, #312]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10e      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	4a4a      	ldr	r2, [pc, #296]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519e:	61d3      	str	r3, [r2, #28]
 80051a0:	4b48      	ldr	r3, [pc, #288]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b2:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d118      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051be:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a41      	ldr	r2, [pc, #260]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ca:	f7fd f827 	bl	800221c <HAL_GetTick>
 80051ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fd f823 	bl	800221c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b64      	cmp	r3, #100	; 0x64
 80051de:	d901      	bls.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e169      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	4b38      	ldr	r3, [pc, #224]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f0:	4b34      	ldr	r3, [pc, #208]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8084 	beq.w	800530a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800520c:	429a      	cmp	r2, r3
 800520e:	d07c      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005210:	4b2c      	ldr	r3, [pc, #176]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800521e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	fa93 f3a3 	rbit	r3, r3
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800522a:	fab3 f383 	clz	r3, r3
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	4b26      	ldr	r3, [pc, #152]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	461a      	mov	r2, r3
 800523a:	2301      	movs	r3, #1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005242:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	fa93 f3a3 	rbit	r3, r3
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	461a      	mov	r2, r3
 800525e:	2300      	movs	r3, #0
 8005260:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005266:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d04b      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fc ffd3 	bl	800221c <HAL_GetTick>
 8005276:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005278:	e00a      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527a:	f7fc ffcf 	bl	800221c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f241 3288 	movw	r2, #5000	; 0x1388
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e113      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005290:	2302      	movs	r3, #2
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	fa93 f3a3 	rbit	r3, r3
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
 800529c:	2302      	movs	r3, #2
 800529e:	623b      	str	r3, [r7, #32]
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	fa93 f3a3 	rbit	r3, r3
 80052a6:	61fb      	str	r3, [r7, #28]
  return result;
 80052a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f043 0302 	orr.w	r3, r3, #2
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d108      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052be:	4b01      	ldr	r3, [pc, #4]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	e00d      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40007000 	.word	0x40007000
 80052cc:	10908100 	.word	0x10908100
 80052d0:	2302      	movs	r3, #2
 80052d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	fa93 f3a3 	rbit	r3, r3
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	4b78      	ldr	r3, [pc, #480]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	2202      	movs	r2, #2
 80052e2:	613a      	str	r2, [r7, #16]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	fa92 f2a2 	rbit	r2, r2
 80052ea:	60fa      	str	r2, [r7, #12]
  return result;
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	fab2 f282 	clz	r2, r2
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	f002 021f 	and.w	r2, r2, #31
 80052fe:	2101      	movs	r1, #1
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0b7      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800530a:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	496a      	ldr	r1, [pc, #424]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005318:	4313      	orrs	r3, r2
 800531a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800531c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005320:	2b01      	cmp	r3, #1
 8005322:	d105      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005324:	4b66      	ldr	r3, [pc, #408]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	4a65      	ldr	r2, [pc, #404]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800532e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800533c:	4b60      	ldr	r3, [pc, #384]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	495d      	ldr	r1, [pc, #372]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d008      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535a:	4b59      	ldr	r3, [pc, #356]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	4956      	ldr	r1, [pc, #344]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005368:	4313      	orrs	r3, r2
 800536a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005378:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	494e      	ldr	r1, [pc, #312]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005396:	4b4a      	ldr	r3, [pc, #296]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f023 0210 	bic.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4947      	ldr	r1, [pc, #284]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80053b4:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	493f      	ldr	r1, [pc, #252]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053d2:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	f023 0220 	bic.w	r2, r3, #32
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	4938      	ldr	r1, [pc, #224]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f0:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	4930      	ldr	r1, [pc, #192]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	4929      	ldr	r1, [pc, #164]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800542c:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	4921      	ldr	r1, [pc, #132]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800544a:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	491a      	ldr	r1, [pc, #104]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	4912      	ldr	r1, [pc, #72]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005476:	4313      	orrs	r3, r2
 8005478:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005486:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	490b      	ldr	r1, [pc, #44]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	4903      	ldr	r1, [pc, #12]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3748      	adds	r7, #72	; 0x48
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000

080054c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e09d      	b.n	8005612 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d108      	bne.n	80054f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d009      	beq.n	80054fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
 80054ee:	e005      	b.n	80054fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fa20 	bl	800195c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005532:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800553c:	d902      	bls.n	8005544 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e002      	b.n	800554a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005548:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005552:	d007      	beq.n	8005564 <HAL_SPI_Init+0xa0>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	ea42 0103 	orr.w	r1, r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	0c1b      	lsrs	r3, r3, #16
 80055c0:	f003 0204 	and.w	r2, r3, #4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	f003 0310 	and.w	r3, r3, #16
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055e0:	ea42 0103 	orr.w	r1, r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b08a      	sub	sp, #40	; 0x28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005628:	2301      	movs	r3, #1
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x26>
 800563c:	2302      	movs	r3, #2
 800563e:	e1fb      	b.n	8005a38 <HAL_SPI_TransmitReceive+0x41e>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005648:	f7fc fde8 	bl	800221c <HAL_GetTick>
 800564c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005654:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800565c:	887b      	ldrh	r3, [r7, #2]
 800565e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005660:	887b      	ldrh	r3, [r7, #2]
 8005662:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005664:	7efb      	ldrb	r3, [r7, #27]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d00e      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x6e>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005670:	d106      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x66>
 800567a:	7efb      	ldrb	r3, [r7, #27]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d003      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005680:	2302      	movs	r3, #2
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005686:	e1cd      	b.n	8005a24 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_SPI_TransmitReceive+0x80>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_SPI_TransmitReceive+0x80>
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056a0:	e1c0      	b.n	8005a24 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d003      	beq.n	80056b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2205      	movs	r2, #5
 80056b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	887a      	ldrh	r2, [r7, #2]
 80056c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	887a      	ldrh	r2, [r7, #2]
 80056ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	887a      	ldrh	r2, [r7, #2]
 80056dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	887a      	ldrh	r2, [r7, #2]
 80056e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f8:	d802      	bhi.n	8005700 <HAL_SPI_TransmitReceive+0xe6>
 80056fa:	8a3b      	ldrh	r3, [r7, #16]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d908      	bls.n	8005712 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800570e:	605a      	str	r2, [r3, #4]
 8005710:	e007      	b.n	8005722 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005720:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d007      	beq.n	8005740 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800573e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005748:	d97c      	bls.n	8005844 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_SPI_TransmitReceive+0x13e>
 8005752:	8a7b      	ldrh	r3, [r7, #18]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d169      	bne.n	800582c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	881a      	ldrh	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	1c9a      	adds	r2, r3, #2
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800577c:	e056      	b.n	800582c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d11b      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x1aa>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x1aa>
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	2b01      	cmp	r3, #1
 800579a:	d113      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	1c9a      	adds	r2, r3, #2
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d11c      	bne.n	800580c <HAL_SPI_TransmitReceive+0x1f2>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	b292      	uxth	r2, r2
 80057ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	1c9a      	adds	r2, r3, #2
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005808:	2301      	movs	r3, #1
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800580c:	f7fc fd06 	bl	800221c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005818:	429a      	cmp	r2, r3
 800581a:	d807      	bhi.n	800582c <HAL_SPI_TransmitReceive+0x212>
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d003      	beq.n	800582c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800582a:	e0fb      	b.n	8005a24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1a3      	bne.n	800577e <HAL_SPI_TransmitReceive+0x164>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d19d      	bne.n	800577e <HAL_SPI_TransmitReceive+0x164>
 8005842:	e0df      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_SPI_TransmitReceive+0x23a>
 800584c:	8a7b      	ldrh	r3, [r7, #18]
 800584e:	2b01      	cmp	r3, #1
 8005850:	f040 80cb 	bne.w	80059ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	d912      	bls.n	8005884 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	881a      	ldrh	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	1c9a      	adds	r2, r3, #2
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b02      	subs	r3, #2
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005882:	e0b2      	b.n	80059ea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058aa:	e09e      	b.n	80059ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d134      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x30a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d02f      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x30a>
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d12c      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d912      	bls.n	80058fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	881a      	ldrh	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	1c9a      	adds	r2, r3, #2
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b02      	subs	r3, #2
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058f8:	e012      	b.n	8005920 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330c      	adds	r3, #12
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d148      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x3aa>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d042      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	d923      	bls.n	8005992 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	b292      	uxth	r2, r2
 8005956:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b02      	subs	r3, #2
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d81f      	bhi.n	80059c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	e016      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f103 020c 	add.w	r2, r3, #12
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	7812      	ldrb	r2, [r2, #0]
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059c0:	2301      	movs	r3, #1
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059c4:	f7fc fc2a 	bl	800221c <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d803      	bhi.n	80059dc <HAL_SPI_TransmitReceive+0x3c2>
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d102      	bne.n	80059e2 <HAL_SPI_TransmitReceive+0x3c8>
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059e8:	e01c      	b.n	8005a24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f47f af5b 	bne.w	80058ac <HAL_SPI_TransmitReceive+0x292>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f47f af54 	bne.w	80058ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f937 	bl	8005c7c <SPI_EndRxTxTransaction>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	661a      	str	r2, [r3, #96]	; 0x60
 8005a20:	e000      	b.n	8005a24 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005a22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3728      	adds	r7, #40	; 0x28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a50:	f7fc fbe4 	bl	800221c <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a60:	f7fc fbdc 	bl	800221c <HAL_GetTick>
 8005a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a66:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	015b      	lsls	r3, r3, #5
 8005a6c:	0d1b      	lsrs	r3, r3, #20
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a76:	e054      	b.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d050      	beq.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a80:	f7fc fbcc 	bl	800221c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d902      	bls.n	8005a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d13d      	bne.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aae:	d111      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab8:	d004      	beq.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	d107      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005adc:	d10f      	bne.n	8005afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e017      	b.n	8005b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d19b      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000000 	.word	0x20000000

08005b50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b62:	f7fc fb5b 	bl	800221c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b72:	f7fc fb53 	bl	800221c <HAL_GetTick>
 8005b76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b80:	4b3d      	ldr	r3, [pc, #244]	; (8005c78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	00da      	lsls	r2, r3, #3
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	0d1b      	lsrs	r3, r3, #20
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b98:	e060      	b.n	8005c5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ba0:	d107      	bne.n	8005bb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d050      	beq.n	8005c5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bba:	f7fc fb2f 	bl	800221c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d902      	bls.n	8005bd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d13d      	bne.n	8005c4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005be8:	d111      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf2:	d004      	beq.n	8005bfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d107      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c16:	d10f      	bne.n	8005c38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e010      	b.n	8005c6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4013      	ands	r3, r2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d196      	bne.n	8005b9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3728      	adds	r7, #40	; 0x28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000000 	.word	0x20000000

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff ff5b 	bl	8005b50 <SPI_WaitFifoStateUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e027      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fec0 	bl	8005a40 <SPI_WaitFlagStateUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e014      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff ff34 	bl	8005b50 <SPI_WaitFifoStateUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	f043 0220 	orr.w	r2, r3, #32
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e000      	b.n	8005d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e049      	b.n	8005dae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fc f8b6 	bl	8001ea0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f000 fa4a 	bl	80061e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_TIM_PWM_Start+0x24>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e03c      	b.n	8005e56 <HAL_TIM_PWM_Start+0x9e>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d109      	bne.n	8005df6 <HAL_TIM_PWM_Start+0x3e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	bf14      	ite	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	2300      	moveq	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e02f      	b.n	8005e56 <HAL_TIM_PWM_Start+0x9e>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start+0x58>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e022      	b.n	8005e56 <HAL_TIM_PWM_Start+0x9e>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b0c      	cmp	r3, #12
 8005e14:	d109      	bne.n	8005e2a <HAL_TIM_PWM_Start+0x72>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e015      	b.n	8005e56 <HAL_TIM_PWM_Start+0x9e>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start+0x8c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf14      	ite	ne
 8005e3c:	2301      	movne	r3, #1
 8005e3e:	2300      	moveq	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e008      	b.n	8005e56 <HAL_TIM_PWM_Start+0x9e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e097      	b.n	8005f8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <HAL_TIM_PWM_Start+0xb6>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e6c:	e023      	b.n	8005eb6 <HAL_TIM_PWM_Start+0xfe>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d104      	bne.n	8005e7e <HAL_TIM_PWM_Start+0xc6>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	e01b      	b.n	8005eb6 <HAL_TIM_PWM_Start+0xfe>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d104      	bne.n	8005e8e <HAL_TIM_PWM_Start+0xd6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e8c:	e013      	b.n	8005eb6 <HAL_TIM_PWM_Start+0xfe>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b0c      	cmp	r3, #12
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_PWM_Start+0xe6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e9c:	e00b      	b.n	8005eb6 <HAL_TIM_PWM_Start+0xfe>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_PWM_Start+0xf6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eac:	e003      	b.n	8005eb6 <HAL_TIM_PWM_Start+0xfe>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fcf4 	bl	80068ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a33      	ldr	r2, [pc, #204]	; (8005f98 <HAL_TIM_PWM_Start+0x1e0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x13e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a32      	ldr	r2, [pc, #200]	; (8005f9c <HAL_TIM_PWM_Start+0x1e4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x13e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a30      	ldr	r2, [pc, #192]	; (8005fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x13e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x13e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_PWM_Start+0x142>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_TIM_PWM_Start+0x144>
 8005efa:	2300      	movs	r3, #0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <HAL_TIM_PWM_Start+0x1e0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x194>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f22:	d013      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x194>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a20      	ldr	r2, [pc, #128]	; (8005fac <HAL_TIM_PWM_Start+0x1f4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x194>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <HAL_TIM_PWM_Start+0x1f8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x194>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <HAL_TIM_PWM_Start+0x1e4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x194>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a16      	ldr	r2, [pc, #88]	; (8005fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d115      	bne.n	8005f78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <HAL_TIM_PWM_Start+0x1fc>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d015      	beq.n	8005f8a <HAL_TIM_PWM_Start+0x1d2>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d011      	beq.n	8005f8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f76:	e008      	b.n	8005f8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e000      	b.n	8005f8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800
 8005fac:	40000400 	.word	0x40000400
 8005fb0:	40000800 	.word	0x40000800
 8005fb4:	00010007 	.word	0x00010007

08005fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e0ff      	b.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b14      	cmp	r3, #20
 8005fe2:	f200 80f0 	bhi.w	80061c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	080061c7 	.word	0x080061c7
 8005ff4:	080061c7 	.word	0x080061c7
 8005ff8:	080061c7 	.word	0x080061c7
 8005ffc:	08006081 	.word	0x08006081
 8006000:	080061c7 	.word	0x080061c7
 8006004:	080061c7 	.word	0x080061c7
 8006008:	080061c7 	.word	0x080061c7
 800600c:	080060c3 	.word	0x080060c3
 8006010:	080061c7 	.word	0x080061c7
 8006014:	080061c7 	.word	0x080061c7
 8006018:	080061c7 	.word	0x080061c7
 800601c:	08006103 	.word	0x08006103
 8006020:	080061c7 	.word	0x080061c7
 8006024:	080061c7 	.word	0x080061c7
 8006028:	080061c7 	.word	0x080061c7
 800602c:	08006145 	.word	0x08006145
 8006030:	080061c7 	.word	0x080061c7
 8006034:	080061c7 	.word	0x080061c7
 8006038:	080061c7 	.word	0x080061c7
 800603c:	08006185 	.word	0x08006185
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f95a 	bl	8006300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0208 	orr.w	r2, r2, #8
 800605a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0204 	bic.w	r2, r2, #4
 800606a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6999      	ldr	r1, [r3, #24]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	619a      	str	r2, [r3, #24]
      break;
 800607e:	e0a5      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f9ca 	bl	8006420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800609a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6999      	ldr	r1, [r3, #24]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	021a      	lsls	r2, r3, #8
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	619a      	str	r2, [r3, #24]
      break;
 80060c0:	e084      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fa33 	bl	8006534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0208 	orr.w	r2, r2, #8
 80060dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0204 	bic.w	r2, r2, #4
 80060ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69d9      	ldr	r1, [r3, #28]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	61da      	str	r2, [r3, #28]
      break;
 8006100:	e064      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fa9b 	bl	8006644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69d9      	ldr	r1, [r3, #28]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	021a      	lsls	r2, r3, #8
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	61da      	str	r2, [r3, #28]
      break;
 8006142:	e043      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fae4 	bl	8006718 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0208 	orr.w	r2, r2, #8
 800615e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0204 	bic.w	r2, r2, #4
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006182:	e023      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fb28 	bl	80067e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800619e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	021a      	lsls	r2, r3, #8
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061c4:	e002      	b.n	80061cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop

080061e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3c      	ldr	r2, [pc, #240]	; (80062e4 <TIM_Base_SetConfig+0x104>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00f      	beq.n	8006218 <TIM_Base_SetConfig+0x38>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d00b      	beq.n	8006218 <TIM_Base_SetConfig+0x38>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a39      	ldr	r2, [pc, #228]	; (80062e8 <TIM_Base_SetConfig+0x108>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d007      	beq.n	8006218 <TIM_Base_SetConfig+0x38>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a38      	ldr	r2, [pc, #224]	; (80062ec <TIM_Base_SetConfig+0x10c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_Base_SetConfig+0x38>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a37      	ldr	r2, [pc, #220]	; (80062f0 <TIM_Base_SetConfig+0x110>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d108      	bne.n	800622a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2d      	ldr	r2, [pc, #180]	; (80062e4 <TIM_Base_SetConfig+0x104>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01b      	beq.n	800626a <TIM_Base_SetConfig+0x8a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006238:	d017      	beq.n	800626a <TIM_Base_SetConfig+0x8a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <TIM_Base_SetConfig+0x108>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <TIM_Base_SetConfig+0x8a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a29      	ldr	r2, [pc, #164]	; (80062ec <TIM_Base_SetConfig+0x10c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00f      	beq.n	800626a <TIM_Base_SetConfig+0x8a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a28      	ldr	r2, [pc, #160]	; (80062f0 <TIM_Base_SetConfig+0x110>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00b      	beq.n	800626a <TIM_Base_SetConfig+0x8a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a27      	ldr	r2, [pc, #156]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d007      	beq.n	800626a <TIM_Base_SetConfig+0x8a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <TIM_Base_SetConfig+0x118>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_Base_SetConfig+0x8a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a25      	ldr	r2, [pc, #148]	; (80062fc <TIM_Base_SetConfig+0x11c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d108      	bne.n	800627c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a10      	ldr	r2, [pc, #64]	; (80062e4 <TIM_Base_SetConfig+0x104>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <TIM_Base_SetConfig+0xe8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a11      	ldr	r2, [pc, #68]	; (80062f0 <TIM_Base_SetConfig+0x110>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_Base_SetConfig+0xe8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a10      	ldr	r2, [pc, #64]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_Base_SetConfig+0xe8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a0f      	ldr	r2, [pc, #60]	; (80062f8 <TIM_Base_SetConfig+0x118>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0xe8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <TIM_Base_SetConfig+0x11c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d103      	bne.n	80062d0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	615a      	str	r2, [r3, #20]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0303 	bic.w	r3, r3, #3
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 0302 	bic.w	r3, r3, #2
 800634c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a2c      	ldr	r2, [pc, #176]	; (800640c <TIM_OC1_SetConfig+0x10c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00f      	beq.n	8006380 <TIM_OC1_SetConfig+0x80>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a2b      	ldr	r2, [pc, #172]	; (8006410 <TIM_OC1_SetConfig+0x110>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_OC1_SetConfig+0x80>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <TIM_OC1_SetConfig+0x114>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_OC1_SetConfig+0x80>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a29      	ldr	r2, [pc, #164]	; (8006418 <TIM_OC1_SetConfig+0x118>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC1_SetConfig+0x80>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a28      	ldr	r2, [pc, #160]	; (800641c <TIM_OC1_SetConfig+0x11c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10c      	bne.n	800639a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f023 0308 	bic.w	r3, r3, #8
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f023 0304 	bic.w	r3, r3, #4
 8006398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a1b      	ldr	r2, [pc, #108]	; (800640c <TIM_OC1_SetConfig+0x10c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00f      	beq.n	80063c2 <TIM_OC1_SetConfig+0xc2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a1a      	ldr	r2, [pc, #104]	; (8006410 <TIM_OC1_SetConfig+0x110>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00b      	beq.n	80063c2 <TIM_OC1_SetConfig+0xc2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a19      	ldr	r2, [pc, #100]	; (8006414 <TIM_OC1_SetConfig+0x114>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d007      	beq.n	80063c2 <TIM_OC1_SetConfig+0xc2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a18      	ldr	r2, [pc, #96]	; (8006418 <TIM_OC1_SetConfig+0x118>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC1_SetConfig+0xc2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a17      	ldr	r2, [pc, #92]	; (800641c <TIM_OC1_SetConfig+0x11c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d111      	bne.n	80063e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40012c00 	.word	0x40012c00
 8006410:	40013400 	.word	0x40013400
 8006414:	40014000 	.word	0x40014000
 8006418:	40014400 	.word	0x40014400
 800641c:	40014800 	.word	0x40014800

08006420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0210 	bic.w	r2, r3, #16
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800644e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 0320 	bic.w	r3, r3, #32
 800646e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a28      	ldr	r2, [pc, #160]	; (8006520 <TIM_OC2_SetConfig+0x100>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC2_SetConfig+0x6c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a27      	ldr	r2, [pc, #156]	; (8006524 <TIM_OC2_SetConfig+0x104>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10d      	bne.n	80064a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <TIM_OC2_SetConfig+0x100>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00f      	beq.n	80064d0 <TIM_OC2_SetConfig+0xb0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a1c      	ldr	r2, [pc, #112]	; (8006524 <TIM_OC2_SetConfig+0x104>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <TIM_OC2_SetConfig+0xb0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a1b      	ldr	r2, [pc, #108]	; (8006528 <TIM_OC2_SetConfig+0x108>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d007      	beq.n	80064d0 <TIM_OC2_SetConfig+0xb0>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a1a      	ldr	r2, [pc, #104]	; (800652c <TIM_OC2_SetConfig+0x10c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC2_SetConfig+0xb0>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a19      	ldr	r2, [pc, #100]	; (8006530 <TIM_OC2_SetConfig+0x110>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d113      	bne.n	80064f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064d6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064de:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40013400 	.word	0x40013400
 8006528:	40014000 	.word	0x40014000
 800652c:	40014400 	.word	0x40014400
 8006530:	40014800 	.word	0x40014800

08006534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a27      	ldr	r2, [pc, #156]	; (8006630 <TIM_OC3_SetConfig+0xfc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC3_SetConfig+0x6a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a26      	ldr	r2, [pc, #152]	; (8006634 <TIM_OC3_SetConfig+0x100>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d10d      	bne.n	80065ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <TIM_OC3_SetConfig+0xfc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00f      	beq.n	80065e2 <TIM_OC3_SetConfig+0xae>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1b      	ldr	r2, [pc, #108]	; (8006634 <TIM_OC3_SetConfig+0x100>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00b      	beq.n	80065e2 <TIM_OC3_SetConfig+0xae>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <TIM_OC3_SetConfig+0x104>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d007      	beq.n	80065e2 <TIM_OC3_SetConfig+0xae>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a19      	ldr	r2, [pc, #100]	; (800663c <TIM_OC3_SetConfig+0x108>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_OC3_SetConfig+0xae>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a18      	ldr	r2, [pc, #96]	; (8006640 <TIM_OC3_SetConfig+0x10c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d113      	bne.n	800660a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	621a      	str	r2, [r3, #32]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400
 8006640:	40014800 	.word	0x40014800

08006644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	031b      	lsls	r3, r3, #12
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a18      	ldr	r2, [pc, #96]	; (8006704 <TIM_OC4_SetConfig+0xc0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00f      	beq.n	80066c8 <TIM_OC4_SetConfig+0x84>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <TIM_OC4_SetConfig+0xc4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00b      	beq.n	80066c8 <TIM_OC4_SetConfig+0x84>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a16      	ldr	r2, [pc, #88]	; (800670c <TIM_OC4_SetConfig+0xc8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d007      	beq.n	80066c8 <TIM_OC4_SetConfig+0x84>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a15      	ldr	r2, [pc, #84]	; (8006710 <TIM_OC4_SetConfig+0xcc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC4_SetConfig+0x84>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a14      	ldr	r2, [pc, #80]	; (8006714 <TIM_OC4_SetConfig+0xd0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d109      	bne.n	80066dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	019b      	lsls	r3, r3, #6
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40013400 	.word	0x40013400
 800670c:	40014000 	.word	0x40014000
 8006710:	40014400 	.word	0x40014400
 8006714:	40014800 	.word	0x40014800

08006718 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800675c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <TIM_OC5_SetConfig+0xb4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00f      	beq.n	8006792 <TIM_OC5_SetConfig+0x7a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <TIM_OC5_SetConfig+0xb8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_OC5_SetConfig+0x7a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a15      	ldr	r2, [pc, #84]	; (80067d4 <TIM_OC5_SetConfig+0xbc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <TIM_OC5_SetConfig+0x7a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <TIM_OC5_SetConfig+0xc0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_OC5_SetConfig+0x7a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a13      	ldr	r2, [pc, #76]	; (80067dc <TIM_OC5_SetConfig+0xc4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d109      	bne.n	80067a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	40012c00 	.word	0x40012c00
 80067d0:	40013400 	.word	0x40013400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800

080067e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	051b      	lsls	r3, r3, #20
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <TIM_OC6_SetConfig+0xb8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00f      	beq.n	800685c <TIM_OC6_SetConfig+0x7c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a17      	ldr	r2, [pc, #92]	; (800689c <TIM_OC6_SetConfig+0xbc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_OC6_SetConfig+0x7c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a16      	ldr	r2, [pc, #88]	; (80068a0 <TIM_OC6_SetConfig+0xc0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_OC6_SetConfig+0x7c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <TIM_OC6_SetConfig+0xc4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC6_SetConfig+0x7c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <TIM_OC6_SetConfig+0xc8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d109      	bne.n	8006870 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	029b      	lsls	r3, r3, #10
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40013400 	.word	0x40013400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800

080068ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2201      	movs	r2, #1
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	401a      	ands	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e063      	b.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d108      	bne.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800694a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1b      	ldr	r2, [pc, #108]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d018      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d013      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a18      	ldr	r2, [pc, #96]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00e      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a12      	ldr	r2, [pc, #72]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a13      	ldr	r2, [pc, #76]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10c      	bne.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40013400 	.word	0x40013400
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40014000 	.word	0x40014000

080069f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e040      	b.n	8006a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fb fb36 	bl	800208c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	; 0x24
 8006a24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f8c0 	bl	8006bbc <UART_SetConfig>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e022      	b.n	8006a8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa8a 	bl	8006f68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fb11 	bl	80070ac <UART_CheckIdleState>
 8006a8a:	4603      	mov	r3, r0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	f040 8082 	bne.w	8006bb2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <HAL_UART_Transmit+0x26>
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e07a      	b.n	8006bb4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_UART_Transmit+0x38>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e073      	b.n	8006bb4 <HAL_UART_Transmit+0x120>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2221      	movs	r2, #33	; 0x21
 8006ae0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ae2:	f7fb fb9b 	bl	800221c <HAL_GetTick>
 8006ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	88fa      	ldrh	r2, [r7, #6]
 8006af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b00:	d108      	bne.n	8006b14 <HAL_UART_Transmit+0x80>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	e003      	b.n	8006b1c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b24:	e02d      	b.n	8006b82 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fb04 	bl	800713e <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e039      	b.n	8006bb4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10b      	bne.n	8006b5e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	881a      	ldrh	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b52:	b292      	uxth	r2, r2
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	3302      	adds	r3, #2
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	e008      	b.n	8006b70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	b292      	uxth	r2, r2
 8006b68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1cb      	bne.n	8006b26 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	2140      	movs	r1, #64	; 0x40
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fad0 	bl	800713e <UART_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e005      	b.n	8006bb4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e000      	b.n	8006bb4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
  }
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bea:	f023 030c 	bic.w	r3, r3, #12
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	6979      	ldr	r1, [r7, #20]
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4aa8      	ldr	r2, [pc, #672]	; (8006ed8 <UART_SetConfig+0x31c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d120      	bne.n	8006c7e <UART_SetConfig+0xc2>
 8006c3c:	4ba7      	ldr	r3, [pc, #668]	; (8006edc <UART_SetConfig+0x320>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d817      	bhi.n	8006c78 <UART_SetConfig+0xbc>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0x94>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c6d 	.word	0x08006c6d
 8006c58:	08006c73 	.word	0x08006c73
 8006c5c:	08006c67 	.word	0x08006c67
 8006c60:	2301      	movs	r3, #1
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e0b5      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006c66:	2302      	movs	r3, #2
 8006c68:	77fb      	strb	r3, [r7, #31]
 8006c6a:	e0b2      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e0af      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006c72:	2308      	movs	r3, #8
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e0ac      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e0a9      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a97      	ldr	r2, [pc, #604]	; (8006ee0 <UART_SetConfig+0x324>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d124      	bne.n	8006cd2 <UART_SetConfig+0x116>
 8006c88:	4b94      	ldr	r3, [pc, #592]	; (8006edc <UART_SetConfig+0x320>)
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c94:	d011      	beq.n	8006cba <UART_SetConfig+0xfe>
 8006c96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c9a:	d817      	bhi.n	8006ccc <UART_SetConfig+0x110>
 8006c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca0:	d011      	beq.n	8006cc6 <UART_SetConfig+0x10a>
 8006ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca6:	d811      	bhi.n	8006ccc <UART_SetConfig+0x110>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <UART_SetConfig+0xf8>
 8006cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb0:	d006      	beq.n	8006cc0 <UART_SetConfig+0x104>
 8006cb2:	e00b      	b.n	8006ccc <UART_SetConfig+0x110>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e08b      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	77fb      	strb	r3, [r7, #31]
 8006cbe:	e088      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e085      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e082      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006ccc:	2310      	movs	r3, #16
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e07f      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a83      	ldr	r2, [pc, #524]	; (8006ee4 <UART_SetConfig+0x328>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d124      	bne.n	8006d26 <UART_SetConfig+0x16a>
 8006cdc:	4b7f      	ldr	r3, [pc, #508]	; (8006edc <UART_SetConfig+0x320>)
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ce4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce8:	d011      	beq.n	8006d0e <UART_SetConfig+0x152>
 8006cea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cee:	d817      	bhi.n	8006d20 <UART_SetConfig+0x164>
 8006cf0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf4:	d011      	beq.n	8006d1a <UART_SetConfig+0x15e>
 8006cf6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cfa:	d811      	bhi.n	8006d20 <UART_SetConfig+0x164>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <UART_SetConfig+0x14c>
 8006d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d04:	d006      	beq.n	8006d14 <UART_SetConfig+0x158>
 8006d06:	e00b      	b.n	8006d20 <UART_SetConfig+0x164>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e061      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e05e      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d14:	2304      	movs	r3, #4
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e05b      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e058      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d20:	2310      	movs	r3, #16
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e055      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a6f      	ldr	r2, [pc, #444]	; (8006ee8 <UART_SetConfig+0x32c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d124      	bne.n	8006d7a <UART_SetConfig+0x1be>
 8006d30:	4b6a      	ldr	r3, [pc, #424]	; (8006edc <UART_SetConfig+0x320>)
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d3c:	d011      	beq.n	8006d62 <UART_SetConfig+0x1a6>
 8006d3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d42:	d817      	bhi.n	8006d74 <UART_SetConfig+0x1b8>
 8006d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d48:	d011      	beq.n	8006d6e <UART_SetConfig+0x1b2>
 8006d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d4e:	d811      	bhi.n	8006d74 <UART_SetConfig+0x1b8>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <UART_SetConfig+0x1a0>
 8006d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d58:	d006      	beq.n	8006d68 <UART_SetConfig+0x1ac>
 8006d5a:	e00b      	b.n	8006d74 <UART_SetConfig+0x1b8>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e037      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d62:	2302      	movs	r3, #2
 8006d64:	77fb      	strb	r3, [r7, #31]
 8006d66:	e034      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e031      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e02e      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d74:	2310      	movs	r3, #16
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e02b      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a5b      	ldr	r2, [pc, #364]	; (8006eec <UART_SetConfig+0x330>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d124      	bne.n	8006dce <UART_SetConfig+0x212>
 8006d84:	4b55      	ldr	r3, [pc, #340]	; (8006edc <UART_SetConfig+0x320>)
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d90:	d011      	beq.n	8006db6 <UART_SetConfig+0x1fa>
 8006d92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d96:	d817      	bhi.n	8006dc8 <UART_SetConfig+0x20c>
 8006d98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d9c:	d011      	beq.n	8006dc2 <UART_SetConfig+0x206>
 8006d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006da2:	d811      	bhi.n	8006dc8 <UART_SetConfig+0x20c>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <UART_SetConfig+0x1f4>
 8006da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dac:	d006      	beq.n	8006dbc <UART_SetConfig+0x200>
 8006dae:	e00b      	b.n	8006dc8 <UART_SetConfig+0x20c>
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e00d      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006db6:	2302      	movs	r3, #2
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e00a      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e007      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e004      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e001      	b.n	8006dd2 <UART_SetConfig+0x216>
 8006dce:	2310      	movs	r3, #16
 8006dd0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dda:	d15c      	bne.n	8006e96 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006ddc:	7ffb      	ldrb	r3, [r7, #31]
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d827      	bhi.n	8006e32 <UART_SetConfig+0x276>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <UART_SetConfig+0x22c>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e15 	.word	0x08006e15
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e33 	.word	0x08006e33
 8006df8:	08006e23 	.word	0x08006e23
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e33 	.word	0x08006e33
 8006e04:	08006e33 	.word	0x08006e33
 8006e08:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f7fe f966 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 8006e10:	61b8      	str	r0, [r7, #24]
        break;
 8006e12:	e013      	b.n	8006e3c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e14:	f7fe f984 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 8006e18:	61b8      	str	r0, [r7, #24]
        break;
 8006e1a:	e00f      	b.n	8006e3c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b34      	ldr	r3, [pc, #208]	; (8006ef0 <UART_SetConfig+0x334>)
 8006e1e:	61bb      	str	r3, [r7, #24]
        break;
 8006e20:	e00c      	b.n	8006e3c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fe f8e5 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8006e26:	61b8      	str	r0, [r7, #24]
        break;
 8006e28:	e008      	b.n	8006e3c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2e:	61bb      	str	r3, [r7, #24]
        break;
 8006e30:	e004      	b.n	8006e3c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	77bb      	strb	r3, [r7, #30]
        break;
 8006e3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8084 	beq.w	8006f4c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	005a      	lsls	r2, r3, #1
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	085b      	lsrs	r3, r3, #1
 8006e4e:	441a      	add	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d916      	bls.n	8006e90 <UART_SetConfig+0x2d4>
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e68:	d212      	bcs.n	8006e90 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	f023 030f 	bic.w	r3, r3, #15
 8006e72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	89fb      	ldrh	r3, [r7, #14]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	89fa      	ldrh	r2, [r7, #14]
 8006e8c:	60da      	str	r2, [r3, #12]
 8006e8e:	e05d      	b.n	8006f4c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	77bb      	strb	r3, [r7, #30]
 8006e94:	e05a      	b.n	8006f4c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e96:	7ffb      	ldrb	r3, [r7, #31]
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d836      	bhi.n	8006f0a <UART_SetConfig+0x34e>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <UART_SetConfig+0x2e8>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ec9 	.word	0x08006ec9
 8006ea8:	08006ed1 	.word	0x08006ed1
 8006eac:	08006ef5 	.word	0x08006ef5
 8006eb0:	08006f0b 	.word	0x08006f0b
 8006eb4:	08006efb 	.word	0x08006efb
 8006eb8:	08006f0b 	.word	0x08006f0b
 8006ebc:	08006f0b 	.word	0x08006f0b
 8006ec0:	08006f0b 	.word	0x08006f0b
 8006ec4:	08006f03 	.word	0x08006f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec8:	f7fe f908 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 8006ecc:	61b8      	str	r0, [r7, #24]
        break;
 8006ece:	e021      	b.n	8006f14 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ed0:	f7fe f926 	bl	8005120 <HAL_RCC_GetPCLK2Freq>
 8006ed4:	61b8      	str	r0, [r7, #24]
        break;
 8006ed6:	e01d      	b.n	8006f14 <UART_SetConfig+0x358>
 8006ed8:	40013800 	.word	0x40013800
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40004400 	.word	0x40004400
 8006ee4:	40004800 	.word	0x40004800
 8006ee8:	40004c00 	.word	0x40004c00
 8006eec:	40005000 	.word	0x40005000
 8006ef0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <UART_SetConfig+0x3a8>)
 8006ef6:	61bb      	str	r3, [r7, #24]
        break;
 8006ef8:	e00c      	b.n	8006f14 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efa:	f7fe f879 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8006efe:	61b8      	str	r0, [r7, #24]
        break;
 8006f00:	e008      	b.n	8006f14 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f06:	61bb      	str	r3, [r7, #24]
        break;
 8006f08:	e004      	b.n	8006f14 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	77bb      	strb	r3, [r7, #30]
        break;
 8006f12:	bf00      	nop
    }

    if (pclk != 0U)
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d018      	beq.n	8006f4c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	085a      	lsrs	r2, r3, #1
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	441a      	add	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b0f      	cmp	r3, #15
 8006f34:	d908      	bls.n	8006f48 <UART_SetConfig+0x38c>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3c:	d204      	bcs.n	8006f48 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	60da      	str	r2, [r3, #12]
 8006f46:	e001      	b.n	8006f4c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f58:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	007a1200 	.word	0x007a1200

08006f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01a      	beq.n	800707e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007066:	d10a      	bne.n	800707e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  }
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070bc:	f7fb f8ae 	bl	800221c <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d10e      	bne.n	80070ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f82d 	bl	800713e <UART_WaitOnFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e023      	b.n	8007136 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d10e      	bne.n	800711a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f817 	bl	800713e <UART_WaitOnFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e00d      	b.n	8007136 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b09c      	sub	sp, #112	; 0x70
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	4613      	mov	r3, r2
 800714c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800714e:	e0a5      	b.n	800729c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	f000 80a1 	beq.w	800729c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715a:	f7fb f85f 	bl	800221c <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007166:	429a      	cmp	r2, r3
 8007168:	d302      	bcc.n	8007170 <UART_WaitOnFlagUntilTimeout+0x32>
 800716a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800716c:	2b00      	cmp	r3, #0
 800716e:	d13e      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800717e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007184:	667b      	str	r3, [r7, #100]	; 0x64
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800718e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007190:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800719c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e6      	bne.n	8007170 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	663b      	str	r3, [r7, #96]	; 0x60
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80071c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e067      	b.n	80072be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d04f      	beq.n	800729c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d147      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007214:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800722a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
 8007236:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800723a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e6      	bne.n	8007216 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	613b      	str	r3, [r7, #16]
   return(result);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007268:	623a      	str	r2, [r7, #32]
 800726a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	69f9      	ldr	r1, [r7, #28]
 800726e:	6a3a      	ldr	r2, [r7, #32]
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	61bb      	str	r3, [r7, #24]
   return(result);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e5      	bne.n	8007248 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2220      	movs	r2, #32
 800728c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e010      	b.n	80072be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	69da      	ldr	r2, [r3, #28]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	f43f af4a 	beq.w	8007150 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3770      	adds	r7, #112	; 0x70
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <__errno>:
 80072c8:	4b01      	ldr	r3, [pc, #4]	; (80072d0 <__errno+0x8>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	2000000c 	.word	0x2000000c

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4d0d      	ldr	r5, [pc, #52]	; (800730c <__libc_init_array+0x38>)
 80072d8:	4c0d      	ldr	r4, [pc, #52]	; (8007310 <__libc_init_array+0x3c>)
 80072da:	1b64      	subs	r4, r4, r5
 80072dc:	10a4      	asrs	r4, r4, #2
 80072de:	2600      	movs	r6, #0
 80072e0:	42a6      	cmp	r6, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	4d0b      	ldr	r5, [pc, #44]	; (8007314 <__libc_init_array+0x40>)
 80072e6:	4c0c      	ldr	r4, [pc, #48]	; (8007318 <__libc_init_array+0x44>)
 80072e8:	f002 fef0 	bl	800a0cc <_init>
 80072ec:	1b64      	subs	r4, r4, r5
 80072ee:	10a4      	asrs	r4, r4, #2
 80072f0:	2600      	movs	r6, #0
 80072f2:	42a6      	cmp	r6, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fc:	4798      	blx	r3
 80072fe:	3601      	adds	r6, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f855 3b04 	ldr.w	r3, [r5], #4
 8007306:	4798      	blx	r3
 8007308:	3601      	adds	r6, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	0800a574 	.word	0x0800a574
 8007310:	0800a574 	.word	0x0800a574
 8007314:	0800a574 	.word	0x0800a574
 8007318:	0800a578 	.word	0x0800a578

0800731c <memset>:
 800731c:	4402      	add	r2, r0
 800731e:	4603      	mov	r3, r0
 8007320:	4293      	cmp	r3, r2
 8007322:	d100      	bne.n	8007326 <memset+0xa>
 8007324:	4770      	bx	lr
 8007326:	f803 1b01 	strb.w	r1, [r3], #1
 800732a:	e7f9      	b.n	8007320 <memset+0x4>

0800732c <__cvt>:
 800732c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	ec55 4b10 	vmov	r4, r5, d0
 8007334:	2d00      	cmp	r5, #0
 8007336:	460e      	mov	r6, r1
 8007338:	4619      	mov	r1, r3
 800733a:	462b      	mov	r3, r5
 800733c:	bfbb      	ittet	lt
 800733e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007342:	461d      	movlt	r5, r3
 8007344:	2300      	movge	r3, #0
 8007346:	232d      	movlt	r3, #45	; 0x2d
 8007348:	700b      	strb	r3, [r1, #0]
 800734a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800734c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007350:	4691      	mov	r9, r2
 8007352:	f023 0820 	bic.w	r8, r3, #32
 8007356:	bfbc      	itt	lt
 8007358:	4622      	movlt	r2, r4
 800735a:	4614      	movlt	r4, r2
 800735c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007360:	d005      	beq.n	800736e <__cvt+0x42>
 8007362:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007366:	d100      	bne.n	800736a <__cvt+0x3e>
 8007368:	3601      	adds	r6, #1
 800736a:	2102      	movs	r1, #2
 800736c:	e000      	b.n	8007370 <__cvt+0x44>
 800736e:	2103      	movs	r1, #3
 8007370:	ab03      	add	r3, sp, #12
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	ab02      	add	r3, sp, #8
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	ec45 4b10 	vmov	d0, r4, r5
 800737c:	4653      	mov	r3, sl
 800737e:	4632      	mov	r2, r6
 8007380:	f000 fefe 	bl	8008180 <_dtoa_r>
 8007384:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007388:	4607      	mov	r7, r0
 800738a:	d102      	bne.n	8007392 <__cvt+0x66>
 800738c:	f019 0f01 	tst.w	r9, #1
 8007390:	d022      	beq.n	80073d8 <__cvt+0xac>
 8007392:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007396:	eb07 0906 	add.w	r9, r7, r6
 800739a:	d110      	bne.n	80073be <__cvt+0x92>
 800739c:	783b      	ldrb	r3, [r7, #0]
 800739e:	2b30      	cmp	r3, #48	; 0x30
 80073a0:	d10a      	bne.n	80073b8 <__cvt+0x8c>
 80073a2:	2200      	movs	r2, #0
 80073a4:	2300      	movs	r3, #0
 80073a6:	4620      	mov	r0, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7f9 fb8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ae:	b918      	cbnz	r0, 80073b8 <__cvt+0x8c>
 80073b0:	f1c6 0601 	rsb	r6, r6, #1
 80073b4:	f8ca 6000 	str.w	r6, [sl]
 80073b8:	f8da 3000 	ldr.w	r3, [sl]
 80073bc:	4499      	add	r9, r3
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ca:	b108      	cbz	r0, 80073d0 <__cvt+0xa4>
 80073cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80073d0:	2230      	movs	r2, #48	; 0x30
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	454b      	cmp	r3, r9
 80073d6:	d307      	bcc.n	80073e8 <__cvt+0xbc>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073dc:	1bdb      	subs	r3, r3, r7
 80073de:	4638      	mov	r0, r7
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	b004      	add	sp, #16
 80073e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e8:	1c59      	adds	r1, r3, #1
 80073ea:	9103      	str	r1, [sp, #12]
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	e7f0      	b.n	80073d2 <__cvt+0xa6>

080073f0 <__exponent>:
 80073f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073f2:	4603      	mov	r3, r0
 80073f4:	2900      	cmp	r1, #0
 80073f6:	bfb8      	it	lt
 80073f8:	4249      	neglt	r1, r1
 80073fa:	f803 2b02 	strb.w	r2, [r3], #2
 80073fe:	bfb4      	ite	lt
 8007400:	222d      	movlt	r2, #45	; 0x2d
 8007402:	222b      	movge	r2, #43	; 0x2b
 8007404:	2909      	cmp	r1, #9
 8007406:	7042      	strb	r2, [r0, #1]
 8007408:	dd2a      	ble.n	8007460 <__exponent+0x70>
 800740a:	f10d 0407 	add.w	r4, sp, #7
 800740e:	46a4      	mov	ip, r4
 8007410:	270a      	movs	r7, #10
 8007412:	46a6      	mov	lr, r4
 8007414:	460a      	mov	r2, r1
 8007416:	fb91 f6f7 	sdiv	r6, r1, r7
 800741a:	fb07 1516 	mls	r5, r7, r6, r1
 800741e:	3530      	adds	r5, #48	; 0x30
 8007420:	2a63      	cmp	r2, #99	; 0x63
 8007422:	f104 34ff 	add.w	r4, r4, #4294967295
 8007426:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800742a:	4631      	mov	r1, r6
 800742c:	dcf1      	bgt.n	8007412 <__exponent+0x22>
 800742e:	3130      	adds	r1, #48	; 0x30
 8007430:	f1ae 0502 	sub.w	r5, lr, #2
 8007434:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007438:	1c44      	adds	r4, r0, #1
 800743a:	4629      	mov	r1, r5
 800743c:	4561      	cmp	r1, ip
 800743e:	d30a      	bcc.n	8007456 <__exponent+0x66>
 8007440:	f10d 0209 	add.w	r2, sp, #9
 8007444:	eba2 020e 	sub.w	r2, r2, lr
 8007448:	4565      	cmp	r5, ip
 800744a:	bf88      	it	hi
 800744c:	2200      	movhi	r2, #0
 800744e:	4413      	add	r3, r2
 8007450:	1a18      	subs	r0, r3, r0
 8007452:	b003      	add	sp, #12
 8007454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800745a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800745e:	e7ed      	b.n	800743c <__exponent+0x4c>
 8007460:	2330      	movs	r3, #48	; 0x30
 8007462:	3130      	adds	r1, #48	; 0x30
 8007464:	7083      	strb	r3, [r0, #2]
 8007466:	70c1      	strb	r1, [r0, #3]
 8007468:	1d03      	adds	r3, r0, #4
 800746a:	e7f1      	b.n	8007450 <__exponent+0x60>

0800746c <_printf_float>:
 800746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007470:	ed2d 8b02 	vpush	{d8}
 8007474:	b08d      	sub	sp, #52	; 0x34
 8007476:	460c      	mov	r4, r1
 8007478:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800747c:	4616      	mov	r6, r2
 800747e:	461f      	mov	r7, r3
 8007480:	4605      	mov	r5, r0
 8007482:	f001 fe23 	bl	80090cc <_localeconv_r>
 8007486:	f8d0 a000 	ldr.w	sl, [r0]
 800748a:	4650      	mov	r0, sl
 800748c:	f7f8 fea0 	bl	80001d0 <strlen>
 8007490:	2300      	movs	r3, #0
 8007492:	930a      	str	r3, [sp, #40]	; 0x28
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	9305      	str	r3, [sp, #20]
 8007498:	f8d8 3000 	ldr.w	r3, [r8]
 800749c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80074a0:	3307      	adds	r3, #7
 80074a2:	f023 0307 	bic.w	r3, r3, #7
 80074a6:	f103 0208 	add.w	r2, r3, #8
 80074aa:	f8c8 2000 	str.w	r2, [r8]
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80074c4:	ee08 0a10 	vmov	s16, r0
 80074c8:	4b9f      	ldr	r3, [pc, #636]	; (8007748 <_printf_float+0x2dc>)
 80074ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074ce:	f04f 32ff 	mov.w	r2, #4294967295
 80074d2:	f7f9 fb2b 	bl	8000b2c <__aeabi_dcmpun>
 80074d6:	bb88      	cbnz	r0, 800753c <_printf_float+0xd0>
 80074d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074dc:	4b9a      	ldr	r3, [pc, #616]	; (8007748 <_printf_float+0x2dc>)
 80074de:	f04f 32ff 	mov.w	r2, #4294967295
 80074e2:	f7f9 fb05 	bl	8000af0 <__aeabi_dcmple>
 80074e6:	bb48      	cbnz	r0, 800753c <_printf_float+0xd0>
 80074e8:	2200      	movs	r2, #0
 80074ea:	2300      	movs	r3, #0
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	f7f9 faf4 	bl	8000adc <__aeabi_dcmplt>
 80074f4:	b110      	cbz	r0, 80074fc <_printf_float+0x90>
 80074f6:	232d      	movs	r3, #45	; 0x2d
 80074f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074fc:	4b93      	ldr	r3, [pc, #588]	; (800774c <_printf_float+0x2e0>)
 80074fe:	4894      	ldr	r0, [pc, #592]	; (8007750 <_printf_float+0x2e4>)
 8007500:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007504:	bf94      	ite	ls
 8007506:	4698      	movls	r8, r3
 8007508:	4680      	movhi	r8, r0
 800750a:	2303      	movs	r3, #3
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	9b05      	ldr	r3, [sp, #20]
 8007510:	f023 0204 	bic.w	r2, r3, #4
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	f04f 0900 	mov.w	r9, #0
 800751a:	9700      	str	r7, [sp, #0]
 800751c:	4633      	mov	r3, r6
 800751e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007520:	4621      	mov	r1, r4
 8007522:	4628      	mov	r0, r5
 8007524:	f000 f9d8 	bl	80078d8 <_printf_common>
 8007528:	3001      	adds	r0, #1
 800752a:	f040 8090 	bne.w	800764e <_printf_float+0x1e2>
 800752e:	f04f 30ff 	mov.w	r0, #4294967295
 8007532:	b00d      	add	sp, #52	; 0x34
 8007534:	ecbd 8b02 	vpop	{d8}
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	4642      	mov	r2, r8
 800753e:	464b      	mov	r3, r9
 8007540:	4640      	mov	r0, r8
 8007542:	4649      	mov	r1, r9
 8007544:	f7f9 faf2 	bl	8000b2c <__aeabi_dcmpun>
 8007548:	b140      	cbz	r0, 800755c <_printf_float+0xf0>
 800754a:	464b      	mov	r3, r9
 800754c:	2b00      	cmp	r3, #0
 800754e:	bfbc      	itt	lt
 8007550:	232d      	movlt	r3, #45	; 0x2d
 8007552:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007556:	487f      	ldr	r0, [pc, #508]	; (8007754 <_printf_float+0x2e8>)
 8007558:	4b7f      	ldr	r3, [pc, #508]	; (8007758 <_printf_float+0x2ec>)
 800755a:	e7d1      	b.n	8007500 <_printf_float+0x94>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007562:	9206      	str	r2, [sp, #24]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	d13f      	bne.n	80075e8 <_printf_float+0x17c>
 8007568:	2306      	movs	r3, #6
 800756a:	6063      	str	r3, [r4, #4]
 800756c:	9b05      	ldr	r3, [sp, #20]
 800756e:	6861      	ldr	r1, [r4, #4]
 8007570:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007574:	2300      	movs	r3, #0
 8007576:	9303      	str	r3, [sp, #12]
 8007578:	ab0a      	add	r3, sp, #40	; 0x28
 800757a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800757e:	ab09      	add	r3, sp, #36	; 0x24
 8007580:	ec49 8b10 	vmov	d0, r8, r9
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800758c:	4628      	mov	r0, r5
 800758e:	f7ff fecd 	bl	800732c <__cvt>
 8007592:	9b06      	ldr	r3, [sp, #24]
 8007594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007596:	2b47      	cmp	r3, #71	; 0x47
 8007598:	4680      	mov	r8, r0
 800759a:	d108      	bne.n	80075ae <_printf_float+0x142>
 800759c:	1cc8      	adds	r0, r1, #3
 800759e:	db02      	blt.n	80075a6 <_printf_float+0x13a>
 80075a0:	6863      	ldr	r3, [r4, #4]
 80075a2:	4299      	cmp	r1, r3
 80075a4:	dd41      	ble.n	800762a <_printf_float+0x1be>
 80075a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80075aa:	fa5f fb8b 	uxtb.w	fp, fp
 80075ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075b2:	d820      	bhi.n	80075f6 <_printf_float+0x18a>
 80075b4:	3901      	subs	r1, #1
 80075b6:	465a      	mov	r2, fp
 80075b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075bc:	9109      	str	r1, [sp, #36]	; 0x24
 80075be:	f7ff ff17 	bl	80073f0 <__exponent>
 80075c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c4:	1813      	adds	r3, r2, r0
 80075c6:	2a01      	cmp	r2, #1
 80075c8:	4681      	mov	r9, r0
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	dc02      	bgt.n	80075d4 <_printf_float+0x168>
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	07d2      	lsls	r2, r2, #31
 80075d2:	d501      	bpl.n	80075d8 <_printf_float+0x16c>
 80075d4:	3301      	adds	r3, #1
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d09c      	beq.n	800751a <_printf_float+0xae>
 80075e0:	232d      	movs	r3, #45	; 0x2d
 80075e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e6:	e798      	b.n	800751a <_printf_float+0xae>
 80075e8:	9a06      	ldr	r2, [sp, #24]
 80075ea:	2a47      	cmp	r2, #71	; 0x47
 80075ec:	d1be      	bne.n	800756c <_printf_float+0x100>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1bc      	bne.n	800756c <_printf_float+0x100>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e7b9      	b.n	800756a <_printf_float+0xfe>
 80075f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075fa:	d118      	bne.n	800762e <_printf_float+0x1c2>
 80075fc:	2900      	cmp	r1, #0
 80075fe:	6863      	ldr	r3, [r4, #4]
 8007600:	dd0b      	ble.n	800761a <_printf_float+0x1ae>
 8007602:	6121      	str	r1, [r4, #16]
 8007604:	b913      	cbnz	r3, 800760c <_printf_float+0x1a0>
 8007606:	6822      	ldr	r2, [r4, #0]
 8007608:	07d0      	lsls	r0, r2, #31
 800760a:	d502      	bpl.n	8007612 <_printf_float+0x1a6>
 800760c:	3301      	adds	r3, #1
 800760e:	440b      	add	r3, r1
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	65a1      	str	r1, [r4, #88]	; 0x58
 8007614:	f04f 0900 	mov.w	r9, #0
 8007618:	e7de      	b.n	80075d8 <_printf_float+0x16c>
 800761a:	b913      	cbnz	r3, 8007622 <_printf_float+0x1b6>
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	07d2      	lsls	r2, r2, #31
 8007620:	d501      	bpl.n	8007626 <_printf_float+0x1ba>
 8007622:	3302      	adds	r3, #2
 8007624:	e7f4      	b.n	8007610 <_printf_float+0x1a4>
 8007626:	2301      	movs	r3, #1
 8007628:	e7f2      	b.n	8007610 <_printf_float+0x1a4>
 800762a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800762e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007630:	4299      	cmp	r1, r3
 8007632:	db05      	blt.n	8007640 <_printf_float+0x1d4>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	6121      	str	r1, [r4, #16]
 8007638:	07d8      	lsls	r0, r3, #31
 800763a:	d5ea      	bpl.n	8007612 <_printf_float+0x1a6>
 800763c:	1c4b      	adds	r3, r1, #1
 800763e:	e7e7      	b.n	8007610 <_printf_float+0x1a4>
 8007640:	2900      	cmp	r1, #0
 8007642:	bfd4      	ite	le
 8007644:	f1c1 0202 	rsble	r2, r1, #2
 8007648:	2201      	movgt	r2, #1
 800764a:	4413      	add	r3, r2
 800764c:	e7e0      	b.n	8007610 <_printf_float+0x1a4>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	055a      	lsls	r2, r3, #21
 8007652:	d407      	bmi.n	8007664 <_printf_float+0x1f8>
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	4642      	mov	r2, r8
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	d12c      	bne.n	80076bc <_printf_float+0x250>
 8007662:	e764      	b.n	800752e <_printf_float+0xc2>
 8007664:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007668:	f240 80e0 	bls.w	800782c <_printf_float+0x3c0>
 800766c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	f7f9 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007678:	2800      	cmp	r0, #0
 800767a:	d034      	beq.n	80076e6 <_printf_float+0x27a>
 800767c:	4a37      	ldr	r2, [pc, #220]	; (800775c <_printf_float+0x2f0>)
 800767e:	2301      	movs	r3, #1
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	f43f af51 	beq.w	800752e <_printf_float+0xc2>
 800768c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007690:	429a      	cmp	r2, r3
 8007692:	db02      	blt.n	800769a <_printf_float+0x22e>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	07d8      	lsls	r0, r3, #31
 8007698:	d510      	bpl.n	80076bc <_printf_float+0x250>
 800769a:	ee18 3a10 	vmov	r3, s16
 800769e:	4652      	mov	r2, sl
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af41 	beq.w	800752e <_printf_float+0xc2>
 80076ac:	f04f 0800 	mov.w	r8, #0
 80076b0:	f104 091a 	add.w	r9, r4, #26
 80076b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b6:	3b01      	subs	r3, #1
 80076b8:	4543      	cmp	r3, r8
 80076ba:	dc09      	bgt.n	80076d0 <_printf_float+0x264>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	079b      	lsls	r3, r3, #30
 80076c0:	f100 8105 	bmi.w	80078ce <_printf_float+0x462>
 80076c4:	68e0      	ldr	r0, [r4, #12]
 80076c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c8:	4298      	cmp	r0, r3
 80076ca:	bfb8      	it	lt
 80076cc:	4618      	movlt	r0, r3
 80076ce:	e730      	b.n	8007532 <_printf_float+0xc6>
 80076d0:	2301      	movs	r3, #1
 80076d2:	464a      	mov	r2, r9
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f af27 	beq.w	800752e <_printf_float+0xc2>
 80076e0:	f108 0801 	add.w	r8, r8, #1
 80076e4:	e7e6      	b.n	80076b4 <_printf_float+0x248>
 80076e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dc39      	bgt.n	8007760 <_printf_float+0x2f4>
 80076ec:	4a1b      	ldr	r2, [pc, #108]	; (800775c <_printf_float+0x2f0>)
 80076ee:	2301      	movs	r3, #1
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f af19 	beq.w	800752e <_printf_float+0xc2>
 80076fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007700:	4313      	orrs	r3, r2
 8007702:	d102      	bne.n	800770a <_printf_float+0x29e>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	07d9      	lsls	r1, r3, #31
 8007708:	d5d8      	bpl.n	80076bc <_printf_float+0x250>
 800770a:	ee18 3a10 	vmov	r3, s16
 800770e:	4652      	mov	r2, sl
 8007710:	4631      	mov	r1, r6
 8007712:	4628      	mov	r0, r5
 8007714:	47b8      	blx	r7
 8007716:	3001      	adds	r0, #1
 8007718:	f43f af09 	beq.w	800752e <_printf_float+0xc2>
 800771c:	f04f 0900 	mov.w	r9, #0
 8007720:	f104 0a1a 	add.w	sl, r4, #26
 8007724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007726:	425b      	negs	r3, r3
 8007728:	454b      	cmp	r3, r9
 800772a:	dc01      	bgt.n	8007730 <_printf_float+0x2c4>
 800772c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772e:	e792      	b.n	8007656 <_printf_float+0x1ea>
 8007730:	2301      	movs	r3, #1
 8007732:	4652      	mov	r2, sl
 8007734:	4631      	mov	r1, r6
 8007736:	4628      	mov	r0, r5
 8007738:	47b8      	blx	r7
 800773a:	3001      	adds	r0, #1
 800773c:	f43f aef7 	beq.w	800752e <_printf_float+0xc2>
 8007740:	f109 0901 	add.w	r9, r9, #1
 8007744:	e7ee      	b.n	8007724 <_printf_float+0x2b8>
 8007746:	bf00      	nop
 8007748:	7fefffff 	.word	0x7fefffff
 800774c:	0800a1a0 	.word	0x0800a1a0
 8007750:	0800a1a4 	.word	0x0800a1a4
 8007754:	0800a1ac 	.word	0x0800a1ac
 8007758:	0800a1a8 	.word	0x0800a1a8
 800775c:	0800a1b0 	.word	0x0800a1b0
 8007760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007762:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007764:	429a      	cmp	r2, r3
 8007766:	bfa8      	it	ge
 8007768:	461a      	movge	r2, r3
 800776a:	2a00      	cmp	r2, #0
 800776c:	4691      	mov	r9, r2
 800776e:	dc37      	bgt.n	80077e0 <_printf_float+0x374>
 8007770:	f04f 0b00 	mov.w	fp, #0
 8007774:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007778:	f104 021a 	add.w	r2, r4, #26
 800777c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	eba3 0309 	sub.w	r3, r3, r9
 8007784:	455b      	cmp	r3, fp
 8007786:	dc33      	bgt.n	80077f0 <_printf_float+0x384>
 8007788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800778c:	429a      	cmp	r2, r3
 800778e:	db3b      	blt.n	8007808 <_printf_float+0x39c>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	07da      	lsls	r2, r3, #31
 8007794:	d438      	bmi.n	8007808 <_printf_float+0x39c>
 8007796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007798:	9a05      	ldr	r2, [sp, #20]
 800779a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800779c:	1a9a      	subs	r2, r3, r2
 800779e:	eba3 0901 	sub.w	r9, r3, r1
 80077a2:	4591      	cmp	r9, r2
 80077a4:	bfa8      	it	ge
 80077a6:	4691      	movge	r9, r2
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	dc35      	bgt.n	800781a <_printf_float+0x3ae>
 80077ae:	f04f 0800 	mov.w	r8, #0
 80077b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077b6:	f104 0a1a 	add.w	sl, r4, #26
 80077ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	eba3 0309 	sub.w	r3, r3, r9
 80077c4:	4543      	cmp	r3, r8
 80077c6:	f77f af79 	ble.w	80076bc <_printf_float+0x250>
 80077ca:	2301      	movs	r3, #1
 80077cc:	4652      	mov	r2, sl
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f aeaa 	beq.w	800752e <_printf_float+0xc2>
 80077da:	f108 0801 	add.w	r8, r8, #1
 80077de:	e7ec      	b.n	80077ba <_printf_float+0x34e>
 80077e0:	4613      	mov	r3, r2
 80077e2:	4631      	mov	r1, r6
 80077e4:	4642      	mov	r2, r8
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b8      	blx	r7
 80077ea:	3001      	adds	r0, #1
 80077ec:	d1c0      	bne.n	8007770 <_printf_float+0x304>
 80077ee:	e69e      	b.n	800752e <_printf_float+0xc2>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	9205      	str	r2, [sp, #20]
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f ae97 	beq.w	800752e <_printf_float+0xc2>
 8007800:	9a05      	ldr	r2, [sp, #20]
 8007802:	f10b 0b01 	add.w	fp, fp, #1
 8007806:	e7b9      	b.n	800777c <_printf_float+0x310>
 8007808:	ee18 3a10 	vmov	r3, s16
 800780c:	4652      	mov	r2, sl
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	d1be      	bne.n	8007796 <_printf_float+0x32a>
 8007818:	e689      	b.n	800752e <_printf_float+0xc2>
 800781a:	9a05      	ldr	r2, [sp, #20]
 800781c:	464b      	mov	r3, r9
 800781e:	4442      	add	r2, r8
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	d1c1      	bne.n	80077ae <_printf_float+0x342>
 800782a:	e680      	b.n	800752e <_printf_float+0xc2>
 800782c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800782e:	2a01      	cmp	r2, #1
 8007830:	dc01      	bgt.n	8007836 <_printf_float+0x3ca>
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	d538      	bpl.n	80078a8 <_printf_float+0x43c>
 8007836:	2301      	movs	r3, #1
 8007838:	4642      	mov	r2, r8
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae74 	beq.w	800752e <_printf_float+0xc2>
 8007846:	ee18 3a10 	vmov	r3, s16
 800784a:	4652      	mov	r2, sl
 800784c:	4631      	mov	r1, r6
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	f43f ae6b 	beq.w	800752e <_printf_float+0xc2>
 8007858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800785c:	2200      	movs	r2, #0
 800785e:	2300      	movs	r3, #0
 8007860:	f7f9 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8007864:	b9d8      	cbnz	r0, 800789e <_printf_float+0x432>
 8007866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007868:	f108 0201 	add.w	r2, r8, #1
 800786c:	3b01      	subs	r3, #1
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	d10e      	bne.n	8007896 <_printf_float+0x42a>
 8007878:	e659      	b.n	800752e <_printf_float+0xc2>
 800787a:	2301      	movs	r3, #1
 800787c:	4652      	mov	r2, sl
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	47b8      	blx	r7
 8007884:	3001      	adds	r0, #1
 8007886:	f43f ae52 	beq.w	800752e <_printf_float+0xc2>
 800788a:	f108 0801 	add.w	r8, r8, #1
 800788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007890:	3b01      	subs	r3, #1
 8007892:	4543      	cmp	r3, r8
 8007894:	dcf1      	bgt.n	800787a <_printf_float+0x40e>
 8007896:	464b      	mov	r3, r9
 8007898:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800789c:	e6dc      	b.n	8007658 <_printf_float+0x1ec>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	f104 0a1a 	add.w	sl, r4, #26
 80078a6:	e7f2      	b.n	800788e <_printf_float+0x422>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4642      	mov	r2, r8
 80078ac:	e7df      	b.n	800786e <_printf_float+0x402>
 80078ae:	2301      	movs	r3, #1
 80078b0:	464a      	mov	r2, r9
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f ae38 	beq.w	800752e <_printf_float+0xc2>
 80078be:	f108 0801 	add.w	r8, r8, #1
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078c6:	1a5b      	subs	r3, r3, r1
 80078c8:	4543      	cmp	r3, r8
 80078ca:	dcf0      	bgt.n	80078ae <_printf_float+0x442>
 80078cc:	e6fa      	b.n	80076c4 <_printf_float+0x258>
 80078ce:	f04f 0800 	mov.w	r8, #0
 80078d2:	f104 0919 	add.w	r9, r4, #25
 80078d6:	e7f4      	b.n	80078c2 <_printf_float+0x456>

080078d8 <_printf_common>:
 80078d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	4616      	mov	r6, r2
 80078de:	4699      	mov	r9, r3
 80078e0:	688a      	ldr	r2, [r1, #8]
 80078e2:	690b      	ldr	r3, [r1, #16]
 80078e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078e8:	4293      	cmp	r3, r2
 80078ea:	bfb8      	it	lt
 80078ec:	4613      	movlt	r3, r2
 80078ee:	6033      	str	r3, [r6, #0]
 80078f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f4:	4607      	mov	r7, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	b10a      	cbz	r2, 80078fe <_printf_common+0x26>
 80078fa:	3301      	adds	r3, #1
 80078fc:	6033      	str	r3, [r6, #0]
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	0699      	lsls	r1, r3, #26
 8007902:	bf42      	ittt	mi
 8007904:	6833      	ldrmi	r3, [r6, #0]
 8007906:	3302      	addmi	r3, #2
 8007908:	6033      	strmi	r3, [r6, #0]
 800790a:	6825      	ldr	r5, [r4, #0]
 800790c:	f015 0506 	ands.w	r5, r5, #6
 8007910:	d106      	bne.n	8007920 <_printf_common+0x48>
 8007912:	f104 0a19 	add.w	sl, r4, #25
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	6832      	ldr	r2, [r6, #0]
 800791a:	1a9b      	subs	r3, r3, r2
 800791c:	42ab      	cmp	r3, r5
 800791e:	dc26      	bgt.n	800796e <_printf_common+0x96>
 8007920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007924:	1e13      	subs	r3, r2, #0
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	bf18      	it	ne
 800792a:	2301      	movne	r3, #1
 800792c:	0692      	lsls	r2, r2, #26
 800792e:	d42b      	bmi.n	8007988 <_printf_common+0xb0>
 8007930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007934:	4649      	mov	r1, r9
 8007936:	4638      	mov	r0, r7
 8007938:	47c0      	blx	r8
 800793a:	3001      	adds	r0, #1
 800793c:	d01e      	beq.n	800797c <_printf_common+0xa4>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	68e5      	ldr	r5, [r4, #12]
 8007942:	6832      	ldr	r2, [r6, #0]
 8007944:	f003 0306 	and.w	r3, r3, #6
 8007948:	2b04      	cmp	r3, #4
 800794a:	bf08      	it	eq
 800794c:	1aad      	subeq	r5, r5, r2
 800794e:	68a3      	ldr	r3, [r4, #8]
 8007950:	6922      	ldr	r2, [r4, #16]
 8007952:	bf0c      	ite	eq
 8007954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007958:	2500      	movne	r5, #0
 800795a:	4293      	cmp	r3, r2
 800795c:	bfc4      	itt	gt
 800795e:	1a9b      	subgt	r3, r3, r2
 8007960:	18ed      	addgt	r5, r5, r3
 8007962:	2600      	movs	r6, #0
 8007964:	341a      	adds	r4, #26
 8007966:	42b5      	cmp	r5, r6
 8007968:	d11a      	bne.n	80079a0 <_printf_common+0xc8>
 800796a:	2000      	movs	r0, #0
 800796c:	e008      	b.n	8007980 <_printf_common+0xa8>
 800796e:	2301      	movs	r3, #1
 8007970:	4652      	mov	r2, sl
 8007972:	4649      	mov	r1, r9
 8007974:	4638      	mov	r0, r7
 8007976:	47c0      	blx	r8
 8007978:	3001      	adds	r0, #1
 800797a:	d103      	bne.n	8007984 <_printf_common+0xac>
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007984:	3501      	adds	r5, #1
 8007986:	e7c6      	b.n	8007916 <_printf_common+0x3e>
 8007988:	18e1      	adds	r1, r4, r3
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	2030      	movs	r0, #48	; 0x30
 800798e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007992:	4422      	add	r2, r4
 8007994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800799c:	3302      	adds	r3, #2
 800799e:	e7c7      	b.n	8007930 <_printf_common+0x58>
 80079a0:	2301      	movs	r3, #1
 80079a2:	4622      	mov	r2, r4
 80079a4:	4649      	mov	r1, r9
 80079a6:	4638      	mov	r0, r7
 80079a8:	47c0      	blx	r8
 80079aa:	3001      	adds	r0, #1
 80079ac:	d0e6      	beq.n	800797c <_printf_common+0xa4>
 80079ae:	3601      	adds	r6, #1
 80079b0:	e7d9      	b.n	8007966 <_printf_common+0x8e>
	...

080079b4 <_printf_i>:
 80079b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	7e0f      	ldrb	r7, [r1, #24]
 80079ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079bc:	2f78      	cmp	r7, #120	; 0x78
 80079be:	4691      	mov	r9, r2
 80079c0:	4680      	mov	r8, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	469a      	mov	sl, r3
 80079c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079ca:	d807      	bhi.n	80079dc <_printf_i+0x28>
 80079cc:	2f62      	cmp	r7, #98	; 0x62
 80079ce:	d80a      	bhi.n	80079e6 <_printf_i+0x32>
 80079d0:	2f00      	cmp	r7, #0
 80079d2:	f000 80d8 	beq.w	8007b86 <_printf_i+0x1d2>
 80079d6:	2f58      	cmp	r7, #88	; 0x58
 80079d8:	f000 80a3 	beq.w	8007b22 <_printf_i+0x16e>
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079e4:	e03a      	b.n	8007a5c <_printf_i+0xa8>
 80079e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ea:	2b15      	cmp	r3, #21
 80079ec:	d8f6      	bhi.n	80079dc <_printf_i+0x28>
 80079ee:	a101      	add	r1, pc, #4	; (adr r1, 80079f4 <_printf_i+0x40>)
 80079f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079f4:	08007a4d 	.word	0x08007a4d
 80079f8:	08007a61 	.word	0x08007a61
 80079fc:	080079dd 	.word	0x080079dd
 8007a00:	080079dd 	.word	0x080079dd
 8007a04:	080079dd 	.word	0x080079dd
 8007a08:	080079dd 	.word	0x080079dd
 8007a0c:	08007a61 	.word	0x08007a61
 8007a10:	080079dd 	.word	0x080079dd
 8007a14:	080079dd 	.word	0x080079dd
 8007a18:	080079dd 	.word	0x080079dd
 8007a1c:	080079dd 	.word	0x080079dd
 8007a20:	08007b6d 	.word	0x08007b6d
 8007a24:	08007a91 	.word	0x08007a91
 8007a28:	08007b4f 	.word	0x08007b4f
 8007a2c:	080079dd 	.word	0x080079dd
 8007a30:	080079dd 	.word	0x080079dd
 8007a34:	08007b8f 	.word	0x08007b8f
 8007a38:	080079dd 	.word	0x080079dd
 8007a3c:	08007a91 	.word	0x08007a91
 8007a40:	080079dd 	.word	0x080079dd
 8007a44:	080079dd 	.word	0x080079dd
 8007a48:	08007b57 	.word	0x08007b57
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	1d1a      	adds	r2, r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	602a      	str	r2, [r5, #0]
 8007a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0a3      	b.n	8007ba8 <_printf_i+0x1f4>
 8007a60:	6820      	ldr	r0, [r4, #0]
 8007a62:	6829      	ldr	r1, [r5, #0]
 8007a64:	0606      	lsls	r6, r0, #24
 8007a66:	f101 0304 	add.w	r3, r1, #4
 8007a6a:	d50a      	bpl.n	8007a82 <_printf_i+0xce>
 8007a6c:	680e      	ldr	r6, [r1, #0]
 8007a6e:	602b      	str	r3, [r5, #0]
 8007a70:	2e00      	cmp	r6, #0
 8007a72:	da03      	bge.n	8007a7c <_printf_i+0xc8>
 8007a74:	232d      	movs	r3, #45	; 0x2d
 8007a76:	4276      	negs	r6, r6
 8007a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a7c:	485e      	ldr	r0, [pc, #376]	; (8007bf8 <_printf_i+0x244>)
 8007a7e:	230a      	movs	r3, #10
 8007a80:	e019      	b.n	8007ab6 <_printf_i+0x102>
 8007a82:	680e      	ldr	r6, [r1, #0]
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a8a:	bf18      	it	ne
 8007a8c:	b236      	sxthne	r6, r6
 8007a8e:	e7ef      	b.n	8007a70 <_printf_i+0xbc>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	6820      	ldr	r0, [r4, #0]
 8007a94:	1d19      	adds	r1, r3, #4
 8007a96:	6029      	str	r1, [r5, #0]
 8007a98:	0601      	lsls	r1, r0, #24
 8007a9a:	d501      	bpl.n	8007aa0 <_printf_i+0xec>
 8007a9c:	681e      	ldr	r6, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <_printf_i+0xf2>
 8007aa0:	0646      	lsls	r6, r0, #25
 8007aa2:	d5fb      	bpl.n	8007a9c <_printf_i+0xe8>
 8007aa4:	881e      	ldrh	r6, [r3, #0]
 8007aa6:	4854      	ldr	r0, [pc, #336]	; (8007bf8 <_printf_i+0x244>)
 8007aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8007aaa:	bf0c      	ite	eq
 8007aac:	2308      	moveq	r3, #8
 8007aae:	230a      	movne	r3, #10
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ab6:	6865      	ldr	r5, [r4, #4]
 8007ab8:	60a5      	str	r5, [r4, #8]
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	bfa2      	ittt	ge
 8007abe:	6821      	ldrge	r1, [r4, #0]
 8007ac0:	f021 0104 	bicge.w	r1, r1, #4
 8007ac4:	6021      	strge	r1, [r4, #0]
 8007ac6:	b90e      	cbnz	r6, 8007acc <_printf_i+0x118>
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	d04d      	beq.n	8007b68 <_printf_i+0x1b4>
 8007acc:	4615      	mov	r5, r2
 8007ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ad6:	5dc7      	ldrb	r7, [r0, r7]
 8007ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007adc:	4637      	mov	r7, r6
 8007ade:	42bb      	cmp	r3, r7
 8007ae0:	460e      	mov	r6, r1
 8007ae2:	d9f4      	bls.n	8007ace <_printf_i+0x11a>
 8007ae4:	2b08      	cmp	r3, #8
 8007ae6:	d10b      	bne.n	8007b00 <_printf_i+0x14c>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	07de      	lsls	r6, r3, #31
 8007aec:	d508      	bpl.n	8007b00 <_printf_i+0x14c>
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	6861      	ldr	r1, [r4, #4]
 8007af2:	4299      	cmp	r1, r3
 8007af4:	bfde      	ittt	le
 8007af6:	2330      	movle	r3, #48	; 0x30
 8007af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b00:	1b52      	subs	r2, r2, r5
 8007b02:	6122      	str	r2, [r4, #16]
 8007b04:	f8cd a000 	str.w	sl, [sp]
 8007b08:	464b      	mov	r3, r9
 8007b0a:	aa03      	add	r2, sp, #12
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4640      	mov	r0, r8
 8007b10:	f7ff fee2 	bl	80078d8 <_printf_common>
 8007b14:	3001      	adds	r0, #1
 8007b16:	d14c      	bne.n	8007bb2 <_printf_i+0x1fe>
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	b004      	add	sp, #16
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	4835      	ldr	r0, [pc, #212]	; (8007bf8 <_printf_i+0x244>)
 8007b24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b28:	6829      	ldr	r1, [r5, #0]
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b30:	6029      	str	r1, [r5, #0]
 8007b32:	061d      	lsls	r5, r3, #24
 8007b34:	d514      	bpl.n	8007b60 <_printf_i+0x1ac>
 8007b36:	07df      	lsls	r7, r3, #31
 8007b38:	bf44      	itt	mi
 8007b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b3e:	6023      	strmi	r3, [r4, #0]
 8007b40:	b91e      	cbnz	r6, 8007b4a <_printf_i+0x196>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	f023 0320 	bic.w	r3, r3, #32
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	2310      	movs	r3, #16
 8007b4c:	e7b0      	b.n	8007ab0 <_printf_i+0xfc>
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	f043 0320 	orr.w	r3, r3, #32
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	2378      	movs	r3, #120	; 0x78
 8007b58:	4828      	ldr	r0, [pc, #160]	; (8007bfc <_printf_i+0x248>)
 8007b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b5e:	e7e3      	b.n	8007b28 <_printf_i+0x174>
 8007b60:	0659      	lsls	r1, r3, #25
 8007b62:	bf48      	it	mi
 8007b64:	b2b6      	uxthmi	r6, r6
 8007b66:	e7e6      	b.n	8007b36 <_printf_i+0x182>
 8007b68:	4615      	mov	r5, r2
 8007b6a:	e7bb      	b.n	8007ae4 <_printf_i+0x130>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	6826      	ldr	r6, [r4, #0]
 8007b70:	6961      	ldr	r1, [r4, #20]
 8007b72:	1d18      	adds	r0, r3, #4
 8007b74:	6028      	str	r0, [r5, #0]
 8007b76:	0635      	lsls	r5, r6, #24
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	d501      	bpl.n	8007b80 <_printf_i+0x1cc>
 8007b7c:	6019      	str	r1, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <_printf_i+0x1d2>
 8007b80:	0670      	lsls	r0, r6, #25
 8007b82:	d5fb      	bpl.n	8007b7c <_printf_i+0x1c8>
 8007b84:	8019      	strh	r1, [r3, #0]
 8007b86:	2300      	movs	r3, #0
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	4615      	mov	r5, r2
 8007b8c:	e7ba      	b.n	8007b04 <_printf_i+0x150>
 8007b8e:	682b      	ldr	r3, [r5, #0]
 8007b90:	1d1a      	adds	r2, r3, #4
 8007b92:	602a      	str	r2, [r5, #0]
 8007b94:	681d      	ldr	r5, [r3, #0]
 8007b96:	6862      	ldr	r2, [r4, #4]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f7f8 fb20 	bl	80001e0 <memchr>
 8007ba0:	b108      	cbz	r0, 8007ba6 <_printf_i+0x1f2>
 8007ba2:	1b40      	subs	r0, r0, r5
 8007ba4:	6060      	str	r0, [r4, #4]
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	6123      	str	r3, [r4, #16]
 8007baa:	2300      	movs	r3, #0
 8007bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb0:	e7a8      	b.n	8007b04 <_printf_i+0x150>
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	4640      	mov	r0, r8
 8007bba:	47d0      	blx	sl
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d0ab      	beq.n	8007b18 <_printf_i+0x164>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	079b      	lsls	r3, r3, #30
 8007bc4:	d413      	bmi.n	8007bee <_printf_i+0x23a>
 8007bc6:	68e0      	ldr	r0, [r4, #12]
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	4298      	cmp	r0, r3
 8007bcc:	bfb8      	it	lt
 8007bce:	4618      	movlt	r0, r3
 8007bd0:	e7a4      	b.n	8007b1c <_printf_i+0x168>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	4640      	mov	r0, r8
 8007bda:	47d0      	blx	sl
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d09b      	beq.n	8007b18 <_printf_i+0x164>
 8007be0:	3501      	adds	r5, #1
 8007be2:	68e3      	ldr	r3, [r4, #12]
 8007be4:	9903      	ldr	r1, [sp, #12]
 8007be6:	1a5b      	subs	r3, r3, r1
 8007be8:	42ab      	cmp	r3, r5
 8007bea:	dcf2      	bgt.n	8007bd2 <_printf_i+0x21e>
 8007bec:	e7eb      	b.n	8007bc6 <_printf_i+0x212>
 8007bee:	2500      	movs	r5, #0
 8007bf0:	f104 0619 	add.w	r6, r4, #25
 8007bf4:	e7f5      	b.n	8007be2 <_printf_i+0x22e>
 8007bf6:	bf00      	nop
 8007bf8:	0800a1b2 	.word	0x0800a1b2
 8007bfc:	0800a1c3 	.word	0x0800a1c3

08007c00 <iprintf>:
 8007c00:	b40f      	push	{r0, r1, r2, r3}
 8007c02:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <iprintf+0x2c>)
 8007c04:	b513      	push	{r0, r1, r4, lr}
 8007c06:	681c      	ldr	r4, [r3, #0]
 8007c08:	b124      	cbz	r4, 8007c14 <iprintf+0x14>
 8007c0a:	69a3      	ldr	r3, [r4, #24]
 8007c0c:	b913      	cbnz	r3, 8007c14 <iprintf+0x14>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f001 f9be 	bl	8008f90 <__sinit>
 8007c14:	ab05      	add	r3, sp, #20
 8007c16:	9a04      	ldr	r2, [sp, #16]
 8007c18:	68a1      	ldr	r1, [r4, #8]
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 ff7b 	bl	8009b18 <_vfiprintf_r>
 8007c22:	b002      	add	sp, #8
 8007c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c28:	b004      	add	sp, #16
 8007c2a:	4770      	bx	lr
 8007c2c:	2000000c 	.word	0x2000000c

08007c30 <putchar>:
 8007c30:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <putchar+0x28>)
 8007c32:	b513      	push	{r0, r1, r4, lr}
 8007c34:	681c      	ldr	r4, [r3, #0]
 8007c36:	4601      	mov	r1, r0
 8007c38:	b134      	cbz	r4, 8007c48 <putchar+0x18>
 8007c3a:	69a3      	ldr	r3, [r4, #24]
 8007c3c:	b923      	cbnz	r3, 8007c48 <putchar+0x18>
 8007c3e:	9001      	str	r0, [sp, #4]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f001 f9a5 	bl	8008f90 <__sinit>
 8007c46:	9901      	ldr	r1, [sp, #4]
 8007c48:	68a2      	ldr	r2, [r4, #8]
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	b002      	add	sp, #8
 8007c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c52:	f002 b891 	b.w	8009d78 <_putc_r>
 8007c56:	bf00      	nop
 8007c58:	2000000c 	.word	0x2000000c

08007c5c <_puts_r>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	460e      	mov	r6, r1
 8007c60:	4605      	mov	r5, r0
 8007c62:	b118      	cbz	r0, 8007c6c <_puts_r+0x10>
 8007c64:	6983      	ldr	r3, [r0, #24]
 8007c66:	b90b      	cbnz	r3, 8007c6c <_puts_r+0x10>
 8007c68:	f001 f992 	bl	8008f90 <__sinit>
 8007c6c:	69ab      	ldr	r3, [r5, #24]
 8007c6e:	68ac      	ldr	r4, [r5, #8]
 8007c70:	b913      	cbnz	r3, 8007c78 <_puts_r+0x1c>
 8007c72:	4628      	mov	r0, r5
 8007c74:	f001 f98c 	bl	8008f90 <__sinit>
 8007c78:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <_puts_r+0xd0>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d120      	bne.n	8007cc0 <_puts_r+0x64>
 8007c7e:	686c      	ldr	r4, [r5, #4]
 8007c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c82:	07db      	lsls	r3, r3, #31
 8007c84:	d405      	bmi.n	8007c92 <_puts_r+0x36>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	0598      	lsls	r0, r3, #22
 8007c8a:	d402      	bmi.n	8007c92 <_puts_r+0x36>
 8007c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8e:	f001 fa22 	bl	80090d6 <__retarget_lock_acquire_recursive>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	0719      	lsls	r1, r3, #28
 8007c96:	d51d      	bpl.n	8007cd4 <_puts_r+0x78>
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	b1db      	cbz	r3, 8007cd4 <_puts_r+0x78>
 8007c9c:	3e01      	subs	r6, #1
 8007c9e:	68a3      	ldr	r3, [r4, #8]
 8007ca0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	60a3      	str	r3, [r4, #8]
 8007ca8:	bb39      	cbnz	r1, 8007cfa <_puts_r+0x9e>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da38      	bge.n	8007d20 <_puts_r+0xc4>
 8007cae:	4622      	mov	r2, r4
 8007cb0:	210a      	movs	r1, #10
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f916 	bl	8007ee4 <__swbuf_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d011      	beq.n	8007ce0 <_puts_r+0x84>
 8007cbc:	250a      	movs	r5, #10
 8007cbe:	e011      	b.n	8007ce4 <_puts_r+0x88>
 8007cc0:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <_puts_r+0xd4>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <_puts_r+0x6e>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7da      	b.n	8007c80 <_puts_r+0x24>
 8007cca:	4b1a      	ldr	r3, [pc, #104]	; (8007d34 <_puts_r+0xd8>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7d5      	b.n	8007c80 <_puts_r+0x24>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 f956 	bl	8007f88 <__swsetup_r>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d0dd      	beq.n	8007c9c <_puts_r+0x40>
 8007ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce6:	07da      	lsls	r2, r3, #31
 8007ce8:	d405      	bmi.n	8007cf6 <_puts_r+0x9a>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	059b      	lsls	r3, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_puts_r+0x9a>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f001 f9f1 	bl	80090d8 <__retarget_lock_release_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	bd70      	pop	{r4, r5, r6, pc}
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	da04      	bge.n	8007d08 <_puts_r+0xac>
 8007cfe:	69a2      	ldr	r2, [r4, #24]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	dc06      	bgt.n	8007d12 <_puts_r+0xb6>
 8007d04:	290a      	cmp	r1, #10
 8007d06:	d004      	beq.n	8007d12 <_puts_r+0xb6>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	6022      	str	r2, [r4, #0]
 8007d0e:	7019      	strb	r1, [r3, #0]
 8007d10:	e7c5      	b.n	8007c9e <_puts_r+0x42>
 8007d12:	4622      	mov	r2, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 f8e5 	bl	8007ee4 <__swbuf_r>
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d1bf      	bne.n	8007c9e <_puts_r+0x42>
 8007d1e:	e7df      	b.n	8007ce0 <_puts_r+0x84>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	250a      	movs	r5, #10
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	6022      	str	r2, [r4, #0]
 8007d28:	701d      	strb	r5, [r3, #0]
 8007d2a:	e7db      	b.n	8007ce4 <_puts_r+0x88>
 8007d2c:	0800a284 	.word	0x0800a284
 8007d30:	0800a2a4 	.word	0x0800a2a4
 8007d34:	0800a264 	.word	0x0800a264

08007d38 <puts>:
 8007d38:	4b02      	ldr	r3, [pc, #8]	; (8007d44 <puts+0xc>)
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	f7ff bf8d 	b.w	8007c5c <_puts_r>
 8007d42:	bf00      	nop
 8007d44:	2000000c 	.word	0x2000000c

08007d48 <setbuf>:
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d4e:	bf0c      	ite	eq
 8007d50:	2202      	moveq	r2, #2
 8007d52:	2200      	movne	r2, #0
 8007d54:	f000 b800 	b.w	8007d58 <setvbuf>

08007d58 <setvbuf>:
 8007d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	4b5d      	ldr	r3, [pc, #372]	; (8007ed4 <setvbuf+0x17c>)
 8007d60:	681f      	ldr	r7, [r3, #0]
 8007d62:	4604      	mov	r4, r0
 8007d64:	460e      	mov	r6, r1
 8007d66:	4690      	mov	r8, r2
 8007d68:	b127      	cbz	r7, 8007d74 <setvbuf+0x1c>
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	b913      	cbnz	r3, 8007d74 <setvbuf+0x1c>
 8007d6e:	4638      	mov	r0, r7
 8007d70:	f001 f90e 	bl	8008f90 <__sinit>
 8007d74:	4b58      	ldr	r3, [pc, #352]	; (8007ed8 <setvbuf+0x180>)
 8007d76:	429c      	cmp	r4, r3
 8007d78:	d167      	bne.n	8007e4a <setvbuf+0xf2>
 8007d7a:	687c      	ldr	r4, [r7, #4]
 8007d7c:	f1b8 0f02 	cmp.w	r8, #2
 8007d80:	d006      	beq.n	8007d90 <setvbuf+0x38>
 8007d82:	f1b8 0f01 	cmp.w	r8, #1
 8007d86:	f200 809f 	bhi.w	8007ec8 <setvbuf+0x170>
 8007d8a:	2d00      	cmp	r5, #0
 8007d8c:	f2c0 809c 	blt.w	8007ec8 <setvbuf+0x170>
 8007d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d92:	07db      	lsls	r3, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <setvbuf+0x4a>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	0598      	lsls	r0, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <setvbuf+0x4a>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d9e:	f001 f99a 	bl	80090d6 <__retarget_lock_acquire_recursive>
 8007da2:	4621      	mov	r1, r4
 8007da4:	4638      	mov	r0, r7
 8007da6:	f001 f85f 	bl	8008e68 <_fflush_r>
 8007daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dac:	b141      	cbz	r1, 8007dc0 <setvbuf+0x68>
 8007dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007db2:	4299      	cmp	r1, r3
 8007db4:	d002      	beq.n	8007dbc <setvbuf+0x64>
 8007db6:	4638      	mov	r0, r7
 8007db8:	f001 fda4 	bl	8009904 <_free_r>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61a3      	str	r3, [r4, #24]
 8007dc4:	6063      	str	r3, [r4, #4]
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	0619      	lsls	r1, r3, #24
 8007dca:	d503      	bpl.n	8007dd4 <setvbuf+0x7c>
 8007dcc:	6921      	ldr	r1, [r4, #16]
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f001 fd98 	bl	8009904 <_free_r>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	f1b8 0f02 	cmp.w	r8, #2
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	d06c      	beq.n	8007ec0 <setvbuf+0x168>
 8007de6:	ab01      	add	r3, sp, #4
 8007de8:	466a      	mov	r2, sp
 8007dea:	4621      	mov	r1, r4
 8007dec:	4638      	mov	r0, r7
 8007dee:	f001 f974 	bl	80090da <__swhatbuf_r>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	4318      	orrs	r0, r3
 8007df6:	81a0      	strh	r0, [r4, #12]
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	d130      	bne.n	8007e5e <setvbuf+0x106>
 8007dfc:	9d00      	ldr	r5, [sp, #0]
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f001 f9d0 	bl	80091a4 <malloc>
 8007e04:	4606      	mov	r6, r0
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d155      	bne.n	8007eb6 <setvbuf+0x15e>
 8007e0a:	f8dd 9000 	ldr.w	r9, [sp]
 8007e0e:	45a9      	cmp	r9, r5
 8007e10:	d14a      	bne.n	8007ea8 <setvbuf+0x150>
 8007e12:	f04f 35ff 	mov.w	r5, #4294967295
 8007e16:	2200      	movs	r2, #0
 8007e18:	60a2      	str	r2, [r4, #8]
 8007e1a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007e1e:	6022      	str	r2, [r4, #0]
 8007e20:	6122      	str	r2, [r4, #16]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e28:	6162      	str	r2, [r4, #20]
 8007e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e2c:	f043 0302 	orr.w	r3, r3, #2
 8007e30:	07d2      	lsls	r2, r2, #31
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	d405      	bmi.n	8007e42 <setvbuf+0xea>
 8007e36:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007e3a:	d102      	bne.n	8007e42 <setvbuf+0xea>
 8007e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e3e:	f001 f94b 	bl	80090d8 <__retarget_lock_release_recursive>
 8007e42:	4628      	mov	r0, r5
 8007e44:	b003      	add	sp, #12
 8007e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <setvbuf+0x184>)
 8007e4c:	429c      	cmp	r4, r3
 8007e4e:	d101      	bne.n	8007e54 <setvbuf+0xfc>
 8007e50:	68bc      	ldr	r4, [r7, #8]
 8007e52:	e793      	b.n	8007d7c <setvbuf+0x24>
 8007e54:	4b22      	ldr	r3, [pc, #136]	; (8007ee0 <setvbuf+0x188>)
 8007e56:	429c      	cmp	r4, r3
 8007e58:	bf08      	it	eq
 8007e5a:	68fc      	ldreq	r4, [r7, #12]
 8007e5c:	e78e      	b.n	8007d7c <setvbuf+0x24>
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d0cd      	beq.n	8007dfe <setvbuf+0xa6>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	b913      	cbnz	r3, 8007e6c <setvbuf+0x114>
 8007e66:	4638      	mov	r0, r7
 8007e68:	f001 f892 	bl	8008f90 <__sinit>
 8007e6c:	f1b8 0f01 	cmp.w	r8, #1
 8007e70:	bf08      	it	eq
 8007e72:	89a3      	ldrheq	r3, [r4, #12]
 8007e74:	6026      	str	r6, [r4, #0]
 8007e76:	bf04      	itt	eq
 8007e78:	f043 0301 	orreq.w	r3, r3, #1
 8007e7c:	81a3      	strheq	r3, [r4, #12]
 8007e7e:	89a2      	ldrh	r2, [r4, #12]
 8007e80:	f012 0308 	ands.w	r3, r2, #8
 8007e84:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007e88:	d01c      	beq.n	8007ec4 <setvbuf+0x16c>
 8007e8a:	07d3      	lsls	r3, r2, #31
 8007e8c:	bf41      	itttt	mi
 8007e8e:	2300      	movmi	r3, #0
 8007e90:	426d      	negmi	r5, r5
 8007e92:	60a3      	strmi	r3, [r4, #8]
 8007e94:	61a5      	strmi	r5, [r4, #24]
 8007e96:	bf58      	it	pl
 8007e98:	60a5      	strpl	r5, [r4, #8]
 8007e9a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007e9c:	f015 0501 	ands.w	r5, r5, #1
 8007ea0:	d115      	bne.n	8007ece <setvbuf+0x176>
 8007ea2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007ea6:	e7c8      	b.n	8007e3a <setvbuf+0xe2>
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f001 f97b 	bl	80091a4 <malloc>
 8007eae:	4606      	mov	r6, r0
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d0ae      	beq.n	8007e12 <setvbuf+0xba>
 8007eb4:	464d      	mov	r5, r9
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	e7d0      	b.n	8007e62 <setvbuf+0x10a>
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	e7a8      	b.n	8007e16 <setvbuf+0xbe>
 8007ec4:	60a3      	str	r3, [r4, #8]
 8007ec6:	e7e8      	b.n	8007e9a <setvbuf+0x142>
 8007ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8007ecc:	e7b9      	b.n	8007e42 <setvbuf+0xea>
 8007ece:	2500      	movs	r5, #0
 8007ed0:	e7b7      	b.n	8007e42 <setvbuf+0xea>
 8007ed2:	bf00      	nop
 8007ed4:	2000000c 	.word	0x2000000c
 8007ed8:	0800a284 	.word	0x0800a284
 8007edc:	0800a2a4 	.word	0x0800a2a4
 8007ee0:	0800a264 	.word	0x0800a264

08007ee4 <__swbuf_r>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	460e      	mov	r6, r1
 8007ee8:	4614      	mov	r4, r2
 8007eea:	4605      	mov	r5, r0
 8007eec:	b118      	cbz	r0, 8007ef6 <__swbuf_r+0x12>
 8007eee:	6983      	ldr	r3, [r0, #24]
 8007ef0:	b90b      	cbnz	r3, 8007ef6 <__swbuf_r+0x12>
 8007ef2:	f001 f84d 	bl	8008f90 <__sinit>
 8007ef6:	4b21      	ldr	r3, [pc, #132]	; (8007f7c <__swbuf_r+0x98>)
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	d12b      	bne.n	8007f54 <__swbuf_r+0x70>
 8007efc:	686c      	ldr	r4, [r5, #4]
 8007efe:	69a3      	ldr	r3, [r4, #24]
 8007f00:	60a3      	str	r3, [r4, #8]
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	071a      	lsls	r2, r3, #28
 8007f06:	d52f      	bpl.n	8007f68 <__swbuf_r+0x84>
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	b36b      	cbz	r3, 8007f68 <__swbuf_r+0x84>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	1ac0      	subs	r0, r0, r3
 8007f12:	6963      	ldr	r3, [r4, #20]
 8007f14:	b2f6      	uxtb	r6, r6
 8007f16:	4283      	cmp	r3, r0
 8007f18:	4637      	mov	r7, r6
 8007f1a:	dc04      	bgt.n	8007f26 <__swbuf_r+0x42>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 ffa2 	bl	8008e68 <_fflush_r>
 8007f24:	bb30      	cbnz	r0, 8007f74 <__swbuf_r+0x90>
 8007f26:	68a3      	ldr	r3, [r4, #8]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	60a3      	str	r3, [r4, #8]
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	6022      	str	r2, [r4, #0]
 8007f32:	701e      	strb	r6, [r3, #0]
 8007f34:	6963      	ldr	r3, [r4, #20]
 8007f36:	3001      	adds	r0, #1
 8007f38:	4283      	cmp	r3, r0
 8007f3a:	d004      	beq.n	8007f46 <__swbuf_r+0x62>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	07db      	lsls	r3, r3, #31
 8007f40:	d506      	bpl.n	8007f50 <__swbuf_r+0x6c>
 8007f42:	2e0a      	cmp	r6, #10
 8007f44:	d104      	bne.n	8007f50 <__swbuf_r+0x6c>
 8007f46:	4621      	mov	r1, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 ff8d 	bl	8008e68 <_fflush_r>
 8007f4e:	b988      	cbnz	r0, 8007f74 <__swbuf_r+0x90>
 8007f50:	4638      	mov	r0, r7
 8007f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <__swbuf_r+0x9c>)
 8007f56:	429c      	cmp	r4, r3
 8007f58:	d101      	bne.n	8007f5e <__swbuf_r+0x7a>
 8007f5a:	68ac      	ldr	r4, [r5, #8]
 8007f5c:	e7cf      	b.n	8007efe <__swbuf_r+0x1a>
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <__swbuf_r+0xa0>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	bf08      	it	eq
 8007f64:	68ec      	ldreq	r4, [r5, #12]
 8007f66:	e7ca      	b.n	8007efe <__swbuf_r+0x1a>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f80c 	bl	8007f88 <__swsetup_r>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d0cb      	beq.n	8007f0c <__swbuf_r+0x28>
 8007f74:	f04f 37ff 	mov.w	r7, #4294967295
 8007f78:	e7ea      	b.n	8007f50 <__swbuf_r+0x6c>
 8007f7a:	bf00      	nop
 8007f7c:	0800a284 	.word	0x0800a284
 8007f80:	0800a2a4 	.word	0x0800a2a4
 8007f84:	0800a264 	.word	0x0800a264

08007f88 <__swsetup_r>:
 8007f88:	4b32      	ldr	r3, [pc, #200]	; (8008054 <__swsetup_r+0xcc>)
 8007f8a:	b570      	push	{r4, r5, r6, lr}
 8007f8c:	681d      	ldr	r5, [r3, #0]
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	b125      	cbz	r5, 8007f9e <__swsetup_r+0x16>
 8007f94:	69ab      	ldr	r3, [r5, #24]
 8007f96:	b913      	cbnz	r3, 8007f9e <__swsetup_r+0x16>
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f000 fff9 	bl	8008f90 <__sinit>
 8007f9e:	4b2e      	ldr	r3, [pc, #184]	; (8008058 <__swsetup_r+0xd0>)
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	d10f      	bne.n	8007fc4 <__swsetup_r+0x3c>
 8007fa4:	686c      	ldr	r4, [r5, #4]
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fac:	0719      	lsls	r1, r3, #28
 8007fae:	d42c      	bmi.n	800800a <__swsetup_r+0x82>
 8007fb0:	06dd      	lsls	r5, r3, #27
 8007fb2:	d411      	bmi.n	8007fd8 <__swsetup_r+0x50>
 8007fb4:	2309      	movs	r3, #9
 8007fb6:	6033      	str	r3, [r6, #0]
 8007fb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc2:	e03e      	b.n	8008042 <__swsetup_r+0xba>
 8007fc4:	4b25      	ldr	r3, [pc, #148]	; (800805c <__swsetup_r+0xd4>)
 8007fc6:	429c      	cmp	r4, r3
 8007fc8:	d101      	bne.n	8007fce <__swsetup_r+0x46>
 8007fca:	68ac      	ldr	r4, [r5, #8]
 8007fcc:	e7eb      	b.n	8007fa6 <__swsetup_r+0x1e>
 8007fce:	4b24      	ldr	r3, [pc, #144]	; (8008060 <__swsetup_r+0xd8>)
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	bf08      	it	eq
 8007fd4:	68ec      	ldreq	r4, [r5, #12]
 8007fd6:	e7e6      	b.n	8007fa6 <__swsetup_r+0x1e>
 8007fd8:	0758      	lsls	r0, r3, #29
 8007fda:	d512      	bpl.n	8008002 <__swsetup_r+0x7a>
 8007fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fde:	b141      	cbz	r1, 8007ff2 <__swsetup_r+0x6a>
 8007fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	d002      	beq.n	8007fee <__swsetup_r+0x66>
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f001 fc8b 	bl	8009904 <_free_r>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	6063      	str	r3, [r4, #4]
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f043 0308 	orr.w	r3, r3, #8
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	b94b      	cbnz	r3, 8008022 <__swsetup_r+0x9a>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008018:	d003      	beq.n	8008022 <__swsetup_r+0x9a>
 800801a:	4621      	mov	r1, r4
 800801c:	4630      	mov	r0, r6
 800801e:	f001 f881 	bl	8009124 <__smakebuf_r>
 8008022:	89a0      	ldrh	r0, [r4, #12]
 8008024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008028:	f010 0301 	ands.w	r3, r0, #1
 800802c:	d00a      	beq.n	8008044 <__swsetup_r+0xbc>
 800802e:	2300      	movs	r3, #0
 8008030:	60a3      	str	r3, [r4, #8]
 8008032:	6963      	ldr	r3, [r4, #20]
 8008034:	425b      	negs	r3, r3
 8008036:	61a3      	str	r3, [r4, #24]
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	b943      	cbnz	r3, 800804e <__swsetup_r+0xc6>
 800803c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008040:	d1ba      	bne.n	8007fb8 <__swsetup_r+0x30>
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	0781      	lsls	r1, r0, #30
 8008046:	bf58      	it	pl
 8008048:	6963      	ldrpl	r3, [r4, #20]
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	e7f4      	b.n	8008038 <__swsetup_r+0xb0>
 800804e:	2000      	movs	r0, #0
 8008050:	e7f7      	b.n	8008042 <__swsetup_r+0xba>
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c
 8008058:	0800a284 	.word	0x0800a284
 800805c:	0800a2a4 	.word	0x0800a2a4
 8008060:	0800a264 	.word	0x0800a264

08008064 <quorem>:
 8008064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	6903      	ldr	r3, [r0, #16]
 800806a:	690c      	ldr	r4, [r1, #16]
 800806c:	42a3      	cmp	r3, r4
 800806e:	4607      	mov	r7, r0
 8008070:	f2c0 8081 	blt.w	8008176 <quorem+0x112>
 8008074:	3c01      	subs	r4, #1
 8008076:	f101 0814 	add.w	r8, r1, #20
 800807a:	f100 0514 	add.w	r5, r0, #20
 800807e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800808c:	3301      	adds	r3, #1
 800808e:	429a      	cmp	r2, r3
 8008090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008094:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008098:	fbb2 f6f3 	udiv	r6, r2, r3
 800809c:	d331      	bcc.n	8008102 <quorem+0x9e>
 800809e:	f04f 0e00 	mov.w	lr, #0
 80080a2:	4640      	mov	r0, r8
 80080a4:	46ac      	mov	ip, r5
 80080a6:	46f2      	mov	sl, lr
 80080a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80080ac:	b293      	uxth	r3, r2
 80080ae:	fb06 e303 	mla	r3, r6, r3, lr
 80080b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	ebaa 0303 	sub.w	r3, sl, r3
 80080bc:	f8dc a000 	ldr.w	sl, [ip]
 80080c0:	0c12      	lsrs	r2, r2, #16
 80080c2:	fa13 f38a 	uxtah	r3, r3, sl
 80080c6:	fb06 e202 	mla	r2, r6, r2, lr
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	9b00      	ldr	r3, [sp, #0]
 80080ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080d2:	b292      	uxth	r2, r2
 80080d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80080e0:	4581      	cmp	r9, r0
 80080e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080e6:	f84c 3b04 	str.w	r3, [ip], #4
 80080ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080ee:	d2db      	bcs.n	80080a8 <quorem+0x44>
 80080f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80080f4:	b92b      	cbnz	r3, 8008102 <quorem+0x9e>
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	3b04      	subs	r3, #4
 80080fa:	429d      	cmp	r5, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	d32e      	bcc.n	800815e <quorem+0xfa>
 8008100:	613c      	str	r4, [r7, #16]
 8008102:	4638      	mov	r0, r7
 8008104:	f001 fae6 	bl	80096d4 <__mcmp>
 8008108:	2800      	cmp	r0, #0
 800810a:	db24      	blt.n	8008156 <quorem+0xf2>
 800810c:	3601      	adds	r6, #1
 800810e:	4628      	mov	r0, r5
 8008110:	f04f 0c00 	mov.w	ip, #0
 8008114:	f858 2b04 	ldr.w	r2, [r8], #4
 8008118:	f8d0 e000 	ldr.w	lr, [r0]
 800811c:	b293      	uxth	r3, r2
 800811e:	ebac 0303 	sub.w	r3, ip, r3
 8008122:	0c12      	lsrs	r2, r2, #16
 8008124:	fa13 f38e 	uxtah	r3, r3, lr
 8008128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800812c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008130:	b29b      	uxth	r3, r3
 8008132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008136:	45c1      	cmp	r9, r8
 8008138:	f840 3b04 	str.w	r3, [r0], #4
 800813c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008140:	d2e8      	bcs.n	8008114 <quorem+0xb0>
 8008142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800814a:	b922      	cbnz	r2, 8008156 <quorem+0xf2>
 800814c:	3b04      	subs	r3, #4
 800814e:	429d      	cmp	r5, r3
 8008150:	461a      	mov	r2, r3
 8008152:	d30a      	bcc.n	800816a <quorem+0x106>
 8008154:	613c      	str	r4, [r7, #16]
 8008156:	4630      	mov	r0, r6
 8008158:	b003      	add	sp, #12
 800815a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	3b04      	subs	r3, #4
 8008162:	2a00      	cmp	r2, #0
 8008164:	d1cc      	bne.n	8008100 <quorem+0x9c>
 8008166:	3c01      	subs	r4, #1
 8008168:	e7c7      	b.n	80080fa <quorem+0x96>
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	3b04      	subs	r3, #4
 800816e:	2a00      	cmp	r2, #0
 8008170:	d1f0      	bne.n	8008154 <quorem+0xf0>
 8008172:	3c01      	subs	r4, #1
 8008174:	e7eb      	b.n	800814e <quorem+0xea>
 8008176:	2000      	movs	r0, #0
 8008178:	e7ee      	b.n	8008158 <quorem+0xf4>
 800817a:	0000      	movs	r0, r0
 800817c:	0000      	movs	r0, r0
	...

08008180 <_dtoa_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	ed2d 8b04 	vpush	{d8-d9}
 8008188:	ec57 6b10 	vmov	r6, r7, d0
 800818c:	b093      	sub	sp, #76	; 0x4c
 800818e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008190:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008194:	9106      	str	r1, [sp, #24]
 8008196:	ee10 aa10 	vmov	sl, s0
 800819a:	4604      	mov	r4, r0
 800819c:	9209      	str	r2, [sp, #36]	; 0x24
 800819e:	930c      	str	r3, [sp, #48]	; 0x30
 80081a0:	46bb      	mov	fp, r7
 80081a2:	b975      	cbnz	r5, 80081c2 <_dtoa_r+0x42>
 80081a4:	2010      	movs	r0, #16
 80081a6:	f000 fffd 	bl	80091a4 <malloc>
 80081aa:	4602      	mov	r2, r0
 80081ac:	6260      	str	r0, [r4, #36]	; 0x24
 80081ae:	b920      	cbnz	r0, 80081ba <_dtoa_r+0x3a>
 80081b0:	4ba7      	ldr	r3, [pc, #668]	; (8008450 <_dtoa_r+0x2d0>)
 80081b2:	21ea      	movs	r1, #234	; 0xea
 80081b4:	48a7      	ldr	r0, [pc, #668]	; (8008454 <_dtoa_r+0x2d4>)
 80081b6:	f001 fe8d 	bl	8009ed4 <__assert_func>
 80081ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081be:	6005      	str	r5, [r0, #0]
 80081c0:	60c5      	str	r5, [r0, #12]
 80081c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c4:	6819      	ldr	r1, [r3, #0]
 80081c6:	b151      	cbz	r1, 80081de <_dtoa_r+0x5e>
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	604a      	str	r2, [r1, #4]
 80081cc:	2301      	movs	r3, #1
 80081ce:	4093      	lsls	r3, r2
 80081d0:	608b      	str	r3, [r1, #8]
 80081d2:	4620      	mov	r0, r4
 80081d4:	f001 f83c 	bl	8009250 <_Bfree>
 80081d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	1e3b      	subs	r3, r7, #0
 80081e0:	bfaa      	itet	ge
 80081e2:	2300      	movge	r3, #0
 80081e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80081e8:	f8c8 3000 	strge.w	r3, [r8]
 80081ec:	4b9a      	ldr	r3, [pc, #616]	; (8008458 <_dtoa_r+0x2d8>)
 80081ee:	bfbc      	itt	lt
 80081f0:	2201      	movlt	r2, #1
 80081f2:	f8c8 2000 	strlt.w	r2, [r8]
 80081f6:	ea33 030b 	bics.w	r3, r3, fp
 80081fa:	d11b      	bne.n	8008234 <_dtoa_r+0xb4>
 80081fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008208:	4333      	orrs	r3, r6
 800820a:	f000 8592 	beq.w	8008d32 <_dtoa_r+0xbb2>
 800820e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008210:	b963      	cbnz	r3, 800822c <_dtoa_r+0xac>
 8008212:	4b92      	ldr	r3, [pc, #584]	; (800845c <_dtoa_r+0x2dc>)
 8008214:	e022      	b.n	800825c <_dtoa_r+0xdc>
 8008216:	4b92      	ldr	r3, [pc, #584]	; (8008460 <_dtoa_r+0x2e0>)
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	3308      	adds	r3, #8
 800821c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	9801      	ldr	r0, [sp, #4]
 8008222:	b013      	add	sp, #76	; 0x4c
 8008224:	ecbd 8b04 	vpop	{d8-d9}
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822c:	4b8b      	ldr	r3, [pc, #556]	; (800845c <_dtoa_r+0x2dc>)
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	3303      	adds	r3, #3
 8008232:	e7f3      	b.n	800821c <_dtoa_r+0x9c>
 8008234:	2200      	movs	r2, #0
 8008236:	2300      	movs	r3, #0
 8008238:	4650      	mov	r0, sl
 800823a:	4659      	mov	r1, fp
 800823c:	f7f8 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8008240:	ec4b ab19 	vmov	d9, sl, fp
 8008244:	4680      	mov	r8, r0
 8008246:	b158      	cbz	r0, 8008260 <_dtoa_r+0xe0>
 8008248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800824a:	2301      	movs	r3, #1
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 856b 	beq.w	8008d2c <_dtoa_r+0xbac>
 8008256:	4883      	ldr	r0, [pc, #524]	; (8008464 <_dtoa_r+0x2e4>)
 8008258:	6018      	str	r0, [r3, #0]
 800825a:	1e43      	subs	r3, r0, #1
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	e7df      	b.n	8008220 <_dtoa_r+0xa0>
 8008260:	ec4b ab10 	vmov	d0, sl, fp
 8008264:	aa10      	add	r2, sp, #64	; 0x40
 8008266:	a911      	add	r1, sp, #68	; 0x44
 8008268:	4620      	mov	r0, r4
 800826a:	f001 fad9 	bl	8009820 <__d2b>
 800826e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008272:	ee08 0a10 	vmov	s16, r0
 8008276:	2d00      	cmp	r5, #0
 8008278:	f000 8084 	beq.w	8008384 <_dtoa_r+0x204>
 800827c:	ee19 3a90 	vmov	r3, s19
 8008280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008284:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008288:	4656      	mov	r6, sl
 800828a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800828e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008292:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008296:	4b74      	ldr	r3, [pc, #464]	; (8008468 <_dtoa_r+0x2e8>)
 8008298:	2200      	movs	r2, #0
 800829a:	4630      	mov	r0, r6
 800829c:	4639      	mov	r1, r7
 800829e:	f7f7 fff3 	bl	8000288 <__aeabi_dsub>
 80082a2:	a365      	add	r3, pc, #404	; (adr r3, 8008438 <_dtoa_r+0x2b8>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f9a6 	bl	80005f8 <__aeabi_dmul>
 80082ac:	a364      	add	r3, pc, #400	; (adr r3, 8008440 <_dtoa_r+0x2c0>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 ffeb 	bl	800028c <__adddf3>
 80082b6:	4606      	mov	r6, r0
 80082b8:	4628      	mov	r0, r5
 80082ba:	460f      	mov	r7, r1
 80082bc:	f7f8 f932 	bl	8000524 <__aeabi_i2d>
 80082c0:	a361      	add	r3, pc, #388	; (adr r3, 8008448 <_dtoa_r+0x2c8>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f8 f997 	bl	80005f8 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4630      	mov	r0, r6
 80082d0:	4639      	mov	r1, r7
 80082d2:	f7f7 ffdb 	bl	800028c <__adddf3>
 80082d6:	4606      	mov	r6, r0
 80082d8:	460f      	mov	r7, r1
 80082da:	f7f8 fc3d 	bl	8000b58 <__aeabi_d2iz>
 80082de:	2200      	movs	r2, #0
 80082e0:	9000      	str	r0, [sp, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f8 fbf8 	bl	8000adc <__aeabi_dcmplt>
 80082ec:	b150      	cbz	r0, 8008304 <_dtoa_r+0x184>
 80082ee:	9800      	ldr	r0, [sp, #0]
 80082f0:	f7f8 f918 	bl	8000524 <__aeabi_i2d>
 80082f4:	4632      	mov	r2, r6
 80082f6:	463b      	mov	r3, r7
 80082f8:	f7f8 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fc:	b910      	cbnz	r0, 8008304 <_dtoa_r+0x184>
 80082fe:	9b00      	ldr	r3, [sp, #0]
 8008300:	3b01      	subs	r3, #1
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	2b16      	cmp	r3, #22
 8008308:	d85a      	bhi.n	80083c0 <_dtoa_r+0x240>
 800830a:	9a00      	ldr	r2, [sp, #0]
 800830c:	4b57      	ldr	r3, [pc, #348]	; (800846c <_dtoa_r+0x2ec>)
 800830e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	ec51 0b19 	vmov	r0, r1, d9
 800831a:	f7f8 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d050      	beq.n	80083c4 <_dtoa_r+0x244>
 8008322:	9b00      	ldr	r3, [sp, #0]
 8008324:	3b01      	subs	r3, #1
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	2300      	movs	r3, #0
 800832a:	930b      	str	r3, [sp, #44]	; 0x2c
 800832c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800832e:	1b5d      	subs	r5, r3, r5
 8008330:	1e6b      	subs	r3, r5, #1
 8008332:	9305      	str	r3, [sp, #20]
 8008334:	bf45      	ittet	mi
 8008336:	f1c5 0301 	rsbmi	r3, r5, #1
 800833a:	9304      	strmi	r3, [sp, #16]
 800833c:	2300      	movpl	r3, #0
 800833e:	2300      	movmi	r3, #0
 8008340:	bf4c      	ite	mi
 8008342:	9305      	strmi	r3, [sp, #20]
 8008344:	9304      	strpl	r3, [sp, #16]
 8008346:	9b00      	ldr	r3, [sp, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	db3d      	blt.n	80083c8 <_dtoa_r+0x248>
 800834c:	9b05      	ldr	r3, [sp, #20]
 800834e:	9a00      	ldr	r2, [sp, #0]
 8008350:	920a      	str	r2, [sp, #40]	; 0x28
 8008352:	4413      	add	r3, r2
 8008354:	9305      	str	r3, [sp, #20]
 8008356:	2300      	movs	r3, #0
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	9b06      	ldr	r3, [sp, #24]
 800835c:	2b09      	cmp	r3, #9
 800835e:	f200 8089 	bhi.w	8008474 <_dtoa_r+0x2f4>
 8008362:	2b05      	cmp	r3, #5
 8008364:	bfc4      	itt	gt
 8008366:	3b04      	subgt	r3, #4
 8008368:	9306      	strgt	r3, [sp, #24]
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	f1a3 0302 	sub.w	r3, r3, #2
 8008370:	bfcc      	ite	gt
 8008372:	2500      	movgt	r5, #0
 8008374:	2501      	movle	r5, #1
 8008376:	2b03      	cmp	r3, #3
 8008378:	f200 8087 	bhi.w	800848a <_dtoa_r+0x30a>
 800837c:	e8df f003 	tbb	[pc, r3]
 8008380:	59383a2d 	.word	0x59383a2d
 8008384:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008388:	441d      	add	r5, r3
 800838a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800838e:	2b20      	cmp	r3, #32
 8008390:	bfc1      	itttt	gt
 8008392:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008396:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800839a:	fa0b f303 	lslgt.w	r3, fp, r3
 800839e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083a2:	bfda      	itte	le
 80083a4:	f1c3 0320 	rsble	r3, r3, #32
 80083a8:	fa06 f003 	lslle.w	r0, r6, r3
 80083ac:	4318      	orrgt	r0, r3
 80083ae:	f7f8 f8a9 	bl	8000504 <__aeabi_ui2d>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4606      	mov	r6, r0
 80083b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083ba:	3d01      	subs	r5, #1
 80083bc:	930e      	str	r3, [sp, #56]	; 0x38
 80083be:	e76a      	b.n	8008296 <_dtoa_r+0x116>
 80083c0:	2301      	movs	r3, #1
 80083c2:	e7b2      	b.n	800832a <_dtoa_r+0x1aa>
 80083c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80083c6:	e7b1      	b.n	800832c <_dtoa_r+0x1ac>
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	9a00      	ldr	r2, [sp, #0]
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	4253      	negs	r3, r2
 80083d2:	9307      	str	r3, [sp, #28]
 80083d4:	2300      	movs	r3, #0
 80083d6:	930a      	str	r3, [sp, #40]	; 0x28
 80083d8:	e7bf      	b.n	800835a <_dtoa_r+0x1da>
 80083da:	2300      	movs	r3, #0
 80083dc:	9308      	str	r3, [sp, #32]
 80083de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dc55      	bgt.n	8008490 <_dtoa_r+0x310>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083ea:	461a      	mov	r2, r3
 80083ec:	9209      	str	r2, [sp, #36]	; 0x24
 80083ee:	e00c      	b.n	800840a <_dtoa_r+0x28a>
 80083f0:	2301      	movs	r3, #1
 80083f2:	e7f3      	b.n	80083dc <_dtoa_r+0x25c>
 80083f4:	2300      	movs	r3, #0
 80083f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	9b00      	ldr	r3, [sp, #0]
 80083fc:	4413      	add	r3, r2
 80083fe:	9302      	str	r3, [sp, #8]
 8008400:	3301      	adds	r3, #1
 8008402:	2b01      	cmp	r3, #1
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	bfb8      	it	lt
 8008408:	2301      	movlt	r3, #1
 800840a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800840c:	2200      	movs	r2, #0
 800840e:	6042      	str	r2, [r0, #4]
 8008410:	2204      	movs	r2, #4
 8008412:	f102 0614 	add.w	r6, r2, #20
 8008416:	429e      	cmp	r6, r3
 8008418:	6841      	ldr	r1, [r0, #4]
 800841a:	d93d      	bls.n	8008498 <_dtoa_r+0x318>
 800841c:	4620      	mov	r0, r4
 800841e:	f000 fed7 	bl	80091d0 <_Balloc>
 8008422:	9001      	str	r0, [sp, #4]
 8008424:	2800      	cmp	r0, #0
 8008426:	d13b      	bne.n	80084a0 <_dtoa_r+0x320>
 8008428:	4b11      	ldr	r3, [pc, #68]	; (8008470 <_dtoa_r+0x2f0>)
 800842a:	4602      	mov	r2, r0
 800842c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008430:	e6c0      	b.n	80081b4 <_dtoa_r+0x34>
 8008432:	2301      	movs	r3, #1
 8008434:	e7df      	b.n	80083f6 <_dtoa_r+0x276>
 8008436:	bf00      	nop
 8008438:	636f4361 	.word	0x636f4361
 800843c:	3fd287a7 	.word	0x3fd287a7
 8008440:	8b60c8b3 	.word	0x8b60c8b3
 8008444:	3fc68a28 	.word	0x3fc68a28
 8008448:	509f79fb 	.word	0x509f79fb
 800844c:	3fd34413 	.word	0x3fd34413
 8008450:	0800a1e1 	.word	0x0800a1e1
 8008454:	0800a1f8 	.word	0x0800a1f8
 8008458:	7ff00000 	.word	0x7ff00000
 800845c:	0800a1dd 	.word	0x0800a1dd
 8008460:	0800a1d4 	.word	0x0800a1d4
 8008464:	0800a1b1 	.word	0x0800a1b1
 8008468:	3ff80000 	.word	0x3ff80000
 800846c:	0800a348 	.word	0x0800a348
 8008470:	0800a253 	.word	0x0800a253
 8008474:	2501      	movs	r5, #1
 8008476:	2300      	movs	r3, #0
 8008478:	9306      	str	r3, [sp, #24]
 800847a:	9508      	str	r5, [sp, #32]
 800847c:	f04f 33ff 	mov.w	r3, #4294967295
 8008480:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	2312      	movs	r3, #18
 8008488:	e7b0      	b.n	80083ec <_dtoa_r+0x26c>
 800848a:	2301      	movs	r3, #1
 800848c:	9308      	str	r3, [sp, #32]
 800848e:	e7f5      	b.n	800847c <_dtoa_r+0x2fc>
 8008490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008492:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008496:	e7b8      	b.n	800840a <_dtoa_r+0x28a>
 8008498:	3101      	adds	r1, #1
 800849a:	6041      	str	r1, [r0, #4]
 800849c:	0052      	lsls	r2, r2, #1
 800849e:	e7b8      	b.n	8008412 <_dtoa_r+0x292>
 80084a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a2:	9a01      	ldr	r2, [sp, #4]
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	2b0e      	cmp	r3, #14
 80084aa:	f200 809d 	bhi.w	80085e8 <_dtoa_r+0x468>
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	f000 809a 	beq.w	80085e8 <_dtoa_r+0x468>
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	dd32      	ble.n	8008520 <_dtoa_r+0x3a0>
 80084ba:	4ab7      	ldr	r2, [pc, #732]	; (8008798 <_dtoa_r+0x618>)
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80084c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084c8:	9b00      	ldr	r3, [sp, #0]
 80084ca:	05d8      	lsls	r0, r3, #23
 80084cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80084d0:	d516      	bpl.n	8008500 <_dtoa_r+0x380>
 80084d2:	4bb2      	ldr	r3, [pc, #712]	; (800879c <_dtoa_r+0x61c>)
 80084d4:	ec51 0b19 	vmov	r0, r1, d9
 80084d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084dc:	f7f8 f9b6 	bl	800084c <__aeabi_ddiv>
 80084e0:	f007 070f 	and.w	r7, r7, #15
 80084e4:	4682      	mov	sl, r0
 80084e6:	468b      	mov	fp, r1
 80084e8:	2503      	movs	r5, #3
 80084ea:	4eac      	ldr	r6, [pc, #688]	; (800879c <_dtoa_r+0x61c>)
 80084ec:	b957      	cbnz	r7, 8008504 <_dtoa_r+0x384>
 80084ee:	4642      	mov	r2, r8
 80084f0:	464b      	mov	r3, r9
 80084f2:	4650      	mov	r0, sl
 80084f4:	4659      	mov	r1, fp
 80084f6:	f7f8 f9a9 	bl	800084c <__aeabi_ddiv>
 80084fa:	4682      	mov	sl, r0
 80084fc:	468b      	mov	fp, r1
 80084fe:	e028      	b.n	8008552 <_dtoa_r+0x3d2>
 8008500:	2502      	movs	r5, #2
 8008502:	e7f2      	b.n	80084ea <_dtoa_r+0x36a>
 8008504:	07f9      	lsls	r1, r7, #31
 8008506:	d508      	bpl.n	800851a <_dtoa_r+0x39a>
 8008508:	4640      	mov	r0, r8
 800850a:	4649      	mov	r1, r9
 800850c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008510:	f7f8 f872 	bl	80005f8 <__aeabi_dmul>
 8008514:	3501      	adds	r5, #1
 8008516:	4680      	mov	r8, r0
 8008518:	4689      	mov	r9, r1
 800851a:	107f      	asrs	r7, r7, #1
 800851c:	3608      	adds	r6, #8
 800851e:	e7e5      	b.n	80084ec <_dtoa_r+0x36c>
 8008520:	f000 809b 	beq.w	800865a <_dtoa_r+0x4da>
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	4f9d      	ldr	r7, [pc, #628]	; (800879c <_dtoa_r+0x61c>)
 8008528:	425e      	negs	r6, r3
 800852a:	4b9b      	ldr	r3, [pc, #620]	; (8008798 <_dtoa_r+0x618>)
 800852c:	f006 020f 	and.w	r2, r6, #15
 8008530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008538:	ec51 0b19 	vmov	r0, r1, d9
 800853c:	f7f8 f85c 	bl	80005f8 <__aeabi_dmul>
 8008540:	1136      	asrs	r6, r6, #4
 8008542:	4682      	mov	sl, r0
 8008544:	468b      	mov	fp, r1
 8008546:	2300      	movs	r3, #0
 8008548:	2502      	movs	r5, #2
 800854a:	2e00      	cmp	r6, #0
 800854c:	d17a      	bne.n	8008644 <_dtoa_r+0x4c4>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1d3      	bne.n	80084fa <_dtoa_r+0x37a>
 8008552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8082 	beq.w	800865e <_dtoa_r+0x4de>
 800855a:	4b91      	ldr	r3, [pc, #580]	; (80087a0 <_dtoa_r+0x620>)
 800855c:	2200      	movs	r2, #0
 800855e:	4650      	mov	r0, sl
 8008560:	4659      	mov	r1, fp
 8008562:	f7f8 fabb 	bl	8000adc <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d079      	beq.n	800865e <_dtoa_r+0x4de>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d076      	beq.n	800865e <_dtoa_r+0x4de>
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	dd36      	ble.n	80085e4 <_dtoa_r+0x464>
 8008576:	9b00      	ldr	r3, [sp, #0]
 8008578:	4650      	mov	r0, sl
 800857a:	4659      	mov	r1, fp
 800857c:	1e5f      	subs	r7, r3, #1
 800857e:	2200      	movs	r2, #0
 8008580:	4b88      	ldr	r3, [pc, #544]	; (80087a4 <_dtoa_r+0x624>)
 8008582:	f7f8 f839 	bl	80005f8 <__aeabi_dmul>
 8008586:	9e02      	ldr	r6, [sp, #8]
 8008588:	4682      	mov	sl, r0
 800858a:	468b      	mov	fp, r1
 800858c:	3501      	adds	r5, #1
 800858e:	4628      	mov	r0, r5
 8008590:	f7f7 ffc8 	bl	8000524 <__aeabi_i2d>
 8008594:	4652      	mov	r2, sl
 8008596:	465b      	mov	r3, fp
 8008598:	f7f8 f82e 	bl	80005f8 <__aeabi_dmul>
 800859c:	4b82      	ldr	r3, [pc, #520]	; (80087a8 <_dtoa_r+0x628>)
 800859e:	2200      	movs	r2, #0
 80085a0:	f7f7 fe74 	bl	800028c <__adddf3>
 80085a4:	46d0      	mov	r8, sl
 80085a6:	46d9      	mov	r9, fp
 80085a8:	4682      	mov	sl, r0
 80085aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085ae:	2e00      	cmp	r6, #0
 80085b0:	d158      	bne.n	8008664 <_dtoa_r+0x4e4>
 80085b2:	4b7e      	ldr	r3, [pc, #504]	; (80087ac <_dtoa_r+0x62c>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	4640      	mov	r0, r8
 80085b8:	4649      	mov	r1, r9
 80085ba:	f7f7 fe65 	bl	8000288 <__aeabi_dsub>
 80085be:	4652      	mov	r2, sl
 80085c0:	465b      	mov	r3, fp
 80085c2:	4680      	mov	r8, r0
 80085c4:	4689      	mov	r9, r1
 80085c6:	f7f8 faa7 	bl	8000b18 <__aeabi_dcmpgt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f040 8295 	bne.w	8008afa <_dtoa_r+0x97a>
 80085d0:	4652      	mov	r2, sl
 80085d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	f7f8 fa7f 	bl	8000adc <__aeabi_dcmplt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	f040 8289 	bne.w	8008af6 <_dtoa_r+0x976>
 80085e4:	ec5b ab19 	vmov	sl, fp, d9
 80085e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f2c0 8148 	blt.w	8008880 <_dtoa_r+0x700>
 80085f0:	9a00      	ldr	r2, [sp, #0]
 80085f2:	2a0e      	cmp	r2, #14
 80085f4:	f300 8144 	bgt.w	8008880 <_dtoa_r+0x700>
 80085f8:	4b67      	ldr	r3, [pc, #412]	; (8008798 <_dtoa_r+0x618>)
 80085fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	f280 80d5 	bge.w	80087b4 <_dtoa_r+0x634>
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f300 80d1 	bgt.w	80087b4 <_dtoa_r+0x634>
 8008612:	f040 826f 	bne.w	8008af4 <_dtoa_r+0x974>
 8008616:	4b65      	ldr	r3, [pc, #404]	; (80087ac <_dtoa_r+0x62c>)
 8008618:	2200      	movs	r2, #0
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f7 ffeb 	bl	80005f8 <__aeabi_dmul>
 8008622:	4652      	mov	r2, sl
 8008624:	465b      	mov	r3, fp
 8008626:	f7f8 fa6d 	bl	8000b04 <__aeabi_dcmpge>
 800862a:	9e03      	ldr	r6, [sp, #12]
 800862c:	4637      	mov	r7, r6
 800862e:	2800      	cmp	r0, #0
 8008630:	f040 8245 	bne.w	8008abe <_dtoa_r+0x93e>
 8008634:	9d01      	ldr	r5, [sp, #4]
 8008636:	2331      	movs	r3, #49	; 0x31
 8008638:	f805 3b01 	strb.w	r3, [r5], #1
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	3301      	adds	r3, #1
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	e240      	b.n	8008ac6 <_dtoa_r+0x946>
 8008644:	07f2      	lsls	r2, r6, #31
 8008646:	d505      	bpl.n	8008654 <_dtoa_r+0x4d4>
 8008648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800864c:	f7f7 ffd4 	bl	80005f8 <__aeabi_dmul>
 8008650:	3501      	adds	r5, #1
 8008652:	2301      	movs	r3, #1
 8008654:	1076      	asrs	r6, r6, #1
 8008656:	3708      	adds	r7, #8
 8008658:	e777      	b.n	800854a <_dtoa_r+0x3ca>
 800865a:	2502      	movs	r5, #2
 800865c:	e779      	b.n	8008552 <_dtoa_r+0x3d2>
 800865e:	9f00      	ldr	r7, [sp, #0]
 8008660:	9e03      	ldr	r6, [sp, #12]
 8008662:	e794      	b.n	800858e <_dtoa_r+0x40e>
 8008664:	9901      	ldr	r1, [sp, #4]
 8008666:	4b4c      	ldr	r3, [pc, #304]	; (8008798 <_dtoa_r+0x618>)
 8008668:	4431      	add	r1, r6
 800866a:	910d      	str	r1, [sp, #52]	; 0x34
 800866c:	9908      	ldr	r1, [sp, #32]
 800866e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008672:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008676:	2900      	cmp	r1, #0
 8008678:	d043      	beq.n	8008702 <_dtoa_r+0x582>
 800867a:	494d      	ldr	r1, [pc, #308]	; (80087b0 <_dtoa_r+0x630>)
 800867c:	2000      	movs	r0, #0
 800867e:	f7f8 f8e5 	bl	800084c <__aeabi_ddiv>
 8008682:	4652      	mov	r2, sl
 8008684:	465b      	mov	r3, fp
 8008686:	f7f7 fdff 	bl	8000288 <__aeabi_dsub>
 800868a:	9d01      	ldr	r5, [sp, #4]
 800868c:	4682      	mov	sl, r0
 800868e:	468b      	mov	fp, r1
 8008690:	4649      	mov	r1, r9
 8008692:	4640      	mov	r0, r8
 8008694:	f7f8 fa60 	bl	8000b58 <__aeabi_d2iz>
 8008698:	4606      	mov	r6, r0
 800869a:	f7f7 ff43 	bl	8000524 <__aeabi_i2d>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	f7f7 fdef 	bl	8000288 <__aeabi_dsub>
 80086aa:	3630      	adds	r6, #48	; 0x30
 80086ac:	f805 6b01 	strb.w	r6, [r5], #1
 80086b0:	4652      	mov	r2, sl
 80086b2:	465b      	mov	r3, fp
 80086b4:	4680      	mov	r8, r0
 80086b6:	4689      	mov	r9, r1
 80086b8:	f7f8 fa10 	bl	8000adc <__aeabi_dcmplt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d163      	bne.n	8008788 <_dtoa_r+0x608>
 80086c0:	4642      	mov	r2, r8
 80086c2:	464b      	mov	r3, r9
 80086c4:	4936      	ldr	r1, [pc, #216]	; (80087a0 <_dtoa_r+0x620>)
 80086c6:	2000      	movs	r0, #0
 80086c8:	f7f7 fdde 	bl	8000288 <__aeabi_dsub>
 80086cc:	4652      	mov	r2, sl
 80086ce:	465b      	mov	r3, fp
 80086d0:	f7f8 fa04 	bl	8000adc <__aeabi_dcmplt>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f040 80b5 	bne.w	8008844 <_dtoa_r+0x6c4>
 80086da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086dc:	429d      	cmp	r5, r3
 80086de:	d081      	beq.n	80085e4 <_dtoa_r+0x464>
 80086e0:	4b30      	ldr	r3, [pc, #192]	; (80087a4 <_dtoa_r+0x624>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	4650      	mov	r0, sl
 80086e6:	4659      	mov	r1, fp
 80086e8:	f7f7 ff86 	bl	80005f8 <__aeabi_dmul>
 80086ec:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <_dtoa_r+0x624>)
 80086ee:	4682      	mov	sl, r0
 80086f0:	468b      	mov	fp, r1
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	2200      	movs	r2, #0
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	4680      	mov	r8, r0
 80086fe:	4689      	mov	r9, r1
 8008700:	e7c6      	b.n	8008690 <_dtoa_r+0x510>
 8008702:	4650      	mov	r0, sl
 8008704:	4659      	mov	r1, fp
 8008706:	f7f7 ff77 	bl	80005f8 <__aeabi_dmul>
 800870a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800870c:	9d01      	ldr	r5, [sp, #4]
 800870e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008710:	4682      	mov	sl, r0
 8008712:	468b      	mov	fp, r1
 8008714:	4649      	mov	r1, r9
 8008716:	4640      	mov	r0, r8
 8008718:	f7f8 fa1e 	bl	8000b58 <__aeabi_d2iz>
 800871c:	4606      	mov	r6, r0
 800871e:	f7f7 ff01 	bl	8000524 <__aeabi_i2d>
 8008722:	3630      	adds	r6, #48	; 0x30
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	f805 6b01 	strb.w	r6, [r5], #1
 8008734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008736:	429d      	cmp	r5, r3
 8008738:	4680      	mov	r8, r0
 800873a:	4689      	mov	r9, r1
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	d124      	bne.n	800878c <_dtoa_r+0x60c>
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <_dtoa_r+0x630>)
 8008744:	4650      	mov	r0, sl
 8008746:	4659      	mov	r1, fp
 8008748:	f7f7 fda0 	bl	800028c <__adddf3>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4640      	mov	r0, r8
 8008752:	4649      	mov	r1, r9
 8008754:	f7f8 f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 8008758:	2800      	cmp	r0, #0
 800875a:	d173      	bne.n	8008844 <_dtoa_r+0x6c4>
 800875c:	4652      	mov	r2, sl
 800875e:	465b      	mov	r3, fp
 8008760:	4913      	ldr	r1, [pc, #76]	; (80087b0 <_dtoa_r+0x630>)
 8008762:	2000      	movs	r0, #0
 8008764:	f7f7 fd90 	bl	8000288 <__aeabi_dsub>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4640      	mov	r0, r8
 800876e:	4649      	mov	r1, r9
 8008770:	f7f8 f9b4 	bl	8000adc <__aeabi_dcmplt>
 8008774:	2800      	cmp	r0, #0
 8008776:	f43f af35 	beq.w	80085e4 <_dtoa_r+0x464>
 800877a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800877c:	1e6b      	subs	r3, r5, #1
 800877e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008780:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008784:	2b30      	cmp	r3, #48	; 0x30
 8008786:	d0f8      	beq.n	800877a <_dtoa_r+0x5fa>
 8008788:	9700      	str	r7, [sp, #0]
 800878a:	e049      	b.n	8008820 <_dtoa_r+0x6a0>
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <_dtoa_r+0x624>)
 800878e:	f7f7 ff33 	bl	80005f8 <__aeabi_dmul>
 8008792:	4680      	mov	r8, r0
 8008794:	4689      	mov	r9, r1
 8008796:	e7bd      	b.n	8008714 <_dtoa_r+0x594>
 8008798:	0800a348 	.word	0x0800a348
 800879c:	0800a320 	.word	0x0800a320
 80087a0:	3ff00000 	.word	0x3ff00000
 80087a4:	40240000 	.word	0x40240000
 80087a8:	401c0000 	.word	0x401c0000
 80087ac:	40140000 	.word	0x40140000
 80087b0:	3fe00000 	.word	0x3fe00000
 80087b4:	9d01      	ldr	r5, [sp, #4]
 80087b6:	4656      	mov	r6, sl
 80087b8:	465f      	mov	r7, fp
 80087ba:	4642      	mov	r2, r8
 80087bc:	464b      	mov	r3, r9
 80087be:	4630      	mov	r0, r6
 80087c0:	4639      	mov	r1, r7
 80087c2:	f7f8 f843 	bl	800084c <__aeabi_ddiv>
 80087c6:	f7f8 f9c7 	bl	8000b58 <__aeabi_d2iz>
 80087ca:	4682      	mov	sl, r0
 80087cc:	f7f7 feaa 	bl	8000524 <__aeabi_i2d>
 80087d0:	4642      	mov	r2, r8
 80087d2:	464b      	mov	r3, r9
 80087d4:	f7f7 ff10 	bl	80005f8 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80087e4:	f7f7 fd50 	bl	8000288 <__aeabi_dsub>
 80087e8:	f805 6b01 	strb.w	r6, [r5], #1
 80087ec:	9e01      	ldr	r6, [sp, #4]
 80087ee:	9f03      	ldr	r7, [sp, #12]
 80087f0:	1bae      	subs	r6, r5, r6
 80087f2:	42b7      	cmp	r7, r6
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	d135      	bne.n	8008866 <_dtoa_r+0x6e6>
 80087fa:	f7f7 fd47 	bl	800028c <__adddf3>
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	4606      	mov	r6, r0
 8008804:	460f      	mov	r7, r1
 8008806:	f7f8 f987 	bl	8000b18 <__aeabi_dcmpgt>
 800880a:	b9d0      	cbnz	r0, 8008842 <_dtoa_r+0x6c2>
 800880c:	4642      	mov	r2, r8
 800880e:	464b      	mov	r3, r9
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f8 f958 	bl	8000ac8 <__aeabi_dcmpeq>
 8008818:	b110      	cbz	r0, 8008820 <_dtoa_r+0x6a0>
 800881a:	f01a 0f01 	tst.w	sl, #1
 800881e:	d110      	bne.n	8008842 <_dtoa_r+0x6c2>
 8008820:	4620      	mov	r0, r4
 8008822:	ee18 1a10 	vmov	r1, s16
 8008826:	f000 fd13 	bl	8009250 <_Bfree>
 800882a:	2300      	movs	r3, #0
 800882c:	9800      	ldr	r0, [sp, #0]
 800882e:	702b      	strb	r3, [r5, #0]
 8008830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008832:	3001      	adds	r0, #1
 8008834:	6018      	str	r0, [r3, #0]
 8008836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008838:	2b00      	cmp	r3, #0
 800883a:	f43f acf1 	beq.w	8008220 <_dtoa_r+0xa0>
 800883e:	601d      	str	r5, [r3, #0]
 8008840:	e4ee      	b.n	8008220 <_dtoa_r+0xa0>
 8008842:	9f00      	ldr	r7, [sp, #0]
 8008844:	462b      	mov	r3, r5
 8008846:	461d      	mov	r5, r3
 8008848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800884c:	2a39      	cmp	r2, #57	; 0x39
 800884e:	d106      	bne.n	800885e <_dtoa_r+0x6de>
 8008850:	9a01      	ldr	r2, [sp, #4]
 8008852:	429a      	cmp	r2, r3
 8008854:	d1f7      	bne.n	8008846 <_dtoa_r+0x6c6>
 8008856:	9901      	ldr	r1, [sp, #4]
 8008858:	2230      	movs	r2, #48	; 0x30
 800885a:	3701      	adds	r7, #1
 800885c:	700a      	strb	r2, [r1, #0]
 800885e:	781a      	ldrb	r2, [r3, #0]
 8008860:	3201      	adds	r2, #1
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	e790      	b.n	8008788 <_dtoa_r+0x608>
 8008866:	4ba6      	ldr	r3, [pc, #664]	; (8008b00 <_dtoa_r+0x980>)
 8008868:	2200      	movs	r2, #0
 800886a:	f7f7 fec5 	bl	80005f8 <__aeabi_dmul>
 800886e:	2200      	movs	r2, #0
 8008870:	2300      	movs	r3, #0
 8008872:	4606      	mov	r6, r0
 8008874:	460f      	mov	r7, r1
 8008876:	f7f8 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800887a:	2800      	cmp	r0, #0
 800887c:	d09d      	beq.n	80087ba <_dtoa_r+0x63a>
 800887e:	e7cf      	b.n	8008820 <_dtoa_r+0x6a0>
 8008880:	9a08      	ldr	r2, [sp, #32]
 8008882:	2a00      	cmp	r2, #0
 8008884:	f000 80d7 	beq.w	8008a36 <_dtoa_r+0x8b6>
 8008888:	9a06      	ldr	r2, [sp, #24]
 800888a:	2a01      	cmp	r2, #1
 800888c:	f300 80ba 	bgt.w	8008a04 <_dtoa_r+0x884>
 8008890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008892:	2a00      	cmp	r2, #0
 8008894:	f000 80b2 	beq.w	80089fc <_dtoa_r+0x87c>
 8008898:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800889c:	9e07      	ldr	r6, [sp, #28]
 800889e:	9d04      	ldr	r5, [sp, #16]
 80088a0:	9a04      	ldr	r2, [sp, #16]
 80088a2:	441a      	add	r2, r3
 80088a4:	9204      	str	r2, [sp, #16]
 80088a6:	9a05      	ldr	r2, [sp, #20]
 80088a8:	2101      	movs	r1, #1
 80088aa:	441a      	add	r2, r3
 80088ac:	4620      	mov	r0, r4
 80088ae:	9205      	str	r2, [sp, #20]
 80088b0:	f000 fd86 	bl	80093c0 <__i2b>
 80088b4:	4607      	mov	r7, r0
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	dd0c      	ble.n	80088d4 <_dtoa_r+0x754>
 80088ba:	9b05      	ldr	r3, [sp, #20]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dd09      	ble.n	80088d4 <_dtoa_r+0x754>
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	9a04      	ldr	r2, [sp, #16]
 80088c4:	bfa8      	it	ge
 80088c6:	462b      	movge	r3, r5
 80088c8:	1ad2      	subs	r2, r2, r3
 80088ca:	9204      	str	r2, [sp, #16]
 80088cc:	9a05      	ldr	r2, [sp, #20]
 80088ce:	1aed      	subs	r5, r5, r3
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	9b07      	ldr	r3, [sp, #28]
 80088d6:	b31b      	cbz	r3, 8008920 <_dtoa_r+0x7a0>
 80088d8:	9b08      	ldr	r3, [sp, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80af 	beq.w	8008a3e <_dtoa_r+0x8be>
 80088e0:	2e00      	cmp	r6, #0
 80088e2:	dd13      	ble.n	800890c <_dtoa_r+0x78c>
 80088e4:	4639      	mov	r1, r7
 80088e6:	4632      	mov	r2, r6
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fe29 	bl	8009540 <__pow5mult>
 80088ee:	ee18 2a10 	vmov	r2, s16
 80088f2:	4601      	mov	r1, r0
 80088f4:	4607      	mov	r7, r0
 80088f6:	4620      	mov	r0, r4
 80088f8:	f000 fd78 	bl	80093ec <__multiply>
 80088fc:	ee18 1a10 	vmov	r1, s16
 8008900:	4680      	mov	r8, r0
 8008902:	4620      	mov	r0, r4
 8008904:	f000 fca4 	bl	8009250 <_Bfree>
 8008908:	ee08 8a10 	vmov	s16, r8
 800890c:	9b07      	ldr	r3, [sp, #28]
 800890e:	1b9a      	subs	r2, r3, r6
 8008910:	d006      	beq.n	8008920 <_dtoa_r+0x7a0>
 8008912:	ee18 1a10 	vmov	r1, s16
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fe12 	bl	8009540 <__pow5mult>
 800891c:	ee08 0a10 	vmov	s16, r0
 8008920:	2101      	movs	r1, #1
 8008922:	4620      	mov	r0, r4
 8008924:	f000 fd4c 	bl	80093c0 <__i2b>
 8008928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892a:	2b00      	cmp	r3, #0
 800892c:	4606      	mov	r6, r0
 800892e:	f340 8088 	ble.w	8008a42 <_dtoa_r+0x8c2>
 8008932:	461a      	mov	r2, r3
 8008934:	4601      	mov	r1, r0
 8008936:	4620      	mov	r0, r4
 8008938:	f000 fe02 	bl	8009540 <__pow5mult>
 800893c:	9b06      	ldr	r3, [sp, #24]
 800893e:	2b01      	cmp	r3, #1
 8008940:	4606      	mov	r6, r0
 8008942:	f340 8081 	ble.w	8008a48 <_dtoa_r+0x8c8>
 8008946:	f04f 0800 	mov.w	r8, #0
 800894a:	6933      	ldr	r3, [r6, #16]
 800894c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008950:	6918      	ldr	r0, [r3, #16]
 8008952:	f000 fce5 	bl	8009320 <__hi0bits>
 8008956:	f1c0 0020 	rsb	r0, r0, #32
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	4418      	add	r0, r3
 800895e:	f010 001f 	ands.w	r0, r0, #31
 8008962:	f000 8092 	beq.w	8008a8a <_dtoa_r+0x90a>
 8008966:	f1c0 0320 	rsb	r3, r0, #32
 800896a:	2b04      	cmp	r3, #4
 800896c:	f340 808a 	ble.w	8008a84 <_dtoa_r+0x904>
 8008970:	f1c0 001c 	rsb	r0, r0, #28
 8008974:	9b04      	ldr	r3, [sp, #16]
 8008976:	4403      	add	r3, r0
 8008978:	9304      	str	r3, [sp, #16]
 800897a:	9b05      	ldr	r3, [sp, #20]
 800897c:	4403      	add	r3, r0
 800897e:	4405      	add	r5, r0
 8008980:	9305      	str	r3, [sp, #20]
 8008982:	9b04      	ldr	r3, [sp, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dd07      	ble.n	8008998 <_dtoa_r+0x818>
 8008988:	ee18 1a10 	vmov	r1, s16
 800898c:	461a      	mov	r2, r3
 800898e:	4620      	mov	r0, r4
 8008990:	f000 fe30 	bl	80095f4 <__lshift>
 8008994:	ee08 0a10 	vmov	s16, r0
 8008998:	9b05      	ldr	r3, [sp, #20]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd05      	ble.n	80089aa <_dtoa_r+0x82a>
 800899e:	4631      	mov	r1, r6
 80089a0:	461a      	mov	r2, r3
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fe26 	bl	80095f4 <__lshift>
 80089a8:	4606      	mov	r6, r0
 80089aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d06e      	beq.n	8008a8e <_dtoa_r+0x90e>
 80089b0:	ee18 0a10 	vmov	r0, s16
 80089b4:	4631      	mov	r1, r6
 80089b6:	f000 fe8d 	bl	80096d4 <__mcmp>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	da67      	bge.n	8008a8e <_dtoa_r+0x90e>
 80089be:	9b00      	ldr	r3, [sp, #0]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	ee18 1a10 	vmov	r1, s16
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	220a      	movs	r2, #10
 80089ca:	2300      	movs	r3, #0
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 fc61 	bl	8009294 <__multadd>
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	ee08 0a10 	vmov	s16, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 81b1 	beq.w	8008d40 <_dtoa_r+0xbc0>
 80089de:	2300      	movs	r3, #0
 80089e0:	4639      	mov	r1, r7
 80089e2:	220a      	movs	r2, #10
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 fc55 	bl	8009294 <__multadd>
 80089ea:	9b02      	ldr	r3, [sp, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	4607      	mov	r7, r0
 80089f0:	f300 808e 	bgt.w	8008b10 <_dtoa_r+0x990>
 80089f4:	9b06      	ldr	r3, [sp, #24]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	dc51      	bgt.n	8008a9e <_dtoa_r+0x91e>
 80089fa:	e089      	b.n	8008b10 <_dtoa_r+0x990>
 80089fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a02:	e74b      	b.n	800889c <_dtoa_r+0x71c>
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	1e5e      	subs	r6, r3, #1
 8008a08:	9b07      	ldr	r3, [sp, #28]
 8008a0a:	42b3      	cmp	r3, r6
 8008a0c:	bfbf      	itttt	lt
 8008a0e:	9b07      	ldrlt	r3, [sp, #28]
 8008a10:	9607      	strlt	r6, [sp, #28]
 8008a12:	1af2      	sublt	r2, r6, r3
 8008a14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a16:	bfb6      	itet	lt
 8008a18:	189b      	addlt	r3, r3, r2
 8008a1a:	1b9e      	subge	r6, r3, r6
 8008a1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	bfb8      	it	lt
 8008a22:	2600      	movlt	r6, #0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bfb7      	itett	lt
 8008a28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a30:	1a9d      	sublt	r5, r3, r2
 8008a32:	2300      	movlt	r3, #0
 8008a34:	e734      	b.n	80088a0 <_dtoa_r+0x720>
 8008a36:	9e07      	ldr	r6, [sp, #28]
 8008a38:	9d04      	ldr	r5, [sp, #16]
 8008a3a:	9f08      	ldr	r7, [sp, #32]
 8008a3c:	e73b      	b.n	80088b6 <_dtoa_r+0x736>
 8008a3e:	9a07      	ldr	r2, [sp, #28]
 8008a40:	e767      	b.n	8008912 <_dtoa_r+0x792>
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	dc18      	bgt.n	8008a7a <_dtoa_r+0x8fa>
 8008a48:	f1ba 0f00 	cmp.w	sl, #0
 8008a4c:	d115      	bne.n	8008a7a <_dtoa_r+0x8fa>
 8008a4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a52:	b993      	cbnz	r3, 8008a7a <_dtoa_r+0x8fa>
 8008a54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a58:	0d1b      	lsrs	r3, r3, #20
 8008a5a:	051b      	lsls	r3, r3, #20
 8008a5c:	b183      	cbz	r3, 8008a80 <_dtoa_r+0x900>
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	3301      	adds	r3, #1
 8008a62:	9304      	str	r3, [sp, #16]
 8008a64:	9b05      	ldr	r3, [sp, #20]
 8008a66:	3301      	adds	r3, #1
 8008a68:	9305      	str	r3, [sp, #20]
 8008a6a:	f04f 0801 	mov.w	r8, #1
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f47f af6a 	bne.w	800894a <_dtoa_r+0x7ca>
 8008a76:	2001      	movs	r0, #1
 8008a78:	e76f      	b.n	800895a <_dtoa_r+0x7da>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	e7f6      	b.n	8008a6e <_dtoa_r+0x8ee>
 8008a80:	4698      	mov	r8, r3
 8008a82:	e7f4      	b.n	8008a6e <_dtoa_r+0x8ee>
 8008a84:	f43f af7d 	beq.w	8008982 <_dtoa_r+0x802>
 8008a88:	4618      	mov	r0, r3
 8008a8a:	301c      	adds	r0, #28
 8008a8c:	e772      	b.n	8008974 <_dtoa_r+0x7f4>
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc37      	bgt.n	8008b04 <_dtoa_r+0x984>
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	dd34      	ble.n	8008b04 <_dtoa_r+0x984>
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	9302      	str	r3, [sp, #8]
 8008a9e:	9b02      	ldr	r3, [sp, #8]
 8008aa0:	b96b      	cbnz	r3, 8008abe <_dtoa_r+0x93e>
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	2205      	movs	r2, #5
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 fbf4 	bl	8009294 <__multadd>
 8008aac:	4601      	mov	r1, r0
 8008aae:	4606      	mov	r6, r0
 8008ab0:	ee18 0a10 	vmov	r0, s16
 8008ab4:	f000 fe0e 	bl	80096d4 <__mcmp>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	f73f adbb 	bgt.w	8008634 <_dtoa_r+0x4b4>
 8008abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac0:	9d01      	ldr	r5, [sp, #4]
 8008ac2:	43db      	mvns	r3, r3
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	f04f 0800 	mov.w	r8, #0
 8008aca:	4631      	mov	r1, r6
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 fbbf 	bl	8009250 <_Bfree>
 8008ad2:	2f00      	cmp	r7, #0
 8008ad4:	f43f aea4 	beq.w	8008820 <_dtoa_r+0x6a0>
 8008ad8:	f1b8 0f00 	cmp.w	r8, #0
 8008adc:	d005      	beq.n	8008aea <_dtoa_r+0x96a>
 8008ade:	45b8      	cmp	r8, r7
 8008ae0:	d003      	beq.n	8008aea <_dtoa_r+0x96a>
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 fbb3 	bl	8009250 <_Bfree>
 8008aea:	4639      	mov	r1, r7
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 fbaf 	bl	8009250 <_Bfree>
 8008af2:	e695      	b.n	8008820 <_dtoa_r+0x6a0>
 8008af4:	2600      	movs	r6, #0
 8008af6:	4637      	mov	r7, r6
 8008af8:	e7e1      	b.n	8008abe <_dtoa_r+0x93e>
 8008afa:	9700      	str	r7, [sp, #0]
 8008afc:	4637      	mov	r7, r6
 8008afe:	e599      	b.n	8008634 <_dtoa_r+0x4b4>
 8008b00:	40240000 	.word	0x40240000
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80ca 	beq.w	8008ca0 <_dtoa_r+0xb20>
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	2d00      	cmp	r5, #0
 8008b12:	dd05      	ble.n	8008b20 <_dtoa_r+0x9a0>
 8008b14:	4639      	mov	r1, r7
 8008b16:	462a      	mov	r2, r5
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fd6b 	bl	80095f4 <__lshift>
 8008b1e:	4607      	mov	r7, r0
 8008b20:	f1b8 0f00 	cmp.w	r8, #0
 8008b24:	d05b      	beq.n	8008bde <_dtoa_r+0xa5e>
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fb51 	bl	80091d0 <_Balloc>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	b928      	cbnz	r0, 8008b3e <_dtoa_r+0x9be>
 8008b32:	4b87      	ldr	r3, [pc, #540]	; (8008d50 <_dtoa_r+0xbd0>)
 8008b34:	4602      	mov	r2, r0
 8008b36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b3a:	f7ff bb3b 	b.w	80081b4 <_dtoa_r+0x34>
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	3202      	adds	r2, #2
 8008b42:	0092      	lsls	r2, r2, #2
 8008b44:	f107 010c 	add.w	r1, r7, #12
 8008b48:	300c      	adds	r0, #12
 8008b4a:	f000 fb33 	bl	80091b4 <memcpy>
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4629      	mov	r1, r5
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fd4e 	bl	80095f4 <__lshift>
 8008b58:	9b01      	ldr	r3, [sp, #4]
 8008b5a:	f103 0901 	add.w	r9, r3, #1
 8008b5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b62:	4413      	add	r3, r2
 8008b64:	9305      	str	r3, [sp, #20]
 8008b66:	f00a 0301 	and.w	r3, sl, #1
 8008b6a:	46b8      	mov	r8, r7
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	4607      	mov	r7, r0
 8008b70:	4631      	mov	r1, r6
 8008b72:	ee18 0a10 	vmov	r0, s16
 8008b76:	f7ff fa75 	bl	8008064 <quorem>
 8008b7a:	4641      	mov	r1, r8
 8008b7c:	9002      	str	r0, [sp, #8]
 8008b7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b82:	ee18 0a10 	vmov	r0, s16
 8008b86:	f000 fda5 	bl	80096d4 <__mcmp>
 8008b8a:	463a      	mov	r2, r7
 8008b8c:	9003      	str	r0, [sp, #12]
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fdbb 	bl	800970c <__mdiff>
 8008b96:	68c2      	ldr	r2, [r0, #12]
 8008b98:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	bb02      	cbnz	r2, 8008be2 <_dtoa_r+0xa62>
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	ee18 0a10 	vmov	r0, s16
 8008ba6:	f000 fd95 	bl	80096d4 <__mcmp>
 8008baa:	4602      	mov	r2, r0
 8008bac:	4629      	mov	r1, r5
 8008bae:	4620      	mov	r0, r4
 8008bb0:	9207      	str	r2, [sp, #28]
 8008bb2:	f000 fb4d 	bl	8009250 <_Bfree>
 8008bb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bba:	ea43 0102 	orr.w	r1, r3, r2
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	464d      	mov	r5, r9
 8008bc4:	d10f      	bne.n	8008be6 <_dtoa_r+0xa66>
 8008bc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bca:	d02a      	beq.n	8008c22 <_dtoa_r+0xaa2>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dd02      	ble.n	8008bd8 <_dtoa_r+0xa58>
 8008bd2:	9b02      	ldr	r3, [sp, #8]
 8008bd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008bd8:	f88b a000 	strb.w	sl, [fp]
 8008bdc:	e775      	b.n	8008aca <_dtoa_r+0x94a>
 8008bde:	4638      	mov	r0, r7
 8008be0:	e7ba      	b.n	8008b58 <_dtoa_r+0x9d8>
 8008be2:	2201      	movs	r2, #1
 8008be4:	e7e2      	b.n	8008bac <_dtoa_r+0xa2c>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	db04      	blt.n	8008bf6 <_dtoa_r+0xa76>
 8008bec:	9906      	ldr	r1, [sp, #24]
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	9904      	ldr	r1, [sp, #16]
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	d122      	bne.n	8008c3c <_dtoa_r+0xabc>
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	ddee      	ble.n	8008bd8 <_dtoa_r+0xa58>
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fcf7 	bl	80095f4 <__lshift>
 8008c06:	4631      	mov	r1, r6
 8008c08:	ee08 0a10 	vmov	s16, r0
 8008c0c:	f000 fd62 	bl	80096d4 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dc03      	bgt.n	8008c1c <_dtoa_r+0xa9c>
 8008c14:	d1e0      	bne.n	8008bd8 <_dtoa_r+0xa58>
 8008c16:	f01a 0f01 	tst.w	sl, #1
 8008c1a:	d0dd      	beq.n	8008bd8 <_dtoa_r+0xa58>
 8008c1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c20:	d1d7      	bne.n	8008bd2 <_dtoa_r+0xa52>
 8008c22:	2339      	movs	r3, #57	; 0x39
 8008c24:	f88b 3000 	strb.w	r3, [fp]
 8008c28:	462b      	mov	r3, r5
 8008c2a:	461d      	mov	r5, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c32:	2a39      	cmp	r2, #57	; 0x39
 8008c34:	d071      	beq.n	8008d1a <_dtoa_r+0xb9a>
 8008c36:	3201      	adds	r2, #1
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	e746      	b.n	8008aca <_dtoa_r+0x94a>
 8008c3c:	2a00      	cmp	r2, #0
 8008c3e:	dd07      	ble.n	8008c50 <_dtoa_r+0xad0>
 8008c40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c44:	d0ed      	beq.n	8008c22 <_dtoa_r+0xaa2>
 8008c46:	f10a 0301 	add.w	r3, sl, #1
 8008c4a:	f88b 3000 	strb.w	r3, [fp]
 8008c4e:	e73c      	b.n	8008aca <_dtoa_r+0x94a>
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c56:	4599      	cmp	r9, r3
 8008c58:	d047      	beq.n	8008cea <_dtoa_r+0xb6a>
 8008c5a:	ee18 1a10 	vmov	r1, s16
 8008c5e:	2300      	movs	r3, #0
 8008c60:	220a      	movs	r2, #10
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 fb16 	bl	8009294 <__multadd>
 8008c68:	45b8      	cmp	r8, r7
 8008c6a:	ee08 0a10 	vmov	s16, r0
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	f04f 020a 	mov.w	r2, #10
 8008c76:	4641      	mov	r1, r8
 8008c78:	4620      	mov	r0, r4
 8008c7a:	d106      	bne.n	8008c8a <_dtoa_r+0xb0a>
 8008c7c:	f000 fb0a 	bl	8009294 <__multadd>
 8008c80:	4680      	mov	r8, r0
 8008c82:	4607      	mov	r7, r0
 8008c84:	f109 0901 	add.w	r9, r9, #1
 8008c88:	e772      	b.n	8008b70 <_dtoa_r+0x9f0>
 8008c8a:	f000 fb03 	bl	8009294 <__multadd>
 8008c8e:	4639      	mov	r1, r7
 8008c90:	4680      	mov	r8, r0
 8008c92:	2300      	movs	r3, #0
 8008c94:	220a      	movs	r2, #10
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 fafc 	bl	8009294 <__multadd>
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	e7f1      	b.n	8008c84 <_dtoa_r+0xb04>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	9d01      	ldr	r5, [sp, #4]
 8008ca6:	ee18 0a10 	vmov	r0, s16
 8008caa:	4631      	mov	r1, r6
 8008cac:	f7ff f9da 	bl	8008064 <quorem>
 8008cb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cb4:	9b01      	ldr	r3, [sp, #4]
 8008cb6:	f805 ab01 	strb.w	sl, [r5], #1
 8008cba:	1aea      	subs	r2, r5, r3
 8008cbc:	9b02      	ldr	r3, [sp, #8]
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	dd09      	ble.n	8008cd6 <_dtoa_r+0xb56>
 8008cc2:	ee18 1a10 	vmov	r1, s16
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	220a      	movs	r2, #10
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fae2 	bl	8009294 <__multadd>
 8008cd0:	ee08 0a10 	vmov	s16, r0
 8008cd4:	e7e7      	b.n	8008ca6 <_dtoa_r+0xb26>
 8008cd6:	9b02      	ldr	r3, [sp, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bfc8      	it	gt
 8008cdc:	461d      	movgt	r5, r3
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	bfd8      	it	le
 8008ce2:	2501      	movle	r5, #1
 8008ce4:	441d      	add	r5, r3
 8008ce6:	f04f 0800 	mov.w	r8, #0
 8008cea:	ee18 1a10 	vmov	r1, s16
 8008cee:	2201      	movs	r2, #1
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f000 fc7f 	bl	80095f4 <__lshift>
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	ee08 0a10 	vmov	s16, r0
 8008cfc:	f000 fcea 	bl	80096d4 <__mcmp>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	dc91      	bgt.n	8008c28 <_dtoa_r+0xaa8>
 8008d04:	d102      	bne.n	8008d0c <_dtoa_r+0xb8c>
 8008d06:	f01a 0f01 	tst.w	sl, #1
 8008d0a:	d18d      	bne.n	8008c28 <_dtoa_r+0xaa8>
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	461d      	mov	r5, r3
 8008d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d14:	2a30      	cmp	r2, #48	; 0x30
 8008d16:	d0fa      	beq.n	8008d0e <_dtoa_r+0xb8e>
 8008d18:	e6d7      	b.n	8008aca <_dtoa_r+0x94a>
 8008d1a:	9a01      	ldr	r2, [sp, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d184      	bne.n	8008c2a <_dtoa_r+0xaaa>
 8008d20:	9b00      	ldr	r3, [sp, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2331      	movs	r3, #49	; 0x31
 8008d28:	7013      	strb	r3, [r2, #0]
 8008d2a:	e6ce      	b.n	8008aca <_dtoa_r+0x94a>
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <_dtoa_r+0xbd4>)
 8008d2e:	f7ff ba95 	b.w	800825c <_dtoa_r+0xdc>
 8008d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f47f aa6e 	bne.w	8008216 <_dtoa_r+0x96>
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <_dtoa_r+0xbd8>)
 8008d3c:	f7ff ba8e 	b.w	800825c <_dtoa_r+0xdc>
 8008d40:	9b02      	ldr	r3, [sp, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dcae      	bgt.n	8008ca4 <_dtoa_r+0xb24>
 8008d46:	9b06      	ldr	r3, [sp, #24]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	f73f aea8 	bgt.w	8008a9e <_dtoa_r+0x91e>
 8008d4e:	e7a9      	b.n	8008ca4 <_dtoa_r+0xb24>
 8008d50:	0800a253 	.word	0x0800a253
 8008d54:	0800a1b0 	.word	0x0800a1b0
 8008d58:	0800a1d4 	.word	0x0800a1d4

08008d5c <__sflush_r>:
 8008d5c:	898a      	ldrh	r2, [r1, #12]
 8008d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d62:	4605      	mov	r5, r0
 8008d64:	0710      	lsls	r0, r2, #28
 8008d66:	460c      	mov	r4, r1
 8008d68:	d458      	bmi.n	8008e1c <__sflush_r+0xc0>
 8008d6a:	684b      	ldr	r3, [r1, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	dc05      	bgt.n	8008d7c <__sflush_r+0x20>
 8008d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dc02      	bgt.n	8008d7c <__sflush_r+0x20>
 8008d76:	2000      	movs	r0, #0
 8008d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d7e:	2e00      	cmp	r6, #0
 8008d80:	d0f9      	beq.n	8008d76 <__sflush_r+0x1a>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d88:	682f      	ldr	r7, [r5, #0]
 8008d8a:	602b      	str	r3, [r5, #0]
 8008d8c:	d032      	beq.n	8008df4 <__sflush_r+0x98>
 8008d8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	075a      	lsls	r2, r3, #29
 8008d94:	d505      	bpl.n	8008da2 <__sflush_r+0x46>
 8008d96:	6863      	ldr	r3, [r4, #4]
 8008d98:	1ac0      	subs	r0, r0, r3
 8008d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d9c:	b10b      	cbz	r3, 8008da2 <__sflush_r+0x46>
 8008d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008da0:	1ac0      	subs	r0, r0, r3
 8008da2:	2300      	movs	r3, #0
 8008da4:	4602      	mov	r2, r0
 8008da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008da8:	6a21      	ldr	r1, [r4, #32]
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b0      	blx	r6
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	89a3      	ldrh	r3, [r4, #12]
 8008db2:	d106      	bne.n	8008dc2 <__sflush_r+0x66>
 8008db4:	6829      	ldr	r1, [r5, #0]
 8008db6:	291d      	cmp	r1, #29
 8008db8:	d82c      	bhi.n	8008e14 <__sflush_r+0xb8>
 8008dba:	4a2a      	ldr	r2, [pc, #168]	; (8008e64 <__sflush_r+0x108>)
 8008dbc:	40ca      	lsrs	r2, r1
 8008dbe:	07d6      	lsls	r6, r2, #31
 8008dc0:	d528      	bpl.n	8008e14 <__sflush_r+0xb8>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	6062      	str	r2, [r4, #4]
 8008dc6:	04d9      	lsls	r1, r3, #19
 8008dc8:	6922      	ldr	r2, [r4, #16]
 8008dca:	6022      	str	r2, [r4, #0]
 8008dcc:	d504      	bpl.n	8008dd8 <__sflush_r+0x7c>
 8008dce:	1c42      	adds	r2, r0, #1
 8008dd0:	d101      	bne.n	8008dd6 <__sflush_r+0x7a>
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	b903      	cbnz	r3, 8008dd8 <__sflush_r+0x7c>
 8008dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8008dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dda:	602f      	str	r7, [r5, #0]
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	d0ca      	beq.n	8008d76 <__sflush_r+0x1a>
 8008de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008de4:	4299      	cmp	r1, r3
 8008de6:	d002      	beq.n	8008dee <__sflush_r+0x92>
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 fd8b 	bl	8009904 <_free_r>
 8008dee:	2000      	movs	r0, #0
 8008df0:	6360      	str	r0, [r4, #52]	; 0x34
 8008df2:	e7c1      	b.n	8008d78 <__sflush_r+0x1c>
 8008df4:	6a21      	ldr	r1, [r4, #32]
 8008df6:	2301      	movs	r3, #1
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b0      	blx	r6
 8008dfc:	1c41      	adds	r1, r0, #1
 8008dfe:	d1c7      	bne.n	8008d90 <__sflush_r+0x34>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0c4      	beq.n	8008d90 <__sflush_r+0x34>
 8008e06:	2b1d      	cmp	r3, #29
 8008e08:	d001      	beq.n	8008e0e <__sflush_r+0xb2>
 8008e0a:	2b16      	cmp	r3, #22
 8008e0c:	d101      	bne.n	8008e12 <__sflush_r+0xb6>
 8008e0e:	602f      	str	r7, [r5, #0]
 8008e10:	e7b1      	b.n	8008d76 <__sflush_r+0x1a>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	e7ad      	b.n	8008d78 <__sflush_r+0x1c>
 8008e1c:	690f      	ldr	r7, [r1, #16]
 8008e1e:	2f00      	cmp	r7, #0
 8008e20:	d0a9      	beq.n	8008d76 <__sflush_r+0x1a>
 8008e22:	0793      	lsls	r3, r2, #30
 8008e24:	680e      	ldr	r6, [r1, #0]
 8008e26:	bf08      	it	eq
 8008e28:	694b      	ldreq	r3, [r1, #20]
 8008e2a:	600f      	str	r7, [r1, #0]
 8008e2c:	bf18      	it	ne
 8008e2e:	2300      	movne	r3, #0
 8008e30:	eba6 0807 	sub.w	r8, r6, r7
 8008e34:	608b      	str	r3, [r1, #8]
 8008e36:	f1b8 0f00 	cmp.w	r8, #0
 8008e3a:	dd9c      	ble.n	8008d76 <__sflush_r+0x1a>
 8008e3c:	6a21      	ldr	r1, [r4, #32]
 8008e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e40:	4643      	mov	r3, r8
 8008e42:	463a      	mov	r2, r7
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b0      	blx	r6
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	dc06      	bgt.n	8008e5a <__sflush_r+0xfe>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295
 8008e58:	e78e      	b.n	8008d78 <__sflush_r+0x1c>
 8008e5a:	4407      	add	r7, r0
 8008e5c:	eba8 0800 	sub.w	r8, r8, r0
 8008e60:	e7e9      	b.n	8008e36 <__sflush_r+0xda>
 8008e62:	bf00      	nop
 8008e64:	20400001 	.word	0x20400001

08008e68 <_fflush_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	690b      	ldr	r3, [r1, #16]
 8008e6c:	4605      	mov	r5, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	b913      	cbnz	r3, 8008e78 <_fflush_r+0x10>
 8008e72:	2500      	movs	r5, #0
 8008e74:	4628      	mov	r0, r5
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	b118      	cbz	r0, 8008e82 <_fflush_r+0x1a>
 8008e7a:	6983      	ldr	r3, [r0, #24]
 8008e7c:	b90b      	cbnz	r3, 8008e82 <_fflush_r+0x1a>
 8008e7e:	f000 f887 	bl	8008f90 <__sinit>
 8008e82:	4b14      	ldr	r3, [pc, #80]	; (8008ed4 <_fflush_r+0x6c>)
 8008e84:	429c      	cmp	r4, r3
 8008e86:	d11b      	bne.n	8008ec0 <_fflush_r+0x58>
 8008e88:	686c      	ldr	r4, [r5, #4]
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0ef      	beq.n	8008e72 <_fflush_r+0xa>
 8008e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e94:	07d0      	lsls	r0, r2, #31
 8008e96:	d404      	bmi.n	8008ea2 <_fflush_r+0x3a>
 8008e98:	0599      	lsls	r1, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_fflush_r+0x3a>
 8008e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e9e:	f000 f91a 	bl	80090d6 <__retarget_lock_acquire_recursive>
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	f7ff ff59 	bl	8008d5c <__sflush_r>
 8008eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eac:	07da      	lsls	r2, r3, #31
 8008eae:	4605      	mov	r5, r0
 8008eb0:	d4e0      	bmi.n	8008e74 <_fflush_r+0xc>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	059b      	lsls	r3, r3, #22
 8008eb6:	d4dd      	bmi.n	8008e74 <_fflush_r+0xc>
 8008eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eba:	f000 f90d 	bl	80090d8 <__retarget_lock_release_recursive>
 8008ebe:	e7d9      	b.n	8008e74 <_fflush_r+0xc>
 8008ec0:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <_fflush_r+0x70>)
 8008ec2:	429c      	cmp	r4, r3
 8008ec4:	d101      	bne.n	8008eca <_fflush_r+0x62>
 8008ec6:	68ac      	ldr	r4, [r5, #8]
 8008ec8:	e7df      	b.n	8008e8a <_fflush_r+0x22>
 8008eca:	4b04      	ldr	r3, [pc, #16]	; (8008edc <_fflush_r+0x74>)
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	bf08      	it	eq
 8008ed0:	68ec      	ldreq	r4, [r5, #12]
 8008ed2:	e7da      	b.n	8008e8a <_fflush_r+0x22>
 8008ed4:	0800a284 	.word	0x0800a284
 8008ed8:	0800a2a4 	.word	0x0800a2a4
 8008edc:	0800a264 	.word	0x0800a264

08008ee0 <std>:
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eee:	6083      	str	r3, [r0, #8]
 8008ef0:	8181      	strh	r1, [r0, #12]
 8008ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ef4:	81c2      	strh	r2, [r0, #14]
 8008ef6:	6183      	str	r3, [r0, #24]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	2208      	movs	r2, #8
 8008efc:	305c      	adds	r0, #92	; 0x5c
 8008efe:	f7fe fa0d 	bl	800731c <memset>
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <std+0x38>)
 8008f04:	6263      	str	r3, [r4, #36]	; 0x24
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <std+0x3c>)
 8008f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <std+0x40>)
 8008f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <std+0x44>)
 8008f10:	6224      	str	r4, [r4, #32]
 8008f12:	6323      	str	r3, [r4, #48]	; 0x30
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	bf00      	nop
 8008f18:	08009e29 	.word	0x08009e29
 8008f1c:	08009e4b 	.word	0x08009e4b
 8008f20:	08009e83 	.word	0x08009e83
 8008f24:	08009ea7 	.word	0x08009ea7

08008f28 <_cleanup_r>:
 8008f28:	4901      	ldr	r1, [pc, #4]	; (8008f30 <_cleanup_r+0x8>)
 8008f2a:	f000 b8af 	b.w	800908c <_fwalk_reent>
 8008f2e:	bf00      	nop
 8008f30:	08008e69 	.word	0x08008e69

08008f34 <__sfmoreglue>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	2268      	movs	r2, #104	; 0x68
 8008f38:	1e4d      	subs	r5, r1, #1
 8008f3a:	4355      	muls	r5, r2
 8008f3c:	460e      	mov	r6, r1
 8008f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f42:	f000 fd4b 	bl	80099dc <_malloc_r>
 8008f46:	4604      	mov	r4, r0
 8008f48:	b140      	cbz	r0, 8008f5c <__sfmoreglue+0x28>
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f50:	300c      	adds	r0, #12
 8008f52:	60a0      	str	r0, [r4, #8]
 8008f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f58:	f7fe f9e0 	bl	800731c <memset>
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}

08008f60 <__sfp_lock_acquire>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__sfp_lock_acquire+0x8>)
 8008f62:	f000 b8b8 	b.w	80090d6 <__retarget_lock_acquire_recursive>
 8008f66:	bf00      	nop
 8008f68:	200005e1 	.word	0x200005e1

08008f6c <__sfp_lock_release>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__sfp_lock_release+0x8>)
 8008f6e:	f000 b8b3 	b.w	80090d8 <__retarget_lock_release_recursive>
 8008f72:	bf00      	nop
 8008f74:	200005e1 	.word	0x200005e1

08008f78 <__sinit_lock_acquire>:
 8008f78:	4801      	ldr	r0, [pc, #4]	; (8008f80 <__sinit_lock_acquire+0x8>)
 8008f7a:	f000 b8ac 	b.w	80090d6 <__retarget_lock_acquire_recursive>
 8008f7e:	bf00      	nop
 8008f80:	200005e2 	.word	0x200005e2

08008f84 <__sinit_lock_release>:
 8008f84:	4801      	ldr	r0, [pc, #4]	; (8008f8c <__sinit_lock_release+0x8>)
 8008f86:	f000 b8a7 	b.w	80090d8 <__retarget_lock_release_recursive>
 8008f8a:	bf00      	nop
 8008f8c:	200005e2 	.word	0x200005e2

08008f90 <__sinit>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	4604      	mov	r4, r0
 8008f94:	f7ff fff0 	bl	8008f78 <__sinit_lock_acquire>
 8008f98:	69a3      	ldr	r3, [r4, #24]
 8008f9a:	b11b      	cbz	r3, 8008fa4 <__sinit+0x14>
 8008f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa0:	f7ff bff0 	b.w	8008f84 <__sinit_lock_release>
 8008fa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8008faa:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <__sinit+0x68>)
 8008fac:	4a13      	ldr	r2, [pc, #76]	; (8008ffc <__sinit+0x6c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	bf04      	itt	eq
 8008fb6:	2301      	moveq	r3, #1
 8008fb8:	61a3      	streq	r3, [r4, #24]
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 f820 	bl	8009000 <__sfp>
 8008fc0:	6060      	str	r0, [r4, #4]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f81c 	bl	8009000 <__sfp>
 8008fc8:	60a0      	str	r0, [r4, #8]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 f818 	bl	8009000 <__sfp>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	60e0      	str	r0, [r4, #12]
 8008fd4:	2104      	movs	r1, #4
 8008fd6:	6860      	ldr	r0, [r4, #4]
 8008fd8:	f7ff ff82 	bl	8008ee0 <std>
 8008fdc:	68a0      	ldr	r0, [r4, #8]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	2109      	movs	r1, #9
 8008fe2:	f7ff ff7d 	bl	8008ee0 <std>
 8008fe6:	68e0      	ldr	r0, [r4, #12]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	2112      	movs	r1, #18
 8008fec:	f7ff ff78 	bl	8008ee0 <std>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	61a3      	str	r3, [r4, #24]
 8008ff4:	e7d2      	b.n	8008f9c <__sinit+0xc>
 8008ff6:	bf00      	nop
 8008ff8:	0800a19c 	.word	0x0800a19c
 8008ffc:	08008f29 	.word	0x08008f29

08009000 <__sfp>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	4607      	mov	r7, r0
 8009004:	f7ff ffac 	bl	8008f60 <__sfp_lock_acquire>
 8009008:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <__sfp+0x84>)
 800900a:	681e      	ldr	r6, [r3, #0]
 800900c:	69b3      	ldr	r3, [r6, #24]
 800900e:	b913      	cbnz	r3, 8009016 <__sfp+0x16>
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff ffbd 	bl	8008f90 <__sinit>
 8009016:	3648      	adds	r6, #72	; 0x48
 8009018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800901c:	3b01      	subs	r3, #1
 800901e:	d503      	bpl.n	8009028 <__sfp+0x28>
 8009020:	6833      	ldr	r3, [r6, #0]
 8009022:	b30b      	cbz	r3, 8009068 <__sfp+0x68>
 8009024:	6836      	ldr	r6, [r6, #0]
 8009026:	e7f7      	b.n	8009018 <__sfp+0x18>
 8009028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800902c:	b9d5      	cbnz	r5, 8009064 <__sfp+0x64>
 800902e:	4b16      	ldr	r3, [pc, #88]	; (8009088 <__sfp+0x88>)
 8009030:	60e3      	str	r3, [r4, #12]
 8009032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009036:	6665      	str	r5, [r4, #100]	; 0x64
 8009038:	f000 f84c 	bl	80090d4 <__retarget_lock_init_recursive>
 800903c:	f7ff ff96 	bl	8008f6c <__sfp_lock_release>
 8009040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009048:	6025      	str	r5, [r4, #0]
 800904a:	61a5      	str	r5, [r4, #24]
 800904c:	2208      	movs	r2, #8
 800904e:	4629      	mov	r1, r5
 8009050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009054:	f7fe f962 	bl	800731c <memset>
 8009058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800905c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009060:	4620      	mov	r0, r4
 8009062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009064:	3468      	adds	r4, #104	; 0x68
 8009066:	e7d9      	b.n	800901c <__sfp+0x1c>
 8009068:	2104      	movs	r1, #4
 800906a:	4638      	mov	r0, r7
 800906c:	f7ff ff62 	bl	8008f34 <__sfmoreglue>
 8009070:	4604      	mov	r4, r0
 8009072:	6030      	str	r0, [r6, #0]
 8009074:	2800      	cmp	r0, #0
 8009076:	d1d5      	bne.n	8009024 <__sfp+0x24>
 8009078:	f7ff ff78 	bl	8008f6c <__sfp_lock_release>
 800907c:	230c      	movs	r3, #12
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	e7ee      	b.n	8009060 <__sfp+0x60>
 8009082:	bf00      	nop
 8009084:	0800a19c 	.word	0x0800a19c
 8009088:	ffff0001 	.word	0xffff0001

0800908c <_fwalk_reent>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	4606      	mov	r6, r0
 8009092:	4688      	mov	r8, r1
 8009094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009098:	2700      	movs	r7, #0
 800909a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800909e:	f1b9 0901 	subs.w	r9, r9, #1
 80090a2:	d505      	bpl.n	80090b0 <_fwalk_reent+0x24>
 80090a4:	6824      	ldr	r4, [r4, #0]
 80090a6:	2c00      	cmp	r4, #0
 80090a8:	d1f7      	bne.n	800909a <_fwalk_reent+0xe>
 80090aa:	4638      	mov	r0, r7
 80090ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b0:	89ab      	ldrh	r3, [r5, #12]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d907      	bls.n	80090c6 <_fwalk_reent+0x3a>
 80090b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090ba:	3301      	adds	r3, #1
 80090bc:	d003      	beq.n	80090c6 <_fwalk_reent+0x3a>
 80090be:	4629      	mov	r1, r5
 80090c0:	4630      	mov	r0, r6
 80090c2:	47c0      	blx	r8
 80090c4:	4307      	orrs	r7, r0
 80090c6:	3568      	adds	r5, #104	; 0x68
 80090c8:	e7e9      	b.n	800909e <_fwalk_reent+0x12>
	...

080090cc <_localeconv_r>:
 80090cc:	4800      	ldr	r0, [pc, #0]	; (80090d0 <_localeconv_r+0x4>)
 80090ce:	4770      	bx	lr
 80090d0:	20000160 	.word	0x20000160

080090d4 <__retarget_lock_init_recursive>:
 80090d4:	4770      	bx	lr

080090d6 <__retarget_lock_acquire_recursive>:
 80090d6:	4770      	bx	lr

080090d8 <__retarget_lock_release_recursive>:
 80090d8:	4770      	bx	lr

080090da <__swhatbuf_r>:
 80090da:	b570      	push	{r4, r5, r6, lr}
 80090dc:	460e      	mov	r6, r1
 80090de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e2:	2900      	cmp	r1, #0
 80090e4:	b096      	sub	sp, #88	; 0x58
 80090e6:	4614      	mov	r4, r2
 80090e8:	461d      	mov	r5, r3
 80090ea:	da08      	bge.n	80090fe <__swhatbuf_r+0x24>
 80090ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	602a      	str	r2, [r5, #0]
 80090f4:	061a      	lsls	r2, r3, #24
 80090f6:	d410      	bmi.n	800911a <__swhatbuf_r+0x40>
 80090f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090fc:	e00e      	b.n	800911c <__swhatbuf_r+0x42>
 80090fe:	466a      	mov	r2, sp
 8009100:	f000 ff28 	bl	8009f54 <_fstat_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	dbf1      	blt.n	80090ec <__swhatbuf_r+0x12>
 8009108:	9a01      	ldr	r2, [sp, #4]
 800910a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800910e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009112:	425a      	negs	r2, r3
 8009114:	415a      	adcs	r2, r3
 8009116:	602a      	str	r2, [r5, #0]
 8009118:	e7ee      	b.n	80090f8 <__swhatbuf_r+0x1e>
 800911a:	2340      	movs	r3, #64	; 0x40
 800911c:	2000      	movs	r0, #0
 800911e:	6023      	str	r3, [r4, #0]
 8009120:	b016      	add	sp, #88	; 0x58
 8009122:	bd70      	pop	{r4, r5, r6, pc}

08009124 <__smakebuf_r>:
 8009124:	898b      	ldrh	r3, [r1, #12]
 8009126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009128:	079d      	lsls	r5, r3, #30
 800912a:	4606      	mov	r6, r0
 800912c:	460c      	mov	r4, r1
 800912e:	d507      	bpl.n	8009140 <__smakebuf_r+0x1c>
 8009130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	2301      	movs	r3, #1
 800913a:	6163      	str	r3, [r4, #20]
 800913c:	b002      	add	sp, #8
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	ab01      	add	r3, sp, #4
 8009142:	466a      	mov	r2, sp
 8009144:	f7ff ffc9 	bl	80090da <__swhatbuf_r>
 8009148:	9900      	ldr	r1, [sp, #0]
 800914a:	4605      	mov	r5, r0
 800914c:	4630      	mov	r0, r6
 800914e:	f000 fc45 	bl	80099dc <_malloc_r>
 8009152:	b948      	cbnz	r0, 8009168 <__smakebuf_r+0x44>
 8009154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009158:	059a      	lsls	r2, r3, #22
 800915a:	d4ef      	bmi.n	800913c <__smakebuf_r+0x18>
 800915c:	f023 0303 	bic.w	r3, r3, #3
 8009160:	f043 0302 	orr.w	r3, r3, #2
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	e7e3      	b.n	8009130 <__smakebuf_r+0xc>
 8009168:	4b0d      	ldr	r3, [pc, #52]	; (80091a0 <__smakebuf_r+0x7c>)
 800916a:	62b3      	str	r3, [r6, #40]	; 0x28
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	6020      	str	r0, [r4, #0]
 8009170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	6163      	str	r3, [r4, #20]
 800917a:	9b01      	ldr	r3, [sp, #4]
 800917c:	6120      	str	r0, [r4, #16]
 800917e:	b15b      	cbz	r3, 8009198 <__smakebuf_r+0x74>
 8009180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009184:	4630      	mov	r0, r6
 8009186:	f000 fef7 	bl	8009f78 <_isatty_r>
 800918a:	b128      	cbz	r0, 8009198 <__smakebuf_r+0x74>
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	f023 0303 	bic.w	r3, r3, #3
 8009192:	f043 0301 	orr.w	r3, r3, #1
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	89a0      	ldrh	r0, [r4, #12]
 800919a:	4305      	orrs	r5, r0
 800919c:	81a5      	strh	r5, [r4, #12]
 800919e:	e7cd      	b.n	800913c <__smakebuf_r+0x18>
 80091a0:	08008f29 	.word	0x08008f29

080091a4 <malloc>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <malloc+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f000 bc17 	b.w	80099dc <_malloc_r>
 80091ae:	bf00      	nop
 80091b0:	2000000c 	.word	0x2000000c

080091b4 <memcpy>:
 80091b4:	440a      	add	r2, r1
 80091b6:	4291      	cmp	r1, r2
 80091b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80091bc:	d100      	bne.n	80091c0 <memcpy+0xc>
 80091be:	4770      	bx	lr
 80091c0:	b510      	push	{r4, lr}
 80091c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ca:	4291      	cmp	r1, r2
 80091cc:	d1f9      	bne.n	80091c2 <memcpy+0xe>
 80091ce:	bd10      	pop	{r4, pc}

080091d0 <_Balloc>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091d4:	4604      	mov	r4, r0
 80091d6:	460d      	mov	r5, r1
 80091d8:	b976      	cbnz	r6, 80091f8 <_Balloc+0x28>
 80091da:	2010      	movs	r0, #16
 80091dc:	f7ff ffe2 	bl	80091a4 <malloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6260      	str	r0, [r4, #36]	; 0x24
 80091e4:	b920      	cbnz	r0, 80091f0 <_Balloc+0x20>
 80091e6:	4b18      	ldr	r3, [pc, #96]	; (8009248 <_Balloc+0x78>)
 80091e8:	4818      	ldr	r0, [pc, #96]	; (800924c <_Balloc+0x7c>)
 80091ea:	2166      	movs	r1, #102	; 0x66
 80091ec:	f000 fe72 	bl	8009ed4 <__assert_func>
 80091f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091f4:	6006      	str	r6, [r0, #0]
 80091f6:	60c6      	str	r6, [r0, #12]
 80091f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091fa:	68f3      	ldr	r3, [r6, #12]
 80091fc:	b183      	cbz	r3, 8009220 <_Balloc+0x50>
 80091fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009206:	b9b8      	cbnz	r0, 8009238 <_Balloc+0x68>
 8009208:	2101      	movs	r1, #1
 800920a:	fa01 f605 	lsl.w	r6, r1, r5
 800920e:	1d72      	adds	r2, r6, #5
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fb60 	bl	80098d8 <_calloc_r>
 8009218:	b160      	cbz	r0, 8009234 <_Balloc+0x64>
 800921a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800921e:	e00e      	b.n	800923e <_Balloc+0x6e>
 8009220:	2221      	movs	r2, #33	; 0x21
 8009222:	2104      	movs	r1, #4
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fb57 	bl	80098d8 <_calloc_r>
 800922a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800922c:	60f0      	str	r0, [r6, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e4      	bne.n	80091fe <_Balloc+0x2e>
 8009234:	2000      	movs	r0, #0
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	6802      	ldr	r2, [r0, #0]
 800923a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800923e:	2300      	movs	r3, #0
 8009240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009244:	e7f7      	b.n	8009236 <_Balloc+0x66>
 8009246:	bf00      	nop
 8009248:	0800a1e1 	.word	0x0800a1e1
 800924c:	0800a2c4 	.word	0x0800a2c4

08009250 <_Bfree>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b976      	cbnz	r6, 8009278 <_Bfree+0x28>
 800925a:	2010      	movs	r0, #16
 800925c:	f7ff ffa2 	bl	80091a4 <malloc>
 8009260:	4602      	mov	r2, r0
 8009262:	6268      	str	r0, [r5, #36]	; 0x24
 8009264:	b920      	cbnz	r0, 8009270 <_Bfree+0x20>
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <_Bfree+0x3c>)
 8009268:	4809      	ldr	r0, [pc, #36]	; (8009290 <_Bfree+0x40>)
 800926a:	218a      	movs	r1, #138	; 0x8a
 800926c:	f000 fe32 	bl	8009ed4 <__assert_func>
 8009270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009274:	6006      	str	r6, [r0, #0]
 8009276:	60c6      	str	r6, [r0, #12]
 8009278:	b13c      	cbz	r4, 800928a <_Bfree+0x3a>
 800927a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800927c:	6862      	ldr	r2, [r4, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009284:	6021      	str	r1, [r4, #0]
 8009286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	0800a1e1 	.word	0x0800a1e1
 8009290:	0800a2c4 	.word	0x0800a2c4

08009294 <__multadd>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	690d      	ldr	r5, [r1, #16]
 800929a:	4607      	mov	r7, r0
 800929c:	460c      	mov	r4, r1
 800929e:	461e      	mov	r6, r3
 80092a0:	f101 0c14 	add.w	ip, r1, #20
 80092a4:	2000      	movs	r0, #0
 80092a6:	f8dc 3000 	ldr.w	r3, [ip]
 80092aa:	b299      	uxth	r1, r3
 80092ac:	fb02 6101 	mla	r1, r2, r1, r6
 80092b0:	0c1e      	lsrs	r6, r3, #16
 80092b2:	0c0b      	lsrs	r3, r1, #16
 80092b4:	fb02 3306 	mla	r3, r2, r6, r3
 80092b8:	b289      	uxth	r1, r1
 80092ba:	3001      	adds	r0, #1
 80092bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092c0:	4285      	cmp	r5, r0
 80092c2:	f84c 1b04 	str.w	r1, [ip], #4
 80092c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092ca:	dcec      	bgt.n	80092a6 <__multadd+0x12>
 80092cc:	b30e      	cbz	r6, 8009312 <__multadd+0x7e>
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc19      	bgt.n	8009308 <__multadd+0x74>
 80092d4:	6861      	ldr	r1, [r4, #4]
 80092d6:	4638      	mov	r0, r7
 80092d8:	3101      	adds	r1, #1
 80092da:	f7ff ff79 	bl	80091d0 <_Balloc>
 80092de:	4680      	mov	r8, r0
 80092e0:	b928      	cbnz	r0, 80092ee <__multadd+0x5a>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <__multadd+0x84>)
 80092e6:	480d      	ldr	r0, [pc, #52]	; (800931c <__multadd+0x88>)
 80092e8:	21b5      	movs	r1, #181	; 0xb5
 80092ea:	f000 fdf3 	bl	8009ed4 <__assert_func>
 80092ee:	6922      	ldr	r2, [r4, #16]
 80092f0:	3202      	adds	r2, #2
 80092f2:	f104 010c 	add.w	r1, r4, #12
 80092f6:	0092      	lsls	r2, r2, #2
 80092f8:	300c      	adds	r0, #12
 80092fa:	f7ff ff5b 	bl	80091b4 <memcpy>
 80092fe:	4621      	mov	r1, r4
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff ffa5 	bl	8009250 <_Bfree>
 8009306:	4644      	mov	r4, r8
 8009308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800930c:	3501      	adds	r5, #1
 800930e:	615e      	str	r6, [r3, #20]
 8009310:	6125      	str	r5, [r4, #16]
 8009312:	4620      	mov	r0, r4
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	0800a253 	.word	0x0800a253
 800931c:	0800a2c4 	.word	0x0800a2c4

08009320 <__hi0bits>:
 8009320:	0c03      	lsrs	r3, r0, #16
 8009322:	041b      	lsls	r3, r3, #16
 8009324:	b9d3      	cbnz	r3, 800935c <__hi0bits+0x3c>
 8009326:	0400      	lsls	r0, r0, #16
 8009328:	2310      	movs	r3, #16
 800932a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800932e:	bf04      	itt	eq
 8009330:	0200      	lsleq	r0, r0, #8
 8009332:	3308      	addeq	r3, #8
 8009334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009338:	bf04      	itt	eq
 800933a:	0100      	lsleq	r0, r0, #4
 800933c:	3304      	addeq	r3, #4
 800933e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009342:	bf04      	itt	eq
 8009344:	0080      	lsleq	r0, r0, #2
 8009346:	3302      	addeq	r3, #2
 8009348:	2800      	cmp	r0, #0
 800934a:	db05      	blt.n	8009358 <__hi0bits+0x38>
 800934c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009350:	f103 0301 	add.w	r3, r3, #1
 8009354:	bf08      	it	eq
 8009356:	2320      	moveq	r3, #32
 8009358:	4618      	mov	r0, r3
 800935a:	4770      	bx	lr
 800935c:	2300      	movs	r3, #0
 800935e:	e7e4      	b.n	800932a <__hi0bits+0xa>

08009360 <__lo0bits>:
 8009360:	6803      	ldr	r3, [r0, #0]
 8009362:	f013 0207 	ands.w	r2, r3, #7
 8009366:	4601      	mov	r1, r0
 8009368:	d00b      	beq.n	8009382 <__lo0bits+0x22>
 800936a:	07da      	lsls	r2, r3, #31
 800936c:	d423      	bmi.n	80093b6 <__lo0bits+0x56>
 800936e:	0798      	lsls	r0, r3, #30
 8009370:	bf49      	itett	mi
 8009372:	085b      	lsrmi	r3, r3, #1
 8009374:	089b      	lsrpl	r3, r3, #2
 8009376:	2001      	movmi	r0, #1
 8009378:	600b      	strmi	r3, [r1, #0]
 800937a:	bf5c      	itt	pl
 800937c:	600b      	strpl	r3, [r1, #0]
 800937e:	2002      	movpl	r0, #2
 8009380:	4770      	bx	lr
 8009382:	b298      	uxth	r0, r3
 8009384:	b9a8      	cbnz	r0, 80093b2 <__lo0bits+0x52>
 8009386:	0c1b      	lsrs	r3, r3, #16
 8009388:	2010      	movs	r0, #16
 800938a:	b2da      	uxtb	r2, r3
 800938c:	b90a      	cbnz	r2, 8009392 <__lo0bits+0x32>
 800938e:	3008      	adds	r0, #8
 8009390:	0a1b      	lsrs	r3, r3, #8
 8009392:	071a      	lsls	r2, r3, #28
 8009394:	bf04      	itt	eq
 8009396:	091b      	lsreq	r3, r3, #4
 8009398:	3004      	addeq	r0, #4
 800939a:	079a      	lsls	r2, r3, #30
 800939c:	bf04      	itt	eq
 800939e:	089b      	lsreq	r3, r3, #2
 80093a0:	3002      	addeq	r0, #2
 80093a2:	07da      	lsls	r2, r3, #31
 80093a4:	d403      	bmi.n	80093ae <__lo0bits+0x4e>
 80093a6:	085b      	lsrs	r3, r3, #1
 80093a8:	f100 0001 	add.w	r0, r0, #1
 80093ac:	d005      	beq.n	80093ba <__lo0bits+0x5a>
 80093ae:	600b      	str	r3, [r1, #0]
 80093b0:	4770      	bx	lr
 80093b2:	4610      	mov	r0, r2
 80093b4:	e7e9      	b.n	800938a <__lo0bits+0x2a>
 80093b6:	2000      	movs	r0, #0
 80093b8:	4770      	bx	lr
 80093ba:	2020      	movs	r0, #32
 80093bc:	4770      	bx	lr
	...

080093c0 <__i2b>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	460c      	mov	r4, r1
 80093c4:	2101      	movs	r1, #1
 80093c6:	f7ff ff03 	bl	80091d0 <_Balloc>
 80093ca:	4602      	mov	r2, r0
 80093cc:	b928      	cbnz	r0, 80093da <__i2b+0x1a>
 80093ce:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <__i2b+0x24>)
 80093d0:	4805      	ldr	r0, [pc, #20]	; (80093e8 <__i2b+0x28>)
 80093d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093d6:	f000 fd7d 	bl	8009ed4 <__assert_func>
 80093da:	2301      	movs	r3, #1
 80093dc:	6144      	str	r4, [r0, #20]
 80093de:	6103      	str	r3, [r0, #16]
 80093e0:	bd10      	pop	{r4, pc}
 80093e2:	bf00      	nop
 80093e4:	0800a253 	.word	0x0800a253
 80093e8:	0800a2c4 	.word	0x0800a2c4

080093ec <__multiply>:
 80093ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	4691      	mov	r9, r2
 80093f2:	690a      	ldr	r2, [r1, #16]
 80093f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	bfb8      	it	lt
 80093fc:	460b      	movlt	r3, r1
 80093fe:	460c      	mov	r4, r1
 8009400:	bfbc      	itt	lt
 8009402:	464c      	movlt	r4, r9
 8009404:	4699      	movlt	r9, r3
 8009406:	6927      	ldr	r7, [r4, #16]
 8009408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	6861      	ldr	r1, [r4, #4]
 8009410:	eb07 060a 	add.w	r6, r7, sl
 8009414:	42b3      	cmp	r3, r6
 8009416:	b085      	sub	sp, #20
 8009418:	bfb8      	it	lt
 800941a:	3101      	addlt	r1, #1
 800941c:	f7ff fed8 	bl	80091d0 <_Balloc>
 8009420:	b930      	cbnz	r0, 8009430 <__multiply+0x44>
 8009422:	4602      	mov	r2, r0
 8009424:	4b44      	ldr	r3, [pc, #272]	; (8009538 <__multiply+0x14c>)
 8009426:	4845      	ldr	r0, [pc, #276]	; (800953c <__multiply+0x150>)
 8009428:	f240 115d 	movw	r1, #349	; 0x15d
 800942c:	f000 fd52 	bl	8009ed4 <__assert_func>
 8009430:	f100 0514 	add.w	r5, r0, #20
 8009434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009438:	462b      	mov	r3, r5
 800943a:	2200      	movs	r2, #0
 800943c:	4543      	cmp	r3, r8
 800943e:	d321      	bcc.n	8009484 <__multiply+0x98>
 8009440:	f104 0314 	add.w	r3, r4, #20
 8009444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009448:	f109 0314 	add.w	r3, r9, #20
 800944c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009450:	9202      	str	r2, [sp, #8]
 8009452:	1b3a      	subs	r2, r7, r4
 8009454:	3a15      	subs	r2, #21
 8009456:	f022 0203 	bic.w	r2, r2, #3
 800945a:	3204      	adds	r2, #4
 800945c:	f104 0115 	add.w	r1, r4, #21
 8009460:	428f      	cmp	r7, r1
 8009462:	bf38      	it	cc
 8009464:	2204      	movcc	r2, #4
 8009466:	9201      	str	r2, [sp, #4]
 8009468:	9a02      	ldr	r2, [sp, #8]
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	429a      	cmp	r2, r3
 800946e:	d80c      	bhi.n	800948a <__multiply+0x9e>
 8009470:	2e00      	cmp	r6, #0
 8009472:	dd03      	ble.n	800947c <__multiply+0x90>
 8009474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009478:	2b00      	cmp	r3, #0
 800947a:	d05a      	beq.n	8009532 <__multiply+0x146>
 800947c:	6106      	str	r6, [r0, #16]
 800947e:	b005      	add	sp, #20
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	f843 2b04 	str.w	r2, [r3], #4
 8009488:	e7d8      	b.n	800943c <__multiply+0x50>
 800948a:	f8b3 a000 	ldrh.w	sl, [r3]
 800948e:	f1ba 0f00 	cmp.w	sl, #0
 8009492:	d024      	beq.n	80094de <__multiply+0xf2>
 8009494:	f104 0e14 	add.w	lr, r4, #20
 8009498:	46a9      	mov	r9, r5
 800949a:	f04f 0c00 	mov.w	ip, #0
 800949e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094a2:	f8d9 1000 	ldr.w	r1, [r9]
 80094a6:	fa1f fb82 	uxth.w	fp, r2
 80094aa:	b289      	uxth	r1, r1
 80094ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80094b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094b4:	f8d9 2000 	ldr.w	r2, [r9]
 80094b8:	4461      	add	r1, ip
 80094ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094be:	fb0a c20b 	mla	r2, sl, fp, ip
 80094c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094c6:	b289      	uxth	r1, r1
 80094c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094cc:	4577      	cmp	r7, lr
 80094ce:	f849 1b04 	str.w	r1, [r9], #4
 80094d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094d6:	d8e2      	bhi.n	800949e <__multiply+0xb2>
 80094d8:	9a01      	ldr	r2, [sp, #4]
 80094da:	f845 c002 	str.w	ip, [r5, r2]
 80094de:	9a03      	ldr	r2, [sp, #12]
 80094e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094e4:	3304      	adds	r3, #4
 80094e6:	f1b9 0f00 	cmp.w	r9, #0
 80094ea:	d020      	beq.n	800952e <__multiply+0x142>
 80094ec:	6829      	ldr	r1, [r5, #0]
 80094ee:	f104 0c14 	add.w	ip, r4, #20
 80094f2:	46ae      	mov	lr, r5
 80094f4:	f04f 0a00 	mov.w	sl, #0
 80094f8:	f8bc b000 	ldrh.w	fp, [ip]
 80094fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009500:	fb09 220b 	mla	r2, r9, fp, r2
 8009504:	4492      	add	sl, r2
 8009506:	b289      	uxth	r1, r1
 8009508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800950c:	f84e 1b04 	str.w	r1, [lr], #4
 8009510:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009514:	f8be 1000 	ldrh.w	r1, [lr]
 8009518:	0c12      	lsrs	r2, r2, #16
 800951a:	fb09 1102 	mla	r1, r9, r2, r1
 800951e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009522:	4567      	cmp	r7, ip
 8009524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009528:	d8e6      	bhi.n	80094f8 <__multiply+0x10c>
 800952a:	9a01      	ldr	r2, [sp, #4]
 800952c:	50a9      	str	r1, [r5, r2]
 800952e:	3504      	adds	r5, #4
 8009530:	e79a      	b.n	8009468 <__multiply+0x7c>
 8009532:	3e01      	subs	r6, #1
 8009534:	e79c      	b.n	8009470 <__multiply+0x84>
 8009536:	bf00      	nop
 8009538:	0800a253 	.word	0x0800a253
 800953c:	0800a2c4 	.word	0x0800a2c4

08009540 <__pow5mult>:
 8009540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009544:	4615      	mov	r5, r2
 8009546:	f012 0203 	ands.w	r2, r2, #3
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	d007      	beq.n	8009560 <__pow5mult+0x20>
 8009550:	4c25      	ldr	r4, [pc, #148]	; (80095e8 <__pow5mult+0xa8>)
 8009552:	3a01      	subs	r2, #1
 8009554:	2300      	movs	r3, #0
 8009556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800955a:	f7ff fe9b 	bl	8009294 <__multadd>
 800955e:	4607      	mov	r7, r0
 8009560:	10ad      	asrs	r5, r5, #2
 8009562:	d03d      	beq.n	80095e0 <__pow5mult+0xa0>
 8009564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009566:	b97c      	cbnz	r4, 8009588 <__pow5mult+0x48>
 8009568:	2010      	movs	r0, #16
 800956a:	f7ff fe1b 	bl	80091a4 <malloc>
 800956e:	4602      	mov	r2, r0
 8009570:	6270      	str	r0, [r6, #36]	; 0x24
 8009572:	b928      	cbnz	r0, 8009580 <__pow5mult+0x40>
 8009574:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <__pow5mult+0xac>)
 8009576:	481e      	ldr	r0, [pc, #120]	; (80095f0 <__pow5mult+0xb0>)
 8009578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800957c:	f000 fcaa 	bl	8009ed4 <__assert_func>
 8009580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009584:	6004      	str	r4, [r0, #0]
 8009586:	60c4      	str	r4, [r0, #12]
 8009588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800958c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009590:	b94c      	cbnz	r4, 80095a6 <__pow5mult+0x66>
 8009592:	f240 2171 	movw	r1, #625	; 0x271
 8009596:	4630      	mov	r0, r6
 8009598:	f7ff ff12 	bl	80093c0 <__i2b>
 800959c:	2300      	movs	r3, #0
 800959e:	f8c8 0008 	str.w	r0, [r8, #8]
 80095a2:	4604      	mov	r4, r0
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	f04f 0900 	mov.w	r9, #0
 80095aa:	07eb      	lsls	r3, r5, #31
 80095ac:	d50a      	bpl.n	80095c4 <__pow5mult+0x84>
 80095ae:	4639      	mov	r1, r7
 80095b0:	4622      	mov	r2, r4
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ff1a 	bl	80093ec <__multiply>
 80095b8:	4639      	mov	r1, r7
 80095ba:	4680      	mov	r8, r0
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff fe47 	bl	8009250 <_Bfree>
 80095c2:	4647      	mov	r7, r8
 80095c4:	106d      	asrs	r5, r5, #1
 80095c6:	d00b      	beq.n	80095e0 <__pow5mult+0xa0>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	b938      	cbnz	r0, 80095dc <__pow5mult+0x9c>
 80095cc:	4622      	mov	r2, r4
 80095ce:	4621      	mov	r1, r4
 80095d0:	4630      	mov	r0, r6
 80095d2:	f7ff ff0b 	bl	80093ec <__multiply>
 80095d6:	6020      	str	r0, [r4, #0]
 80095d8:	f8c0 9000 	str.w	r9, [r0]
 80095dc:	4604      	mov	r4, r0
 80095de:	e7e4      	b.n	80095aa <__pow5mult+0x6a>
 80095e0:	4638      	mov	r0, r7
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	bf00      	nop
 80095e8:	0800a410 	.word	0x0800a410
 80095ec:	0800a1e1 	.word	0x0800a1e1
 80095f0:	0800a2c4 	.word	0x0800a2c4

080095f4 <__lshift>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	460c      	mov	r4, r1
 80095fa:	6849      	ldr	r1, [r1, #4]
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	4607      	mov	r7, r0
 8009606:	4691      	mov	r9, r2
 8009608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800960c:	f108 0601 	add.w	r6, r8, #1
 8009610:	42b3      	cmp	r3, r6
 8009612:	db0b      	blt.n	800962c <__lshift+0x38>
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff fddb 	bl	80091d0 <_Balloc>
 800961a:	4605      	mov	r5, r0
 800961c:	b948      	cbnz	r0, 8009632 <__lshift+0x3e>
 800961e:	4602      	mov	r2, r0
 8009620:	4b2a      	ldr	r3, [pc, #168]	; (80096cc <__lshift+0xd8>)
 8009622:	482b      	ldr	r0, [pc, #172]	; (80096d0 <__lshift+0xdc>)
 8009624:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009628:	f000 fc54 	bl	8009ed4 <__assert_func>
 800962c:	3101      	adds	r1, #1
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	e7ee      	b.n	8009610 <__lshift+0x1c>
 8009632:	2300      	movs	r3, #0
 8009634:	f100 0114 	add.w	r1, r0, #20
 8009638:	f100 0210 	add.w	r2, r0, #16
 800963c:	4618      	mov	r0, r3
 800963e:	4553      	cmp	r3, sl
 8009640:	db37      	blt.n	80096b2 <__lshift+0xbe>
 8009642:	6920      	ldr	r0, [r4, #16]
 8009644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009648:	f104 0314 	add.w	r3, r4, #20
 800964c:	f019 091f 	ands.w	r9, r9, #31
 8009650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009658:	d02f      	beq.n	80096ba <__lshift+0xc6>
 800965a:	f1c9 0e20 	rsb	lr, r9, #32
 800965e:	468a      	mov	sl, r1
 8009660:	f04f 0c00 	mov.w	ip, #0
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	fa02 f209 	lsl.w	r2, r2, r9
 800966a:	ea42 020c 	orr.w	r2, r2, ip
 800966e:	f84a 2b04 	str.w	r2, [sl], #4
 8009672:	f853 2b04 	ldr.w	r2, [r3], #4
 8009676:	4298      	cmp	r0, r3
 8009678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800967c:	d8f2      	bhi.n	8009664 <__lshift+0x70>
 800967e:	1b03      	subs	r3, r0, r4
 8009680:	3b15      	subs	r3, #21
 8009682:	f023 0303 	bic.w	r3, r3, #3
 8009686:	3304      	adds	r3, #4
 8009688:	f104 0215 	add.w	r2, r4, #21
 800968c:	4290      	cmp	r0, r2
 800968e:	bf38      	it	cc
 8009690:	2304      	movcc	r3, #4
 8009692:	f841 c003 	str.w	ip, [r1, r3]
 8009696:	f1bc 0f00 	cmp.w	ip, #0
 800969a:	d001      	beq.n	80096a0 <__lshift+0xac>
 800969c:	f108 0602 	add.w	r6, r8, #2
 80096a0:	3e01      	subs	r6, #1
 80096a2:	4638      	mov	r0, r7
 80096a4:	612e      	str	r6, [r5, #16]
 80096a6:	4621      	mov	r1, r4
 80096a8:	f7ff fdd2 	bl	8009250 <_Bfree>
 80096ac:	4628      	mov	r0, r5
 80096ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096b6:	3301      	adds	r3, #1
 80096b8:	e7c1      	b.n	800963e <__lshift+0x4a>
 80096ba:	3904      	subs	r1, #4
 80096bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096c4:	4298      	cmp	r0, r3
 80096c6:	d8f9      	bhi.n	80096bc <__lshift+0xc8>
 80096c8:	e7ea      	b.n	80096a0 <__lshift+0xac>
 80096ca:	bf00      	nop
 80096cc:	0800a253 	.word	0x0800a253
 80096d0:	0800a2c4 	.word	0x0800a2c4

080096d4 <__mcmp>:
 80096d4:	b530      	push	{r4, r5, lr}
 80096d6:	6902      	ldr	r2, [r0, #16]
 80096d8:	690c      	ldr	r4, [r1, #16]
 80096da:	1b12      	subs	r2, r2, r4
 80096dc:	d10e      	bne.n	80096fc <__mcmp+0x28>
 80096de:	f100 0314 	add.w	r3, r0, #20
 80096e2:	3114      	adds	r1, #20
 80096e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096f4:	42a5      	cmp	r5, r4
 80096f6:	d003      	beq.n	8009700 <__mcmp+0x2c>
 80096f8:	d305      	bcc.n	8009706 <__mcmp+0x32>
 80096fa:	2201      	movs	r2, #1
 80096fc:	4610      	mov	r0, r2
 80096fe:	bd30      	pop	{r4, r5, pc}
 8009700:	4283      	cmp	r3, r0
 8009702:	d3f3      	bcc.n	80096ec <__mcmp+0x18>
 8009704:	e7fa      	b.n	80096fc <__mcmp+0x28>
 8009706:	f04f 32ff 	mov.w	r2, #4294967295
 800970a:	e7f7      	b.n	80096fc <__mcmp+0x28>

0800970c <__mdiff>:
 800970c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	4606      	mov	r6, r0
 8009714:	4611      	mov	r1, r2
 8009716:	4620      	mov	r0, r4
 8009718:	4690      	mov	r8, r2
 800971a:	f7ff ffdb 	bl	80096d4 <__mcmp>
 800971e:	1e05      	subs	r5, r0, #0
 8009720:	d110      	bne.n	8009744 <__mdiff+0x38>
 8009722:	4629      	mov	r1, r5
 8009724:	4630      	mov	r0, r6
 8009726:	f7ff fd53 	bl	80091d0 <_Balloc>
 800972a:	b930      	cbnz	r0, 800973a <__mdiff+0x2e>
 800972c:	4b3a      	ldr	r3, [pc, #232]	; (8009818 <__mdiff+0x10c>)
 800972e:	4602      	mov	r2, r0
 8009730:	f240 2132 	movw	r1, #562	; 0x232
 8009734:	4839      	ldr	r0, [pc, #228]	; (800981c <__mdiff+0x110>)
 8009736:	f000 fbcd 	bl	8009ed4 <__assert_func>
 800973a:	2301      	movs	r3, #1
 800973c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009744:	bfa4      	itt	ge
 8009746:	4643      	movge	r3, r8
 8009748:	46a0      	movge	r8, r4
 800974a:	4630      	mov	r0, r6
 800974c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009750:	bfa6      	itte	ge
 8009752:	461c      	movge	r4, r3
 8009754:	2500      	movge	r5, #0
 8009756:	2501      	movlt	r5, #1
 8009758:	f7ff fd3a 	bl	80091d0 <_Balloc>
 800975c:	b920      	cbnz	r0, 8009768 <__mdiff+0x5c>
 800975e:	4b2e      	ldr	r3, [pc, #184]	; (8009818 <__mdiff+0x10c>)
 8009760:	4602      	mov	r2, r0
 8009762:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009766:	e7e5      	b.n	8009734 <__mdiff+0x28>
 8009768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800976c:	6926      	ldr	r6, [r4, #16]
 800976e:	60c5      	str	r5, [r0, #12]
 8009770:	f104 0914 	add.w	r9, r4, #20
 8009774:	f108 0514 	add.w	r5, r8, #20
 8009778:	f100 0e14 	add.w	lr, r0, #20
 800977c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009784:	f108 0210 	add.w	r2, r8, #16
 8009788:	46f2      	mov	sl, lr
 800978a:	2100      	movs	r1, #0
 800978c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009794:	fa1f f883 	uxth.w	r8, r3
 8009798:	fa11 f18b 	uxtah	r1, r1, fp
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	eba1 0808 	sub.w	r8, r1, r8
 80097a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80097aa:	fa1f f888 	uxth.w	r8, r8
 80097ae:	1419      	asrs	r1, r3, #16
 80097b0:	454e      	cmp	r6, r9
 80097b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097b6:	f84a 3b04 	str.w	r3, [sl], #4
 80097ba:	d8e7      	bhi.n	800978c <__mdiff+0x80>
 80097bc:	1b33      	subs	r3, r6, r4
 80097be:	3b15      	subs	r3, #21
 80097c0:	f023 0303 	bic.w	r3, r3, #3
 80097c4:	3304      	adds	r3, #4
 80097c6:	3415      	adds	r4, #21
 80097c8:	42a6      	cmp	r6, r4
 80097ca:	bf38      	it	cc
 80097cc:	2304      	movcc	r3, #4
 80097ce:	441d      	add	r5, r3
 80097d0:	4473      	add	r3, lr
 80097d2:	469e      	mov	lr, r3
 80097d4:	462e      	mov	r6, r5
 80097d6:	4566      	cmp	r6, ip
 80097d8:	d30e      	bcc.n	80097f8 <__mdiff+0xec>
 80097da:	f10c 0203 	add.w	r2, ip, #3
 80097de:	1b52      	subs	r2, r2, r5
 80097e0:	f022 0203 	bic.w	r2, r2, #3
 80097e4:	3d03      	subs	r5, #3
 80097e6:	45ac      	cmp	ip, r5
 80097e8:	bf38      	it	cc
 80097ea:	2200      	movcc	r2, #0
 80097ec:	441a      	add	r2, r3
 80097ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097f2:	b17b      	cbz	r3, 8009814 <__mdiff+0x108>
 80097f4:	6107      	str	r7, [r0, #16]
 80097f6:	e7a3      	b.n	8009740 <__mdiff+0x34>
 80097f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80097fc:	fa11 f288 	uxtah	r2, r1, r8
 8009800:	1414      	asrs	r4, r2, #16
 8009802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009806:	b292      	uxth	r2, r2
 8009808:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800980c:	f84e 2b04 	str.w	r2, [lr], #4
 8009810:	1421      	asrs	r1, r4, #16
 8009812:	e7e0      	b.n	80097d6 <__mdiff+0xca>
 8009814:	3f01      	subs	r7, #1
 8009816:	e7ea      	b.n	80097ee <__mdiff+0xe2>
 8009818:	0800a253 	.word	0x0800a253
 800981c:	0800a2c4 	.word	0x0800a2c4

08009820 <__d2b>:
 8009820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009824:	4689      	mov	r9, r1
 8009826:	2101      	movs	r1, #1
 8009828:	ec57 6b10 	vmov	r6, r7, d0
 800982c:	4690      	mov	r8, r2
 800982e:	f7ff fccf 	bl	80091d0 <_Balloc>
 8009832:	4604      	mov	r4, r0
 8009834:	b930      	cbnz	r0, 8009844 <__d2b+0x24>
 8009836:	4602      	mov	r2, r0
 8009838:	4b25      	ldr	r3, [pc, #148]	; (80098d0 <__d2b+0xb0>)
 800983a:	4826      	ldr	r0, [pc, #152]	; (80098d4 <__d2b+0xb4>)
 800983c:	f240 310a 	movw	r1, #778	; 0x30a
 8009840:	f000 fb48 	bl	8009ed4 <__assert_func>
 8009844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800984c:	bb35      	cbnz	r5, 800989c <__d2b+0x7c>
 800984e:	2e00      	cmp	r6, #0
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	d028      	beq.n	80098a6 <__d2b+0x86>
 8009854:	4668      	mov	r0, sp
 8009856:	9600      	str	r6, [sp, #0]
 8009858:	f7ff fd82 	bl	8009360 <__lo0bits>
 800985c:	9900      	ldr	r1, [sp, #0]
 800985e:	b300      	cbz	r0, 80098a2 <__d2b+0x82>
 8009860:	9a01      	ldr	r2, [sp, #4]
 8009862:	f1c0 0320 	rsb	r3, r0, #32
 8009866:	fa02 f303 	lsl.w	r3, r2, r3
 800986a:	430b      	orrs	r3, r1
 800986c:	40c2      	lsrs	r2, r0
 800986e:	6163      	str	r3, [r4, #20]
 8009870:	9201      	str	r2, [sp, #4]
 8009872:	9b01      	ldr	r3, [sp, #4]
 8009874:	61a3      	str	r3, [r4, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	bf14      	ite	ne
 800987a:	2202      	movne	r2, #2
 800987c:	2201      	moveq	r2, #1
 800987e:	6122      	str	r2, [r4, #16]
 8009880:	b1d5      	cbz	r5, 80098b8 <__d2b+0x98>
 8009882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009886:	4405      	add	r5, r0
 8009888:	f8c9 5000 	str.w	r5, [r9]
 800988c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009890:	f8c8 0000 	str.w	r0, [r8]
 8009894:	4620      	mov	r0, r4
 8009896:	b003      	add	sp, #12
 8009898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800989c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098a0:	e7d5      	b.n	800984e <__d2b+0x2e>
 80098a2:	6161      	str	r1, [r4, #20]
 80098a4:	e7e5      	b.n	8009872 <__d2b+0x52>
 80098a6:	a801      	add	r0, sp, #4
 80098a8:	f7ff fd5a 	bl	8009360 <__lo0bits>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	6163      	str	r3, [r4, #20]
 80098b0:	2201      	movs	r2, #1
 80098b2:	6122      	str	r2, [r4, #16]
 80098b4:	3020      	adds	r0, #32
 80098b6:	e7e3      	b.n	8009880 <__d2b+0x60>
 80098b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098c0:	f8c9 0000 	str.w	r0, [r9]
 80098c4:	6918      	ldr	r0, [r3, #16]
 80098c6:	f7ff fd2b 	bl	8009320 <__hi0bits>
 80098ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098ce:	e7df      	b.n	8009890 <__d2b+0x70>
 80098d0:	0800a253 	.word	0x0800a253
 80098d4:	0800a2c4 	.word	0x0800a2c4

080098d8 <_calloc_r>:
 80098d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098da:	fba1 2402 	umull	r2, r4, r1, r2
 80098de:	b94c      	cbnz	r4, 80098f4 <_calloc_r+0x1c>
 80098e0:	4611      	mov	r1, r2
 80098e2:	9201      	str	r2, [sp, #4]
 80098e4:	f000 f87a 	bl	80099dc <_malloc_r>
 80098e8:	9a01      	ldr	r2, [sp, #4]
 80098ea:	4605      	mov	r5, r0
 80098ec:	b930      	cbnz	r0, 80098fc <_calloc_r+0x24>
 80098ee:	4628      	mov	r0, r5
 80098f0:	b003      	add	sp, #12
 80098f2:	bd30      	pop	{r4, r5, pc}
 80098f4:	220c      	movs	r2, #12
 80098f6:	6002      	str	r2, [r0, #0]
 80098f8:	2500      	movs	r5, #0
 80098fa:	e7f8      	b.n	80098ee <_calloc_r+0x16>
 80098fc:	4621      	mov	r1, r4
 80098fe:	f7fd fd0d 	bl	800731c <memset>
 8009902:	e7f4      	b.n	80098ee <_calloc_r+0x16>

08009904 <_free_r>:
 8009904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009906:	2900      	cmp	r1, #0
 8009908:	d044      	beq.n	8009994 <_free_r+0x90>
 800990a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800990e:	9001      	str	r0, [sp, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f1a1 0404 	sub.w	r4, r1, #4
 8009916:	bfb8      	it	lt
 8009918:	18e4      	addlt	r4, r4, r3
 800991a:	f000 fb61 	bl	8009fe0 <__malloc_lock>
 800991e:	4a1e      	ldr	r2, [pc, #120]	; (8009998 <_free_r+0x94>)
 8009920:	9801      	ldr	r0, [sp, #4]
 8009922:	6813      	ldr	r3, [r2, #0]
 8009924:	b933      	cbnz	r3, 8009934 <_free_r+0x30>
 8009926:	6063      	str	r3, [r4, #4]
 8009928:	6014      	str	r4, [r2, #0]
 800992a:	b003      	add	sp, #12
 800992c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009930:	f000 bb5c 	b.w	8009fec <__malloc_unlock>
 8009934:	42a3      	cmp	r3, r4
 8009936:	d908      	bls.n	800994a <_free_r+0x46>
 8009938:	6825      	ldr	r5, [r4, #0]
 800993a:	1961      	adds	r1, r4, r5
 800993c:	428b      	cmp	r3, r1
 800993e:	bf01      	itttt	eq
 8009940:	6819      	ldreq	r1, [r3, #0]
 8009942:	685b      	ldreq	r3, [r3, #4]
 8009944:	1949      	addeq	r1, r1, r5
 8009946:	6021      	streq	r1, [r4, #0]
 8009948:	e7ed      	b.n	8009926 <_free_r+0x22>
 800994a:	461a      	mov	r2, r3
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	b10b      	cbz	r3, 8009954 <_free_r+0x50>
 8009950:	42a3      	cmp	r3, r4
 8009952:	d9fa      	bls.n	800994a <_free_r+0x46>
 8009954:	6811      	ldr	r1, [r2, #0]
 8009956:	1855      	adds	r5, r2, r1
 8009958:	42a5      	cmp	r5, r4
 800995a:	d10b      	bne.n	8009974 <_free_r+0x70>
 800995c:	6824      	ldr	r4, [r4, #0]
 800995e:	4421      	add	r1, r4
 8009960:	1854      	adds	r4, r2, r1
 8009962:	42a3      	cmp	r3, r4
 8009964:	6011      	str	r1, [r2, #0]
 8009966:	d1e0      	bne.n	800992a <_free_r+0x26>
 8009968:	681c      	ldr	r4, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	6053      	str	r3, [r2, #4]
 800996e:	4421      	add	r1, r4
 8009970:	6011      	str	r1, [r2, #0]
 8009972:	e7da      	b.n	800992a <_free_r+0x26>
 8009974:	d902      	bls.n	800997c <_free_r+0x78>
 8009976:	230c      	movs	r3, #12
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	e7d6      	b.n	800992a <_free_r+0x26>
 800997c:	6825      	ldr	r5, [r4, #0]
 800997e:	1961      	adds	r1, r4, r5
 8009980:	428b      	cmp	r3, r1
 8009982:	bf04      	itt	eq
 8009984:	6819      	ldreq	r1, [r3, #0]
 8009986:	685b      	ldreq	r3, [r3, #4]
 8009988:	6063      	str	r3, [r4, #4]
 800998a:	bf04      	itt	eq
 800998c:	1949      	addeq	r1, r1, r5
 800998e:	6021      	streq	r1, [r4, #0]
 8009990:	6054      	str	r4, [r2, #4]
 8009992:	e7ca      	b.n	800992a <_free_r+0x26>
 8009994:	b003      	add	sp, #12
 8009996:	bd30      	pop	{r4, r5, pc}
 8009998:	200005e4 	.word	0x200005e4

0800999c <sbrk_aligned>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4e0e      	ldr	r6, [pc, #56]	; (80099d8 <sbrk_aligned+0x3c>)
 80099a0:	460c      	mov	r4, r1
 80099a2:	6831      	ldr	r1, [r6, #0]
 80099a4:	4605      	mov	r5, r0
 80099a6:	b911      	cbnz	r1, 80099ae <sbrk_aligned+0x12>
 80099a8:	f000 fa2e 	bl	8009e08 <_sbrk_r>
 80099ac:	6030      	str	r0, [r6, #0]
 80099ae:	4621      	mov	r1, r4
 80099b0:	4628      	mov	r0, r5
 80099b2:	f000 fa29 	bl	8009e08 <_sbrk_r>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d00a      	beq.n	80099d0 <sbrk_aligned+0x34>
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d007      	beq.n	80099d4 <sbrk_aligned+0x38>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 fa1e 	bl	8009e08 <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d101      	bne.n	80099d4 <sbrk_aligned+0x38>
 80099d0:	f04f 34ff 	mov.w	r4, #4294967295
 80099d4:	4620      	mov	r0, r4
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	200005e8 	.word	0x200005e8

080099dc <_malloc_r>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	1ccd      	adds	r5, r1, #3
 80099e2:	f025 0503 	bic.w	r5, r5, #3
 80099e6:	3508      	adds	r5, #8
 80099e8:	2d0c      	cmp	r5, #12
 80099ea:	bf38      	it	cc
 80099ec:	250c      	movcc	r5, #12
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	4607      	mov	r7, r0
 80099f2:	db01      	blt.n	80099f8 <_malloc_r+0x1c>
 80099f4:	42a9      	cmp	r1, r5
 80099f6:	d905      	bls.n	8009a04 <_malloc_r+0x28>
 80099f8:	230c      	movs	r3, #12
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	2600      	movs	r6, #0
 80099fe:	4630      	mov	r0, r6
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	4e2e      	ldr	r6, [pc, #184]	; (8009ac0 <_malloc_r+0xe4>)
 8009a06:	f000 faeb 	bl	8009fe0 <__malloc_lock>
 8009a0a:	6833      	ldr	r3, [r6, #0]
 8009a0c:	461c      	mov	r4, r3
 8009a0e:	bb34      	cbnz	r4, 8009a5e <_malloc_r+0x82>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ffc2 	bl	800999c <sbrk_aligned>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	d14d      	bne.n	8009aba <_malloc_r+0xde>
 8009a1e:	6834      	ldr	r4, [r6, #0]
 8009a20:	4626      	mov	r6, r4
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	d140      	bne.n	8009aa8 <_malloc_r+0xcc>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	eb04 0803 	add.w	r8, r4, r3
 8009a30:	f000 f9ea 	bl	8009e08 <_sbrk_r>
 8009a34:	4580      	cmp	r8, r0
 8009a36:	d13a      	bne.n	8009aae <_malloc_r+0xd2>
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	3503      	adds	r5, #3
 8009a3c:	1a6d      	subs	r5, r5, r1
 8009a3e:	f025 0503 	bic.w	r5, r5, #3
 8009a42:	3508      	adds	r5, #8
 8009a44:	2d0c      	cmp	r5, #12
 8009a46:	bf38      	it	cc
 8009a48:	250c      	movcc	r5, #12
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ffa5 	bl	800999c <sbrk_aligned>
 8009a52:	3001      	adds	r0, #1
 8009a54:	d02b      	beq.n	8009aae <_malloc_r+0xd2>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	442b      	add	r3, r5
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	e00e      	b.n	8009a7c <_malloc_r+0xa0>
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	1b52      	subs	r2, r2, r5
 8009a62:	d41e      	bmi.n	8009aa2 <_malloc_r+0xc6>
 8009a64:	2a0b      	cmp	r2, #11
 8009a66:	d916      	bls.n	8009a96 <_malloc_r+0xba>
 8009a68:	1961      	adds	r1, r4, r5
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	6025      	str	r5, [r4, #0]
 8009a6e:	bf18      	it	ne
 8009a70:	6059      	strne	r1, [r3, #4]
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	bf08      	it	eq
 8009a76:	6031      	streq	r1, [r6, #0]
 8009a78:	5162      	str	r2, [r4, r5]
 8009a7a:	604b      	str	r3, [r1, #4]
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f104 060b 	add.w	r6, r4, #11
 8009a82:	f000 fab3 	bl	8009fec <__malloc_unlock>
 8009a86:	f026 0607 	bic.w	r6, r6, #7
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	1af2      	subs	r2, r6, r3
 8009a8e:	d0b6      	beq.n	80099fe <_malloc_r+0x22>
 8009a90:	1b9b      	subs	r3, r3, r6
 8009a92:	50a3      	str	r3, [r4, r2]
 8009a94:	e7b3      	b.n	80099fe <_malloc_r+0x22>
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	bf0c      	ite	eq
 8009a9c:	6032      	streq	r2, [r6, #0]
 8009a9e:	605a      	strne	r2, [r3, #4]
 8009aa0:	e7ec      	b.n	8009a7c <_malloc_r+0xa0>
 8009aa2:	4623      	mov	r3, r4
 8009aa4:	6864      	ldr	r4, [r4, #4]
 8009aa6:	e7b2      	b.n	8009a0e <_malloc_r+0x32>
 8009aa8:	4634      	mov	r4, r6
 8009aaa:	6876      	ldr	r6, [r6, #4]
 8009aac:	e7b9      	b.n	8009a22 <_malloc_r+0x46>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f000 fa9a 	bl	8009fec <__malloc_unlock>
 8009ab8:	e7a1      	b.n	80099fe <_malloc_r+0x22>
 8009aba:	6025      	str	r5, [r4, #0]
 8009abc:	e7de      	b.n	8009a7c <_malloc_r+0xa0>
 8009abe:	bf00      	nop
 8009ac0:	200005e4 	.word	0x200005e4

08009ac4 <__sfputc_r>:
 8009ac4:	6893      	ldr	r3, [r2, #8]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	b410      	push	{r4}
 8009acc:	6093      	str	r3, [r2, #8]
 8009ace:	da08      	bge.n	8009ae2 <__sfputc_r+0x1e>
 8009ad0:	6994      	ldr	r4, [r2, #24]
 8009ad2:	42a3      	cmp	r3, r4
 8009ad4:	db01      	blt.n	8009ada <__sfputc_r+0x16>
 8009ad6:	290a      	cmp	r1, #10
 8009ad8:	d103      	bne.n	8009ae2 <__sfputc_r+0x1e>
 8009ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ade:	f7fe ba01 	b.w	8007ee4 <__swbuf_r>
 8009ae2:	6813      	ldr	r3, [r2, #0]
 8009ae4:	1c58      	adds	r0, r3, #1
 8009ae6:	6010      	str	r0, [r2, #0]
 8009ae8:	7019      	strb	r1, [r3, #0]
 8009aea:	4608      	mov	r0, r1
 8009aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <__sfputs_r>:
 8009af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	4614      	mov	r4, r2
 8009afa:	18d5      	adds	r5, r2, r3
 8009afc:	42ac      	cmp	r4, r5
 8009afe:	d101      	bne.n	8009b04 <__sfputs_r+0x12>
 8009b00:	2000      	movs	r0, #0
 8009b02:	e007      	b.n	8009b14 <__sfputs_r+0x22>
 8009b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b08:	463a      	mov	r2, r7
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7ff ffda 	bl	8009ac4 <__sfputc_r>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d1f3      	bne.n	8009afc <__sfputs_r+0xa>
 8009b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b18 <_vfiprintf_r>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	460d      	mov	r5, r1
 8009b1e:	b09d      	sub	sp, #116	; 0x74
 8009b20:	4614      	mov	r4, r2
 8009b22:	4698      	mov	r8, r3
 8009b24:	4606      	mov	r6, r0
 8009b26:	b118      	cbz	r0, 8009b30 <_vfiprintf_r+0x18>
 8009b28:	6983      	ldr	r3, [r0, #24]
 8009b2a:	b90b      	cbnz	r3, 8009b30 <_vfiprintf_r+0x18>
 8009b2c:	f7ff fa30 	bl	8008f90 <__sinit>
 8009b30:	4b89      	ldr	r3, [pc, #548]	; (8009d58 <_vfiprintf_r+0x240>)
 8009b32:	429d      	cmp	r5, r3
 8009b34:	d11b      	bne.n	8009b6e <_vfiprintf_r+0x56>
 8009b36:	6875      	ldr	r5, [r6, #4]
 8009b38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b3a:	07d9      	lsls	r1, r3, #31
 8009b3c:	d405      	bmi.n	8009b4a <_vfiprintf_r+0x32>
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	059a      	lsls	r2, r3, #22
 8009b42:	d402      	bmi.n	8009b4a <_vfiprintf_r+0x32>
 8009b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b46:	f7ff fac6 	bl	80090d6 <__retarget_lock_acquire_recursive>
 8009b4a:	89ab      	ldrh	r3, [r5, #12]
 8009b4c:	071b      	lsls	r3, r3, #28
 8009b4e:	d501      	bpl.n	8009b54 <_vfiprintf_r+0x3c>
 8009b50:	692b      	ldr	r3, [r5, #16]
 8009b52:	b9eb      	cbnz	r3, 8009b90 <_vfiprintf_r+0x78>
 8009b54:	4629      	mov	r1, r5
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7fe fa16 	bl	8007f88 <__swsetup_r>
 8009b5c:	b1c0      	cbz	r0, 8009b90 <_vfiprintf_r+0x78>
 8009b5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b60:	07dc      	lsls	r4, r3, #31
 8009b62:	d50e      	bpl.n	8009b82 <_vfiprintf_r+0x6a>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	b01d      	add	sp, #116	; 0x74
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	4b7b      	ldr	r3, [pc, #492]	; (8009d5c <_vfiprintf_r+0x244>)
 8009b70:	429d      	cmp	r5, r3
 8009b72:	d101      	bne.n	8009b78 <_vfiprintf_r+0x60>
 8009b74:	68b5      	ldr	r5, [r6, #8]
 8009b76:	e7df      	b.n	8009b38 <_vfiprintf_r+0x20>
 8009b78:	4b79      	ldr	r3, [pc, #484]	; (8009d60 <_vfiprintf_r+0x248>)
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	bf08      	it	eq
 8009b7e:	68f5      	ldreq	r5, [r6, #12]
 8009b80:	e7da      	b.n	8009b38 <_vfiprintf_r+0x20>
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	0598      	lsls	r0, r3, #22
 8009b86:	d4ed      	bmi.n	8009b64 <_vfiprintf_r+0x4c>
 8009b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b8a:	f7ff faa5 	bl	80090d8 <__retarget_lock_release_recursive>
 8009b8e:	e7e9      	b.n	8009b64 <_vfiprintf_r+0x4c>
 8009b90:	2300      	movs	r3, #0
 8009b92:	9309      	str	r3, [sp, #36]	; 0x24
 8009b94:	2320      	movs	r3, #32
 8009b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b9e:	2330      	movs	r3, #48	; 0x30
 8009ba0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d64 <_vfiprintf_r+0x24c>
 8009ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba8:	f04f 0901 	mov.w	r9, #1
 8009bac:	4623      	mov	r3, r4
 8009bae:	469a      	mov	sl, r3
 8009bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb4:	b10a      	cbz	r2, 8009bba <_vfiprintf_r+0xa2>
 8009bb6:	2a25      	cmp	r2, #37	; 0x25
 8009bb8:	d1f9      	bne.n	8009bae <_vfiprintf_r+0x96>
 8009bba:	ebba 0b04 	subs.w	fp, sl, r4
 8009bbe:	d00b      	beq.n	8009bd8 <_vfiprintf_r+0xc0>
 8009bc0:	465b      	mov	r3, fp
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff93 	bl	8009af2 <__sfputs_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f000 80aa 	beq.w	8009d26 <_vfiprintf_r+0x20e>
 8009bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd4:	445a      	add	r2, fp
 8009bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80a2 	beq.w	8009d26 <_vfiprintf_r+0x20e>
 8009be2:	2300      	movs	r3, #0
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295
 8009be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bec:	f10a 0a01 	add.w	sl, sl, #1
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	9307      	str	r3, [sp, #28]
 8009bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8009bfa:	4654      	mov	r4, sl
 8009bfc:	2205      	movs	r2, #5
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	4858      	ldr	r0, [pc, #352]	; (8009d64 <_vfiprintf_r+0x24c>)
 8009c04:	f7f6 faec 	bl	80001e0 <memchr>
 8009c08:	9a04      	ldr	r2, [sp, #16]
 8009c0a:	b9d8      	cbnz	r0, 8009c44 <_vfiprintf_r+0x12c>
 8009c0c:	06d1      	lsls	r1, r2, #27
 8009c0e:	bf44      	itt	mi
 8009c10:	2320      	movmi	r3, #32
 8009c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c16:	0713      	lsls	r3, r2, #28
 8009c18:	bf44      	itt	mi
 8009c1a:	232b      	movmi	r3, #43	; 0x2b
 8009c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c20:	f89a 3000 	ldrb.w	r3, [sl]
 8009c24:	2b2a      	cmp	r3, #42	; 0x2a
 8009c26:	d015      	beq.n	8009c54 <_vfiprintf_r+0x13c>
 8009c28:	9a07      	ldr	r2, [sp, #28]
 8009c2a:	4654      	mov	r4, sl
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f04f 0c0a 	mov.w	ip, #10
 8009c32:	4621      	mov	r1, r4
 8009c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c38:	3b30      	subs	r3, #48	; 0x30
 8009c3a:	2b09      	cmp	r3, #9
 8009c3c:	d94e      	bls.n	8009cdc <_vfiprintf_r+0x1c4>
 8009c3e:	b1b0      	cbz	r0, 8009c6e <_vfiprintf_r+0x156>
 8009c40:	9207      	str	r2, [sp, #28]
 8009c42:	e014      	b.n	8009c6e <_vfiprintf_r+0x156>
 8009c44:	eba0 0308 	sub.w	r3, r0, r8
 8009c48:	fa09 f303 	lsl.w	r3, r9, r3
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	9304      	str	r3, [sp, #16]
 8009c50:	46a2      	mov	sl, r4
 8009c52:	e7d2      	b.n	8009bfa <_vfiprintf_r+0xe2>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	1d19      	adds	r1, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	9103      	str	r1, [sp, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbb      	ittet	lt
 8009c60:	425b      	neglt	r3, r3
 8009c62:	f042 0202 	orrlt.w	r2, r2, #2
 8009c66:	9307      	strge	r3, [sp, #28]
 8009c68:	9307      	strlt	r3, [sp, #28]
 8009c6a:	bfb8      	it	lt
 8009c6c:	9204      	strlt	r2, [sp, #16]
 8009c6e:	7823      	ldrb	r3, [r4, #0]
 8009c70:	2b2e      	cmp	r3, #46	; 0x2e
 8009c72:	d10c      	bne.n	8009c8e <_vfiprintf_r+0x176>
 8009c74:	7863      	ldrb	r3, [r4, #1]
 8009c76:	2b2a      	cmp	r3, #42	; 0x2a
 8009c78:	d135      	bne.n	8009ce6 <_vfiprintf_r+0x1ce>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	1d1a      	adds	r2, r3, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	9203      	str	r2, [sp, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bfb8      	it	lt
 8009c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c8a:	3402      	adds	r4, #2
 8009c8c:	9305      	str	r3, [sp, #20]
 8009c8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d74 <_vfiprintf_r+0x25c>
 8009c92:	7821      	ldrb	r1, [r4, #0]
 8009c94:	2203      	movs	r2, #3
 8009c96:	4650      	mov	r0, sl
 8009c98:	f7f6 faa2 	bl	80001e0 <memchr>
 8009c9c:	b140      	cbz	r0, 8009cb0 <_vfiprintf_r+0x198>
 8009c9e:	2340      	movs	r3, #64	; 0x40
 8009ca0:	eba0 000a 	sub.w	r0, r0, sl
 8009ca4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	4303      	orrs	r3, r0
 8009cac:	3401      	adds	r4, #1
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb4:	482c      	ldr	r0, [pc, #176]	; (8009d68 <_vfiprintf_r+0x250>)
 8009cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cba:	2206      	movs	r2, #6
 8009cbc:	f7f6 fa90 	bl	80001e0 <memchr>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d03f      	beq.n	8009d44 <_vfiprintf_r+0x22c>
 8009cc4:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <_vfiprintf_r+0x254>)
 8009cc6:	bb1b      	cbnz	r3, 8009d10 <_vfiprintf_r+0x1f8>
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	3307      	adds	r3, #7
 8009ccc:	f023 0307 	bic.w	r3, r3, #7
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	9303      	str	r3, [sp, #12]
 8009cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd6:	443b      	add	r3, r7
 8009cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cda:	e767      	b.n	8009bac <_vfiprintf_r+0x94>
 8009cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	e7a5      	b.n	8009c32 <_vfiprintf_r+0x11a>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	3401      	adds	r4, #1
 8009cea:	9305      	str	r3, [sp, #20]
 8009cec:	4619      	mov	r1, r3
 8009cee:	f04f 0c0a 	mov.w	ip, #10
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf8:	3a30      	subs	r2, #48	; 0x30
 8009cfa:	2a09      	cmp	r2, #9
 8009cfc:	d903      	bls.n	8009d06 <_vfiprintf_r+0x1ee>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0c5      	beq.n	8009c8e <_vfiprintf_r+0x176>
 8009d02:	9105      	str	r1, [sp, #20]
 8009d04:	e7c3      	b.n	8009c8e <_vfiprintf_r+0x176>
 8009d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e7f0      	b.n	8009cf2 <_vfiprintf_r+0x1da>
 8009d10:	ab03      	add	r3, sp, #12
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	462a      	mov	r2, r5
 8009d16:	4b16      	ldr	r3, [pc, #88]	; (8009d70 <_vfiprintf_r+0x258>)
 8009d18:	a904      	add	r1, sp, #16
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f7fd fba6 	bl	800746c <_printf_float>
 8009d20:	4607      	mov	r7, r0
 8009d22:	1c78      	adds	r0, r7, #1
 8009d24:	d1d6      	bne.n	8009cd4 <_vfiprintf_r+0x1bc>
 8009d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d28:	07d9      	lsls	r1, r3, #31
 8009d2a:	d405      	bmi.n	8009d38 <_vfiprintf_r+0x220>
 8009d2c:	89ab      	ldrh	r3, [r5, #12]
 8009d2e:	059a      	lsls	r2, r3, #22
 8009d30:	d402      	bmi.n	8009d38 <_vfiprintf_r+0x220>
 8009d32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d34:	f7ff f9d0 	bl	80090d8 <__retarget_lock_release_recursive>
 8009d38:	89ab      	ldrh	r3, [r5, #12]
 8009d3a:	065b      	lsls	r3, r3, #25
 8009d3c:	f53f af12 	bmi.w	8009b64 <_vfiprintf_r+0x4c>
 8009d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d42:	e711      	b.n	8009b68 <_vfiprintf_r+0x50>
 8009d44:	ab03      	add	r3, sp, #12
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <_vfiprintf_r+0x258>)
 8009d4c:	a904      	add	r1, sp, #16
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f7fd fe30 	bl	80079b4 <_printf_i>
 8009d54:	e7e4      	b.n	8009d20 <_vfiprintf_r+0x208>
 8009d56:	bf00      	nop
 8009d58:	0800a284 	.word	0x0800a284
 8009d5c:	0800a2a4 	.word	0x0800a2a4
 8009d60:	0800a264 	.word	0x0800a264
 8009d64:	0800a41c 	.word	0x0800a41c
 8009d68:	0800a426 	.word	0x0800a426
 8009d6c:	0800746d 	.word	0x0800746d
 8009d70:	08009af3 	.word	0x08009af3
 8009d74:	0800a422 	.word	0x0800a422

08009d78 <_putc_r>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	4614      	mov	r4, r2
 8009d7e:	4606      	mov	r6, r0
 8009d80:	b118      	cbz	r0, 8009d8a <_putc_r+0x12>
 8009d82:	6983      	ldr	r3, [r0, #24]
 8009d84:	b90b      	cbnz	r3, 8009d8a <_putc_r+0x12>
 8009d86:	f7ff f903 	bl	8008f90 <__sinit>
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <_putc_r+0x84>)
 8009d8c:	429c      	cmp	r4, r3
 8009d8e:	d124      	bne.n	8009dda <_putc_r+0x62>
 8009d90:	6874      	ldr	r4, [r6, #4]
 8009d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d94:	07d8      	lsls	r0, r3, #31
 8009d96:	d405      	bmi.n	8009da4 <_putc_r+0x2c>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	0599      	lsls	r1, r3, #22
 8009d9c:	d402      	bmi.n	8009da4 <_putc_r+0x2c>
 8009d9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009da0:	f7ff f999 	bl	80090d6 <__retarget_lock_acquire_recursive>
 8009da4:	68a3      	ldr	r3, [r4, #8]
 8009da6:	3b01      	subs	r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	60a3      	str	r3, [r4, #8]
 8009dac:	da05      	bge.n	8009dba <_putc_r+0x42>
 8009dae:	69a2      	ldr	r2, [r4, #24]
 8009db0:	4293      	cmp	r3, r2
 8009db2:	db1c      	blt.n	8009dee <_putc_r+0x76>
 8009db4:	b2eb      	uxtb	r3, r5
 8009db6:	2b0a      	cmp	r3, #10
 8009db8:	d019      	beq.n	8009dee <_putc_r+0x76>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	6022      	str	r2, [r4, #0]
 8009dc0:	701d      	strb	r5, [r3, #0]
 8009dc2:	b2ed      	uxtb	r5, r5
 8009dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dc6:	07da      	lsls	r2, r3, #31
 8009dc8:	d405      	bmi.n	8009dd6 <_putc_r+0x5e>
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	059b      	lsls	r3, r3, #22
 8009dce:	d402      	bmi.n	8009dd6 <_putc_r+0x5e>
 8009dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dd2:	f7ff f981 	bl	80090d8 <__retarget_lock_release_recursive>
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	bd70      	pop	{r4, r5, r6, pc}
 8009dda:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <_putc_r+0x88>)
 8009ddc:	429c      	cmp	r4, r3
 8009dde:	d101      	bne.n	8009de4 <_putc_r+0x6c>
 8009de0:	68b4      	ldr	r4, [r6, #8]
 8009de2:	e7d6      	b.n	8009d92 <_putc_r+0x1a>
 8009de4:	4b07      	ldr	r3, [pc, #28]	; (8009e04 <_putc_r+0x8c>)
 8009de6:	429c      	cmp	r4, r3
 8009de8:	bf08      	it	eq
 8009dea:	68f4      	ldreq	r4, [r6, #12]
 8009dec:	e7d1      	b.n	8009d92 <_putc_r+0x1a>
 8009dee:	4629      	mov	r1, r5
 8009df0:	4622      	mov	r2, r4
 8009df2:	4630      	mov	r0, r6
 8009df4:	f7fe f876 	bl	8007ee4 <__swbuf_r>
 8009df8:	4605      	mov	r5, r0
 8009dfa:	e7e3      	b.n	8009dc4 <_putc_r+0x4c>
 8009dfc:	0800a284 	.word	0x0800a284
 8009e00:	0800a2a4 	.word	0x0800a2a4
 8009e04:	0800a264 	.word	0x0800a264

08009e08 <_sbrk_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d06      	ldr	r5, [pc, #24]	; (8009e24 <_sbrk_r+0x1c>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	602b      	str	r3, [r5, #0]
 8009e14:	f7f7 fee2 	bl	8001bdc <_sbrk>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_sbrk_r+0x1a>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_sbrk_r+0x1a>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	200005ec 	.word	0x200005ec

08009e28 <__sread>:
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e30:	f000 f8e2 	bl	8009ff8 <_read_r>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	bfab      	itete	ge
 8009e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e3c:	181b      	addge	r3, r3, r0
 8009e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e42:	bfac      	ite	ge
 8009e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e46:	81a3      	strhlt	r3, [r4, #12]
 8009e48:	bd10      	pop	{r4, pc}

08009e4a <__swrite>:
 8009e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4e:	461f      	mov	r7, r3
 8009e50:	898b      	ldrh	r3, [r1, #12]
 8009e52:	05db      	lsls	r3, r3, #23
 8009e54:	4605      	mov	r5, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	4616      	mov	r6, r2
 8009e5a:	d505      	bpl.n	8009e68 <__swrite+0x1e>
 8009e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e60:	2302      	movs	r3, #2
 8009e62:	2200      	movs	r2, #0
 8009e64:	f000 f898 	bl	8009f98 <_lseek_r>
 8009e68:	89a3      	ldrh	r3, [r4, #12]
 8009e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	4632      	mov	r2, r6
 8009e76:	463b      	mov	r3, r7
 8009e78:	4628      	mov	r0, r5
 8009e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7e:	f000 b817 	b.w	8009eb0 <_write_r>

08009e82 <__sseek>:
 8009e82:	b510      	push	{r4, lr}
 8009e84:	460c      	mov	r4, r1
 8009e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8a:	f000 f885 	bl	8009f98 <_lseek_r>
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	bf15      	itete	ne
 8009e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e9e:	81a3      	strheq	r3, [r4, #12]
 8009ea0:	bf18      	it	ne
 8009ea2:	81a3      	strhne	r3, [r4, #12]
 8009ea4:	bd10      	pop	{r4, pc}

08009ea6 <__sclose>:
 8009ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eaa:	f000 b831 	b.w	8009f10 <_close_r>
	...

08009eb0 <_write_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d07      	ldr	r5, [pc, #28]	; (8009ed0 <_write_r+0x20>)
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	4608      	mov	r0, r1
 8009eb8:	4611      	mov	r1, r2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	602a      	str	r2, [r5, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f7f7 fe3b 	bl	8001b3a <_write>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_write_r+0x1e>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_write_r+0x1e>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	200005ec 	.word	0x200005ec

08009ed4 <__assert_func>:
 8009ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ed6:	4614      	mov	r4, r2
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4b09      	ldr	r3, [pc, #36]	; (8009f00 <__assert_func+0x2c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4605      	mov	r5, r0
 8009ee0:	68d8      	ldr	r0, [r3, #12]
 8009ee2:	b14c      	cbz	r4, 8009ef8 <__assert_func+0x24>
 8009ee4:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <__assert_func+0x30>)
 8009ee6:	9100      	str	r1, [sp, #0]
 8009ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009eec:	4906      	ldr	r1, [pc, #24]	; (8009f08 <__assert_func+0x34>)
 8009eee:	462b      	mov	r3, r5
 8009ef0:	f000 f81e 	bl	8009f30 <fiprintf>
 8009ef4:	f000 f89f 	bl	800a036 <abort>
 8009ef8:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <__assert_func+0x38>)
 8009efa:	461c      	mov	r4, r3
 8009efc:	e7f3      	b.n	8009ee6 <__assert_func+0x12>
 8009efe:	bf00      	nop
 8009f00:	2000000c 	.word	0x2000000c
 8009f04:	0800a42d 	.word	0x0800a42d
 8009f08:	0800a43a 	.word	0x0800a43a
 8009f0c:	0800a468 	.word	0x0800a468

08009f10 <_close_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d06      	ldr	r5, [pc, #24]	; (8009f2c <_close_r+0x1c>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7f7 fe29 	bl	8001b72 <_close>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_close_r+0x1a>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_close_r+0x1a>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	200005ec 	.word	0x200005ec

08009f30 <fiprintf>:
 8009f30:	b40e      	push	{r1, r2, r3}
 8009f32:	b503      	push	{r0, r1, lr}
 8009f34:	4601      	mov	r1, r0
 8009f36:	ab03      	add	r3, sp, #12
 8009f38:	4805      	ldr	r0, [pc, #20]	; (8009f50 <fiprintf+0x20>)
 8009f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3e:	6800      	ldr	r0, [r0, #0]
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	f7ff fde9 	bl	8009b18 <_vfiprintf_r>
 8009f46:	b002      	add	sp, #8
 8009f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f4c:	b003      	add	sp, #12
 8009f4e:	4770      	bx	lr
 8009f50:	2000000c 	.word	0x2000000c

08009f54 <_fstat_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d07      	ldr	r5, [pc, #28]	; (8009f74 <_fstat_r+0x20>)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	f7f7 fe12 	bl	8001b8a <_fstat>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	d102      	bne.n	8009f70 <_fstat_r+0x1c>
 8009f6a:	682b      	ldr	r3, [r5, #0]
 8009f6c:	b103      	cbz	r3, 8009f70 <_fstat_r+0x1c>
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	bd38      	pop	{r3, r4, r5, pc}
 8009f72:	bf00      	nop
 8009f74:	200005ec 	.word	0x200005ec

08009f78 <_isatty_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	; (8009f94 <_isatty_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f7 fe11 	bl	8001baa <_isatty>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_isatty_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_isatty_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	200005ec 	.word	0x200005ec

08009f98 <_lseek_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d07      	ldr	r5, [pc, #28]	; (8009fb8 <_lseek_r+0x20>)
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	602a      	str	r2, [r5, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f7f7 fe0a 	bl	8001bc0 <_lseek>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_lseek_r+0x1e>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_lseek_r+0x1e>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	200005ec 	.word	0x200005ec

08009fbc <__ascii_mbtowc>:
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	b901      	cbnz	r1, 8009fc2 <__ascii_mbtowc+0x6>
 8009fc0:	a901      	add	r1, sp, #4
 8009fc2:	b142      	cbz	r2, 8009fd6 <__ascii_mbtowc+0x1a>
 8009fc4:	b14b      	cbz	r3, 8009fda <__ascii_mbtowc+0x1e>
 8009fc6:	7813      	ldrb	r3, [r2, #0]
 8009fc8:	600b      	str	r3, [r1, #0]
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	1e10      	subs	r0, r2, #0
 8009fce:	bf18      	it	ne
 8009fd0:	2001      	movne	r0, #1
 8009fd2:	b002      	add	sp, #8
 8009fd4:	4770      	bx	lr
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	e7fb      	b.n	8009fd2 <__ascii_mbtowc+0x16>
 8009fda:	f06f 0001 	mvn.w	r0, #1
 8009fde:	e7f8      	b.n	8009fd2 <__ascii_mbtowc+0x16>

08009fe0 <__malloc_lock>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__malloc_lock+0x8>)
 8009fe2:	f7ff b878 	b.w	80090d6 <__retarget_lock_acquire_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	200005e0 	.word	0x200005e0

08009fec <__malloc_unlock>:
 8009fec:	4801      	ldr	r0, [pc, #4]	; (8009ff4 <__malloc_unlock+0x8>)
 8009fee:	f7ff b873 	b.w	80090d8 <__retarget_lock_release_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	200005e0 	.word	0x200005e0

08009ff8 <_read_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	; (800a018 <_read_r+0x20>)
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	4608      	mov	r0, r1
 800a000:	4611      	mov	r1, r2
 800a002:	2200      	movs	r2, #0
 800a004:	602a      	str	r2, [r5, #0]
 800a006:	461a      	mov	r2, r3
 800a008:	f7f7 fd7a 	bl	8001b00 <_read>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	d102      	bne.n	800a016 <_read_r+0x1e>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b103      	cbz	r3, 800a016 <_read_r+0x1e>
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	bd38      	pop	{r3, r4, r5, pc}
 800a018:	200005ec 	.word	0x200005ec

0800a01c <__ascii_wctomb>:
 800a01c:	b149      	cbz	r1, 800a032 <__ascii_wctomb+0x16>
 800a01e:	2aff      	cmp	r2, #255	; 0xff
 800a020:	bf85      	ittet	hi
 800a022:	238a      	movhi	r3, #138	; 0x8a
 800a024:	6003      	strhi	r3, [r0, #0]
 800a026:	700a      	strbls	r2, [r1, #0]
 800a028:	f04f 30ff 	movhi.w	r0, #4294967295
 800a02c:	bf98      	it	ls
 800a02e:	2001      	movls	r0, #1
 800a030:	4770      	bx	lr
 800a032:	4608      	mov	r0, r1
 800a034:	4770      	bx	lr

0800a036 <abort>:
 800a036:	b508      	push	{r3, lr}
 800a038:	2006      	movs	r0, #6
 800a03a:	f000 f82b 	bl	800a094 <raise>
 800a03e:	2001      	movs	r0, #1
 800a040:	f7f7 fd54 	bl	8001aec <_exit>

0800a044 <_raise_r>:
 800a044:	291f      	cmp	r1, #31
 800a046:	b538      	push	{r3, r4, r5, lr}
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	d904      	bls.n	800a058 <_raise_r+0x14>
 800a04e:	2316      	movs	r3, #22
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	f04f 30ff 	mov.w	r0, #4294967295
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a05a:	b112      	cbz	r2, 800a062 <_raise_r+0x1e>
 800a05c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a060:	b94b      	cbnz	r3, 800a076 <_raise_r+0x32>
 800a062:	4620      	mov	r0, r4
 800a064:	f000 f830 	bl	800a0c8 <_getpid_r>
 800a068:	462a      	mov	r2, r5
 800a06a:	4601      	mov	r1, r0
 800a06c:	4620      	mov	r0, r4
 800a06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a072:	f000 b817 	b.w	800a0a4 <_kill_r>
 800a076:	2b01      	cmp	r3, #1
 800a078:	d00a      	beq.n	800a090 <_raise_r+0x4c>
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	d103      	bne.n	800a086 <_raise_r+0x42>
 800a07e:	2316      	movs	r3, #22
 800a080:	6003      	str	r3, [r0, #0]
 800a082:	2001      	movs	r0, #1
 800a084:	e7e7      	b.n	800a056 <_raise_r+0x12>
 800a086:	2400      	movs	r4, #0
 800a088:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a08c:	4628      	mov	r0, r5
 800a08e:	4798      	blx	r3
 800a090:	2000      	movs	r0, #0
 800a092:	e7e0      	b.n	800a056 <_raise_r+0x12>

0800a094 <raise>:
 800a094:	4b02      	ldr	r3, [pc, #8]	; (800a0a0 <raise+0xc>)
 800a096:	4601      	mov	r1, r0
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	f7ff bfd3 	b.w	800a044 <_raise_r>
 800a09e:	bf00      	nop
 800a0a0:	2000000c 	.word	0x2000000c

0800a0a4 <_kill_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	; (800a0c4 <_kill_r+0x20>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	602b      	str	r3, [r5, #0]
 800a0b2:	f7f7 fd0b 	bl	8001acc <_kill>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d102      	bne.n	800a0c0 <_kill_r+0x1c>
 800a0ba:	682b      	ldr	r3, [r5, #0]
 800a0bc:	b103      	cbz	r3, 800a0c0 <_kill_r+0x1c>
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	bd38      	pop	{r3, r4, r5, pc}
 800a0c2:	bf00      	nop
 800a0c4:	200005ec 	.word	0x200005ec

0800a0c8 <_getpid_r>:
 800a0c8:	f7f7 bcf8 	b.w	8001abc <_getpid>

0800a0cc <_init>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	bf00      	nop
 800a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d2:	bc08      	pop	{r3}
 800a0d4:	469e      	mov	lr, r3
 800a0d6:	4770      	bx	lr

0800a0d8 <_fini>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	bf00      	nop
 800a0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0de:	bc08      	pop	{r3}
 800a0e0:	469e      	mov	lr, r3
 800a0e2:	4770      	bx	lr
