
orion_F303_boost_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800c548  0800c548  0001c548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb4c  0800cb4c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb4c  0800cb4c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb4c  0800cb4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb50  0800cb50  0001cb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000670  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000084c  2000084c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001903a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038c7  00000000  00000000  00039246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c7c  00000000  00000000  0003f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b89c  00000000  00000000  00060e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6d29  00000000  00000000  0007c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143419  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006624  00000000  00000000  0014346c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c52c 	.word	0x0800c52c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c52c 	.word	0x0800c52c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2228      	movs	r2, #40	; 0x28
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f008 fc29 	bl	80094b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c80:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb6:	f002 f89f 	bl	8002df8 <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f001 fb93 	bl	80023ea <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cd0:	f002 ff44 	bl	8003b5c <HAL_ADCEx_MultiModeConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000cda:	f001 fb86 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d1a:	f002 fb97 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d24:	f001 fb61 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d36:	f002 fb89 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000d40:	f001 fb53 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d44:	2303      	movs	r3, #3
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d52:	f002 fb7b 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000d5c:	f001 fb45 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	; 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001f8 	.word	0x200001f8

08000d6c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2228      	movs	r2, #40	; 0x28
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f008 fb97 	bl	80094b8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d8c:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <MX_ADC3_Init+0x124>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd6:	482d      	ldr	r0, [pc, #180]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd8:	f002 f80e 	bl	8002df8 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8000de2:	f001 fb02 	bl	80023ea <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000df2:	f002 feb3 	bl	8003b5c <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000dfc:	f001 faf5 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e10:	2306      	movs	r3, #6
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e3c:	f002 fb06 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000e46:	f001 fad0 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e58:	f002 faf8 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8000e62:	f001 fac2 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000e66:	230c      	movs	r3, #12
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e74:	f002 faea 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8000e7e:	f001 fab4 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000248 	.word	0x20000248
 8000e90:	50000400 	.word	0x50000400

08000e94 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2228      	movs	r2, #40	; 0x28
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f008 fb09 	bl	80094b8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <MX_ADC4_Init+0xdc>)
 8000eaa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ef4:	f001 ff80 	bl	8002df8 <HAL_ADC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC4_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f001 fa74 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f02:	2303      	movs	r3, #3
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000f12:	2306      	movs	r3, #6
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f38:	f002 fa88 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC4_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f001 fa52 	bl	80023ea <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f54:	f002 fa7a 	bl	800344c <HAL_ADCEx_InjectedConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000f5e:	f001 fa44 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000298 	.word	0x20000298
 8000f70:	50000500 	.word	0x50000500

08000f74 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f94:	d14d      	bne.n	8001032 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a84      	ldr	r2, [pc, #528]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b82      	ldr	r3, [pc, #520]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	623b      	str	r3, [r7, #32]
 8000fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f004 f902 	bl	80051e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe0:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe2:	4a74      	ldr	r2, [pc, #464]	; (80011b4 <HAL_ADC_MspInit+0x240>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe6:	4b72      	ldr	r3, [pc, #456]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001000:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001008:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800100a:	2220      	movs	r2, #32
 800100c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	4866      	ldr	r0, [pc, #408]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001016:	f003 feba 	bl	8004d8e <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001020:	f001 f9e3 	bl	80023ea <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a62      	ldr	r2, [pc, #392]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
 800102a:	4a61      	ldr	r2, [pc, #388]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001030:	e0b7      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC3)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_ADC_MspInit+0x244>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d157      	bne.n	80010ec <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800103c:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <HAL_ADC_MspInit+0x248>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a5e      	ldr	r2, [pc, #376]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001044:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10b      	bne.n	8001066 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800104e:	4b57      	ldr	r3, [pc, #348]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BOOST_V_Pin|BATT_CS_Pin|TEMP_COIL_1_Pin;
 800107e:	f242 0303 	movw	r3, #8195	; 0x2003
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	484b      	ldr	r0, [pc, #300]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 8001094:	f004 f8a6 	bl	80051e4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 800109a:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_ADC_MspInit+0x254>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010be:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010ce:	483d      	ldr	r0, [pc, #244]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010d0:	f003 fe5d 	bl	8004d8e <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 80010da:	f001 f986 	bl	80023ea <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
 80010e4:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80010ea:	e05a      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC4)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a36      	ldr	r2, [pc, #216]	; (80011cc <HAL_ADC_MspInit+0x258>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d155      	bne.n	80011a2 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10b      	bne.n	8001120 <HAL_ADC_MspInit+0x1ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001112:	6153      	str	r3, [r2, #20]
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	6153      	str	r3, [r2, #20]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_FET_Pin|TEMP_COIL_2_Pin;
 8001138:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 800114e:	f004 f849 	bl	80051e4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001154:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x260>)
 8001156:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800117c:	2220      	movs	r2, #32
 800117e:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001186:	4812      	ldr	r0, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001188:	f003 fe01 	bl	8004d8e <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001192:	f001 f92a 	bl	80023ea <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80011a2:	bf00      	nop
 80011a4:	3738      	adds	r7, #56	; 0x38
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	200002e8 	.word	0x200002e8
 80011b4:	40020008 	.word	0x40020008
 80011b8:	50000400 	.word	0x50000400
 80011bc:	200003b4 	.word	0x200003b4
 80011c0:	48000400 	.word	0x48000400
 80011c4:	2000032c 	.word	0x2000032c
 80011c8:	40020458 	.word	0x40020458
 80011cc:	50000500 	.word	0x50000500
 80011d0:	20000370 	.word	0x20000370
 80011d4:	4002041c 	.word	0x4002041c

080011d8 <start_transmit>:
int8_t delta_x, delta_y;
uint8_t quality;
int32_t integral_x, integral_y;

void start_transmit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f004 f98f 	bl	8005508 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <end_transmit>:

void end_transmit(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f004 f984 	bl	8005508 <HAL_GPIO_WritePin>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <reset>:


static void reset(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af02      	add	r7, sp, #8
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <reset+0x48>)
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <reset+0x4c>)
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <reset+0x50>)
 8001218:	f005 fe5d 	bl	8006ed6 <HAL_SPI_TransmitReceive>
    end_transmit();
 800121c:	f7ff ffe7 	bl	80011ee <end_transmit>
    // set clk,nss polaryty


    HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f001 fdc5 	bl	8002db0 <HAL_Delay>

    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <reset+0x54>)
 800122c:	f004 f96c 	bl	8005508 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f001 fdbd 	bl	8002db0 <HAL_Delay>
    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <reset+0x54>)
 800123c:	f004 f964 	bl	8005508 <HAL_GPIO_WritePin>

    HAL_Delay(250); // waiting for self-test
 8001240:	20fa      	movs	r0, #250	; 0xfa
 8001242:	f001 fdb5 	bl	8002db0 <HAL_Delay>
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200003c8 	.word	0x200003c8
 8001250:	200003b8 	.word	0x200003b8
 8001254:	20000624 	.word	0x20000624
 8001258:	48000400 	.word	0x48000400

0800125c <is_connect_ADNS3080>:

bool is_connect_ADNS3080(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af02      	add	r7, sp, #8
    //HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);

    reset();
 8001262:	f7ff ffcf 	bl	8001204 <reset>


    start_transmit();
 8001266:	f7ff ffb7 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_PRODUCT_ID;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <is_connect_ADNS3080+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 8001270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <is_connect_ADNS3080+0x50>)
 800127a:	490b      	ldr	r1, [pc, #44]	; (80012a8 <is_connect_ADNS3080+0x4c>)
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <is_connect_ADNS3080+0x54>)
 800127e:	f005 fe2a 	bl	8006ed6 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001282:	f7ff ffb4 	bl	80011ee <end_transmit>

    printf("SPI ID : %d\n", rbuf[1]);
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <is_connect_ADNS3080+0x50>)
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <is_connect_ADNS3080+0x58>)
 800128e:	f008 fd85 	bl	8009d9c <iprintf>

    if (rbuf[1] == ADNS3080_PRODUCT_ID_VALUE)
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <is_connect_ADNS3080+0x50>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	2b17      	cmp	r3, #23
 8001298:	d101      	bne.n	800129e <is_connect_ADNS3080+0x42>
    {
        return true;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <is_connect_ADNS3080+0x44>
    }
    else
    {
        return false;
 800129e:	2300      	movs	r3, #0
    }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200003b8 	.word	0x200003b8
 80012ac:	200003c8 	.word	0x200003c8
 80012b0:	20000624 	.word	0x20000624
 80012b4:	0800c548 	.word	0x0800c548

080012b8 <init_ADNS3080>:

void init_ADNS3080(bool ips_1600)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
    delta_x = 0;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <init_ADNS3080+0x8c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    delta_y = 0;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <init_ADNS3080+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
    quality = 0;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <init_ADNS3080+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    integral_x = 0;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <init_ADNS3080+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
    integral_y = 0;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <init_ADNS3080+0x9c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    reset();
 80012e0:	f7ff ff90 	bl	8001204 <reset>


    start_transmit();
 80012e4:	f7ff ff78 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_REG_WRITE & ADNS3080_CONFIGURATION_BITS; // config write
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <init_ADNS3080+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	4a19      	ldr	r2, [pc, #100]	; (800135c <init_ADNS3080+0xa4>)
 80012f8:	4917      	ldr	r1, [pc, #92]	; (8001358 <init_ADNS3080+0xa0>)
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <init_ADNS3080+0xa8>)
 80012fc:	f005 fdeb 	bl	8006ed6 <HAL_SPI_TransmitReceive>

    //delay >75us
    for (int i = 0; i < 1000; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e002      	b.n	800130c <init_ADNS3080+0x54>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3301      	adds	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001312:	dbf8      	blt.n	8001306 <init_ADNS3080+0x4e>
    {
    }

    uint8_t mouse_config = rbuf[1];
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <init_ADNS3080+0xa4>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	72fb      	strb	r3, [r7, #11]
    sbuf[0] = mouse_config | ADNS3080_BIT_1600IPS; // set 1600 ips
 800131a:	7afb      	ldrb	r3, [r7, #11]
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <init_ADNS3080+0xa0>)
 8001324:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <init_ADNS3080+0xa4>)
 8001330:	4909      	ldr	r1, [pc, #36]	; (8001358 <init_ADNS3080+0xa0>)
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <init_ADNS3080+0xa8>)
 8001334:	f005 fdcf 	bl	8006ed6 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001338:	f7ff ff59 	bl	80011ee <end_transmit>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200003d8 	.word	0x200003d8
 8001348:	200003d9 	.word	0x200003d9
 800134c:	200003da 	.word	0x200003da
 8001350:	200003dc 	.word	0x200003dc
 8001354:	200003e0 	.word	0x200003e0
 8001358:	200003b8 	.word	0x200003b8
 800135c:	200003c8 	.word	0x200003c8
 8001360:	20000624 	.word	0x20000624

08001364 <update_ADNS3080>:


void update_ADNS3080(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af02      	add	r7, sp, #8
    
    start_transmit();
 800136a:	f7ff ff35 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_MOTION_BURST;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <update_ADNS3080+0x78>)
 8001370:	2250      	movs	r2, #80	; 0x50
 8001372:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 8, 1000);
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2308      	movs	r3, #8
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <update_ADNS3080+0x7c>)
 800137e:	4917      	ldr	r1, [pc, #92]	; (80013dc <update_ADNS3080+0x78>)
 8001380:	4818      	ldr	r0, [pc, #96]	; (80013e4 <update_ADNS3080+0x80>)
 8001382:	f005 fda8 	bl	8006ed6 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001386:	f7ff ff32 	bl	80011ee <end_transmit>
    
    if (rbuf[1] & ADNS3080_BIT_MOTION)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <update_ADNS3080+0x7c>)
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	da1b      	bge.n	80013cc <update_ADNS3080+0x68>
    {
        delta_x = (int8_t)rbuf[2];
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <update_ADNS3080+0x7c>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <update_ADNS3080+0x84>)
 800139c:	701a      	strb	r2, [r3, #0]
        delta_y = (int8_t)rbuf[3];
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <update_ADNS3080+0x7c>)
 80013a0:	78db      	ldrb	r3, [r3, #3]
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <update_ADNS3080+0x88>)
 80013a6:	701a      	strb	r2, [r3, #0]
        integral_x += delta_x;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <update_ADNS3080+0x84>)
 80013aa:	f993 3000 	ldrsb.w	r3, [r3]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <update_ADNS3080+0x8c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <update_ADNS3080+0x8c>)
 80013b8:	6013      	str	r3, [r2, #0]
        integral_y += delta_y;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <update_ADNS3080+0x88>)
 80013bc:	f993 3000 	ldrsb.w	r3, [r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <update_ADNS3080+0x90>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <update_ADNS3080+0x90>)
 80013ca:	6013      	str	r3, [r2, #0]
    }else{

    }
    quality = rbuf[4];
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <update_ADNS3080+0x7c>)
 80013ce:	791a      	ldrb	r2, [r3, #4]
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <update_ADNS3080+0x94>)
 80013d2:	701a      	strb	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200003b8 	.word	0x200003b8
 80013e0:	200003c8 	.word	0x200003c8
 80013e4:	20000624 	.word	0x20000624
 80013e8:	200003d8 	.word	0x200003d8
 80013ec:	200003d9 	.word	0x200003d9
 80013f0:	200003dc 	.word	0x200003dc
 80013f4:	200003e0 	.word	0x200003e0
 80013f8:	200003da 	.word	0x200003da

080013fc <get_DeltaX_ADNS3080>:


int8_t get_DeltaX_ADNS3080(void){
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
    return delta_x;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <get_DeltaX_ADNS3080+0x14>)
 8001402:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	200003d8 	.word	0x200003d8

08001414 <get_DeltaY_ADNS3080>:
int8_t get_DeltaY_ADNS3080(void){
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
    return delta_y;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <get_DeltaY_ADNS3080+0x14>)
 800141a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	200003d9 	.word	0x200003d9

0800142c <get_Qualty_ADNS3080>:
uint8_t get_Qualty_ADNS3080(void){
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
    return quality;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <get_Qualty_ADNS3080+0x14>)
 8001432:	781b      	ldrb	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200003da 	.word	0x200003da

08001444 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_CAN_Init+0x64>)
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_CAN_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_CAN_Init+0x64>)
 8001450:	2202      	movs	r2, #2
 8001452:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_CAN_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_CAN_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_CAN_Init+0x64>)
 8001462:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001466:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_CAN_Init+0x64>)
 800146a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800146e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <MX_CAN_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_CAN_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_CAN_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_CAN_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_CAN_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_CAN_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_CAN_Init+0x64>)
 8001496:	f002 fd1d 	bl	8003ed4 <HAL_CAN_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80014a0:	f000 ffa3 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200003e4 	.word	0x200003e4
 80014ac:	40006400 	.word	0x40006400

080014b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <HAL_CAN_MspInit+0x90>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d131      	bne.n	8001536 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_CAN_MspInit+0x94>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <HAL_CAN_MspInit+0x94>)
 80014d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_CAN_MspInit+0x94>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_CAN_MspInit+0x94>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <HAL_CAN_MspInit+0x94>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6153      	str	r3, [r2, #20]
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_CAN_MspInit+0x94>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001502:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001514:	2309      	movs	r3, #9
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f003 fe5f 	bl	80051e4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2101      	movs	r1, #1
 800152a:	2014      	movs	r0, #20
 800152c:	f003 fbf9 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001530:	2014      	movs	r0, #20
 8001532:	f003 fc12 	bl	8004d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40006400 	.word	0x40006400
 8001544:	40021000 	.word	0x40021000

08001548 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x00) << 5;
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x100) << 5;
 800155e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001562:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x010) << 5;
 8001564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001568:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x110) << 5;
 800156a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800156e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001574:	2301      	movs	r3, #1
 8001576:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <CAN_Filter_Init+0x64>)
 8001582:	f002 fda2 	bl	80040ca <HAL_CAN_ConfigFilter>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <CAN_Filter_Init+0x48>
  {
    Error_Handler();
 800158c:	f000 ff2d 	bl	80023ea <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001590:	2102      	movs	r1, #2
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <CAN_Filter_Init+0x64>)
 8001594:	f003 f894 	bl	80046c0 <HAL_CAN_ActivateNotification>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <CAN_Filter_Init+0x5a>
  {
    Error_Handler();
 800159e:	f000 ff24 	bl	80023ea <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3728      	adds	r7, #40	; 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200003e4 	.word	0x200003e4

080015b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <MX_DMA_Init+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <MX_DMA_Init+0x80>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_DMA_Init+0x80>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_DMA_Init+0x80>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <MX_DMA_Init+0x80>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6153      	str	r3, [r2, #20]
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_DMA_Init+0x80>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f003 fb99 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f003 fbb2 	bl	8004d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200e      	movs	r0, #14
 80015fc:	f003 fb91 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001600:	200e      	movs	r0, #14
 8001602:	f003 fbaa 	bl	8004d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2039      	movs	r0, #57	; 0x39
 800160c:	f003 fb89 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001610:	2039      	movs	r0, #57	; 0x39
 8001612:	f003 fba2 	bl	8004d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	203c      	movs	r0, #60	; 0x3c
 800161c:	f003 fb81 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001620:	203c      	movs	r0, #60	; 0x3c
 8001622:	f003 fb9a 	bl	8004d5a <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4b40      	ldr	r3, [pc, #256]	; (800174c <MX_GPIO_Init+0x118>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a3f      	ldr	r2, [pc, #252]	; (800174c <MX_GPIO_Init+0x118>)
 8001650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <MX_GPIO_Init+0x118>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001662:	4b3a      	ldr	r3, [pc, #232]	; (800174c <MX_GPIO_Init+0x118>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a39      	ldr	r2, [pc, #228]	; (800174c <MX_GPIO_Init+0x118>)
 8001668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <MX_GPIO_Init+0x118>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <MX_GPIO_Init+0x118>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a33      	ldr	r2, [pc, #204]	; (800174c <MX_GPIO_Init+0x118>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b31      	ldr	r3, [pc, #196]	; (800174c <MX_GPIO_Init+0x118>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <MX_GPIO_Init+0x118>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	4a2d      	ldr	r2, [pc, #180]	; (800174c <MX_GPIO_Init+0x118>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6153      	str	r3, [r2, #20]
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_GPIO_Init+0x118>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016b0:	4827      	ldr	r0, [pc, #156]	; (8001750 <MX_GPIO_Init+0x11c>)
 80016b2:	f003 ff29 	bl	8005508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CURRENT_Pin|MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f248 0110 	movw	r1, #32784	; 0x8010
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f003 ff22 	bl	8005508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POWER_SW_EN_Pin|MOUSE_RST_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2144      	movs	r1, #68	; 0x44
 80016c8:	4822      	ldr	r0, [pc, #136]	; (8001754 <MX_GPIO_Init+0x120>)
 80016ca:	f003 ff1d 	bl	8005508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80016ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_GPIO_Init+0x11c>)
 80016e8:	f003 fd7c 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_CURRENT_Pin|MOUSE_NSS_Pin;
 80016ec:	f248 0310 	movw	r3, #32784	; 0x8010
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f003 fd6c 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_SW_EN_Pin|MOUSE_RST_Pin;
 800170c:	2344      	movs	r3, #68	; 0x44
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <MX_GPIO_Init+0x120>)
 8001724:	f003 fd5e 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8001728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001732:	2301      	movs	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_GPIO_Init+0x120>)
 800173e:	f003 fd51 	bl	80051e4 <HAL_GPIO_Init>

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	48000800 	.word	0x48000800
 8001754:	48000400 	.word	0x48000400

08001758 <_write>:
char first_buf[UART_TEMP_BUF_SIZE];
char temp_buf[UART_TEMP_BUF_SIZE];
int re_queue_len = 0;

int _write(int file, char *ptr, int len)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	if (huart1.hdmatx->State == HAL_DMA_BURST_STATE_BUSY)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_write+0x5c>)
 8001766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001768:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800176c:	2b02      	cmp	r3, #2
 800176e:	d10f      	bne.n	8001790 <_write+0x38>
	{
		if (len >= UART_TEMP_BUF_SIZE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2bc7      	cmp	r3, #199	; 0xc7
 8001774:	dd01      	ble.n	800177a <_write+0x22>
			len = UART_TEMP_BUF_SIZE;
 8001776:	23c8      	movs	r3, #200	; 0xc8
 8001778:	607b      	str	r3, [r7, #4]
		memcpy(temp_buf, ptr, len);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	461a      	mov	r2, r3
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <_write+0x60>)
 8001782:	f007 fe8b 	bl	800949c <memcpy>
		re_queue_len = len;
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <_write+0x64>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6013      	str	r3, [r2, #0]
		return len;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	e00d      	b.n	80017ac <_write+0x54>
	}
	memcpy(first_buf, ptr, len);							   // 8ms
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	480a      	ldr	r0, [pc, #40]	; (80017c0 <_write+0x68>)
 8001798:	f007 fe80 	bl	800949c <memcpy>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, len); // 2ms
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4907      	ldr	r1, [pc, #28]	; (80017c0 <_write+0x68>)
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <_write+0x5c>)
 80017a6:	f006 fdd3 	bl	8008350 <HAL_UART_Transmit_DMA>
	return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000770 	.word	0x20000770
 80017b8:	200004d4 	.word	0x200004d4
 80017bc:	2000059c 	.word	0x2000059c
 80017c0:	2000040c 	.word	0x2000040c

080017c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if (re_queue_len)
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_UART_TxCpltCallback+0x30>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00a      	beq.n	80017ea <HAL_UART_TxCpltCallback+0x26>
	{

		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)temp_buf, re_queue_len);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_UART_TxCpltCallback+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <HAL_UART_TxCpltCallback+0x34>)
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <HAL_UART_TxCpltCallback+0x38>)
 80017e0:	f006 fdb6 	bl	8008350 <HAL_UART_Transmit_DMA>
		re_queue_len = 0;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_UART_TxCpltCallback+0x30>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
	}
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000059c 	.word	0x2000059c
 80017f8:	200004d4 	.word	0x200004d4
 80017fc:	20000770 	.word	0x20000770

08001800 <p>:

void p(const char *format, ...)
{
 8001800:	b40f      	push	{r0, r1, r2, r3}
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0

	va_list ap;
	va_start(ap, format);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	607b      	str	r3, [r7, #4]

	if (huart1.hdmatx->State == HAL_DMA_BURST_STATE_BUSY)
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <p+0x6c>)
 8001810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001812:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001816:	2b02      	cmp	r3, #2
 8001818:	d111      	bne.n	800183e <p+0x3e>
	{
		vsprintf(temp_buf + re_queue_len,format,ap);
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <p+0x70>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <p+0x74>)
 8001822:	4413      	add	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6939      	ldr	r1, [r7, #16]
 8001828:	4618      	mov	r0, r3
 800182a:	f008 fc29 	bl	800a080 <vsiprintf>
		va_end(ap);
		re_queue_len = strlen(temp_buf);
 800182e:	4811      	ldr	r0, [pc, #68]	; (8001874 <p+0x74>)
 8001830:	f7fe fcce 	bl	80001d0 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <p+0x70>)
 800183a:	601a      	str	r2, [r3, #0]
		return;
 800183c:	e00f      	b.n	800185e <p+0x5e>
	}
	vsprintf(first_buf,format,ap);
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6939      	ldr	r1, [r7, #16]
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <p+0x78>)
 8001844:	f008 fc1c 	bl	800a080 <vsiprintf>
	va_end(ap);
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, strlen(first_buf)); // 2ms
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <p+0x78>)
 800184a:	f7fe fcc1 	bl	80001d0 <strlen>
 800184e:	4603      	mov	r3, r0
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4908      	ldr	r1, [pc, #32]	; (8001878 <p+0x78>)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <p+0x6c>)
 8001858:	f006 fd7a 	bl	8008350 <HAL_UART_Transmit_DMA>
	return;
 800185c:	bf00      	nop
}
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001866:	b004      	add	sp, #16
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000770 	.word	0x20000770
 8001870:	2000059c 	.word	0x2000059c
 8001874:	200004d4 	.word	0x200004d4
 8001878:	2000040c 	.word	0x2000040c

0800187c <setTargetVoltage>:
	  int16_t delta_y;
  }mouse;
} uint8_to_float_t;

uint8_to_float_t rx,tx;
void setTargetVoltage(float target){
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	ed87 0a01 	vstr	s0, [r7, #4]
	if(target > 450){
 8001886:	edd7 7a01 	vldr	s15, [r7, #4]
 800188a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80018c4 <setTargetVoltage+0x48>
 800188e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	dd01      	ble.n	800189c <setTargetVoltage+0x20>
		target = 450;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <setTargetVoltage+0x4c>)
 800189a:	607b      	str	r3, [r7, #4]
	}
	if(target < 20){
 800189c:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d501      	bpl.n	80018b2 <setTargetVoltage+0x36>
		target = 20;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <setTargetVoltage+0x50>)
 80018b0:	607b      	str	r3, [r7, #4]
	}
	power_cmd.target_voltage = target;
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <setTargetVoltage+0x54>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6053      	str	r3, [r2, #4]
	//printf("set target voltage = %f\n",power_cmd.target_voltage);
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	43e10000 	.word	0x43e10000
 80018c8:	43e10000 	.word	0x43e10000
 80018cc:	41a00000 	.word	0x41a00000
 80018d0:	200005c0 	.word	0x200005c0

080018d4 <startKick>:

static uint32_t loop_cnt = 0, kick_cnt = 0;
static int boost_cnt = 0;

void startKick(uint8_t power){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
    if (kick_cnt == 0)
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <startKick+0x50>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d119      	bne.n	800191a <startKick+0x46>
    {
      kick_cnt = 100;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <startKick+0x50>)
 80018e8:	2264      	movs	r2, #100	; 0x64
 80018ea:	601a      	str	r2, [r3, #0]
      boost_cnt = 0;
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <startKick+0x54>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
      power_cmd.kick_power = TIM_KICK_PERI * power / 255;
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <startKick+0x58>)
 80018fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001902:	441a      	add	r2, r3
 8001904:	11d2      	asrs	r2, r2, #7
 8001906:	17db      	asrs	r3, r3, #31
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <startKick+0x5c>)
 800190c:	6093      	str	r3, [r2, #8]
      printf("start kick! : %d\n",power_cmd.kick_power);
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <startKick+0x5c>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4619      	mov	r1, r3
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <startKick+0x60>)
 8001916:	f008 fa41 	bl	8009d9c <iprintf>
    }
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200005e0 	.word	0x200005e0
 8001928:	200005e4 	.word	0x200005e4
 800192c:	80808081 	.word	0x80808081
 8001930:	200005c0 	.word	0x200005c0
 8001934:	0800c574 	.word	0x0800c574

08001938 <startCharge>:

void startCharge(){
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
    if (boost_cnt == 0 && kick_cnt == 0)
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <startCharge+0x28>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <startCharge+0x1c>
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <startCharge+0x2c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <startCharge+0x1c>
    {
      //printf("boost start!!\n");
      boost_cnt = 1000;
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <startCharge+0x28>)
 800194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001952:	601a      	str	r2, [r3, #0]
    }
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	200005e4 	.word	0x200005e4
 8001964:	200005e0 	.word	0x200005e0

08001968 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, rx.data) != HAL_OK)
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001972:	4a2e      	ldr	r2, [pc, #184]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001974:	2100      	movs	r1, #0
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f002 fd90 	bl	800449c <HAL_CAN_GetRxMessage>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001982:	f000 fd32 	bl	80023ea <Error_Handler>
  }
  can_rx_cnt++;
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800198e:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId)
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8001998:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800199c:	d004      	beq.n	80019a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
    default:
      break;
    }
    break;
  default:
	  break;
 800199e:	e03e      	b.n	8001a1e <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
    power_cmd.charge_enabled = false;
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
    break;
 80019a6:	e03a      	b.n	8001a1e <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
    switch (rx.power.idx)
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d834      	bhi.n	8001a1a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 80019b0:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019d9 	.word	0x080019d9
 80019c0:	080019f5 	.word	0x080019f5
 80019c4:	08001a0d 	.word	0x08001a0d
    	setTargetVoltage(rx.power.value);
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80019ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	f7ff ff53 	bl	800187c <setTargetVoltage>
      break;
 80019d6:	e021      	b.n	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    	if(rx.data[1] == 1){
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
    		power_cmd.charge_enabled = true;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
        	startCharge();
 80019e6:	f7ff ffa7 	bl	8001938 <startCharge>
      break;
 80019ea:	e017      	b.n	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    		power_cmd.charge_enabled = false;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
      break;
 80019f2:	e013      	b.n	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    	if(rx.data[1] == 1){
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80019f6:	785b      	ldrb	r3, [r3, #1]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d103      	bne.n	8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
    		power_cmd.kick_chip_selected = true;
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	705a      	strb	r2, [r3, #1]
      break;
 8001a02:	e00b      	b.n	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    		power_cmd.kick_chip_selected = false;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	705a      	strb	r2, [r3, #1]
      break;
 8001a0a:	e007      	b.n	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
      printf("[CAN] kick!\n");
 8001a0c:	480a      	ldr	r0, [pc, #40]	; (8001a38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001a0e:	f008 fa4b 	bl	8009ea8 <puts>
  	startKick(255);
 8001a12:	20ff      	movs	r0, #255	; 0xff
 8001a14:	f7ff ff5e 	bl	80018d4 <startKick>
      break;
 8001a18:	e000      	b.n	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
      break;
 8001a1a:	bf00      	nop
    break;
 8001a1c:	bf00      	nop
  }
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200005cc 	.word	0x200005cc
 8001a2c:	200005a4 	.word	0x200005a4
 8001a30:	200005a0 	.word	0x200005a0
 8001a34:	200005c0 	.word	0x200005c0
 8001a38:	0800c588 	.word	0x0800c588

08001a3c <sendCanMouse>:
  can_data[3] = 1;
  HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
}

void sendCanMouse(int16_t delta_x,int16_t delta_y)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	80fb      	strh	r3, [r7, #6]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	80bb      	strh	r3, [r7, #4]
  can_header.StdId = 0x240;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <sendCanMouse+0x4c>)
 8001a4e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001a52:	601a      	str	r2, [r3, #0]
  can_header.RTR = CAN_RTR_DATA;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <sendCanMouse+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  can_header.DLC = 4;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <sendCanMouse+0x4c>)
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	611a      	str	r2, [r3, #16]
  can_header.TransmitGlobalTime = DISABLE;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <sendCanMouse+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	751a      	strb	r2, [r3, #20]
  tx.mouse.delta_x = delta_x;
 8001a66:	4a09      	ldr	r2, [pc, #36]	; (8001a8c <sendCanMouse+0x50>)
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	8013      	strh	r3, [r2, #0]
  tx.mouse.delta_y = delta_y;
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <sendCanMouse+0x50>)
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	8053      	strh	r3, [r2, #2]
  HAL_CAN_AddTxMessage(&hcan, &can_header, tx.data, &can_mailbox);
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <sendCanMouse+0x54>)
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <sendCanMouse+0x50>)
 8001a76:	4904      	ldr	r1, [pc, #16]	; (8001a88 <sendCanMouse+0x4c>)
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <sendCanMouse+0x58>)
 8001a7a:	f002 fc34 	bl	80042e6 <HAL_CAN_AddTxMessage>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200005e8 	.word	0x200005e8
 8001a8c:	200005d4 	.word	0x200005d4
 8001a90:	20000600 	.word	0x20000600
 8001a94:	200003e4 	.word	0x200003e4

08001a98 <updateADCs>:

static float boost_v = 0, batt_v, gd_16p, gd_16m, batt_cs;
static int temp_coil_1, temp_coil_2, temp_fet;
void updateADCs(void){
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    batt_v = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * 3.3 / 4096 * 11 / 1;
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4890      	ldr	r0, [pc, #576]	; (8001ce0 <updateADCs+0x248>)
 8001aa0:	f001 fca0 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001aa4:	ee07 0a90 	vmov	s15, r0
 8001aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aac:	ee17 0a90 	vmov	r0, s15
 8001ab0:	f7fe fd4a 	bl	8000548 <__aeabi_f2d>
 8001ab4:	a386      	add	r3, pc, #536	; (adr r3, 8001cd0 <updateADCs+0x238>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fd9d 	bl	80005f8 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <updateADCs+0x24c>)
 8001acc:	f7fe febe 	bl	800084c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <updateADCs+0x250>)
 8001ade:	f7fe fd8b 	bl	80005f8 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f85d 	bl	8000ba8 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <updateADCs+0x254>)
 8001af2:	6013      	str	r3, [r2, #0]
    gd_16p = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2) * 3.3 / 4096 * 11 / 1;
 8001af4:	2102      	movs	r1, #2
 8001af6:	487a      	ldr	r0, [pc, #488]	; (8001ce0 <updateADCs+0x248>)
 8001af8:	f001 fc74 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001afc:	ee07 0a90 	vmov	s15, r0
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	ee17 0a90 	vmov	r0, s15
 8001b08:	f7fe fd1e 	bl	8000548 <__aeabi_f2d>
 8001b0c:	a370      	add	r3, pc, #448	; (adr r3, 8001cd0 <updateADCs+0x238>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd71 	bl	80005f8 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <updateADCs+0x24c>)
 8001b24:	f7fe fe92 	bl	800084c <__aeabi_ddiv>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <updateADCs+0x250>)
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f831 	bl	8000ba8 <__aeabi_d2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a69      	ldr	r2, [pc, #420]	; (8001cf0 <updateADCs+0x258>)
 8001b4a:	6013      	str	r3, [r2, #0]
    gd_16m = (((float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3) * 3.3 / 4096) * 21 - gd_16p * 11) / 10;
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	4864      	ldr	r0, [pc, #400]	; (8001ce0 <updateADCs+0x248>)
 8001b50:	f001 fc48 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001b54:	ee07 0a90 	vmov	s15, r0
 8001b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5c:	ee17 0a90 	vmov	r0, s15
 8001b60:	f7fe fcf2 	bl	8000548 <__aeabi_f2d>
 8001b64:	a35a      	add	r3, pc, #360	; (adr r3, 8001cd0 <updateADCs+0x238>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fd45 	bl	80005f8 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ce4 <updateADCs+0x24c>)
 8001b7c:	f7fe fe66 	bl	800084c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <updateADCs+0x25c>)
 8001b8e:	f7fe fd33 	bl	80005f8 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	461d      	mov	r5, r3
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <updateADCs+0x258>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8001ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba8:	ee17 0a90 	vmov	r0, s15
 8001bac:	f7fe fccc 	bl	8000548 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb66 	bl	8000288 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <updateADCs+0x260>)
 8001bca:	f7fe fe3f 	bl	800084c <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7fe ffe7 	bl	8000ba8 <__aeabi_d2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <updateADCs+0x264>)
 8001bde:	6013      	str	r3, [r2, #0]
    boost_v = (float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_3) * 213 * 3.3 / 4096 * 1.038; // 1.038 is calib
 8001be0:	2103      	movs	r1, #3
 8001be2:	4847      	ldr	r0, [pc, #284]	; (8001d00 <updateADCs+0x268>)
 8001be4:	f001 fbfe 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001be8:	ee07 0a90 	vmov	s15, r0
 8001bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001d04 <updateADCs+0x26c>
 8001bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf8:	ee17 0a90 	vmov	r0, s15
 8001bfc:	f7fe fca4 	bl	8000548 <__aeabi_f2d>
 8001c00:	a333      	add	r3, pc, #204	; (adr r3, 8001cd0 <updateADCs+0x238>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <updateADCs+0x24c>)
 8001c18:	f7fe fe18 	bl	800084c <__aeabi_ddiv>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	a32c      	add	r3, pc, #176	; (adr r3, 8001cd8 <updateADCs+0x240>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fce5 	bl	80005f8 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7fe ffb7 	bl	8000ba8 <__aeabi_d2f>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <updateADCs+0x270>)
 8001c3e:	6013      	str	r3, [r2, #0]
    // INA199x1 : 50 V/V
    //  2m ohm x 50VV -> 100m V / A
    batt_cs = ((float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1) * 3.3 / 4096) * 10;
 8001c40:	2101      	movs	r1, #1
 8001c42:	482f      	ldr	r0, [pc, #188]	; (8001d00 <updateADCs+0x268>)
 8001c44:	f001 fbce 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001c48:	ee07 0a90 	vmov	s15, r0
 8001c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c50:	ee17 0a90 	vmov	r0, s15
 8001c54:	f7fe fc78 	bl	8000548 <__aeabi_f2d>
 8001c58:	a31d      	add	r3, pc, #116	; (adr r3, 8001cd0 <updateADCs+0x238>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fccb 	bl	80005f8 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <updateADCs+0x24c>)
 8001c70:	f7fe fdec 	bl	800084c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <updateADCs+0x260>)
 8001c82:	f7fe fcb9 	bl	80005f8 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ff8b 	bl	8000ba8 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <updateADCs+0x274>)
 8001c96:	6013      	str	r3, [r2, #0]
    temp_fet = HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_1);
 8001c98:	2101      	movs	r1, #1
 8001c9a:	481d      	ldr	r0, [pc, #116]	; (8001d10 <updateADCs+0x278>)
 8001c9c:	f001 fba2 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <updateADCs+0x27c>)
 8001ca6:	601a      	str	r2, [r3, #0]
    temp_coil_1 = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_2);
 8001ca8:	2102      	movs	r1, #2
 8001caa:	4815      	ldr	r0, [pc, #84]	; (8001d00 <updateADCs+0x268>)
 8001cac:	f001 fb9a 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <updateADCs+0x280>)
 8001cb6:	601a      	str	r2, [r3, #0]
    temp_coil_2 = HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_2);
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4815      	ldr	r0, [pc, #84]	; (8001d10 <updateADCs+0x278>)
 8001cbc:	f001 fb92 	bl	80033e4 <HAL_ADCEx_InjectedGetValue>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <updateADCs+0x284>)
 8001cc6:	601a      	str	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	bdb0      	pop	{r4, r5, r7, pc}
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	66666666 	.word	0x66666666
 8001cd4:	400a6666 	.word	0x400a6666
 8001cd8:	e353f7cf 	.word	0xe353f7cf
 8001cdc:	3ff09ba5 	.word	0x3ff09ba5
 8001ce0:	200001f8 	.word	0x200001f8
 8001ce4:	40b00000 	.word	0x40b00000
 8001ce8:	40260000 	.word	0x40260000
 8001cec:	20000608 	.word	0x20000608
 8001cf0:	2000060c 	.word	0x2000060c
 8001cf4:	40350000 	.word	0x40350000
 8001cf8:	40240000 	.word	0x40240000
 8001cfc:	20000610 	.word	0x20000610
 8001d00:	20000248 	.word	0x20000248
 8001d04:	43550000 	.word	0x43550000
 8001d08:	20000604 	.word	0x20000604
 8001d0c:	20000614 	.word	0x20000614
 8001d10:	20000298 	.word	0x20000298
 8001d14:	20000620 	.word	0x20000620
 8001d18:	20000618 	.word	0x20000618
 8001d1c:	2000061c 	.word	0x2000061c

08001d20 <protecter>:

void protecter(void){
 8001d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af06      	add	r7, sp, #24
    if (batt_v < 20 || batt_cs > 10 || gd_16p < 10 || gd_16m > -5)
 8001d28:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <protecter+0xe0>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	d41e      	bmi.n	8001d7a <protecter+0x5a>
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <protecter+0xe4>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	dc14      	bgt.n	8001d7a <protecter+0x5a>
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <protecter+0xe8>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d40a      	bmi.n	8001d7a <protecter+0x5a>
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <protecter+0xec>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	dc00      	bgt.n	8001d7a <protecter+0x5a>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
    }
}
 8001d78:	e03e      	b.n	8001df8 <protecter+0xd8>
      printf("[ERR] power line error!!! / battv %6.2f battcs %6.3f / GDp %+5.2f GDm %+5.2f\n", batt_v, batt_cs, gd_16p, gd_16m);
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <protecter+0xe0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbe2 	bl	8000548 <__aeabi_f2d>
 8001d84:	4682      	mov	sl, r0
 8001d86:	468b      	mov	fp, r1
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <protecter+0xe4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbdb 	bl	8000548 <__aeabi_f2d>
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <protecter+0xe8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbd4 	bl	8000548 <__aeabi_f2d>
 8001da0:	4680      	mov	r8, r0
 8001da2:	4689      	mov	r9, r1
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <protecter+0xec>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbcd 	bl	8000548 <__aeabi_f2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001db6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dba:	e9cd 4500 	strd	r4, r5, [sp]
 8001dbe:	4652      	mov	r2, sl
 8001dc0:	465b      	mov	r3, fp
 8001dc2:	4813      	ldr	r0, [pc, #76]	; (8001e10 <protecter+0xf0>)
 8001dc4:	f007 ffea 	bl	8009d9c <iprintf>
      kick_cnt = 0;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <protecter+0xf4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
      boost_cnt = 0;
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <protecter+0xf8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <protecter+0xfc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <protecter+0xfc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <protecter+0x100>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df2:	480c      	ldr	r0, [pc, #48]	; (8001e24 <protecter+0x104>)
 8001df4:	f003 fb88 	bl	8005508 <HAL_GPIO_WritePin>
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e00:	20000608 	.word	0x20000608
 8001e04:	20000614 	.word	0x20000614
 8001e08:	2000060c 	.word	0x2000060c
 8001e0c:	20000610 	.word	0x20000610
 8001e10:	0800c594 	.word	0x0800c594
 8001e14:	200005e0 	.word	0x200005e0
 8001e18:	200005e4 	.word	0x200005e4
 8001e1c:	200006d8 	.word	0x200006d8
 8001e20:	2000068c 	.word	0x2000068c
 8001e24:	48000800 	.word	0x48000800

08001e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2c:	b091      	sub	sp, #68	; 0x44
 8001e2e:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e30:	f000 ff58 	bl	8002ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e34:	f000 fa78 	bl	8002328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e38:	f7ff fbfc 	bl	8001634 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e3c:	f7ff fbb8 	bl	80015b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e40:	f7fe ff02 	bl	8000c48 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001e44:	f7fe ff92 	bl	8000d6c <MX_ADC3_Init>
  MX_ADC4_Init();
 8001e48:	f7ff f824 	bl	8000e94 <MX_ADC4_Init>
  MX_CAN_Init();
 8001e4c:	f7ff fafa 	bl	8001444 <MX_CAN_Init>
  MX_SPI1_Init();
 8001e50:	f000 fad0 	bl	80023f4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001e54:	f000 fc96 	bl	8002784 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e58:	f000 fcee 	bl	8002838 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001e5c:	f000 fe72 	bl	8002b44 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001e60:	f000 fd50 	bl	8002904 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // kick
  HAL_TIM_PWM_Init(&htim3);
 8001e64:	4896      	ldr	r0, [pc, #600]	; (80020c0 <main+0x298>)
 8001e66:	f005 fbad 	bl	80075c4 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001e6a:	4b95      	ldr	r3, [pc, #596]	; (80020c0 <main+0x298>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001e72:	4b93      	ldr	r3, [pc, #588]	; (80020c0 <main+0x298>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8001e7a:	4b91      	ldr	r3, [pc, #580]	; (80020c0 <main+0x298>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e84:	4b8e      	ldr	r3, [pc, #568]	; (80020c0 <main+0x298>)
 8001e86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e8a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <main+0x298>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e96:	4b8a      	ldr	r3, [pc, #552]	; (80020c0 <main+0x298>)
 8001e98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e9c:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4887      	ldr	r0, [pc, #540]	; (80020c0 <main+0x298>)
 8001ea2:	f005 fbe7 	bl	8007674 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4885      	ldr	r0, [pc, #532]	; (80020c0 <main+0x298>)
 8001eaa:	f005 fbe3 	bl	8007674 <HAL_TIM_PWM_Start>

  // boost
  HAL_TIM_PWM_Init(&htim2);
 8001eae:	4885      	ldr	r0, [pc, #532]	; (80020c4 <main+0x29c>)
 8001eb0:	f005 fb88 	bl	80075c4 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001eb4:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <main+0x29c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 8001ebc:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <main+0x29c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec6:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <main+0x29c>)
 8001ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ecc:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001ece:	210c      	movs	r1, #12
 8001ed0:	487c      	ldr	r0, [pc, #496]	; (80020c4 <main+0x29c>)
 8001ed2:	f005 fbcf 	bl	8007674 <HAL_TIM_PWM_Start>

  // GD negative PS
  HAL_TIM_PWM_Init(&htim4);
 8001ed6:	487c      	ldr	r0, [pc, #496]	; (80020c8 <main+0x2a0>)
 8001ed8:	f005 fb74 	bl	80075c4 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
 8001edc:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <main+0x2a0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim4, 2000);
 8001ee6:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <main+0x2a0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ef0:	4b75      	ldr	r3, [pc, #468]	; (80020c8 <main+0x2a0>)
 8001ef2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ef6:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001ef8:	2104      	movs	r1, #4
 8001efa:	4873      	ldr	r0, [pc, #460]	; (80020c8 <main+0x2a0>)
 8001efc:	f005 fbba 	bl	8007674 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 8001f00:	2064      	movs	r0, #100	; 0x64
 8001f02:	f000 ff55 	bl	8002db0 <HAL_Delay>
  // wait charging

  // can init
  CAN_Filter_Init();
 8001f06:	f7ff fb1f 	bl	8001548 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8001f0a:	4870      	ldr	r0, [pc, #448]	; (80020cc <main+0x2a4>)
 8001f0c:	f002 f9a7 	bl	800425e <HAL_CAN_Start>

  setbuf(stdout, NULL);
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <main+0x2a8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f007 ffcd 	bl	8009eb8 <setbuf>

  HAL_UART_Init(&huart1);
 8001f1e:	486d      	ldr	r0, [pc, #436]	; (80020d4 <main+0x2ac>)
 8001f20:	f006 f9c8 	bl	80082b4 <HAL_UART_Init>

  p("p()1 hogehoge %d ,%f\n", 10, 1.0);
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b6b      	ldr	r3, [pc, #428]	; (80020d8 <main+0x2b0>)
 8001f2a:	210a      	movs	r1, #10
 8001f2c:	486b      	ldr	r0, [pc, #428]	; (80020dc <main+0x2b4>)
 8001f2e:	f7ff fc67 	bl	8001800 <p>
  p("p()2 hogehoge %d ,%f\n", 10, 1.0);
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <main+0x2b0>)
 8001f38:	210a      	movs	r1, #10
 8001f3a:	4869      	ldr	r0, [pc, #420]	; (80020e0 <main+0x2b8>)
 8001f3c:	f7ff fc60 	bl	8001800 <p>
  p("p()3 hogehoge %d ,%f\n", 10, 1.0);
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <main+0x2b0>)
 8001f46:	210a      	movs	r1, #10
 8001f48:	4866      	ldr	r0, [pc, #408]	; (80020e4 <main+0x2bc>)
 8001f4a:	f7ff fc59 	bl	8001800 <p>
  p("p()1 hogehoge %d ,%f\n", 10, 1.0);
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <main+0x2b0>)
 8001f54:	210a      	movs	r1, #10
 8001f56:	4861      	ldr	r0, [pc, #388]	; (80020dc <main+0x2b4>)
 8001f58:	f7ff fc52 	bl	8001800 <p>
  p("p()2 hogehoge %d ,%f\n", 10, 1.0);
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <main+0x2b0>)
 8001f62:	210a      	movs	r1, #10
 8001f64:	485e      	ldr	r0, [pc, #376]	; (80020e0 <main+0x2b8>)
 8001f66:	f7ff fc4b 	bl	8001800 <p>
  p("p()3 hogehoge %d ,%f\n", 10, 1.0);
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <main+0x2b0>)
 8001f70:	210a      	movs	r1, #10
 8001f72:	485c      	ldr	r0, [pc, #368]	; (80020e4 <main+0x2bc>)
 8001f74:	f7ff fc44 	bl	8001800 <p>

  HAL_ADC_Start(&hadc1);
 8001f78:	485b      	ldr	r0, [pc, #364]	; (80020e8 <main+0x2c0>)
 8001f7a:	f001 f91d 	bl	80031b8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8001f7e:	485b      	ldr	r0, [pc, #364]	; (80020ec <main+0x2c4>)
 8001f80:	f001 f91a 	bl	80031b8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 8001f84:	485a      	ldr	r0, [pc, #360]	; (80020f0 <main+0x2c8>)
 8001f86:	f001 f917 	bl	80031b8 <HAL_ADC_Start>

  HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4859      	ldr	r0, [pc, #356]	; (80020f4 <main+0x2cc>)
 8001f90:	f003 faba 	bl	8005508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2110      	movs	r1, #16
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	f003 fab4 	bl	8005508 <HAL_GPIO_WritePin>
      HAL_Delay(100);
      sendCan();
      printf("can rx : %d\n",can_rx_cnt);
      can_rx_cnt = 0;
  }*/
  if (is_connect_ADNS3080())
 8001fa0:	f7ff f95c 	bl	800125c <is_connect_ADNS3080>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <main+0x1a4>
  {
    printf("ADNS3080 OK!\n");
 8001faa:	4853      	ldr	r0, [pc, #332]	; (80020f8 <main+0x2d0>)
 8001fac:	f007 ff7c 	bl	8009ea8 <puts>
    {
      /* code */
    }
  }

  init_ADNS3080(true);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff f981 	bl	80012b8 <init_ADNS3080>

  bool frame_capture_mdoe = false;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_RESET)
 8001fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbe:	484d      	ldr	r0, [pc, #308]	; (80020f4 <main+0x2cc>)
 8001fc0:	f003 fa8a 	bl	80054d8 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11f      	bne.n	800200a <main+0x1e2>
 8001fca:	e003      	b.n	8001fd4 <main+0x1ac>
    printf("ADNS3080 not found...\n");
 8001fcc:	484b      	ldr	r0, [pc, #300]	; (80020fc <main+0x2d4>)
 8001fce:	f007 ff6b 	bl	8009ea8 <puts>
    while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <main+0x1aa>
  {
    frame_capture_mdoe = true;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
  }
  while (frame_capture_mdoe)
 8001fd8:	e017      	b.n	800200a <main+0x1e2>
  {
    // frame_print_ADNS3080();
    HAL_Delay(1);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f000 fee8 	bl	8002db0 <HAL_Delay>

    update_ADNS3080();
 8001fe0:	f7ff f9c0 	bl	8001364 <update_ADNS3080>
    printf("\n\n%+3d %+3d %4d\n\n", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 8001fe4:	f7ff fa0a 	bl	80013fc <get_DeltaX_ADNS3080>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461c      	mov	r4, r3
 8001fec:	f7ff fa12 	bl	8001414 <get_DeltaY_ADNS3080>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	f7ff fa1a 	bl	800142c <get_Qualty_ADNS3080>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	462a      	mov	r2, r5
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	4840      	ldr	r0, [pc, #256]	; (8002100 <main+0x2d8>)
 8002000:	f007 fecc 	bl	8009d9c <iprintf>
    HAL_Delay(100);
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	f000 fed3 	bl	8002db0 <HAL_Delay>
  while (frame_capture_mdoe)
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e4      	bne.n	8001fda <main+0x1b2>
  }

  setTargetVoltage(400);
 8002010:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8002104 <main+0x2dc>
 8002014:	f7ff fc32 	bl	800187c <setTargetVoltage>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    update_ADNS3080();
 8002018:	f7ff f9a4 	bl	8001364 <update_ADNS3080>
    sendCanMouse(get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080());
 800201c:	f7ff f9ee 	bl	80013fc <get_DeltaX_ADNS3080>
 8002020:	4603      	mov	r3, r0
 8002022:	b21c      	sxth	r4, r3
 8002024:	f7ff f9f6 	bl	8001414 <get_DeltaY_ADNS3080>
 8002028:	4603      	mov	r3, r0
 800202a:	b21b      	sxth	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff fd04 	bl	8001a3c <sendCanMouse>

    updateADCs();
 8002034:	f7ff fd30 	bl	8001a98 <updateADCs>
    protecter();
 8002038:	f7ff fe72 	bl	8001d20 <protecter>

    loop_cnt++;
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <main+0x2e0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a31      	ldr	r2, [pc, #196]	; (8002108 <main+0x2e0>)
 8002044:	6013      	str	r3, [r2, #0]
    if (kick_cnt > 0)
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <main+0x2e4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d066      	beq.n	800211c <main+0x2f4>
    {
        // kick!!!
        if(power_cmd.kick_chip_selected){
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <main+0x2e8>)
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <main+0x242>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, power_cmd.kick_power);    	  // chip
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <main+0x2e8>)
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <main+0x298>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <main+0x298>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	635a      	str	r2, [r3, #52]	; 0x34
 8002068:	e008      	b.n	800207c <main+0x254>
        }else{
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, power_cmd.kick_power);	// straight
 800206a:	4b29      	ldr	r3, [pc, #164]	; (8002110 <main+0x2e8>)
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <main+0x298>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	635a      	str	r2, [r3, #52]	; 0x34
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <main+0x298>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
        }
      kick_cnt--;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <main+0x2e4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <main+0x2e4>)
 8002084:	6013      	str	r3, [r2, #0]
      if (kick_cnt == 0)
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <main+0x2e4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d14e      	bne.n	800212c <main+0x304>
      {
        printf("kick end!!\n");
 800208e:	4821      	ldr	r0, [pc, #132]	; (8002114 <main+0x2ec>)
 8002090:	f007 ff0a 	bl	8009ea8 <puts>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <main+0x298>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <main+0x298>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
        if(power_cmd.charge_enabled){
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <main+0x2e8>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d03f      	beq.n	800212c <main+0x304>
        	printf("continue charge!!\n");
 80020ac:	481a      	ldr	r0, [pc, #104]	; (8002118 <main+0x2f0>)
 80020ae:	f007 fefb 	bl	8009ea8 <puts>
            HAL_Delay(10);
 80020b2:	200a      	movs	r0, #10
 80020b4:	f000 fe7c 	bl	8002db0 <HAL_Delay>
        	startCharge();
 80020b8:	f7ff fc3e 	bl	8001938 <startCharge>
 80020bc:	e036      	b.n	800212c <main+0x304>
 80020be:	bf00      	nop
 80020c0:	200006d8 	.word	0x200006d8
 80020c4:	2000068c 	.word	0x2000068c
 80020c8:	20000724 	.word	0x20000724
 80020cc:	200003e4 	.word	0x200003e4
 80020d0:	2000000c 	.word	0x2000000c
 80020d4:	20000770 	.word	0x20000770
 80020d8:	3ff00000 	.word	0x3ff00000
 80020dc:	0800c5e4 	.word	0x0800c5e4
 80020e0:	0800c5fc 	.word	0x0800c5fc
 80020e4:	0800c614 	.word	0x0800c614
 80020e8:	200001f8 	.word	0x200001f8
 80020ec:	20000248 	.word	0x20000248
 80020f0:	20000298 	.word	0x20000298
 80020f4:	48000400 	.word	0x48000400
 80020f8:	0800c62c 	.word	0x0800c62c
 80020fc:	0800c63c 	.word	0x0800c63c
 8002100:	0800c654 	.word	0x0800c654
 8002104:	43c80000 	.word	0x43c80000
 8002108:	200005dc 	.word	0x200005dc
 800210c:	200005e0 	.word	0x200005e0
 8002110:	200005c0 	.word	0x200005c0
 8002114:	0800c668 	.word	0x0800c668
 8002118:	0800c674 	.word	0x0800c674
      }
    }
    else
    {
    	// idol
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800211c:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <main+0x4ac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002124:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <main+0x4ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2200      	movs	r2, #0
 800212a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    // User SW control
    if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_RESET)
 800212c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002130:	4869      	ldr	r0, [pc, #420]	; (80022d8 <main+0x4b0>)
 8002132:	f003 f9d1 	bl	80054d8 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <main+0x320>
    {
    	printf("[USR] boost start!!\n");
 800213c:	4867      	ldr	r0, [pc, #412]	; (80022dc <main+0x4b4>)
 800213e:	f007 feb3 	bl	8009ea8 <puts>
    	startKick(255);
 8002142:	20ff      	movs	r0, #255	; 0xff
 8002144:	f7ff fbc6 	bl	80018d4 <startKick>
    }
    if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET)
 8002148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800214c:	4862      	ldr	r0, [pc, #392]	; (80022d8 <main+0x4b0>)
 800214e:	f003 f9c3 	bl	80054d8 <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d104      	bne.n	8002162 <main+0x33a>
    {
    	printf("[USR] boost start!!\n");
 8002158:	4860      	ldr	r0, [pc, #384]	; (80022dc <main+0x4b4>)
 800215a:	f007 fea5 	bl	8009ea8 <puts>
    	startCharge();
 800215e:	f7ff fbeb 	bl	8001938 <startCharge>
    }


    // debug print
    if (loop_cnt > 100)
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <main+0x4b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d95c      	bls.n	8002224 <main+0x3fc>
    {
      // printf("%8ld %8ld %8ld / ",HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2),HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3));
      // printf("%8ld %8ld %8ld / ",HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_2),HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_3));
      // printf("%8ld %8ld\n",HAL_ADCEx_InjectedGetValue(&hadc4,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc4,ADC_INJECTED_RANK_2));
      // HAL_ADCEx_InjectedStart(&hadc1);
    	printf("BV %3.0f, CK %d, CH %d ",power_cmd.target_voltage,power_cmd.kick_chip_selected,power_cmd.charge_enabled);
 800216a:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <main+0x4bc>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f9ea 	bl	8000548 <__aeabi_f2d>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	495a      	ldr	r1, [pc, #360]	; (80022e4 <main+0x4bc>)
 800217a:	7849      	ldrb	r1, [r1, #1]
 800217c:	4608      	mov	r0, r1
 800217e:	4959      	ldr	r1, [pc, #356]	; (80022e4 <main+0x4bc>)
 8002180:	7809      	ldrb	r1, [r1, #0]
 8002182:	9101      	str	r1, [sp, #4]
 8002184:	9000      	str	r0, [sp, #0]
 8002186:	4858      	ldr	r0, [pc, #352]	; (80022e8 <main+0x4c0>)
 8002188:	f007 fe08 	bl	8009d9c <iprintf>
      printf("%+3d %+3d %4d ", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 800218c:	f7ff f936 	bl	80013fc <get_DeltaX_ADNS3080>
 8002190:	4603      	mov	r3, r0
 8002192:	461c      	mov	r4, r3
 8002194:	f7ff f93e 	bl	8001414 <get_DeltaY_ADNS3080>
 8002198:	4603      	mov	r3, r0
 800219a:	461d      	mov	r5, r3
 800219c:	f7ff f946 	bl	800142c <get_Qualty_ADNS3080>
 80021a0:	4603      	mov	r3, r0
 80021a2:	462a      	mov	r2, r5
 80021a4:	4621      	mov	r1, r4
 80021a6:	4851      	ldr	r0, [pc, #324]	; (80022ec <main+0x4c4>)
 80021a8:	f007 fdf8 	bl	8009d9c <iprintf>
      printf("BattV %4.2f, GD16P %+5.2f GD16M %+5.2f BoostV %5.2f, BattCS %+5.2f temp0 %d temp1 %d temp2 %d \n", batt_v, gd_16p, gd_16m, boost_v, batt_cs, temp_fet, temp_coil_1, temp_coil_2);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <main+0x4c8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9c9 	bl	8000548 <__aeabi_f2d>
 80021b6:	e9c7 0100 	strd	r0, r1, [r7]
 80021ba:	4b4e      	ldr	r3, [pc, #312]	; (80022f4 <main+0x4cc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9c2 	bl	8000548 <__aeabi_f2d>
 80021c4:	4604      	mov	r4, r0
 80021c6:	460d      	mov	r5, r1
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <main+0x4d0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9bb 	bl	8000548 <__aeabi_f2d>
 80021d2:	4680      	mov	r8, r0
 80021d4:	4689      	mov	r9, r1
 80021d6:	4b49      	ldr	r3, [pc, #292]	; (80022fc <main+0x4d4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9b4 	bl	8000548 <__aeabi_f2d>
 80021e0:	4682      	mov	sl, r0
 80021e2:	468b      	mov	fp, r1
 80021e4:	4b46      	ldr	r3, [pc, #280]	; (8002300 <main+0x4d8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f9ad 	bl	8000548 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4944      	ldr	r1, [pc, #272]	; (8002304 <main+0x4dc>)
 80021f4:	6809      	ldr	r1, [r1, #0]
 80021f6:	4844      	ldr	r0, [pc, #272]	; (8002308 <main+0x4e0>)
 80021f8:	6800      	ldr	r0, [r0, #0]
 80021fa:	4e44      	ldr	r6, [pc, #272]	; (800230c <main+0x4e4>)
 80021fc:	6836      	ldr	r6, [r6, #0]
 80021fe:	960a      	str	r6, [sp, #40]	; 0x28
 8002200:	9009      	str	r0, [sp, #36]	; 0x24
 8002202:	9108      	str	r1, [sp, #32]
 8002204:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002208:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800220c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002210:	e9cd 4500 	strd	r4, r5, [sp]
 8002214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002218:	483d      	ldr	r0, [pc, #244]	; (8002310 <main+0x4e8>)
 800221a:	f007 fdbf 	bl	8009d9c <iprintf>
      // printf("adc1 : ch1 %8ld / ch2 %8ld / ch3 %8ld / adc3: ch1 %8ld / ch5 %8ld / ch12 %8ld / adc4 : ch3 %8ld / ch4 %8ld \n", adc1_raw_data[0], adc1_raw_data[1], adc1_raw_data[2], adc3_raw_data[0],adc3_raw_data[1],adc3_raw_data[2],adc4_raw_data[0],adc4_raw_data[1]);
      loop_cnt = 0;
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <main+0x4b8>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    }

    //sendCan();
    HAL_Delay(1);
 8002224:	2001      	movs	r0, #1
 8002226:	f000 fdc3 	bl	8002db0 <HAL_Delay>
    if (boost_v < power_cmd.target_voltage && boost_cnt > 0)
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <main+0x4bc>)
 800222c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002230:	4b32      	ldr	r3, [pc, #200]	; (80022fc <main+0x4d4>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	dd1f      	ble.n	8002280 <main+0x458>
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <main+0x4ec>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	dd1b      	ble.n	8002280 <main+0x458>
    {
      boost_cnt--;
 8002248:	4b32      	ldr	r3, [pc, #200]	; (8002314 <main+0x4ec>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	4a31      	ldr	r2, [pc, #196]	; (8002314 <main+0x4ec>)
 8002250:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 600);
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <main+0x4f0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f44f 7216 	mov.w	r2, #600	; 0x258
 800225a:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002262:	482e      	ldr	r0, [pc, #184]	; (800231c <main+0x4f4>)
 8002264:	f003 f950 	bl	8005508 <HAL_GPIO_WritePin>
      if (boost_cnt == 0)
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <main+0x4ec>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d118      	bne.n	80022a2 <main+0x47a>
      {
        printf("[ERR] boost timeout!!\n");
 8002270:	482b      	ldr	r0, [pc, #172]	; (8002320 <main+0x4f8>)
 8002272:	f007 fe19 	bl	8009ea8 <puts>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <main+0x4f0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
      if (boost_cnt == 0)
 800227e:	e010      	b.n	80022a2 <main+0x47a>
      }
    }
    else
    {
      if (boost_cnt != 0)
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <main+0x4ec>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <main+0x466>
      {
        //printf("boost end!!\n\n !! %d cycle !!\n\n", boost_cnt);
        boost_cnt = 0;
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <main+0x4ec>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
      }
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <main+0x4f0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800229c:	481f      	ldr	r0, [pc, #124]	; (800231c <main+0x4f4>)
 800229e:	f003 f933 	bl	8005508 <HAL_GPIO_WritePin>
    }

    // charge-indication
    if (boost_v > 100)
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <main+0x4d4>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002324 <main+0x4fc>
 80022ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	dd06      	ble.n	80022c4 <main+0x49c>
    {
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80022b6:	2201      	movs	r2, #1
 80022b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022bc:	4817      	ldr	r0, [pc, #92]	; (800231c <main+0x4f4>)
 80022be:	f003 f923 	bl	8005508 <HAL_GPIO_WritePin>
 80022c2:	e6a9      	b.n	8002018 <main+0x1f0>
    }
    else
    {
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ca:	4814      	ldr	r0, [pc, #80]	; (800231c <main+0x4f4>)
 80022cc:	f003 f91c 	bl	8005508 <HAL_GPIO_WritePin>
    update_ADNS3080();
 80022d0:	e6a2      	b.n	8002018 <main+0x1f0>
 80022d2:	bf00      	nop
 80022d4:	200006d8 	.word	0x200006d8
 80022d8:	48000400 	.word	0x48000400
 80022dc:	0800c688 	.word	0x0800c688
 80022e0:	200005dc 	.word	0x200005dc
 80022e4:	200005c0 	.word	0x200005c0
 80022e8:	0800c69c 	.word	0x0800c69c
 80022ec:	0800c6b4 	.word	0x0800c6b4
 80022f0:	20000608 	.word	0x20000608
 80022f4:	2000060c 	.word	0x2000060c
 80022f8:	20000610 	.word	0x20000610
 80022fc:	20000604 	.word	0x20000604
 8002300:	20000614 	.word	0x20000614
 8002304:	20000620 	.word	0x20000620
 8002308:	20000618 	.word	0x20000618
 800230c:	2000061c 	.word	0x2000061c
 8002310:	0800c6c4 	.word	0x0800c6c4
 8002314:	200005e4 	.word	0x200005e4
 8002318:	2000068c 	.word	0x2000068c
 800231c:	48000800 	.word	0x48000800
 8002320:	0800c724 	.word	0x0800c724
 8002324:	42c80000 	.word	0x42c80000

08002328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b09e      	sub	sp, #120	; 0x78
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002332:	2228      	movs	r2, #40	; 0x28
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f007 f8be 	bl	80094b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234c:	463b      	mov	r3, r7
 800234e:	223c      	movs	r2, #60	; 0x3c
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f007 f8b0 	bl	80094b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002358:	2301      	movs	r3, #1
 800235a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800235c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002360:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002362:	2300      	movs	r3, #0
 8002364:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002366:	2301      	movs	r3, #1
 8002368:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236a:	2302      	movs	r3, #2
 800236c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800236e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002372:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002374:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002378:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800237e:	4618      	mov	r0, r3
 8002380:	f003 f8da 	bl	8005538 <HAL_RCC_OscConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800238a:	f000 f82e 	bl	80023ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238e:	230f      	movs	r3, #15
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002392:	2302      	movs	r3, #2
 8002394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800239a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023a8:	2102      	movs	r1, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 f902 	bl	80065b4 <HAL_RCC_ClockConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80023b6:	f000 f818 	bl	80023ea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 80023ba:	f240 1381 	movw	r3, #385	; 0x181
 80023be:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80023c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80023ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d0:	463b      	mov	r3, r7
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 fb24 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80023de:	f000 f804 	bl	80023ea <Error_Handler>
  }
}
 80023e2:	bf00      	nop
 80023e4:	3778      	adds	r7, #120	; 0x78
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ee:	b672      	cpsid	i
}
 80023f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <Error_Handler+0x8>

080023f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <MX_SPI1_Init+0x74>)
 80023fa:	4a1c      	ldr	r2, [pc, #112]	; (800246c <MX_SPI1_Init+0x78>)
 80023fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <MX_SPI1_Init+0x74>)
 8002400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <MX_SPI1_Init+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <MX_SPI1_Init+0x74>)
 800240e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002412:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_SPI1_Init+0x74>)
 8002416:	2202      	movs	r2, #2
 8002418:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <MX_SPI1_Init+0x74>)
 800241c:	2201      	movs	r2, #1
 800241e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_SPI1_Init+0x74>)
 8002422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002426:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_SPI1_Init+0x74>)
 800242a:	2220      	movs	r2, #32
 800242c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_SPI1_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_SPI1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <MX_SPI1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_SPI1_Init+0x74>)
 8002442:	2207      	movs	r2, #7
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <MX_SPI1_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_SPI1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_SPI1_Init+0x74>)
 8002454:	f004 fc94 	bl	8006d80 <HAL_SPI_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800245e:	f7ff ffc4 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000624 	.word	0x20000624
 800246c:	40013000 	.word	0x40013000

08002470 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_SPI_MspInit+0x7c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d127      	bne.n	80024e2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_SPI_MspInit+0x80>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_SPI_MspInit+0x80>)
 8002498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800249c:	6193      	str	r3, [r2, #24]
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_SPI_MspInit+0x80>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_SPI_MspInit+0x80>)
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <HAL_SPI_MspInit+0x80>)
 80024b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b4:	6153      	str	r3, [r2, #20]
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_SPI_MspInit+0x80>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024c2:	2338      	movs	r3, #56	; 0x38
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d2:	2305      	movs	r3, #5
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	4805      	ldr	r0, [pc, #20]	; (80024f4 <HAL_SPI_MspInit+0x84>)
 80024de:	f002 fe81 	bl	80051e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40013000 	.word	0x40013000
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000400 	.word	0x48000400

080024f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_MspInit+0x44>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_MspInit+0x44>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6193      	str	r3, [r2, #24]
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_MspInit+0x44>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_MspInit+0x44>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_MspInit+0x44>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_MspInit+0x44>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <NMI_Handler+0x4>

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 fbf0 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <DMA1_Channel1_IRQHandler+0x10>)
 800259a:	f002 fd15 	bl	8004fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002e8 	.word	0x200002e8

080025a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <DMA1_Channel4_IRQHandler+0x10>)
 80025ae:	f002 fd0b 	bl	8004fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200007f4 	.word	0x200007f4

080025bc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80025c2:	f002 f8a3 	bl	800470c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200003e4 	.word	0x200003e4

080025d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <USART1_IRQHandler+0x10>)
 80025d6:	f005 ff4b 	bl	8008470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000770 	.word	0x20000770

080025e4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA2_Channel2_IRQHandler+0x10>)
 80025ea:	f002 fced 	bl	8004fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000370 	.word	0x20000370

080025f8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <DMA2_Channel5_IRQHandler+0x10>)
 80025fe:	f002 fce3 	bl	8004fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000032c 	.word	0x2000032c

0800260c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
	return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_kill>:

int _kill(int pid, int sig)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002626:	f006 ff0f 	bl	8009448 <__errno>
 800262a:	4603      	mov	r3, r0
 800262c:	2216      	movs	r2, #22
 800262e:	601a      	str	r2, [r3, #0]
	return -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_exit>:

void _exit (int status)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ffe7 	bl	800261c <_kill>
	while (1) {}		/* Make sure we hang here */
 800264e:	e7fe      	b.n	800264e <_exit+0x12>

08002650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e00a      	b.n	8002678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002662:	f3af 8000 	nop.w
 8002666:	4601      	mov	r1, r0
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	60ba      	str	r2, [r7, #8]
 800266e:	b2ca      	uxtb	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf0      	blt.n	8002662 <_read+0x12>
	}

return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_close>:
	}
	return len;
}

int _close(int file)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
	return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b2:	605a      	str	r2, [r3, #4]
	return 0;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_isatty>:

int _isatty(int file)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	return 1;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
	return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026fc:	4a14      	ldr	r2, [pc, #80]	; (8002750 <_sbrk+0x5c>)
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <_sbrk+0x60>)
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <_sbrk+0x64>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <_sbrk+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002724:	f006 fe90 	bl	8009448 <__errno>
 8002728:	4603      	mov	r3, r0
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e009      	b.n	8002748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <_sbrk+0x64>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20008000 	.word	0x20008000
 8002754:	00000400 	.word	0x00000400
 8002758:	20000688 	.word	0x20000688
 800275c:	20000850 	.word	0x20000850

08002760 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <SystemInit+0x20>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <SystemInit+0x20>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278a:	f107 031c 	add.w	r3, r7, #28
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002796:	463b      	mov	r3, r7
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
 80027a4:	615a      	str	r2, [r3, #20]
 80027a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027d0:	4818      	ldr	r0, [pc, #96]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027d2:	f004 fef7 	bl	80075c4 <HAL_TIM_PWM_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80027dc:	f7ff fe05 	bl	80023ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4811      	ldr	r0, [pc, #68]	; (8002834 <MX_TIM2_Init+0xb0>)
 80027f0:	f005 fce0 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80027fa:	f7ff fdf6 	bl	80023ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fe:	2360      	movs	r3, #96	; 0x60
 8002800:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800280e:	463b      	mov	r3, r7
 8002810:	220c      	movs	r2, #12
 8002812:	4619      	mov	r1, r3
 8002814:	4807      	ldr	r0, [pc, #28]	; (8002834 <MX_TIM2_Init+0xb0>)
 8002816:	f005 f82d 	bl	8007874 <HAL_TIM_PWM_ConfigChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002820:	f7ff fde3 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <MX_TIM2_Init+0xb0>)
 8002826:	f000 f90d 	bl	8002a44 <HAL_TIM_MspPostInit>

}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000068c 	.word	0x2000068c

08002838 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284a:	463b      	mov	r3, r7
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
 8002858:	615a      	str	r2, [r3, #20]
 800285a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800285c:	4b27      	ldr	r3, [pc, #156]	; (80028fc <MX_TIM3_Init+0xc4>)
 800285e:	4a28      	ldr	r2, [pc, #160]	; (8002900 <MX_TIM3_Init+0xc8>)
 8002860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <MX_TIM3_Init+0xc4>)
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <MX_TIM3_Init+0xc4>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <MX_TIM3_Init+0xc4>)
 8002870:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <MX_TIM3_Init+0xc4>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <MX_TIM3_Init+0xc4>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002882:	481e      	ldr	r0, [pc, #120]	; (80028fc <MX_TIM3_Init+0xc4>)
 8002884:	f004 fe9e 	bl	80075c4 <HAL_TIM_PWM_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800288e:	f7ff fdac 	bl	80023ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800289a:	f107 031c 	add.w	r3, r7, #28
 800289e:	4619      	mov	r1, r3
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <MX_TIM3_Init+0xc4>)
 80028a2:	f005 fc87 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80028ac:	f7ff fd9d 	bl	80023ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b0:	2360      	movs	r3, #96	; 0x60
 80028b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	2200      	movs	r2, #0
 80028c4:	4619      	mov	r1, r3
 80028c6:	480d      	ldr	r0, [pc, #52]	; (80028fc <MX_TIM3_Init+0xc4>)
 80028c8:	f004 ffd4 	bl	8007874 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80028d2:	f7ff fd8a 	bl	80023ea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028d6:	463b      	mov	r3, r7
 80028d8:	2204      	movs	r2, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <MX_TIM3_Init+0xc4>)
 80028de:	f004 ffc9 	bl	8007874 <HAL_TIM_PWM_ConfigChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80028e8:	f7ff fd7f 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <MX_TIM3_Init+0xc4>)
 80028ee:	f000 f8a9 	bl	8002a44 <HAL_TIM_MspPostInit>

}
 80028f2:	bf00      	nop
 80028f4:	3728      	adds	r7, #40	; 0x28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200006d8 	.word	0x200006d8
 8002900:	40000400 	.word	0x40000400

08002904 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002916:	463b      	mov	r3, r7
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
 8002924:	615a      	str	r2, [r3, #20]
 8002926:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <MX_TIM4_Init+0xac>)
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <MX_TIM4_Init+0xb0>)
 800292c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800292e:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <MX_TIM4_Init+0xac>)
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <MX_TIM4_Init+0xac>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600;
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_TIM4_Init+0xac>)
 800293c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002940:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <MX_TIM4_Init+0xac>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <MX_TIM4_Init+0xac>)
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800294e:	4818      	ldr	r0, [pc, #96]	; (80029b0 <MX_TIM4_Init+0xac>)
 8002950:	f004 fe38 	bl	80075c4 <HAL_TIM_PWM_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800295a:	f7ff fd46 	bl	80023ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	4619      	mov	r1, r3
 800296c:	4810      	ldr	r0, [pc, #64]	; (80029b0 <MX_TIM4_Init+0xac>)
 800296e:	f005 fc21 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002978:	f7ff fd37 	bl	80023ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297c:	2360      	movs	r3, #96	; 0x60
 800297e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800298c:	463b      	mov	r3, r7
 800298e:	2204      	movs	r2, #4
 8002990:	4619      	mov	r1, r3
 8002992:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_TIM4_Init+0xac>)
 8002994:	f004 ff6e 	bl	8007874 <HAL_TIM_PWM_ConfigChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800299e:	f7ff fd24 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029a2:	4803      	ldr	r0, [pc, #12]	; (80029b0 <MX_TIM4_Init+0xac>)
 80029a4:	f000 f84e 	bl	8002a44 <HAL_TIM_MspPostInit>

}
 80029a8:	bf00      	nop
 80029aa:	3728      	adds	r7, #40	; 0x28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000724 	.word	0x20000724
 80029b4:	40000800 	.word	0x40000800

080029b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d10c      	bne.n	80029e4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	61d3      	str	r3, [r2, #28]
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80029e2:	e022      	b.n	8002a2a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_TIM_PWM_MspInit+0x84>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10c      	bne.n	8002a08 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
}
 8002a06:	e010      	b.n	8002a2a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_TIM_PWM_MspInit+0x88>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10b      	bne.n	8002a2a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	61d3      	str	r3, [r2, #28]
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_TIM_PWM_MspInit+0x80>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800

08002a44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d11d      	bne.n	8002aa2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4a32      	ldr	r2, [pc, #200]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	6153      	str	r3, [r2, #20]
 8002a72:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BOOST_SW_Pin;
 8002a7e:	2308      	movs	r3, #8
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_SW_GPIO_Port, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9c:	f002 fba2 	bl	80051e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002aa0:	e043      	b.n	8002b2a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_TIM_MspPostInit+0xf4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11d      	bne.n	8002ae8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab6:	6153      	str	r3, [r2, #20]
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = KICK_1_Pin|KICK_2_Pin;
 8002ac4:	23c0      	movs	r3, #192	; 0xc0
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae2:	f002 fb7f 	bl	80051e4 <HAL_GPIO_Init>
}
 8002ae6:	e020      	b.n	8002b2a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <HAL_TIM_MspPostInit+0xf8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d11b      	bne.n	8002b2a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6153      	str	r3, [r2, #20]
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_TIM_MspPostInit+0xf0>)
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD_16M_PWM_Pin;
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GD_16M_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	4806      	ldr	r0, [pc, #24]	; (8002b40 <HAL_TIM_MspPostInit+0xfc>)
 8002b26:	f002 fb5d 	bl	80051e4 <HAL_GPIO_Init>
}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	48000400 	.word	0x48000400

08002b44 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b4a:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <MX_USART1_UART_Init+0x58>)
 8002b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b50:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <MX_USART1_UART_Init+0x5c>)
 8002b52:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b68:	220c      	movs	r2, #12
 8002b6a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <MX_USART1_UART_Init+0x54>)
 8002b86:	f005 fb95 	bl	80082b4 <HAL_UART_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8002b90:	f7ff fc2b 	bl	80023ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000770 	.word	0x20000770
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	001e8480 	.word	0x001e8480

08002ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2f      	ldr	r2, [pc, #188]	; (8002c80 <HAL_UART_MspInit+0xdc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d157      	bne.n	8002c76 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bc6:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_UART_MspInit+0xe0>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	4a2e      	ldr	r2, [pc, #184]	; (8002c84 <HAL_UART_MspInit+0xe0>)
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd0:	6193      	str	r3, [r2, #24]
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_UART_MspInit+0xe0>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_UART_MspInit+0xe0>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <HAL_UART_MspInit+0xe0>)
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	6153      	str	r3, [r2, #20]
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_UART_MspInit+0xe0>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bf6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c16:	f002 fae5 	bl	80051e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_UART_MspInit+0xe8>)
 8002c1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c22:	2210      	movs	r2, #16
 8002c24:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c4a:	480f      	ldr	r0, [pc, #60]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c4c:	f002 f89f 	bl	8004d8e <HAL_DMA_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002c56:	f7ff fbc8 	bl	80023ea <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002c60:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_UART_MspInit+0xe4>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	2025      	movs	r0, #37	; 0x25
 8002c6c:	f002 f859 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c70:	2025      	movs	r0, #37	; 0x25
 8002c72:	f002 f872 	bl	8004d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	; 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40021000 	.word	0x40021000
 8002c88:	200007f4 	.word	0x200007f4
 8002c8c:	40020044 	.word	0x40020044

08002c90 <Reset_Handler>:
 8002c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc8 <LoopForever+0x2>
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <LoopForever+0x6>)
 8002c96:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <LoopForever+0xa>)
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <LoopForever+0xe>)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:
 8002c9e:	58d4      	ldr	r4, [r2, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:
 8002ca4:	18c4      	adds	r4, r0, r3
 8002ca6:	428c      	cmp	r4, r1
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <LoopForever+0x12>)
 8002cac:	4c0b      	ldr	r4, [pc, #44]	; (8002cdc <LoopForever+0x16>)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:
 8002cb6:	42a2      	cmp	r2, r4
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>
 8002cba:	f7ff fd51 	bl	8002760 <SystemInit>
 8002cbe:	f006 fbc9 	bl	8009454 <__libc_init_array>
 8002cc2:	f7ff f8b1 	bl	8001e28 <main>

08002cc6 <LoopForever>:
 8002cc6:	e7fe      	b.n	8002cc6 <LoopForever>
 8002cc8:	20008000 	.word	0x20008000
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	200001dc 	.word	0x200001dc
 8002cd4:	0800cb54 	.word	0x0800cb54
 8002cd8:	200001dc 	.word	0x200001dc
 8002cdc:	2000084c 	.word	0x2000084c

08002ce0 <ADC1_2_IRQHandler>:
 8002ce0:	e7fe      	b.n	8002ce0 <ADC1_2_IRQHandler>
	...

08002ce4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_Init+0x28>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <HAL_Init+0x28>)
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf4:	2003      	movs	r0, #3
 8002cf6:	f002 f809 	bl	8004d0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfa:	200f      	movs	r0, #15
 8002cfc:	f000 f808 	bl	8002d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d00:	f7ff fbfa 	bl	80024f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000

08002d10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_InitTick+0x54>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_InitTick+0x58>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 f821 	bl	8004d76 <HAL_SYSTICK_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00e      	b.n	8002d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	d80a      	bhi.n	8002d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d44:	2200      	movs	r2, #0
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	f001 ffe9 	bl	8004d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d50:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <HAL_InitTick+0x5c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000000 	.word	0x20000000
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_IncTick+0x20>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_IncTick+0x24>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_IncTick+0x24>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000008 	.word	0x20000008
 8002d94:	20000838 	.word	0x20000838

08002d98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_GetTick+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000838 	.word	0x20000838

08002db0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db8:	f7ff ffee 	bl	8002d98 <HAL_GetTick>
 8002dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d005      	beq.n	8002dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_Delay+0x44>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002dd6:	bf00      	nop
 8002dd8:	f7ff ffde 	bl	8002d98 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d8f7      	bhi.n	8002dd8 <HAL_Delay+0x28>
  {
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000008 	.word	0x20000008

08002df8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b09a      	sub	sp, #104	; 0x68
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e1c9      	b.n	80031ac <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d176      	bne.n	8002f18 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d152      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fe f891 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d13b      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 ffd1 	bl	8003e08 <ADC_Disable>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d12f      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
 8002e78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d12b      	bne.n	8002ed8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e88:	f023 0302 	bic.w	r3, r3, #2
 8002e8c:	f043 0202 	orr.w	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eb2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb4:	4b86      	ldr	r3, [pc, #536]	; (80030d0 <HAL_ADC_Init+0x2d8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a86      	ldr	r2, [pc, #536]	; (80030d4 <HAL_ADC_Init+0x2dc>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9a      	lsrs	r2, r3, #18
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eca:	e002      	b.n	8002ed2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f9      	bne.n	8002ecc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef4:	d110      	bne.n	8002f18 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f023 0312 	bic.w	r3, r3, #18
 8002efe:	f043 0210 	orr.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8136 	bne.w	8003192 <HAL_ADC_Init+0x39a>
 8002f26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 8131 	bne.w	8003192 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 8129 	bne.w	8003192 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f48:	f043 0202 	orr.w	r2, r3, #2
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f58:	d004      	beq.n	8002f64 <HAL_ADC_Init+0x16c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a5e      	ldr	r2, [pc, #376]	; (80030d8 <HAL_ADC_Init+0x2e0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_Init+0x170>
 8002f64:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_ADC_Init+0x2e4>)
 8002f66:	e000      	b.n	8002f6a <HAL_ADC_Init+0x172>
 8002f68:	4b5d      	ldr	r3, [pc, #372]	; (80030e0 <HAL_ADC_Init+0x2e8>)
 8002f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f74:	d102      	bne.n	8002f7c <HAL_ADC_Init+0x184>
 8002f76:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_ADC_Init+0x2e0>)
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e01a      	b.n	8002fb2 <HAL_ADC_Init+0x1ba>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a55      	ldr	r2, [pc, #340]	; (80030d8 <HAL_ADC_Init+0x2e0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d103      	bne.n	8002f8e <HAL_ADC_Init+0x196>
 8002f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e011      	b.n	8002fb2 <HAL_ADC_Init+0x1ba>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a54      	ldr	r2, [pc, #336]	; (80030e4 <HAL_ADC_Init+0x2ec>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <HAL_ADC_Init+0x1a6>
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_ADC_Init+0x2f0>)
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e009      	b.n	8002fb2 <HAL_ADC_Init+0x1ba>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a51      	ldr	r2, [pc, #324]	; (80030e8 <HAL_ADC_Init+0x2f0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d102      	bne.n	8002fae <HAL_ADC_Init+0x1b6>
 8002fa8:	4b4e      	ldr	r3, [pc, #312]	; (80030e4 <HAL_ADC_Init+0x2ec>)
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e001      	b.n	8002fb2 <HAL_ADC_Init+0x1ba>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_ADC_Init+0x1da>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_Init+0x1da>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_Init+0x1dc>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11c      	bne.n	8003012 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_ADC_Init+0x202>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_Init+0x202>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_ADC_Init+0x204>
 8002ffa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003010:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	7e5b      	ldrb	r3, [r3, #25]
 8003016:	035b      	lsls	r3, r3, #13
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800301c:	2a01      	cmp	r2, #1
 800301e:	d002      	beq.n	8003026 <HAL_ADC_Init+0x22e>
 8003020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003024:	e000      	b.n	8003028 <HAL_ADC_Init+0x230>
 8003026:	2200      	movs	r2, #0
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4313      	orrs	r3, r2
 8003036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003038:	4313      	orrs	r3, r2
 800303a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d11b      	bne.n	800307e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7e5b      	ldrb	r3, [r3, #25]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	3b01      	subs	r3, #1
 8003054:	045a      	lsls	r2, r3, #17
 8003056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003058:	4313      	orrs	r3, r2
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	663b      	str	r3, [r7, #96]	; 0x60
 8003060:	e00d      	b.n	800307e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	2b01      	cmp	r3, #1
 8003084:	d03a      	beq.n	80030fc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_ADC_Init+0x2ec>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_ADC_Init+0x2a2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_ADC_Init+0x2f0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d128      	bne.n	80030ec <HAL_ADC_Init+0x2f4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80030a2:	d012      	beq.n	80030ca <HAL_ADC_Init+0x2d2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ac:	d00a      	beq.n	80030c4 <HAL_ADC_Init+0x2cc>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80030b6:	d002      	beq.n	80030be <HAL_ADC_Init+0x2c6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	e018      	b.n	80030f0 <HAL_ADC_Init+0x2f8>
 80030be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c2:	e015      	b.n	80030f0 <HAL_ADC_Init+0x2f8>
 80030c4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80030c8:	e012      	b.n	80030f0 <HAL_ADC_Init+0x2f8>
 80030ca:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80030ce:	e00f      	b.n	80030f0 <HAL_ADC_Init+0x2f8>
 80030d0:	20000000 	.word	0x20000000
 80030d4:	431bde83 	.word	0x431bde83
 80030d8:	50000100 	.word	0x50000100
 80030dc:	50000300 	.word	0x50000300
 80030e0:	50000700 	.word	0x50000700
 80030e4:	50000400 	.word	0x50000400
 80030e8:	50000500 	.word	0x50000500
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030f4:	4313      	orrs	r3, r2
 80030f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030f8:	4313      	orrs	r3, r2
 80030fa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d114      	bne.n	8003134 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003118:	f023 0302 	bic.w	r3, r3, #2
 800311c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7e1b      	ldrb	r3, [r3, #24]
 8003122:	039a      	lsls	r2, r3, #14
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4313      	orrs	r3, r2
 800312e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003130:	4313      	orrs	r3, r2
 8003132:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_ADC_Init+0x3bc>)
 800313c:	4013      	ands	r3, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003144:	430b      	orrs	r3, r1
 8003146:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10c      	bne.n	800316a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f023 010f 	bic.w	r1, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
 8003168:	e007      	b.n	800317a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020f 	bic.w	r2, r2, #15
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f023 0303 	bic.w	r3, r3, #3
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
 8003190:	e00a      	b.n	80031a8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f023 0312 	bic.w	r3, r3, #18
 800319a:	f043 0210 	orr.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80031a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3768      	adds	r7, #104	; 0x68
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	fff0c007 	.word	0xfff0c007

080031b8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 80f9 	bne.w	80033c6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_Start+0x2a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0f4      	b.n	80033cc <HAL_ADC_Start+0x214>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fda8 	bl	8003d40 <ADC_Enable>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 80e0 	bne.w	80033bc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003218:	d004      	beq.n	8003224 <HAL_ADC_Start+0x6c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6d      	ldr	r2, [pc, #436]	; (80033d4 <HAL_ADC_Start+0x21c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d106      	bne.n	8003232 <HAL_ADC_Start+0x7a>
 8003224:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <HAL_ADC_Start+0x220>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_ADC_Start+0x9a>
 8003230:	e005      	b.n	800323e <HAL_ADC_Start+0x86>
 8003232:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_ADC_Start+0x224>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_ADC_Start+0x9a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003246:	d004      	beq.n	8003252 <HAL_ADC_Start+0x9a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <HAL_ADC_Start+0x228>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d115      	bne.n	800327e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d036      	beq.n	80032da <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003274:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800327c:	e02d      	b.n	80032da <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003292:	d004      	beq.n	800329e <HAL_ADC_Start+0xe6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4e      	ldr	r2, [pc, #312]	; (80033d4 <HAL_ADC_Start+0x21c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10a      	bne.n	80032b4 <HAL_ADC_Start+0xfc>
 800329e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e008      	b.n	80032c6 <HAL_ADC_Start+0x10e>
 80032b4:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_ADC_Start+0x228>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	d106      	bne.n	80032f6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f023 0206 	bic.w	r2, r3, #6
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
 80032f4:	e002      	b.n	80032fc <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	221c      	movs	r2, #28
 800330a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003314:	d004      	beq.n	8003320 <HAL_ADC_Start+0x168>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2e      	ldr	r2, [pc, #184]	; (80033d4 <HAL_ADC_Start+0x21c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d106      	bne.n	800332e <HAL_ADC_Start+0x176>
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_ADC_Start+0x220>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2b00      	cmp	r3, #0
 800332a:	d03e      	beq.n	80033aa <HAL_ADC_Start+0x1f2>
 800332c:	e005      	b.n	800333a <HAL_ADC_Start+0x182>
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_ADC_Start+0x224>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2b00      	cmp	r3, #0
 8003338:	d037      	beq.n	80033aa <HAL_ADC_Start+0x1f2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003342:	d004      	beq.n	800334e <HAL_ADC_Start+0x196>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <HAL_ADC_Start+0x21c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d106      	bne.n	800335c <HAL_ADC_Start+0x1a4>
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_ADC_Start+0x220>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2b05      	cmp	r3, #5
 8003358:	d027      	beq.n	80033aa <HAL_ADC_Start+0x1f2>
 800335a:	e005      	b.n	8003368 <HAL_ADC_Start+0x1b0>
 800335c:	4b1f      	ldr	r3, [pc, #124]	; (80033dc <HAL_ADC_Start+0x224>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2b05      	cmp	r3, #5
 8003366:	d020      	beq.n	80033aa <HAL_ADC_Start+0x1f2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003370:	d004      	beq.n	800337c <HAL_ADC_Start+0x1c4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a17      	ldr	r2, [pc, #92]	; (80033d4 <HAL_ADC_Start+0x21c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d106      	bne.n	800338a <HAL_ADC_Start+0x1d2>
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_ADC_Start+0x220>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2b09      	cmp	r3, #9
 8003386:	d010      	beq.n	80033aa <HAL_ADC_Start+0x1f2>
 8003388:	e005      	b.n	8003396 <HAL_ADC_Start+0x1de>
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <HAL_ADC_Start+0x224>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2b09      	cmp	r3, #9
 8003394:	d009      	beq.n	80033aa <HAL_ADC_Start+0x1f2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339e:	d004      	beq.n	80033aa <HAL_ADC_Start+0x1f2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_ADC_Start+0x228>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10f      	bne.n	80033ca <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0204 	orr.w	r2, r2, #4
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	e006      	b.n	80033ca <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033c4:	e001      	b.n	80033ca <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	50000100 	.word	0x50000100
 80033d8:	50000300 	.word	0x50000300
 80033dc:	50000700 	.word	0x50000700
 80033e0:	50000400 	.word	0x50000400

080033e4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d009      	beq.n	800340c <HAL_ADCEx_InjectedGetValue+0x28>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d818      	bhi.n	8003430 <HAL_ADCEx_InjectedGetValue+0x4c>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d00f      	beq.n	8003424 <HAL_ADCEx_InjectedGetValue+0x40>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d006      	beq.n	8003418 <HAL_ADCEx_InjectedGetValue+0x34>
 800340a:	e011      	b.n	8003430 <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003414:	60fb      	str	r3, [r7, #12]
      break;
 8003416:	e011      	b.n	800343c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	60fb      	str	r3, [r7, #12]
      break;
 8003422:	e00b      	b.n	800343c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	60fb      	str	r3, [r7, #12]
      break;
 800342e:	e005      	b.n	800343c <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003438:	60fb      	str	r3, [r7, #12]
      break;
 800343a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 800343c:	68fb      	ldr	r3, [r7, #12]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800344c:	b480      	push	{r7}
 800344e:	b09d      	sub	sp, #116	; 0x74
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_ADCEx_InjectedConfigChannel+0x26>
 800346e:	2302      	movs	r3, #2
 8003470:	e364      	b.n	8003b3c <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003486:	2b01      	cmp	r3, #1
 8003488:	d151      	bne.n	800352e <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d143      	bne.n	800351a <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d02b      	beq.n	80034f2 <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4984      	ldr	r1, [pc, #528]	; (80036b8 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80034a6:	428b      	cmp	r3, r1
 80034a8:	d004      	beq.n	80034b4 <HAL_ADCEx_InjectedConfigChannel+0x68>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4983      	ldr	r1, [pc, #524]	; (80036bc <HAL_ADCEx_InjectedConfigChannel+0x270>)
 80034b0:	428b      	cmp	r3, r1
 80034b2:	d114      	bne.n	80034de <HAL_ADCEx_InjectedConfigChannel+0x92>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d00e      	beq.n	80034da <HAL_ADCEx_InjectedConfigChannel+0x8e>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	2b14      	cmp	r3, #20
 80034c2:	d008      	beq.n	80034d6 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	2b1c      	cmp	r3, #28
 80034ca:	d002      	beq.n	80034d2 <HAL_ADCEx_InjectedConfigChannel+0x86>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	e007      	b.n	80034e2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80034d2:	2310      	movs	r3, #16
 80034d4:	e005      	b.n	80034e2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80034d6:	231c      	movs	r3, #28
 80034d8:	e003      	b.n	80034e2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80034da:	2334      	movs	r3, #52	; 0x34
 80034dc:	e001      	b.n	80034e2 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	4313      	orrs	r3, r2
 80034ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034ec:	4313      	orrs	r3, r2
 80034ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f0:	e005      	b.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034fa:	4313      	orrs	r3, r2
 80034fc:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003504:	4b6e      	ldr	r3, [pc, #440]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800350e:	430b      	orrs	r3, r1
 8003510:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003516:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003518:	e07f      	b.n	800361a <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800352c:	e075      	b.n	800361a <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d140      	bne.n	80035b8 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d02d      	beq.n	80035a8 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	1e59      	subs	r1, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4857      	ldr	r0, [pc, #348]	; (80036b8 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 800355c:	4283      	cmp	r3, r0
 800355e:	d004      	beq.n	800356a <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4855      	ldr	r0, [pc, #340]	; (80036bc <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8003566:	4283      	cmp	r3, r0
 8003568:	d114      	bne.n	8003594 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	2b08      	cmp	r3, #8
 8003570:	d00e      	beq.n	8003590 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	2b14      	cmp	r3, #20
 8003578:	d008      	beq.n	800358c <HAL_ADCEx_InjectedConfigChannel+0x140>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	2b1c      	cmp	r3, #28
 8003580:	d002      	beq.n	8003588 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	e007      	b.n	8003598 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003588:	2310      	movs	r3, #16
 800358a:	e005      	b.n	8003598 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800358c:	231c      	movs	r3, #28
 800358e:	e003      	b.n	8003598 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003590:	2334      	movs	r3, #52	; 0x34
 8003592:	e001      	b.n	8003598 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4319      	orrs	r1, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	430b      	orrs	r3, r1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	649a      	str	r2, [r3, #72]	; 0x48
 80035a6:	e007      	b.n	80035b8 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	3302      	adds	r3, #2
 80035ca:	221f      	movs	r2, #31
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	4019      	ands	r1, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	3302      	adds	r3, #2
 80035e6:	fa00 f303 	lsl.w	r3, r0, r3
 80035ea:	ea41 0203 	orr.w	r2, r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 800360c:	4013      	ands	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	430b      	orrs	r3, r1
 8003618:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d12d      	bne.n	8003684 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	7f5b      	ldrb	r3, [r3, #29]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d110      	bne.n	8003652 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	7f9b      	ldrb	r3, [r3, #30]
 800363e:	055a      	lsls	r2, r3, #21
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	7f1b      	ldrb	r3, [r3, #28]
 8003644:	051b      	lsls	r3, r3, #20
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	e018      	b.n	8003684 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	7f9b      	ldrb	r3, [r3, #30]
 8003660:	055a      	lsls	r2, r3, #21
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	7f1b      	ldrb	r3, [r3, #28]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d108      	bne.n	8003684 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 8111 	bne.w	80038b6 <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d113      	bne.n	80036c4 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	7f5b      	ldrb	r3, [r3, #29]
 80036aa:	065a      	lsls	r2, r3, #25
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]
 80036b4:	e01b      	b.n	80036ee <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 80036b6:	bf00      	nop
 80036b8:	50000400 	.word	0x50000400
 80036bc:	50000500 	.word	0x50000500
 80036c0:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80036d2:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	7f5b      	ldrb	r3, [r3, #29]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d108      	bne.n	80036ee <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b09      	cmp	r3, #9
 80036f4:	d91c      	bls.n	8003730 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6999      	ldr	r1, [r3, #24]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	3b1e      	subs	r3, #30
 8003708:	2207      	movs	r2, #7
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	4019      	ands	r1, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6898      	ldr	r0, [r3, #8]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	3b1e      	subs	r3, #30
 8003722:	fa00 f203 	lsl.w	r2, r0, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	619a      	str	r2, [r3, #24]
 800372e:	e019      	b.n	8003764 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6959      	ldr	r1, [r3, #20]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	2207      	movs	r2, #7
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	4019      	ands	r1, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6898      	ldr	r0, [r3, #8]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	fa00 f203 	lsl.w	r2, r0, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	08db      	lsrs	r3, r3, #3
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	3b01      	subs	r3, #1
 8003782:	2b03      	cmp	r3, #3
 8003784:	d84e      	bhi.n	8003824 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8003786:	a201      	add	r2, pc, #4	; (adr r2, 800378c <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	0800379d 	.word	0x0800379d
 8003790:	080037bf 	.word	0x080037bf
 8003794:	080037e1 	.word	0x080037e1
 8003798:	08003803 	.word	0x08003803
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a2:	4b9a      	ldr	r3, [pc, #616]	; (8003a0c <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	0691      	lsls	r1, r2, #26
 80037ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80037ae:	430a      	orrs	r2, r1
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80037bc:	e07e      	b.n	80038bc <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037c4:	4b91      	ldr	r3, [pc, #580]	; (8003a0c <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	0691      	lsls	r1, r2, #26
 80037ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80037d0:	430a      	orrs	r2, r1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037dc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80037de:	e06d      	b.n	80038bc <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037e6:	4b89      	ldr	r3, [pc, #548]	; (8003a0c <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	0691      	lsls	r1, r2, #26
 80037f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80037f2:	430a      	orrs	r2, r1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037fe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003800:	e05c      	b.n	80038bc <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003808:	4b80      	ldr	r3, [pc, #512]	; (8003a0c <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 800380a:	4013      	ands	r3, r2
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	0691      	lsls	r1, r2, #26
 8003812:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003814:	430a      	orrs	r2, r1
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003820:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003822:	e04b      	b.n	80038bc <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	069b      	lsls	r3, r3, #26
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003846:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	069b      	lsls	r3, r3, #26
 8003858:	429a      	cmp	r2, r3
 800385a:	d107      	bne.n	800386c <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800386a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	069b      	lsls	r3, r3, #26
 800387c:	429a      	cmp	r2, r3
 800387e:	d107      	bne.n	8003890 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800388e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003896:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	069b      	lsls	r3, r3, #26
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d10a      	bne.n	80038ba <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80038b4:	e001      	b.n	80038ba <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 80038ba:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <HAL_ADCEx_InjectedConfigChannel+0x490>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_ADCEx_InjectedConfigChannel+0x490>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_ADCEx_InjectedConfigChannel+0x492>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8126 	bne.w	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d00f      	beq.n	800390c <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	400a      	ands	r2, r1
 8003906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800390a:	e049      	b.n	80039a0 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	409a      	lsls	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b09      	cmp	r3, #9
 800392c:	d91c      	bls.n	8003968 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6999      	ldr	r1, [r3, #24]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	3b1b      	subs	r3, #27
 8003940:	2207      	movs	r2, #7
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	4019      	ands	r1, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6898      	ldr	r0, [r3, #8]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	3b1b      	subs	r3, #27
 800395a:	fa00 f203 	lsl.w	r2, r0, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	619a      	str	r2, [r3, #24]
 8003966:	e01b      	b.n	80039a0 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6959      	ldr	r1, [r3, #20]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	2207      	movs	r2, #7
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	4019      	ands	r1, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6898      	ldr	r0, [r3, #8]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	fa00 f203 	lsl.w	r2, r0, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a8:	d004      	beq.n	80039b4 <HAL_ADCEx_InjectedConfigChannel+0x568>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 80039b6:	e000      	b.n	80039ba <HAL_ADCEx_InjectedConfigChannel+0x56e>
 80039b8:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_ADCEx_InjectedConfigChannel+0x5cc>)
 80039ba:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d105      	bne.n	80039d0 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	d105      	bne.n	80039e4 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039e8:	2b12      	cmp	r3, #18
 80039ea:	f040 80a1 	bne.w	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80039ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 809a 	bne.w	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a04:	d10a      	bne.n	8003a1c <HAL_ADCEx_InjectedConfigChannel+0x5d0>
 8003a06:	4b02      	ldr	r3, [pc, #8]	; (8003a10 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e022      	b.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003a0c:	83fff000 	.word	0x83fff000
 8003a10:	50000100 	.word	0x50000100
 8003a14:	50000300 	.word	0x50000300
 8003a18:	50000700 	.word	0x50000700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a49      	ldr	r2, [pc, #292]	; (8003b48 <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d103      	bne.n	8003a2e <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8003a26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e011      	b.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a46      	ldr	r2, [pc, #280]	; (8003b4c <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d102      	bne.n	8003a3e <HAL_ADCEx_InjectedConfigChannel+0x5f2>
 8003a38:	4b45      	ldr	r3, [pc, #276]	; (8003b50 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e009      	b.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a43      	ldr	r2, [pc, #268]	; (8003b50 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d102      	bne.n	8003a4e <HAL_ADCEx_InjectedConfigChannel+0x602>
 8003a48:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	e001      	b.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d108      	bne.n	8003a72 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8003a72:	2300      	movs	r3, #0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d150      	bne.n	8003b1a <HAL_ADCEx_InjectedConfigChannel+0x6ce>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a78:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d010      	beq.n	8003aa0 <HAL_ADCEx_InjectedConfigChannel+0x654>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_ADCEx_InjectedConfigChannel+0x650>
 8003a9a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d13c      	bne.n	8003b1a <HAL_ADCEx_InjectedConfigChannel+0x6ce>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d11d      	bne.n	8003ae4 <HAL_ADCEx_InjectedConfigChannel+0x698>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab0:	d118      	bne.n	8003ae4 <HAL_ADCEx_InjectedConfigChannel+0x698>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003abc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003abe:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a25      	ldr	r2, [pc, #148]	; (8003b58 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	0c9a      	lsrs	r2, r3, #18
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8003ad4:	e002      	b.n	8003adc <HAL_ADCEx_InjectedConfigChannel+0x690>
          {
            wait_loop_index--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f9      	bne.n	8003ad6 <HAL_ADCEx_InjectedConfigChannel+0x68a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ae2:	e024      	b.n	8003b2e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b11      	cmp	r3, #17
 8003aea:	d10b      	bne.n	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af4:	d106      	bne.n	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b00:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b02:	e014      	b.n	8003b2e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b12      	cmp	r3, #18
 8003b0a:	d110      	bne.n	8003b2e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b18:	e009      	b.n	8003b2e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003b2c:	e000      	b.n	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b2e:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3774      	adds	r7, #116	; 0x74
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	50000100 	.word	0x50000100
 8003b4c:	50000400 	.word	0x50000400
 8003b50:	50000500 	.word	0x50000500
 8003b54:	20000000 	.word	0x20000000
 8003b58:	431bde83 	.word	0x431bde83

08003b5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b099      	sub	sp, #100	; 0x64
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b74:	d102      	bne.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003b76:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	e01a      	b.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6a      	ldr	r2, [pc, #424]	; (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d103      	bne.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	e011      	b.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a67      	ldr	r2, [pc, #412]	; (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d102      	bne.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b98:	4b66      	ldr	r3, [pc, #408]	; (8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	e009      	b.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a64      	ldr	r2, [pc, #400]	; (8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d102      	bne.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ba8:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	e001      	b.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0b0      	b.n	8003d1e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e0a9      	b.n	8003d1e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 808d 	bne.w	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f040 8086 	bne.w	8003cfc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bf8:	d004      	beq.n	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a4b      	ldr	r2, [pc, #300]	; (8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c04:	4b4c      	ldr	r3, [pc, #304]	; (8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003c06:	e000      	b.n	8003c0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c08:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003c0a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d040      	beq.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c26:	035b      	lsls	r3, r3, #13
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c2e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d15c      	bne.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003c72:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d14b      	bne.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c80:	f023 030f 	bic.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	6811      	ldr	r1, [r2, #0]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c92:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c94:	e03c      	b.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ca0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d108      	bne.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d123      	bne.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003ce4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d112      	bne.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cf2:	f023 030f 	bic.w	r3, r3, #15
 8003cf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfa:	e009      	b.n	8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003d0e:	e000      	b.n	8003d12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d10:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3764      	adds	r7, #100	; 0x64
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	50000100 	.word	0x50000100
 8003d30:	50000400 	.word	0x50000400
 8003d34:	50000500 	.word	0x50000500
 8003d38:	50000300 	.word	0x50000300
 8003d3c:	50000700 	.word	0x50000700

08003d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d108      	bne.n	8003d6c <ADC_Enable+0x2c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <ADC_Enable+0x2c>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <ADC_Enable+0x2e>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d143      	bne.n	8003dfa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <ADC_Enable+0xc4>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00d      	beq.n	8003d9c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f043 0210 	orr.w	r2, r3, #16
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f043 0201 	orr.w	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e02f      	b.n	8003dfc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003dac:	f7fe fff4 	bl	8002d98 <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003db2:	e01b      	b.n	8003dec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003db4:	f7fe fff0 	bl	8002d98 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d914      	bls.n	8003dec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d00d      	beq.n	8003dec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0210 	orr.w	r2, r3, #16
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e007      	b.n	8003dfc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d1dc      	bne.n	8003db4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	8000003f 	.word	0x8000003f

08003e08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <ADC_Disable+0x2c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <ADC_Disable+0x2c>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <ADC_Disable+0x2e>
 8003e34:	2300      	movs	r3, #0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d047      	beq.n	8003eca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030d 	and.w	r3, r3, #13
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10f      	bne.n	8003e68 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0202 	orr.w	r2, r2, #2
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003e60:	f7fe ff9a 	bl	8002d98 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e66:	e029      	b.n	8003ebc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f043 0210 	orr.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e023      	b.n	8003ecc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e84:	f7fe ff88 	bl	8002d98 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d914      	bls.n	8003ebc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10d      	bne.n	8003ebc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0210 	orr.w	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e007      	b.n	8003ecc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d0dc      	beq.n	8003e84 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0ed      	b.n	80040c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd fadc 	bl	80014b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f08:	f7fe ff46 	bl	8002d98 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f0e:	e012      	b.n	8003f36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f10:	f7fe ff42 	bl	8002d98 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b0a      	cmp	r3, #10
 8003f1c:	d90b      	bls.n	8003f36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e0c5      	b.n	80040c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0e5      	beq.n	8003f10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0202 	bic.w	r2, r2, #2
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f54:	f7fe ff20 	bl	8002d98 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f5a:	e012      	b.n	8003f82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f5c:	f7fe ff1c 	bl	8002d98 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b0a      	cmp	r3, #10
 8003f68:	d90b      	bls.n	8003f82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2205      	movs	r2, #5
 8003f7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e09f      	b.n	80040c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e5      	bne.n	8003f5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7e1b      	ldrb	r3, [r3, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e007      	b.n	8003fba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7e5b      	ldrb	r3, [r3, #25]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e007      	b.n	8003fe4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7e9b      	ldrb	r3, [r3, #26]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d108      	bne.n	8003ffe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0220 	orr.w	r2, r2, #32
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e007      	b.n	800400e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0220 	bic.w	r2, r2, #32
 800400c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7edb      	ldrb	r3, [r3, #27]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d108      	bne.n	8004028 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0210 	bic.w	r2, r2, #16
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e007      	b.n	8004038 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0210 	orr.w	r2, r2, #16
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7f1b      	ldrb	r3, [r3, #28]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d108      	bne.n	8004052 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0208 	orr.w	r2, r2, #8
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e007      	b.n	8004062 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0208 	bic.w	r2, r2, #8
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7f5b      	ldrb	r3, [r3, #29]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d108      	bne.n	800407c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0204 	orr.w	r2, r2, #4
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e007      	b.n	800408c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d003      	beq.n	80040f0 <HAL_CAN_ConfigFilter+0x26>
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	f040 80aa 	bne.w	8004244 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2201      	movs	r2, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	43db      	mvns	r3, r3
 800411a:	401a      	ands	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d123      	bne.n	8004172 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	43db      	mvns	r3, r3
 8004134:	401a      	ands	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800414c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	3248      	adds	r2, #72	; 0x48
 8004152:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004166:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	3348      	adds	r3, #72	; 0x48
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	440b      	add	r3, r1
 8004170:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d122      	bne.n	80041c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	431a      	orrs	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800419a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3248      	adds	r2, #72	; 0x48
 80041a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	3348      	adds	r3, #72	; 0x48
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	401a      	ands	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80041da:	e007      	b.n	80041ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004206:	e007      	b.n	8004218 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	431a      	orrs	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	431a      	orrs	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e006      	b.n	8004252 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d12e      	bne.n	80042d0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800428a:	f7fe fd85 	bl	8002d98 <HAL_GetTick>
 800428e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004290:	e012      	b.n	80042b8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004292:	f7fe fd81 	bl	8002d98 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b0a      	cmp	r3, #10
 800429e:	d90b      	bls.n	80042b8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2205      	movs	r2, #5
 80042b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e012      	b.n	80042de <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e006      	b.n	80042de <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b089      	sub	sp, #36	; 0x24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004304:	7ffb      	ldrb	r3, [r7, #31]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d003      	beq.n	8004312 <HAL_CAN_AddTxMessage+0x2c>
 800430a:	7ffb      	ldrb	r3, [r7, #31]
 800430c:	2b02      	cmp	r3, #2
 800430e:	f040 80b8 	bne.w	8004482 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80a0 	beq.w	8004472 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	0e1b      	lsrs	r3, r3, #24
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d907      	bls.n	8004352 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e09e      	b.n	8004490 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004352:	2201      	movs	r2, #1
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	409a      	lsls	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10d      	bne.n	8004380 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	6809      	ldr	r1, [r1, #0]
 8004372:	431a      	orrs	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3318      	adds	r3, #24
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	440b      	add	r3, r1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e00f      	b.n	80043a0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800438a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004394:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	3318      	adds	r3, #24
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	440b      	add	r3, r1
 800439e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3318      	adds	r3, #24
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	440b      	add	r3, r1
 80043b0:	3304      	adds	r3, #4
 80043b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	7d1b      	ldrb	r3, [r3, #20]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d111      	bne.n	80043e0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3318      	adds	r3, #24
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4413      	add	r3, r2
 80043c8:	3304      	adds	r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	6811      	ldr	r1, [r2, #0]
 80043d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3318      	adds	r3, #24
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	440b      	add	r3, r1
 80043dc:	3304      	adds	r3, #4
 80043de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3307      	adds	r3, #7
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	061a      	lsls	r2, r3, #24
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3306      	adds	r3, #6
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3305      	adds	r3, #5
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	4313      	orrs	r3, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	3204      	adds	r2, #4
 8004400:	7812      	ldrb	r2, [r2, #0]
 8004402:	4610      	mov	r0, r2
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	6811      	ldr	r1, [r2, #0]
 8004408:	ea43 0200 	orr.w	r2, r3, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	440b      	add	r3, r1
 8004412:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004416:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3303      	adds	r3, #3
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	061a      	lsls	r2, r3, #24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3302      	adds	r3, #2
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	041b      	lsls	r3, r3, #16
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3301      	adds	r3, #1
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	4313      	orrs	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	4610      	mov	r0, r2
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	ea43 0200 	orr.w	r2, r3, r0
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	440b      	add	r3, r1
 8004448:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800444c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	3318      	adds	r3, #24
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	4413      	add	r3, r2
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	6811      	ldr	r1, [r2, #0]
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	3318      	adds	r3, #24
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	440b      	add	r3, r1
 800446c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e00e      	b.n	8004490 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e006      	b.n	8004490 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
  }
}
 8004490:	4618      	mov	r0, r3
 8004492:	3724      	adds	r7, #36	; 0x24
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d003      	beq.n	80044c0 <HAL_CAN_GetRxMessage+0x24>
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	f040 80f3 	bne.w	80046a6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0e7      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0d8      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	331b      	adds	r3, #27
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0204 	and.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10c      	bne.n	800453a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	331b      	adds	r3, #27
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	4413      	add	r3, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0d5b      	lsrs	r3, r3, #21
 8004530:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e00b      	b.n	8004552 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	331b      	adds	r3, #27
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	331b      	adds	r3, #27
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4413      	add	r3, r2
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0202 	and.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	331b      	adds	r3, #27
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	331b      	adds	r3, #27
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	b2da      	uxtb	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	331b      	adds	r3, #27
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0a1a      	lsrs	r2, r3, #8
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0c1a      	lsrs	r2, r3, #16
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	3302      	adds	r3, #2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	4413      	add	r3, r2
 8004604:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0e1a      	lsrs	r2, r3, #24
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	3303      	adds	r3, #3
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	4413      	add	r3, r2
 800461e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	3304      	adds	r3, #4
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0a1a      	lsrs	r2, r3, #8
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	3305      	adds	r3, #5
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4413      	add	r3, r2
 8004650:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	0c1a      	lsrs	r2, r3, #16
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	3306      	adds	r3, #6
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4413      	add	r3, r2
 800466a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0e1a      	lsrs	r2, r3, #24
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3307      	adds	r3, #7
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0220 	orr.w	r2, r2, #32
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e007      	b.n	80046a2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e006      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <HAL_CAN_ActivateNotification+0x1e>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d109      	bne.n	80046f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6959      	ldr	r1, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e006      	b.n	8004700 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004714:	2300      	movs	r3, #0
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d07c      	beq.n	800484c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d023      	beq.n	80047a4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f983 	bl	8004a7a <HAL_CAN_TxMailbox0CompleteCallback>
 8004774:	e016      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	e00c      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	e002      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f989 	bl	8004ab6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d024      	beq.n	80047f8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f963 	bl	8004a8e <HAL_CAN_TxMailbox1CompleteCallback>
 80047c8:	e016      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e00c      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	e002      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f969 	bl	8004aca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d024      	beq.n	800484c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800480a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f943 	bl	8004aa2 <HAL_CAN_TxMailbox2CompleteCallback>
 800481c:	e016      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	e00c      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	e002      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f949 	bl	8004ade <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2210      	movs	r2, #16
 800486e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2208      	movs	r2, #8
 800488a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f930 	bl	8004af2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fd f85c 	bl	8001968 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2210      	movs	r2, #16
 80048d2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2208      	movs	r2, #8
 80048ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f912 	bl	8004b1a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8f9 	bl	8004b06 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d006      	beq.n	8004936 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8fc 	bl	8004b2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8f5 	bl	8004b42 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d07b      	beq.n	8004a5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d072      	beq.n	8004a52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d043      	beq.n	8004a52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03e      	beq.n	8004a52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049da:	2b60      	cmp	r3, #96	; 0x60
 80049dc:	d02b      	beq.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
 80049de:	2b60      	cmp	r3, #96	; 0x60
 80049e0:	d82e      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049e2:	2b50      	cmp	r3, #80	; 0x50
 80049e4:	d022      	beq.n	8004a2c <HAL_CAN_IRQHandler+0x320>
 80049e6:	2b50      	cmp	r3, #80	; 0x50
 80049e8:	d82a      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d019      	beq.n	8004a22 <HAL_CAN_IRQHandler+0x316>
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	d826      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049f2:	2b30      	cmp	r3, #48	; 0x30
 80049f4:	d010      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x30c>
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d822      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d002      	beq.n	8004a04 <HAL_CAN_IRQHandler+0x2f8>
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d005      	beq.n	8004a0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a02:	e01d      	b.n	8004a40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a0c:	e019      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	f043 0310 	orr.w	r3, r3, #16
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a16:	e014      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f043 0320 	orr.w	r3, r3, #32
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a20:	e00f      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a2a:	e00a      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a34:	e005      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a3e:	e000      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2204      	movs	r2, #4
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f872 	bl	8004b56 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a72:	bf00      	nop
 8004a74:	3728      	adds	r7, #40	; 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9e:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	60d3      	str	r3, [r2, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <__NVIC_GetPriorityGrouping+0x18>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	f003 0307 	and.w	r3, r3, #7
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db0b      	blt.n	8004bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	4907      	ldr	r1, [pc, #28]	; (8004c08 <__NVIC_EnableIRQ+0x38>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db0a      	blt.n	8004c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	490c      	ldr	r1, [pc, #48]	; (8004c58 <__NVIC_SetPriority+0x4c>)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	0112      	lsls	r2, r2, #4
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c34:	e00a      	b.n	8004c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4908      	ldr	r1, [pc, #32]	; (8004c5c <__NVIC_SetPriority+0x50>)
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	3b04      	subs	r3, #4
 8004c44:	0112      	lsls	r2, r2, #4
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	440b      	add	r3, r1
 8004c4a:	761a      	strb	r2, [r3, #24]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000e100 	.word	0xe000e100
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f1c3 0307 	rsb	r3, r3, #7
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	bf28      	it	cs
 8004c7e:	2304      	movcs	r3, #4
 8004c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d902      	bls.n	8004c90 <NVIC_EncodePriority+0x30>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3b03      	subs	r3, #3
 8004c8e:	e000      	b.n	8004c92 <NVIC_EncodePriority+0x32>
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	43d9      	mvns	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	4313      	orrs	r3, r2
         );
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3724      	adds	r7, #36	; 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd8:	d301      	bcc.n	8004cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00f      	b.n	8004cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <SysTick_Config+0x40>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce6:	210f      	movs	r1, #15
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	f7ff ff8e 	bl	8004c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <SysTick_Config+0x40>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <SysTick_Config+0x40>)
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000e010 	.word	0xe000e010

08004d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff29 	bl	8004b6c <__NVIC_SetPriorityGrouping>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d34:	f7ff ff3e 	bl	8004bb4 <__NVIC_GetPriorityGrouping>
 8004d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	6978      	ldr	r0, [r7, #20]
 8004d40:	f7ff ff8e 	bl	8004c60 <NVIC_EncodePriority>
 8004d44:	4602      	mov	r2, r0
 8004d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff5d 	bl	8004c0c <__NVIC_SetPriority>
}
 8004d52:	bf00      	nop
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff31 	bl	8004bd0 <__NVIC_EnableIRQ>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ffa2 	bl	8004cc8 <SysTick_Config>
 8004d84:	4603      	mov	r3, r0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e037      	b.n	8004e14 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004dba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004dbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9b8 	bl	800516c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}  
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_DMA_Start_IT+0x20>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e04a      	b.n	8004ed2 <HAL_DMA_Start_IT+0xb6>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d13a      	bne.n	8004ec4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f94b 	bl	800510e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 020e 	orr.w	r2, r2, #14
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e00f      	b.n	8004eb2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 020a 	orr.w	r2, r2, #10
 8004ea0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0204 	bic.w	r2, r2, #4
 8004eb0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e005      	b.n	8004ed0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d008      	beq.n	8004efe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2204      	movs	r2, #4
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e020      	b.n	8004f40 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 020e 	bic.w	r2, r2, #14
 8004f0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d005      	beq.n	8004f6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2204      	movs	r2, #4
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
 8004f6c:	e027      	b.n	8004fbe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 020e 	bic.w	r2, r2, #14
 8004f7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
    } 
  }
  return status;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	409a      	lsls	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d024      	beq.n	800503a <HAL_DMA_IRQHandler+0x72>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01f      	beq.n	800503a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d107      	bne.n	8005018 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0204 	bic.w	r2, r2, #4
 8005016:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	2104      	movs	r1, #4
 8005022:	fa01 f202 	lsl.w	r2, r1, r2
 8005026:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d06a      	beq.n	8005106 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005038:	e065      	b.n	8005106 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2202      	movs	r2, #2
 8005040:	409a      	lsls	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d02c      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xdc>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d027      	beq.n	80050a4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 020a 	bic.w	r2, r2, #10
 8005070:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	2102      	movs	r1, #2
 8005084:	fa01 f202 	lsl.w	r2, r1, r2
 8005088:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d035      	beq.n	8005106 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80050a2:	e030      	b.n	8005106 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2208      	movs	r2, #8
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d028      	beq.n	8005106 <HAL_DMA_IRQHandler+0x13e>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d023      	beq.n	8005106 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 020e 	bic.w	r2, r2, #14
 80050cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	2101      	movs	r1, #1
 80050d8:	fa01 f202 	lsl.w	r2, r1, r2
 80050dc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	4798      	blx	r3
    }
  }
}  
 8005104:	e7ff      	b.n	8005106 <HAL_DMA_IRQHandler+0x13e>
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	2101      	movs	r1, #1
 8005126:	fa01 f202 	lsl.w	r2, r1, r2
 800512a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d108      	bne.n	800514e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800514c:	e007      	b.n	800515e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <DMA_CalcBaseAndBitshift+0x60>)
 800517c:	429a      	cmp	r2, r3
 800517e:	d80f      	bhi.n	80051a0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <DMA_CalcBaseAndBitshift+0x64>)
 8005188:	4413      	add	r3, r2
 800518a:	4a12      	ldr	r2, [pc, #72]	; (80051d4 <DMA_CalcBaseAndBitshift+0x68>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	009a      	lsls	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a0f      	ldr	r2, [pc, #60]	; (80051d8 <DMA_CalcBaseAndBitshift+0x6c>)
 800519c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800519e:	e00e      	b.n	80051be <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <DMA_CalcBaseAndBitshift+0x70>)
 80051a8:	4413      	add	r3, r2
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <DMA_CalcBaseAndBitshift+0x68>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	009a      	lsls	r2, r3, #2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <DMA_CalcBaseAndBitshift+0x74>)
 80051bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40020407 	.word	0x40020407
 80051d0:	bffdfff8 	.word	0xbffdfff8
 80051d4:	cccccccd 	.word	0xcccccccd
 80051d8:	40020000 	.word	0x40020000
 80051dc:	bffdfbf8 	.word	0xbffdfbf8
 80051e0:	40020400 	.word	0x40020400

080051e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051f2:	e154      	b.n	800549e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	2101      	movs	r1, #1
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	4013      	ands	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8146 	beq.w	8005498 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d005      	beq.n	8005224 <HAL_GPIO_Init+0x40>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d130      	bne.n	8005286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	2203      	movs	r2, #3
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800525a:	2201      	movs	r2, #1
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4013      	ands	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	f003 0201 	and.w	r2, r3, #1
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b03      	cmp	r3, #3
 8005290:	d017      	beq.n	80052c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	2203      	movs	r2, #3
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d123      	bne.n	8005316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	08da      	lsrs	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3208      	adds	r2, #8
 80052d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	220f      	movs	r2, #15
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4013      	ands	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	08da      	lsrs	r2, r3, #3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3208      	adds	r2, #8
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	2203      	movs	r2, #3
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4013      	ands	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f003 0203 	and.w	r2, r3, #3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80a0 	beq.w	8005498 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005358:	4b58      	ldr	r3, [pc, #352]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	4a57      	ldr	r2, [pc, #348]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6193      	str	r3, [r2, #24]
 8005364:	4b55      	ldr	r3, [pc, #340]	; (80054bc <HAL_GPIO_Init+0x2d8>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005370:	4a53      	ldr	r2, [pc, #332]	; (80054c0 <HAL_GPIO_Init+0x2dc>)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	089b      	lsrs	r3, r3, #2
 8005376:	3302      	adds	r3, #2
 8005378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	220f      	movs	r2, #15
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800539a:	d019      	beq.n	80053d0 <HAL_GPIO_Init+0x1ec>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a49      	ldr	r2, [pc, #292]	; (80054c4 <HAL_GPIO_Init+0x2e0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_GPIO_Init+0x1e8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a48      	ldr	r2, [pc, #288]	; (80054c8 <HAL_GPIO_Init+0x2e4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00d      	beq.n	80053c8 <HAL_GPIO_Init+0x1e4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a47      	ldr	r2, [pc, #284]	; (80054cc <HAL_GPIO_Init+0x2e8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <HAL_GPIO_Init+0x1e0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a46      	ldr	r2, [pc, #280]	; (80054d0 <HAL_GPIO_Init+0x2ec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_GPIO_Init+0x1dc>
 80053bc:	2304      	movs	r3, #4
 80053be:	e008      	b.n	80053d2 <HAL_GPIO_Init+0x1ee>
 80053c0:	2305      	movs	r3, #5
 80053c2:	e006      	b.n	80053d2 <HAL_GPIO_Init+0x1ee>
 80053c4:	2303      	movs	r3, #3
 80053c6:	e004      	b.n	80053d2 <HAL_GPIO_Init+0x1ee>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e002      	b.n	80053d2 <HAL_GPIO_Init+0x1ee>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <HAL_GPIO_Init+0x1ee>
 80053d0:	2300      	movs	r3, #0
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	f002 0203 	and.w	r2, r2, #3
 80053d8:	0092      	lsls	r2, r2, #2
 80053da:	4093      	lsls	r3, r2
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053e2:	4937      	ldr	r1, [pc, #220]	; (80054c0 <HAL_GPIO_Init+0x2dc>)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	089b      	lsrs	r3, r3, #2
 80053e8:	3302      	adds	r3, #2
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053f0:	4b38      	ldr	r3, [pc, #224]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4013      	ands	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005414:	4a2f      	ldr	r2, [pc, #188]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800541a:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	43db      	mvns	r3, r3
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800543e:	4a25      	ldr	r2, [pc, #148]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005444:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	43db      	mvns	r3, r3
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4013      	ands	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005468:	4a1a      	ldr	r2, [pc, #104]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800546e:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	43db      	mvns	r3, r3
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4013      	ands	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005492:	4a10      	ldr	r2, [pc, #64]	; (80054d4 <HAL_GPIO_Init+0x2f0>)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3301      	adds	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f47f aea3 	bne.w	80051f4 <HAL_GPIO_Init+0x10>
  }
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40021000 	.word	0x40021000
 80054c0:	40010000 	.word	0x40010000
 80054c4:	48000400 	.word	0x48000400
 80054c8:	48000800 	.word	0x48000800
 80054cc:	48000c00 	.word	0x48000c00
 80054d0:	48001000 	.word	0x48001000
 80054d4:	40010400 	.word	0x40010400

080054d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	887b      	ldrh	r3, [r7, #2]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
 80054f4:	e001      	b.n	80054fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	807b      	strh	r3, [r7, #2]
 8005514:	4613      	mov	r3, r2
 8005516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005518:	787b      	ldrb	r3, [r7, #1]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800551e:	887a      	ldrh	r2, [r7, #2]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005524:	e002      	b.n	800552c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800553e:	af00      	add	r7, sp, #0
 8005540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005548:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800554a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f001 b823 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 817d 	beq.w	800586e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005574:	4bbc      	ldr	r3, [pc, #752]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b04      	cmp	r3, #4
 800557e:	d00c      	beq.n	800559a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005580:	4bb9      	ldr	r3, [pc, #740]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 030c 	and.w	r3, r3, #12
 8005588:	2b08      	cmp	r3, #8
 800558a:	d15c      	bne.n	8005646 <HAL_RCC_OscConfig+0x10e>
 800558c:	4bb6      	ldr	r3, [pc, #728]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d155      	bne.n	8005646 <HAL_RCC_OscConfig+0x10e>
 800559a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800559e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b2:	fab3 f383 	clz	r3, r3
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	095b      	lsrs	r3, r3, #5
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d102      	bne.n	80055cc <HAL_RCC_OscConfig+0x94>
 80055c6:	4ba8      	ldr	r3, [pc, #672]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	e015      	b.n	80055f8 <HAL_RCC_OscConfig+0xc0>
 80055cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80055d8:	fa93 f3a3 	rbit	r3, r3
 80055dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80055e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80055e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80055ec:	fa93 f3a3 	rbit	r3, r3
 80055f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80055f4:	4b9c      	ldr	r3, [pc, #624]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005600:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005604:	fa92 f2a2 	rbit	r2, r2
 8005608:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800560c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005610:	fab2 f282 	clz	r2, r2
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	f042 0220 	orr.w	r2, r2, #32
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	f002 021f 	and.w	r2, r2, #31
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f202 	lsl.w	r2, r1, r2
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 811f 	beq.w	800586c <HAL_RCC_OscConfig+0x334>
 800562e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	f040 8116 	bne.w	800586c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f000 bfaf 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800564a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x12e>
 8005658:	4b83      	ldr	r3, [pc, #524]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a82      	ldr	r2, [pc, #520]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 800565e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	e036      	b.n	80056d4 <HAL_RCC_OscConfig+0x19c>
 8005666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10c      	bne.n	8005690 <HAL_RCC_OscConfig+0x158>
 8005676:	4b7c      	ldr	r3, [pc, #496]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a7b      	ldr	r2, [pc, #492]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 800567c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	4b79      	ldr	r3, [pc, #484]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a78      	ldr	r2, [pc, #480]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 8005688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e021      	b.n	80056d4 <HAL_RCC_OscConfig+0x19c>
 8005690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0x184>
 80056a2:	4b71      	ldr	r3, [pc, #452]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a70      	ldr	r2, [pc, #448]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b6e      	ldr	r3, [pc, #440]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a6d      	ldr	r2, [pc, #436]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e00b      	b.n	80056d4 <HAL_RCC_OscConfig+0x19c>
 80056bc:	4b6a      	ldr	r3, [pc, #424]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a69      	ldr	r2, [pc, #420]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b67      	ldr	r3, [pc, #412]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a66      	ldr	r2, [pc, #408]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056d4:	4b64      	ldr	r3, [pc, #400]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	f023 020f 	bic.w	r2, r3, #15
 80056dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	495f      	ldr	r1, [pc, #380]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d059      	beq.n	80057b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fe:	f7fd fb4b 	bl	8002d98 <HAL_GetTick>
 8005702:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005708:	f7fd fb46 	bl	8002d98 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b64      	cmp	r3, #100	; 0x64
 8005716:	d902      	bls.n	800571e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	f000 bf43 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
 800571e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005722:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005732:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	fab3 f383 	clz	r3, r3
 800573a:	b2db      	uxtb	r3, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d102      	bne.n	8005750 <HAL_RCC_OscConfig+0x218>
 800574a:	4b47      	ldr	r3, [pc, #284]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	e015      	b.n	800577c <HAL_RCC_OscConfig+0x244>
 8005750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005754:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005758:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005768:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800576c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005770:	fa93 f3a3 	rbit	r3, r3
 8005774:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005778:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005780:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005784:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005788:	fa92 f2a2 	rbit	r2, r2
 800578c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005790:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005794:	fab2 f282 	clz	r2, r2
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	f042 0220 	orr.w	r2, r2, #32
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	f002 021f 	and.w	r2, r2, #31
 80057a4:	2101      	movs	r1, #1
 80057a6:	fa01 f202 	lsl.w	r2, r1, r2
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0ab      	beq.n	8005708 <HAL_RCC_OscConfig+0x1d0>
 80057b0:	e05d      	b.n	800586e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fd faf1 	bl	8002d98 <HAL_GetTick>
 80057b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	e00a      	b.n	80057d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fd faec 	bl	8002d98 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b64      	cmp	r3, #100	; 0x64
 80057ca:	d902      	bls.n	80057d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	f000 bee9 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
 80057d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80057e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ea:	fab3 f383 	clz	r3, r3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d102      	bne.n	8005804 <HAL_RCC_OscConfig+0x2cc>
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	e015      	b.n	8005830 <HAL_RCC_OscConfig+0x2f8>
 8005804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005808:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005810:	fa93 f3a3 	rbit	r3, r3
 8005814:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800581c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005820:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005824:	fa93 f3a3 	rbit	r3, r3
 8005828:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <HAL_RCC_OscConfig+0x330>)
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005834:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005838:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800583c:	fa92 f2a2 	rbit	r2, r2
 8005840:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005844:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005848:	fab2 f282 	clz	r2, r2
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	f042 0220 	orr.w	r2, r2, #32
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	f002 021f 	and.w	r2, r2, #31
 8005858:	2101      	movs	r1, #1
 800585a:	fa01 f202 	lsl.w	r2, r1, r2
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ab      	bne.n	80057bc <HAL_RCC_OscConfig+0x284>
 8005864:	e003      	b.n	800586e <HAL_RCC_OscConfig+0x336>
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 817d 	beq.w	8005b7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005884:	4ba6      	ldr	r3, [pc, #664]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 030c 	and.w	r3, r3, #12
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005890:	4ba3      	ldr	r3, [pc, #652]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 030c 	and.w	r3, r3, #12
 8005898:	2b08      	cmp	r3, #8
 800589a:	d172      	bne.n	8005982 <HAL_RCC_OscConfig+0x44a>
 800589c:	4ba0      	ldr	r3, [pc, #640]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d16c      	bne.n	8005982 <HAL_RCC_OscConfig+0x44a>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80058b2:	fa93 f3a3 	rbit	r3, r3
 80058b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80058ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	fab3 f383 	clz	r3, r3
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d102      	bne.n	80058d8 <HAL_RCC_OscConfig+0x3a0>
 80058d2:	4b93      	ldr	r3, [pc, #588]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	e013      	b.n	8005900 <HAL_RCC_OscConfig+0x3c8>
 80058d8:	2302      	movs	r3, #2
 80058da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80058e2:	fa93 f3a3 	rbit	r3, r3
 80058e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80058ea:	2302      	movs	r3, #2
 80058ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80058f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80058f4:	fa93 f3a3 	rbit	r3, r3
 80058f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80058fc:	4b88      	ldr	r3, [pc, #544]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2202      	movs	r2, #2
 8005902:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005906:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800590a:	fa92 f2a2 	rbit	r2, r2
 800590e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005912:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005916:	fab2 f282 	clz	r2, r2
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	f042 0220 	orr.w	r2, r2, #32
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	f002 021f 	and.w	r2, r2, #31
 8005926:	2101      	movs	r1, #1
 8005928:	fa01 f202 	lsl.w	r2, r1, r2
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCC_OscConfig+0x410>
 8005932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005936:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d002      	beq.n	8005948 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f000 be2e 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005948:	4b75      	ldr	r3, [pc, #468]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005954:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	21f8      	movs	r1, #248	; 0xf8
 800595e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005966:	fa91 f1a1 	rbit	r1, r1
 800596a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800596e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005972:	fab1 f181 	clz	r1, r1
 8005976:	b2c9      	uxtb	r1, r1
 8005978:	408b      	lsls	r3, r1
 800597a:	4969      	ldr	r1, [pc, #420]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005980:	e0fd      	b.n	8005b7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8088 	beq.w	8005aa4 <HAL_RCC_OscConfig+0x56c>
 8005994:	2301      	movs	r3, #1
 8005996:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80059a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059aa:	fab3 f383 	clz	r3, r3
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	2301      	movs	r3, #1
 80059be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fd f9ea 	bl	8002d98 <HAL_GetTick>
 80059c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ca:	f7fd f9e5 	bl	8002d98 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d902      	bls.n	80059e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	f000 bde2 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
 80059e0:	2302      	movs	r3, #2
 80059e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80059f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d102      	bne.n	8005a10 <HAL_RCC_OscConfig+0x4d8>
 8005a0a:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	e013      	b.n	8005a38 <HAL_RCC_OscConfig+0x500>
 8005a10:	2302      	movs	r3, #2
 8005a12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005a1a:	fa93 f3a3 	rbit	r3, r3
 8005a1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005a22:	2302      	movs	r3, #2
 8005a24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005a28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005a2c:	fa93 f3a3 	rbit	r3, r3
 8005a30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005a34:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005a3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005a42:	fa92 f2a2 	rbit	r2, r2
 8005a46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005a4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005a4e:	fab2 f282 	clz	r2, r2
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	f042 0220 	orr.w	r2, r2, #32
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	f002 021f 	and.w	r2, r2, #31
 8005a5e:	2101      	movs	r1, #1
 8005a60:	fa01 f202 	lsl.w	r2, r1, r2
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0af      	beq.n	80059ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b2d      	ldr	r3, [pc, #180]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	21f8      	movs	r1, #248	; 0xf8
 8005a80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005a88:	fa91 f1a1 	rbit	r1, r1
 8005a8c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005a90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005a94:	fab1 f181 	clz	r1, r1
 8005a98:	b2c9      	uxtb	r1, r1
 8005a9a:	408b      	lsls	r3, r1
 8005a9c:	4920      	ldr	r1, [pc, #128]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]
 8005aa2:	e06c      	b.n	8005b7e <HAL_RCC_OscConfig+0x646>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005aae:	fa93 f3a3 	rbit	r3, r3
 8005ab2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005ab6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aba:	fab3 f383 	clz	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ac4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	461a      	mov	r2, r3
 8005acc:	2300      	movs	r3, #0
 8005ace:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad0:	f7fd f962 	bl	8002d98 <HAL_GetTick>
 8005ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ada:	f7fd f95d 	bl	8002d98 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d902      	bls.n	8005af0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	f000 bd5a 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
 8005af0:	2302      	movs	r3, #2
 8005af2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005afa:	fa93 f3a3 	rbit	r3, r3
 8005afe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b06:	fab3 f383 	clz	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f043 0301 	orr.w	r3, r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d104      	bne.n	8005b24 <HAL_RCC_OscConfig+0x5ec>
 8005b1a:	4b01      	ldr	r3, [pc, #4]	; (8005b20 <HAL_RCC_OscConfig+0x5e8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	e015      	b.n	8005b4c <HAL_RCC_OscConfig+0x614>
 8005b20:	40021000 	.word	0x40021000
 8005b24:	2302      	movs	r3, #2
 8005b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b36:	2302      	movs	r3, #2
 8005b38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b40:	fa93 f3a3 	rbit	r3, r3
 8005b44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b48:	4bc8      	ldr	r3, [pc, #800]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005b52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b56:	fa92 f2a2 	rbit	r2, r2
 8005b5a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005b5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005b62:	fab2 f282 	clz	r2, r2
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	f042 0220 	orr.w	r2, r2, #32
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	f002 021f 	and.w	r2, r2, #31
 8005b72:	2101      	movs	r1, #1
 8005b74:	fa01 f202 	lsl.w	r2, r1, r2
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ad      	bne.n	8005ada <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8110 	beq.w	8005db4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d079      	beq.n	8005c98 <HAL_RCC_OscConfig+0x760>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bae:	fa93 f3a3 	rbit	r3, r3
 8005bb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bba:	fab3 f383 	clz	r3, r3
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4bab      	ldr	r3, [pc, #684]	; (8005e70 <HAL_RCC_OscConfig+0x938>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2301      	movs	r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bce:	f7fd f8e3 	bl	8002d98 <HAL_GetTick>
 8005bd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fd f8de 	bl	8002d98 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d902      	bls.n	8005bee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	f000 bcdb 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bf8:	fa93 f3a3 	rbit	r3, r3
 8005bfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c08:	2202      	movs	r2, #2
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	fa93 f2a3 	rbit	r2, r3
 8005c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	fa93 f2a3 	rbit	r2, r3
 8005c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c48:	4b88      	ldr	r3, [pc, #544]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c54:	2102      	movs	r1, #2
 8005c56:	6019      	str	r1, [r3, #0]
 8005c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	fa93 f1a3 	rbit	r1, r3
 8005c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c6e:	6019      	str	r1, [r3, #0]
  return result;
 8005c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	fab3 f383 	clz	r3, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0a0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x6a0>
 8005c96:	e08d      	b.n	8005db4 <HAL_RCC_OscConfig+0x87c>
 8005c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	fa93 f2a3 	rbit	r2, r3
 8005cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cba:	601a      	str	r2, [r3, #0]
  return result;
 8005cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc6:	fab3 f383 	clz	r3, r3
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b68      	ldr	r3, [pc, #416]	; (8005e70 <HAL_RCC_OscConfig+0x938>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cda:	f7fd f85d 	bl	8002d98 <HAL_GetTick>
 8005cde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce4:	f7fd f858 	bl	8002d98 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d902      	bls.n	8005cfa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	f000 bc55 	b.w	80065a4 <HAL_RCC_OscConfig+0x106c>
 8005cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005d02:	2202      	movs	r2, #2
 8005d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	fa93 f2a3 	rbit	r2, r3
 8005d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d26:	2202      	movs	r2, #2
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	fa93 f2a3 	rbit	r2, r3
 8005d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	fa93 f2a3 	rbit	r2, r3
 8005d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005d64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d66:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005d72:	2102      	movs	r1, #2
 8005d74:	6019      	str	r1, [r3, #0]
 8005d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	fa93 f1a3 	rbit	r1, r3
 8005d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005d8c:	6019      	str	r1, [r3, #0]
  return result;
 8005d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	fab3 f383 	clz	r3, r3
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2101      	movs	r1, #1
 8005daa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d197      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 81a1 	beq.w	800610c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd0:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d116      	bne.n	8005e0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ddc:	4b23      	ldr	r3, [pc, #140]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de6:	61d3      	str	r3, [r2, #28]
 8005de8:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dfe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005e02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <HAL_RCC_OscConfig+0x93c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d11a      	bne.n	8005e4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e16:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <HAL_RCC_OscConfig+0x93c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a16      	ldr	r2, [pc, #88]	; (8005e74 <HAL_RCC_OscConfig+0x93c>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e22:	f7fc ffb9 	bl	8002d98 <HAL_GetTick>
 8005e26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2a:	e009      	b.n	8005e40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2c:	f7fc ffb4 	bl	8002d98 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b64      	cmp	r3, #100	; 0x64
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e3b1      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <HAL_RCC_OscConfig+0x93c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0ef      	beq.n	8005e2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d10d      	bne.n	8005e78 <HAL_RCC_OscConfig+0x940>
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	4a02      	ldr	r2, [pc, #8]	; (8005e6c <HAL_RCC_OscConfig+0x934>)
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	6213      	str	r3, [r2, #32]
 8005e68:	e03c      	b.n	8005ee4 <HAL_RCC_OscConfig+0x9ac>
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	10908120 	.word	0x10908120
 8005e74:	40007000 	.word	0x40007000
 8005e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10c      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x96a>
 8005e88:	4bc1      	ldr	r3, [pc, #772]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	4ac0      	ldr	r2, [pc, #768]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	6213      	str	r3, [r2, #32]
 8005e94:	4bbe      	ldr	r3, [pc, #760]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	4abd      	ldr	r2, [pc, #756]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005e9a:	f023 0304 	bic.w	r3, r3, #4
 8005e9e:	6213      	str	r3, [r2, #32]
 8005ea0:	e020      	b.n	8005ee4 <HAL_RCC_OscConfig+0x9ac>
 8005ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d10c      	bne.n	8005ecc <HAL_RCC_OscConfig+0x994>
 8005eb2:	4bb7      	ldr	r3, [pc, #732]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	4ab6      	ldr	r2, [pc, #728]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005eb8:	f043 0304 	orr.w	r3, r3, #4
 8005ebc:	6213      	str	r3, [r2, #32]
 8005ebe:	4bb4      	ldr	r3, [pc, #720]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	4ab3      	ldr	r2, [pc, #716]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	6213      	str	r3, [r2, #32]
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCC_OscConfig+0x9ac>
 8005ecc:	4bb0      	ldr	r3, [pc, #704]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	4aaf      	ldr	r2, [pc, #700]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005ed2:	f023 0301 	bic.w	r3, r3, #1
 8005ed6:	6213      	str	r3, [r2, #32]
 8005ed8:	4bad      	ldr	r3, [pc, #692]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	4aac      	ldr	r2, [pc, #688]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005ede:	f023 0304 	bic.w	r3, r3, #4
 8005ee2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8081 	beq.w	8005ff8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ef6:	f7fc ff4f 	bl	8002d98 <HAL_GetTick>
 8005efa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efe:	e00b      	b.n	8005f18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f00:	f7fc ff4a 	bl	8002d98 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e345      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
 8005f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005f20:	2202      	movs	r2, #2
 8005f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f28:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	fa93 f2a3 	rbit	r2, r3
 8005f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f36:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f44:	2202      	movs	r2, #2
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	fa93 f2a3 	rbit	r2, r3
 8005f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f5a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005f5e:	601a      	str	r2, [r3, #0]
  return result;
 8005f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f64:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005f68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6a:	fab3 f383 	clz	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f043 0302 	orr.w	r3, r3, #2
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d102      	bne.n	8005f84 <HAL_RCC_OscConfig+0xa4c>
 8005f7e:	4b84      	ldr	r3, [pc, #528]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	e013      	b.n	8005fac <HAL_RCC_OscConfig+0xa74>
 8005f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	fa93 f2a3 	rbit	r2, r3
 8005f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fa2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	4b79      	ldr	r3, [pc, #484]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fb0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	6011      	str	r1, [r2, #0]
 8005fb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fbc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	fa92 f1a2 	rbit	r1, r2
 8005fc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005fce:	6011      	str	r1, [r2, #0]
  return result;
 8005fd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fd4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	fab2 f282 	clz	r2, r2
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	f002 021f 	and.w	r2, r2, #31
 8005fea:	2101      	movs	r1, #1
 8005fec:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d084      	beq.n	8005f00 <HAL_RCC_OscConfig+0x9c8>
 8005ff6:	e07f      	b.n	80060f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff8:	f7fc fece 	bl	8002d98 <HAL_GetTick>
 8005ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006000:	e00b      	b.n	800601a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006002:	f7fc fec9 	bl	8002d98 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e2c4      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
 800601a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800601e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006022:	2202      	movs	r2, #2
 8006024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	fa93 f2a3 	rbit	r2, r3
 8006034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006038:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006042:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006046:	2202      	movs	r2, #2
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	fa93 f2a3 	rbit	r2, r3
 8006058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800605c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006060:	601a      	str	r2, [r3, #0]
  return result;
 8006062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006066:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800606a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800606c:	fab3 f383 	clz	r3, r3
 8006070:	b2db      	uxtb	r3, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f043 0302 	orr.w	r3, r3, #2
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d102      	bne.n	8006086 <HAL_RCC_OscConfig+0xb4e>
 8006080:	4b43      	ldr	r3, [pc, #268]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	e013      	b.n	80060ae <HAL_RCC_OscConfig+0xb76>
 8006086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800608a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800608e:	2202      	movs	r2, #2
 8006090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006096:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	fa93 f2a3 	rbit	r2, r3
 80060a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	4b39      	ldr	r3, [pc, #228]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80060b6:	2102      	movs	r1, #2
 80060b8:	6011      	str	r1, [r2, #0]
 80060ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	fa92 f1a2 	rbit	r1, r2
 80060c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80060d0:	6011      	str	r1, [r2, #0]
  return result;
 80060d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	fab2 f282 	clz	r2, r2
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	f002 021f 	and.w	r2, r2, #31
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f202 	lsl.w	r2, r1, r2
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d184      	bne.n	8006002 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d105      	bne.n	800610c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006100:	4b23      	ldr	r3, [pc, #140]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	4a22      	ldr	r2, [pc, #136]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8006106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800610a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800610c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8242 	beq.w	80065a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800611e:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <HAL_RCC_OscConfig+0xc58>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b08      	cmp	r3, #8
 8006128:	f000 8213 	beq.w	8006552 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800612c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006130:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	2b02      	cmp	r3, #2
 800613a:	f040 8162 	bne.w	8006402 <HAL_RCC_OscConfig+0xeca>
 800613e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006142:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800614a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006150:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	fa93 f2a3 	rbit	r2, r3
 800615a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800615e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006162:	601a      	str	r2, [r3, #0]
  return result;
 8006164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006168:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800616c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800616e:	fab3 f383 	clz	r3, r3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	461a      	mov	r2, r3
 8006180:	2300      	movs	r3, #0
 8006182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006184:	f7fc fe08 	bl	8002d98 <HAL_GetTick>
 8006188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800618c:	e00c      	b.n	80061a8 <HAL_RCC_OscConfig+0xc70>
 800618e:	bf00      	nop
 8006190:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006194:	f7fc fe00 	bl	8002d98 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e1fd      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
 80061a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80061b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	fa93 f2a3 	rbit	r2, r3
 80061c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80061cc:	601a      	str	r2, [r3, #0]
  return result;
 80061ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80061d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061d8:	fab3 f383 	clz	r3, r3
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d102      	bne.n	80061f2 <HAL_RCC_OscConfig+0xcba>
 80061ec:	4bb0      	ldr	r3, [pc, #704]	; (80064b0 <HAL_RCC_OscConfig+0xf78>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	e027      	b.n	8006242 <HAL_RCC_OscConfig+0xd0a>
 80061f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80061fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006204:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	fa93 f2a3 	rbit	r2, r3
 800620e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006212:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800621c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800622a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	fa93 f2a3 	rbit	r2, r3
 8006234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006238:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	4b9c      	ldr	r3, [pc, #624]	; (80064b0 <HAL_RCC_OscConfig+0xf78>)
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006246:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800624a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800624e:	6011      	str	r1, [r2, #0]
 8006250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006254:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	fa92 f1a2 	rbit	r1, r2
 800625e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006262:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006266:	6011      	str	r1, [r2, #0]
  return result;
 8006268:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800626c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	fab2 f282 	clz	r2, r2
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	f042 0220 	orr.w	r2, r2, #32
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	f002 021f 	and.w	r2, r2, #31
 8006282:	2101      	movs	r1, #1
 8006284:	fa01 f202 	lsl.w	r2, r1, r2
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d182      	bne.n	8006194 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800628e:	4b88      	ldr	r3, [pc, #544]	; (80064b0 <HAL_RCC_OscConfig+0xf78>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800629a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80062a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	430b      	orrs	r3, r1
 80062b0:	497f      	ldr	r1, [pc, #508]	; (80064b0 <HAL_RCC_OscConfig+0xf78>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	604b      	str	r3, [r1, #4]
 80062b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80062be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	fa93 f2a3 	rbit	r2, r3
 80062d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80062da:	601a      	str	r2, [r3, #0]
  return result;
 80062dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80062e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062e6:	fab3 f383 	clz	r3, r3
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	461a      	mov	r2, r3
 80062f8:	2301      	movs	r3, #1
 80062fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fc fd4c 	bl	8002d98 <HAL_GetTick>
 8006300:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006304:	e009      	b.n	800631a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006306:	f7fc fd47 	bl	8002d98 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e144      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
 800631a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800631e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800632c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	fa93 f2a3 	rbit	r2, r3
 8006336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800633a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800633e:	601a      	str	r2, [r3, #0]
  return result;
 8006340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006344:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006348:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	d102      	bne.n	8006364 <HAL_RCC_OscConfig+0xe2c>
 800635e:	4b54      	ldr	r3, [pc, #336]	; (80064b0 <HAL_RCC_OscConfig+0xf78>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	e027      	b.n	80063b4 <HAL_RCC_OscConfig+0xe7c>
 8006364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006368:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800636c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006376:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	fa93 f2a3 	rbit	r2, r3
 8006380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006384:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800638e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800639c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	fa93 f2a3 	rbit	r2, r3
 80063a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	4b3f      	ldr	r3, [pc, #252]	; (80064b0 <HAL_RCC_OscConfig+0xf78>)
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80063bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	fa92 f1a2 	rbit	r1, r2
 80063d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80063d8:	6011      	str	r1, [r2, #0]
  return result;
 80063da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	fab2 f282 	clz	r2, r2
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	f042 0220 	orr.w	r2, r2, #32
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	f002 021f 	and.w	r2, r2, #31
 80063f4:	2101      	movs	r1, #1
 80063f6:	fa01 f202 	lsl.w	r2, r1, r2
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d082      	beq.n	8006306 <HAL_RCC_OscConfig+0xdce>
 8006400:	e0cf      	b.n	80065a2 <HAL_RCC_OscConfig+0x106a>
 8006402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006406:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800640a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800640e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006414:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	fa93 f2a3 	rbit	r2, r3
 800641e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006422:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006426:	601a      	str	r2, [r3, #0]
  return result;
 8006428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800642c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006430:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006432:	fab3 f383 	clz	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800643c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	461a      	mov	r2, r3
 8006444:	2300      	movs	r3, #0
 8006446:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006448:	f7fc fca6 	bl	8002d98 <HAL_GetTick>
 800644c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006450:	e009      	b.n	8006466 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006452:	f7fc fca1 	bl	8002d98 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e09e      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
 8006466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800646a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800646e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006478:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	fa93 f2a3 	rbit	r2, r3
 8006482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006486:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800648a:	601a      	str	r2, [r3, #0]
  return result;
 800648c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006490:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006494:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d104      	bne.n	80064b4 <HAL_RCC_OscConfig+0xf7c>
 80064aa:	4b01      	ldr	r3, [pc, #4]	; (80064b0 <HAL_RCC_OscConfig+0xf78>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	e029      	b.n	8006504 <HAL_RCC_OscConfig+0xfcc>
 80064b0:	40021000 	.word	0x40021000
 80064b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80064bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	fa93 f2a3 	rbit	r2, r3
 80064d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80064e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	fa93 f2a3 	rbit	r2, r3
 80064f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <HAL_RCC_OscConfig+0x1078>)
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006508:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800650c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006510:	6011      	str	r1, [r2, #0]
 8006512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006516:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	fa92 f1a2 	rbit	r1, r2
 8006520:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006524:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006528:	6011      	str	r1, [r2, #0]
  return result;
 800652a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800652e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	fab2 f282 	clz	r2, r2
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	f042 0220 	orr.w	r2, r2, #32
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	f002 021f 	and.w	r2, r2, #31
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f202 	lsl.w	r2, r1, r2
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d180      	bne.n	8006452 <HAL_RCC_OscConfig+0xf1a>
 8006550:	e027      	b.n	80065a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e01e      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <HAL_RCC_OscConfig+0x1078>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800656e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006572:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800657a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	429a      	cmp	r2, r3
 8006584:	d10b      	bne.n	800659e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006586:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800658a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800658e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006592:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800659a:	429a      	cmp	r2, r3
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000

080065b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b09e      	sub	sp, #120	; 0x78
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e162      	b.n	8006892 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065cc:	4b90      	ldr	r3, [pc, #576]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d910      	bls.n	80065fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	4b8d      	ldr	r3, [pc, #564]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 0207 	bic.w	r2, r3, #7
 80065e2:	498b      	ldr	r1, [pc, #556]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b89      	ldr	r3, [pc, #548]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e14a      	b.n	8006892 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006608:	4b82      	ldr	r3, [pc, #520]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	497f      	ldr	r1, [pc, #508]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 8006616:	4313      	orrs	r3, r2
 8006618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80dc 	beq.w	80067e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d13c      	bne.n	80066aa <HAL_RCC_ClockConfig+0xf6>
 8006630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006634:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006638:	fa93 f3a3 	rbit	r3, r3
 800663c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800663e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006640:	fab3 f383 	clz	r3, r3
 8006644:	b2db      	uxtb	r3, r3
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d102      	bne.n	800665a <HAL_RCC_ClockConfig+0xa6>
 8006654:	4b6f      	ldr	r3, [pc, #444]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	e00f      	b.n	800667a <HAL_RCC_ClockConfig+0xc6>
 800665a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800665e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006662:	fa93 f3a3 	rbit	r3, r3
 8006666:	667b      	str	r3, [r7, #100]	; 0x64
 8006668:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800666c:	663b      	str	r3, [r7, #96]	; 0x60
 800666e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006670:	fa93 f3a3 	rbit	r3, r3
 8006674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006676:	4b67      	ldr	r3, [pc, #412]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800667e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006682:	fa92 f2a2 	rbit	r2, r2
 8006686:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800668a:	fab2 f282 	clz	r2, r2
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	f042 0220 	orr.w	r2, r2, #32
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	f002 021f 	and.w	r2, r2, #31
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f202 	lsl.w	r2, r1, r2
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d17b      	bne.n	800679e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e0f3      	b.n	8006892 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d13c      	bne.n	800672c <HAL_RCC_ClockConfig+0x178>
 80066b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ba:	fa93 f3a3 	rbit	r3, r3
 80066be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80066c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066c2:	fab3 f383 	clz	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d102      	bne.n	80066dc <HAL_RCC_ClockConfig+0x128>
 80066d6:	4b4f      	ldr	r3, [pc, #316]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	e00f      	b.n	80066fc <HAL_RCC_ClockConfig+0x148>
 80066dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e4:	fa93 f3a3 	rbit	r3, r3
 80066e8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066ee:	643b      	str	r3, [r7, #64]	; 0x40
 80066f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f2:	fa93 f3a3 	rbit	r3, r3
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f8:	4b46      	ldr	r3, [pc, #280]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006700:	63ba      	str	r2, [r7, #56]	; 0x38
 8006702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006704:	fa92 f2a2 	rbit	r2, r2
 8006708:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800670a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670c:	fab2 f282 	clz	r2, r2
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	f042 0220 	orr.w	r2, r2, #32
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	f002 021f 	and.w	r2, r2, #31
 800671c:	2101      	movs	r1, #1
 800671e:	fa01 f202 	lsl.w	r2, r1, r2
 8006722:	4013      	ands	r3, r2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d13a      	bne.n	800679e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b2      	b.n	8006892 <HAL_RCC_ClockConfig+0x2de>
 800672c:	2302      	movs	r3, #2
 800672e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	fa93 f3a3 	rbit	r3, r3
 8006736:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673a:	fab3 f383 	clz	r3, r3
 800673e:	b2db      	uxtb	r3, r3
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b01      	cmp	r3, #1
 800674c:	d102      	bne.n	8006754 <HAL_RCC_ClockConfig+0x1a0>
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	e00d      	b.n	8006770 <HAL_RCC_ClockConfig+0x1bc>
 8006754:	2302      	movs	r3, #2
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	fa93 f3a3 	rbit	r3, r3
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	2302      	movs	r3, #2
 8006762:	623b      	str	r3, [r7, #32]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	fa93 f3a3 	rbit	r3, r3
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	4b29      	ldr	r3, [pc, #164]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2202      	movs	r2, #2
 8006772:	61ba      	str	r2, [r7, #24]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	fa92 f2a2 	rbit	r2, r2
 800677a:	617a      	str	r2, [r7, #20]
  return result;
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	fab2 f282 	clz	r2, r2
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	f042 0220 	orr.w	r2, r2, #32
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	f002 021f 	and.w	r2, r2, #31
 800678e:	2101      	movs	r1, #1
 8006790:	fa01 f202 	lsl.w	r2, r1, r2
 8006794:	4013      	ands	r3, r2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e079      	b.n	8006892 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679e:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f023 0203 	bic.w	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	491a      	ldr	r1, [pc, #104]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b0:	f7fc faf2 	bl	8002d98 <HAL_GetTick>
 80067b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fc faee 	bl	8002d98 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e061      	b.n	8006892 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <HAL_RCC_ClockConfig+0x260>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f003 020c 	and.w	r2, r3, #12
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	429a      	cmp	r2, r3
 80067de:	d1eb      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d214      	bcs.n	8006818 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 0207 	bic.w	r2, r3, #7
 80067f6:	4906      	ldr	r1, [pc, #24]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <HAL_RCC_ClockConfig+0x25c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d005      	beq.n	8006818 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e040      	b.n	8006892 <HAL_RCC_ClockConfig+0x2de>
 8006810:	40022000 	.word	0x40022000
 8006814:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d008      	beq.n	8006836 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006824:	4b1d      	ldr	r3, [pc, #116]	; (800689c <HAL_RCC_ClockConfig+0x2e8>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	491a      	ldr	r1, [pc, #104]	; (800689c <HAL_RCC_ClockConfig+0x2e8>)
 8006832:	4313      	orrs	r3, r2
 8006834:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006842:	4b16      	ldr	r3, [pc, #88]	; (800689c <HAL_RCC_ClockConfig+0x2e8>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4912      	ldr	r1, [pc, #72]	; (800689c <HAL_RCC_ClockConfig+0x2e8>)
 8006852:	4313      	orrs	r3, r2
 8006854:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006856:	f000 f829 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 800685a:	4601      	mov	r1, r0
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <HAL_RCC_ClockConfig+0x2e8>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006864:	22f0      	movs	r2, #240	; 0xf0
 8006866:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	fa92 f2a2 	rbit	r2, r2
 800686e:	60fa      	str	r2, [r7, #12]
  return result;
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	fab2 f282 	clz	r2, r2
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	40d3      	lsrs	r3, r2
 800687a:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <HAL_RCC_ClockConfig+0x2ec>)
 800687c:	5cd3      	ldrb	r3, [r2, r3]
 800687e:	fa21 f303 	lsr.w	r3, r1, r3
 8006882:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <HAL_RCC_ClockConfig+0x2f0>)
 8006884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <HAL_RCC_ClockConfig+0x2f4>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f7fc fa40 	bl	8002d10 <HAL_InitTick>
  
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3778      	adds	r7, #120	; 0x78
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40021000 	.word	0x40021000
 80068a0:	0800c73c 	.word	0x0800c73c
 80068a4:	20000000 	.word	0x20000000
 80068a8:	20000004 	.word	0x20000004

080068ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b08b      	sub	sp, #44	; 0x2c
 80068b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	2300      	movs	r3, #0
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	2300      	movs	r3, #0
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80068c6:	4b29      	ldr	r3, [pc, #164]	; (800696c <HAL_RCC_GetSysClockFreq+0xc0>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f003 030c 	and.w	r3, r3, #12
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d002      	beq.n	80068dc <HAL_RCC_GetSysClockFreq+0x30>
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d003      	beq.n	80068e2 <HAL_RCC_GetSysClockFreq+0x36>
 80068da:	e03c      	b.n	8006956 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068dc:	4b24      	ldr	r3, [pc, #144]	; (8006970 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068de:	623b      	str	r3, [r7, #32]
      break;
 80068e0:	e03c      	b.n	800695c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80068e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80068ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	fa92 f2a2 	rbit	r2, r2
 80068f4:	607a      	str	r2, [r7, #4]
  return result;
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	fab2 f282 	clz	r2, r2
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	40d3      	lsrs	r3, r2
 8006900:	4a1c      	ldr	r2, [pc, #112]	; (8006974 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006902:	5cd3      	ldrb	r3, [r2, r3]
 8006904:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	220f      	movs	r2, #15
 8006910:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	fa92 f2a2 	rbit	r2, r2
 8006918:	60fa      	str	r2, [r7, #12]
  return result;
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	fab2 f282 	clz	r2, r2
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	40d3      	lsrs	r3, r2
 8006924:	4a14      	ldr	r2, [pc, #80]	; (8006978 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006926:	5cd3      	ldrb	r3, [r2, r3]
 8006928:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006934:	4a0e      	ldr	r2, [pc, #56]	; (8006970 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	fbb2 f2f3 	udiv	r2, r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	fb02 f303 	mul.w	r3, r2, r3
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
 8006944:	e004      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4a0c      	ldr	r2, [pc, #48]	; (800697c <HAL_RCC_GetSysClockFreq+0xd0>)
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	623b      	str	r3, [r7, #32]
      break;
 8006954:	e002      	b.n	800695c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006958:	623b      	str	r3, [r7, #32]
      break;
 800695a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800695c:	6a3b      	ldr	r3, [r7, #32]
}
 800695e:	4618      	mov	r0, r3
 8006960:	372c      	adds	r7, #44	; 0x2c
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40021000 	.word	0x40021000
 8006970:	007a1200 	.word	0x007a1200
 8006974:	0800c754 	.word	0x0800c754
 8006978:	0800c764 	.word	0x0800c764
 800697c:	003d0900 	.word	0x003d0900

08006980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <HAL_RCC_GetHCLKFreq+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000000 	.word	0x20000000

08006998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800699e:	f7ff ffef 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069a2:	4601      	mov	r1, r0
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80069b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	fa92 f2a2 	rbit	r2, r2
 80069b8:	603a      	str	r2, [r7, #0]
  return result;
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	fab2 f282 	clz	r2, r2
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	40d3      	lsrs	r3, r2
 80069c4:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80069c6:	5cd3      	ldrb	r3, [r2, r3]
 80069c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000
 80069d8:	0800c74c 	.word	0x0800c74c

080069dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80069e2:	f7ff ffcd 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069e6:	4601      	mov	r1, r0
 80069e8:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80069f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80069f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	fa92 f2a2 	rbit	r2, r2
 80069fc:	603a      	str	r2, [r7, #0]
  return result;
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	fab2 f282 	clz	r2, r2
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	40d3      	lsrs	r3, r2
 8006a08:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8006a0a:	5cd3      	ldrb	r3, [r2, r3]
 8006a0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	0800c74c 	.word	0x0800c74c

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b092      	sub	sp, #72	; 0x48
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 80d4 	beq.w	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a44:	4b4e      	ldr	r3, [pc, #312]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10e      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	4a4a      	ldr	r2, [pc, #296]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	61d3      	str	r3, [r2, #28]
 8006a5c:	4b48      	ldr	r3, [pc, #288]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	4b45      	ldr	r3, [pc, #276]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d118      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a7a:	4b42      	ldr	r3, [pc, #264]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a41      	ldr	r2, [pc, #260]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a86:	f7fc f987 	bl	8002d98 <HAL_GetTick>
 8006a8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8e:	f7fc f983 	bl	8002d98 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b64      	cmp	r3, #100	; 0x64
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e169      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	4b38      	ldr	r3, [pc, #224]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aac:	4b34      	ldr	r3, [pc, #208]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 8084 	beq.w	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d07c      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006acc:	4b2c      	ldr	r3, [pc, #176]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	fa93 f3a3 	rbit	r3, r3
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ae6:	fab3 f383 	clz	r3, r3
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	461a      	mov	r2, r3
 8006af6:	2301      	movs	r3, #1
 8006af8:	6013      	str	r3, [r2, #0]
 8006afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	fa93 f3a3 	rbit	r3, r3
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b0a:	fab3 f383 	clz	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d04b      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b2e:	f7fc f933 	bl	8002d98 <HAL_GetTick>
 8006b32:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b34:	e00a      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b36:	f7fc f92f 	bl	8002d98 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e113      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	fa93 f3a3 	rbit	r3, r3
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
 8006b58:	2302      	movs	r3, #2
 8006b5a:	623b      	str	r3, [r7, #32]
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	fa93 f3a3 	rbit	r3, r3
 8006b62:	61fb      	str	r3, [r7, #28]
  return result;
 8006b64:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b66:	fab3 f383 	clz	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d108      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006b7a:	4b01      	ldr	r3, [pc, #4]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	e00d      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006b80:	40021000 	.word	0x40021000
 8006b84:	40007000 	.word	0x40007000
 8006b88:	10908100 	.word	0x10908100
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	fa93 f3a3 	rbit	r3, r3
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	4b78      	ldr	r3, [pc, #480]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	613a      	str	r2, [r7, #16]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	fa92 f2a2 	rbit	r2, r2
 8006ba6:	60fa      	str	r2, [r7, #12]
  return result;
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	fab2 f282 	clz	r2, r2
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	f002 021f 	and.w	r2, r2, #31
 8006bba:	2101      	movs	r1, #1
 8006bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0b7      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006bc6:	4b6d      	ldr	r3, [pc, #436]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	496a      	ldr	r1, [pc, #424]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d105      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be0:	4b66      	ldr	r3, [pc, #408]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	4a65      	ldr	r2, [pc, #404]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bf8:	4b60      	ldr	r3, [pc, #384]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	f023 0203 	bic.w	r2, r3, #3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	495d      	ldr	r1, [pc, #372]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c16:	4b59      	ldr	r3, [pc, #356]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	4956      	ldr	r1, [pc, #344]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c34:	4b51      	ldr	r3, [pc, #324]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	494e      	ldr	r1, [pc, #312]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d008      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c52:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	f023 0210 	bic.w	r2, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	4947      	ldr	r1, [pc, #284]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006c70:	4b42      	ldr	r3, [pc, #264]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	493f      	ldr	r1, [pc, #252]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c8e:	4b3b      	ldr	r3, [pc, #236]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c92:	f023 0220 	bic.w	r2, r3, #32
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	4938      	ldr	r1, [pc, #224]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cac:	4b33      	ldr	r3, [pc, #204]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	4930      	ldr	r1, [pc, #192]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cca:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	4929      	ldr	r1, [pc, #164]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ce8:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	4921      	ldr	r1, [pc, #132]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d008      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d06:	4b1d      	ldr	r3, [pc, #116]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	491a      	ldr	r1, [pc, #104]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006d24:	4b15      	ldr	r3, [pc, #84]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	4912      	ldr	r1, [pc, #72]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006d42:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	490b      	ldr	r1, [pc, #44]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6c:	4903      	ldr	r1, [pc, #12]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3748      	adds	r7, #72	; 0x48
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40021000 	.word	0x40021000

08006d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e09d      	b.n	8006ece <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d108      	bne.n	8006dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006da2:	d009      	beq.n	8006db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	61da      	str	r2, [r3, #28]
 8006daa:	e005      	b.n	8006db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fb fb4c 	bl	8002470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006df8:	d902      	bls.n	8006e00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e002      	b.n	8006e06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e0e:	d007      	beq.n	8006e20 <HAL_SPI_Init+0xa0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e18:	d002      	beq.n	8006e20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	ea42 0103 	orr.w	r1, r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	0c1b      	lsrs	r3, r3, #16
 8006e7c:	f003 0204 	and.w	r2, r3, #4
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08a      	sub	sp, #40	; 0x28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x26>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e1fb      	b.n	80072f4 <HAL_SPI_TransmitReceive+0x41e>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f04:	f7fb ff48 	bl	8002d98 <HAL_GetTick>
 8006f08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f18:	887b      	ldrh	r3, [r7, #2]
 8006f1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f1c:	887b      	ldrh	r3, [r7, #2]
 8006f1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f20:	7efb      	ldrb	r3, [r7, #27]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d00e      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0x6e>
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f2c:	d106      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x66>
 8006f36:	7efb      	ldrb	r3, [r7, #27]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d003      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f42:	e1cd      	b.n	80072e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x80>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x80>
 8006f50:	887b      	ldrh	r3, [r7, #2]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f5c:	e1c0      	b.n	80072e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d003      	beq.n	8006f72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2205      	movs	r2, #5
 8006f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	887a      	ldrh	r2, [r7, #2]
 8006f82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	887a      	ldrh	r2, [r7, #2]
 8006f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	887a      	ldrh	r2, [r7, #2]
 8006f98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	887a      	ldrh	r2, [r7, #2]
 8006f9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb4:	d802      	bhi.n	8006fbc <HAL_SPI_TransmitReceive+0xe6>
 8006fb6:	8a3b      	ldrh	r3, [r7, #16]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d908      	bls.n	8006fce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fca:	605a      	str	r2, [r3, #4]
 8006fcc:	e007      	b.n	8006fde <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fdc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d007      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007004:	d97c      	bls.n	8007100 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_SPI_TransmitReceive+0x13e>
 800700e:	8a7b      	ldrh	r3, [r7, #18]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d169      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007038:	e056      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b02      	cmp	r3, #2
 8007046:	d11b      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x1aa>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d016      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x1aa>
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	2b01      	cmp	r3, #1
 8007056:	d113      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b01      	cmp	r3, #1
 800708c:	d11c      	bne.n	80070c8 <HAL_SPI_TransmitReceive+0x1f2>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d016      	beq.n	80070c8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a4:	b292      	uxth	r2, r2
 80070a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070c4:	2301      	movs	r3, #1
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070c8:	f7fb fe66 	bl	8002d98 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d807      	bhi.n	80070e8 <HAL_SPI_TransmitReceive+0x212>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d003      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80070e6:	e0fb      	b.n	80072e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1a3      	bne.n	800703a <HAL_SPI_TransmitReceive+0x164>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d19d      	bne.n	800703a <HAL_SPI_TransmitReceive+0x164>
 80070fe:	e0df      	b.n	80072c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_SPI_TransmitReceive+0x23a>
 8007108:	8a7b      	ldrh	r3, [r7, #18]
 800710a:	2b01      	cmp	r3, #1
 800710c:	f040 80cb 	bne.w	80072a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b01      	cmp	r3, #1
 8007118:	d912      	bls.n	8007140 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	881a      	ldrh	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	1c9a      	adds	r2, r3, #2
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b02      	subs	r3, #2
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800713e:	e0b2      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	330c      	adds	r3, #12
 800714a:	7812      	ldrb	r2, [r2, #0]
 800714c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007166:	e09e      	b.n	80072a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b02      	cmp	r3, #2
 8007174:	d134      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x30a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02f      	beq.n	80071e0 <HAL_SPI_TransmitReceive+0x30a>
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	2b01      	cmp	r3, #1
 8007184:	d12c      	bne.n	80071e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d912      	bls.n	80071b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	881a      	ldrh	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b02      	subs	r3, #2
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071b4:	e012      	b.n	80071dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	7812      	ldrb	r2, [r2, #0]
 80071c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d148      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x3aa>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d042      	beq.n	8007280 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b01      	cmp	r3, #1
 8007204:	d923      	bls.n	800724e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	b292      	uxth	r2, r2
 8007212:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	1c9a      	adds	r2, r3, #2
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b02      	subs	r3, #2
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	d81f      	bhi.n	800727c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800724a:	605a      	str	r2, [r3, #4]
 800724c:	e016      	b.n	800727c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f103 020c 	add.w	r2, r3, #12
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800727c:	2301      	movs	r3, #1
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007280:	f7fb fd8a 	bl	8002d98 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800728c:	429a      	cmp	r2, r3
 800728e:	d803      	bhi.n	8007298 <HAL_SPI_TransmitReceive+0x3c2>
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007296:	d102      	bne.n	800729e <HAL_SPI_TransmitReceive+0x3c8>
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80072a4:	e01c      	b.n	80072e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f47f af5b 	bne.w	8007168 <HAL_SPI_TransmitReceive+0x292>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f47f af54 	bne.w	8007168 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f937 	bl	8007538 <SPI_EndRxTxTransaction>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d006      	beq.n	80072de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	661a      	str	r2, [r3, #96]	; 0x60
 80072dc:	e000      	b.n	80072e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80072de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80072f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3728      	adds	r7, #40	; 0x28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	603b      	str	r3, [r7, #0]
 8007308:	4613      	mov	r3, r2
 800730a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800730c:	f7fb fd44 	bl	8002d98 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	4413      	add	r3, r2
 800731a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800731c:	f7fb fd3c 	bl	8002d98 <HAL_GetTick>
 8007320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007322:	4b39      	ldr	r3, [pc, #228]	; (8007408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	015b      	lsls	r3, r3, #5
 8007328:	0d1b      	lsrs	r3, r3, #20
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	fb02 f303 	mul.w	r3, r2, r3
 8007330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007332:	e054      	b.n	80073de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d050      	beq.n	80073de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800733c:	f7fb fd2c 	bl	8002d98 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	429a      	cmp	r2, r3
 800734a:	d902      	bls.n	8007352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d13d      	bne.n	80073ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800736a:	d111      	bne.n	8007390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007374:	d004      	beq.n	8007380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737e:	d107      	bne.n	8007390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007398:	d10f      	bne.n	80073ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e017      	b.n	80073fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	3b01      	subs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4013      	ands	r3, r2
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	bf0c      	ite	eq
 80073ee:	2301      	moveq	r3, #1
 80073f0:	2300      	movne	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d19b      	bne.n	8007334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000000 	.word	0x20000000

0800740c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800741e:	f7fb fcbb 	bl	8002d98 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	1a9b      	subs	r3, r3, r2
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4413      	add	r3, r2
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800742e:	f7fb fcb3 	bl	8002d98 <HAL_GetTick>
 8007432:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800743c:	4b3d      	ldr	r3, [pc, #244]	; (8007534 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	00da      	lsls	r2, r3, #3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	0d1b      	lsrs	r3, r3, #20
 800744c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007454:	e060      	b.n	8007518 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800745c:	d107      	bne.n	800746e <SPI_WaitFifoStateUntilTimeout+0x62>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800746c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d050      	beq.n	8007518 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007476:	f7fb fc8f 	bl	8002d98 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007482:	429a      	cmp	r2, r3
 8007484:	d902      	bls.n	800748c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d13d      	bne.n	8007508 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800749a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a4:	d111      	bne.n	80074ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ae:	d004      	beq.n	80074ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d107      	bne.n	80074ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d2:	d10f      	bne.n	80074f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e010      	b.n	800752a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	3b01      	subs	r3, #1
 8007516:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4013      	ands	r3, r2
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d196      	bne.n	8007456 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3728      	adds	r7, #40	; 0x28
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000000 	.word	0x20000000

08007538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af02      	add	r7, sp, #8
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2200      	movs	r2, #0
 800754c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff ff5b 	bl	800740c <SPI_WaitFifoStateUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007560:	f043 0220 	orr.w	r2, r3, #32
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e027      	b.n	80075bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	2180      	movs	r1, #128	; 0x80
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff fec0 	bl	80072fc <SPI_WaitFlagStateUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007586:	f043 0220 	orr.w	r2, r3, #32
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e014      	b.n	80075bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff ff34 	bl	800740c <SPI_WaitFifoStateUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ae:	f043 0220 	orr.w	r2, r3, #32
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e000      	b.n	80075bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e049      	b.n	800766a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fb f9e4 	bl	80029b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f000 fa4a 	bl	8007a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
	...

08007674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d109      	bne.n	8007698 <HAL_TIM_PWM_Start+0x24>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	bf14      	ite	ne
 8007690:	2301      	movne	r3, #1
 8007692:	2300      	moveq	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e03c      	b.n	8007712 <HAL_TIM_PWM_Start+0x9e>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b04      	cmp	r3, #4
 800769c:	d109      	bne.n	80076b2 <HAL_TIM_PWM_Start+0x3e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	bf14      	ite	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	2300      	moveq	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	e02f      	b.n	8007712 <HAL_TIM_PWM_Start+0x9e>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d109      	bne.n	80076cc <HAL_TIM_PWM_Start+0x58>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	bf14      	ite	ne
 80076c4:	2301      	movne	r3, #1
 80076c6:	2300      	moveq	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	e022      	b.n	8007712 <HAL_TIM_PWM_Start+0x9e>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b0c      	cmp	r3, #12
 80076d0:	d109      	bne.n	80076e6 <HAL_TIM_PWM_Start+0x72>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b01      	cmp	r3, #1
 80076dc:	bf14      	ite	ne
 80076de:	2301      	movne	r3, #1
 80076e0:	2300      	moveq	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	e015      	b.n	8007712 <HAL_TIM_PWM_Start+0x9e>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d109      	bne.n	8007700 <HAL_TIM_PWM_Start+0x8c>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	bf14      	ite	ne
 80076f8:	2301      	movne	r3, #1
 80076fa:	2300      	moveq	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	e008      	b.n	8007712 <HAL_TIM_PWM_Start+0x9e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	bf14      	ite	ne
 800770c:	2301      	movne	r3, #1
 800770e:	2300      	moveq	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e097      	b.n	800784a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xb6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007728:	e023      	b.n	8007772 <HAL_TIM_PWM_Start+0xfe>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b04      	cmp	r3, #4
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start+0xc6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007738:	e01b      	b.n	8007772 <HAL_TIM_PWM_Start+0xfe>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b08      	cmp	r3, #8
 800773e:	d104      	bne.n	800774a <HAL_TIM_PWM_Start+0xd6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007748:	e013      	b.n	8007772 <HAL_TIM_PWM_Start+0xfe>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b0c      	cmp	r3, #12
 800774e:	d104      	bne.n	800775a <HAL_TIM_PWM_Start+0xe6>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007758:	e00b      	b.n	8007772 <HAL_TIM_PWM_Start+0xfe>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b10      	cmp	r3, #16
 800775e:	d104      	bne.n	800776a <HAL_TIM_PWM_Start+0xf6>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007768:	e003      	b.n	8007772 <HAL_TIM_PWM_Start+0xfe>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2201      	movs	r2, #1
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fcf4 	bl	8008168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a33      	ldr	r2, [pc, #204]	; (8007854 <HAL_TIM_PWM_Start+0x1e0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d013      	beq.n	80077b2 <HAL_TIM_PWM_Start+0x13e>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a32      	ldr	r2, [pc, #200]	; (8007858 <HAL_TIM_PWM_Start+0x1e4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00e      	beq.n	80077b2 <HAL_TIM_PWM_Start+0x13e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a30      	ldr	r2, [pc, #192]	; (800785c <HAL_TIM_PWM_Start+0x1e8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d009      	beq.n	80077b2 <HAL_TIM_PWM_Start+0x13e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <HAL_TIM_PWM_Start+0x1ec>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d004      	beq.n	80077b2 <HAL_TIM_PWM_Start+0x13e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a2d      	ldr	r2, [pc, #180]	; (8007864 <HAL_TIM_PWM_Start+0x1f0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_PWM_Start+0x142>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <HAL_TIM_PWM_Start+0x144>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a20      	ldr	r2, [pc, #128]	; (8007854 <HAL_TIM_PWM_Start+0x1e0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d018      	beq.n	8007808 <HAL_TIM_PWM_Start+0x194>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077de:	d013      	beq.n	8007808 <HAL_TIM_PWM_Start+0x194>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a20      	ldr	r2, [pc, #128]	; (8007868 <HAL_TIM_PWM_Start+0x1f4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00e      	beq.n	8007808 <HAL_TIM_PWM_Start+0x194>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1f      	ldr	r2, [pc, #124]	; (800786c <HAL_TIM_PWM_Start+0x1f8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d009      	beq.n	8007808 <HAL_TIM_PWM_Start+0x194>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a17      	ldr	r2, [pc, #92]	; (8007858 <HAL_TIM_PWM_Start+0x1e4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_TIM_PWM_Start+0x194>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a16      	ldr	r2, [pc, #88]	; (800785c <HAL_TIM_PWM_Start+0x1e8>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d115      	bne.n	8007834 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	4b18      	ldr	r3, [pc, #96]	; (8007870 <HAL_TIM_PWM_Start+0x1fc>)
 8007810:	4013      	ands	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b06      	cmp	r3, #6
 8007818:	d015      	beq.n	8007846 <HAL_TIM_PWM_Start+0x1d2>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007820:	d011      	beq.n	8007846 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007832:	e008      	b.n	8007846 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e000      	b.n	8007848 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40013400 	.word	0x40013400
 800785c:	40014000 	.word	0x40014000
 8007860:	40014400 	.word	0x40014400
 8007864:	40014800 	.word	0x40014800
 8007868:	40000400 	.word	0x40000400
 800786c:	40000800 	.word	0x40000800
 8007870:	00010007 	.word	0x00010007

08007874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800788e:	2302      	movs	r3, #2
 8007890:	e0ff      	b.n	8007a92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b14      	cmp	r3, #20
 800789e:	f200 80f0 	bhi.w	8007a82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007a83 	.word	0x08007a83
 80078b0:	08007a83 	.word	0x08007a83
 80078b4:	08007a83 	.word	0x08007a83
 80078b8:	0800793d 	.word	0x0800793d
 80078bc:	08007a83 	.word	0x08007a83
 80078c0:	08007a83 	.word	0x08007a83
 80078c4:	08007a83 	.word	0x08007a83
 80078c8:	0800797f 	.word	0x0800797f
 80078cc:	08007a83 	.word	0x08007a83
 80078d0:	08007a83 	.word	0x08007a83
 80078d4:	08007a83 	.word	0x08007a83
 80078d8:	080079bf 	.word	0x080079bf
 80078dc:	08007a83 	.word	0x08007a83
 80078e0:	08007a83 	.word	0x08007a83
 80078e4:	08007a83 	.word	0x08007a83
 80078e8:	08007a01 	.word	0x08007a01
 80078ec:	08007a83 	.word	0x08007a83
 80078f0:	08007a83 	.word	0x08007a83
 80078f4:	08007a83 	.word	0x08007a83
 80078f8:	08007a41 	.word	0x08007a41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f95a 	bl	8007bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0208 	orr.w	r2, r2, #8
 8007916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0204 	bic.w	r2, r2, #4
 8007926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6999      	ldr	r1, [r3, #24]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	619a      	str	r2, [r3, #24]
      break;
 800793a:	e0a5      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f9ca 	bl	8007cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	699a      	ldr	r2, [r3, #24]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6999      	ldr	r1, [r3, #24]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	021a      	lsls	r2, r3, #8
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	619a      	str	r2, [r3, #24]
      break;
 800797c:	e084      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fa33 	bl	8007df0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0208 	orr.w	r2, r2, #8
 8007998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69da      	ldr	r2, [r3, #28]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0204 	bic.w	r2, r2, #4
 80079a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69d9      	ldr	r1, [r3, #28]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	61da      	str	r2, [r3, #28]
      break;
 80079bc:	e064      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fa9b 	bl	8007f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	69da      	ldr	r2, [r3, #28]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69d9      	ldr	r1, [r3, #28]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	021a      	lsls	r2, r3, #8
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	61da      	str	r2, [r3, #28]
      break;
 80079fe:	e043      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fae4 	bl	8007fd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0208 	orr.w	r2, r2, #8
 8007a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0204 	bic.w	r2, r2, #4
 8007a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a3e:	e023      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fb28 	bl	800809c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	021a      	lsls	r2, r3, #8
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a80:	e002      	b.n	8007a88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
      break;
 8007a86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a3c      	ldr	r2, [pc, #240]	; (8007ba0 <TIM_Base_SetConfig+0x104>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d00f      	beq.n	8007ad4 <TIM_Base_SetConfig+0x38>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d00b      	beq.n	8007ad4 <TIM_Base_SetConfig+0x38>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a39      	ldr	r2, [pc, #228]	; (8007ba4 <TIM_Base_SetConfig+0x108>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d007      	beq.n	8007ad4 <TIM_Base_SetConfig+0x38>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a38      	ldr	r2, [pc, #224]	; (8007ba8 <TIM_Base_SetConfig+0x10c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_Base_SetConfig+0x38>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a37      	ldr	r2, [pc, #220]	; (8007bac <TIM_Base_SetConfig+0x110>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d108      	bne.n	8007ae6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <TIM_Base_SetConfig+0x104>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01b      	beq.n	8007b26 <TIM_Base_SetConfig+0x8a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af4:	d017      	beq.n	8007b26 <TIM_Base_SetConfig+0x8a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a2a      	ldr	r2, [pc, #168]	; (8007ba4 <TIM_Base_SetConfig+0x108>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d013      	beq.n	8007b26 <TIM_Base_SetConfig+0x8a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a29      	ldr	r2, [pc, #164]	; (8007ba8 <TIM_Base_SetConfig+0x10c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00f      	beq.n	8007b26 <TIM_Base_SetConfig+0x8a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a28      	ldr	r2, [pc, #160]	; (8007bac <TIM_Base_SetConfig+0x110>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00b      	beq.n	8007b26 <TIM_Base_SetConfig+0x8a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a27      	ldr	r2, [pc, #156]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d007      	beq.n	8007b26 <TIM_Base_SetConfig+0x8a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a26      	ldr	r2, [pc, #152]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d003      	beq.n	8007b26 <TIM_Base_SetConfig+0x8a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a25      	ldr	r2, [pc, #148]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d108      	bne.n	8007b38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a10      	ldr	r2, [pc, #64]	; (8007ba0 <TIM_Base_SetConfig+0x104>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00f      	beq.n	8007b84 <TIM_Base_SetConfig+0xe8>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a11      	ldr	r2, [pc, #68]	; (8007bac <TIM_Base_SetConfig+0x110>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00b      	beq.n	8007b84 <TIM_Base_SetConfig+0xe8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a10      	ldr	r2, [pc, #64]	; (8007bb0 <TIM_Base_SetConfig+0x114>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d007      	beq.n	8007b84 <TIM_Base_SetConfig+0xe8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a0f      	ldr	r2, [pc, #60]	; (8007bb4 <TIM_Base_SetConfig+0x118>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_Base_SetConfig+0xe8>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a0e      	ldr	r2, [pc, #56]	; (8007bb8 <TIM_Base_SetConfig+0x11c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d103      	bne.n	8007b8c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	615a      	str	r2, [r3, #20]
}
 8007b92:	bf00      	nop
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40013400 	.word	0x40013400
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800

08007bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f023 0201 	bic.w	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f023 0302 	bic.w	r3, r3, #2
 8007c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a2c      	ldr	r2, [pc, #176]	; (8007cc8 <TIM_OC1_SetConfig+0x10c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00f      	beq.n	8007c3c <TIM_OC1_SetConfig+0x80>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a2b      	ldr	r2, [pc, #172]	; (8007ccc <TIM_OC1_SetConfig+0x110>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <TIM_OC1_SetConfig+0x80>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a2a      	ldr	r2, [pc, #168]	; (8007cd0 <TIM_OC1_SetConfig+0x114>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d007      	beq.n	8007c3c <TIM_OC1_SetConfig+0x80>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <TIM_OC1_SetConfig+0x118>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_OC1_SetConfig+0x80>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a28      	ldr	r2, [pc, #160]	; (8007cd8 <TIM_OC1_SetConfig+0x11c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d10c      	bne.n	8007c56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f023 0308 	bic.w	r3, r3, #8
 8007c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f023 0304 	bic.w	r3, r3, #4
 8007c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <TIM_OC1_SetConfig+0x10c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00f      	beq.n	8007c7e <TIM_OC1_SetConfig+0xc2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1a      	ldr	r2, [pc, #104]	; (8007ccc <TIM_OC1_SetConfig+0x110>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00b      	beq.n	8007c7e <TIM_OC1_SetConfig+0xc2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a19      	ldr	r2, [pc, #100]	; (8007cd0 <TIM_OC1_SetConfig+0x114>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d007      	beq.n	8007c7e <TIM_OC1_SetConfig+0xc2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <TIM_OC1_SetConfig+0x118>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d003      	beq.n	8007c7e <TIM_OC1_SetConfig+0xc2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <TIM_OC1_SetConfig+0x11c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d111      	bne.n	8007ca2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	621a      	str	r2, [r3, #32]
}
 8007cbc:	bf00      	nop
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	40012c00 	.word	0x40012c00
 8007ccc:	40013400 	.word	0x40013400
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40014400 	.word	0x40014400
 8007cd8:	40014800 	.word	0x40014800

08007cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	f023 0210 	bic.w	r2, r3, #16
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f023 0320 	bic.w	r3, r3, #32
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a28      	ldr	r2, [pc, #160]	; (8007ddc <TIM_OC2_SetConfig+0x100>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_OC2_SetConfig+0x6c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a27      	ldr	r2, [pc, #156]	; (8007de0 <TIM_OC2_SetConfig+0x104>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d10d      	bne.n	8007d64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <TIM_OC2_SetConfig+0x100>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00f      	beq.n	8007d8c <TIM_OC2_SetConfig+0xb0>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a1c      	ldr	r2, [pc, #112]	; (8007de0 <TIM_OC2_SetConfig+0x104>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00b      	beq.n	8007d8c <TIM_OC2_SetConfig+0xb0>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1b      	ldr	r2, [pc, #108]	; (8007de4 <TIM_OC2_SetConfig+0x108>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d007      	beq.n	8007d8c <TIM_OC2_SetConfig+0xb0>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <TIM_OC2_SetConfig+0x10c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d003      	beq.n	8007d8c <TIM_OC2_SetConfig+0xb0>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a19      	ldr	r2, [pc, #100]	; (8007dec <TIM_OC2_SetConfig+0x110>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d113      	bne.n	8007db4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d92:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d9a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	621a      	str	r2, [r3, #32]
}
 8007dce:	bf00      	nop
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40012c00 	.word	0x40012c00
 8007de0:	40013400 	.word	0x40013400
 8007de4:	40014000 	.word	0x40014000
 8007de8:	40014400 	.word	0x40014400
 8007dec:	40014800 	.word	0x40014800

08007df0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a27      	ldr	r2, [pc, #156]	; (8007eec <TIM_OC3_SetConfig+0xfc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d003      	beq.n	8007e5a <TIM_OC3_SetConfig+0x6a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a26      	ldr	r2, [pc, #152]	; (8007ef0 <TIM_OC3_SetConfig+0x100>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d10d      	bne.n	8007e76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e74:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a1c      	ldr	r2, [pc, #112]	; (8007eec <TIM_OC3_SetConfig+0xfc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00f      	beq.n	8007e9e <TIM_OC3_SetConfig+0xae>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <TIM_OC3_SetConfig+0x100>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00b      	beq.n	8007e9e <TIM_OC3_SetConfig+0xae>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a1a      	ldr	r2, [pc, #104]	; (8007ef4 <TIM_OC3_SetConfig+0x104>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d007      	beq.n	8007e9e <TIM_OC3_SetConfig+0xae>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <TIM_OC3_SetConfig+0x108>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d003      	beq.n	8007e9e <TIM_OC3_SetConfig+0xae>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a18      	ldr	r2, [pc, #96]	; (8007efc <TIM_OC3_SetConfig+0x10c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d113      	bne.n	8007ec6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	621a      	str	r2, [r3, #32]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	40012c00 	.word	0x40012c00
 8007ef0:	40013400 	.word	0x40013400
 8007ef4:	40014000 	.word	0x40014000
 8007ef8:	40014400 	.word	0x40014400
 8007efc:	40014800 	.word	0x40014800

08007f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	021b      	lsls	r3, r3, #8
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	031b      	lsls	r3, r3, #12
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a18      	ldr	r2, [pc, #96]	; (8007fc0 <TIM_OC4_SetConfig+0xc0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00f      	beq.n	8007f84 <TIM_OC4_SetConfig+0x84>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a17      	ldr	r2, [pc, #92]	; (8007fc4 <TIM_OC4_SetConfig+0xc4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00b      	beq.n	8007f84 <TIM_OC4_SetConfig+0x84>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a16      	ldr	r2, [pc, #88]	; (8007fc8 <TIM_OC4_SetConfig+0xc8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <TIM_OC4_SetConfig+0x84>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <TIM_OC4_SetConfig+0xcc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_OC4_SetConfig+0x84>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a14      	ldr	r2, [pc, #80]	; (8007fd0 <TIM_OC4_SetConfig+0xd0>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d109      	bne.n	8007f98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	019b      	lsls	r3, r3, #6
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	621a      	str	r2, [r3, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	40013400 	.word	0x40013400
 8007fc8:	40014000 	.word	0x40014000
 8007fcc:	40014400 	.word	0x40014400
 8007fd0:	40014800 	.word	0x40014800

08007fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	041b      	lsls	r3, r3, #16
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a17      	ldr	r2, [pc, #92]	; (8008088 <TIM_OC5_SetConfig+0xb4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00f      	beq.n	800804e <TIM_OC5_SetConfig+0x7a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a16      	ldr	r2, [pc, #88]	; (800808c <TIM_OC5_SetConfig+0xb8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00b      	beq.n	800804e <TIM_OC5_SetConfig+0x7a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a15      	ldr	r2, [pc, #84]	; (8008090 <TIM_OC5_SetConfig+0xbc>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d007      	beq.n	800804e <TIM_OC5_SetConfig+0x7a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a14      	ldr	r2, [pc, #80]	; (8008094 <TIM_OC5_SetConfig+0xc0>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d003      	beq.n	800804e <TIM_OC5_SetConfig+0x7a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a13      	ldr	r2, [pc, #76]	; (8008098 <TIM_OC5_SetConfig+0xc4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d109      	bne.n	8008062 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	621a      	str	r2, [r3, #32]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	40012c00 	.word	0x40012c00
 800808c:	40013400 	.word	0x40013400
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800

0800809c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	021b      	lsls	r3, r3, #8
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	051b      	lsls	r3, r3, #20
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a18      	ldr	r2, [pc, #96]	; (8008154 <TIM_OC6_SetConfig+0xb8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00f      	beq.n	8008118 <TIM_OC6_SetConfig+0x7c>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a17      	ldr	r2, [pc, #92]	; (8008158 <TIM_OC6_SetConfig+0xbc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00b      	beq.n	8008118 <TIM_OC6_SetConfig+0x7c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a16      	ldr	r2, [pc, #88]	; (800815c <TIM_OC6_SetConfig+0xc0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d007      	beq.n	8008118 <TIM_OC6_SetConfig+0x7c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a15      	ldr	r2, [pc, #84]	; (8008160 <TIM_OC6_SetConfig+0xc4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d003      	beq.n	8008118 <TIM_OC6_SetConfig+0x7c>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a14      	ldr	r2, [pc, #80]	; (8008164 <TIM_OC6_SetConfig+0xc8>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d109      	bne.n	800812c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800811e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	029b      	lsls	r3, r3, #10
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40012c00 	.word	0x40012c00
 8008158:	40013400 	.word	0x40013400
 800815c:	40014000 	.word	0x40014000
 8008160:	40014400 	.word	0x40014400
 8008164:	40014800 	.word	0x40014800

08008168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	2201      	movs	r2, #1
 800817c:	fa02 f303 	lsl.w	r3, r2, r3
 8008180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a1a      	ldr	r2, [r3, #32]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	43db      	mvns	r3, r3
 800818a:	401a      	ands	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1a      	ldr	r2, [r3, #32]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f003 031f 	and.w	r3, r3, #31
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	fa01 f303 	lsl.w	r3, r1, r3
 80081a0:	431a      	orrs	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
	...

080081b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e063      	b.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a2b      	ldr	r2, [pc, #172]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d004      	beq.n	8008200 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a2a      	ldr	r2, [pc, #168]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d108      	bne.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008206:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008218:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d018      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823e:	d013      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a18      	ldr	r2, [pc, #96]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00e      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a17      	ldr	r2, [pc, #92]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d009      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a12      	ldr	r2, [pc, #72]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d004      	beq.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a13      	ldr	r2, [pc, #76]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d10c      	bne.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800826e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4313      	orrs	r3, r2
 8008278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40013400 	.word	0x40013400
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40014000 	.word	0x40014000

080082b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e040      	b.n	8008348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fa fc64 	bl	8002ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2224      	movs	r2, #36	; 0x24
 80082e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0201 	bic.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fbba 	bl	8008a6c <UART_SetConfig>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e022      	b.n	8008348 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fd84 	bl	8008e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800831e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800832e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fe0b 	bl	8008f5c <UART_CheckIdleState>
 8008346:	4603      	mov	r3, r0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008362:	2b20      	cmp	r3, #32
 8008364:	d178      	bne.n	8008458 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <HAL_UART_Transmit_DMA+0x22>
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e071      	b.n	800845a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_UART_Transmit_DMA+0x34>
 8008380:	2302      	movs	r3, #2
 8008382:	e06a      	b.n	800845a <HAL_UART_Transmit_DMA+0x10a>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	88fa      	ldrh	r2, [r7, #6]
 8008396:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2221      	movs	r2, #33	; 0x21
 80083ae:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d02b      	beq.n	8008410 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083bc:	4a29      	ldr	r2, [pc, #164]	; (8008464 <HAL_UART_Transmit_DMA+0x114>)
 80083be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c4:	4a28      	ldr	r2, [pc, #160]	; (8008468 <HAL_UART_Transmit_DMA+0x118>)
 80083c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083cc:	4a27      	ldr	r2, [pc, #156]	; (800846c <HAL_UART_Transmit_DMA+0x11c>)
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d4:	2200      	movs	r2, #0
 80083d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e0:	4619      	mov	r1, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3328      	adds	r3, #40	; 0x28
 80083e8:	461a      	mov	r2, r3
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	f7fc fd16 	bl	8004e1c <HAL_DMA_Start_IT>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00c      	beq.n	8008410 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2210      	movs	r2, #16
 80083fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2220      	movs	r2, #32
 800840a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e024      	b.n	800845a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2240      	movs	r2, #64	; 0x40
 8008416:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3308      	adds	r3, #8
 8008426:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	613b      	str	r3, [r7, #16]
   return(result);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008440:	623a      	str	r2, [r7, #32]
 8008442:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	69f9      	ldr	r1, [r7, #28]
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	61bb      	str	r3, [r7, #24]
   return(result);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e5      	bne.n	8008420 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	e000      	b.n	800845a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008458:	2302      	movs	r3, #2
  }
}
 800845a:	4618      	mov	r0, r3
 800845c:	3728      	adds	r7, #40	; 0x28
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	08009289 	.word	0x08009289
 8008468:	0800931d 	.word	0x0800931d
 800846c:	08009339 	.word	0x08009339

08008470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b0ba      	sub	sp, #232	; 0xe8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800849a:	f640 030f 	movw	r3, #2063	; 0x80f
 800849e:	4013      	ands	r3, r2
 80084a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80084a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d115      	bne.n	80084d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80084ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00f      	beq.n	80084d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d009      	beq.n	80084d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 82a3 	beq.w	8008a14 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	4798      	blx	r3
      }
      return;
 80084d6:	e29d      	b.n	8008a14 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8117 	beq.w	8008710 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084f2:	4b85      	ldr	r3, [pc, #532]	; (8008708 <HAL_UART_IRQHandler+0x298>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 810a 	beq.w	8008710 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d011      	beq.n	800852c <HAL_UART_IRQHandler+0xbc>
 8008508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800850c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2201      	movs	r2, #1
 800851a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008522:	f043 0201 	orr.w	r2, r3, #1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d011      	beq.n	800855c <HAL_UART_IRQHandler+0xec>
 8008538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2202      	movs	r2, #2
 800854a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008552:	f043 0204 	orr.w	r2, r3, #4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d011      	beq.n	800858c <HAL_UART_IRQHandler+0x11c>
 8008568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2204      	movs	r2, #4
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008582:	f043 0202 	orr.w	r2, r3, #2
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008590:	f003 0308 	and.w	r3, r3, #8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d017      	beq.n	80085c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d105      	bne.n	80085b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80085a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2208      	movs	r2, #8
 80085b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085be:	f043 0208 	orr.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d012      	beq.n	80085fa <HAL_UART_IRQHandler+0x18a>
 80085d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00c      	beq.n	80085fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085f0:	f043 0220 	orr.w	r2, r3, #32
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8209 	beq.w	8008a18 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00d      	beq.n	800862e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b40      	cmp	r3, #64	; 0x40
 8008644:	d005      	beq.n	8008652 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800864a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800864e:	2b00      	cmp	r3, #0
 8008650:	d04f      	beq.n	80086f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fdb5 	bl	80091c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	2b40      	cmp	r3, #64	; 0x40
 8008664:	d141      	bne.n	80086ea <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3308      	adds	r3, #8
 800866c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800867c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3308      	adds	r3, #8
 800868e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800869e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1d9      	bne.n	8008666 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d013      	beq.n	80086e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086be:	4a13      	ldr	r2, [pc, #76]	; (800870c <HAL_UART_IRQHandler+0x29c>)
 80086c0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fc fc40 	bl	8004f4c <HAL_DMA_Abort_IT>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d017      	beq.n	8008702 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e0:	e00f      	b.n	8008702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9ac 	bl	8008a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	e00b      	b.n	8008702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9a8 	bl	8008a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f0:	e007      	b.n	8008702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9a4 	bl	8008a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008700:	e18a      	b.n	8008a18 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008702:	bf00      	nop
    return;
 8008704:	e188      	b.n	8008a18 <HAL_UART_IRQHandler+0x5a8>
 8008706:	bf00      	nop
 8008708:	04000120 	.word	0x04000120
 800870c:	080093b5 	.word	0x080093b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008714:	2b01      	cmp	r3, #1
 8008716:	f040 8143 	bne.w	80089a0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871e:	f003 0310 	and.w	r3, r3, #16
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 813c 	beq.w	80089a0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8135 	beq.w	80089a0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2210      	movs	r2, #16
 800873c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008748:	2b40      	cmp	r3, #64	; 0x40
 800874a:	f040 80b1 	bne.w	80088b0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800875a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 815c 	beq.w	8008a1c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800876a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800876e:	429a      	cmp	r2, r3
 8008770:	f080 8154 	bcs.w	8008a1c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800877a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008782:	699b      	ldr	r3, [r3, #24]
 8008784:	2b20      	cmp	r3, #32
 8008786:	f000 8085 	beq.w	8008894 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800879e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1da      	bne.n	800878a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3308      	adds	r3, #8
 80087f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008800:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800880a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e1      	bne.n	80087d4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3308      	adds	r3, #8
 8008816:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008834:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800883a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e3      	bne.n	8008810 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008864:	f023 0310 	bic.w	r3, r3, #16
 8008868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008876:	65bb      	str	r3, [r7, #88]	; 0x58
 8008878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800887c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e4      	bne.n	8008854 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888e:	4618      	mov	r0, r3
 8008890:	f7fc fb23 	bl	8004eda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f8d3 	bl	8008a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088ae:	e0b5      	b.n	8008a1c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088bc:	b29b      	uxth	r3, r3
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 80a7 	beq.w	8008a20 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80088d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 80a2 	beq.w	8008a20 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008900:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008904:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800890c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e4      	bne.n	80088dc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3308      	adds	r3, #8
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	623b      	str	r3, [r7, #32]
   return(result);
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f023 0301 	bic.w	r3, r3, #1
 8008928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008936:	633a      	str	r2, [r7, #48]	; 0x30
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800893c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e3      	bne.n	8008912 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	60fb      	str	r3, [r7, #12]
   return(result);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f023 0310 	bic.w	r3, r3, #16
 8008970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	69b9      	ldr	r1, [r7, #24]
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	617b      	str	r3, [r7, #20]
   return(result);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e4      	bne.n	800895c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008992:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f85b 	bl	8008a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800899e:	e03f      	b.n	8008a20 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <HAL_UART_IRQHandler+0x55a>
 80089ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fd36 	bl	8009434 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089c8:	e02d      	b.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00e      	beq.n	80089f4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d008      	beq.n	80089f4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01c      	beq.n	8008a24 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
    }
    return;
 80089f2:	e017      	b.n	8008a24 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d012      	beq.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
 8008a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fce7 	bl	80093e0 <UART_EndTransmit_IT>
    return;
 8008a12:	e008      	b.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008a14:	bf00      	nop
 8008a16:	e006      	b.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008a18:	bf00      	nop
 8008a1a:	e004      	b.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008a1c:	bf00      	nop
 8008a1e:	e002      	b.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008a20:	bf00      	nop
 8008a22:	e000      	b.n	8008a26 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008a24:	bf00      	nop
  }

}
 8008a26:	37e8      	adds	r7, #232	; 0xe8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008a9a:	f023 030c 	bic.w	r3, r3, #12
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	430b      	orrs	r3, r1
 8008aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4aa8      	ldr	r2, [pc, #672]	; (8008d88 <UART_SetConfig+0x31c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d120      	bne.n	8008b2e <UART_SetConfig+0xc2>
 8008aec:	4ba7      	ldr	r3, [pc, #668]	; (8008d8c <UART_SetConfig+0x320>)
 8008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af0:	f003 0303 	and.w	r3, r3, #3
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d817      	bhi.n	8008b28 <UART_SetConfig+0xbc>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <UART_SetConfig+0x94>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b1d 	.word	0x08008b1d
 8008b08:	08008b23 	.word	0x08008b23
 8008b0c:	08008b17 	.word	0x08008b17
 8008b10:	2301      	movs	r3, #1
 8008b12:	77fb      	strb	r3, [r7, #31]
 8008b14:	e0b5      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b16:	2302      	movs	r3, #2
 8008b18:	77fb      	strb	r3, [r7, #31]
 8008b1a:	e0b2      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	77fb      	strb	r3, [r7, #31]
 8008b20:	e0af      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b22:	2308      	movs	r3, #8
 8008b24:	77fb      	strb	r3, [r7, #31]
 8008b26:	e0ac      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b28:	2310      	movs	r3, #16
 8008b2a:	77fb      	strb	r3, [r7, #31]
 8008b2c:	e0a9      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a97      	ldr	r2, [pc, #604]	; (8008d90 <UART_SetConfig+0x324>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d124      	bne.n	8008b82 <UART_SetConfig+0x116>
 8008b38:	4b94      	ldr	r3, [pc, #592]	; (8008d8c <UART_SetConfig+0x320>)
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b44:	d011      	beq.n	8008b6a <UART_SetConfig+0xfe>
 8008b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b4a:	d817      	bhi.n	8008b7c <UART_SetConfig+0x110>
 8008b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b50:	d011      	beq.n	8008b76 <UART_SetConfig+0x10a>
 8008b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b56:	d811      	bhi.n	8008b7c <UART_SetConfig+0x110>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <UART_SetConfig+0xf8>
 8008b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b60:	d006      	beq.n	8008b70 <UART_SetConfig+0x104>
 8008b62:	e00b      	b.n	8008b7c <UART_SetConfig+0x110>
 8008b64:	2300      	movs	r3, #0
 8008b66:	77fb      	strb	r3, [r7, #31]
 8008b68:	e08b      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	77fb      	strb	r3, [r7, #31]
 8008b6e:	e088      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b70:	2304      	movs	r3, #4
 8008b72:	77fb      	strb	r3, [r7, #31]
 8008b74:	e085      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b76:	2308      	movs	r3, #8
 8008b78:	77fb      	strb	r3, [r7, #31]
 8008b7a:	e082      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	77fb      	strb	r3, [r7, #31]
 8008b80:	e07f      	b.n	8008c82 <UART_SetConfig+0x216>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a83      	ldr	r2, [pc, #524]	; (8008d94 <UART_SetConfig+0x328>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d124      	bne.n	8008bd6 <UART_SetConfig+0x16a>
 8008b8c:	4b7f      	ldr	r3, [pc, #508]	; (8008d8c <UART_SetConfig+0x320>)
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008b94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b98:	d011      	beq.n	8008bbe <UART_SetConfig+0x152>
 8008b9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b9e:	d817      	bhi.n	8008bd0 <UART_SetConfig+0x164>
 8008ba0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ba4:	d011      	beq.n	8008bca <UART_SetConfig+0x15e>
 8008ba6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008baa:	d811      	bhi.n	8008bd0 <UART_SetConfig+0x164>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <UART_SetConfig+0x14c>
 8008bb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bb4:	d006      	beq.n	8008bc4 <UART_SetConfig+0x158>
 8008bb6:	e00b      	b.n	8008bd0 <UART_SetConfig+0x164>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	77fb      	strb	r3, [r7, #31]
 8008bbc:	e061      	b.n	8008c82 <UART_SetConfig+0x216>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	77fb      	strb	r3, [r7, #31]
 8008bc2:	e05e      	b.n	8008c82 <UART_SetConfig+0x216>
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	77fb      	strb	r3, [r7, #31]
 8008bc8:	e05b      	b.n	8008c82 <UART_SetConfig+0x216>
 8008bca:	2308      	movs	r3, #8
 8008bcc:	77fb      	strb	r3, [r7, #31]
 8008bce:	e058      	b.n	8008c82 <UART_SetConfig+0x216>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	77fb      	strb	r3, [r7, #31]
 8008bd4:	e055      	b.n	8008c82 <UART_SetConfig+0x216>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a6f      	ldr	r2, [pc, #444]	; (8008d98 <UART_SetConfig+0x32c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d124      	bne.n	8008c2a <UART_SetConfig+0x1be>
 8008be0:	4b6a      	ldr	r3, [pc, #424]	; (8008d8c <UART_SetConfig+0x320>)
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008be8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bec:	d011      	beq.n	8008c12 <UART_SetConfig+0x1a6>
 8008bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bf2:	d817      	bhi.n	8008c24 <UART_SetConfig+0x1b8>
 8008bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf8:	d011      	beq.n	8008c1e <UART_SetConfig+0x1b2>
 8008bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bfe:	d811      	bhi.n	8008c24 <UART_SetConfig+0x1b8>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <UART_SetConfig+0x1a0>
 8008c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c08:	d006      	beq.n	8008c18 <UART_SetConfig+0x1ac>
 8008c0a:	e00b      	b.n	8008c24 <UART_SetConfig+0x1b8>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	77fb      	strb	r3, [r7, #31]
 8008c10:	e037      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c12:	2302      	movs	r3, #2
 8008c14:	77fb      	strb	r3, [r7, #31]
 8008c16:	e034      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	77fb      	strb	r3, [r7, #31]
 8008c1c:	e031      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c1e:	2308      	movs	r3, #8
 8008c20:	77fb      	strb	r3, [r7, #31]
 8008c22:	e02e      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c24:	2310      	movs	r3, #16
 8008c26:	77fb      	strb	r3, [r7, #31]
 8008c28:	e02b      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a5b      	ldr	r2, [pc, #364]	; (8008d9c <UART_SetConfig+0x330>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d124      	bne.n	8008c7e <UART_SetConfig+0x212>
 8008c34:	4b55      	ldr	r3, [pc, #340]	; (8008d8c <UART_SetConfig+0x320>)
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008c3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c40:	d011      	beq.n	8008c66 <UART_SetConfig+0x1fa>
 8008c42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c46:	d817      	bhi.n	8008c78 <UART_SetConfig+0x20c>
 8008c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c4c:	d011      	beq.n	8008c72 <UART_SetConfig+0x206>
 8008c4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c52:	d811      	bhi.n	8008c78 <UART_SetConfig+0x20c>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <UART_SetConfig+0x1f4>
 8008c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c5c:	d006      	beq.n	8008c6c <UART_SetConfig+0x200>
 8008c5e:	e00b      	b.n	8008c78 <UART_SetConfig+0x20c>
 8008c60:	2300      	movs	r3, #0
 8008c62:	77fb      	strb	r3, [r7, #31]
 8008c64:	e00d      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c66:	2302      	movs	r3, #2
 8008c68:	77fb      	strb	r3, [r7, #31]
 8008c6a:	e00a      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c6c:	2304      	movs	r3, #4
 8008c6e:	77fb      	strb	r3, [r7, #31]
 8008c70:	e007      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c72:	2308      	movs	r3, #8
 8008c74:	77fb      	strb	r3, [r7, #31]
 8008c76:	e004      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	77fb      	strb	r3, [r7, #31]
 8008c7c:	e001      	b.n	8008c82 <UART_SetConfig+0x216>
 8008c7e:	2310      	movs	r3, #16
 8008c80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c8a:	d15c      	bne.n	8008d46 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8008c8c:	7ffb      	ldrb	r3, [r7, #31]
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d827      	bhi.n	8008ce2 <UART_SetConfig+0x276>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0x22c>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	08008ce3 	.word	0x08008ce3
 8008ca8:	08008cd3 	.word	0x08008cd3
 8008cac:	08008ce3 	.word	0x08008ce3
 8008cb0:	08008ce3 	.word	0x08008ce3
 8008cb4:	08008ce3 	.word	0x08008ce3
 8008cb8:	08008cdb 	.word	0x08008cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cbc:	f7fd fe6c 	bl	8006998 <HAL_RCC_GetPCLK1Freq>
 8008cc0:	61b8      	str	r0, [r7, #24]
        break;
 8008cc2:	e013      	b.n	8008cec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cc4:	f7fd fe8a 	bl	80069dc <HAL_RCC_GetPCLK2Freq>
 8008cc8:	61b8      	str	r0, [r7, #24]
        break;
 8008cca:	e00f      	b.n	8008cec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ccc:	4b34      	ldr	r3, [pc, #208]	; (8008da0 <UART_SetConfig+0x334>)
 8008cce:	61bb      	str	r3, [r7, #24]
        break;
 8008cd0:	e00c      	b.n	8008cec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cd2:	f7fd fdeb 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 8008cd6:	61b8      	str	r0, [r7, #24]
        break;
 8008cd8:	e008      	b.n	8008cec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cde:	61bb      	str	r3, [r7, #24]
        break;
 8008ce0:	e004      	b.n	8008cec <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8008cea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 8084 	beq.w	8008dfc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	005a      	lsls	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	085b      	lsrs	r3, r3, #1
 8008cfe:	441a      	add	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	2b0f      	cmp	r3, #15
 8008d10:	d916      	bls.n	8008d40 <UART_SetConfig+0x2d4>
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d18:	d212      	bcs.n	8008d40 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f023 030f 	bic.w	r3, r3, #15
 8008d22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	085b      	lsrs	r3, r3, #1
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	89fa      	ldrh	r2, [r7, #14]
 8008d3c:	60da      	str	r2, [r3, #12]
 8008d3e:	e05d      	b.n	8008dfc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	77bb      	strb	r3, [r7, #30]
 8008d44:	e05a      	b.n	8008dfc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d46:	7ffb      	ldrb	r3, [r7, #31]
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d836      	bhi.n	8008dba <UART_SetConfig+0x34e>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x2e8>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d81 	.word	0x08008d81
 8008d5c:	08008da5 	.word	0x08008da5
 8008d60:	08008dbb 	.word	0x08008dbb
 8008d64:	08008dab 	.word	0x08008dab
 8008d68:	08008dbb 	.word	0x08008dbb
 8008d6c:	08008dbb 	.word	0x08008dbb
 8008d70:	08008dbb 	.word	0x08008dbb
 8008d74:	08008db3 	.word	0x08008db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d78:	f7fd fe0e 	bl	8006998 <HAL_RCC_GetPCLK1Freq>
 8008d7c:	61b8      	str	r0, [r7, #24]
        break;
 8008d7e:	e021      	b.n	8008dc4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d80:	f7fd fe2c 	bl	80069dc <HAL_RCC_GetPCLK2Freq>
 8008d84:	61b8      	str	r0, [r7, #24]
        break;
 8008d86:	e01d      	b.n	8008dc4 <UART_SetConfig+0x358>
 8008d88:	40013800 	.word	0x40013800
 8008d8c:	40021000 	.word	0x40021000
 8008d90:	40004400 	.word	0x40004400
 8008d94:	40004800 	.word	0x40004800
 8008d98:	40004c00 	.word	0x40004c00
 8008d9c:	40005000 	.word	0x40005000
 8008da0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008da4:	4b1b      	ldr	r3, [pc, #108]	; (8008e14 <UART_SetConfig+0x3a8>)
 8008da6:	61bb      	str	r3, [r7, #24]
        break;
 8008da8:	e00c      	b.n	8008dc4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008daa:	f7fd fd7f 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 8008dae:	61b8      	str	r0, [r7, #24]
        break;
 8008db0:	e008      	b.n	8008dc4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008db6:	61bb      	str	r3, [r7, #24]
        break;
 8008db8:	e004      	b.n	8008dc4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8008dc2:	bf00      	nop
    }

    if (pclk != 0U)
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d018      	beq.n	8008dfc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	085a      	lsrs	r2, r3, #1
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	441a      	add	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b0f      	cmp	r3, #15
 8008de4:	d908      	bls.n	8008df8 <UART_SetConfig+0x38c>
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dec:	d204      	bcs.n	8008df8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	60da      	str	r2, [r3, #12]
 8008df6:	e001      	b.n	8008dfc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008e08:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3720      	adds	r7, #32
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	007a1200 	.word	0x007a1200

08008e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	f003 0308 	and.w	r3, r3, #8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	f003 0310 	and.w	r3, r3, #16
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01a      	beq.n	8008f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f16:	d10a      	bne.n	8008f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f6c:	f7f9 ff14 	bl	8002d98 <HAL_GetTick>
 8008f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0308 	and.w	r3, r3, #8
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d10e      	bne.n	8008f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f82d 	bl	8008fee <UART_WaitOnFlagUntilTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e023      	b.n	8008fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d10e      	bne.n	8008fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f817 	bl	8008fee <UART_WaitOnFlagUntilTimeout>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e00d      	b.n	8008fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b09c      	sub	sp, #112	; 0x70
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	603b      	str	r3, [r7, #0]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ffe:	e0a5      	b.n	800914c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	f000 80a1 	beq.w	800914c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800900a:	f7f9 fec5 	bl	8002d98 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009016:	429a      	cmp	r2, r3
 8009018:	d302      	bcc.n	8009020 <UART_WaitOnFlagUntilTimeout+0x32>
 800901a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800901c:	2b00      	cmp	r3, #0
 800901e:	d13e      	bne.n	800909e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800902e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009034:	667b      	str	r3, [r7, #100]	; 0x64
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800903e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009040:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800904c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e6      	bne.n	8009020 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3308      	adds	r3, #8
 8009058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	f023 0301 	bic.w	r3, r3, #1
 8009068:	663b      	str	r3, [r7, #96]	; 0x60
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009072:	64ba      	str	r2, [r7, #72]	; 0x48
 8009074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e5      	bne.n	8009052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2220      	movs	r2, #32
 800908a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e067      	b.n	800916e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d04f      	beq.n	800914c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ba:	d147      	bne.n	800914c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
 80090e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	613b      	str	r3, [r7, #16]
   return(result);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3308      	adds	r3, #8
 8009116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009118:	623a      	str	r2, [r7, #32]
 800911a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69f9      	ldr	r1, [r7, #28]
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	61bb      	str	r3, [r7, #24]
   return(result);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e5      	bne.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2220      	movs	r2, #32
 8009130:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e010      	b.n	800916e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	69da      	ldr	r2, [r3, #28]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4013      	ands	r3, r2
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	429a      	cmp	r2, r3
 800915a:	bf0c      	ite	eq
 800915c:	2301      	moveq	r3, #1
 800915e:	2300      	movne	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	461a      	mov	r2, r3
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	429a      	cmp	r2, r3
 8009168:	f43f af4a 	beq.w	8009000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3770      	adds	r7, #112	; 0x70
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009176:	b480      	push	{r7}
 8009178:	b089      	sub	sp, #36	; 0x24
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	60bb      	str	r3, [r7, #8]
   return(result);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6979      	ldr	r1, [r7, #20]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	613b      	str	r3, [r7, #16]
   return(result);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e6      	bne.n	800917e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	679a      	str	r2, [r3, #120]	; 0x78
}
 80091b6:	bf00      	nop
 80091b8:	3724      	adds	r7, #36	; 0x24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b095      	sub	sp, #84	; 0x54
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e8:	643b      	str	r3, [r7, #64]	; 0x40
 80091ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e6      	bne.n	80091ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3308      	adds	r3, #8
 8009202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	61fb      	str	r3, [r7, #28]
   return(result);
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	f023 0301 	bic.w	r3, r3, #1
 8009212:	64bb      	str	r3, [r7, #72]	; 0x48
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800921c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e5      	bne.n	80091fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009234:	2b01      	cmp	r3, #1
 8009236:	d118      	bne.n	800926a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	60bb      	str	r3, [r7, #8]
   return(result);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f023 0310 	bic.w	r3, r3, #16
 800924c:	647b      	str	r3, [r7, #68]	; 0x44
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	6979      	ldr	r1, [r7, #20]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	613b      	str	r3, [r7, #16]
   return(result);
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e6      	bne.n	8009238 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800927c:	bf00      	nop
 800927e:	3754      	adds	r7, #84	; 0x54
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b090      	sub	sp, #64	; 0x40
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	2b20      	cmp	r3, #32
 800929c:	d037      	beq.n	800930e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800929e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3308      	adds	r3, #8
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	623b      	str	r3, [r7, #32]
   return(result);
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80092be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092c6:	633a      	str	r2, [r7, #48]	; 0x30
 80092c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e5      	bne.n	80092a6 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ee:	637b      	str	r3, [r7, #52]	; 0x34
 80092f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	461a      	mov	r2, r3
 80092f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	69b9      	ldr	r1, [r7, #24]
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	617b      	str	r3, [r7, #20]
   return(result);
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e6      	bne.n	80092da <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800930c:	e002      	b.n	8009314 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800930e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009310:	f7f8 fa58 	bl	80017c4 <HAL_UART_TxCpltCallback>
}
 8009314:	bf00      	nop
 8009316:	3740      	adds	r7, #64	; 0x40
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff fb7e 	bl	8008a2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800934a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009350:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800935c:	2b80      	cmp	r3, #128	; 0x80
 800935e:	d109      	bne.n	8009374 <UART_DMAError+0x3c>
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b21      	cmp	r3, #33	; 0x21
 8009364:	d106      	bne.n	8009374 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2200      	movs	r2, #0
 800936a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800936e:	6978      	ldr	r0, [r7, #20]
 8009370:	f7ff ff01 	bl	8009176 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937e:	2b40      	cmp	r3, #64	; 0x40
 8009380:	d109      	bne.n	8009396 <UART_DMAError+0x5e>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b22      	cmp	r3, #34	; 0x22
 8009386:	d106      	bne.n	8009396 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2200      	movs	r2, #0
 800938c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009390:	6978      	ldr	r0, [r7, #20]
 8009392:	f7ff ff16 	bl	80091c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800939c:	f043 0210 	orr.w	r2, r3, #16
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093a6:	6978      	ldr	r0, [r7, #20]
 80093a8:	f7ff fb4a 	bl	8008a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ac:	bf00      	nop
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff fb34 	bl	8008a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093fc:	61fb      	str	r3, [r7, #28]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	61bb      	str	r3, [r7, #24]
 8009408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6979      	ldr	r1, [r7, #20]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	613b      	str	r3, [r7, #16]
   return(result);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e6      	bne.n	80093e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7f8 f9cc 	bl	80017c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942c:	bf00      	nop
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <__errno>:
 8009448:	4b01      	ldr	r3, [pc, #4]	; (8009450 <__errno+0x8>)
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	2000000c 	.word	0x2000000c

08009454 <__libc_init_array>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	4d0d      	ldr	r5, [pc, #52]	; (800948c <__libc_init_array+0x38>)
 8009458:	4c0d      	ldr	r4, [pc, #52]	; (8009490 <__libc_init_array+0x3c>)
 800945a:	1b64      	subs	r4, r4, r5
 800945c:	10a4      	asrs	r4, r4, #2
 800945e:	2600      	movs	r6, #0
 8009460:	42a6      	cmp	r6, r4
 8009462:	d109      	bne.n	8009478 <__libc_init_array+0x24>
 8009464:	4d0b      	ldr	r5, [pc, #44]	; (8009494 <__libc_init_array+0x40>)
 8009466:	4c0c      	ldr	r4, [pc, #48]	; (8009498 <__libc_init_array+0x44>)
 8009468:	f003 f860 	bl	800c52c <_init>
 800946c:	1b64      	subs	r4, r4, r5
 800946e:	10a4      	asrs	r4, r4, #2
 8009470:	2600      	movs	r6, #0
 8009472:	42a6      	cmp	r6, r4
 8009474:	d105      	bne.n	8009482 <__libc_init_array+0x2e>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	f855 3b04 	ldr.w	r3, [r5], #4
 800947c:	4798      	blx	r3
 800947e:	3601      	adds	r6, #1
 8009480:	e7ee      	b.n	8009460 <__libc_init_array+0xc>
 8009482:	f855 3b04 	ldr.w	r3, [r5], #4
 8009486:	4798      	blx	r3
 8009488:	3601      	adds	r6, #1
 800948a:	e7f2      	b.n	8009472 <__libc_init_array+0x1e>
 800948c:	0800cb4c 	.word	0x0800cb4c
 8009490:	0800cb4c 	.word	0x0800cb4c
 8009494:	0800cb4c 	.word	0x0800cb4c
 8009498:	0800cb50 	.word	0x0800cb50

0800949c <memcpy>:
 800949c:	440a      	add	r2, r1
 800949e:	4291      	cmp	r1, r2
 80094a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80094a4:	d100      	bne.n	80094a8 <memcpy+0xc>
 80094a6:	4770      	bx	lr
 80094a8:	b510      	push	{r4, lr}
 80094aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094b2:	4291      	cmp	r1, r2
 80094b4:	d1f9      	bne.n	80094aa <memcpy+0xe>
 80094b6:	bd10      	pop	{r4, pc}

080094b8 <memset>:
 80094b8:	4402      	add	r2, r0
 80094ba:	4603      	mov	r3, r0
 80094bc:	4293      	cmp	r3, r2
 80094be:	d100      	bne.n	80094c2 <memset+0xa>
 80094c0:	4770      	bx	lr
 80094c2:	f803 1b01 	strb.w	r1, [r3], #1
 80094c6:	e7f9      	b.n	80094bc <memset+0x4>

080094c8 <__cvt>:
 80094c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094cc:	ec55 4b10 	vmov	r4, r5, d0
 80094d0:	2d00      	cmp	r5, #0
 80094d2:	460e      	mov	r6, r1
 80094d4:	4619      	mov	r1, r3
 80094d6:	462b      	mov	r3, r5
 80094d8:	bfbb      	ittet	lt
 80094da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094de:	461d      	movlt	r5, r3
 80094e0:	2300      	movge	r3, #0
 80094e2:	232d      	movlt	r3, #45	; 0x2d
 80094e4:	700b      	strb	r3, [r1, #0]
 80094e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094ec:	4691      	mov	r9, r2
 80094ee:	f023 0820 	bic.w	r8, r3, #32
 80094f2:	bfbc      	itt	lt
 80094f4:	4622      	movlt	r2, r4
 80094f6:	4614      	movlt	r4, r2
 80094f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094fc:	d005      	beq.n	800950a <__cvt+0x42>
 80094fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009502:	d100      	bne.n	8009506 <__cvt+0x3e>
 8009504:	3601      	adds	r6, #1
 8009506:	2102      	movs	r1, #2
 8009508:	e000      	b.n	800950c <__cvt+0x44>
 800950a:	2103      	movs	r1, #3
 800950c:	ab03      	add	r3, sp, #12
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	ab02      	add	r3, sp, #8
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	ec45 4b10 	vmov	d0, r4, r5
 8009518:	4653      	mov	r3, sl
 800951a:	4632      	mov	r2, r6
 800951c:	f000 ff08 	bl	800a330 <_dtoa_r>
 8009520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009524:	4607      	mov	r7, r0
 8009526:	d102      	bne.n	800952e <__cvt+0x66>
 8009528:	f019 0f01 	tst.w	r9, #1
 800952c:	d022      	beq.n	8009574 <__cvt+0xac>
 800952e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009532:	eb07 0906 	add.w	r9, r7, r6
 8009536:	d110      	bne.n	800955a <__cvt+0x92>
 8009538:	783b      	ldrb	r3, [r7, #0]
 800953a:	2b30      	cmp	r3, #48	; 0x30
 800953c:	d10a      	bne.n	8009554 <__cvt+0x8c>
 800953e:	2200      	movs	r2, #0
 8009540:	2300      	movs	r3, #0
 8009542:	4620      	mov	r0, r4
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800954a:	b918      	cbnz	r0, 8009554 <__cvt+0x8c>
 800954c:	f1c6 0601 	rsb	r6, r6, #1
 8009550:	f8ca 6000 	str.w	r6, [sl]
 8009554:	f8da 3000 	ldr.w	r3, [sl]
 8009558:	4499      	add	r9, r3
 800955a:	2200      	movs	r2, #0
 800955c:	2300      	movs	r3, #0
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f7f7 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009566:	b108      	cbz	r0, 800956c <__cvt+0xa4>
 8009568:	f8cd 900c 	str.w	r9, [sp, #12]
 800956c:	2230      	movs	r2, #48	; 0x30
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	454b      	cmp	r3, r9
 8009572:	d307      	bcc.n	8009584 <__cvt+0xbc>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009578:	1bdb      	subs	r3, r3, r7
 800957a:	4638      	mov	r0, r7
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	b004      	add	sp, #16
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	1c59      	adds	r1, r3, #1
 8009586:	9103      	str	r1, [sp, #12]
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	e7f0      	b.n	800956e <__cvt+0xa6>

0800958c <__exponent>:
 800958c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800958e:	4603      	mov	r3, r0
 8009590:	2900      	cmp	r1, #0
 8009592:	bfb8      	it	lt
 8009594:	4249      	neglt	r1, r1
 8009596:	f803 2b02 	strb.w	r2, [r3], #2
 800959a:	bfb4      	ite	lt
 800959c:	222d      	movlt	r2, #45	; 0x2d
 800959e:	222b      	movge	r2, #43	; 0x2b
 80095a0:	2909      	cmp	r1, #9
 80095a2:	7042      	strb	r2, [r0, #1]
 80095a4:	dd2a      	ble.n	80095fc <__exponent+0x70>
 80095a6:	f10d 0407 	add.w	r4, sp, #7
 80095aa:	46a4      	mov	ip, r4
 80095ac:	270a      	movs	r7, #10
 80095ae:	46a6      	mov	lr, r4
 80095b0:	460a      	mov	r2, r1
 80095b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80095b6:	fb07 1516 	mls	r5, r7, r6, r1
 80095ba:	3530      	adds	r5, #48	; 0x30
 80095bc:	2a63      	cmp	r2, #99	; 0x63
 80095be:	f104 34ff 	add.w	r4, r4, #4294967295
 80095c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095c6:	4631      	mov	r1, r6
 80095c8:	dcf1      	bgt.n	80095ae <__exponent+0x22>
 80095ca:	3130      	adds	r1, #48	; 0x30
 80095cc:	f1ae 0502 	sub.w	r5, lr, #2
 80095d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095d4:	1c44      	adds	r4, r0, #1
 80095d6:	4629      	mov	r1, r5
 80095d8:	4561      	cmp	r1, ip
 80095da:	d30a      	bcc.n	80095f2 <__exponent+0x66>
 80095dc:	f10d 0209 	add.w	r2, sp, #9
 80095e0:	eba2 020e 	sub.w	r2, r2, lr
 80095e4:	4565      	cmp	r5, ip
 80095e6:	bf88      	it	hi
 80095e8:	2200      	movhi	r2, #0
 80095ea:	4413      	add	r3, r2
 80095ec:	1a18      	subs	r0, r3, r0
 80095ee:	b003      	add	sp, #12
 80095f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80095fa:	e7ed      	b.n	80095d8 <__exponent+0x4c>
 80095fc:	2330      	movs	r3, #48	; 0x30
 80095fe:	3130      	adds	r1, #48	; 0x30
 8009600:	7083      	strb	r3, [r0, #2]
 8009602:	70c1      	strb	r1, [r0, #3]
 8009604:	1d03      	adds	r3, r0, #4
 8009606:	e7f1      	b.n	80095ec <__exponent+0x60>

08009608 <_printf_float>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	ed2d 8b02 	vpush	{d8}
 8009610:	b08d      	sub	sp, #52	; 0x34
 8009612:	460c      	mov	r4, r1
 8009614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009618:	4616      	mov	r6, r2
 800961a:	461f      	mov	r7, r3
 800961c:	4605      	mov	r5, r0
 800961e:	f001 fe2d 	bl	800b27c <_localeconv_r>
 8009622:	f8d0 a000 	ldr.w	sl, [r0]
 8009626:	4650      	mov	r0, sl
 8009628:	f7f6 fdd2 	bl	80001d0 <strlen>
 800962c:	2300      	movs	r3, #0
 800962e:	930a      	str	r3, [sp, #40]	; 0x28
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	9305      	str	r3, [sp, #20]
 8009634:	f8d8 3000 	ldr.w	r3, [r8]
 8009638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800963c:	3307      	adds	r3, #7
 800963e:	f023 0307 	bic.w	r3, r3, #7
 8009642:	f103 0208 	add.w	r2, r3, #8
 8009646:	f8c8 2000 	str.w	r2, [r8]
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009652:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009656:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800965a:	9307      	str	r3, [sp, #28]
 800965c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009660:	ee08 0a10 	vmov	s16, r0
 8009664:	4b9f      	ldr	r3, [pc, #636]	; (80098e4 <_printf_float+0x2dc>)
 8009666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	f7f7 fa5d 	bl	8000b2c <__aeabi_dcmpun>
 8009672:	bb88      	cbnz	r0, 80096d8 <_printf_float+0xd0>
 8009674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009678:	4b9a      	ldr	r3, [pc, #616]	; (80098e4 <_printf_float+0x2dc>)
 800967a:	f04f 32ff 	mov.w	r2, #4294967295
 800967e:	f7f7 fa37 	bl	8000af0 <__aeabi_dcmple>
 8009682:	bb48      	cbnz	r0, 80096d8 <_printf_float+0xd0>
 8009684:	2200      	movs	r2, #0
 8009686:	2300      	movs	r3, #0
 8009688:	4640      	mov	r0, r8
 800968a:	4649      	mov	r1, r9
 800968c:	f7f7 fa26 	bl	8000adc <__aeabi_dcmplt>
 8009690:	b110      	cbz	r0, 8009698 <_printf_float+0x90>
 8009692:	232d      	movs	r3, #45	; 0x2d
 8009694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009698:	4b93      	ldr	r3, [pc, #588]	; (80098e8 <_printf_float+0x2e0>)
 800969a:	4894      	ldr	r0, [pc, #592]	; (80098ec <_printf_float+0x2e4>)
 800969c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096a0:	bf94      	ite	ls
 80096a2:	4698      	movls	r8, r3
 80096a4:	4680      	movhi	r8, r0
 80096a6:	2303      	movs	r3, #3
 80096a8:	6123      	str	r3, [r4, #16]
 80096aa:	9b05      	ldr	r3, [sp, #20]
 80096ac:	f023 0204 	bic.w	r2, r3, #4
 80096b0:	6022      	str	r2, [r4, #0]
 80096b2:	f04f 0900 	mov.w	r9, #0
 80096b6:	9700      	str	r7, [sp, #0]
 80096b8:	4633      	mov	r3, r6
 80096ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80096bc:	4621      	mov	r1, r4
 80096be:	4628      	mov	r0, r5
 80096c0:	f000 f9d8 	bl	8009a74 <_printf_common>
 80096c4:	3001      	adds	r0, #1
 80096c6:	f040 8090 	bne.w	80097ea <_printf_float+0x1e2>
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	b00d      	add	sp, #52	; 0x34
 80096d0:	ecbd 8b02 	vpop	{d8}
 80096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d8:	4642      	mov	r2, r8
 80096da:	464b      	mov	r3, r9
 80096dc:	4640      	mov	r0, r8
 80096de:	4649      	mov	r1, r9
 80096e0:	f7f7 fa24 	bl	8000b2c <__aeabi_dcmpun>
 80096e4:	b140      	cbz	r0, 80096f8 <_printf_float+0xf0>
 80096e6:	464b      	mov	r3, r9
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	bfbc      	itt	lt
 80096ec:	232d      	movlt	r3, #45	; 0x2d
 80096ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096f2:	487f      	ldr	r0, [pc, #508]	; (80098f0 <_printf_float+0x2e8>)
 80096f4:	4b7f      	ldr	r3, [pc, #508]	; (80098f4 <_printf_float+0x2ec>)
 80096f6:	e7d1      	b.n	800969c <_printf_float+0x94>
 80096f8:	6863      	ldr	r3, [r4, #4]
 80096fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096fe:	9206      	str	r2, [sp, #24]
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	d13f      	bne.n	8009784 <_printf_float+0x17c>
 8009704:	2306      	movs	r3, #6
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	9b05      	ldr	r3, [sp, #20]
 800970a:	6861      	ldr	r1, [r4, #4]
 800970c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009710:	2300      	movs	r3, #0
 8009712:	9303      	str	r3, [sp, #12]
 8009714:	ab0a      	add	r3, sp, #40	; 0x28
 8009716:	e9cd b301 	strd	fp, r3, [sp, #4]
 800971a:	ab09      	add	r3, sp, #36	; 0x24
 800971c:	ec49 8b10 	vmov	d0, r8, r9
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	6022      	str	r2, [r4, #0]
 8009724:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009728:	4628      	mov	r0, r5
 800972a:	f7ff fecd 	bl	80094c8 <__cvt>
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009732:	2b47      	cmp	r3, #71	; 0x47
 8009734:	4680      	mov	r8, r0
 8009736:	d108      	bne.n	800974a <_printf_float+0x142>
 8009738:	1cc8      	adds	r0, r1, #3
 800973a:	db02      	blt.n	8009742 <_printf_float+0x13a>
 800973c:	6863      	ldr	r3, [r4, #4]
 800973e:	4299      	cmp	r1, r3
 8009740:	dd41      	ble.n	80097c6 <_printf_float+0x1be>
 8009742:	f1ab 0b02 	sub.w	fp, fp, #2
 8009746:	fa5f fb8b 	uxtb.w	fp, fp
 800974a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800974e:	d820      	bhi.n	8009792 <_printf_float+0x18a>
 8009750:	3901      	subs	r1, #1
 8009752:	465a      	mov	r2, fp
 8009754:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009758:	9109      	str	r1, [sp, #36]	; 0x24
 800975a:	f7ff ff17 	bl	800958c <__exponent>
 800975e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009760:	1813      	adds	r3, r2, r0
 8009762:	2a01      	cmp	r2, #1
 8009764:	4681      	mov	r9, r0
 8009766:	6123      	str	r3, [r4, #16]
 8009768:	dc02      	bgt.n	8009770 <_printf_float+0x168>
 800976a:	6822      	ldr	r2, [r4, #0]
 800976c:	07d2      	lsls	r2, r2, #31
 800976e:	d501      	bpl.n	8009774 <_printf_float+0x16c>
 8009770:	3301      	adds	r3, #1
 8009772:	6123      	str	r3, [r4, #16]
 8009774:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009778:	2b00      	cmp	r3, #0
 800977a:	d09c      	beq.n	80096b6 <_printf_float+0xae>
 800977c:	232d      	movs	r3, #45	; 0x2d
 800977e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009782:	e798      	b.n	80096b6 <_printf_float+0xae>
 8009784:	9a06      	ldr	r2, [sp, #24]
 8009786:	2a47      	cmp	r2, #71	; 0x47
 8009788:	d1be      	bne.n	8009708 <_printf_float+0x100>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1bc      	bne.n	8009708 <_printf_float+0x100>
 800978e:	2301      	movs	r3, #1
 8009790:	e7b9      	b.n	8009706 <_printf_float+0xfe>
 8009792:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009796:	d118      	bne.n	80097ca <_printf_float+0x1c2>
 8009798:	2900      	cmp	r1, #0
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	dd0b      	ble.n	80097b6 <_printf_float+0x1ae>
 800979e:	6121      	str	r1, [r4, #16]
 80097a0:	b913      	cbnz	r3, 80097a8 <_printf_float+0x1a0>
 80097a2:	6822      	ldr	r2, [r4, #0]
 80097a4:	07d0      	lsls	r0, r2, #31
 80097a6:	d502      	bpl.n	80097ae <_printf_float+0x1a6>
 80097a8:	3301      	adds	r3, #1
 80097aa:	440b      	add	r3, r1
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80097b0:	f04f 0900 	mov.w	r9, #0
 80097b4:	e7de      	b.n	8009774 <_printf_float+0x16c>
 80097b6:	b913      	cbnz	r3, 80097be <_printf_float+0x1b6>
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	07d2      	lsls	r2, r2, #31
 80097bc:	d501      	bpl.n	80097c2 <_printf_float+0x1ba>
 80097be:	3302      	adds	r3, #2
 80097c0:	e7f4      	b.n	80097ac <_printf_float+0x1a4>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e7f2      	b.n	80097ac <_printf_float+0x1a4>
 80097c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097cc:	4299      	cmp	r1, r3
 80097ce:	db05      	blt.n	80097dc <_printf_float+0x1d4>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	6121      	str	r1, [r4, #16]
 80097d4:	07d8      	lsls	r0, r3, #31
 80097d6:	d5ea      	bpl.n	80097ae <_printf_float+0x1a6>
 80097d8:	1c4b      	adds	r3, r1, #1
 80097da:	e7e7      	b.n	80097ac <_printf_float+0x1a4>
 80097dc:	2900      	cmp	r1, #0
 80097de:	bfd4      	ite	le
 80097e0:	f1c1 0202 	rsble	r2, r1, #2
 80097e4:	2201      	movgt	r2, #1
 80097e6:	4413      	add	r3, r2
 80097e8:	e7e0      	b.n	80097ac <_printf_float+0x1a4>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	055a      	lsls	r2, r3, #21
 80097ee:	d407      	bmi.n	8009800 <_printf_float+0x1f8>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	4642      	mov	r2, r8
 80097f4:	4631      	mov	r1, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	d12c      	bne.n	8009858 <_printf_float+0x250>
 80097fe:	e764      	b.n	80096ca <_printf_float+0xc2>
 8009800:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009804:	f240 80e0 	bls.w	80099c8 <_printf_float+0x3c0>
 8009808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800980c:	2200      	movs	r2, #0
 800980e:	2300      	movs	r3, #0
 8009810:	f7f7 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009814:	2800      	cmp	r0, #0
 8009816:	d034      	beq.n	8009882 <_printf_float+0x27a>
 8009818:	4a37      	ldr	r2, [pc, #220]	; (80098f8 <_printf_float+0x2f0>)
 800981a:	2301      	movs	r3, #1
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	f43f af51 	beq.w	80096ca <_printf_float+0xc2>
 8009828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800982c:	429a      	cmp	r2, r3
 800982e:	db02      	blt.n	8009836 <_printf_float+0x22e>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	07d8      	lsls	r0, r3, #31
 8009834:	d510      	bpl.n	8009858 <_printf_float+0x250>
 8009836:	ee18 3a10 	vmov	r3, s16
 800983a:	4652      	mov	r2, sl
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	47b8      	blx	r7
 8009842:	3001      	adds	r0, #1
 8009844:	f43f af41 	beq.w	80096ca <_printf_float+0xc2>
 8009848:	f04f 0800 	mov.w	r8, #0
 800984c:	f104 091a 	add.w	r9, r4, #26
 8009850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009852:	3b01      	subs	r3, #1
 8009854:	4543      	cmp	r3, r8
 8009856:	dc09      	bgt.n	800986c <_printf_float+0x264>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	079b      	lsls	r3, r3, #30
 800985c:	f100 8105 	bmi.w	8009a6a <_printf_float+0x462>
 8009860:	68e0      	ldr	r0, [r4, #12]
 8009862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009864:	4298      	cmp	r0, r3
 8009866:	bfb8      	it	lt
 8009868:	4618      	movlt	r0, r3
 800986a:	e730      	b.n	80096ce <_printf_float+0xc6>
 800986c:	2301      	movs	r3, #1
 800986e:	464a      	mov	r2, r9
 8009870:	4631      	mov	r1, r6
 8009872:	4628      	mov	r0, r5
 8009874:	47b8      	blx	r7
 8009876:	3001      	adds	r0, #1
 8009878:	f43f af27 	beq.w	80096ca <_printf_float+0xc2>
 800987c:	f108 0801 	add.w	r8, r8, #1
 8009880:	e7e6      	b.n	8009850 <_printf_float+0x248>
 8009882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009884:	2b00      	cmp	r3, #0
 8009886:	dc39      	bgt.n	80098fc <_printf_float+0x2f4>
 8009888:	4a1b      	ldr	r2, [pc, #108]	; (80098f8 <_printf_float+0x2f0>)
 800988a:	2301      	movs	r3, #1
 800988c:	4631      	mov	r1, r6
 800988e:	4628      	mov	r0, r5
 8009890:	47b8      	blx	r7
 8009892:	3001      	adds	r0, #1
 8009894:	f43f af19 	beq.w	80096ca <_printf_float+0xc2>
 8009898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800989c:	4313      	orrs	r3, r2
 800989e:	d102      	bne.n	80098a6 <_printf_float+0x29e>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	07d9      	lsls	r1, r3, #31
 80098a4:	d5d8      	bpl.n	8009858 <_printf_float+0x250>
 80098a6:	ee18 3a10 	vmov	r3, s16
 80098aa:	4652      	mov	r2, sl
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	f43f af09 	beq.w	80096ca <_printf_float+0xc2>
 80098b8:	f04f 0900 	mov.w	r9, #0
 80098bc:	f104 0a1a 	add.w	sl, r4, #26
 80098c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c2:	425b      	negs	r3, r3
 80098c4:	454b      	cmp	r3, r9
 80098c6:	dc01      	bgt.n	80098cc <_printf_float+0x2c4>
 80098c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ca:	e792      	b.n	80097f2 <_printf_float+0x1ea>
 80098cc:	2301      	movs	r3, #1
 80098ce:	4652      	mov	r2, sl
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	f43f aef7 	beq.w	80096ca <_printf_float+0xc2>
 80098dc:	f109 0901 	add.w	r9, r9, #1
 80098e0:	e7ee      	b.n	80098c0 <_printf_float+0x2b8>
 80098e2:	bf00      	nop
 80098e4:	7fefffff 	.word	0x7fefffff
 80098e8:	0800c778 	.word	0x0800c778
 80098ec:	0800c77c 	.word	0x0800c77c
 80098f0:	0800c784 	.word	0x0800c784
 80098f4:	0800c780 	.word	0x0800c780
 80098f8:	0800c788 	.word	0x0800c788
 80098fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009900:	429a      	cmp	r2, r3
 8009902:	bfa8      	it	ge
 8009904:	461a      	movge	r2, r3
 8009906:	2a00      	cmp	r2, #0
 8009908:	4691      	mov	r9, r2
 800990a:	dc37      	bgt.n	800997c <_printf_float+0x374>
 800990c:	f04f 0b00 	mov.w	fp, #0
 8009910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009914:	f104 021a 	add.w	r2, r4, #26
 8009918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800991a:	9305      	str	r3, [sp, #20]
 800991c:	eba3 0309 	sub.w	r3, r3, r9
 8009920:	455b      	cmp	r3, fp
 8009922:	dc33      	bgt.n	800998c <_printf_float+0x384>
 8009924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009928:	429a      	cmp	r2, r3
 800992a:	db3b      	blt.n	80099a4 <_printf_float+0x39c>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	07da      	lsls	r2, r3, #31
 8009930:	d438      	bmi.n	80099a4 <_printf_float+0x39c>
 8009932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009934:	9a05      	ldr	r2, [sp, #20]
 8009936:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009938:	1a9a      	subs	r2, r3, r2
 800993a:	eba3 0901 	sub.w	r9, r3, r1
 800993e:	4591      	cmp	r9, r2
 8009940:	bfa8      	it	ge
 8009942:	4691      	movge	r9, r2
 8009944:	f1b9 0f00 	cmp.w	r9, #0
 8009948:	dc35      	bgt.n	80099b6 <_printf_float+0x3ae>
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009952:	f104 0a1a 	add.w	sl, r4, #26
 8009956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	eba3 0309 	sub.w	r3, r3, r9
 8009960:	4543      	cmp	r3, r8
 8009962:	f77f af79 	ble.w	8009858 <_printf_float+0x250>
 8009966:	2301      	movs	r3, #1
 8009968:	4652      	mov	r2, sl
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	f43f aeaa 	beq.w	80096ca <_printf_float+0xc2>
 8009976:	f108 0801 	add.w	r8, r8, #1
 800997a:	e7ec      	b.n	8009956 <_printf_float+0x34e>
 800997c:	4613      	mov	r3, r2
 800997e:	4631      	mov	r1, r6
 8009980:	4642      	mov	r2, r8
 8009982:	4628      	mov	r0, r5
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	d1c0      	bne.n	800990c <_printf_float+0x304>
 800998a:	e69e      	b.n	80096ca <_printf_float+0xc2>
 800998c:	2301      	movs	r3, #1
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	9205      	str	r2, [sp, #20]
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	f43f ae97 	beq.w	80096ca <_printf_float+0xc2>
 800999c:	9a05      	ldr	r2, [sp, #20]
 800999e:	f10b 0b01 	add.w	fp, fp, #1
 80099a2:	e7b9      	b.n	8009918 <_printf_float+0x310>
 80099a4:	ee18 3a10 	vmov	r3, s16
 80099a8:	4652      	mov	r2, sl
 80099aa:	4631      	mov	r1, r6
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b8      	blx	r7
 80099b0:	3001      	adds	r0, #1
 80099b2:	d1be      	bne.n	8009932 <_printf_float+0x32a>
 80099b4:	e689      	b.n	80096ca <_printf_float+0xc2>
 80099b6:	9a05      	ldr	r2, [sp, #20]
 80099b8:	464b      	mov	r3, r9
 80099ba:	4442      	add	r2, r8
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	d1c1      	bne.n	800994a <_printf_float+0x342>
 80099c6:	e680      	b.n	80096ca <_printf_float+0xc2>
 80099c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ca:	2a01      	cmp	r2, #1
 80099cc:	dc01      	bgt.n	80099d2 <_printf_float+0x3ca>
 80099ce:	07db      	lsls	r3, r3, #31
 80099d0:	d538      	bpl.n	8009a44 <_printf_float+0x43c>
 80099d2:	2301      	movs	r3, #1
 80099d4:	4642      	mov	r2, r8
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	47b8      	blx	r7
 80099dc:	3001      	adds	r0, #1
 80099de:	f43f ae74 	beq.w	80096ca <_printf_float+0xc2>
 80099e2:	ee18 3a10 	vmov	r3, s16
 80099e6:	4652      	mov	r2, sl
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f ae6b 	beq.w	80096ca <_printf_float+0xc2>
 80099f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099f8:	2200      	movs	r2, #0
 80099fa:	2300      	movs	r3, #0
 80099fc:	f7f7 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a00:	b9d8      	cbnz	r0, 8009a3a <_printf_float+0x432>
 8009a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a04:	f108 0201 	add.w	r2, r8, #1
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	d10e      	bne.n	8009a32 <_printf_float+0x42a>
 8009a14:	e659      	b.n	80096ca <_printf_float+0xc2>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4652      	mov	r2, sl
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	f43f ae52 	beq.w	80096ca <_printf_float+0xc2>
 8009a26:	f108 0801 	add.w	r8, r8, #1
 8009a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	4543      	cmp	r3, r8
 8009a30:	dcf1      	bgt.n	8009a16 <_printf_float+0x40e>
 8009a32:	464b      	mov	r3, r9
 8009a34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a38:	e6dc      	b.n	80097f4 <_printf_float+0x1ec>
 8009a3a:	f04f 0800 	mov.w	r8, #0
 8009a3e:	f104 0a1a 	add.w	sl, r4, #26
 8009a42:	e7f2      	b.n	8009a2a <_printf_float+0x422>
 8009a44:	2301      	movs	r3, #1
 8009a46:	4642      	mov	r2, r8
 8009a48:	e7df      	b.n	8009a0a <_printf_float+0x402>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	464a      	mov	r2, r9
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	f43f ae38 	beq.w	80096ca <_printf_float+0xc2>
 8009a5a:	f108 0801 	add.w	r8, r8, #1
 8009a5e:	68e3      	ldr	r3, [r4, #12]
 8009a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a62:	1a5b      	subs	r3, r3, r1
 8009a64:	4543      	cmp	r3, r8
 8009a66:	dcf0      	bgt.n	8009a4a <_printf_float+0x442>
 8009a68:	e6fa      	b.n	8009860 <_printf_float+0x258>
 8009a6a:	f04f 0800 	mov.w	r8, #0
 8009a6e:	f104 0919 	add.w	r9, r4, #25
 8009a72:	e7f4      	b.n	8009a5e <_printf_float+0x456>

08009a74 <_printf_common>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	4616      	mov	r6, r2
 8009a7a:	4699      	mov	r9, r3
 8009a7c:	688a      	ldr	r2, [r1, #8]
 8009a7e:	690b      	ldr	r3, [r1, #16]
 8009a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	bfb8      	it	lt
 8009a88:	4613      	movlt	r3, r2
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a90:	4607      	mov	r7, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b10a      	cbz	r2, 8009a9a <_printf_common+0x26>
 8009a96:	3301      	adds	r3, #1
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	0699      	lsls	r1, r3, #26
 8009a9e:	bf42      	ittt	mi
 8009aa0:	6833      	ldrmi	r3, [r6, #0]
 8009aa2:	3302      	addmi	r3, #2
 8009aa4:	6033      	strmi	r3, [r6, #0]
 8009aa6:	6825      	ldr	r5, [r4, #0]
 8009aa8:	f015 0506 	ands.w	r5, r5, #6
 8009aac:	d106      	bne.n	8009abc <_printf_common+0x48>
 8009aae:	f104 0a19 	add.w	sl, r4, #25
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	6832      	ldr	r2, [r6, #0]
 8009ab6:	1a9b      	subs	r3, r3, r2
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	dc26      	bgt.n	8009b0a <_printf_common+0x96>
 8009abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ac0:	1e13      	subs	r3, r2, #0
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	bf18      	it	ne
 8009ac6:	2301      	movne	r3, #1
 8009ac8:	0692      	lsls	r2, r2, #26
 8009aca:	d42b      	bmi.n	8009b24 <_printf_common+0xb0>
 8009acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	47c0      	blx	r8
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d01e      	beq.n	8009b18 <_printf_common+0xa4>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	68e5      	ldr	r5, [r4, #12]
 8009ade:	6832      	ldr	r2, [r6, #0]
 8009ae0:	f003 0306 	and.w	r3, r3, #6
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	bf08      	it	eq
 8009ae8:	1aad      	subeq	r5, r5, r2
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	bf0c      	ite	eq
 8009af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af4:	2500      	movne	r5, #0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bfc4      	itt	gt
 8009afa:	1a9b      	subgt	r3, r3, r2
 8009afc:	18ed      	addgt	r5, r5, r3
 8009afe:	2600      	movs	r6, #0
 8009b00:	341a      	adds	r4, #26
 8009b02:	42b5      	cmp	r5, r6
 8009b04:	d11a      	bne.n	8009b3c <_printf_common+0xc8>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e008      	b.n	8009b1c <_printf_common+0xa8>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4638      	mov	r0, r7
 8009b12:	47c0      	blx	r8
 8009b14:	3001      	adds	r0, #1
 8009b16:	d103      	bne.n	8009b20 <_printf_common+0xac>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	3501      	adds	r5, #1
 8009b22:	e7c6      	b.n	8009ab2 <_printf_common+0x3e>
 8009b24:	18e1      	adds	r1, r4, r3
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	2030      	movs	r0, #48	; 0x30
 8009b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2e:	4422      	add	r2, r4
 8009b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b38:	3302      	adds	r3, #2
 8009b3a:	e7c7      	b.n	8009acc <_printf_common+0x58>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4649      	mov	r1, r9
 8009b42:	4638      	mov	r0, r7
 8009b44:	47c0      	blx	r8
 8009b46:	3001      	adds	r0, #1
 8009b48:	d0e6      	beq.n	8009b18 <_printf_common+0xa4>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7d9      	b.n	8009b02 <_printf_common+0x8e>
	...

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	7e0f      	ldrb	r7, [r1, #24]
 8009b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b58:	2f78      	cmp	r7, #120	; 0x78
 8009b5a:	4691      	mov	r9, r2
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	469a      	mov	sl, r3
 8009b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	; 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d8 	beq.w	8009d22 <_printf_i+0x1d2>
 8009b72:	2f58      	cmp	r7, #88	; 0x58
 8009b74:	f000 80a3 	beq.w	8009cbe <_printf_i+0x16e>
 8009b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a101      	add	r1, pc, #4	; (adr r1, 8009b90 <_printf_i+0x40>)
 8009b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009d09 	.word	0x08009d09
 8009bc0:	08009c2d 	.word	0x08009c2d
 8009bc4:	08009ceb 	.word	0x08009ceb
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d2b 	.word	0x08009d2b
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cf3 	.word	0x08009cf3
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	602a      	str	r2, [r5, #0]
 8009bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0a3      	b.n	8009d44 <_printf_i+0x1f4>
 8009bfc:	6820      	ldr	r0, [r4, #0]
 8009bfe:	6829      	ldr	r1, [r5, #0]
 8009c00:	0606      	lsls	r6, r0, #24
 8009c02:	f101 0304 	add.w	r3, r1, #4
 8009c06:	d50a      	bpl.n	8009c1e <_printf_i+0xce>
 8009c08:	680e      	ldr	r6, [r1, #0]
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	2e00      	cmp	r6, #0
 8009c0e:	da03      	bge.n	8009c18 <_printf_i+0xc8>
 8009c10:	232d      	movs	r3, #45	; 0x2d
 8009c12:	4276      	negs	r6, r6
 8009c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c18:	485e      	ldr	r0, [pc, #376]	; (8009d94 <_printf_i+0x244>)
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	e019      	b.n	8009c52 <_printf_i+0x102>
 8009c1e:	680e      	ldr	r6, [r1, #0]
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c26:	bf18      	it	ne
 8009c28:	b236      	sxthne	r6, r6
 8009c2a:	e7ef      	b.n	8009c0c <_printf_i+0xbc>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	6820      	ldr	r0, [r4, #0]
 8009c30:	1d19      	adds	r1, r3, #4
 8009c32:	6029      	str	r1, [r5, #0]
 8009c34:	0601      	lsls	r1, r0, #24
 8009c36:	d501      	bpl.n	8009c3c <_printf_i+0xec>
 8009c38:	681e      	ldr	r6, [r3, #0]
 8009c3a:	e002      	b.n	8009c42 <_printf_i+0xf2>
 8009c3c:	0646      	lsls	r6, r0, #25
 8009c3e:	d5fb      	bpl.n	8009c38 <_printf_i+0xe8>
 8009c40:	881e      	ldrh	r6, [r3, #0]
 8009c42:	4854      	ldr	r0, [pc, #336]	; (8009d94 <_printf_i+0x244>)
 8009c44:	2f6f      	cmp	r7, #111	; 0x6f
 8009c46:	bf0c      	ite	eq
 8009c48:	2308      	moveq	r3, #8
 8009c4a:	230a      	movne	r3, #10
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c52:	6865      	ldr	r5, [r4, #4]
 8009c54:	60a5      	str	r5, [r4, #8]
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	bfa2      	ittt	ge
 8009c5a:	6821      	ldrge	r1, [r4, #0]
 8009c5c:	f021 0104 	bicge.w	r1, r1, #4
 8009c60:	6021      	strge	r1, [r4, #0]
 8009c62:	b90e      	cbnz	r6, 8009c68 <_printf_i+0x118>
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	d04d      	beq.n	8009d04 <_printf_i+0x1b4>
 8009c68:	4615      	mov	r5, r2
 8009c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c72:	5dc7      	ldrb	r7, [r0, r7]
 8009c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c78:	4637      	mov	r7, r6
 8009c7a:	42bb      	cmp	r3, r7
 8009c7c:	460e      	mov	r6, r1
 8009c7e:	d9f4      	bls.n	8009c6a <_printf_i+0x11a>
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d10b      	bne.n	8009c9c <_printf_i+0x14c>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	07de      	lsls	r6, r3, #31
 8009c88:	d508      	bpl.n	8009c9c <_printf_i+0x14c>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6861      	ldr	r1, [r4, #4]
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	bfde      	ittt	le
 8009c92:	2330      	movle	r3, #48	; 0x30
 8009c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c9c:	1b52      	subs	r2, r2, r5
 8009c9e:	6122      	str	r2, [r4, #16]
 8009ca0:	f8cd a000 	str.w	sl, [sp]
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	aa03      	add	r2, sp, #12
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4640      	mov	r0, r8
 8009cac:	f7ff fee2 	bl	8009a74 <_printf_common>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d14c      	bne.n	8009d4e <_printf_i+0x1fe>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	b004      	add	sp, #16
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	4835      	ldr	r0, [pc, #212]	; (8009d94 <_printf_i+0x244>)
 8009cc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cc4:	6829      	ldr	r1, [r5, #0]
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ccc:	6029      	str	r1, [r5, #0]
 8009cce:	061d      	lsls	r5, r3, #24
 8009cd0:	d514      	bpl.n	8009cfc <_printf_i+0x1ac>
 8009cd2:	07df      	lsls	r7, r3, #31
 8009cd4:	bf44      	itt	mi
 8009cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cda:	6023      	strmi	r3, [r4, #0]
 8009cdc:	b91e      	cbnz	r6, 8009ce6 <_printf_i+0x196>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	f023 0320 	bic.w	r3, r3, #32
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	e7b0      	b.n	8009c4c <_printf_i+0xfc>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	f043 0320 	orr.w	r3, r3, #32
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	2378      	movs	r3, #120	; 0x78
 8009cf4:	4828      	ldr	r0, [pc, #160]	; (8009d98 <_printf_i+0x248>)
 8009cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cfa:	e7e3      	b.n	8009cc4 <_printf_i+0x174>
 8009cfc:	0659      	lsls	r1, r3, #25
 8009cfe:	bf48      	it	mi
 8009d00:	b2b6      	uxthmi	r6, r6
 8009d02:	e7e6      	b.n	8009cd2 <_printf_i+0x182>
 8009d04:	4615      	mov	r5, r2
 8009d06:	e7bb      	b.n	8009c80 <_printf_i+0x130>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	6826      	ldr	r6, [r4, #0]
 8009d0c:	6961      	ldr	r1, [r4, #20]
 8009d0e:	1d18      	adds	r0, r3, #4
 8009d10:	6028      	str	r0, [r5, #0]
 8009d12:	0635      	lsls	r5, r6, #24
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0x1cc>
 8009d18:	6019      	str	r1, [r3, #0]
 8009d1a:	e002      	b.n	8009d22 <_printf_i+0x1d2>
 8009d1c:	0670      	lsls	r0, r6, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0x1c8>
 8009d20:	8019      	strh	r1, [r3, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	4615      	mov	r5, r2
 8009d28:	e7ba      	b.n	8009ca0 <_printf_i+0x150>
 8009d2a:	682b      	ldr	r3, [r5, #0]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	602a      	str	r2, [r5, #0]
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	6862      	ldr	r2, [r4, #4]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4628      	mov	r0, r5
 8009d38:	f7f6 fa52 	bl	80001e0 <memchr>
 8009d3c:	b108      	cbz	r0, 8009d42 <_printf_i+0x1f2>
 8009d3e:	1b40      	subs	r0, r0, r5
 8009d40:	6060      	str	r0, [r4, #4]
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	2300      	movs	r3, #0
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	e7a8      	b.n	8009ca0 <_printf_i+0x150>
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	462a      	mov	r2, r5
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	47d0      	blx	sl
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d0ab      	beq.n	8009cb4 <_printf_i+0x164>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	079b      	lsls	r3, r3, #30
 8009d60:	d413      	bmi.n	8009d8a <_printf_i+0x23a>
 8009d62:	68e0      	ldr	r0, [r4, #12]
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	4298      	cmp	r0, r3
 8009d68:	bfb8      	it	lt
 8009d6a:	4618      	movlt	r0, r3
 8009d6c:	e7a4      	b.n	8009cb8 <_printf_i+0x168>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4632      	mov	r2, r6
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d09b      	beq.n	8009cb4 <_printf_i+0x164>
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	9903      	ldr	r1, [sp, #12]
 8009d82:	1a5b      	subs	r3, r3, r1
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dcf2      	bgt.n	8009d6e <_printf_i+0x21e>
 8009d88:	e7eb      	b.n	8009d62 <_printf_i+0x212>
 8009d8a:	2500      	movs	r5, #0
 8009d8c:	f104 0619 	add.w	r6, r4, #25
 8009d90:	e7f5      	b.n	8009d7e <_printf_i+0x22e>
 8009d92:	bf00      	nop
 8009d94:	0800c78a 	.word	0x0800c78a
 8009d98:	0800c79b 	.word	0x0800c79b

08009d9c <iprintf>:
 8009d9c:	b40f      	push	{r0, r1, r2, r3}
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <iprintf+0x2c>)
 8009da0:	b513      	push	{r0, r1, r4, lr}
 8009da2:	681c      	ldr	r4, [r3, #0]
 8009da4:	b124      	cbz	r4, 8009db0 <iprintf+0x14>
 8009da6:	69a3      	ldr	r3, [r4, #24]
 8009da8:	b913      	cbnz	r3, 8009db0 <iprintf+0x14>
 8009daa:	4620      	mov	r0, r4
 8009dac:	f001 f9c8 	bl	800b140 <__sinit>
 8009db0:	ab05      	add	r3, sp, #20
 8009db2:	9a04      	ldr	r2, [sp, #16]
 8009db4:	68a1      	ldr	r1, [r4, #8]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	4620      	mov	r0, r4
 8009dba:	f002 f8d3 	bl	800bf64 <_vfiprintf_r>
 8009dbe:	b002      	add	sp, #8
 8009dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dc4:	b004      	add	sp, #16
 8009dc6:	4770      	bx	lr
 8009dc8:	2000000c 	.word	0x2000000c

08009dcc <_puts_r>:
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	460e      	mov	r6, r1
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	b118      	cbz	r0, 8009ddc <_puts_r+0x10>
 8009dd4:	6983      	ldr	r3, [r0, #24]
 8009dd6:	b90b      	cbnz	r3, 8009ddc <_puts_r+0x10>
 8009dd8:	f001 f9b2 	bl	800b140 <__sinit>
 8009ddc:	69ab      	ldr	r3, [r5, #24]
 8009dde:	68ac      	ldr	r4, [r5, #8]
 8009de0:	b913      	cbnz	r3, 8009de8 <_puts_r+0x1c>
 8009de2:	4628      	mov	r0, r5
 8009de4:	f001 f9ac 	bl	800b140 <__sinit>
 8009de8:	4b2c      	ldr	r3, [pc, #176]	; (8009e9c <_puts_r+0xd0>)
 8009dea:	429c      	cmp	r4, r3
 8009dec:	d120      	bne.n	8009e30 <_puts_r+0x64>
 8009dee:	686c      	ldr	r4, [r5, #4]
 8009df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009df2:	07db      	lsls	r3, r3, #31
 8009df4:	d405      	bmi.n	8009e02 <_puts_r+0x36>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	0598      	lsls	r0, r3, #22
 8009dfa:	d402      	bmi.n	8009e02 <_puts_r+0x36>
 8009dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dfe:	f001 fa42 	bl	800b286 <__retarget_lock_acquire_recursive>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	0719      	lsls	r1, r3, #28
 8009e06:	d51d      	bpl.n	8009e44 <_puts_r+0x78>
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	b1db      	cbz	r3, 8009e44 <_puts_r+0x78>
 8009e0c:	3e01      	subs	r6, #1
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e14:	3b01      	subs	r3, #1
 8009e16:	60a3      	str	r3, [r4, #8]
 8009e18:	bb39      	cbnz	r1, 8009e6a <_puts_r+0x9e>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	da38      	bge.n	8009e90 <_puts_r+0xc4>
 8009e1e:	4622      	mov	r2, r4
 8009e20:	210a      	movs	r1, #10
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 f936 	bl	800a094 <__swbuf_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d011      	beq.n	8009e50 <_puts_r+0x84>
 8009e2c:	250a      	movs	r5, #10
 8009e2e:	e011      	b.n	8009e54 <_puts_r+0x88>
 8009e30:	4b1b      	ldr	r3, [pc, #108]	; (8009ea0 <_puts_r+0xd4>)
 8009e32:	429c      	cmp	r4, r3
 8009e34:	d101      	bne.n	8009e3a <_puts_r+0x6e>
 8009e36:	68ac      	ldr	r4, [r5, #8]
 8009e38:	e7da      	b.n	8009df0 <_puts_r+0x24>
 8009e3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ea4 <_puts_r+0xd8>)
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	bf08      	it	eq
 8009e40:	68ec      	ldreq	r4, [r5, #12]
 8009e42:	e7d5      	b.n	8009df0 <_puts_r+0x24>
 8009e44:	4621      	mov	r1, r4
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 f976 	bl	800a138 <__swsetup_r>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d0dd      	beq.n	8009e0c <_puts_r+0x40>
 8009e50:	f04f 35ff 	mov.w	r5, #4294967295
 8009e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e56:	07da      	lsls	r2, r3, #31
 8009e58:	d405      	bmi.n	8009e66 <_puts_r+0x9a>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	059b      	lsls	r3, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_puts_r+0x9a>
 8009e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e62:	f001 fa11 	bl	800b288 <__retarget_lock_release_recursive>
 8009e66:	4628      	mov	r0, r5
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da04      	bge.n	8009e78 <_puts_r+0xac>
 8009e6e:	69a2      	ldr	r2, [r4, #24]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	dc06      	bgt.n	8009e82 <_puts_r+0xb6>
 8009e74:	290a      	cmp	r1, #10
 8009e76:	d004      	beq.n	8009e82 <_puts_r+0xb6>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	6022      	str	r2, [r4, #0]
 8009e7e:	7019      	strb	r1, [r3, #0]
 8009e80:	e7c5      	b.n	8009e0e <_puts_r+0x42>
 8009e82:	4622      	mov	r2, r4
 8009e84:	4628      	mov	r0, r5
 8009e86:	f000 f905 	bl	800a094 <__swbuf_r>
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d1bf      	bne.n	8009e0e <_puts_r+0x42>
 8009e8e:	e7df      	b.n	8009e50 <_puts_r+0x84>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	250a      	movs	r5, #10
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	6022      	str	r2, [r4, #0]
 8009e98:	701d      	strb	r5, [r3, #0]
 8009e9a:	e7db      	b.n	8009e54 <_puts_r+0x88>
 8009e9c:	0800c85c 	.word	0x0800c85c
 8009ea0:	0800c87c 	.word	0x0800c87c
 8009ea4:	0800c83c 	.word	0x0800c83c

08009ea8 <puts>:
 8009ea8:	4b02      	ldr	r3, [pc, #8]	; (8009eb4 <puts+0xc>)
 8009eaa:	4601      	mov	r1, r0
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f7ff bf8d 	b.w	8009dcc <_puts_r>
 8009eb2:	bf00      	nop
 8009eb4:	2000000c 	.word	0x2000000c

08009eb8 <setbuf>:
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ebe:	bf0c      	ite	eq
 8009ec0:	2202      	moveq	r2, #2
 8009ec2:	2200      	movne	r2, #0
 8009ec4:	f000 b800 	b.w	8009ec8 <setvbuf>

08009ec8 <setvbuf>:
 8009ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	461d      	mov	r5, r3
 8009ece:	4b5d      	ldr	r3, [pc, #372]	; (800a044 <setvbuf+0x17c>)
 8009ed0:	681f      	ldr	r7, [r3, #0]
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460e      	mov	r6, r1
 8009ed6:	4690      	mov	r8, r2
 8009ed8:	b127      	cbz	r7, 8009ee4 <setvbuf+0x1c>
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	b913      	cbnz	r3, 8009ee4 <setvbuf+0x1c>
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f001 f92e 	bl	800b140 <__sinit>
 8009ee4:	4b58      	ldr	r3, [pc, #352]	; (800a048 <setvbuf+0x180>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d167      	bne.n	8009fba <setvbuf+0xf2>
 8009eea:	687c      	ldr	r4, [r7, #4]
 8009eec:	f1b8 0f02 	cmp.w	r8, #2
 8009ef0:	d006      	beq.n	8009f00 <setvbuf+0x38>
 8009ef2:	f1b8 0f01 	cmp.w	r8, #1
 8009ef6:	f200 809f 	bhi.w	800a038 <setvbuf+0x170>
 8009efa:	2d00      	cmp	r5, #0
 8009efc:	f2c0 809c 	blt.w	800a038 <setvbuf+0x170>
 8009f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f02:	07db      	lsls	r3, r3, #31
 8009f04:	d405      	bmi.n	8009f12 <setvbuf+0x4a>
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	0598      	lsls	r0, r3, #22
 8009f0a:	d402      	bmi.n	8009f12 <setvbuf+0x4a>
 8009f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0e:	f001 f9ba 	bl	800b286 <__retarget_lock_acquire_recursive>
 8009f12:	4621      	mov	r1, r4
 8009f14:	4638      	mov	r0, r7
 8009f16:	f001 f87f 	bl	800b018 <_fflush_r>
 8009f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1c:	b141      	cbz	r1, 8009f30 <setvbuf+0x68>
 8009f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f22:	4299      	cmp	r1, r3
 8009f24:	d002      	beq.n	8009f2c <setvbuf+0x64>
 8009f26:	4638      	mov	r0, r7
 8009f28:	f001 fdb6 	bl	800ba98 <_free_r>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8009f30:	2300      	movs	r3, #0
 8009f32:	61a3      	str	r3, [r4, #24]
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	0619      	lsls	r1, r3, #24
 8009f3a:	d503      	bpl.n	8009f44 <setvbuf+0x7c>
 8009f3c:	6921      	ldr	r1, [r4, #16]
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f001 fdaa 	bl	800ba98 <_free_r>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009f4a:	f023 0303 	bic.w	r3, r3, #3
 8009f4e:	f1b8 0f02 	cmp.w	r8, #2
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	d06c      	beq.n	800a030 <setvbuf+0x168>
 8009f56:	ab01      	add	r3, sp, #4
 8009f58:	466a      	mov	r2, sp
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f001 f994 	bl	800b28a <__swhatbuf_r>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	4318      	orrs	r0, r3
 8009f66:	81a0      	strh	r0, [r4, #12]
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	d130      	bne.n	8009fce <setvbuf+0x106>
 8009f6c:	9d00      	ldr	r5, [sp, #0]
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f001 f9f0 	bl	800b354 <malloc>
 8009f74:	4606      	mov	r6, r0
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d155      	bne.n	800a026 <setvbuf+0x15e>
 8009f7a:	f8dd 9000 	ldr.w	r9, [sp]
 8009f7e:	45a9      	cmp	r9, r5
 8009f80:	d14a      	bne.n	800a018 <setvbuf+0x150>
 8009f82:	f04f 35ff 	mov.w	r5, #4294967295
 8009f86:	2200      	movs	r2, #0
 8009f88:	60a2      	str	r2, [r4, #8]
 8009f8a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009f8e:	6022      	str	r2, [r4, #0]
 8009f90:	6122      	str	r2, [r4, #16]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f98:	6162      	str	r2, [r4, #20]
 8009f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f9c:	f043 0302 	orr.w	r3, r3, #2
 8009fa0:	07d2      	lsls	r2, r2, #31
 8009fa2:	81a3      	strh	r3, [r4, #12]
 8009fa4:	d405      	bmi.n	8009fb2 <setvbuf+0xea>
 8009fa6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009faa:	d102      	bne.n	8009fb2 <setvbuf+0xea>
 8009fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fae:	f001 f96b 	bl	800b288 <__retarget_lock_release_recursive>
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	b003      	add	sp, #12
 8009fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fba:	4b24      	ldr	r3, [pc, #144]	; (800a04c <setvbuf+0x184>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	d101      	bne.n	8009fc4 <setvbuf+0xfc>
 8009fc0:	68bc      	ldr	r4, [r7, #8]
 8009fc2:	e793      	b.n	8009eec <setvbuf+0x24>
 8009fc4:	4b22      	ldr	r3, [pc, #136]	; (800a050 <setvbuf+0x188>)
 8009fc6:	429c      	cmp	r4, r3
 8009fc8:	bf08      	it	eq
 8009fca:	68fc      	ldreq	r4, [r7, #12]
 8009fcc:	e78e      	b.n	8009eec <setvbuf+0x24>
 8009fce:	2e00      	cmp	r6, #0
 8009fd0:	d0cd      	beq.n	8009f6e <setvbuf+0xa6>
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	b913      	cbnz	r3, 8009fdc <setvbuf+0x114>
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	f001 f8b2 	bl	800b140 <__sinit>
 8009fdc:	f1b8 0f01 	cmp.w	r8, #1
 8009fe0:	bf08      	it	eq
 8009fe2:	89a3      	ldrheq	r3, [r4, #12]
 8009fe4:	6026      	str	r6, [r4, #0]
 8009fe6:	bf04      	itt	eq
 8009fe8:	f043 0301 	orreq.w	r3, r3, #1
 8009fec:	81a3      	strheq	r3, [r4, #12]
 8009fee:	89a2      	ldrh	r2, [r4, #12]
 8009ff0:	f012 0308 	ands.w	r3, r2, #8
 8009ff4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009ff8:	d01c      	beq.n	800a034 <setvbuf+0x16c>
 8009ffa:	07d3      	lsls	r3, r2, #31
 8009ffc:	bf41      	itttt	mi
 8009ffe:	2300      	movmi	r3, #0
 800a000:	426d      	negmi	r5, r5
 800a002:	60a3      	strmi	r3, [r4, #8]
 800a004:	61a5      	strmi	r5, [r4, #24]
 800a006:	bf58      	it	pl
 800a008:	60a5      	strpl	r5, [r4, #8]
 800a00a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a00c:	f015 0501 	ands.w	r5, r5, #1
 800a010:	d115      	bne.n	800a03e <setvbuf+0x176>
 800a012:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a016:	e7c8      	b.n	8009faa <setvbuf+0xe2>
 800a018:	4648      	mov	r0, r9
 800a01a:	f001 f99b 	bl	800b354 <malloc>
 800a01e:	4606      	mov	r6, r0
 800a020:	2800      	cmp	r0, #0
 800a022:	d0ae      	beq.n	8009f82 <setvbuf+0xba>
 800a024:	464d      	mov	r5, r9
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	e7d0      	b.n	8009fd2 <setvbuf+0x10a>
 800a030:	2500      	movs	r5, #0
 800a032:	e7a8      	b.n	8009f86 <setvbuf+0xbe>
 800a034:	60a3      	str	r3, [r4, #8]
 800a036:	e7e8      	b.n	800a00a <setvbuf+0x142>
 800a038:	f04f 35ff 	mov.w	r5, #4294967295
 800a03c:	e7b9      	b.n	8009fb2 <setvbuf+0xea>
 800a03e:	2500      	movs	r5, #0
 800a040:	e7b7      	b.n	8009fb2 <setvbuf+0xea>
 800a042:	bf00      	nop
 800a044:	2000000c 	.word	0x2000000c
 800a048:	0800c85c 	.word	0x0800c85c
 800a04c:	0800c87c 	.word	0x0800c87c
 800a050:	0800c83c 	.word	0x0800c83c

0800a054 <_vsiprintf_r>:
 800a054:	b500      	push	{lr}
 800a056:	b09b      	sub	sp, #108	; 0x6c
 800a058:	9100      	str	r1, [sp, #0]
 800a05a:	9104      	str	r1, [sp, #16]
 800a05c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a060:	9105      	str	r1, [sp, #20]
 800a062:	9102      	str	r1, [sp, #8]
 800a064:	4905      	ldr	r1, [pc, #20]	; (800a07c <_vsiprintf_r+0x28>)
 800a066:	9103      	str	r1, [sp, #12]
 800a068:	4669      	mov	r1, sp
 800a06a:	f001 fe51 	bl	800bd10 <_svfiprintf_r>
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	2200      	movs	r2, #0
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	b01b      	add	sp, #108	; 0x6c
 800a076:	f85d fb04 	ldr.w	pc, [sp], #4
 800a07a:	bf00      	nop
 800a07c:	ffff0208 	.word	0xffff0208

0800a080 <vsiprintf>:
 800a080:	4613      	mov	r3, r2
 800a082:	460a      	mov	r2, r1
 800a084:	4601      	mov	r1, r0
 800a086:	4802      	ldr	r0, [pc, #8]	; (800a090 <vsiprintf+0x10>)
 800a088:	6800      	ldr	r0, [r0, #0]
 800a08a:	f7ff bfe3 	b.w	800a054 <_vsiprintf_r>
 800a08e:	bf00      	nop
 800a090:	2000000c 	.word	0x2000000c

0800a094 <__swbuf_r>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	460e      	mov	r6, r1
 800a098:	4614      	mov	r4, r2
 800a09a:	4605      	mov	r5, r0
 800a09c:	b118      	cbz	r0, 800a0a6 <__swbuf_r+0x12>
 800a09e:	6983      	ldr	r3, [r0, #24]
 800a0a0:	b90b      	cbnz	r3, 800a0a6 <__swbuf_r+0x12>
 800a0a2:	f001 f84d 	bl	800b140 <__sinit>
 800a0a6:	4b21      	ldr	r3, [pc, #132]	; (800a12c <__swbuf_r+0x98>)
 800a0a8:	429c      	cmp	r4, r3
 800a0aa:	d12b      	bne.n	800a104 <__swbuf_r+0x70>
 800a0ac:	686c      	ldr	r4, [r5, #4]
 800a0ae:	69a3      	ldr	r3, [r4, #24]
 800a0b0:	60a3      	str	r3, [r4, #8]
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	071a      	lsls	r2, r3, #28
 800a0b6:	d52f      	bpl.n	800a118 <__swbuf_r+0x84>
 800a0b8:	6923      	ldr	r3, [r4, #16]
 800a0ba:	b36b      	cbz	r3, 800a118 <__swbuf_r+0x84>
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	6820      	ldr	r0, [r4, #0]
 800a0c0:	1ac0      	subs	r0, r0, r3
 800a0c2:	6963      	ldr	r3, [r4, #20]
 800a0c4:	b2f6      	uxtb	r6, r6
 800a0c6:	4283      	cmp	r3, r0
 800a0c8:	4637      	mov	r7, r6
 800a0ca:	dc04      	bgt.n	800a0d6 <__swbuf_r+0x42>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f000 ffa2 	bl	800b018 <_fflush_r>
 800a0d4:	bb30      	cbnz	r0, 800a124 <__swbuf_r+0x90>
 800a0d6:	68a3      	ldr	r3, [r4, #8]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	60a3      	str	r3, [r4, #8]
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	6022      	str	r2, [r4, #0]
 800a0e2:	701e      	strb	r6, [r3, #0]
 800a0e4:	6963      	ldr	r3, [r4, #20]
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	4283      	cmp	r3, r0
 800a0ea:	d004      	beq.n	800a0f6 <__swbuf_r+0x62>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	07db      	lsls	r3, r3, #31
 800a0f0:	d506      	bpl.n	800a100 <__swbuf_r+0x6c>
 800a0f2:	2e0a      	cmp	r6, #10
 800a0f4:	d104      	bne.n	800a100 <__swbuf_r+0x6c>
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f000 ff8d 	bl	800b018 <_fflush_r>
 800a0fe:	b988      	cbnz	r0, 800a124 <__swbuf_r+0x90>
 800a100:	4638      	mov	r0, r7
 800a102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <__swbuf_r+0x9c>)
 800a106:	429c      	cmp	r4, r3
 800a108:	d101      	bne.n	800a10e <__swbuf_r+0x7a>
 800a10a:	68ac      	ldr	r4, [r5, #8]
 800a10c:	e7cf      	b.n	800a0ae <__swbuf_r+0x1a>
 800a10e:	4b09      	ldr	r3, [pc, #36]	; (800a134 <__swbuf_r+0xa0>)
 800a110:	429c      	cmp	r4, r3
 800a112:	bf08      	it	eq
 800a114:	68ec      	ldreq	r4, [r5, #12]
 800a116:	e7ca      	b.n	800a0ae <__swbuf_r+0x1a>
 800a118:	4621      	mov	r1, r4
 800a11a:	4628      	mov	r0, r5
 800a11c:	f000 f80c 	bl	800a138 <__swsetup_r>
 800a120:	2800      	cmp	r0, #0
 800a122:	d0cb      	beq.n	800a0bc <__swbuf_r+0x28>
 800a124:	f04f 37ff 	mov.w	r7, #4294967295
 800a128:	e7ea      	b.n	800a100 <__swbuf_r+0x6c>
 800a12a:	bf00      	nop
 800a12c:	0800c85c 	.word	0x0800c85c
 800a130:	0800c87c 	.word	0x0800c87c
 800a134:	0800c83c 	.word	0x0800c83c

0800a138 <__swsetup_r>:
 800a138:	4b32      	ldr	r3, [pc, #200]	; (800a204 <__swsetup_r+0xcc>)
 800a13a:	b570      	push	{r4, r5, r6, lr}
 800a13c:	681d      	ldr	r5, [r3, #0]
 800a13e:	4606      	mov	r6, r0
 800a140:	460c      	mov	r4, r1
 800a142:	b125      	cbz	r5, 800a14e <__swsetup_r+0x16>
 800a144:	69ab      	ldr	r3, [r5, #24]
 800a146:	b913      	cbnz	r3, 800a14e <__swsetup_r+0x16>
 800a148:	4628      	mov	r0, r5
 800a14a:	f000 fff9 	bl	800b140 <__sinit>
 800a14e:	4b2e      	ldr	r3, [pc, #184]	; (800a208 <__swsetup_r+0xd0>)
 800a150:	429c      	cmp	r4, r3
 800a152:	d10f      	bne.n	800a174 <__swsetup_r+0x3c>
 800a154:	686c      	ldr	r4, [r5, #4]
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a15c:	0719      	lsls	r1, r3, #28
 800a15e:	d42c      	bmi.n	800a1ba <__swsetup_r+0x82>
 800a160:	06dd      	lsls	r5, r3, #27
 800a162:	d411      	bmi.n	800a188 <__swsetup_r+0x50>
 800a164:	2309      	movs	r3, #9
 800a166:	6033      	str	r3, [r6, #0]
 800a168:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a16c:	81a3      	strh	r3, [r4, #12]
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	e03e      	b.n	800a1f2 <__swsetup_r+0xba>
 800a174:	4b25      	ldr	r3, [pc, #148]	; (800a20c <__swsetup_r+0xd4>)
 800a176:	429c      	cmp	r4, r3
 800a178:	d101      	bne.n	800a17e <__swsetup_r+0x46>
 800a17a:	68ac      	ldr	r4, [r5, #8]
 800a17c:	e7eb      	b.n	800a156 <__swsetup_r+0x1e>
 800a17e:	4b24      	ldr	r3, [pc, #144]	; (800a210 <__swsetup_r+0xd8>)
 800a180:	429c      	cmp	r4, r3
 800a182:	bf08      	it	eq
 800a184:	68ec      	ldreq	r4, [r5, #12]
 800a186:	e7e6      	b.n	800a156 <__swsetup_r+0x1e>
 800a188:	0758      	lsls	r0, r3, #29
 800a18a:	d512      	bpl.n	800a1b2 <__swsetup_r+0x7a>
 800a18c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a18e:	b141      	cbz	r1, 800a1a2 <__swsetup_r+0x6a>
 800a190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a194:	4299      	cmp	r1, r3
 800a196:	d002      	beq.n	800a19e <__swsetup_r+0x66>
 800a198:	4630      	mov	r0, r6
 800a19a:	f001 fc7d 	bl	800ba98 <_free_r>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	6063      	str	r3, [r4, #4]
 800a1ae:	6923      	ldr	r3, [r4, #16]
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	f043 0308 	orr.w	r3, r3, #8
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	b94b      	cbnz	r3, 800a1d2 <__swsetup_r+0x9a>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c8:	d003      	beq.n	800a1d2 <__swsetup_r+0x9a>
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f001 f881 	bl	800b2d4 <__smakebuf_r>
 800a1d2:	89a0      	ldrh	r0, [r4, #12]
 800a1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1d8:	f010 0301 	ands.w	r3, r0, #1
 800a1dc:	d00a      	beq.n	800a1f4 <__swsetup_r+0xbc>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60a3      	str	r3, [r4, #8]
 800a1e2:	6963      	ldr	r3, [r4, #20]
 800a1e4:	425b      	negs	r3, r3
 800a1e6:	61a3      	str	r3, [r4, #24]
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	b943      	cbnz	r3, 800a1fe <__swsetup_r+0xc6>
 800a1ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1f0:	d1ba      	bne.n	800a168 <__swsetup_r+0x30>
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	0781      	lsls	r1, r0, #30
 800a1f6:	bf58      	it	pl
 800a1f8:	6963      	ldrpl	r3, [r4, #20]
 800a1fa:	60a3      	str	r3, [r4, #8]
 800a1fc:	e7f4      	b.n	800a1e8 <__swsetup_r+0xb0>
 800a1fe:	2000      	movs	r0, #0
 800a200:	e7f7      	b.n	800a1f2 <__swsetup_r+0xba>
 800a202:	bf00      	nop
 800a204:	2000000c 	.word	0x2000000c
 800a208:	0800c85c 	.word	0x0800c85c
 800a20c:	0800c87c 	.word	0x0800c87c
 800a210:	0800c83c 	.word	0x0800c83c

0800a214 <quorem>:
 800a214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a218:	6903      	ldr	r3, [r0, #16]
 800a21a:	690c      	ldr	r4, [r1, #16]
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	4607      	mov	r7, r0
 800a220:	f2c0 8081 	blt.w	800a326 <quorem+0x112>
 800a224:	3c01      	subs	r4, #1
 800a226:	f101 0814 	add.w	r8, r1, #20
 800a22a:	f100 0514 	add.w	r5, r0, #20
 800a22e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a232:	9301      	str	r3, [sp, #4]
 800a234:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a238:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a23c:	3301      	adds	r3, #1
 800a23e:	429a      	cmp	r2, r3
 800a240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a248:	fbb2 f6f3 	udiv	r6, r2, r3
 800a24c:	d331      	bcc.n	800a2b2 <quorem+0x9e>
 800a24e:	f04f 0e00 	mov.w	lr, #0
 800a252:	4640      	mov	r0, r8
 800a254:	46ac      	mov	ip, r5
 800a256:	46f2      	mov	sl, lr
 800a258:	f850 2b04 	ldr.w	r2, [r0], #4
 800a25c:	b293      	uxth	r3, r2
 800a25e:	fb06 e303 	mla	r3, r6, r3, lr
 800a262:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a266:	b29b      	uxth	r3, r3
 800a268:	ebaa 0303 	sub.w	r3, sl, r3
 800a26c:	f8dc a000 	ldr.w	sl, [ip]
 800a270:	0c12      	lsrs	r2, r2, #16
 800a272:	fa13 f38a 	uxtah	r3, r3, sl
 800a276:	fb06 e202 	mla	r2, r6, r2, lr
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	9b00      	ldr	r3, [sp, #0]
 800a27e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a282:	b292      	uxth	r2, r2
 800a284:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a28c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a290:	4581      	cmp	r9, r0
 800a292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a296:	f84c 3b04 	str.w	r3, [ip], #4
 800a29a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a29e:	d2db      	bcs.n	800a258 <quorem+0x44>
 800a2a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2a4:	b92b      	cbnz	r3, 800a2b2 <quorem+0x9e>
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	429d      	cmp	r5, r3
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	d32e      	bcc.n	800a30e <quorem+0xfa>
 800a2b0:	613c      	str	r4, [r7, #16]
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f001 fad8 	bl	800b868 <__mcmp>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	db24      	blt.n	800a306 <quorem+0xf2>
 800a2bc:	3601      	adds	r6, #1
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f04f 0c00 	mov.w	ip, #0
 800a2c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a2cc:	b293      	uxth	r3, r2
 800a2ce:	ebac 0303 	sub.w	r3, ip, r3
 800a2d2:	0c12      	lsrs	r2, r2, #16
 800a2d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a2d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2e6:	45c1      	cmp	r9, r8
 800a2e8:	f840 3b04 	str.w	r3, [r0], #4
 800a2ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2f0:	d2e8      	bcs.n	800a2c4 <quorem+0xb0>
 800a2f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2fa:	b922      	cbnz	r2, 800a306 <quorem+0xf2>
 800a2fc:	3b04      	subs	r3, #4
 800a2fe:	429d      	cmp	r5, r3
 800a300:	461a      	mov	r2, r3
 800a302:	d30a      	bcc.n	800a31a <quorem+0x106>
 800a304:	613c      	str	r4, [r7, #16]
 800a306:	4630      	mov	r0, r6
 800a308:	b003      	add	sp, #12
 800a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	3b04      	subs	r3, #4
 800a312:	2a00      	cmp	r2, #0
 800a314:	d1cc      	bne.n	800a2b0 <quorem+0x9c>
 800a316:	3c01      	subs	r4, #1
 800a318:	e7c7      	b.n	800a2aa <quorem+0x96>
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	3b04      	subs	r3, #4
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d1f0      	bne.n	800a304 <quorem+0xf0>
 800a322:	3c01      	subs	r4, #1
 800a324:	e7eb      	b.n	800a2fe <quorem+0xea>
 800a326:	2000      	movs	r0, #0
 800a328:	e7ee      	b.n	800a308 <quorem+0xf4>
 800a32a:	0000      	movs	r0, r0
 800a32c:	0000      	movs	r0, r0
	...

0800a330 <_dtoa_r>:
 800a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	ed2d 8b04 	vpush	{d8-d9}
 800a338:	ec57 6b10 	vmov	r6, r7, d0
 800a33c:	b093      	sub	sp, #76	; 0x4c
 800a33e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a340:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a344:	9106      	str	r1, [sp, #24]
 800a346:	ee10 aa10 	vmov	sl, s0
 800a34a:	4604      	mov	r4, r0
 800a34c:	9209      	str	r2, [sp, #36]	; 0x24
 800a34e:	930c      	str	r3, [sp, #48]	; 0x30
 800a350:	46bb      	mov	fp, r7
 800a352:	b975      	cbnz	r5, 800a372 <_dtoa_r+0x42>
 800a354:	2010      	movs	r0, #16
 800a356:	f000 fffd 	bl	800b354 <malloc>
 800a35a:	4602      	mov	r2, r0
 800a35c:	6260      	str	r0, [r4, #36]	; 0x24
 800a35e:	b920      	cbnz	r0, 800a36a <_dtoa_r+0x3a>
 800a360:	4ba7      	ldr	r3, [pc, #668]	; (800a600 <_dtoa_r+0x2d0>)
 800a362:	21ea      	movs	r1, #234	; 0xea
 800a364:	48a7      	ldr	r0, [pc, #668]	; (800a604 <_dtoa_r+0x2d4>)
 800a366:	f001 ff93 	bl	800c290 <__assert_func>
 800a36a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a36e:	6005      	str	r5, [r0, #0]
 800a370:	60c5      	str	r5, [r0, #12]
 800a372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a374:	6819      	ldr	r1, [r3, #0]
 800a376:	b151      	cbz	r1, 800a38e <_dtoa_r+0x5e>
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	604a      	str	r2, [r1, #4]
 800a37c:	2301      	movs	r3, #1
 800a37e:	4093      	lsls	r3, r2
 800a380:	608b      	str	r3, [r1, #8]
 800a382:	4620      	mov	r0, r4
 800a384:	f001 f82e 	bl	800b3e4 <_Bfree>
 800a388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a38a:	2200      	movs	r2, #0
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	1e3b      	subs	r3, r7, #0
 800a390:	bfaa      	itet	ge
 800a392:	2300      	movge	r3, #0
 800a394:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a398:	f8c8 3000 	strge.w	r3, [r8]
 800a39c:	4b9a      	ldr	r3, [pc, #616]	; (800a608 <_dtoa_r+0x2d8>)
 800a39e:	bfbc      	itt	lt
 800a3a0:	2201      	movlt	r2, #1
 800a3a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a3a6:	ea33 030b 	bics.w	r3, r3, fp
 800a3aa:	d11b      	bne.n	800a3e4 <_dtoa_r+0xb4>
 800a3ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3b2:	6013      	str	r3, [r2, #0]
 800a3b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3b8:	4333      	orrs	r3, r6
 800a3ba:	f000 8592 	beq.w	800aee2 <_dtoa_r+0xbb2>
 800a3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c0:	b963      	cbnz	r3, 800a3dc <_dtoa_r+0xac>
 800a3c2:	4b92      	ldr	r3, [pc, #584]	; (800a60c <_dtoa_r+0x2dc>)
 800a3c4:	e022      	b.n	800a40c <_dtoa_r+0xdc>
 800a3c6:	4b92      	ldr	r3, [pc, #584]	; (800a610 <_dtoa_r+0x2e0>)
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	9801      	ldr	r0, [sp, #4]
 800a3d2:	b013      	add	sp, #76	; 0x4c
 800a3d4:	ecbd 8b04 	vpop	{d8-d9}
 800a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3dc:	4b8b      	ldr	r3, [pc, #556]	; (800a60c <_dtoa_r+0x2dc>)
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	3303      	adds	r3, #3
 800a3e2:	e7f3      	b.n	800a3cc <_dtoa_r+0x9c>
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	4659      	mov	r1, fp
 800a3ec:	f7f6 fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3f0:	ec4b ab19 	vmov	d9, sl, fp
 800a3f4:	4680      	mov	r8, r0
 800a3f6:	b158      	cbz	r0, 800a410 <_dtoa_r+0xe0>
 800a3f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 856b 	beq.w	800aedc <_dtoa_r+0xbac>
 800a406:	4883      	ldr	r0, [pc, #524]	; (800a614 <_dtoa_r+0x2e4>)
 800a408:	6018      	str	r0, [r3, #0]
 800a40a:	1e43      	subs	r3, r0, #1
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	e7df      	b.n	800a3d0 <_dtoa_r+0xa0>
 800a410:	ec4b ab10 	vmov	d0, sl, fp
 800a414:	aa10      	add	r2, sp, #64	; 0x40
 800a416:	a911      	add	r1, sp, #68	; 0x44
 800a418:	4620      	mov	r0, r4
 800a41a:	f001 facb 	bl	800b9b4 <__d2b>
 800a41e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a422:	ee08 0a10 	vmov	s16, r0
 800a426:	2d00      	cmp	r5, #0
 800a428:	f000 8084 	beq.w	800a534 <_dtoa_r+0x204>
 800a42c:	ee19 3a90 	vmov	r3, s19
 800a430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a434:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a438:	4656      	mov	r6, sl
 800a43a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a43e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a442:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a446:	4b74      	ldr	r3, [pc, #464]	; (800a618 <_dtoa_r+0x2e8>)
 800a448:	2200      	movs	r2, #0
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f5 ff1b 	bl	8000288 <__aeabi_dsub>
 800a452:	a365      	add	r3, pc, #404	; (adr r3, 800a5e8 <_dtoa_r+0x2b8>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	a364      	add	r3, pc, #400	; (adr r3, 800a5f0 <_dtoa_r+0x2c0>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f5 ff13 	bl	800028c <__adddf3>
 800a466:	4606      	mov	r6, r0
 800a468:	4628      	mov	r0, r5
 800a46a:	460f      	mov	r7, r1
 800a46c:	f7f6 f85a 	bl	8000524 <__aeabi_i2d>
 800a470:	a361      	add	r3, pc, #388	; (adr r3, 800a5f8 <_dtoa_r+0x2c8>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7f6 f8bf 	bl	80005f8 <__aeabi_dmul>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4630      	mov	r0, r6
 800a480:	4639      	mov	r1, r7
 800a482:	f7f5 ff03 	bl	800028c <__adddf3>
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	f7f6 fb65 	bl	8000b58 <__aeabi_d2iz>
 800a48e:	2200      	movs	r2, #0
 800a490:	9000      	str	r0, [sp, #0]
 800a492:	2300      	movs	r3, #0
 800a494:	4630      	mov	r0, r6
 800a496:	4639      	mov	r1, r7
 800a498:	f7f6 fb20 	bl	8000adc <__aeabi_dcmplt>
 800a49c:	b150      	cbz	r0, 800a4b4 <_dtoa_r+0x184>
 800a49e:	9800      	ldr	r0, [sp, #0]
 800a4a0:	f7f6 f840 	bl	8000524 <__aeabi_i2d>
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	463b      	mov	r3, r7
 800a4a8:	f7f6 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ac:	b910      	cbnz	r0, 800a4b4 <_dtoa_r+0x184>
 800a4ae:	9b00      	ldr	r3, [sp, #0]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	9b00      	ldr	r3, [sp, #0]
 800a4b6:	2b16      	cmp	r3, #22
 800a4b8:	d85a      	bhi.n	800a570 <_dtoa_r+0x240>
 800a4ba:	9a00      	ldr	r2, [sp, #0]
 800a4bc:	4b57      	ldr	r3, [pc, #348]	; (800a61c <_dtoa_r+0x2ec>)
 800a4be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	ec51 0b19 	vmov	r0, r1, d9
 800a4ca:	f7f6 fb07 	bl	8000adc <__aeabi_dcmplt>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d050      	beq.n	800a574 <_dtoa_r+0x244>
 800a4d2:	9b00      	ldr	r3, [sp, #0]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4de:	1b5d      	subs	r5, r3, r5
 800a4e0:	1e6b      	subs	r3, r5, #1
 800a4e2:	9305      	str	r3, [sp, #20]
 800a4e4:	bf45      	ittet	mi
 800a4e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a4ea:	9304      	strmi	r3, [sp, #16]
 800a4ec:	2300      	movpl	r3, #0
 800a4ee:	2300      	movmi	r3, #0
 800a4f0:	bf4c      	ite	mi
 800a4f2:	9305      	strmi	r3, [sp, #20]
 800a4f4:	9304      	strpl	r3, [sp, #16]
 800a4f6:	9b00      	ldr	r3, [sp, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	db3d      	blt.n	800a578 <_dtoa_r+0x248>
 800a4fc:	9b05      	ldr	r3, [sp, #20]
 800a4fe:	9a00      	ldr	r2, [sp, #0]
 800a500:	920a      	str	r2, [sp, #40]	; 0x28
 800a502:	4413      	add	r3, r2
 800a504:	9305      	str	r3, [sp, #20]
 800a506:	2300      	movs	r3, #0
 800a508:	9307      	str	r3, [sp, #28]
 800a50a:	9b06      	ldr	r3, [sp, #24]
 800a50c:	2b09      	cmp	r3, #9
 800a50e:	f200 8089 	bhi.w	800a624 <_dtoa_r+0x2f4>
 800a512:	2b05      	cmp	r3, #5
 800a514:	bfc4      	itt	gt
 800a516:	3b04      	subgt	r3, #4
 800a518:	9306      	strgt	r3, [sp, #24]
 800a51a:	9b06      	ldr	r3, [sp, #24]
 800a51c:	f1a3 0302 	sub.w	r3, r3, #2
 800a520:	bfcc      	ite	gt
 800a522:	2500      	movgt	r5, #0
 800a524:	2501      	movle	r5, #1
 800a526:	2b03      	cmp	r3, #3
 800a528:	f200 8087 	bhi.w	800a63a <_dtoa_r+0x30a>
 800a52c:	e8df f003 	tbb	[pc, r3]
 800a530:	59383a2d 	.word	0x59383a2d
 800a534:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a538:	441d      	add	r5, r3
 800a53a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a53e:	2b20      	cmp	r3, #32
 800a540:	bfc1      	itttt	gt
 800a542:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a546:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a54a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a54e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a552:	bfda      	itte	le
 800a554:	f1c3 0320 	rsble	r3, r3, #32
 800a558:	fa06 f003 	lslle.w	r0, r6, r3
 800a55c:	4318      	orrgt	r0, r3
 800a55e:	f7f5 ffd1 	bl	8000504 <__aeabi_ui2d>
 800a562:	2301      	movs	r3, #1
 800a564:	4606      	mov	r6, r0
 800a566:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a56a:	3d01      	subs	r5, #1
 800a56c:	930e      	str	r3, [sp, #56]	; 0x38
 800a56e:	e76a      	b.n	800a446 <_dtoa_r+0x116>
 800a570:	2301      	movs	r3, #1
 800a572:	e7b2      	b.n	800a4da <_dtoa_r+0x1aa>
 800a574:	900b      	str	r0, [sp, #44]	; 0x2c
 800a576:	e7b1      	b.n	800a4dc <_dtoa_r+0x1ac>
 800a578:	9b04      	ldr	r3, [sp, #16]
 800a57a:	9a00      	ldr	r2, [sp, #0]
 800a57c:	1a9b      	subs	r3, r3, r2
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	4253      	negs	r3, r2
 800a582:	9307      	str	r3, [sp, #28]
 800a584:	2300      	movs	r3, #0
 800a586:	930a      	str	r3, [sp, #40]	; 0x28
 800a588:	e7bf      	b.n	800a50a <_dtoa_r+0x1da>
 800a58a:	2300      	movs	r3, #0
 800a58c:	9308      	str	r3, [sp, #32]
 800a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	dc55      	bgt.n	800a640 <_dtoa_r+0x310>
 800a594:	2301      	movs	r3, #1
 800a596:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a59a:	461a      	mov	r2, r3
 800a59c:	9209      	str	r2, [sp, #36]	; 0x24
 800a59e:	e00c      	b.n	800a5ba <_dtoa_r+0x28a>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e7f3      	b.n	800a58c <_dtoa_r+0x25c>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	9b00      	ldr	r3, [sp, #0]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	9302      	str	r3, [sp, #8]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	9303      	str	r3, [sp, #12]
 800a5b6:	bfb8      	it	lt
 800a5b8:	2301      	movlt	r3, #1
 800a5ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5bc:	2200      	movs	r2, #0
 800a5be:	6042      	str	r2, [r0, #4]
 800a5c0:	2204      	movs	r2, #4
 800a5c2:	f102 0614 	add.w	r6, r2, #20
 800a5c6:	429e      	cmp	r6, r3
 800a5c8:	6841      	ldr	r1, [r0, #4]
 800a5ca:	d93d      	bls.n	800a648 <_dtoa_r+0x318>
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f000 fec9 	bl	800b364 <_Balloc>
 800a5d2:	9001      	str	r0, [sp, #4]
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d13b      	bne.n	800a650 <_dtoa_r+0x320>
 800a5d8:	4b11      	ldr	r3, [pc, #68]	; (800a620 <_dtoa_r+0x2f0>)
 800a5da:	4602      	mov	r2, r0
 800a5dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a5e0:	e6c0      	b.n	800a364 <_dtoa_r+0x34>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e7df      	b.n	800a5a6 <_dtoa_r+0x276>
 800a5e6:	bf00      	nop
 800a5e8:	636f4361 	.word	0x636f4361
 800a5ec:	3fd287a7 	.word	0x3fd287a7
 800a5f0:	8b60c8b3 	.word	0x8b60c8b3
 800a5f4:	3fc68a28 	.word	0x3fc68a28
 800a5f8:	509f79fb 	.word	0x509f79fb
 800a5fc:	3fd34413 	.word	0x3fd34413
 800a600:	0800c7b9 	.word	0x0800c7b9
 800a604:	0800c7d0 	.word	0x0800c7d0
 800a608:	7ff00000 	.word	0x7ff00000
 800a60c:	0800c7b5 	.word	0x0800c7b5
 800a610:	0800c7ac 	.word	0x0800c7ac
 800a614:	0800c789 	.word	0x0800c789
 800a618:	3ff80000 	.word	0x3ff80000
 800a61c:	0800c920 	.word	0x0800c920
 800a620:	0800c82b 	.word	0x0800c82b
 800a624:	2501      	movs	r5, #1
 800a626:	2300      	movs	r3, #0
 800a628:	9306      	str	r3, [sp, #24]
 800a62a:	9508      	str	r5, [sp, #32]
 800a62c:	f04f 33ff 	mov.w	r3, #4294967295
 800a630:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a634:	2200      	movs	r2, #0
 800a636:	2312      	movs	r3, #18
 800a638:	e7b0      	b.n	800a59c <_dtoa_r+0x26c>
 800a63a:	2301      	movs	r3, #1
 800a63c:	9308      	str	r3, [sp, #32]
 800a63e:	e7f5      	b.n	800a62c <_dtoa_r+0x2fc>
 800a640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a642:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a646:	e7b8      	b.n	800a5ba <_dtoa_r+0x28a>
 800a648:	3101      	adds	r1, #1
 800a64a:	6041      	str	r1, [r0, #4]
 800a64c:	0052      	lsls	r2, r2, #1
 800a64e:	e7b8      	b.n	800a5c2 <_dtoa_r+0x292>
 800a650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a652:	9a01      	ldr	r2, [sp, #4]
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	9b03      	ldr	r3, [sp, #12]
 800a658:	2b0e      	cmp	r3, #14
 800a65a:	f200 809d 	bhi.w	800a798 <_dtoa_r+0x468>
 800a65e:	2d00      	cmp	r5, #0
 800a660:	f000 809a 	beq.w	800a798 <_dtoa_r+0x468>
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	dd32      	ble.n	800a6d0 <_dtoa_r+0x3a0>
 800a66a:	4ab7      	ldr	r2, [pc, #732]	; (800a948 <_dtoa_r+0x618>)
 800a66c:	f003 030f 	and.w	r3, r3, #15
 800a670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a674:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a678:	9b00      	ldr	r3, [sp, #0]
 800a67a:	05d8      	lsls	r0, r3, #23
 800a67c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a680:	d516      	bpl.n	800a6b0 <_dtoa_r+0x380>
 800a682:	4bb2      	ldr	r3, [pc, #712]	; (800a94c <_dtoa_r+0x61c>)
 800a684:	ec51 0b19 	vmov	r0, r1, d9
 800a688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a68c:	f7f6 f8de 	bl	800084c <__aeabi_ddiv>
 800a690:	f007 070f 	and.w	r7, r7, #15
 800a694:	4682      	mov	sl, r0
 800a696:	468b      	mov	fp, r1
 800a698:	2503      	movs	r5, #3
 800a69a:	4eac      	ldr	r6, [pc, #688]	; (800a94c <_dtoa_r+0x61c>)
 800a69c:	b957      	cbnz	r7, 800a6b4 <_dtoa_r+0x384>
 800a69e:	4642      	mov	r2, r8
 800a6a0:	464b      	mov	r3, r9
 800a6a2:	4650      	mov	r0, sl
 800a6a4:	4659      	mov	r1, fp
 800a6a6:	f7f6 f8d1 	bl	800084c <__aeabi_ddiv>
 800a6aa:	4682      	mov	sl, r0
 800a6ac:	468b      	mov	fp, r1
 800a6ae:	e028      	b.n	800a702 <_dtoa_r+0x3d2>
 800a6b0:	2502      	movs	r5, #2
 800a6b2:	e7f2      	b.n	800a69a <_dtoa_r+0x36a>
 800a6b4:	07f9      	lsls	r1, r7, #31
 800a6b6:	d508      	bpl.n	800a6ca <_dtoa_r+0x39a>
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6c0:	f7f5 ff9a 	bl	80005f8 <__aeabi_dmul>
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	4689      	mov	r9, r1
 800a6ca:	107f      	asrs	r7, r7, #1
 800a6cc:	3608      	adds	r6, #8
 800a6ce:	e7e5      	b.n	800a69c <_dtoa_r+0x36c>
 800a6d0:	f000 809b 	beq.w	800a80a <_dtoa_r+0x4da>
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	4f9d      	ldr	r7, [pc, #628]	; (800a94c <_dtoa_r+0x61c>)
 800a6d8:	425e      	negs	r6, r3
 800a6da:	4b9b      	ldr	r3, [pc, #620]	; (800a948 <_dtoa_r+0x618>)
 800a6dc:	f006 020f 	and.w	r2, r6, #15
 800a6e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	ec51 0b19 	vmov	r0, r1, d9
 800a6ec:	f7f5 ff84 	bl	80005f8 <__aeabi_dmul>
 800a6f0:	1136      	asrs	r6, r6, #4
 800a6f2:	4682      	mov	sl, r0
 800a6f4:	468b      	mov	fp, r1
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	2502      	movs	r5, #2
 800a6fa:	2e00      	cmp	r6, #0
 800a6fc:	d17a      	bne.n	800a7f4 <_dtoa_r+0x4c4>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1d3      	bne.n	800a6aa <_dtoa_r+0x37a>
 800a702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8082 	beq.w	800a80e <_dtoa_r+0x4de>
 800a70a:	4b91      	ldr	r3, [pc, #580]	; (800a950 <_dtoa_r+0x620>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	4650      	mov	r0, sl
 800a710:	4659      	mov	r1, fp
 800a712:	f7f6 f9e3 	bl	8000adc <__aeabi_dcmplt>
 800a716:	2800      	cmp	r0, #0
 800a718:	d079      	beq.n	800a80e <_dtoa_r+0x4de>
 800a71a:	9b03      	ldr	r3, [sp, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d076      	beq.n	800a80e <_dtoa_r+0x4de>
 800a720:	9b02      	ldr	r3, [sp, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	dd36      	ble.n	800a794 <_dtoa_r+0x464>
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	4650      	mov	r0, sl
 800a72a:	4659      	mov	r1, fp
 800a72c:	1e5f      	subs	r7, r3, #1
 800a72e:	2200      	movs	r2, #0
 800a730:	4b88      	ldr	r3, [pc, #544]	; (800a954 <_dtoa_r+0x624>)
 800a732:	f7f5 ff61 	bl	80005f8 <__aeabi_dmul>
 800a736:	9e02      	ldr	r6, [sp, #8]
 800a738:	4682      	mov	sl, r0
 800a73a:	468b      	mov	fp, r1
 800a73c:	3501      	adds	r5, #1
 800a73e:	4628      	mov	r0, r5
 800a740:	f7f5 fef0 	bl	8000524 <__aeabi_i2d>
 800a744:	4652      	mov	r2, sl
 800a746:	465b      	mov	r3, fp
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	4b82      	ldr	r3, [pc, #520]	; (800a958 <_dtoa_r+0x628>)
 800a74e:	2200      	movs	r2, #0
 800a750:	f7f5 fd9c 	bl	800028c <__adddf3>
 800a754:	46d0      	mov	r8, sl
 800a756:	46d9      	mov	r9, fp
 800a758:	4682      	mov	sl, r0
 800a75a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a75e:	2e00      	cmp	r6, #0
 800a760:	d158      	bne.n	800a814 <_dtoa_r+0x4e4>
 800a762:	4b7e      	ldr	r3, [pc, #504]	; (800a95c <_dtoa_r+0x62c>)
 800a764:	2200      	movs	r2, #0
 800a766:	4640      	mov	r0, r8
 800a768:	4649      	mov	r1, r9
 800a76a:	f7f5 fd8d 	bl	8000288 <__aeabi_dsub>
 800a76e:	4652      	mov	r2, sl
 800a770:	465b      	mov	r3, fp
 800a772:	4680      	mov	r8, r0
 800a774:	4689      	mov	r9, r1
 800a776:	f7f6 f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	f040 8295 	bne.w	800acaa <_dtoa_r+0x97a>
 800a780:	4652      	mov	r2, sl
 800a782:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a786:	4640      	mov	r0, r8
 800a788:	4649      	mov	r1, r9
 800a78a:	f7f6 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800a78e:	2800      	cmp	r0, #0
 800a790:	f040 8289 	bne.w	800aca6 <_dtoa_r+0x976>
 800a794:	ec5b ab19 	vmov	sl, fp, d9
 800a798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f2c0 8148 	blt.w	800aa30 <_dtoa_r+0x700>
 800a7a0:	9a00      	ldr	r2, [sp, #0]
 800a7a2:	2a0e      	cmp	r2, #14
 800a7a4:	f300 8144 	bgt.w	800aa30 <_dtoa_r+0x700>
 800a7a8:	4b67      	ldr	r3, [pc, #412]	; (800a948 <_dtoa_r+0x618>)
 800a7aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f280 80d5 	bge.w	800a964 <_dtoa_r+0x634>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f300 80d1 	bgt.w	800a964 <_dtoa_r+0x634>
 800a7c2:	f040 826f 	bne.w	800aca4 <_dtoa_r+0x974>
 800a7c6:	4b65      	ldr	r3, [pc, #404]	; (800a95c <_dtoa_r+0x62c>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	f7f5 ff13 	bl	80005f8 <__aeabi_dmul>
 800a7d2:	4652      	mov	r2, sl
 800a7d4:	465b      	mov	r3, fp
 800a7d6:	f7f6 f995 	bl	8000b04 <__aeabi_dcmpge>
 800a7da:	9e03      	ldr	r6, [sp, #12]
 800a7dc:	4637      	mov	r7, r6
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f040 8245 	bne.w	800ac6e <_dtoa_r+0x93e>
 800a7e4:	9d01      	ldr	r5, [sp, #4]
 800a7e6:	2331      	movs	r3, #49	; 0x31
 800a7e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a7ec:	9b00      	ldr	r3, [sp, #0]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	e240      	b.n	800ac76 <_dtoa_r+0x946>
 800a7f4:	07f2      	lsls	r2, r6, #31
 800a7f6:	d505      	bpl.n	800a804 <_dtoa_r+0x4d4>
 800a7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7fc:	f7f5 fefc 	bl	80005f8 <__aeabi_dmul>
 800a800:	3501      	adds	r5, #1
 800a802:	2301      	movs	r3, #1
 800a804:	1076      	asrs	r6, r6, #1
 800a806:	3708      	adds	r7, #8
 800a808:	e777      	b.n	800a6fa <_dtoa_r+0x3ca>
 800a80a:	2502      	movs	r5, #2
 800a80c:	e779      	b.n	800a702 <_dtoa_r+0x3d2>
 800a80e:	9f00      	ldr	r7, [sp, #0]
 800a810:	9e03      	ldr	r6, [sp, #12]
 800a812:	e794      	b.n	800a73e <_dtoa_r+0x40e>
 800a814:	9901      	ldr	r1, [sp, #4]
 800a816:	4b4c      	ldr	r3, [pc, #304]	; (800a948 <_dtoa_r+0x618>)
 800a818:	4431      	add	r1, r6
 800a81a:	910d      	str	r1, [sp, #52]	; 0x34
 800a81c:	9908      	ldr	r1, [sp, #32]
 800a81e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a826:	2900      	cmp	r1, #0
 800a828:	d043      	beq.n	800a8b2 <_dtoa_r+0x582>
 800a82a:	494d      	ldr	r1, [pc, #308]	; (800a960 <_dtoa_r+0x630>)
 800a82c:	2000      	movs	r0, #0
 800a82e:	f7f6 f80d 	bl	800084c <__aeabi_ddiv>
 800a832:	4652      	mov	r2, sl
 800a834:	465b      	mov	r3, fp
 800a836:	f7f5 fd27 	bl	8000288 <__aeabi_dsub>
 800a83a:	9d01      	ldr	r5, [sp, #4]
 800a83c:	4682      	mov	sl, r0
 800a83e:	468b      	mov	fp, r1
 800a840:	4649      	mov	r1, r9
 800a842:	4640      	mov	r0, r8
 800a844:	f7f6 f988 	bl	8000b58 <__aeabi_d2iz>
 800a848:	4606      	mov	r6, r0
 800a84a:	f7f5 fe6b 	bl	8000524 <__aeabi_i2d>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4640      	mov	r0, r8
 800a854:	4649      	mov	r1, r9
 800a856:	f7f5 fd17 	bl	8000288 <__aeabi_dsub>
 800a85a:	3630      	adds	r6, #48	; 0x30
 800a85c:	f805 6b01 	strb.w	r6, [r5], #1
 800a860:	4652      	mov	r2, sl
 800a862:	465b      	mov	r3, fp
 800a864:	4680      	mov	r8, r0
 800a866:	4689      	mov	r9, r1
 800a868:	f7f6 f938 	bl	8000adc <__aeabi_dcmplt>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d163      	bne.n	800a938 <_dtoa_r+0x608>
 800a870:	4642      	mov	r2, r8
 800a872:	464b      	mov	r3, r9
 800a874:	4936      	ldr	r1, [pc, #216]	; (800a950 <_dtoa_r+0x620>)
 800a876:	2000      	movs	r0, #0
 800a878:	f7f5 fd06 	bl	8000288 <__aeabi_dsub>
 800a87c:	4652      	mov	r2, sl
 800a87e:	465b      	mov	r3, fp
 800a880:	f7f6 f92c 	bl	8000adc <__aeabi_dcmplt>
 800a884:	2800      	cmp	r0, #0
 800a886:	f040 80b5 	bne.w	800a9f4 <_dtoa_r+0x6c4>
 800a88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a88c:	429d      	cmp	r5, r3
 800a88e:	d081      	beq.n	800a794 <_dtoa_r+0x464>
 800a890:	4b30      	ldr	r3, [pc, #192]	; (800a954 <_dtoa_r+0x624>)
 800a892:	2200      	movs	r2, #0
 800a894:	4650      	mov	r0, sl
 800a896:	4659      	mov	r1, fp
 800a898:	f7f5 feae 	bl	80005f8 <__aeabi_dmul>
 800a89c:	4b2d      	ldr	r3, [pc, #180]	; (800a954 <_dtoa_r+0x624>)
 800a89e:	4682      	mov	sl, r0
 800a8a0:	468b      	mov	fp, r1
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f7f5 fea6 	bl	80005f8 <__aeabi_dmul>
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	4689      	mov	r9, r1
 800a8b0:	e7c6      	b.n	800a840 <_dtoa_r+0x510>
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	4659      	mov	r1, fp
 800a8b6:	f7f5 fe9f 	bl	80005f8 <__aeabi_dmul>
 800a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8bc:	9d01      	ldr	r5, [sp, #4]
 800a8be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	468b      	mov	fp, r1
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7f6 f946 	bl	8000b58 <__aeabi_d2iz>
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	f7f5 fe29 	bl	8000524 <__aeabi_i2d>
 800a8d2:	3630      	adds	r6, #48	; 0x30
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	4640      	mov	r0, r8
 800a8da:	4649      	mov	r1, r9
 800a8dc:	f7f5 fcd4 	bl	8000288 <__aeabi_dsub>
 800a8e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a8e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8e6:	429d      	cmp	r5, r3
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	4689      	mov	r9, r1
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	d124      	bne.n	800a93c <_dtoa_r+0x60c>
 800a8f2:	4b1b      	ldr	r3, [pc, #108]	; (800a960 <_dtoa_r+0x630>)
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	4659      	mov	r1, fp
 800a8f8:	f7f5 fcc8 	bl	800028c <__adddf3>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4640      	mov	r0, r8
 800a902:	4649      	mov	r1, r9
 800a904:	f7f6 f908 	bl	8000b18 <__aeabi_dcmpgt>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d173      	bne.n	800a9f4 <_dtoa_r+0x6c4>
 800a90c:	4652      	mov	r2, sl
 800a90e:	465b      	mov	r3, fp
 800a910:	4913      	ldr	r1, [pc, #76]	; (800a960 <_dtoa_r+0x630>)
 800a912:	2000      	movs	r0, #0
 800a914:	f7f5 fcb8 	bl	8000288 <__aeabi_dsub>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4640      	mov	r0, r8
 800a91e:	4649      	mov	r1, r9
 800a920:	f7f6 f8dc 	bl	8000adc <__aeabi_dcmplt>
 800a924:	2800      	cmp	r0, #0
 800a926:	f43f af35 	beq.w	800a794 <_dtoa_r+0x464>
 800a92a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a92c:	1e6b      	subs	r3, r5, #1
 800a92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a930:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a934:	2b30      	cmp	r3, #48	; 0x30
 800a936:	d0f8      	beq.n	800a92a <_dtoa_r+0x5fa>
 800a938:	9700      	str	r7, [sp, #0]
 800a93a:	e049      	b.n	800a9d0 <_dtoa_r+0x6a0>
 800a93c:	4b05      	ldr	r3, [pc, #20]	; (800a954 <_dtoa_r+0x624>)
 800a93e:	f7f5 fe5b 	bl	80005f8 <__aeabi_dmul>
 800a942:	4680      	mov	r8, r0
 800a944:	4689      	mov	r9, r1
 800a946:	e7bd      	b.n	800a8c4 <_dtoa_r+0x594>
 800a948:	0800c920 	.word	0x0800c920
 800a94c:	0800c8f8 	.word	0x0800c8f8
 800a950:	3ff00000 	.word	0x3ff00000
 800a954:	40240000 	.word	0x40240000
 800a958:	401c0000 	.word	0x401c0000
 800a95c:	40140000 	.word	0x40140000
 800a960:	3fe00000 	.word	0x3fe00000
 800a964:	9d01      	ldr	r5, [sp, #4]
 800a966:	4656      	mov	r6, sl
 800a968:	465f      	mov	r7, fp
 800a96a:	4642      	mov	r2, r8
 800a96c:	464b      	mov	r3, r9
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 ff6b 	bl	800084c <__aeabi_ddiv>
 800a976:	f7f6 f8ef 	bl	8000b58 <__aeabi_d2iz>
 800a97a:	4682      	mov	sl, r0
 800a97c:	f7f5 fdd2 	bl	8000524 <__aeabi_i2d>
 800a980:	4642      	mov	r2, r8
 800a982:	464b      	mov	r3, r9
 800a984:	f7f5 fe38 	bl	80005f8 <__aeabi_dmul>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a994:	f7f5 fc78 	bl	8000288 <__aeabi_dsub>
 800a998:	f805 6b01 	strb.w	r6, [r5], #1
 800a99c:	9e01      	ldr	r6, [sp, #4]
 800a99e:	9f03      	ldr	r7, [sp, #12]
 800a9a0:	1bae      	subs	r6, r5, r6
 800a9a2:	42b7      	cmp	r7, r6
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	d135      	bne.n	800aa16 <_dtoa_r+0x6e6>
 800a9aa:	f7f5 fc6f 	bl	800028c <__adddf3>
 800a9ae:	4642      	mov	r2, r8
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460f      	mov	r7, r1
 800a9b6:	f7f6 f8af 	bl	8000b18 <__aeabi_dcmpgt>
 800a9ba:	b9d0      	cbnz	r0, 800a9f2 <_dtoa_r+0x6c2>
 800a9bc:	4642      	mov	r2, r8
 800a9be:	464b      	mov	r3, r9
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f7f6 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9c8:	b110      	cbz	r0, 800a9d0 <_dtoa_r+0x6a0>
 800a9ca:	f01a 0f01 	tst.w	sl, #1
 800a9ce:	d110      	bne.n	800a9f2 <_dtoa_r+0x6c2>
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	ee18 1a10 	vmov	r1, s16
 800a9d6:	f000 fd05 	bl	800b3e4 <_Bfree>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	9800      	ldr	r0, [sp, #0]
 800a9de:	702b      	strb	r3, [r5, #0]
 800a9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	6018      	str	r0, [r3, #0]
 800a9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f43f acf1 	beq.w	800a3d0 <_dtoa_r+0xa0>
 800a9ee:	601d      	str	r5, [r3, #0]
 800a9f0:	e4ee      	b.n	800a3d0 <_dtoa_r+0xa0>
 800a9f2:	9f00      	ldr	r7, [sp, #0]
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	461d      	mov	r5, r3
 800a9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9fc:	2a39      	cmp	r2, #57	; 0x39
 800a9fe:	d106      	bne.n	800aa0e <_dtoa_r+0x6de>
 800aa00:	9a01      	ldr	r2, [sp, #4]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d1f7      	bne.n	800a9f6 <_dtoa_r+0x6c6>
 800aa06:	9901      	ldr	r1, [sp, #4]
 800aa08:	2230      	movs	r2, #48	; 0x30
 800aa0a:	3701      	adds	r7, #1
 800aa0c:	700a      	strb	r2, [r1, #0]
 800aa0e:	781a      	ldrb	r2, [r3, #0]
 800aa10:	3201      	adds	r2, #1
 800aa12:	701a      	strb	r2, [r3, #0]
 800aa14:	e790      	b.n	800a938 <_dtoa_r+0x608>
 800aa16:	4ba6      	ldr	r3, [pc, #664]	; (800acb0 <_dtoa_r+0x980>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f7f5 fded 	bl	80005f8 <__aeabi_dmul>
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2300      	movs	r3, #0
 800aa22:	4606      	mov	r6, r0
 800aa24:	460f      	mov	r7, r1
 800aa26:	f7f6 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d09d      	beq.n	800a96a <_dtoa_r+0x63a>
 800aa2e:	e7cf      	b.n	800a9d0 <_dtoa_r+0x6a0>
 800aa30:	9a08      	ldr	r2, [sp, #32]
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	f000 80d7 	beq.w	800abe6 <_dtoa_r+0x8b6>
 800aa38:	9a06      	ldr	r2, [sp, #24]
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	f300 80ba 	bgt.w	800abb4 <_dtoa_r+0x884>
 800aa40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa42:	2a00      	cmp	r2, #0
 800aa44:	f000 80b2 	beq.w	800abac <_dtoa_r+0x87c>
 800aa48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa4c:	9e07      	ldr	r6, [sp, #28]
 800aa4e:	9d04      	ldr	r5, [sp, #16]
 800aa50:	9a04      	ldr	r2, [sp, #16]
 800aa52:	441a      	add	r2, r3
 800aa54:	9204      	str	r2, [sp, #16]
 800aa56:	9a05      	ldr	r2, [sp, #20]
 800aa58:	2101      	movs	r1, #1
 800aa5a:	441a      	add	r2, r3
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	9205      	str	r2, [sp, #20]
 800aa60:	f000 fd78 	bl	800b554 <__i2b>
 800aa64:	4607      	mov	r7, r0
 800aa66:	2d00      	cmp	r5, #0
 800aa68:	dd0c      	ble.n	800aa84 <_dtoa_r+0x754>
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dd09      	ble.n	800aa84 <_dtoa_r+0x754>
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	9a04      	ldr	r2, [sp, #16]
 800aa74:	bfa8      	it	ge
 800aa76:	462b      	movge	r3, r5
 800aa78:	1ad2      	subs	r2, r2, r3
 800aa7a:	9204      	str	r2, [sp, #16]
 800aa7c:	9a05      	ldr	r2, [sp, #20]
 800aa7e:	1aed      	subs	r5, r5, r3
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	9305      	str	r3, [sp, #20]
 800aa84:	9b07      	ldr	r3, [sp, #28]
 800aa86:	b31b      	cbz	r3, 800aad0 <_dtoa_r+0x7a0>
 800aa88:	9b08      	ldr	r3, [sp, #32]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 80af 	beq.w	800abee <_dtoa_r+0x8be>
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	dd13      	ble.n	800aabc <_dtoa_r+0x78c>
 800aa94:	4639      	mov	r1, r7
 800aa96:	4632      	mov	r2, r6
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 fe1b 	bl	800b6d4 <__pow5mult>
 800aa9e:	ee18 2a10 	vmov	r2, s16
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 fd6a 	bl	800b580 <__multiply>
 800aaac:	ee18 1a10 	vmov	r1, s16
 800aab0:	4680      	mov	r8, r0
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 fc96 	bl	800b3e4 <_Bfree>
 800aab8:	ee08 8a10 	vmov	s16, r8
 800aabc:	9b07      	ldr	r3, [sp, #28]
 800aabe:	1b9a      	subs	r2, r3, r6
 800aac0:	d006      	beq.n	800aad0 <_dtoa_r+0x7a0>
 800aac2:	ee18 1a10 	vmov	r1, s16
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fe04 	bl	800b6d4 <__pow5mult>
 800aacc:	ee08 0a10 	vmov	s16, r0
 800aad0:	2101      	movs	r1, #1
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fd3e 	bl	800b554 <__i2b>
 800aad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	4606      	mov	r6, r0
 800aade:	f340 8088 	ble.w	800abf2 <_dtoa_r+0x8c2>
 800aae2:	461a      	mov	r2, r3
 800aae4:	4601      	mov	r1, r0
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fdf4 	bl	800b6d4 <__pow5mult>
 800aaec:	9b06      	ldr	r3, [sp, #24]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	f340 8081 	ble.w	800abf8 <_dtoa_r+0x8c8>
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	6933      	ldr	r3, [r6, #16]
 800aafc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab00:	6918      	ldr	r0, [r3, #16]
 800ab02:	f000 fcd7 	bl	800b4b4 <__hi0bits>
 800ab06:	f1c0 0020 	rsb	r0, r0, #32
 800ab0a:	9b05      	ldr	r3, [sp, #20]
 800ab0c:	4418      	add	r0, r3
 800ab0e:	f010 001f 	ands.w	r0, r0, #31
 800ab12:	f000 8092 	beq.w	800ac3a <_dtoa_r+0x90a>
 800ab16:	f1c0 0320 	rsb	r3, r0, #32
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	f340 808a 	ble.w	800ac34 <_dtoa_r+0x904>
 800ab20:	f1c0 001c 	rsb	r0, r0, #28
 800ab24:	9b04      	ldr	r3, [sp, #16]
 800ab26:	4403      	add	r3, r0
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	4403      	add	r3, r0
 800ab2e:	4405      	add	r5, r0
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	9b04      	ldr	r3, [sp, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dd07      	ble.n	800ab48 <_dtoa_r+0x818>
 800ab38:	ee18 1a10 	vmov	r1, s16
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 fe22 	bl	800b788 <__lshift>
 800ab44:	ee08 0a10 	vmov	s16, r0
 800ab48:	9b05      	ldr	r3, [sp, #20]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dd05      	ble.n	800ab5a <_dtoa_r+0x82a>
 800ab4e:	4631      	mov	r1, r6
 800ab50:	461a      	mov	r2, r3
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fe18 	bl	800b788 <__lshift>
 800ab58:	4606      	mov	r6, r0
 800ab5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d06e      	beq.n	800ac3e <_dtoa_r+0x90e>
 800ab60:	ee18 0a10 	vmov	r0, s16
 800ab64:	4631      	mov	r1, r6
 800ab66:	f000 fe7f 	bl	800b868 <__mcmp>
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	da67      	bge.n	800ac3e <_dtoa_r+0x90e>
 800ab6e:	9b00      	ldr	r3, [sp, #0]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	ee18 1a10 	vmov	r1, s16
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	220a      	movs	r2, #10
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fc53 	bl	800b428 <__multadd>
 800ab82:	9b08      	ldr	r3, [sp, #32]
 800ab84:	ee08 0a10 	vmov	s16, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 81b1 	beq.w	800aef0 <_dtoa_r+0xbc0>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4639      	mov	r1, r7
 800ab92:	220a      	movs	r2, #10
 800ab94:	4620      	mov	r0, r4
 800ab96:	f000 fc47 	bl	800b428 <__multadd>
 800ab9a:	9b02      	ldr	r3, [sp, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	4607      	mov	r7, r0
 800aba0:	f300 808e 	bgt.w	800acc0 <_dtoa_r+0x990>
 800aba4:	9b06      	ldr	r3, [sp, #24]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	dc51      	bgt.n	800ac4e <_dtoa_r+0x91e>
 800abaa:	e089      	b.n	800acc0 <_dtoa_r+0x990>
 800abac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abb2:	e74b      	b.n	800aa4c <_dtoa_r+0x71c>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	1e5e      	subs	r6, r3, #1
 800abb8:	9b07      	ldr	r3, [sp, #28]
 800abba:	42b3      	cmp	r3, r6
 800abbc:	bfbf      	itttt	lt
 800abbe:	9b07      	ldrlt	r3, [sp, #28]
 800abc0:	9607      	strlt	r6, [sp, #28]
 800abc2:	1af2      	sublt	r2, r6, r3
 800abc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abc6:	bfb6      	itet	lt
 800abc8:	189b      	addlt	r3, r3, r2
 800abca:	1b9e      	subge	r6, r3, r6
 800abcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800abce:	9b03      	ldr	r3, [sp, #12]
 800abd0:	bfb8      	it	lt
 800abd2:	2600      	movlt	r6, #0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	bfb7      	itett	lt
 800abd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800abdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800abe0:	1a9d      	sublt	r5, r3, r2
 800abe2:	2300      	movlt	r3, #0
 800abe4:	e734      	b.n	800aa50 <_dtoa_r+0x720>
 800abe6:	9e07      	ldr	r6, [sp, #28]
 800abe8:	9d04      	ldr	r5, [sp, #16]
 800abea:	9f08      	ldr	r7, [sp, #32]
 800abec:	e73b      	b.n	800aa66 <_dtoa_r+0x736>
 800abee:	9a07      	ldr	r2, [sp, #28]
 800abf0:	e767      	b.n	800aac2 <_dtoa_r+0x792>
 800abf2:	9b06      	ldr	r3, [sp, #24]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	dc18      	bgt.n	800ac2a <_dtoa_r+0x8fa>
 800abf8:	f1ba 0f00 	cmp.w	sl, #0
 800abfc:	d115      	bne.n	800ac2a <_dtoa_r+0x8fa>
 800abfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac02:	b993      	cbnz	r3, 800ac2a <_dtoa_r+0x8fa>
 800ac04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac08:	0d1b      	lsrs	r3, r3, #20
 800ac0a:	051b      	lsls	r3, r3, #20
 800ac0c:	b183      	cbz	r3, 800ac30 <_dtoa_r+0x900>
 800ac0e:	9b04      	ldr	r3, [sp, #16]
 800ac10:	3301      	adds	r3, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	9b05      	ldr	r3, [sp, #20]
 800ac16:	3301      	adds	r3, #1
 800ac18:	9305      	str	r3, [sp, #20]
 800ac1a:	f04f 0801 	mov.w	r8, #1
 800ac1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f47f af6a 	bne.w	800aafa <_dtoa_r+0x7ca>
 800ac26:	2001      	movs	r0, #1
 800ac28:	e76f      	b.n	800ab0a <_dtoa_r+0x7da>
 800ac2a:	f04f 0800 	mov.w	r8, #0
 800ac2e:	e7f6      	b.n	800ac1e <_dtoa_r+0x8ee>
 800ac30:	4698      	mov	r8, r3
 800ac32:	e7f4      	b.n	800ac1e <_dtoa_r+0x8ee>
 800ac34:	f43f af7d 	beq.w	800ab32 <_dtoa_r+0x802>
 800ac38:	4618      	mov	r0, r3
 800ac3a:	301c      	adds	r0, #28
 800ac3c:	e772      	b.n	800ab24 <_dtoa_r+0x7f4>
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	dc37      	bgt.n	800acb4 <_dtoa_r+0x984>
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	dd34      	ble.n	800acb4 <_dtoa_r+0x984>
 800ac4a:	9b03      	ldr	r3, [sp, #12]
 800ac4c:	9302      	str	r3, [sp, #8]
 800ac4e:	9b02      	ldr	r3, [sp, #8]
 800ac50:	b96b      	cbnz	r3, 800ac6e <_dtoa_r+0x93e>
 800ac52:	4631      	mov	r1, r6
 800ac54:	2205      	movs	r2, #5
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 fbe6 	bl	800b428 <__multadd>
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	4606      	mov	r6, r0
 800ac60:	ee18 0a10 	vmov	r0, s16
 800ac64:	f000 fe00 	bl	800b868 <__mcmp>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	f73f adbb 	bgt.w	800a7e4 <_dtoa_r+0x4b4>
 800ac6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac70:	9d01      	ldr	r5, [sp, #4]
 800ac72:	43db      	mvns	r3, r3
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	f04f 0800 	mov.w	r8, #0
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fbb1 	bl	800b3e4 <_Bfree>
 800ac82:	2f00      	cmp	r7, #0
 800ac84:	f43f aea4 	beq.w	800a9d0 <_dtoa_r+0x6a0>
 800ac88:	f1b8 0f00 	cmp.w	r8, #0
 800ac8c:	d005      	beq.n	800ac9a <_dtoa_r+0x96a>
 800ac8e:	45b8      	cmp	r8, r7
 800ac90:	d003      	beq.n	800ac9a <_dtoa_r+0x96a>
 800ac92:	4641      	mov	r1, r8
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fba5 	bl	800b3e4 <_Bfree>
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 fba1 	bl	800b3e4 <_Bfree>
 800aca2:	e695      	b.n	800a9d0 <_dtoa_r+0x6a0>
 800aca4:	2600      	movs	r6, #0
 800aca6:	4637      	mov	r7, r6
 800aca8:	e7e1      	b.n	800ac6e <_dtoa_r+0x93e>
 800acaa:	9700      	str	r7, [sp, #0]
 800acac:	4637      	mov	r7, r6
 800acae:	e599      	b.n	800a7e4 <_dtoa_r+0x4b4>
 800acb0:	40240000 	.word	0x40240000
 800acb4:	9b08      	ldr	r3, [sp, #32]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80ca 	beq.w	800ae50 <_dtoa_r+0xb20>
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	9302      	str	r3, [sp, #8]
 800acc0:	2d00      	cmp	r5, #0
 800acc2:	dd05      	ble.n	800acd0 <_dtoa_r+0x9a0>
 800acc4:	4639      	mov	r1, r7
 800acc6:	462a      	mov	r2, r5
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fd5d 	bl	800b788 <__lshift>
 800acce:	4607      	mov	r7, r0
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	d05b      	beq.n	800ad8e <_dtoa_r+0xa5e>
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fb43 	bl	800b364 <_Balloc>
 800acde:	4605      	mov	r5, r0
 800ace0:	b928      	cbnz	r0, 800acee <_dtoa_r+0x9be>
 800ace2:	4b87      	ldr	r3, [pc, #540]	; (800af00 <_dtoa_r+0xbd0>)
 800ace4:	4602      	mov	r2, r0
 800ace6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acea:	f7ff bb3b 	b.w	800a364 <_dtoa_r+0x34>
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	3202      	adds	r2, #2
 800acf2:	0092      	lsls	r2, r2, #2
 800acf4:	f107 010c 	add.w	r1, r7, #12
 800acf8:	300c      	adds	r0, #12
 800acfa:	f7fe fbcf 	bl	800949c <memcpy>
 800acfe:	2201      	movs	r2, #1
 800ad00:	4629      	mov	r1, r5
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fd40 	bl	800b788 <__lshift>
 800ad08:	9b01      	ldr	r3, [sp, #4]
 800ad0a:	f103 0901 	add.w	r9, r3, #1
 800ad0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad12:	4413      	add	r3, r2
 800ad14:	9305      	str	r3, [sp, #20]
 800ad16:	f00a 0301 	and.w	r3, sl, #1
 800ad1a:	46b8      	mov	r8, r7
 800ad1c:	9304      	str	r3, [sp, #16]
 800ad1e:	4607      	mov	r7, r0
 800ad20:	4631      	mov	r1, r6
 800ad22:	ee18 0a10 	vmov	r0, s16
 800ad26:	f7ff fa75 	bl	800a214 <quorem>
 800ad2a:	4641      	mov	r1, r8
 800ad2c:	9002      	str	r0, [sp, #8]
 800ad2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad32:	ee18 0a10 	vmov	r0, s16
 800ad36:	f000 fd97 	bl	800b868 <__mcmp>
 800ad3a:	463a      	mov	r2, r7
 800ad3c:	9003      	str	r0, [sp, #12]
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 fdad 	bl	800b8a0 <__mdiff>
 800ad46:	68c2      	ldr	r2, [r0, #12]
 800ad48:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	bb02      	cbnz	r2, 800ad92 <_dtoa_r+0xa62>
 800ad50:	4601      	mov	r1, r0
 800ad52:	ee18 0a10 	vmov	r0, s16
 800ad56:	f000 fd87 	bl	800b868 <__mcmp>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4620      	mov	r0, r4
 800ad60:	9207      	str	r2, [sp, #28]
 800ad62:	f000 fb3f 	bl	800b3e4 <_Bfree>
 800ad66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad6a:	ea43 0102 	orr.w	r1, r3, r2
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	430b      	orrs	r3, r1
 800ad72:	464d      	mov	r5, r9
 800ad74:	d10f      	bne.n	800ad96 <_dtoa_r+0xa66>
 800ad76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad7a:	d02a      	beq.n	800add2 <_dtoa_r+0xaa2>
 800ad7c:	9b03      	ldr	r3, [sp, #12]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	dd02      	ble.n	800ad88 <_dtoa_r+0xa58>
 800ad82:	9b02      	ldr	r3, [sp, #8]
 800ad84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad88:	f88b a000 	strb.w	sl, [fp]
 800ad8c:	e775      	b.n	800ac7a <_dtoa_r+0x94a>
 800ad8e:	4638      	mov	r0, r7
 800ad90:	e7ba      	b.n	800ad08 <_dtoa_r+0x9d8>
 800ad92:	2201      	movs	r2, #1
 800ad94:	e7e2      	b.n	800ad5c <_dtoa_r+0xa2c>
 800ad96:	9b03      	ldr	r3, [sp, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	db04      	blt.n	800ada6 <_dtoa_r+0xa76>
 800ad9c:	9906      	ldr	r1, [sp, #24]
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	9904      	ldr	r1, [sp, #16]
 800ada2:	430b      	orrs	r3, r1
 800ada4:	d122      	bne.n	800adec <_dtoa_r+0xabc>
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	ddee      	ble.n	800ad88 <_dtoa_r+0xa58>
 800adaa:	ee18 1a10 	vmov	r1, s16
 800adae:	2201      	movs	r2, #1
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fce9 	bl	800b788 <__lshift>
 800adb6:	4631      	mov	r1, r6
 800adb8:	ee08 0a10 	vmov	s16, r0
 800adbc:	f000 fd54 	bl	800b868 <__mcmp>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	dc03      	bgt.n	800adcc <_dtoa_r+0xa9c>
 800adc4:	d1e0      	bne.n	800ad88 <_dtoa_r+0xa58>
 800adc6:	f01a 0f01 	tst.w	sl, #1
 800adca:	d0dd      	beq.n	800ad88 <_dtoa_r+0xa58>
 800adcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800add0:	d1d7      	bne.n	800ad82 <_dtoa_r+0xa52>
 800add2:	2339      	movs	r3, #57	; 0x39
 800add4:	f88b 3000 	strb.w	r3, [fp]
 800add8:	462b      	mov	r3, r5
 800adda:	461d      	mov	r5, r3
 800addc:	3b01      	subs	r3, #1
 800adde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ade2:	2a39      	cmp	r2, #57	; 0x39
 800ade4:	d071      	beq.n	800aeca <_dtoa_r+0xb9a>
 800ade6:	3201      	adds	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	e746      	b.n	800ac7a <_dtoa_r+0x94a>
 800adec:	2a00      	cmp	r2, #0
 800adee:	dd07      	ble.n	800ae00 <_dtoa_r+0xad0>
 800adf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adf4:	d0ed      	beq.n	800add2 <_dtoa_r+0xaa2>
 800adf6:	f10a 0301 	add.w	r3, sl, #1
 800adfa:	f88b 3000 	strb.w	r3, [fp]
 800adfe:	e73c      	b.n	800ac7a <_dtoa_r+0x94a>
 800ae00:	9b05      	ldr	r3, [sp, #20]
 800ae02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae06:	4599      	cmp	r9, r3
 800ae08:	d047      	beq.n	800ae9a <_dtoa_r+0xb6a>
 800ae0a:	ee18 1a10 	vmov	r1, s16
 800ae0e:	2300      	movs	r3, #0
 800ae10:	220a      	movs	r2, #10
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 fb08 	bl	800b428 <__multadd>
 800ae18:	45b8      	cmp	r8, r7
 800ae1a:	ee08 0a10 	vmov	s16, r0
 800ae1e:	f04f 0300 	mov.w	r3, #0
 800ae22:	f04f 020a 	mov.w	r2, #10
 800ae26:	4641      	mov	r1, r8
 800ae28:	4620      	mov	r0, r4
 800ae2a:	d106      	bne.n	800ae3a <_dtoa_r+0xb0a>
 800ae2c:	f000 fafc 	bl	800b428 <__multadd>
 800ae30:	4680      	mov	r8, r0
 800ae32:	4607      	mov	r7, r0
 800ae34:	f109 0901 	add.w	r9, r9, #1
 800ae38:	e772      	b.n	800ad20 <_dtoa_r+0x9f0>
 800ae3a:	f000 faf5 	bl	800b428 <__multadd>
 800ae3e:	4639      	mov	r1, r7
 800ae40:	4680      	mov	r8, r0
 800ae42:	2300      	movs	r3, #0
 800ae44:	220a      	movs	r2, #10
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 faee 	bl	800b428 <__multadd>
 800ae4c:	4607      	mov	r7, r0
 800ae4e:	e7f1      	b.n	800ae34 <_dtoa_r+0xb04>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	9302      	str	r3, [sp, #8]
 800ae54:	9d01      	ldr	r5, [sp, #4]
 800ae56:	ee18 0a10 	vmov	r0, s16
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	f7ff f9da 	bl	800a214 <quorem>
 800ae60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	f805 ab01 	strb.w	sl, [r5], #1
 800ae6a:	1aea      	subs	r2, r5, r3
 800ae6c:	9b02      	ldr	r3, [sp, #8]
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	dd09      	ble.n	800ae86 <_dtoa_r+0xb56>
 800ae72:	ee18 1a10 	vmov	r1, s16
 800ae76:	2300      	movs	r3, #0
 800ae78:	220a      	movs	r2, #10
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 fad4 	bl	800b428 <__multadd>
 800ae80:	ee08 0a10 	vmov	s16, r0
 800ae84:	e7e7      	b.n	800ae56 <_dtoa_r+0xb26>
 800ae86:	9b02      	ldr	r3, [sp, #8]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	bfc8      	it	gt
 800ae8c:	461d      	movgt	r5, r3
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	bfd8      	it	le
 800ae92:	2501      	movle	r5, #1
 800ae94:	441d      	add	r5, r3
 800ae96:	f04f 0800 	mov.w	r8, #0
 800ae9a:	ee18 1a10 	vmov	r1, s16
 800ae9e:	2201      	movs	r2, #1
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 fc71 	bl	800b788 <__lshift>
 800aea6:	4631      	mov	r1, r6
 800aea8:	ee08 0a10 	vmov	s16, r0
 800aeac:	f000 fcdc 	bl	800b868 <__mcmp>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	dc91      	bgt.n	800add8 <_dtoa_r+0xaa8>
 800aeb4:	d102      	bne.n	800aebc <_dtoa_r+0xb8c>
 800aeb6:	f01a 0f01 	tst.w	sl, #1
 800aeba:	d18d      	bne.n	800add8 <_dtoa_r+0xaa8>
 800aebc:	462b      	mov	r3, r5
 800aebe:	461d      	mov	r5, r3
 800aec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aec4:	2a30      	cmp	r2, #48	; 0x30
 800aec6:	d0fa      	beq.n	800aebe <_dtoa_r+0xb8e>
 800aec8:	e6d7      	b.n	800ac7a <_dtoa_r+0x94a>
 800aeca:	9a01      	ldr	r2, [sp, #4]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d184      	bne.n	800adda <_dtoa_r+0xaaa>
 800aed0:	9b00      	ldr	r3, [sp, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	2331      	movs	r3, #49	; 0x31
 800aed8:	7013      	strb	r3, [r2, #0]
 800aeda:	e6ce      	b.n	800ac7a <_dtoa_r+0x94a>
 800aedc:	4b09      	ldr	r3, [pc, #36]	; (800af04 <_dtoa_r+0xbd4>)
 800aede:	f7ff ba95 	b.w	800a40c <_dtoa_r+0xdc>
 800aee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f47f aa6e 	bne.w	800a3c6 <_dtoa_r+0x96>
 800aeea:	4b07      	ldr	r3, [pc, #28]	; (800af08 <_dtoa_r+0xbd8>)
 800aeec:	f7ff ba8e 	b.w	800a40c <_dtoa_r+0xdc>
 800aef0:	9b02      	ldr	r3, [sp, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	dcae      	bgt.n	800ae54 <_dtoa_r+0xb24>
 800aef6:	9b06      	ldr	r3, [sp, #24]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	f73f aea8 	bgt.w	800ac4e <_dtoa_r+0x91e>
 800aefe:	e7a9      	b.n	800ae54 <_dtoa_r+0xb24>
 800af00:	0800c82b 	.word	0x0800c82b
 800af04:	0800c788 	.word	0x0800c788
 800af08:	0800c7ac 	.word	0x0800c7ac

0800af0c <__sflush_r>:
 800af0c:	898a      	ldrh	r2, [r1, #12]
 800af0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af12:	4605      	mov	r5, r0
 800af14:	0710      	lsls	r0, r2, #28
 800af16:	460c      	mov	r4, r1
 800af18:	d458      	bmi.n	800afcc <__sflush_r+0xc0>
 800af1a:	684b      	ldr	r3, [r1, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dc05      	bgt.n	800af2c <__sflush_r+0x20>
 800af20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af22:	2b00      	cmp	r3, #0
 800af24:	dc02      	bgt.n	800af2c <__sflush_r+0x20>
 800af26:	2000      	movs	r0, #0
 800af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d0f9      	beq.n	800af26 <__sflush_r+0x1a>
 800af32:	2300      	movs	r3, #0
 800af34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af38:	682f      	ldr	r7, [r5, #0]
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	d032      	beq.n	800afa4 <__sflush_r+0x98>
 800af3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	075a      	lsls	r2, r3, #29
 800af44:	d505      	bpl.n	800af52 <__sflush_r+0x46>
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	1ac0      	subs	r0, r0, r3
 800af4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af4c:	b10b      	cbz	r3, 800af52 <__sflush_r+0x46>
 800af4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af50:	1ac0      	subs	r0, r0, r3
 800af52:	2300      	movs	r3, #0
 800af54:	4602      	mov	r2, r0
 800af56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	4628      	mov	r0, r5
 800af5c:	47b0      	blx	r6
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	d106      	bne.n	800af72 <__sflush_r+0x66>
 800af64:	6829      	ldr	r1, [r5, #0]
 800af66:	291d      	cmp	r1, #29
 800af68:	d82c      	bhi.n	800afc4 <__sflush_r+0xb8>
 800af6a:	4a2a      	ldr	r2, [pc, #168]	; (800b014 <__sflush_r+0x108>)
 800af6c:	40ca      	lsrs	r2, r1
 800af6e:	07d6      	lsls	r6, r2, #31
 800af70:	d528      	bpl.n	800afc4 <__sflush_r+0xb8>
 800af72:	2200      	movs	r2, #0
 800af74:	6062      	str	r2, [r4, #4]
 800af76:	04d9      	lsls	r1, r3, #19
 800af78:	6922      	ldr	r2, [r4, #16]
 800af7a:	6022      	str	r2, [r4, #0]
 800af7c:	d504      	bpl.n	800af88 <__sflush_r+0x7c>
 800af7e:	1c42      	adds	r2, r0, #1
 800af80:	d101      	bne.n	800af86 <__sflush_r+0x7a>
 800af82:	682b      	ldr	r3, [r5, #0]
 800af84:	b903      	cbnz	r3, 800af88 <__sflush_r+0x7c>
 800af86:	6560      	str	r0, [r4, #84]	; 0x54
 800af88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af8a:	602f      	str	r7, [r5, #0]
 800af8c:	2900      	cmp	r1, #0
 800af8e:	d0ca      	beq.n	800af26 <__sflush_r+0x1a>
 800af90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af94:	4299      	cmp	r1, r3
 800af96:	d002      	beq.n	800af9e <__sflush_r+0x92>
 800af98:	4628      	mov	r0, r5
 800af9a:	f000 fd7d 	bl	800ba98 <_free_r>
 800af9e:	2000      	movs	r0, #0
 800afa0:	6360      	str	r0, [r4, #52]	; 0x34
 800afa2:	e7c1      	b.n	800af28 <__sflush_r+0x1c>
 800afa4:	6a21      	ldr	r1, [r4, #32]
 800afa6:	2301      	movs	r3, #1
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b0      	blx	r6
 800afac:	1c41      	adds	r1, r0, #1
 800afae:	d1c7      	bne.n	800af40 <__sflush_r+0x34>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0c4      	beq.n	800af40 <__sflush_r+0x34>
 800afb6:	2b1d      	cmp	r3, #29
 800afb8:	d001      	beq.n	800afbe <__sflush_r+0xb2>
 800afba:	2b16      	cmp	r3, #22
 800afbc:	d101      	bne.n	800afc2 <__sflush_r+0xb6>
 800afbe:	602f      	str	r7, [r5, #0]
 800afc0:	e7b1      	b.n	800af26 <__sflush_r+0x1a>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	e7ad      	b.n	800af28 <__sflush_r+0x1c>
 800afcc:	690f      	ldr	r7, [r1, #16]
 800afce:	2f00      	cmp	r7, #0
 800afd0:	d0a9      	beq.n	800af26 <__sflush_r+0x1a>
 800afd2:	0793      	lsls	r3, r2, #30
 800afd4:	680e      	ldr	r6, [r1, #0]
 800afd6:	bf08      	it	eq
 800afd8:	694b      	ldreq	r3, [r1, #20]
 800afda:	600f      	str	r7, [r1, #0]
 800afdc:	bf18      	it	ne
 800afde:	2300      	movne	r3, #0
 800afe0:	eba6 0807 	sub.w	r8, r6, r7
 800afe4:	608b      	str	r3, [r1, #8]
 800afe6:	f1b8 0f00 	cmp.w	r8, #0
 800afea:	dd9c      	ble.n	800af26 <__sflush_r+0x1a>
 800afec:	6a21      	ldr	r1, [r4, #32]
 800afee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aff0:	4643      	mov	r3, r8
 800aff2:	463a      	mov	r2, r7
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b0      	blx	r6
 800aff8:	2800      	cmp	r0, #0
 800affa:	dc06      	bgt.n	800b00a <__sflush_r+0xfe>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e78e      	b.n	800af28 <__sflush_r+0x1c>
 800b00a:	4407      	add	r7, r0
 800b00c:	eba8 0800 	sub.w	r8, r8, r0
 800b010:	e7e9      	b.n	800afe6 <__sflush_r+0xda>
 800b012:	bf00      	nop
 800b014:	20400001 	.word	0x20400001

0800b018 <_fflush_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	690b      	ldr	r3, [r1, #16]
 800b01c:	4605      	mov	r5, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	b913      	cbnz	r3, 800b028 <_fflush_r+0x10>
 800b022:	2500      	movs	r5, #0
 800b024:	4628      	mov	r0, r5
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	b118      	cbz	r0, 800b032 <_fflush_r+0x1a>
 800b02a:	6983      	ldr	r3, [r0, #24]
 800b02c:	b90b      	cbnz	r3, 800b032 <_fflush_r+0x1a>
 800b02e:	f000 f887 	bl	800b140 <__sinit>
 800b032:	4b14      	ldr	r3, [pc, #80]	; (800b084 <_fflush_r+0x6c>)
 800b034:	429c      	cmp	r4, r3
 800b036:	d11b      	bne.n	800b070 <_fflush_r+0x58>
 800b038:	686c      	ldr	r4, [r5, #4]
 800b03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0ef      	beq.n	800b022 <_fflush_r+0xa>
 800b042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b044:	07d0      	lsls	r0, r2, #31
 800b046:	d404      	bmi.n	800b052 <_fflush_r+0x3a>
 800b048:	0599      	lsls	r1, r3, #22
 800b04a:	d402      	bmi.n	800b052 <_fflush_r+0x3a>
 800b04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b04e:	f000 f91a 	bl	800b286 <__retarget_lock_acquire_recursive>
 800b052:	4628      	mov	r0, r5
 800b054:	4621      	mov	r1, r4
 800b056:	f7ff ff59 	bl	800af0c <__sflush_r>
 800b05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b05c:	07da      	lsls	r2, r3, #31
 800b05e:	4605      	mov	r5, r0
 800b060:	d4e0      	bmi.n	800b024 <_fflush_r+0xc>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	059b      	lsls	r3, r3, #22
 800b066:	d4dd      	bmi.n	800b024 <_fflush_r+0xc>
 800b068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06a:	f000 f90d 	bl	800b288 <__retarget_lock_release_recursive>
 800b06e:	e7d9      	b.n	800b024 <_fflush_r+0xc>
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <_fflush_r+0x70>)
 800b072:	429c      	cmp	r4, r3
 800b074:	d101      	bne.n	800b07a <_fflush_r+0x62>
 800b076:	68ac      	ldr	r4, [r5, #8]
 800b078:	e7df      	b.n	800b03a <_fflush_r+0x22>
 800b07a:	4b04      	ldr	r3, [pc, #16]	; (800b08c <_fflush_r+0x74>)
 800b07c:	429c      	cmp	r4, r3
 800b07e:	bf08      	it	eq
 800b080:	68ec      	ldreq	r4, [r5, #12]
 800b082:	e7da      	b.n	800b03a <_fflush_r+0x22>
 800b084:	0800c85c 	.word	0x0800c85c
 800b088:	0800c87c 	.word	0x0800c87c
 800b08c:	0800c83c 	.word	0x0800c83c

0800b090 <std>:
 800b090:	2300      	movs	r3, #0
 800b092:	b510      	push	{r4, lr}
 800b094:	4604      	mov	r4, r0
 800b096:	e9c0 3300 	strd	r3, r3, [r0]
 800b09a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b09e:	6083      	str	r3, [r0, #8]
 800b0a0:	8181      	strh	r1, [r0, #12]
 800b0a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b0a4:	81c2      	strh	r2, [r0, #14]
 800b0a6:	6183      	str	r3, [r0, #24]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	2208      	movs	r2, #8
 800b0ac:	305c      	adds	r0, #92	; 0x5c
 800b0ae:	f7fe fa03 	bl	80094b8 <memset>
 800b0b2:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <std+0x38>)
 800b0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <std+0x3c>)
 800b0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0ba:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <std+0x40>)
 800b0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0be:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <std+0x44>)
 800b0c0:	6224      	str	r4, [r4, #32]
 800b0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b0c4:	bd10      	pop	{r4, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800c1e5 	.word	0x0800c1e5
 800b0cc:	0800c207 	.word	0x0800c207
 800b0d0:	0800c23f 	.word	0x0800c23f
 800b0d4:	0800c263 	.word	0x0800c263

0800b0d8 <_cleanup_r>:
 800b0d8:	4901      	ldr	r1, [pc, #4]	; (800b0e0 <_cleanup_r+0x8>)
 800b0da:	f000 b8af 	b.w	800b23c <_fwalk_reent>
 800b0de:	bf00      	nop
 800b0e0:	0800b019 	.word	0x0800b019

0800b0e4 <__sfmoreglue>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	2268      	movs	r2, #104	; 0x68
 800b0e8:	1e4d      	subs	r5, r1, #1
 800b0ea:	4355      	muls	r5, r2
 800b0ec:	460e      	mov	r6, r1
 800b0ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0f2:	f000 fd3d 	bl	800bb70 <_malloc_r>
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	b140      	cbz	r0, 800b10c <__sfmoreglue+0x28>
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	e9c0 1600 	strd	r1, r6, [r0]
 800b100:	300c      	adds	r0, #12
 800b102:	60a0      	str	r0, [r4, #8]
 800b104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b108:	f7fe f9d6 	bl	80094b8 <memset>
 800b10c:	4620      	mov	r0, r4
 800b10e:	bd70      	pop	{r4, r5, r6, pc}

0800b110 <__sfp_lock_acquire>:
 800b110:	4801      	ldr	r0, [pc, #4]	; (800b118 <__sfp_lock_acquire+0x8>)
 800b112:	f000 b8b8 	b.w	800b286 <__retarget_lock_acquire_recursive>
 800b116:	bf00      	nop
 800b118:	2000083d 	.word	0x2000083d

0800b11c <__sfp_lock_release>:
 800b11c:	4801      	ldr	r0, [pc, #4]	; (800b124 <__sfp_lock_release+0x8>)
 800b11e:	f000 b8b3 	b.w	800b288 <__retarget_lock_release_recursive>
 800b122:	bf00      	nop
 800b124:	2000083d 	.word	0x2000083d

0800b128 <__sinit_lock_acquire>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__sinit_lock_acquire+0x8>)
 800b12a:	f000 b8ac 	b.w	800b286 <__retarget_lock_acquire_recursive>
 800b12e:	bf00      	nop
 800b130:	2000083e 	.word	0x2000083e

0800b134 <__sinit_lock_release>:
 800b134:	4801      	ldr	r0, [pc, #4]	; (800b13c <__sinit_lock_release+0x8>)
 800b136:	f000 b8a7 	b.w	800b288 <__retarget_lock_release_recursive>
 800b13a:	bf00      	nop
 800b13c:	2000083e 	.word	0x2000083e

0800b140 <__sinit>:
 800b140:	b510      	push	{r4, lr}
 800b142:	4604      	mov	r4, r0
 800b144:	f7ff fff0 	bl	800b128 <__sinit_lock_acquire>
 800b148:	69a3      	ldr	r3, [r4, #24]
 800b14a:	b11b      	cbz	r3, 800b154 <__sinit+0x14>
 800b14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b150:	f7ff bff0 	b.w	800b134 <__sinit_lock_release>
 800b154:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b158:	6523      	str	r3, [r4, #80]	; 0x50
 800b15a:	4b13      	ldr	r3, [pc, #76]	; (800b1a8 <__sinit+0x68>)
 800b15c:	4a13      	ldr	r2, [pc, #76]	; (800b1ac <__sinit+0x6c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	62a2      	str	r2, [r4, #40]	; 0x28
 800b162:	42a3      	cmp	r3, r4
 800b164:	bf04      	itt	eq
 800b166:	2301      	moveq	r3, #1
 800b168:	61a3      	streq	r3, [r4, #24]
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 f820 	bl	800b1b0 <__sfp>
 800b170:	6060      	str	r0, [r4, #4]
 800b172:	4620      	mov	r0, r4
 800b174:	f000 f81c 	bl	800b1b0 <__sfp>
 800b178:	60a0      	str	r0, [r4, #8]
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 f818 	bl	800b1b0 <__sfp>
 800b180:	2200      	movs	r2, #0
 800b182:	60e0      	str	r0, [r4, #12]
 800b184:	2104      	movs	r1, #4
 800b186:	6860      	ldr	r0, [r4, #4]
 800b188:	f7ff ff82 	bl	800b090 <std>
 800b18c:	68a0      	ldr	r0, [r4, #8]
 800b18e:	2201      	movs	r2, #1
 800b190:	2109      	movs	r1, #9
 800b192:	f7ff ff7d 	bl	800b090 <std>
 800b196:	68e0      	ldr	r0, [r4, #12]
 800b198:	2202      	movs	r2, #2
 800b19a:	2112      	movs	r1, #18
 800b19c:	f7ff ff78 	bl	800b090 <std>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	61a3      	str	r3, [r4, #24]
 800b1a4:	e7d2      	b.n	800b14c <__sinit+0xc>
 800b1a6:	bf00      	nop
 800b1a8:	0800c774 	.word	0x0800c774
 800b1ac:	0800b0d9 	.word	0x0800b0d9

0800b1b0 <__sfp>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	f7ff ffac 	bl	800b110 <__sfp_lock_acquire>
 800b1b8:	4b1e      	ldr	r3, [pc, #120]	; (800b234 <__sfp+0x84>)
 800b1ba:	681e      	ldr	r6, [r3, #0]
 800b1bc:	69b3      	ldr	r3, [r6, #24]
 800b1be:	b913      	cbnz	r3, 800b1c6 <__sfp+0x16>
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7ff ffbd 	bl	800b140 <__sinit>
 800b1c6:	3648      	adds	r6, #72	; 0x48
 800b1c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	d503      	bpl.n	800b1d8 <__sfp+0x28>
 800b1d0:	6833      	ldr	r3, [r6, #0]
 800b1d2:	b30b      	cbz	r3, 800b218 <__sfp+0x68>
 800b1d4:	6836      	ldr	r6, [r6, #0]
 800b1d6:	e7f7      	b.n	800b1c8 <__sfp+0x18>
 800b1d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1dc:	b9d5      	cbnz	r5, 800b214 <__sfp+0x64>
 800b1de:	4b16      	ldr	r3, [pc, #88]	; (800b238 <__sfp+0x88>)
 800b1e0:	60e3      	str	r3, [r4, #12]
 800b1e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b1e8:	f000 f84c 	bl	800b284 <__retarget_lock_init_recursive>
 800b1ec:	f7ff ff96 	bl	800b11c <__sfp_lock_release>
 800b1f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1f8:	6025      	str	r5, [r4, #0]
 800b1fa:	61a5      	str	r5, [r4, #24]
 800b1fc:	2208      	movs	r2, #8
 800b1fe:	4629      	mov	r1, r5
 800b200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b204:	f7fe f958 	bl	80094b8 <memset>
 800b208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b20c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b210:	4620      	mov	r0, r4
 800b212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b214:	3468      	adds	r4, #104	; 0x68
 800b216:	e7d9      	b.n	800b1cc <__sfp+0x1c>
 800b218:	2104      	movs	r1, #4
 800b21a:	4638      	mov	r0, r7
 800b21c:	f7ff ff62 	bl	800b0e4 <__sfmoreglue>
 800b220:	4604      	mov	r4, r0
 800b222:	6030      	str	r0, [r6, #0]
 800b224:	2800      	cmp	r0, #0
 800b226:	d1d5      	bne.n	800b1d4 <__sfp+0x24>
 800b228:	f7ff ff78 	bl	800b11c <__sfp_lock_release>
 800b22c:	230c      	movs	r3, #12
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	e7ee      	b.n	800b210 <__sfp+0x60>
 800b232:	bf00      	nop
 800b234:	0800c774 	.word	0x0800c774
 800b238:	ffff0001 	.word	0xffff0001

0800b23c <_fwalk_reent>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	4606      	mov	r6, r0
 800b242:	4688      	mov	r8, r1
 800b244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b248:	2700      	movs	r7, #0
 800b24a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b24e:	f1b9 0901 	subs.w	r9, r9, #1
 800b252:	d505      	bpl.n	800b260 <_fwalk_reent+0x24>
 800b254:	6824      	ldr	r4, [r4, #0]
 800b256:	2c00      	cmp	r4, #0
 800b258:	d1f7      	bne.n	800b24a <_fwalk_reent+0xe>
 800b25a:	4638      	mov	r0, r7
 800b25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b260:	89ab      	ldrh	r3, [r5, #12]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d907      	bls.n	800b276 <_fwalk_reent+0x3a>
 800b266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b26a:	3301      	adds	r3, #1
 800b26c:	d003      	beq.n	800b276 <_fwalk_reent+0x3a>
 800b26e:	4629      	mov	r1, r5
 800b270:	4630      	mov	r0, r6
 800b272:	47c0      	blx	r8
 800b274:	4307      	orrs	r7, r0
 800b276:	3568      	adds	r5, #104	; 0x68
 800b278:	e7e9      	b.n	800b24e <_fwalk_reent+0x12>
	...

0800b27c <_localeconv_r>:
 800b27c:	4800      	ldr	r0, [pc, #0]	; (800b280 <_localeconv_r+0x4>)
 800b27e:	4770      	bx	lr
 800b280:	20000160 	.word	0x20000160

0800b284 <__retarget_lock_init_recursive>:
 800b284:	4770      	bx	lr

0800b286 <__retarget_lock_acquire_recursive>:
 800b286:	4770      	bx	lr

0800b288 <__retarget_lock_release_recursive>:
 800b288:	4770      	bx	lr

0800b28a <__swhatbuf_r>:
 800b28a:	b570      	push	{r4, r5, r6, lr}
 800b28c:	460e      	mov	r6, r1
 800b28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b292:	2900      	cmp	r1, #0
 800b294:	b096      	sub	sp, #88	; 0x58
 800b296:	4614      	mov	r4, r2
 800b298:	461d      	mov	r5, r3
 800b29a:	da08      	bge.n	800b2ae <__swhatbuf_r+0x24>
 800b29c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	602a      	str	r2, [r5, #0]
 800b2a4:	061a      	lsls	r2, r3, #24
 800b2a6:	d410      	bmi.n	800b2ca <__swhatbuf_r+0x40>
 800b2a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ac:	e00e      	b.n	800b2cc <__swhatbuf_r+0x42>
 800b2ae:	466a      	mov	r2, sp
 800b2b0:	f001 f82e 	bl	800c310 <_fstat_r>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	dbf1      	blt.n	800b29c <__swhatbuf_r+0x12>
 800b2b8:	9a01      	ldr	r2, [sp, #4]
 800b2ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2c2:	425a      	negs	r2, r3
 800b2c4:	415a      	adcs	r2, r3
 800b2c6:	602a      	str	r2, [r5, #0]
 800b2c8:	e7ee      	b.n	800b2a8 <__swhatbuf_r+0x1e>
 800b2ca:	2340      	movs	r3, #64	; 0x40
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	b016      	add	sp, #88	; 0x58
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}

0800b2d4 <__smakebuf_r>:
 800b2d4:	898b      	ldrh	r3, [r1, #12]
 800b2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2d8:	079d      	lsls	r5, r3, #30
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460c      	mov	r4, r1
 800b2de:	d507      	bpl.n	800b2f0 <__smakebuf_r+0x1c>
 800b2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	6163      	str	r3, [r4, #20]
 800b2ec:	b002      	add	sp, #8
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	ab01      	add	r3, sp, #4
 800b2f2:	466a      	mov	r2, sp
 800b2f4:	f7ff ffc9 	bl	800b28a <__swhatbuf_r>
 800b2f8:	9900      	ldr	r1, [sp, #0]
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	f000 fc37 	bl	800bb70 <_malloc_r>
 800b302:	b948      	cbnz	r0, 800b318 <__smakebuf_r+0x44>
 800b304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d4ef      	bmi.n	800b2ec <__smakebuf_r+0x18>
 800b30c:	f023 0303 	bic.w	r3, r3, #3
 800b310:	f043 0302 	orr.w	r3, r3, #2
 800b314:	81a3      	strh	r3, [r4, #12]
 800b316:	e7e3      	b.n	800b2e0 <__smakebuf_r+0xc>
 800b318:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <__smakebuf_r+0x7c>)
 800b31a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	6020      	str	r0, [r4, #0]
 800b320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b324:	81a3      	strh	r3, [r4, #12]
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	6163      	str	r3, [r4, #20]
 800b32a:	9b01      	ldr	r3, [sp, #4]
 800b32c:	6120      	str	r0, [r4, #16]
 800b32e:	b15b      	cbz	r3, 800b348 <__smakebuf_r+0x74>
 800b330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b334:	4630      	mov	r0, r6
 800b336:	f000 fffd 	bl	800c334 <_isatty_r>
 800b33a:	b128      	cbz	r0, 800b348 <__smakebuf_r+0x74>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	89a0      	ldrh	r0, [r4, #12]
 800b34a:	4305      	orrs	r5, r0
 800b34c:	81a5      	strh	r5, [r4, #12]
 800b34e:	e7cd      	b.n	800b2ec <__smakebuf_r+0x18>
 800b350:	0800b0d9 	.word	0x0800b0d9

0800b354 <malloc>:
 800b354:	4b02      	ldr	r3, [pc, #8]	; (800b360 <malloc+0xc>)
 800b356:	4601      	mov	r1, r0
 800b358:	6818      	ldr	r0, [r3, #0]
 800b35a:	f000 bc09 	b.w	800bb70 <_malloc_r>
 800b35e:	bf00      	nop
 800b360:	2000000c 	.word	0x2000000c

0800b364 <_Balloc>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b368:	4604      	mov	r4, r0
 800b36a:	460d      	mov	r5, r1
 800b36c:	b976      	cbnz	r6, 800b38c <_Balloc+0x28>
 800b36e:	2010      	movs	r0, #16
 800b370:	f7ff fff0 	bl	800b354 <malloc>
 800b374:	4602      	mov	r2, r0
 800b376:	6260      	str	r0, [r4, #36]	; 0x24
 800b378:	b920      	cbnz	r0, 800b384 <_Balloc+0x20>
 800b37a:	4b18      	ldr	r3, [pc, #96]	; (800b3dc <_Balloc+0x78>)
 800b37c:	4818      	ldr	r0, [pc, #96]	; (800b3e0 <_Balloc+0x7c>)
 800b37e:	2166      	movs	r1, #102	; 0x66
 800b380:	f000 ff86 	bl	800c290 <__assert_func>
 800b384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b388:	6006      	str	r6, [r0, #0]
 800b38a:	60c6      	str	r6, [r0, #12]
 800b38c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b38e:	68f3      	ldr	r3, [r6, #12]
 800b390:	b183      	cbz	r3, 800b3b4 <_Balloc+0x50>
 800b392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b39a:	b9b8      	cbnz	r0, 800b3cc <_Balloc+0x68>
 800b39c:	2101      	movs	r1, #1
 800b39e:	fa01 f605 	lsl.w	r6, r1, r5
 800b3a2:	1d72      	adds	r2, r6, #5
 800b3a4:	0092      	lsls	r2, r2, #2
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 fb60 	bl	800ba6c <_calloc_r>
 800b3ac:	b160      	cbz	r0, 800b3c8 <_Balloc+0x64>
 800b3ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3b2:	e00e      	b.n	800b3d2 <_Balloc+0x6e>
 800b3b4:	2221      	movs	r2, #33	; 0x21
 800b3b6:	2104      	movs	r1, #4
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f000 fb57 	bl	800ba6c <_calloc_r>
 800b3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3c0:	60f0      	str	r0, [r6, #12]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e4      	bne.n	800b392 <_Balloc+0x2e>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	6802      	ldr	r2, [r0, #0]
 800b3ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3d8:	e7f7      	b.n	800b3ca <_Balloc+0x66>
 800b3da:	bf00      	nop
 800b3dc:	0800c7b9 	.word	0x0800c7b9
 800b3e0:	0800c89c 	.word	0x0800c89c

0800b3e4 <_Bfree>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	b976      	cbnz	r6, 800b40c <_Bfree+0x28>
 800b3ee:	2010      	movs	r0, #16
 800b3f0:	f7ff ffb0 	bl	800b354 <malloc>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	6268      	str	r0, [r5, #36]	; 0x24
 800b3f8:	b920      	cbnz	r0, 800b404 <_Bfree+0x20>
 800b3fa:	4b09      	ldr	r3, [pc, #36]	; (800b420 <_Bfree+0x3c>)
 800b3fc:	4809      	ldr	r0, [pc, #36]	; (800b424 <_Bfree+0x40>)
 800b3fe:	218a      	movs	r1, #138	; 0x8a
 800b400:	f000 ff46 	bl	800c290 <__assert_func>
 800b404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b408:	6006      	str	r6, [r0, #0]
 800b40a:	60c6      	str	r6, [r0, #12]
 800b40c:	b13c      	cbz	r4, 800b41e <_Bfree+0x3a>
 800b40e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b410:	6862      	ldr	r2, [r4, #4]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b418:	6021      	str	r1, [r4, #0]
 800b41a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	0800c7b9 	.word	0x0800c7b9
 800b424:	0800c89c 	.word	0x0800c89c

0800b428 <__multadd>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	690d      	ldr	r5, [r1, #16]
 800b42e:	4607      	mov	r7, r0
 800b430:	460c      	mov	r4, r1
 800b432:	461e      	mov	r6, r3
 800b434:	f101 0c14 	add.w	ip, r1, #20
 800b438:	2000      	movs	r0, #0
 800b43a:	f8dc 3000 	ldr.w	r3, [ip]
 800b43e:	b299      	uxth	r1, r3
 800b440:	fb02 6101 	mla	r1, r2, r1, r6
 800b444:	0c1e      	lsrs	r6, r3, #16
 800b446:	0c0b      	lsrs	r3, r1, #16
 800b448:	fb02 3306 	mla	r3, r2, r6, r3
 800b44c:	b289      	uxth	r1, r1
 800b44e:	3001      	adds	r0, #1
 800b450:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b454:	4285      	cmp	r5, r0
 800b456:	f84c 1b04 	str.w	r1, [ip], #4
 800b45a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b45e:	dcec      	bgt.n	800b43a <__multadd+0x12>
 800b460:	b30e      	cbz	r6, 800b4a6 <__multadd+0x7e>
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	42ab      	cmp	r3, r5
 800b466:	dc19      	bgt.n	800b49c <__multadd+0x74>
 800b468:	6861      	ldr	r1, [r4, #4]
 800b46a:	4638      	mov	r0, r7
 800b46c:	3101      	adds	r1, #1
 800b46e:	f7ff ff79 	bl	800b364 <_Balloc>
 800b472:	4680      	mov	r8, r0
 800b474:	b928      	cbnz	r0, 800b482 <__multadd+0x5a>
 800b476:	4602      	mov	r2, r0
 800b478:	4b0c      	ldr	r3, [pc, #48]	; (800b4ac <__multadd+0x84>)
 800b47a:	480d      	ldr	r0, [pc, #52]	; (800b4b0 <__multadd+0x88>)
 800b47c:	21b5      	movs	r1, #181	; 0xb5
 800b47e:	f000 ff07 	bl	800c290 <__assert_func>
 800b482:	6922      	ldr	r2, [r4, #16]
 800b484:	3202      	adds	r2, #2
 800b486:	f104 010c 	add.w	r1, r4, #12
 800b48a:	0092      	lsls	r2, r2, #2
 800b48c:	300c      	adds	r0, #12
 800b48e:	f7fe f805 	bl	800949c <memcpy>
 800b492:	4621      	mov	r1, r4
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff ffa5 	bl	800b3e4 <_Bfree>
 800b49a:	4644      	mov	r4, r8
 800b49c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4a0:	3501      	adds	r5, #1
 800b4a2:	615e      	str	r6, [r3, #20]
 800b4a4:	6125      	str	r5, [r4, #16]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ac:	0800c82b 	.word	0x0800c82b
 800b4b0:	0800c89c 	.word	0x0800c89c

0800b4b4 <__hi0bits>:
 800b4b4:	0c03      	lsrs	r3, r0, #16
 800b4b6:	041b      	lsls	r3, r3, #16
 800b4b8:	b9d3      	cbnz	r3, 800b4f0 <__hi0bits+0x3c>
 800b4ba:	0400      	lsls	r0, r0, #16
 800b4bc:	2310      	movs	r3, #16
 800b4be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4c2:	bf04      	itt	eq
 800b4c4:	0200      	lsleq	r0, r0, #8
 800b4c6:	3308      	addeq	r3, #8
 800b4c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4cc:	bf04      	itt	eq
 800b4ce:	0100      	lsleq	r0, r0, #4
 800b4d0:	3304      	addeq	r3, #4
 800b4d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4d6:	bf04      	itt	eq
 800b4d8:	0080      	lsleq	r0, r0, #2
 800b4da:	3302      	addeq	r3, #2
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	db05      	blt.n	800b4ec <__hi0bits+0x38>
 800b4e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4e4:	f103 0301 	add.w	r3, r3, #1
 800b4e8:	bf08      	it	eq
 800b4ea:	2320      	moveq	r3, #32
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	4770      	bx	lr
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	e7e4      	b.n	800b4be <__hi0bits+0xa>

0800b4f4 <__lo0bits>:
 800b4f4:	6803      	ldr	r3, [r0, #0]
 800b4f6:	f013 0207 	ands.w	r2, r3, #7
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	d00b      	beq.n	800b516 <__lo0bits+0x22>
 800b4fe:	07da      	lsls	r2, r3, #31
 800b500:	d423      	bmi.n	800b54a <__lo0bits+0x56>
 800b502:	0798      	lsls	r0, r3, #30
 800b504:	bf49      	itett	mi
 800b506:	085b      	lsrmi	r3, r3, #1
 800b508:	089b      	lsrpl	r3, r3, #2
 800b50a:	2001      	movmi	r0, #1
 800b50c:	600b      	strmi	r3, [r1, #0]
 800b50e:	bf5c      	itt	pl
 800b510:	600b      	strpl	r3, [r1, #0]
 800b512:	2002      	movpl	r0, #2
 800b514:	4770      	bx	lr
 800b516:	b298      	uxth	r0, r3
 800b518:	b9a8      	cbnz	r0, 800b546 <__lo0bits+0x52>
 800b51a:	0c1b      	lsrs	r3, r3, #16
 800b51c:	2010      	movs	r0, #16
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	b90a      	cbnz	r2, 800b526 <__lo0bits+0x32>
 800b522:	3008      	adds	r0, #8
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	071a      	lsls	r2, r3, #28
 800b528:	bf04      	itt	eq
 800b52a:	091b      	lsreq	r3, r3, #4
 800b52c:	3004      	addeq	r0, #4
 800b52e:	079a      	lsls	r2, r3, #30
 800b530:	bf04      	itt	eq
 800b532:	089b      	lsreq	r3, r3, #2
 800b534:	3002      	addeq	r0, #2
 800b536:	07da      	lsls	r2, r3, #31
 800b538:	d403      	bmi.n	800b542 <__lo0bits+0x4e>
 800b53a:	085b      	lsrs	r3, r3, #1
 800b53c:	f100 0001 	add.w	r0, r0, #1
 800b540:	d005      	beq.n	800b54e <__lo0bits+0x5a>
 800b542:	600b      	str	r3, [r1, #0]
 800b544:	4770      	bx	lr
 800b546:	4610      	mov	r0, r2
 800b548:	e7e9      	b.n	800b51e <__lo0bits+0x2a>
 800b54a:	2000      	movs	r0, #0
 800b54c:	4770      	bx	lr
 800b54e:	2020      	movs	r0, #32
 800b550:	4770      	bx	lr
	...

0800b554 <__i2b>:
 800b554:	b510      	push	{r4, lr}
 800b556:	460c      	mov	r4, r1
 800b558:	2101      	movs	r1, #1
 800b55a:	f7ff ff03 	bl	800b364 <_Balloc>
 800b55e:	4602      	mov	r2, r0
 800b560:	b928      	cbnz	r0, 800b56e <__i2b+0x1a>
 800b562:	4b05      	ldr	r3, [pc, #20]	; (800b578 <__i2b+0x24>)
 800b564:	4805      	ldr	r0, [pc, #20]	; (800b57c <__i2b+0x28>)
 800b566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b56a:	f000 fe91 	bl	800c290 <__assert_func>
 800b56e:	2301      	movs	r3, #1
 800b570:	6144      	str	r4, [r0, #20]
 800b572:	6103      	str	r3, [r0, #16]
 800b574:	bd10      	pop	{r4, pc}
 800b576:	bf00      	nop
 800b578:	0800c82b 	.word	0x0800c82b
 800b57c:	0800c89c 	.word	0x0800c89c

0800b580 <__multiply>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	4691      	mov	r9, r2
 800b586:	690a      	ldr	r2, [r1, #16]
 800b588:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	bfb8      	it	lt
 800b590:	460b      	movlt	r3, r1
 800b592:	460c      	mov	r4, r1
 800b594:	bfbc      	itt	lt
 800b596:	464c      	movlt	r4, r9
 800b598:	4699      	movlt	r9, r3
 800b59a:	6927      	ldr	r7, [r4, #16]
 800b59c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5a0:	68a3      	ldr	r3, [r4, #8]
 800b5a2:	6861      	ldr	r1, [r4, #4]
 800b5a4:	eb07 060a 	add.w	r6, r7, sl
 800b5a8:	42b3      	cmp	r3, r6
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	bfb8      	it	lt
 800b5ae:	3101      	addlt	r1, #1
 800b5b0:	f7ff fed8 	bl	800b364 <_Balloc>
 800b5b4:	b930      	cbnz	r0, 800b5c4 <__multiply+0x44>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	4b44      	ldr	r3, [pc, #272]	; (800b6cc <__multiply+0x14c>)
 800b5ba:	4845      	ldr	r0, [pc, #276]	; (800b6d0 <__multiply+0x150>)
 800b5bc:	f240 115d 	movw	r1, #349	; 0x15d
 800b5c0:	f000 fe66 	bl	800c290 <__assert_func>
 800b5c4:	f100 0514 	add.w	r5, r0, #20
 800b5c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4543      	cmp	r3, r8
 800b5d2:	d321      	bcc.n	800b618 <__multiply+0x98>
 800b5d4:	f104 0314 	add.w	r3, r4, #20
 800b5d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5dc:	f109 0314 	add.w	r3, r9, #20
 800b5e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b5e4:	9202      	str	r2, [sp, #8]
 800b5e6:	1b3a      	subs	r2, r7, r4
 800b5e8:	3a15      	subs	r2, #21
 800b5ea:	f022 0203 	bic.w	r2, r2, #3
 800b5ee:	3204      	adds	r2, #4
 800b5f0:	f104 0115 	add.w	r1, r4, #21
 800b5f4:	428f      	cmp	r7, r1
 800b5f6:	bf38      	it	cc
 800b5f8:	2204      	movcc	r2, #4
 800b5fa:	9201      	str	r2, [sp, #4]
 800b5fc:	9a02      	ldr	r2, [sp, #8]
 800b5fe:	9303      	str	r3, [sp, #12]
 800b600:	429a      	cmp	r2, r3
 800b602:	d80c      	bhi.n	800b61e <__multiply+0x9e>
 800b604:	2e00      	cmp	r6, #0
 800b606:	dd03      	ble.n	800b610 <__multiply+0x90>
 800b608:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d05a      	beq.n	800b6c6 <__multiply+0x146>
 800b610:	6106      	str	r6, [r0, #16]
 800b612:	b005      	add	sp, #20
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	f843 2b04 	str.w	r2, [r3], #4
 800b61c:	e7d8      	b.n	800b5d0 <__multiply+0x50>
 800b61e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b622:	f1ba 0f00 	cmp.w	sl, #0
 800b626:	d024      	beq.n	800b672 <__multiply+0xf2>
 800b628:	f104 0e14 	add.w	lr, r4, #20
 800b62c:	46a9      	mov	r9, r5
 800b62e:	f04f 0c00 	mov.w	ip, #0
 800b632:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b636:	f8d9 1000 	ldr.w	r1, [r9]
 800b63a:	fa1f fb82 	uxth.w	fp, r2
 800b63e:	b289      	uxth	r1, r1
 800b640:	fb0a 110b 	mla	r1, sl, fp, r1
 800b644:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b648:	f8d9 2000 	ldr.w	r2, [r9]
 800b64c:	4461      	add	r1, ip
 800b64e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b652:	fb0a c20b 	mla	r2, sl, fp, ip
 800b656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b65a:	b289      	uxth	r1, r1
 800b65c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b660:	4577      	cmp	r7, lr
 800b662:	f849 1b04 	str.w	r1, [r9], #4
 800b666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b66a:	d8e2      	bhi.n	800b632 <__multiply+0xb2>
 800b66c:	9a01      	ldr	r2, [sp, #4]
 800b66e:	f845 c002 	str.w	ip, [r5, r2]
 800b672:	9a03      	ldr	r2, [sp, #12]
 800b674:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b678:	3304      	adds	r3, #4
 800b67a:	f1b9 0f00 	cmp.w	r9, #0
 800b67e:	d020      	beq.n	800b6c2 <__multiply+0x142>
 800b680:	6829      	ldr	r1, [r5, #0]
 800b682:	f104 0c14 	add.w	ip, r4, #20
 800b686:	46ae      	mov	lr, r5
 800b688:	f04f 0a00 	mov.w	sl, #0
 800b68c:	f8bc b000 	ldrh.w	fp, [ip]
 800b690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b694:	fb09 220b 	mla	r2, r9, fp, r2
 800b698:	4492      	add	sl, r2
 800b69a:	b289      	uxth	r1, r1
 800b69c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6a0:	f84e 1b04 	str.w	r1, [lr], #4
 800b6a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6a8:	f8be 1000 	ldrh.w	r1, [lr]
 800b6ac:	0c12      	lsrs	r2, r2, #16
 800b6ae:	fb09 1102 	mla	r1, r9, r2, r1
 800b6b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b6b6:	4567      	cmp	r7, ip
 800b6b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6bc:	d8e6      	bhi.n	800b68c <__multiply+0x10c>
 800b6be:	9a01      	ldr	r2, [sp, #4]
 800b6c0:	50a9      	str	r1, [r5, r2]
 800b6c2:	3504      	adds	r5, #4
 800b6c4:	e79a      	b.n	800b5fc <__multiply+0x7c>
 800b6c6:	3e01      	subs	r6, #1
 800b6c8:	e79c      	b.n	800b604 <__multiply+0x84>
 800b6ca:	bf00      	nop
 800b6cc:	0800c82b 	.word	0x0800c82b
 800b6d0:	0800c89c 	.word	0x0800c89c

0800b6d4 <__pow5mult>:
 800b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d8:	4615      	mov	r5, r2
 800b6da:	f012 0203 	ands.w	r2, r2, #3
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	d007      	beq.n	800b6f4 <__pow5mult+0x20>
 800b6e4:	4c25      	ldr	r4, [pc, #148]	; (800b77c <__pow5mult+0xa8>)
 800b6e6:	3a01      	subs	r2, #1
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ee:	f7ff fe9b 	bl	800b428 <__multadd>
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	10ad      	asrs	r5, r5, #2
 800b6f6:	d03d      	beq.n	800b774 <__pow5mult+0xa0>
 800b6f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6fa:	b97c      	cbnz	r4, 800b71c <__pow5mult+0x48>
 800b6fc:	2010      	movs	r0, #16
 800b6fe:	f7ff fe29 	bl	800b354 <malloc>
 800b702:	4602      	mov	r2, r0
 800b704:	6270      	str	r0, [r6, #36]	; 0x24
 800b706:	b928      	cbnz	r0, 800b714 <__pow5mult+0x40>
 800b708:	4b1d      	ldr	r3, [pc, #116]	; (800b780 <__pow5mult+0xac>)
 800b70a:	481e      	ldr	r0, [pc, #120]	; (800b784 <__pow5mult+0xb0>)
 800b70c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b710:	f000 fdbe 	bl	800c290 <__assert_func>
 800b714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b718:	6004      	str	r4, [r0, #0]
 800b71a:	60c4      	str	r4, [r0, #12]
 800b71c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b724:	b94c      	cbnz	r4, 800b73a <__pow5mult+0x66>
 800b726:	f240 2171 	movw	r1, #625	; 0x271
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ff12 	bl	800b554 <__i2b>
 800b730:	2300      	movs	r3, #0
 800b732:	f8c8 0008 	str.w	r0, [r8, #8]
 800b736:	4604      	mov	r4, r0
 800b738:	6003      	str	r3, [r0, #0]
 800b73a:	f04f 0900 	mov.w	r9, #0
 800b73e:	07eb      	lsls	r3, r5, #31
 800b740:	d50a      	bpl.n	800b758 <__pow5mult+0x84>
 800b742:	4639      	mov	r1, r7
 800b744:	4622      	mov	r2, r4
 800b746:	4630      	mov	r0, r6
 800b748:	f7ff ff1a 	bl	800b580 <__multiply>
 800b74c:	4639      	mov	r1, r7
 800b74e:	4680      	mov	r8, r0
 800b750:	4630      	mov	r0, r6
 800b752:	f7ff fe47 	bl	800b3e4 <_Bfree>
 800b756:	4647      	mov	r7, r8
 800b758:	106d      	asrs	r5, r5, #1
 800b75a:	d00b      	beq.n	800b774 <__pow5mult+0xa0>
 800b75c:	6820      	ldr	r0, [r4, #0]
 800b75e:	b938      	cbnz	r0, 800b770 <__pow5mult+0x9c>
 800b760:	4622      	mov	r2, r4
 800b762:	4621      	mov	r1, r4
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff ff0b 	bl	800b580 <__multiply>
 800b76a:	6020      	str	r0, [r4, #0]
 800b76c:	f8c0 9000 	str.w	r9, [r0]
 800b770:	4604      	mov	r4, r0
 800b772:	e7e4      	b.n	800b73e <__pow5mult+0x6a>
 800b774:	4638      	mov	r0, r7
 800b776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77a:	bf00      	nop
 800b77c:	0800c9e8 	.word	0x0800c9e8
 800b780:	0800c7b9 	.word	0x0800c7b9
 800b784:	0800c89c 	.word	0x0800c89c

0800b788 <__lshift>:
 800b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	460c      	mov	r4, r1
 800b78e:	6849      	ldr	r1, [r1, #4]
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	4607      	mov	r7, r0
 800b79a:	4691      	mov	r9, r2
 800b79c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7a0:	f108 0601 	add.w	r6, r8, #1
 800b7a4:	42b3      	cmp	r3, r6
 800b7a6:	db0b      	blt.n	800b7c0 <__lshift+0x38>
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7ff fddb 	bl	800b364 <_Balloc>
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	b948      	cbnz	r0, 800b7c6 <__lshift+0x3e>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	4b2a      	ldr	r3, [pc, #168]	; (800b860 <__lshift+0xd8>)
 800b7b6:	482b      	ldr	r0, [pc, #172]	; (800b864 <__lshift+0xdc>)
 800b7b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b7bc:	f000 fd68 	bl	800c290 <__assert_func>
 800b7c0:	3101      	adds	r1, #1
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	e7ee      	b.n	800b7a4 <__lshift+0x1c>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f100 0114 	add.w	r1, r0, #20
 800b7cc:	f100 0210 	add.w	r2, r0, #16
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	4553      	cmp	r3, sl
 800b7d4:	db37      	blt.n	800b846 <__lshift+0xbe>
 800b7d6:	6920      	ldr	r0, [r4, #16]
 800b7d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7dc:	f104 0314 	add.w	r3, r4, #20
 800b7e0:	f019 091f 	ands.w	r9, r9, #31
 800b7e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b7ec:	d02f      	beq.n	800b84e <__lshift+0xc6>
 800b7ee:	f1c9 0e20 	rsb	lr, r9, #32
 800b7f2:	468a      	mov	sl, r1
 800b7f4:	f04f 0c00 	mov.w	ip, #0
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	fa02 f209 	lsl.w	r2, r2, r9
 800b7fe:	ea42 020c 	orr.w	r2, r2, ip
 800b802:	f84a 2b04 	str.w	r2, [sl], #4
 800b806:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80a:	4298      	cmp	r0, r3
 800b80c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b810:	d8f2      	bhi.n	800b7f8 <__lshift+0x70>
 800b812:	1b03      	subs	r3, r0, r4
 800b814:	3b15      	subs	r3, #21
 800b816:	f023 0303 	bic.w	r3, r3, #3
 800b81a:	3304      	adds	r3, #4
 800b81c:	f104 0215 	add.w	r2, r4, #21
 800b820:	4290      	cmp	r0, r2
 800b822:	bf38      	it	cc
 800b824:	2304      	movcc	r3, #4
 800b826:	f841 c003 	str.w	ip, [r1, r3]
 800b82a:	f1bc 0f00 	cmp.w	ip, #0
 800b82e:	d001      	beq.n	800b834 <__lshift+0xac>
 800b830:	f108 0602 	add.w	r6, r8, #2
 800b834:	3e01      	subs	r6, #1
 800b836:	4638      	mov	r0, r7
 800b838:	612e      	str	r6, [r5, #16]
 800b83a:	4621      	mov	r1, r4
 800b83c:	f7ff fdd2 	bl	800b3e4 <_Bfree>
 800b840:	4628      	mov	r0, r5
 800b842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b846:	f842 0f04 	str.w	r0, [r2, #4]!
 800b84a:	3301      	adds	r3, #1
 800b84c:	e7c1      	b.n	800b7d2 <__lshift+0x4a>
 800b84e:	3904      	subs	r1, #4
 800b850:	f853 2b04 	ldr.w	r2, [r3], #4
 800b854:	f841 2f04 	str.w	r2, [r1, #4]!
 800b858:	4298      	cmp	r0, r3
 800b85a:	d8f9      	bhi.n	800b850 <__lshift+0xc8>
 800b85c:	e7ea      	b.n	800b834 <__lshift+0xac>
 800b85e:	bf00      	nop
 800b860:	0800c82b 	.word	0x0800c82b
 800b864:	0800c89c 	.word	0x0800c89c

0800b868 <__mcmp>:
 800b868:	b530      	push	{r4, r5, lr}
 800b86a:	6902      	ldr	r2, [r0, #16]
 800b86c:	690c      	ldr	r4, [r1, #16]
 800b86e:	1b12      	subs	r2, r2, r4
 800b870:	d10e      	bne.n	800b890 <__mcmp+0x28>
 800b872:	f100 0314 	add.w	r3, r0, #20
 800b876:	3114      	adds	r1, #20
 800b878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b87c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b888:	42a5      	cmp	r5, r4
 800b88a:	d003      	beq.n	800b894 <__mcmp+0x2c>
 800b88c:	d305      	bcc.n	800b89a <__mcmp+0x32>
 800b88e:	2201      	movs	r2, #1
 800b890:	4610      	mov	r0, r2
 800b892:	bd30      	pop	{r4, r5, pc}
 800b894:	4283      	cmp	r3, r0
 800b896:	d3f3      	bcc.n	800b880 <__mcmp+0x18>
 800b898:	e7fa      	b.n	800b890 <__mcmp+0x28>
 800b89a:	f04f 32ff 	mov.w	r2, #4294967295
 800b89e:	e7f7      	b.n	800b890 <__mcmp+0x28>

0800b8a0 <__mdiff>:
 800b8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4690      	mov	r8, r2
 800b8ae:	f7ff ffdb 	bl	800b868 <__mcmp>
 800b8b2:	1e05      	subs	r5, r0, #0
 800b8b4:	d110      	bne.n	800b8d8 <__mdiff+0x38>
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f7ff fd53 	bl	800b364 <_Balloc>
 800b8be:	b930      	cbnz	r0, 800b8ce <__mdiff+0x2e>
 800b8c0:	4b3a      	ldr	r3, [pc, #232]	; (800b9ac <__mdiff+0x10c>)
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	f240 2132 	movw	r1, #562	; 0x232
 800b8c8:	4839      	ldr	r0, [pc, #228]	; (800b9b0 <__mdiff+0x110>)
 800b8ca:	f000 fce1 	bl	800c290 <__assert_func>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d8:	bfa4      	itt	ge
 800b8da:	4643      	movge	r3, r8
 800b8dc:	46a0      	movge	r8, r4
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8e4:	bfa6      	itte	ge
 800b8e6:	461c      	movge	r4, r3
 800b8e8:	2500      	movge	r5, #0
 800b8ea:	2501      	movlt	r5, #1
 800b8ec:	f7ff fd3a 	bl	800b364 <_Balloc>
 800b8f0:	b920      	cbnz	r0, 800b8fc <__mdiff+0x5c>
 800b8f2:	4b2e      	ldr	r3, [pc, #184]	; (800b9ac <__mdiff+0x10c>)
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8fa:	e7e5      	b.n	800b8c8 <__mdiff+0x28>
 800b8fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b900:	6926      	ldr	r6, [r4, #16]
 800b902:	60c5      	str	r5, [r0, #12]
 800b904:	f104 0914 	add.w	r9, r4, #20
 800b908:	f108 0514 	add.w	r5, r8, #20
 800b90c:	f100 0e14 	add.w	lr, r0, #20
 800b910:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b914:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b918:	f108 0210 	add.w	r2, r8, #16
 800b91c:	46f2      	mov	sl, lr
 800b91e:	2100      	movs	r1, #0
 800b920:	f859 3b04 	ldr.w	r3, [r9], #4
 800b924:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b928:	fa1f f883 	uxth.w	r8, r3
 800b92c:	fa11 f18b 	uxtah	r1, r1, fp
 800b930:	0c1b      	lsrs	r3, r3, #16
 800b932:	eba1 0808 	sub.w	r8, r1, r8
 800b936:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b93a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b93e:	fa1f f888 	uxth.w	r8, r8
 800b942:	1419      	asrs	r1, r3, #16
 800b944:	454e      	cmp	r6, r9
 800b946:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b94a:	f84a 3b04 	str.w	r3, [sl], #4
 800b94e:	d8e7      	bhi.n	800b920 <__mdiff+0x80>
 800b950:	1b33      	subs	r3, r6, r4
 800b952:	3b15      	subs	r3, #21
 800b954:	f023 0303 	bic.w	r3, r3, #3
 800b958:	3304      	adds	r3, #4
 800b95a:	3415      	adds	r4, #21
 800b95c:	42a6      	cmp	r6, r4
 800b95e:	bf38      	it	cc
 800b960:	2304      	movcc	r3, #4
 800b962:	441d      	add	r5, r3
 800b964:	4473      	add	r3, lr
 800b966:	469e      	mov	lr, r3
 800b968:	462e      	mov	r6, r5
 800b96a:	4566      	cmp	r6, ip
 800b96c:	d30e      	bcc.n	800b98c <__mdiff+0xec>
 800b96e:	f10c 0203 	add.w	r2, ip, #3
 800b972:	1b52      	subs	r2, r2, r5
 800b974:	f022 0203 	bic.w	r2, r2, #3
 800b978:	3d03      	subs	r5, #3
 800b97a:	45ac      	cmp	ip, r5
 800b97c:	bf38      	it	cc
 800b97e:	2200      	movcc	r2, #0
 800b980:	441a      	add	r2, r3
 800b982:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b986:	b17b      	cbz	r3, 800b9a8 <__mdiff+0x108>
 800b988:	6107      	str	r7, [r0, #16]
 800b98a:	e7a3      	b.n	800b8d4 <__mdiff+0x34>
 800b98c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b990:	fa11 f288 	uxtah	r2, r1, r8
 800b994:	1414      	asrs	r4, r2, #16
 800b996:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b99a:	b292      	uxth	r2, r2
 800b99c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9a0:	f84e 2b04 	str.w	r2, [lr], #4
 800b9a4:	1421      	asrs	r1, r4, #16
 800b9a6:	e7e0      	b.n	800b96a <__mdiff+0xca>
 800b9a8:	3f01      	subs	r7, #1
 800b9aa:	e7ea      	b.n	800b982 <__mdiff+0xe2>
 800b9ac:	0800c82b 	.word	0x0800c82b
 800b9b0:	0800c89c 	.word	0x0800c89c

0800b9b4 <__d2b>:
 800b9b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	4689      	mov	r9, r1
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	ec57 6b10 	vmov	r6, r7, d0
 800b9c0:	4690      	mov	r8, r2
 800b9c2:	f7ff fccf 	bl	800b364 <_Balloc>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	b930      	cbnz	r0, 800b9d8 <__d2b+0x24>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	4b25      	ldr	r3, [pc, #148]	; (800ba64 <__d2b+0xb0>)
 800b9ce:	4826      	ldr	r0, [pc, #152]	; (800ba68 <__d2b+0xb4>)
 800b9d0:	f240 310a 	movw	r1, #778	; 0x30a
 800b9d4:	f000 fc5c 	bl	800c290 <__assert_func>
 800b9d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9e0:	bb35      	cbnz	r5, 800ba30 <__d2b+0x7c>
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	d028      	beq.n	800ba3a <__d2b+0x86>
 800b9e8:	4668      	mov	r0, sp
 800b9ea:	9600      	str	r6, [sp, #0]
 800b9ec:	f7ff fd82 	bl	800b4f4 <__lo0bits>
 800b9f0:	9900      	ldr	r1, [sp, #0]
 800b9f2:	b300      	cbz	r0, 800ba36 <__d2b+0x82>
 800b9f4:	9a01      	ldr	r2, [sp, #4]
 800b9f6:	f1c0 0320 	rsb	r3, r0, #32
 800b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fe:	430b      	orrs	r3, r1
 800ba00:	40c2      	lsrs	r2, r0
 800ba02:	6163      	str	r3, [r4, #20]
 800ba04:	9201      	str	r2, [sp, #4]
 800ba06:	9b01      	ldr	r3, [sp, #4]
 800ba08:	61a3      	str	r3, [r4, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bf14      	ite	ne
 800ba0e:	2202      	movne	r2, #2
 800ba10:	2201      	moveq	r2, #1
 800ba12:	6122      	str	r2, [r4, #16]
 800ba14:	b1d5      	cbz	r5, 800ba4c <__d2b+0x98>
 800ba16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba1a:	4405      	add	r5, r0
 800ba1c:	f8c9 5000 	str.w	r5, [r9]
 800ba20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba24:	f8c8 0000 	str.w	r0, [r8]
 800ba28:	4620      	mov	r0, r4
 800ba2a:	b003      	add	sp, #12
 800ba2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba34:	e7d5      	b.n	800b9e2 <__d2b+0x2e>
 800ba36:	6161      	str	r1, [r4, #20]
 800ba38:	e7e5      	b.n	800ba06 <__d2b+0x52>
 800ba3a:	a801      	add	r0, sp, #4
 800ba3c:	f7ff fd5a 	bl	800b4f4 <__lo0bits>
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	6163      	str	r3, [r4, #20]
 800ba44:	2201      	movs	r2, #1
 800ba46:	6122      	str	r2, [r4, #16]
 800ba48:	3020      	adds	r0, #32
 800ba4a:	e7e3      	b.n	800ba14 <__d2b+0x60>
 800ba4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba54:	f8c9 0000 	str.w	r0, [r9]
 800ba58:	6918      	ldr	r0, [r3, #16]
 800ba5a:	f7ff fd2b 	bl	800b4b4 <__hi0bits>
 800ba5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba62:	e7df      	b.n	800ba24 <__d2b+0x70>
 800ba64:	0800c82b 	.word	0x0800c82b
 800ba68:	0800c89c 	.word	0x0800c89c

0800ba6c <_calloc_r>:
 800ba6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba6e:	fba1 2402 	umull	r2, r4, r1, r2
 800ba72:	b94c      	cbnz	r4, 800ba88 <_calloc_r+0x1c>
 800ba74:	4611      	mov	r1, r2
 800ba76:	9201      	str	r2, [sp, #4]
 800ba78:	f000 f87a 	bl	800bb70 <_malloc_r>
 800ba7c:	9a01      	ldr	r2, [sp, #4]
 800ba7e:	4605      	mov	r5, r0
 800ba80:	b930      	cbnz	r0, 800ba90 <_calloc_r+0x24>
 800ba82:	4628      	mov	r0, r5
 800ba84:	b003      	add	sp, #12
 800ba86:	bd30      	pop	{r4, r5, pc}
 800ba88:	220c      	movs	r2, #12
 800ba8a:	6002      	str	r2, [r0, #0]
 800ba8c:	2500      	movs	r5, #0
 800ba8e:	e7f8      	b.n	800ba82 <_calloc_r+0x16>
 800ba90:	4621      	mov	r1, r4
 800ba92:	f7fd fd11 	bl	80094b8 <memset>
 800ba96:	e7f4      	b.n	800ba82 <_calloc_r+0x16>

0800ba98 <_free_r>:
 800ba98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba9a:	2900      	cmp	r1, #0
 800ba9c:	d044      	beq.n	800bb28 <_free_r+0x90>
 800ba9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa2:	9001      	str	r0, [sp, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f1a1 0404 	sub.w	r4, r1, #4
 800baaa:	bfb8      	it	lt
 800baac:	18e4      	addlt	r4, r4, r3
 800baae:	f000 fc8f 	bl	800c3d0 <__malloc_lock>
 800bab2:	4a1e      	ldr	r2, [pc, #120]	; (800bb2c <_free_r+0x94>)
 800bab4:	9801      	ldr	r0, [sp, #4]
 800bab6:	6813      	ldr	r3, [r2, #0]
 800bab8:	b933      	cbnz	r3, 800bac8 <_free_r+0x30>
 800baba:	6063      	str	r3, [r4, #4]
 800babc:	6014      	str	r4, [r2, #0]
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac4:	f000 bc8a 	b.w	800c3dc <__malloc_unlock>
 800bac8:	42a3      	cmp	r3, r4
 800baca:	d908      	bls.n	800bade <_free_r+0x46>
 800bacc:	6825      	ldr	r5, [r4, #0]
 800bace:	1961      	adds	r1, r4, r5
 800bad0:	428b      	cmp	r3, r1
 800bad2:	bf01      	itttt	eq
 800bad4:	6819      	ldreq	r1, [r3, #0]
 800bad6:	685b      	ldreq	r3, [r3, #4]
 800bad8:	1949      	addeq	r1, r1, r5
 800bada:	6021      	streq	r1, [r4, #0]
 800badc:	e7ed      	b.n	800baba <_free_r+0x22>
 800bade:	461a      	mov	r2, r3
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	b10b      	cbz	r3, 800bae8 <_free_r+0x50>
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d9fa      	bls.n	800bade <_free_r+0x46>
 800bae8:	6811      	ldr	r1, [r2, #0]
 800baea:	1855      	adds	r5, r2, r1
 800baec:	42a5      	cmp	r5, r4
 800baee:	d10b      	bne.n	800bb08 <_free_r+0x70>
 800baf0:	6824      	ldr	r4, [r4, #0]
 800baf2:	4421      	add	r1, r4
 800baf4:	1854      	adds	r4, r2, r1
 800baf6:	42a3      	cmp	r3, r4
 800baf8:	6011      	str	r1, [r2, #0]
 800bafa:	d1e0      	bne.n	800babe <_free_r+0x26>
 800bafc:	681c      	ldr	r4, [r3, #0]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	6053      	str	r3, [r2, #4]
 800bb02:	4421      	add	r1, r4
 800bb04:	6011      	str	r1, [r2, #0]
 800bb06:	e7da      	b.n	800babe <_free_r+0x26>
 800bb08:	d902      	bls.n	800bb10 <_free_r+0x78>
 800bb0a:	230c      	movs	r3, #12
 800bb0c:	6003      	str	r3, [r0, #0]
 800bb0e:	e7d6      	b.n	800babe <_free_r+0x26>
 800bb10:	6825      	ldr	r5, [r4, #0]
 800bb12:	1961      	adds	r1, r4, r5
 800bb14:	428b      	cmp	r3, r1
 800bb16:	bf04      	itt	eq
 800bb18:	6819      	ldreq	r1, [r3, #0]
 800bb1a:	685b      	ldreq	r3, [r3, #4]
 800bb1c:	6063      	str	r3, [r4, #4]
 800bb1e:	bf04      	itt	eq
 800bb20:	1949      	addeq	r1, r1, r5
 800bb22:	6021      	streq	r1, [r4, #0]
 800bb24:	6054      	str	r4, [r2, #4]
 800bb26:	e7ca      	b.n	800babe <_free_r+0x26>
 800bb28:	b003      	add	sp, #12
 800bb2a:	bd30      	pop	{r4, r5, pc}
 800bb2c:	20000840 	.word	0x20000840

0800bb30 <sbrk_aligned>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	4e0e      	ldr	r6, [pc, #56]	; (800bb6c <sbrk_aligned+0x3c>)
 800bb34:	460c      	mov	r4, r1
 800bb36:	6831      	ldr	r1, [r6, #0]
 800bb38:	4605      	mov	r5, r0
 800bb3a:	b911      	cbnz	r1, 800bb42 <sbrk_aligned+0x12>
 800bb3c:	f000 fb42 	bl	800c1c4 <_sbrk_r>
 800bb40:	6030      	str	r0, [r6, #0]
 800bb42:	4621      	mov	r1, r4
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 fb3d 	bl	800c1c4 <_sbrk_r>
 800bb4a:	1c43      	adds	r3, r0, #1
 800bb4c:	d00a      	beq.n	800bb64 <sbrk_aligned+0x34>
 800bb4e:	1cc4      	adds	r4, r0, #3
 800bb50:	f024 0403 	bic.w	r4, r4, #3
 800bb54:	42a0      	cmp	r0, r4
 800bb56:	d007      	beq.n	800bb68 <sbrk_aligned+0x38>
 800bb58:	1a21      	subs	r1, r4, r0
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	f000 fb32 	bl	800c1c4 <_sbrk_r>
 800bb60:	3001      	adds	r0, #1
 800bb62:	d101      	bne.n	800bb68 <sbrk_aligned+0x38>
 800bb64:	f04f 34ff 	mov.w	r4, #4294967295
 800bb68:	4620      	mov	r0, r4
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	20000844 	.word	0x20000844

0800bb70 <_malloc_r>:
 800bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb74:	1ccd      	adds	r5, r1, #3
 800bb76:	f025 0503 	bic.w	r5, r5, #3
 800bb7a:	3508      	adds	r5, #8
 800bb7c:	2d0c      	cmp	r5, #12
 800bb7e:	bf38      	it	cc
 800bb80:	250c      	movcc	r5, #12
 800bb82:	2d00      	cmp	r5, #0
 800bb84:	4607      	mov	r7, r0
 800bb86:	db01      	blt.n	800bb8c <_malloc_r+0x1c>
 800bb88:	42a9      	cmp	r1, r5
 800bb8a:	d905      	bls.n	800bb98 <_malloc_r+0x28>
 800bb8c:	230c      	movs	r3, #12
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	2600      	movs	r6, #0
 800bb92:	4630      	mov	r0, r6
 800bb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb98:	4e2e      	ldr	r6, [pc, #184]	; (800bc54 <_malloc_r+0xe4>)
 800bb9a:	f000 fc19 	bl	800c3d0 <__malloc_lock>
 800bb9e:	6833      	ldr	r3, [r6, #0]
 800bba0:	461c      	mov	r4, r3
 800bba2:	bb34      	cbnz	r4, 800bbf2 <_malloc_r+0x82>
 800bba4:	4629      	mov	r1, r5
 800bba6:	4638      	mov	r0, r7
 800bba8:	f7ff ffc2 	bl	800bb30 <sbrk_aligned>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	4604      	mov	r4, r0
 800bbb0:	d14d      	bne.n	800bc4e <_malloc_r+0xde>
 800bbb2:	6834      	ldr	r4, [r6, #0]
 800bbb4:	4626      	mov	r6, r4
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	d140      	bne.n	800bc3c <_malloc_r+0xcc>
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	eb04 0803 	add.w	r8, r4, r3
 800bbc4:	f000 fafe 	bl	800c1c4 <_sbrk_r>
 800bbc8:	4580      	cmp	r8, r0
 800bbca:	d13a      	bne.n	800bc42 <_malloc_r+0xd2>
 800bbcc:	6821      	ldr	r1, [r4, #0]
 800bbce:	3503      	adds	r5, #3
 800bbd0:	1a6d      	subs	r5, r5, r1
 800bbd2:	f025 0503 	bic.w	r5, r5, #3
 800bbd6:	3508      	adds	r5, #8
 800bbd8:	2d0c      	cmp	r5, #12
 800bbda:	bf38      	it	cc
 800bbdc:	250c      	movcc	r5, #12
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f7ff ffa5 	bl	800bb30 <sbrk_aligned>
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d02b      	beq.n	800bc42 <_malloc_r+0xd2>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	442b      	add	r3, r5
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	e00e      	b.n	800bc10 <_malloc_r+0xa0>
 800bbf2:	6822      	ldr	r2, [r4, #0]
 800bbf4:	1b52      	subs	r2, r2, r5
 800bbf6:	d41e      	bmi.n	800bc36 <_malloc_r+0xc6>
 800bbf8:	2a0b      	cmp	r2, #11
 800bbfa:	d916      	bls.n	800bc2a <_malloc_r+0xba>
 800bbfc:	1961      	adds	r1, r4, r5
 800bbfe:	42a3      	cmp	r3, r4
 800bc00:	6025      	str	r5, [r4, #0]
 800bc02:	bf18      	it	ne
 800bc04:	6059      	strne	r1, [r3, #4]
 800bc06:	6863      	ldr	r3, [r4, #4]
 800bc08:	bf08      	it	eq
 800bc0a:	6031      	streq	r1, [r6, #0]
 800bc0c:	5162      	str	r2, [r4, r5]
 800bc0e:	604b      	str	r3, [r1, #4]
 800bc10:	4638      	mov	r0, r7
 800bc12:	f104 060b 	add.w	r6, r4, #11
 800bc16:	f000 fbe1 	bl	800c3dc <__malloc_unlock>
 800bc1a:	f026 0607 	bic.w	r6, r6, #7
 800bc1e:	1d23      	adds	r3, r4, #4
 800bc20:	1af2      	subs	r2, r6, r3
 800bc22:	d0b6      	beq.n	800bb92 <_malloc_r+0x22>
 800bc24:	1b9b      	subs	r3, r3, r6
 800bc26:	50a3      	str	r3, [r4, r2]
 800bc28:	e7b3      	b.n	800bb92 <_malloc_r+0x22>
 800bc2a:	6862      	ldr	r2, [r4, #4]
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	bf0c      	ite	eq
 800bc30:	6032      	streq	r2, [r6, #0]
 800bc32:	605a      	strne	r2, [r3, #4]
 800bc34:	e7ec      	b.n	800bc10 <_malloc_r+0xa0>
 800bc36:	4623      	mov	r3, r4
 800bc38:	6864      	ldr	r4, [r4, #4]
 800bc3a:	e7b2      	b.n	800bba2 <_malloc_r+0x32>
 800bc3c:	4634      	mov	r4, r6
 800bc3e:	6876      	ldr	r6, [r6, #4]
 800bc40:	e7b9      	b.n	800bbb6 <_malloc_r+0x46>
 800bc42:	230c      	movs	r3, #12
 800bc44:	603b      	str	r3, [r7, #0]
 800bc46:	4638      	mov	r0, r7
 800bc48:	f000 fbc8 	bl	800c3dc <__malloc_unlock>
 800bc4c:	e7a1      	b.n	800bb92 <_malloc_r+0x22>
 800bc4e:	6025      	str	r5, [r4, #0]
 800bc50:	e7de      	b.n	800bc10 <_malloc_r+0xa0>
 800bc52:	bf00      	nop
 800bc54:	20000840 	.word	0x20000840

0800bc58 <__ssputs_r>:
 800bc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc5c:	688e      	ldr	r6, [r1, #8]
 800bc5e:	429e      	cmp	r6, r3
 800bc60:	4682      	mov	sl, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	4690      	mov	r8, r2
 800bc66:	461f      	mov	r7, r3
 800bc68:	d838      	bhi.n	800bcdc <__ssputs_r+0x84>
 800bc6a:	898a      	ldrh	r2, [r1, #12]
 800bc6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc70:	d032      	beq.n	800bcd8 <__ssputs_r+0x80>
 800bc72:	6825      	ldr	r5, [r4, #0]
 800bc74:	6909      	ldr	r1, [r1, #16]
 800bc76:	eba5 0901 	sub.w	r9, r5, r1
 800bc7a:	6965      	ldr	r5, [r4, #20]
 800bc7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc84:	3301      	adds	r3, #1
 800bc86:	444b      	add	r3, r9
 800bc88:	106d      	asrs	r5, r5, #1
 800bc8a:	429d      	cmp	r5, r3
 800bc8c:	bf38      	it	cc
 800bc8e:	461d      	movcc	r5, r3
 800bc90:	0553      	lsls	r3, r2, #21
 800bc92:	d531      	bpl.n	800bcf8 <__ssputs_r+0xa0>
 800bc94:	4629      	mov	r1, r5
 800bc96:	f7ff ff6b 	bl	800bb70 <_malloc_r>
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	b950      	cbnz	r0, 800bcb4 <__ssputs_r+0x5c>
 800bc9e:	230c      	movs	r3, #12
 800bca0:	f8ca 3000 	str.w	r3, [sl]
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcaa:	81a3      	strh	r3, [r4, #12]
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb4:	6921      	ldr	r1, [r4, #16]
 800bcb6:	464a      	mov	r2, r9
 800bcb8:	f7fd fbf0 	bl	800949c <memcpy>
 800bcbc:	89a3      	ldrh	r3, [r4, #12]
 800bcbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc6:	81a3      	strh	r3, [r4, #12]
 800bcc8:	6126      	str	r6, [r4, #16]
 800bcca:	6165      	str	r5, [r4, #20]
 800bccc:	444e      	add	r6, r9
 800bcce:	eba5 0509 	sub.w	r5, r5, r9
 800bcd2:	6026      	str	r6, [r4, #0]
 800bcd4:	60a5      	str	r5, [r4, #8]
 800bcd6:	463e      	mov	r6, r7
 800bcd8:	42be      	cmp	r6, r7
 800bcda:	d900      	bls.n	800bcde <__ssputs_r+0x86>
 800bcdc:	463e      	mov	r6, r7
 800bcde:	6820      	ldr	r0, [r4, #0]
 800bce0:	4632      	mov	r2, r6
 800bce2:	4641      	mov	r1, r8
 800bce4:	f000 fb5a 	bl	800c39c <memmove>
 800bce8:	68a3      	ldr	r3, [r4, #8]
 800bcea:	1b9b      	subs	r3, r3, r6
 800bcec:	60a3      	str	r3, [r4, #8]
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	4433      	add	r3, r6
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	e7db      	b.n	800bcb0 <__ssputs_r+0x58>
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	f000 fb75 	bl	800c3e8 <_realloc_r>
 800bcfe:	4606      	mov	r6, r0
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d1e1      	bne.n	800bcc8 <__ssputs_r+0x70>
 800bd04:	6921      	ldr	r1, [r4, #16]
 800bd06:	4650      	mov	r0, sl
 800bd08:	f7ff fec6 	bl	800ba98 <_free_r>
 800bd0c:	e7c7      	b.n	800bc9e <__ssputs_r+0x46>
	...

0800bd10 <_svfiprintf_r>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	4698      	mov	r8, r3
 800bd16:	898b      	ldrh	r3, [r1, #12]
 800bd18:	061b      	lsls	r3, r3, #24
 800bd1a:	b09d      	sub	sp, #116	; 0x74
 800bd1c:	4607      	mov	r7, r0
 800bd1e:	460d      	mov	r5, r1
 800bd20:	4614      	mov	r4, r2
 800bd22:	d50e      	bpl.n	800bd42 <_svfiprintf_r+0x32>
 800bd24:	690b      	ldr	r3, [r1, #16]
 800bd26:	b963      	cbnz	r3, 800bd42 <_svfiprintf_r+0x32>
 800bd28:	2140      	movs	r1, #64	; 0x40
 800bd2a:	f7ff ff21 	bl	800bb70 <_malloc_r>
 800bd2e:	6028      	str	r0, [r5, #0]
 800bd30:	6128      	str	r0, [r5, #16]
 800bd32:	b920      	cbnz	r0, 800bd3e <_svfiprintf_r+0x2e>
 800bd34:	230c      	movs	r3, #12
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3c:	e0d1      	b.n	800bee2 <_svfiprintf_r+0x1d2>
 800bd3e:	2340      	movs	r3, #64	; 0x40
 800bd40:	616b      	str	r3, [r5, #20]
 800bd42:	2300      	movs	r3, #0
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	2320      	movs	r3, #32
 800bd48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd50:	2330      	movs	r3, #48	; 0x30
 800bd52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800befc <_svfiprintf_r+0x1ec>
 800bd56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd5a:	f04f 0901 	mov.w	r9, #1
 800bd5e:	4623      	mov	r3, r4
 800bd60:	469a      	mov	sl, r3
 800bd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd66:	b10a      	cbz	r2, 800bd6c <_svfiprintf_r+0x5c>
 800bd68:	2a25      	cmp	r2, #37	; 0x25
 800bd6a:	d1f9      	bne.n	800bd60 <_svfiprintf_r+0x50>
 800bd6c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd70:	d00b      	beq.n	800bd8a <_svfiprintf_r+0x7a>
 800bd72:	465b      	mov	r3, fp
 800bd74:	4622      	mov	r2, r4
 800bd76:	4629      	mov	r1, r5
 800bd78:	4638      	mov	r0, r7
 800bd7a:	f7ff ff6d 	bl	800bc58 <__ssputs_r>
 800bd7e:	3001      	adds	r0, #1
 800bd80:	f000 80aa 	beq.w	800bed8 <_svfiprintf_r+0x1c8>
 800bd84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd86:	445a      	add	r2, fp
 800bd88:	9209      	str	r2, [sp, #36]	; 0x24
 800bd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80a2 	beq.w	800bed8 <_svfiprintf_r+0x1c8>
 800bd94:	2300      	movs	r3, #0
 800bd96:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd9e:	f10a 0a01 	add.w	sl, sl, #1
 800bda2:	9304      	str	r3, [sp, #16]
 800bda4:	9307      	str	r3, [sp, #28]
 800bda6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdaa:	931a      	str	r3, [sp, #104]	; 0x68
 800bdac:	4654      	mov	r4, sl
 800bdae:	2205      	movs	r2, #5
 800bdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb4:	4851      	ldr	r0, [pc, #324]	; (800befc <_svfiprintf_r+0x1ec>)
 800bdb6:	f7f4 fa13 	bl	80001e0 <memchr>
 800bdba:	9a04      	ldr	r2, [sp, #16]
 800bdbc:	b9d8      	cbnz	r0, 800bdf6 <_svfiprintf_r+0xe6>
 800bdbe:	06d0      	lsls	r0, r2, #27
 800bdc0:	bf44      	itt	mi
 800bdc2:	2320      	movmi	r3, #32
 800bdc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdc8:	0711      	lsls	r1, r2, #28
 800bdca:	bf44      	itt	mi
 800bdcc:	232b      	movmi	r3, #43	; 0x2b
 800bdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdd6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd8:	d015      	beq.n	800be06 <_svfiprintf_r+0xf6>
 800bdda:	9a07      	ldr	r2, [sp, #28]
 800bddc:	4654      	mov	r4, sl
 800bdde:	2000      	movs	r0, #0
 800bde0:	f04f 0c0a 	mov.w	ip, #10
 800bde4:	4621      	mov	r1, r4
 800bde6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdea:	3b30      	subs	r3, #48	; 0x30
 800bdec:	2b09      	cmp	r3, #9
 800bdee:	d94e      	bls.n	800be8e <_svfiprintf_r+0x17e>
 800bdf0:	b1b0      	cbz	r0, 800be20 <_svfiprintf_r+0x110>
 800bdf2:	9207      	str	r2, [sp, #28]
 800bdf4:	e014      	b.n	800be20 <_svfiprintf_r+0x110>
 800bdf6:	eba0 0308 	sub.w	r3, r0, r8
 800bdfa:	fa09 f303 	lsl.w	r3, r9, r3
 800bdfe:	4313      	orrs	r3, r2
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	46a2      	mov	sl, r4
 800be04:	e7d2      	b.n	800bdac <_svfiprintf_r+0x9c>
 800be06:	9b03      	ldr	r3, [sp, #12]
 800be08:	1d19      	adds	r1, r3, #4
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	9103      	str	r1, [sp, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	bfbb      	ittet	lt
 800be12:	425b      	neglt	r3, r3
 800be14:	f042 0202 	orrlt.w	r2, r2, #2
 800be18:	9307      	strge	r3, [sp, #28]
 800be1a:	9307      	strlt	r3, [sp, #28]
 800be1c:	bfb8      	it	lt
 800be1e:	9204      	strlt	r2, [sp, #16]
 800be20:	7823      	ldrb	r3, [r4, #0]
 800be22:	2b2e      	cmp	r3, #46	; 0x2e
 800be24:	d10c      	bne.n	800be40 <_svfiprintf_r+0x130>
 800be26:	7863      	ldrb	r3, [r4, #1]
 800be28:	2b2a      	cmp	r3, #42	; 0x2a
 800be2a:	d135      	bne.n	800be98 <_svfiprintf_r+0x188>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	1d1a      	adds	r2, r3, #4
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	9203      	str	r2, [sp, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	bfb8      	it	lt
 800be38:	f04f 33ff 	movlt.w	r3, #4294967295
 800be3c:	3402      	adds	r4, #2
 800be3e:	9305      	str	r3, [sp, #20]
 800be40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf0c <_svfiprintf_r+0x1fc>
 800be44:	7821      	ldrb	r1, [r4, #0]
 800be46:	2203      	movs	r2, #3
 800be48:	4650      	mov	r0, sl
 800be4a:	f7f4 f9c9 	bl	80001e0 <memchr>
 800be4e:	b140      	cbz	r0, 800be62 <_svfiprintf_r+0x152>
 800be50:	2340      	movs	r3, #64	; 0x40
 800be52:	eba0 000a 	sub.w	r0, r0, sl
 800be56:	fa03 f000 	lsl.w	r0, r3, r0
 800be5a:	9b04      	ldr	r3, [sp, #16]
 800be5c:	4303      	orrs	r3, r0
 800be5e:	3401      	adds	r4, #1
 800be60:	9304      	str	r3, [sp, #16]
 800be62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be66:	4826      	ldr	r0, [pc, #152]	; (800bf00 <_svfiprintf_r+0x1f0>)
 800be68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be6c:	2206      	movs	r2, #6
 800be6e:	f7f4 f9b7 	bl	80001e0 <memchr>
 800be72:	2800      	cmp	r0, #0
 800be74:	d038      	beq.n	800bee8 <_svfiprintf_r+0x1d8>
 800be76:	4b23      	ldr	r3, [pc, #140]	; (800bf04 <_svfiprintf_r+0x1f4>)
 800be78:	bb1b      	cbnz	r3, 800bec2 <_svfiprintf_r+0x1b2>
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	3307      	adds	r3, #7
 800be7e:	f023 0307 	bic.w	r3, r3, #7
 800be82:	3308      	adds	r3, #8
 800be84:	9303      	str	r3, [sp, #12]
 800be86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be88:	4433      	add	r3, r6
 800be8a:	9309      	str	r3, [sp, #36]	; 0x24
 800be8c:	e767      	b.n	800bd5e <_svfiprintf_r+0x4e>
 800be8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be92:	460c      	mov	r4, r1
 800be94:	2001      	movs	r0, #1
 800be96:	e7a5      	b.n	800bde4 <_svfiprintf_r+0xd4>
 800be98:	2300      	movs	r3, #0
 800be9a:	3401      	adds	r4, #1
 800be9c:	9305      	str	r3, [sp, #20]
 800be9e:	4619      	mov	r1, r3
 800bea0:	f04f 0c0a 	mov.w	ip, #10
 800bea4:	4620      	mov	r0, r4
 800bea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beaa:	3a30      	subs	r2, #48	; 0x30
 800beac:	2a09      	cmp	r2, #9
 800beae:	d903      	bls.n	800beb8 <_svfiprintf_r+0x1a8>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d0c5      	beq.n	800be40 <_svfiprintf_r+0x130>
 800beb4:	9105      	str	r1, [sp, #20]
 800beb6:	e7c3      	b.n	800be40 <_svfiprintf_r+0x130>
 800beb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bebc:	4604      	mov	r4, r0
 800bebe:	2301      	movs	r3, #1
 800bec0:	e7f0      	b.n	800bea4 <_svfiprintf_r+0x194>
 800bec2:	ab03      	add	r3, sp, #12
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	462a      	mov	r2, r5
 800bec8:	4b0f      	ldr	r3, [pc, #60]	; (800bf08 <_svfiprintf_r+0x1f8>)
 800beca:	a904      	add	r1, sp, #16
 800becc:	4638      	mov	r0, r7
 800bece:	f7fd fb9b 	bl	8009608 <_printf_float>
 800bed2:	1c42      	adds	r2, r0, #1
 800bed4:	4606      	mov	r6, r0
 800bed6:	d1d6      	bne.n	800be86 <_svfiprintf_r+0x176>
 800bed8:	89ab      	ldrh	r3, [r5, #12]
 800beda:	065b      	lsls	r3, r3, #25
 800bedc:	f53f af2c 	bmi.w	800bd38 <_svfiprintf_r+0x28>
 800bee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bee2:	b01d      	add	sp, #116	; 0x74
 800bee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee8:	ab03      	add	r3, sp, #12
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	462a      	mov	r2, r5
 800beee:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <_svfiprintf_r+0x1f8>)
 800bef0:	a904      	add	r1, sp, #16
 800bef2:	4638      	mov	r0, r7
 800bef4:	f7fd fe2c 	bl	8009b50 <_printf_i>
 800bef8:	e7eb      	b.n	800bed2 <_svfiprintf_r+0x1c2>
 800befa:	bf00      	nop
 800befc:	0800c9f4 	.word	0x0800c9f4
 800bf00:	0800c9fe 	.word	0x0800c9fe
 800bf04:	08009609 	.word	0x08009609
 800bf08:	0800bc59 	.word	0x0800bc59
 800bf0c:	0800c9fa 	.word	0x0800c9fa

0800bf10 <__sfputc_r>:
 800bf10:	6893      	ldr	r3, [r2, #8]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	b410      	push	{r4}
 800bf18:	6093      	str	r3, [r2, #8]
 800bf1a:	da08      	bge.n	800bf2e <__sfputc_r+0x1e>
 800bf1c:	6994      	ldr	r4, [r2, #24]
 800bf1e:	42a3      	cmp	r3, r4
 800bf20:	db01      	blt.n	800bf26 <__sfputc_r+0x16>
 800bf22:	290a      	cmp	r1, #10
 800bf24:	d103      	bne.n	800bf2e <__sfputc_r+0x1e>
 800bf26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf2a:	f7fe b8b3 	b.w	800a094 <__swbuf_r>
 800bf2e:	6813      	ldr	r3, [r2, #0]
 800bf30:	1c58      	adds	r0, r3, #1
 800bf32:	6010      	str	r0, [r2, #0]
 800bf34:	7019      	strb	r1, [r3, #0]
 800bf36:	4608      	mov	r0, r1
 800bf38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <__sfputs_r>:
 800bf3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf40:	4606      	mov	r6, r0
 800bf42:	460f      	mov	r7, r1
 800bf44:	4614      	mov	r4, r2
 800bf46:	18d5      	adds	r5, r2, r3
 800bf48:	42ac      	cmp	r4, r5
 800bf4a:	d101      	bne.n	800bf50 <__sfputs_r+0x12>
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	e007      	b.n	800bf60 <__sfputs_r+0x22>
 800bf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf54:	463a      	mov	r2, r7
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff ffda 	bl	800bf10 <__sfputc_r>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d1f3      	bne.n	800bf48 <__sfputs_r+0xa>
 800bf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf64 <_vfiprintf_r>:
 800bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	460d      	mov	r5, r1
 800bf6a:	b09d      	sub	sp, #116	; 0x74
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	4698      	mov	r8, r3
 800bf70:	4606      	mov	r6, r0
 800bf72:	b118      	cbz	r0, 800bf7c <_vfiprintf_r+0x18>
 800bf74:	6983      	ldr	r3, [r0, #24]
 800bf76:	b90b      	cbnz	r3, 800bf7c <_vfiprintf_r+0x18>
 800bf78:	f7ff f8e2 	bl	800b140 <__sinit>
 800bf7c:	4b89      	ldr	r3, [pc, #548]	; (800c1a4 <_vfiprintf_r+0x240>)
 800bf7e:	429d      	cmp	r5, r3
 800bf80:	d11b      	bne.n	800bfba <_vfiprintf_r+0x56>
 800bf82:	6875      	ldr	r5, [r6, #4]
 800bf84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf86:	07d9      	lsls	r1, r3, #31
 800bf88:	d405      	bmi.n	800bf96 <_vfiprintf_r+0x32>
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	059a      	lsls	r2, r3, #22
 800bf8e:	d402      	bmi.n	800bf96 <_vfiprintf_r+0x32>
 800bf90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf92:	f7ff f978 	bl	800b286 <__retarget_lock_acquire_recursive>
 800bf96:	89ab      	ldrh	r3, [r5, #12]
 800bf98:	071b      	lsls	r3, r3, #28
 800bf9a:	d501      	bpl.n	800bfa0 <_vfiprintf_r+0x3c>
 800bf9c:	692b      	ldr	r3, [r5, #16]
 800bf9e:	b9eb      	cbnz	r3, 800bfdc <_vfiprintf_r+0x78>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f7fe f8c8 	bl	800a138 <__swsetup_r>
 800bfa8:	b1c0      	cbz	r0, 800bfdc <_vfiprintf_r+0x78>
 800bfaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfac:	07dc      	lsls	r4, r3, #31
 800bfae:	d50e      	bpl.n	800bfce <_vfiprintf_r+0x6a>
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb4:	b01d      	add	sp, #116	; 0x74
 800bfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfba:	4b7b      	ldr	r3, [pc, #492]	; (800c1a8 <_vfiprintf_r+0x244>)
 800bfbc:	429d      	cmp	r5, r3
 800bfbe:	d101      	bne.n	800bfc4 <_vfiprintf_r+0x60>
 800bfc0:	68b5      	ldr	r5, [r6, #8]
 800bfc2:	e7df      	b.n	800bf84 <_vfiprintf_r+0x20>
 800bfc4:	4b79      	ldr	r3, [pc, #484]	; (800c1ac <_vfiprintf_r+0x248>)
 800bfc6:	429d      	cmp	r5, r3
 800bfc8:	bf08      	it	eq
 800bfca:	68f5      	ldreq	r5, [r6, #12]
 800bfcc:	e7da      	b.n	800bf84 <_vfiprintf_r+0x20>
 800bfce:	89ab      	ldrh	r3, [r5, #12]
 800bfd0:	0598      	lsls	r0, r3, #22
 800bfd2:	d4ed      	bmi.n	800bfb0 <_vfiprintf_r+0x4c>
 800bfd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfd6:	f7ff f957 	bl	800b288 <__retarget_lock_release_recursive>
 800bfda:	e7e9      	b.n	800bfb0 <_vfiprintf_r+0x4c>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe0:	2320      	movs	r3, #32
 800bfe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfea:	2330      	movs	r3, #48	; 0x30
 800bfec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c1b0 <_vfiprintf_r+0x24c>
 800bff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bff4:	f04f 0901 	mov.w	r9, #1
 800bff8:	4623      	mov	r3, r4
 800bffa:	469a      	mov	sl, r3
 800bffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c000:	b10a      	cbz	r2, 800c006 <_vfiprintf_r+0xa2>
 800c002:	2a25      	cmp	r2, #37	; 0x25
 800c004:	d1f9      	bne.n	800bffa <_vfiprintf_r+0x96>
 800c006:	ebba 0b04 	subs.w	fp, sl, r4
 800c00a:	d00b      	beq.n	800c024 <_vfiprintf_r+0xc0>
 800c00c:	465b      	mov	r3, fp
 800c00e:	4622      	mov	r2, r4
 800c010:	4629      	mov	r1, r5
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ff93 	bl	800bf3e <__sfputs_r>
 800c018:	3001      	adds	r0, #1
 800c01a:	f000 80aa 	beq.w	800c172 <_vfiprintf_r+0x20e>
 800c01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c020:	445a      	add	r2, fp
 800c022:	9209      	str	r2, [sp, #36]	; 0x24
 800c024:	f89a 3000 	ldrb.w	r3, [sl]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f000 80a2 	beq.w	800c172 <_vfiprintf_r+0x20e>
 800c02e:	2300      	movs	r3, #0
 800c030:	f04f 32ff 	mov.w	r2, #4294967295
 800c034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c038:	f10a 0a01 	add.w	sl, sl, #1
 800c03c:	9304      	str	r3, [sp, #16]
 800c03e:	9307      	str	r3, [sp, #28]
 800c040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c044:	931a      	str	r3, [sp, #104]	; 0x68
 800c046:	4654      	mov	r4, sl
 800c048:	2205      	movs	r2, #5
 800c04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c04e:	4858      	ldr	r0, [pc, #352]	; (800c1b0 <_vfiprintf_r+0x24c>)
 800c050:	f7f4 f8c6 	bl	80001e0 <memchr>
 800c054:	9a04      	ldr	r2, [sp, #16]
 800c056:	b9d8      	cbnz	r0, 800c090 <_vfiprintf_r+0x12c>
 800c058:	06d1      	lsls	r1, r2, #27
 800c05a:	bf44      	itt	mi
 800c05c:	2320      	movmi	r3, #32
 800c05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c062:	0713      	lsls	r3, r2, #28
 800c064:	bf44      	itt	mi
 800c066:	232b      	movmi	r3, #43	; 0x2b
 800c068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c06c:	f89a 3000 	ldrb.w	r3, [sl]
 800c070:	2b2a      	cmp	r3, #42	; 0x2a
 800c072:	d015      	beq.n	800c0a0 <_vfiprintf_r+0x13c>
 800c074:	9a07      	ldr	r2, [sp, #28]
 800c076:	4654      	mov	r4, sl
 800c078:	2000      	movs	r0, #0
 800c07a:	f04f 0c0a 	mov.w	ip, #10
 800c07e:	4621      	mov	r1, r4
 800c080:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c084:	3b30      	subs	r3, #48	; 0x30
 800c086:	2b09      	cmp	r3, #9
 800c088:	d94e      	bls.n	800c128 <_vfiprintf_r+0x1c4>
 800c08a:	b1b0      	cbz	r0, 800c0ba <_vfiprintf_r+0x156>
 800c08c:	9207      	str	r2, [sp, #28]
 800c08e:	e014      	b.n	800c0ba <_vfiprintf_r+0x156>
 800c090:	eba0 0308 	sub.w	r3, r0, r8
 800c094:	fa09 f303 	lsl.w	r3, r9, r3
 800c098:	4313      	orrs	r3, r2
 800c09a:	9304      	str	r3, [sp, #16]
 800c09c:	46a2      	mov	sl, r4
 800c09e:	e7d2      	b.n	800c046 <_vfiprintf_r+0xe2>
 800c0a0:	9b03      	ldr	r3, [sp, #12]
 800c0a2:	1d19      	adds	r1, r3, #4
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	9103      	str	r1, [sp, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	bfbb      	ittet	lt
 800c0ac:	425b      	neglt	r3, r3
 800c0ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c0b2:	9307      	strge	r3, [sp, #28]
 800c0b4:	9307      	strlt	r3, [sp, #28]
 800c0b6:	bfb8      	it	lt
 800c0b8:	9204      	strlt	r2, [sp, #16]
 800c0ba:	7823      	ldrb	r3, [r4, #0]
 800c0bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c0be:	d10c      	bne.n	800c0da <_vfiprintf_r+0x176>
 800c0c0:	7863      	ldrb	r3, [r4, #1]
 800c0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0c4:	d135      	bne.n	800c132 <_vfiprintf_r+0x1ce>
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	1d1a      	adds	r2, r3, #4
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	9203      	str	r2, [sp, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	bfb8      	it	lt
 800c0d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0d6:	3402      	adds	r4, #2
 800c0d8:	9305      	str	r3, [sp, #20]
 800c0da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1c0 <_vfiprintf_r+0x25c>
 800c0de:	7821      	ldrb	r1, [r4, #0]
 800c0e0:	2203      	movs	r2, #3
 800c0e2:	4650      	mov	r0, sl
 800c0e4:	f7f4 f87c 	bl	80001e0 <memchr>
 800c0e8:	b140      	cbz	r0, 800c0fc <_vfiprintf_r+0x198>
 800c0ea:	2340      	movs	r3, #64	; 0x40
 800c0ec:	eba0 000a 	sub.w	r0, r0, sl
 800c0f0:	fa03 f000 	lsl.w	r0, r3, r0
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	4303      	orrs	r3, r0
 800c0f8:	3401      	adds	r4, #1
 800c0fa:	9304      	str	r3, [sp, #16]
 800c0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c100:	482c      	ldr	r0, [pc, #176]	; (800c1b4 <_vfiprintf_r+0x250>)
 800c102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c106:	2206      	movs	r2, #6
 800c108:	f7f4 f86a 	bl	80001e0 <memchr>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d03f      	beq.n	800c190 <_vfiprintf_r+0x22c>
 800c110:	4b29      	ldr	r3, [pc, #164]	; (800c1b8 <_vfiprintf_r+0x254>)
 800c112:	bb1b      	cbnz	r3, 800c15c <_vfiprintf_r+0x1f8>
 800c114:	9b03      	ldr	r3, [sp, #12]
 800c116:	3307      	adds	r3, #7
 800c118:	f023 0307 	bic.w	r3, r3, #7
 800c11c:	3308      	adds	r3, #8
 800c11e:	9303      	str	r3, [sp, #12]
 800c120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c122:	443b      	add	r3, r7
 800c124:	9309      	str	r3, [sp, #36]	; 0x24
 800c126:	e767      	b.n	800bff8 <_vfiprintf_r+0x94>
 800c128:	fb0c 3202 	mla	r2, ip, r2, r3
 800c12c:	460c      	mov	r4, r1
 800c12e:	2001      	movs	r0, #1
 800c130:	e7a5      	b.n	800c07e <_vfiprintf_r+0x11a>
 800c132:	2300      	movs	r3, #0
 800c134:	3401      	adds	r4, #1
 800c136:	9305      	str	r3, [sp, #20]
 800c138:	4619      	mov	r1, r3
 800c13a:	f04f 0c0a 	mov.w	ip, #10
 800c13e:	4620      	mov	r0, r4
 800c140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c144:	3a30      	subs	r2, #48	; 0x30
 800c146:	2a09      	cmp	r2, #9
 800c148:	d903      	bls.n	800c152 <_vfiprintf_r+0x1ee>
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d0c5      	beq.n	800c0da <_vfiprintf_r+0x176>
 800c14e:	9105      	str	r1, [sp, #20]
 800c150:	e7c3      	b.n	800c0da <_vfiprintf_r+0x176>
 800c152:	fb0c 2101 	mla	r1, ip, r1, r2
 800c156:	4604      	mov	r4, r0
 800c158:	2301      	movs	r3, #1
 800c15a:	e7f0      	b.n	800c13e <_vfiprintf_r+0x1da>
 800c15c:	ab03      	add	r3, sp, #12
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	462a      	mov	r2, r5
 800c162:	4b16      	ldr	r3, [pc, #88]	; (800c1bc <_vfiprintf_r+0x258>)
 800c164:	a904      	add	r1, sp, #16
 800c166:	4630      	mov	r0, r6
 800c168:	f7fd fa4e 	bl	8009608 <_printf_float>
 800c16c:	4607      	mov	r7, r0
 800c16e:	1c78      	adds	r0, r7, #1
 800c170:	d1d6      	bne.n	800c120 <_vfiprintf_r+0x1bc>
 800c172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c174:	07d9      	lsls	r1, r3, #31
 800c176:	d405      	bmi.n	800c184 <_vfiprintf_r+0x220>
 800c178:	89ab      	ldrh	r3, [r5, #12]
 800c17a:	059a      	lsls	r2, r3, #22
 800c17c:	d402      	bmi.n	800c184 <_vfiprintf_r+0x220>
 800c17e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c180:	f7ff f882 	bl	800b288 <__retarget_lock_release_recursive>
 800c184:	89ab      	ldrh	r3, [r5, #12]
 800c186:	065b      	lsls	r3, r3, #25
 800c188:	f53f af12 	bmi.w	800bfb0 <_vfiprintf_r+0x4c>
 800c18c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c18e:	e711      	b.n	800bfb4 <_vfiprintf_r+0x50>
 800c190:	ab03      	add	r3, sp, #12
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	462a      	mov	r2, r5
 800c196:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <_vfiprintf_r+0x258>)
 800c198:	a904      	add	r1, sp, #16
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7fd fcd8 	bl	8009b50 <_printf_i>
 800c1a0:	e7e4      	b.n	800c16c <_vfiprintf_r+0x208>
 800c1a2:	bf00      	nop
 800c1a4:	0800c85c 	.word	0x0800c85c
 800c1a8:	0800c87c 	.word	0x0800c87c
 800c1ac:	0800c83c 	.word	0x0800c83c
 800c1b0:	0800c9f4 	.word	0x0800c9f4
 800c1b4:	0800c9fe 	.word	0x0800c9fe
 800c1b8:	08009609 	.word	0x08009609
 800c1bc:	0800bf3f 	.word	0x0800bf3f
 800c1c0:	0800c9fa 	.word	0x0800c9fa

0800c1c4 <_sbrk_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d06      	ldr	r5, [pc, #24]	; (800c1e0 <_sbrk_r+0x1c>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	602b      	str	r3, [r5, #0]
 800c1d0:	f7f6 fa90 	bl	80026f4 <_sbrk>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_sbrk_r+0x1a>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_sbrk_r+0x1a>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	20000848 	.word	0x20000848

0800c1e4 <__sread>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ec:	f000 f92c 	bl	800c448 <_read_r>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	bfab      	itete	ge
 800c1f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c1f8:	181b      	addge	r3, r3, r0
 800c1fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1fe:	bfac      	ite	ge
 800c200:	6563      	strge	r3, [r4, #84]	; 0x54
 800c202:	81a3      	strhlt	r3, [r4, #12]
 800c204:	bd10      	pop	{r4, pc}

0800c206 <__swrite>:
 800c206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20a:	461f      	mov	r7, r3
 800c20c:	898b      	ldrh	r3, [r1, #12]
 800c20e:	05db      	lsls	r3, r3, #23
 800c210:	4605      	mov	r5, r0
 800c212:	460c      	mov	r4, r1
 800c214:	4616      	mov	r6, r2
 800c216:	d505      	bpl.n	800c224 <__swrite+0x1e>
 800c218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21c:	2302      	movs	r3, #2
 800c21e:	2200      	movs	r2, #0
 800c220:	f000 f898 	bl	800c354 <_lseek_r>
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c22a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c22e:	81a3      	strh	r3, [r4, #12]
 800c230:	4632      	mov	r2, r6
 800c232:	463b      	mov	r3, r7
 800c234:	4628      	mov	r0, r5
 800c236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c23a:	f000 b817 	b.w	800c26c <_write_r>

0800c23e <__sseek>:
 800c23e:	b510      	push	{r4, lr}
 800c240:	460c      	mov	r4, r1
 800c242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c246:	f000 f885 	bl	800c354 <_lseek_r>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	bf15      	itete	ne
 800c250:	6560      	strne	r0, [r4, #84]	; 0x54
 800c252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c25a:	81a3      	strheq	r3, [r4, #12]
 800c25c:	bf18      	it	ne
 800c25e:	81a3      	strhne	r3, [r4, #12]
 800c260:	bd10      	pop	{r4, pc}

0800c262 <__sclose>:
 800c262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c266:	f000 b831 	b.w	800c2cc <_close_r>
	...

0800c26c <_write_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4d07      	ldr	r5, [pc, #28]	; (800c28c <_write_r+0x20>)
 800c270:	4604      	mov	r4, r0
 800c272:	4608      	mov	r0, r1
 800c274:	4611      	mov	r1, r2
 800c276:	2200      	movs	r2, #0
 800c278:	602a      	str	r2, [r5, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	f7f5 fa6c 	bl	8001758 <_write>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d102      	bne.n	800c28a <_write_r+0x1e>
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	b103      	cbz	r3, 800c28a <_write_r+0x1e>
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	20000848 	.word	0x20000848

0800c290 <__assert_func>:
 800c290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c292:	4614      	mov	r4, r2
 800c294:	461a      	mov	r2, r3
 800c296:	4b09      	ldr	r3, [pc, #36]	; (800c2bc <__assert_func+0x2c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4605      	mov	r5, r0
 800c29c:	68d8      	ldr	r0, [r3, #12]
 800c29e:	b14c      	cbz	r4, 800c2b4 <__assert_func+0x24>
 800c2a0:	4b07      	ldr	r3, [pc, #28]	; (800c2c0 <__assert_func+0x30>)
 800c2a2:	9100      	str	r1, [sp, #0]
 800c2a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2a8:	4906      	ldr	r1, [pc, #24]	; (800c2c4 <__assert_func+0x34>)
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	f000 f81e 	bl	800c2ec <fiprintf>
 800c2b0:	f000 f8e9 	bl	800c486 <abort>
 800c2b4:	4b04      	ldr	r3, [pc, #16]	; (800c2c8 <__assert_func+0x38>)
 800c2b6:	461c      	mov	r4, r3
 800c2b8:	e7f3      	b.n	800c2a2 <__assert_func+0x12>
 800c2ba:	bf00      	nop
 800c2bc:	2000000c 	.word	0x2000000c
 800c2c0:	0800ca05 	.word	0x0800ca05
 800c2c4:	0800ca12 	.word	0x0800ca12
 800c2c8:	0800ca40 	.word	0x0800ca40

0800c2cc <_close_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d06      	ldr	r5, [pc, #24]	; (800c2e8 <_close_r+0x1c>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	f7f6 f9d7 	bl	800268a <_close>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_close_r+0x1a>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_close_r+0x1a>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	20000848 	.word	0x20000848

0800c2ec <fiprintf>:
 800c2ec:	b40e      	push	{r1, r2, r3}
 800c2ee:	b503      	push	{r0, r1, lr}
 800c2f0:	4601      	mov	r1, r0
 800c2f2:	ab03      	add	r3, sp, #12
 800c2f4:	4805      	ldr	r0, [pc, #20]	; (800c30c <fiprintf+0x20>)
 800c2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2fa:	6800      	ldr	r0, [r0, #0]
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	f7ff fe31 	bl	800bf64 <_vfiprintf_r>
 800c302:	b002      	add	sp, #8
 800c304:	f85d eb04 	ldr.w	lr, [sp], #4
 800c308:	b003      	add	sp, #12
 800c30a:	4770      	bx	lr
 800c30c:	2000000c 	.word	0x2000000c

0800c310 <_fstat_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	; (800c330 <_fstat_r+0x20>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	4611      	mov	r1, r2
 800c31c:	602b      	str	r3, [r5, #0]
 800c31e:	f7f6 f9c0 	bl	80026a2 <_fstat>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	d102      	bne.n	800c32c <_fstat_r+0x1c>
 800c326:	682b      	ldr	r3, [r5, #0]
 800c328:	b103      	cbz	r3, 800c32c <_fstat_r+0x1c>
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	bf00      	nop
 800c330:	20000848 	.word	0x20000848

0800c334 <_isatty_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d06      	ldr	r5, [pc, #24]	; (800c350 <_isatty_r+0x1c>)
 800c338:	2300      	movs	r3, #0
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	f7f6 f9bf 	bl	80026c2 <_isatty>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_isatty_r+0x1a>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_isatty_r+0x1a>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	20000848 	.word	0x20000848

0800c354 <_lseek_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d07      	ldr	r5, [pc, #28]	; (800c374 <_lseek_r+0x20>)
 800c358:	4604      	mov	r4, r0
 800c35a:	4608      	mov	r0, r1
 800c35c:	4611      	mov	r1, r2
 800c35e:	2200      	movs	r2, #0
 800c360:	602a      	str	r2, [r5, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	f7f6 f9b8 	bl	80026d8 <_lseek>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_lseek_r+0x1e>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_lseek_r+0x1e>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	20000848 	.word	0x20000848

0800c378 <__ascii_mbtowc>:
 800c378:	b082      	sub	sp, #8
 800c37a:	b901      	cbnz	r1, 800c37e <__ascii_mbtowc+0x6>
 800c37c:	a901      	add	r1, sp, #4
 800c37e:	b142      	cbz	r2, 800c392 <__ascii_mbtowc+0x1a>
 800c380:	b14b      	cbz	r3, 800c396 <__ascii_mbtowc+0x1e>
 800c382:	7813      	ldrb	r3, [r2, #0]
 800c384:	600b      	str	r3, [r1, #0]
 800c386:	7812      	ldrb	r2, [r2, #0]
 800c388:	1e10      	subs	r0, r2, #0
 800c38a:	bf18      	it	ne
 800c38c:	2001      	movne	r0, #1
 800c38e:	b002      	add	sp, #8
 800c390:	4770      	bx	lr
 800c392:	4610      	mov	r0, r2
 800c394:	e7fb      	b.n	800c38e <__ascii_mbtowc+0x16>
 800c396:	f06f 0001 	mvn.w	r0, #1
 800c39a:	e7f8      	b.n	800c38e <__ascii_mbtowc+0x16>

0800c39c <memmove>:
 800c39c:	4288      	cmp	r0, r1
 800c39e:	b510      	push	{r4, lr}
 800c3a0:	eb01 0402 	add.w	r4, r1, r2
 800c3a4:	d902      	bls.n	800c3ac <memmove+0x10>
 800c3a6:	4284      	cmp	r4, r0
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	d807      	bhi.n	800c3bc <memmove+0x20>
 800c3ac:	1e43      	subs	r3, r0, #1
 800c3ae:	42a1      	cmp	r1, r4
 800c3b0:	d008      	beq.n	800c3c4 <memmove+0x28>
 800c3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ba:	e7f8      	b.n	800c3ae <memmove+0x12>
 800c3bc:	4402      	add	r2, r0
 800c3be:	4601      	mov	r1, r0
 800c3c0:	428a      	cmp	r2, r1
 800c3c2:	d100      	bne.n	800c3c6 <memmove+0x2a>
 800c3c4:	bd10      	pop	{r4, pc}
 800c3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ce:	e7f7      	b.n	800c3c0 <memmove+0x24>

0800c3d0 <__malloc_lock>:
 800c3d0:	4801      	ldr	r0, [pc, #4]	; (800c3d8 <__malloc_lock+0x8>)
 800c3d2:	f7fe bf58 	b.w	800b286 <__retarget_lock_acquire_recursive>
 800c3d6:	bf00      	nop
 800c3d8:	2000083c 	.word	0x2000083c

0800c3dc <__malloc_unlock>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	; (800c3e4 <__malloc_unlock+0x8>)
 800c3de:	f7fe bf53 	b.w	800b288 <__retarget_lock_release_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	2000083c 	.word	0x2000083c

0800c3e8 <_realloc_r>:
 800c3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	4614      	mov	r4, r2
 800c3f0:	460e      	mov	r6, r1
 800c3f2:	b921      	cbnz	r1, 800c3fe <_realloc_r+0x16>
 800c3f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	f7ff bbb9 	b.w	800bb70 <_malloc_r>
 800c3fe:	b92a      	cbnz	r2, 800c40c <_realloc_r+0x24>
 800c400:	f7ff fb4a 	bl	800ba98 <_free_r>
 800c404:	4625      	mov	r5, r4
 800c406:	4628      	mov	r0, r5
 800c408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40c:	f000 f842 	bl	800c494 <_malloc_usable_size_r>
 800c410:	4284      	cmp	r4, r0
 800c412:	4607      	mov	r7, r0
 800c414:	d802      	bhi.n	800c41c <_realloc_r+0x34>
 800c416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c41a:	d812      	bhi.n	800c442 <_realloc_r+0x5a>
 800c41c:	4621      	mov	r1, r4
 800c41e:	4640      	mov	r0, r8
 800c420:	f7ff fba6 	bl	800bb70 <_malloc_r>
 800c424:	4605      	mov	r5, r0
 800c426:	2800      	cmp	r0, #0
 800c428:	d0ed      	beq.n	800c406 <_realloc_r+0x1e>
 800c42a:	42bc      	cmp	r4, r7
 800c42c:	4622      	mov	r2, r4
 800c42e:	4631      	mov	r1, r6
 800c430:	bf28      	it	cs
 800c432:	463a      	movcs	r2, r7
 800c434:	f7fd f832 	bl	800949c <memcpy>
 800c438:	4631      	mov	r1, r6
 800c43a:	4640      	mov	r0, r8
 800c43c:	f7ff fb2c 	bl	800ba98 <_free_r>
 800c440:	e7e1      	b.n	800c406 <_realloc_r+0x1e>
 800c442:	4635      	mov	r5, r6
 800c444:	e7df      	b.n	800c406 <_realloc_r+0x1e>
	...

0800c448 <_read_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4d07      	ldr	r5, [pc, #28]	; (800c468 <_read_r+0x20>)
 800c44c:	4604      	mov	r4, r0
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	2200      	movs	r2, #0
 800c454:	602a      	str	r2, [r5, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f7f6 f8fa 	bl	8002650 <_read>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_read_r+0x1e>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_read_r+0x1e>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	20000848 	.word	0x20000848

0800c46c <__ascii_wctomb>:
 800c46c:	b149      	cbz	r1, 800c482 <__ascii_wctomb+0x16>
 800c46e:	2aff      	cmp	r2, #255	; 0xff
 800c470:	bf85      	ittet	hi
 800c472:	238a      	movhi	r3, #138	; 0x8a
 800c474:	6003      	strhi	r3, [r0, #0]
 800c476:	700a      	strbls	r2, [r1, #0]
 800c478:	f04f 30ff 	movhi.w	r0, #4294967295
 800c47c:	bf98      	it	ls
 800c47e:	2001      	movls	r0, #1
 800c480:	4770      	bx	lr
 800c482:	4608      	mov	r0, r1
 800c484:	4770      	bx	lr

0800c486 <abort>:
 800c486:	b508      	push	{r3, lr}
 800c488:	2006      	movs	r0, #6
 800c48a:	f000 f833 	bl	800c4f4 <raise>
 800c48e:	2001      	movs	r0, #1
 800c490:	f7f6 f8d4 	bl	800263c <_exit>

0800c494 <_malloc_usable_size_r>:
 800c494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c498:	1f18      	subs	r0, r3, #4
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	bfbc      	itt	lt
 800c49e:	580b      	ldrlt	r3, [r1, r0]
 800c4a0:	18c0      	addlt	r0, r0, r3
 800c4a2:	4770      	bx	lr

0800c4a4 <_raise_r>:
 800c4a4:	291f      	cmp	r1, #31
 800c4a6:	b538      	push	{r3, r4, r5, lr}
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	460d      	mov	r5, r1
 800c4ac:	d904      	bls.n	800c4b8 <_raise_r+0x14>
 800c4ae:	2316      	movs	r3, #22
 800c4b0:	6003      	str	r3, [r0, #0]
 800c4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4ba:	b112      	cbz	r2, 800c4c2 <_raise_r+0x1e>
 800c4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4c0:	b94b      	cbnz	r3, 800c4d6 <_raise_r+0x32>
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 f830 	bl	800c528 <_getpid_r>
 800c4c8:	462a      	mov	r2, r5
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4d2:	f000 b817 	b.w	800c504 <_kill_r>
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d00a      	beq.n	800c4f0 <_raise_r+0x4c>
 800c4da:	1c59      	adds	r1, r3, #1
 800c4dc:	d103      	bne.n	800c4e6 <_raise_r+0x42>
 800c4de:	2316      	movs	r3, #22
 800c4e0:	6003      	str	r3, [r0, #0]
 800c4e2:	2001      	movs	r0, #1
 800c4e4:	e7e7      	b.n	800c4b6 <_raise_r+0x12>
 800c4e6:	2400      	movs	r4, #0
 800c4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	4798      	blx	r3
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e7e0      	b.n	800c4b6 <_raise_r+0x12>

0800c4f4 <raise>:
 800c4f4:	4b02      	ldr	r3, [pc, #8]	; (800c500 <raise+0xc>)
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	f7ff bfd3 	b.w	800c4a4 <_raise_r>
 800c4fe:	bf00      	nop
 800c500:	2000000c 	.word	0x2000000c

0800c504 <_kill_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d07      	ldr	r5, [pc, #28]	; (800c524 <_kill_r+0x20>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	f7f6 f883 	bl	800261c <_kill>
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	d102      	bne.n	800c520 <_kill_r+0x1c>
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	b103      	cbz	r3, 800c520 <_kill_r+0x1c>
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	bd38      	pop	{r3, r4, r5, pc}
 800c522:	bf00      	nop
 800c524:	20000848 	.word	0x20000848

0800c528 <_getpid_r>:
 800c528:	f7f6 b870 	b.w	800260c <_getpid>

0800c52c <_init>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	bf00      	nop
 800c530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c532:	bc08      	pop	{r3}
 800c534:	469e      	mov	lr, r3
 800c536:	4770      	bx	lr

0800c538 <_fini>:
 800c538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53a:	bf00      	nop
 800c53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53e:	bc08      	pop	{r3}
 800c540:	469e      	mov	lr, r3
 800c542:	4770      	bx	lr
