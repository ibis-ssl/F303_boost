
orion_F303_boost_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08009f38  08009f38  00019f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a384  0800a384  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a384  0800a384  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a384  0800a384  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a384  0800a384  0001a384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a388  0800a388  0001a388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000434  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000610  20000610  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e0f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b6  00000000  00000000  0003701b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0003a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  0003b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020aab  00000000  00000000  0003c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d37  00000000  00000000  0005d1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6617  00000000  00000000  00076f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d539  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f7c  00000000  00000000  0013d58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f1c 	.word	0x08009f1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009f1c 	.word	0x08009f1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2228      	movs	r2, #40	; 0x28
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f006 fba9 	bl	8007318 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc6:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd4:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bda:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bee:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf4:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c08:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c14:	482c      	ldr	r0, [pc, #176]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c16:	f001 fa47 	bl	80020a8 <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 fd65 	bl	80016ee <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c30:	f002 f8b8 	bl	8002da4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000c3a:	f000 fd58 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000c52:	2340      	movs	r3, #64	; 0x40
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000c56:	2301      	movs	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c7a:	f001 fd0b 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 fd33 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000c96:	f001 fcfd 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ca0:	f000 fd25 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_ADC1_Init+0x120>)
 8000cb2:	f001 fcef 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000cbc:	f000 fd17 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001f8 	.word	0x200001f8

08000ccc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2228      	movs	r2, #40	; 0x28
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 fb17 	bl	8007318 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cec:	4a40      	ldr	r2, [pc, #256]	; (8000df0 <MX_ADC3_Init+0x124>)
 8000cee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cfc:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <MX_ADC3_Init+0x120>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d2a:	4b30      	ldr	r3, [pc, #192]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d36:	482d      	ldr	r0, [pc, #180]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d38:	f001 f9b6 	bl	80020a8 <HAL_ADC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8000d42:	f000 fcd4 	bl	80016ee <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4826      	ldr	r0, [pc, #152]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d52:	f002 f827 	bl	8002da4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000d5c:	f000 fcc7 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000d70:	2306      	movs	r3, #6
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4814      	ldr	r0, [pc, #80]	; (8000dec <MX_ADC3_Init+0x120>)
 8000d9c:	f001 fc7a 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000da6:	f000 fca2 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000daa:	2305      	movs	r3, #5
 8000dac:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_ADC3_Init+0x120>)
 8000db8:	f001 fc6c 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8000dc2:	f000 fc94 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_ADC3_Init+0x120>)
 8000dd4:	f001 fc5e 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8000dde:	f000 fc86 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000248 	.word	0x20000248
 8000df0:	50000400 	.word	0x50000400

08000df4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2228      	movs	r2, #40	; 0x28
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 fa89 	bl	8007318 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <MX_ADC4_Init+0xdc>)
 8000e0a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e54:	f001 f928 	bl	80020a8 <HAL_ADC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC4_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 fc46 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e62:	2303      	movs	r3, #3
 8000e64:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e72:	2306      	movs	r3, #6
 8000e74:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e76:	2340      	movs	r3, #64	; 0x40
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000e98:	f001 fbfc 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC4_Init+0xb2>
  {
    Error_Handler();
 8000ea2:	f000 fc24 	bl	80016ee <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <MX_ADC4_Init+0xd8>)
 8000eb4:	f001 fbee 	bl	8002694 <HAL_ADCEx_InjectedConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000ebe:	f000 fc16 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000298 	.word	0x20000298
 8000ed0:	50000500 	.word	0x50000500

08000ed4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef4:	d14d      	bne.n	8000f92 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b85      	ldr	r3, [pc, #532]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a84      	ldr	r2, [pc, #528]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b82      	ldr	r3, [pc, #520]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b7f      	ldr	r3, [pc, #508]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a7e      	ldr	r2, [pc, #504]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b7c      	ldr	r3, [pc, #496]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f26:	2307      	movs	r3, #7
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f003 f882 	bl	8004044 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f40:	4b73      	ldr	r3, [pc, #460]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f42:	4a74      	ldr	r2, [pc, #464]	; (8001114 <HAL_ADC_MspInit+0x240>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4c:	4b70      	ldr	r3, [pc, #448]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f52:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f58:	4b6d      	ldr	r3, [pc, #436]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f68:	4b69      	ldr	r3, [pc, #420]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f74:	4866      	ldr	r0, [pc, #408]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f76:	f002 ff3e 	bl	8003df6 <HAL_DMA_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000f80:	f000 fbb5 	bl	80016ee <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a62      	ldr	r2, [pc, #392]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8a:	4a61      	ldr	r2, [pc, #388]	; (8001110 <HAL_ADC_MspInit+0x23c>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000f90:	e0b7      	b.n	8001102 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <HAL_ADC_MspInit+0x244>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d157      	bne.n	800104c <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a5e      	ldr	r2, [pc, #376]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000fa4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HAL_ADC_MspInit+0x248>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10b      	bne.n	8000fc6 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b54      	ldr	r3, [pc, #336]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b51      	ldr	r3, [pc, #324]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a50      	ldr	r2, [pc, #320]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <HAL_ADC_MspInit+0x238>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BOOST_V_Pin|BATT_CS_Pin|TEMP_COIL_1_Pin;
 8000fde:	f242 0303 	movw	r3, #8195	; 0x2003
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	484b      	ldr	r0, [pc, #300]	; (8001120 <HAL_ADC_MspInit+0x24c>)
 8000ff4:	f003 f826 	bl	8004044 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8000ffa:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_ADC_MspInit+0x254>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001004:	4b47      	ldr	r3, [pc, #284]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_ADC_MspInit+0x250>)
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001010:	4b44      	ldr	r3, [pc, #272]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001016:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001018:	4b42      	ldr	r3, [pc, #264]	; (8001124 <HAL_ADC_MspInit+0x250>)
 800101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001022:	2220      	movs	r2, #32
 8001024:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800102c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800102e:	483d      	ldr	r0, [pc, #244]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001030:	f002 fee1 	bl	8003df6 <HAL_DMA_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 800103a:	f000 fb58 	bl	80016ee <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a38      	ldr	r2, [pc, #224]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
 8001044:	4a37      	ldr	r2, [pc, #220]	; (8001124 <HAL_ADC_MspInit+0x250>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6253      	str	r3, [r2, #36]	; 0x24
}
 800104a:	e05a      	b.n	8001102 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a36      	ldr	r2, [pc, #216]	; (800112c <HAL_ADC_MspInit+0x258>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d155      	bne.n	8001102 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_ADC_MspInit+0x248>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a2f      	ldr	r2, [pc, #188]	; (800111c <HAL_ADC_MspInit+0x248>)
 800105e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_ADC_MspInit+0x248>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d10b      	bne.n	8001080 <HAL_ADC_MspInit+0x1ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_ADC_MspInit+0x238>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <HAL_ADC_MspInit+0x238>)
 800106e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001072:	6153      	str	r3, [r2, #20]
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <HAL_ADC_MspInit+0x238>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108a:	6153      	str	r3, [r2, #20]
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_ADC_MspInit+0x238>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_FET_Pin|TEMP_COIL_2_Pin;
 8001098:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	481c      	ldr	r0, [pc, #112]	; (8001120 <HAL_ADC_MspInit+0x24c>)
 80010ae:	f002 ffc9 	bl	8004044 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010b4:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_ADC_MspInit+0x260>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010dc:	2220      	movs	r2, #32
 80010de:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80010e6:	4812      	ldr	r0, [pc, #72]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010e8:	f002 fe85 	bl	8003df6 <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 80010f2:	f000 fafc 	bl	80016ee <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
 80010fc:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x25c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	200002e8 	.word	0x200002e8
 8001114:	40020008 	.word	0x40020008
 8001118:	50000400 	.word	0x50000400
 800111c:	200003b4 	.word	0x200003b4
 8001120:	48000400 	.word	0x48000400
 8001124:	2000032c 	.word	0x2000032c
 8001128:	40020458 	.word	0x40020458
 800112c:	50000500 	.word	0x50000500
 8001130:	20000370 	.word	0x20000370
 8001134:	4002041c 	.word	0x4002041c

08001138 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_CAN_Init+0x64>)
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <MX_CAN_Init+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_CAN_Init+0x64>)
 8001144:	2202      	movs	r2, #2
 8001146:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_CAN_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_CAN_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_CAN_Init+0x64>)
 8001156:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800115a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_CAN_Init+0x64>)
 800115e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001162:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_CAN_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_CAN_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_CAN_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_CAN_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <MX_CAN_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_CAN_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_CAN_Init+0x64>)
 800118a:	f001 ffc7 	bl	800311c <HAL_CAN_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001194:	f000 faab 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200003b8 	.word	0x200003b8
 80011a0:	40006400 	.word	0x40006400

080011a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_CAN_MspInit+0x90>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d131      	bne.n	800122a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_CAN_MspInit+0x94>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_CAN_MspInit+0x94>)
 80011cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_CAN_MspInit+0x94>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_CAN_MspInit+0x94>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a15      	ldr	r2, [pc, #84]	; (8001238 <HAL_CAN_MspInit+0x94>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_CAN_MspInit+0x94>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001208:	2309      	movs	r3, #9
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f002 ff15 	bl	8004044 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2014      	movs	r0, #20
 8001220:	f002 fdb3 	bl	8003d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001224:	2014      	movs	r0, #20
 8001226:	f002 fdcc 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40006400 	.word	0x40006400
 8001238:	40021000 	.word	0x40021000

0800123c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_DMA_Init+0x70>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <MX_DMA_Init+0x70>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6153      	str	r3, [r2, #20]
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_DMA_Init+0x70>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_DMA_Init+0x70>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_DMA_Init+0x70>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6153      	str	r3, [r2, #20]
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_DMA_Init+0x70>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	200b      	movs	r0, #11
 8001278:	f002 fd87 	bl	8003d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800127c:	200b      	movs	r0, #11
 800127e:	f002 fda0 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2039      	movs	r0, #57	; 0x39
 8001288:	f002 fd7f 	bl	8003d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800128c:	2039      	movs	r0, #57	; 0x39
 800128e:	f002 fd98 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	203c      	movs	r0, #60	; 0x3c
 8001298:	f002 fd77 	bl	8003d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800129c:	203c      	movs	r0, #60	; 0x3c
 800129e:	f002 fd90 	bl	8003dc2 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012d0:	6153      	str	r3, [r2, #20]
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e8:	6153      	str	r3, [r2, #20]
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <MX_GPIO_Init+0x118>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <MX_GPIO_Init+0x118>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <MX_GPIO_Init+0x118>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <MX_GPIO_Init+0x118>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_GPIO_Init+0x118>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800132c:	4827      	ldr	r0, [pc, #156]	; (80013cc <MX_GPIO_Init+0x11c>)
 800132e:	f003 f803 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CURRENT_Pin|MOUSE_NSS_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f248 0110 	movw	r1, #32784	; 0x8010
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f002 fffc 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POWER_SW_EN_Pin|MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2144      	movs	r1, #68	; 0x44
 8001344:	4822      	ldr	r0, [pc, #136]	; (80013d0 <MX_GPIO_Init+0x120>)
 8001346:	f002 fff7 	bl	8004338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 800134a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	481a      	ldr	r0, [pc, #104]	; (80013cc <MX_GPIO_Init+0x11c>)
 8001364:	f002 fe6e 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_CURRENT_Pin|MOUSE_NSS_Pin;
 8001368:	f248 0310 	movw	r3, #32784	; 0x8010
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f002 fe5e 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_SW_EN_Pin|MOUSE_RST_Pin;
 8001388:	2344      	movs	r3, #68	; 0x44
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_GPIO_Init+0x120>)
 80013a0:	f002 fe50 	bl	8004044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 80013a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_GPIO_Init+0x120>)
 80013ba:	f002 fe43 	bl	8004044 <HAL_GPIO_Init>

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000800 	.word	0x48000800
 80013d0:	48000400 	.word	0x48000400

080013d4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif

void __io_putchar(uint8_t ch)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80013de:	1df9      	adds	r1, r7, #7
 80013e0:	2301      	movs	r3, #1
 80013e2:	2201      	movs	r2, #1
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <__io_putchar+0x20>)
 80013e6:	f005 fb53 	bl	8006a90 <HAL_UART_Transmit>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000578 	.word	0x20000578

080013f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t can_rx_cnt = 0;
uint8_t can_rx_data[8];
CAN_RxHeaderTypeDef   can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data) != HAL_OK)
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f002 f8a2 	bl	8003550 <HAL_CAN_GetRxMessage>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001412:	f000 f96c 	bl	80016ee <Error_Handler>
  }
	can_rx_cnt++;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200003e4 	.word	0x200003e4
 800142c:	200003ec 	.word	0x200003ec
 8001430:	200003e0 	.word	0x200003e0

08001434 <sendCan>:
CAN_TxHeaderTypeDef can_header;
uint8_t can_data[8];
uint32_t can_mailbox;


void sendCan(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	can_header.StdId = 0x00;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <sendCan+0x44>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
	can_header.RTR = CAN_RTR_DATA;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <sendCan+0x44>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
	can_header.DLC = 8;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <sendCan+0x44>)
 8001446:	2208      	movs	r2, #8
 8001448:	611a      	str	r2, [r3, #16]
	can_header.TransmitGlobalTime = DISABLE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <sendCan+0x44>)
 800144c:	2200      	movs	r2, #0
 800144e:	751a      	strb	r2, [r3, #20]
	can_data[0] = 0;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <sendCan+0x48>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
	can_data[1] = 0;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <sendCan+0x48>)
 8001458:	2200      	movs	r2, #0
 800145a:	705a      	strb	r2, [r3, #1]
	can_data[2] = 1;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <sendCan+0x48>)
 800145e:	2201      	movs	r2, #1
 8001460:	709a      	strb	r2, [r3, #2]
	can_data[3] = 1;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <sendCan+0x48>)
 8001464:	2201      	movs	r2, #1
 8001466:	70da      	strb	r2, [r3, #3]
	HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <sendCan+0x4c>)
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <sendCan+0x48>)
 800146c:	4902      	ldr	r1, [pc, #8]	; (8001478 <sendCan+0x44>)
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <sendCan+0x50>)
 8001470:	f001 ff93 	bl	800339a <HAL_CAN_AddTxMessage>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000408 	.word	0x20000408
 800147c:	20000420 	.word	0x20000420
 8001480:	20000428 	.word	0x20000428
 8001484:	200003b8 	.word	0x200003b8

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148e:	f000 fd81 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001492:	f000 f8cb 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001496:	f7ff ff0b 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800149a:	f7ff fecf 	bl	800123c <MX_DMA_Init>
  MX_ADC1_Init();
 800149e:	f7ff fb83 	bl	8000ba8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80014a2:	f7ff fc13 	bl	8000ccc <MX_ADC3_Init>
  MX_ADC4_Init();
 80014a6:	f7ff fca5 	bl	8000df4 <MX_ADC4_Init>
  MX_CAN_Init();
 80014aa:	f7ff fe45 	bl	8001138 <MX_CAN_Init>
  MX_SPI1_Init();
 80014ae:	f000 f923 	bl	80016f8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80014b2:	f000 faf1 	bl	8001a98 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014b6:	f000 fb49 	bl	8001b4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80014ba:	f000 fccd 	bl	8001e58 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80014be:	f000 fbab 	bl	8001c18 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



  //kick
  HAL_TIM_PWM_Init(&htim3);
 80014c2:	484b      	ldr	r0, [pc, #300]	; (80015f0 <main+0x168>)
 80014c4:	f004 fc1f 	bl	8005d06 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80014c8:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <main+0x168>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80014d0:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <main+0x168>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim3, 2000);
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <main+0x168>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <main+0x168>)
 80014e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014e8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim3, 2000);
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <main+0x168>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014f4:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <main+0x168>)
 80014f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014fa:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	483c      	ldr	r0, [pc, #240]	; (80015f0 <main+0x168>)
 8001500:	f004 fc58 	bl	8005db4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001504:	2104      	movs	r1, #4
 8001506:	483a      	ldr	r0, [pc, #232]	; (80015f0 <main+0x168>)
 8001508:	f004 fc54 	bl	8005db4 <HAL_TIM_PWM_Start>

  // boost
  HAL_TIM_PWM_Init(&htim2);
 800150c:	4839      	ldr	r0, [pc, #228]	; (80015f4 <main+0x16c>)
 800150e:	f004 fbfa 	bl	8005d06 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <main+0x16c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <main+0x16c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <main+0x16c>)
 8001526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800152a:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800152c:	210c      	movs	r1, #12
 800152e:	4831      	ldr	r0, [pc, #196]	; (80015f4 <main+0x16c>)
 8001530:	f004 fc40 	bl	8005db4 <HAL_TIM_PWM_Start>

  // GD negative PS
  HAL_TIM_PWM_Init(&htim4);
 8001534:	4830      	ldr	r0, [pc, #192]	; (80015f8 <main+0x170>)
 8001536:	f004 fbe6 	bl	8005d06 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <main+0x170>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim4, 2000);
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <main+0x170>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <main+0x170>)
 8001550:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001554:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001556:	2104      	movs	r1, #4
 8001558:	4827      	ldr	r0, [pc, #156]	; (80015f8 <main+0x170>)
 800155a:	f004 fc2b 	bl	8005db4 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f000 fd7e 	bl	8002060 <HAL_Delay>
  //wait charging

  // can init
  //CAN_Filter_Init(0);
  HAL_CAN_Start(&hcan);
 8001564:	4825      	ldr	r0, [pc, #148]	; (80015fc <main+0x174>)
 8001566:	f001 fed4 	bl	8003312 <HAL_CAN_Start>

  setbuf(stdout, NULL);
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <main+0x178>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f006 fb5a 	bl	8007c2c <setbuf>

  HAL_UART_Init(&huart1);
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <main+0x17c>)
 800157a:	f005 fa3b 	bl	80069f4 <HAL_UART_Init>

  uint8_t data[] = "orion boost v1 start!!\n";
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <main+0x180>)
 8001580:	463c      	mov	r4, r7
 8001582:	461d      	mov	r5, r3
 8001584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001588:	e895 0003 	ldmia.w	r5, {r0, r1}
 800158c:	e884 0003 	stmia.w	r4, {r0, r1}

  HAL_UART_Transmit(&huart1, data, sizeof(data), 100);
 8001590:	4639      	mov	r1, r7
 8001592:	2364      	movs	r3, #100	; 0x64
 8001594:	2218      	movs	r2, #24
 8001596:	481b      	ldr	r0, [pc, #108]	; (8001604 <main+0x17c>)
 8001598:	f005 fa7a 	bl	8006a90 <HAL_UART_Transmit>
  printf("hogehoge %d ,%f\n", 10, 1.0);
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <main+0x184>)
 80015a2:	210a      	movs	r1, #10
 80015a4:	481a      	ldr	r0, [pc, #104]	; (8001610 <main+0x188>)
 80015a6:	f006 fb29 	bl	8007bfc <iprintf>

  static uint32_t loop_cnt = 0, kick_cnt = 0;
  float boost_v = 0,batt_v,gd_16p,gd_16m,batt_cs;
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  int temp_coil_1,temp_coil_2,temp_fet;
  int boost_cnt = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]


  HAL_ADC_Start(&hadc1);
 80015b4:	4817      	ldr	r0, [pc, #92]	; (8001614 <main+0x18c>)
 80015b6:	f000 ff57 	bl	8002468 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <main+0x190>)
 80015bc:	f000 ff54 	bl	8002468 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 80015c0:	4816      	ldr	r0, [pc, #88]	; (800161c <main+0x194>)
 80015c2:	f000 ff51 	bl	8002468 <HAL_ADC_Start>

  HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <main+0x198>)
 80015cc:	f002 feb4 	bl	8004338 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);


  while(1){

	    HAL_Delay(100);
 80015d0:	2064      	movs	r0, #100	; 0x64
 80015d2:	f000 fd45 	bl	8002060 <HAL_Delay>
	    sendCan();
 80015d6:	f7ff ff2d 	bl	8001434 <sendCan>
	    printf("can rx : %d\n",can_rx_cnt);
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <main+0x19c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	4811      	ldr	r0, [pc, #68]	; (8001628 <main+0x1a0>)
 80015e2:	f006 fb0b 	bl	8007bfc <iprintf>
	    can_rx_cnt = 0;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <main+0x19c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
	    HAL_Delay(100);
 80015ec:	e7f0      	b.n	80015d0 <main+0x148>
 80015ee:	bf00      	nop
 80015f0:	200004e0 	.word	0x200004e0
 80015f4:	20000494 	.word	0x20000494
 80015f8:	2000052c 	.word	0x2000052c
 80015fc:	200003b8 	.word	0x200003b8
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000578 	.word	0x20000578
 8001608:	08009f5c 	.word	0x08009f5c
 800160c:	3ff00000 	.word	0x3ff00000
 8001610:	08009f38 	.word	0x08009f38
 8001614:	200001f8 	.word	0x200001f8
 8001618:	20000248 	.word	0x20000248
 800161c:	20000298 	.word	0x20000298
 8001620:	48000400 	.word	0x48000400
 8001624:	200003e0 	.word	0x200003e0
 8001628:	08009f4c 	.word	0x08009f4c

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b09e      	sub	sp, #120	; 0x78
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001636:	2228      	movs	r2, #40	; 0x28
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fe6c 	bl	8007318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	223c      	movs	r2, #60	; 0x3c
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 fe5e 	bl	8007318 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800165c:	2301      	movs	r3, #1
 800165e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001664:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166a:	2301      	movs	r3, #1
 800166c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001676:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001678:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800167c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fe70 	bl	8004368 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800168e:	f000 f82e 	bl	80016ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2302      	movs	r3, #2
 8001698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fe98 	bl	80053e4 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016ba:	f000 f818 	bl	80016ee <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 80016be:	f240 1381 	movw	r3, #385	; 0x181
 80016c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80016c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 f8ba 	bl	8005850 <HAL_RCCEx_PeriphCLKConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80016e2:	f000 f804 	bl	80016ee <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3778      	adds	r7, #120	; 0x78
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f2:	b672      	cpsid	i
}
 80016f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <Error_Handler+0x8>

080016f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_SPI1_Init+0x74>)
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <MX_SPI1_Init+0x78>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_SPI1_Init+0x74>)
 8001704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_SPI1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_SPI1_Init+0x74>)
 8001712:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001716:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_SPI1_Init+0x74>)
 800171a:	2202      	movs	r2, #2
 800171c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_SPI1_Init+0x74>)
 8001720:	2201      	movs	r2, #1
 8001722:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_SPI1_Init+0x74>)
 8001726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_SPI1_Init+0x74>)
 800172e:	2220      	movs	r2, #32
 8001730:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_SPI1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_SPI1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <MX_SPI1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_SPI1_Init+0x74>)
 8001746:	2207      	movs	r2, #7
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <MX_SPI1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_SPI1_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_SPI1_Init+0x74>)
 8001758:	f004 fa2a 	bl	8005bb0 <HAL_SPI_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001762:	f7ff ffc4 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000042c 	.word	0x2000042c
 8001770:	40013000 	.word	0x40013000

08001774 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_SPI_MspInit+0x7c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d127      	bne.n	80017e6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_SPI_MspInit+0x80>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <HAL_SPI_MspInit+0x80>)
 800179c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_SPI_MspInit+0x80>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_SPI_MspInit+0x80>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <HAL_SPI_MspInit+0x80>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b8:	6153      	str	r3, [r2, #20]
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_SPI_MspInit+0x80>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017c6:	2338      	movs	r3, #56	; 0x38
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d6:	2305      	movs	r3, #5
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_SPI_MspInit+0x84>)
 80017e2:	f002 fc2f 	bl	8004044 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40013000 	.word	0x40013000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	48000400 	.word	0x48000400

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x44>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_MspInit+0x44>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x44>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_MspInit+0x44>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_MspInit+0x44>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_MspInit+0x44>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 fbc6 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Channel1_IRQHandler+0x10>)
 800189e:	f002 faf1 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002e8 	.word	0x200002e8

080018ac <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80018b2:	f001 ff5f 	bl	8003774 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200003b8 	.word	0x200003b8

080018c0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <DMA2_Channel2_IRQHandler+0x10>)
 80018c6:	f002 fadd 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000370 	.word	0x20000370

080018d4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA2_Channel5_IRQHandler+0x10>)
 80018da:	f002 fad3 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000032c 	.word	0x2000032c

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_kill>:

int _kill(int pid, int sig)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001902:	f005 fcdf 	bl	80072c4 <__errno>
 8001906:	4603      	mov	r3, r0
 8001908:	2216      	movs	r2, #22
 800190a:	601a      	str	r2, [r3, #0]
	return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_exit>:

void _exit (int status)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe7 	bl	80018f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800192a:	e7fe      	b.n	800192a <_exit+0x12>

0800192c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193e:	f3af 8000 	nop.w
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
	}

return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e009      	b.n	800198c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fd27 	bl	80013d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <_write+0x12>
	}
	return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_close>:

int _close(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c6:	605a      	str	r2, [r3, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f005 fc44 	bl	80072c4 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20008000 	.word	0x20008000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000490 	.word	0x20000490
 8001a70:	20000610 	.word	0x20000610

08001a74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001ad0:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001ad2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ae4:	4818      	ldr	r0, [pc, #96]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001ae6:	f004 f90e 	bl	8005d06 <HAL_TIM_PWM_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001af0:	f7ff fdfd 	bl	80016ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4811      	ldr	r0, [pc, #68]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001b04:	f004 fef6 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001b0e:	f7ff fdee 	bl	80016ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b12:	2360      	movs	r3, #96	; 0x60
 8001b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	220c      	movs	r2, #12
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001b2a:	f004 fa43 	bl	8005fb4 <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b34:	f7ff fddb 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <MX_TIM2_Init+0xb0>)
 8001b3a:	f000 f90d 	bl	8001d58 <HAL_TIM_MspPostInit>

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	; 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000494 	.word	0x20000494

08001b4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001b72:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <MX_TIM3_Init+0xc8>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001b84:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001b88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b96:	481e      	ldr	r0, [pc, #120]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001b98:	f004 f8b5 	bl	8005d06 <HAL_TIM_PWM_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001ba2:	f7ff fda4 	bl	80016ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4816      	ldr	r0, [pc, #88]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001bb6:	f004 fe9d 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001bc0:	f7ff fd95 	bl	80016ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc4:	2360      	movs	r3, #96	; 0x60
 8001bc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001bdc:	f004 f9ea 	bl	8005fb4 <HAL_TIM_PWM_ConfigChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001be6:	f7ff fd82 	bl	80016ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	2204      	movs	r2, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4807      	ldr	r0, [pc, #28]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001bf2:	f004 f9df 	bl	8005fb4 <HAL_TIM_PWM_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001bfc:	f7ff fd77 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <MX_TIM3_Init+0xc4>)
 8001c02:	f000 f8a9 	bl	8001d58 <HAL_TIM_MspPostInit>

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200004e0 	.word	0x200004e0
 8001c14:	40000400 	.word	0x40000400

08001c18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <MX_TIM4_Init+0xb0>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c50:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001c54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c62:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c64:	f004 f84f 	bl	8005d06 <HAL_TIM_PWM_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001c6e:	f7ff fd3e 	bl	80016ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001c82:	f004 fe37 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001c8c:	f7ff fd2f 	bl	80016ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c90:	2360      	movs	r3, #96	; 0x60
 8001c92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001ca8:	f004 f984 	bl	8005fb4 <HAL_TIM_PWM_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001cb2:	f7ff fd1c 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM4_Init+0xac>)
 8001cb8:	f000 f84e 	bl	8001d58 <HAL_TIM_MspPostInit>

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000052c 	.word	0x2000052c
 8001cc8:	40000800 	.word	0x40000800

08001ccc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cf6:	e022      	b.n	8001d3e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_TIM_PWM_MspInit+0x84>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10c      	bne.n	8001d1c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a11      	ldr	r2, [pc, #68]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
}
 8001d1a:	e010      	b.n	8001d3e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <HAL_TIM_PWM_MspInit+0x88>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10b      	bne.n	8001d3e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_TIM_PWM_MspInit+0x80>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800

08001d58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d11d      	bne.n	8001db6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4a32      	ldr	r2, [pc, #200]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d84:	6153      	str	r3, [r2, #20]
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BOOST_SW_Pin;
 8001d92:	2308      	movs	r3, #8
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da2:	2301      	movs	r3, #1
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_SW_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db0:	f002 f948 	bl	8004044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001db4:	e043      	b.n	8001e3e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_TIM_MspPostInit+0xf4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d11d      	bne.n	8001dfc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dca:	6153      	str	r3, [r2, #20]
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = KICK_1_Pin|KICK_2_Pin;
 8001dd8:	23c0      	movs	r3, #192	; 0xc0
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001de8:	2302      	movs	r3, #2
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df6:	f002 f925 	bl	8004044 <HAL_GPIO_Init>
}
 8001dfa:	e020      	b.n	8001e3e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_TIM_MspPostInit+0xf8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d11b      	bne.n	8001e3e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e10:	6153      	str	r3, [r2, #20]
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_TIM_MspPostInit+0xf0>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD_16M_PWM_Pin;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GD_16M_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4806      	ldr	r0, [pc, #24]	; (8001e54 <HAL_TIM_MspPostInit+0xfc>)
 8001e3a:	f002 f903 	bl	8004044 <HAL_GPIO_Init>
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800
 8001e54:	48000400 	.word	0x48000400

08001e58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e5e:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <MX_USART1_UART_Init+0x58>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e64:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <MX_USART1_UART_Init+0x5c>)
 8001e66:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <MX_USART1_UART_Init+0x54>)
 8001e9a:	f004 fdab 	bl	80069f4 <HAL_UART_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001ea4:	f7ff fc23 	bl	80016ee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000578 	.word	0x20000578
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	001e8480 	.word	0x001e8480

08001eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_UART_MspInit+0x80>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d129      	bne.n	8001f2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_UART_MspInit+0x84>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_UART_MspInit+0x84>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_UART_MspInit+0x84>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_UART_MspInit+0x84>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_UART_MspInit+0x84>)
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efc:	6153      	str	r3, [r2, #20]
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <HAL_UART_MspInit+0x84>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2a:	f002 f88b 	bl	8004044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3728      	adds	r7, #40	; 0x28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40021000 	.word	0x40021000

08001f40 <Reset_Handler>:
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopForever+0x2>
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopForever+0x6>)
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <LoopForever+0xa>)
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <LoopForever+0xe>)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:
 8001f4e:	58d4      	ldr	r4, [r2, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:
 8001f54:	18c4      	adds	r4, r0, r3
 8001f56:	428c      	cmp	r4, r1
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopForever+0x12>)
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	; (8001f8c <LoopForever+0x16>)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>
 8001f6a:	f7ff fd83 	bl	8001a74 <SystemInit>
 8001f6e:	f005 f9af 	bl	80072d0 <__libc_init_array>
 8001f72:	f7ff fa89 	bl	8001488 <main>

08001f76 <LoopForever>:
 8001f76:	e7fe      	b.n	8001f76 <LoopForever>
 8001f78:	20008000 	.word	0x20008000
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	200001dc 	.word	0x200001dc
 8001f84:	0800a38c 	.word	0x0800a38c
 8001f88:	200001dc 	.word	0x200001dc
 8001f8c:	20000610 	.word	0x20000610

08001f90 <ADC1_2_IRQHandler>:
 8001f90:	e7fe      	b.n	8001f90 <ADC1_2_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_Init+0x28>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_Init+0x28>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f001 fee5 	bl	8003d74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001faa:	200f      	movs	r0, #15
 8001fac:	f000 f808 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb0:	f7ff fc24 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fefd 	bl	8003dde <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f001 fec5 	bl	8003d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000000 	.word	0x20000000
 8002018:	20000008 	.word	0x20000008
 800201c:	20000004 	.word	0x20000004

08002020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x20>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_IncTick+0x24>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_IncTick+0x24>)
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000008 	.word	0x20000008
 8002044:	200005fc 	.word	0x200005fc

08002048 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;  
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	200005fc 	.word	0x200005fc

08002060 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d005      	beq.n	8002086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_Delay+0x44>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002086:	bf00      	nop
 8002088:	f7ff ffde 	bl	8002048 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8f7      	bhi.n	8002088 <HAL_Delay+0x28>
  {
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000008 	.word	0x20000008

080020a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b09a      	sub	sp, #104	; 0x68
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e1c9      	b.n	800245c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d176      	bne.n	80021c8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d152      	bne.n	8002188 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe fee9 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d13b      	bne.n	8002188 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 ff9d 	bl	8003050 <ADC_Disable>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d12f      	bne.n	8002188 <HAL_ADC_Init+0xe0>
 8002128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800212c:	2b00      	cmp	r3, #0
 800212e:	d12b      	bne.n	8002188 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002138:	f023 0302 	bic.w	r3, r3, #2
 800213c:	f043 0202 	orr.w	r2, r3, #2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002152:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002162:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002164:	4b86      	ldr	r3, [pc, #536]	; (8002380 <HAL_ADC_Init+0x2d8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a86      	ldr	r2, [pc, #536]	; (8002384 <HAL_ADC_Init+0x2dc>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9a      	lsrs	r2, r3, #18
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217a:	e002      	b.n	8002182 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	3b01      	subs	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f9      	bne.n	800217c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a4:	d110      	bne.n	80021c8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f023 0312 	bic.w	r3, r3, #18
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 8136 	bne.w	8002442 <HAL_ADC_Init+0x39a>
 80021d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8131 	bne.w	8002442 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8129 	bne.w	8002442 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021f8:	f043 0202 	orr.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002208:	d004      	beq.n	8002214 <HAL_ADC_Init+0x16c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a5e      	ldr	r2, [pc, #376]	; (8002388 <HAL_ADC_Init+0x2e0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_ADC_Init+0x170>
 8002214:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_ADC_Init+0x2e4>)
 8002216:	e000      	b.n	800221a <HAL_ADC_Init+0x172>
 8002218:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_ADC_Init+0x2e8>)
 800221a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002224:	d102      	bne.n	800222c <HAL_ADC_Init+0x184>
 8002226:	4b58      	ldr	r3, [pc, #352]	; (8002388 <HAL_ADC_Init+0x2e0>)
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e01a      	b.n	8002262 <HAL_ADC_Init+0x1ba>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a55      	ldr	r2, [pc, #340]	; (8002388 <HAL_ADC_Init+0x2e0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d103      	bne.n	800223e <HAL_ADC_Init+0x196>
 8002236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e011      	b.n	8002262 <HAL_ADC_Init+0x1ba>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a54      	ldr	r2, [pc, #336]	; (8002394 <HAL_ADC_Init+0x2ec>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d102      	bne.n	800224e <HAL_ADC_Init+0x1a6>
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_ADC_Init+0x2f0>)
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e009      	b.n	8002262 <HAL_ADC_Init+0x1ba>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a51      	ldr	r2, [pc, #324]	; (8002398 <HAL_ADC_Init+0x2f0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d102      	bne.n	800225e <HAL_ADC_Init+0x1b6>
 8002258:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_ADC_Init+0x2ec>)
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e001      	b.n	8002262 <HAL_ADC_Init+0x1ba>
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d108      	bne.n	8002282 <HAL_ADC_Init+0x1da>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Init+0x1da>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_ADC_Init+0x1dc>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11c      	bne.n	80022c2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002288:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <HAL_ADC_Init+0x202>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x202>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x204>
 80022aa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d108      	bne.n	80022c2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	431a      	orrs	r2, r3
 80022be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7e5b      	ldrb	r3, [r3, #25]
 80022c6:	035b      	lsls	r3, r3, #13
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022cc:	2a01      	cmp	r2, #1
 80022ce:	d002      	beq.n	80022d6 <HAL_ADC_Init+0x22e>
 80022d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022d4:	e000      	b.n	80022d8 <HAL_ADC_Init+0x230>
 80022d6:	2200      	movs	r2, #0
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e8:	4313      	orrs	r3, r2
 80022ea:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d11b      	bne.n	800232e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7e5b      	ldrb	r3, [r3, #25]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	3b01      	subs	r3, #1
 8002304:	045a      	lsls	r2, r3, #17
 8002306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002308:	4313      	orrs	r3, r2
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	663b      	str	r3, [r7, #96]	; 0x60
 8002310:	e00d      	b.n	800232e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	2b01      	cmp	r3, #1
 8002334:	d03a      	beq.n	80023ac <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a16      	ldr	r2, [pc, #88]	; (8002394 <HAL_ADC_Init+0x2ec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_ADC_Init+0x2a2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_ADC_Init+0x2f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d128      	bne.n	800239c <HAL_ADC_Init+0x2f4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002352:	d012      	beq.n	800237a <HAL_ADC_Init+0x2d2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235c:	d00a      	beq.n	8002374 <HAL_ADC_Init+0x2cc>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002366:	d002      	beq.n	800236e <HAL_ADC_Init+0x2c6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	e018      	b.n	80023a0 <HAL_ADC_Init+0x2f8>
 800236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002372:	e015      	b.n	80023a0 <HAL_ADC_Init+0x2f8>
 8002374:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002378:	e012      	b.n	80023a0 <HAL_ADC_Init+0x2f8>
 800237a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800237e:	e00f      	b.n	80023a0 <HAL_ADC_Init+0x2f8>
 8002380:	20000000 	.word	0x20000000
 8002384:	431bde83 	.word	0x431bde83
 8002388:	50000100 	.word	0x50000100
 800238c:	50000300 	.word	0x50000300
 8002390:	50000700 	.word	0x50000700
 8002394:	50000400 	.word	0x50000400
 8002398:	50000500 	.word	0x50000500
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023a4:	4313      	orrs	r3, r2
 80023a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023a8:	4313      	orrs	r3, r2
 80023aa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d114      	bne.n	80023e4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c8:	f023 0302 	bic.w	r3, r3, #2
 80023cc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7e1b      	ldrb	r3, [r3, #24]
 80023d2:	039a      	lsls	r2, r3, #14
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4313      	orrs	r3, r2
 80023de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023e0:	4313      	orrs	r3, r2
 80023e2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_ADC_Init+0x3bc>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80023f4:	430b      	orrs	r3, r1
 80023f6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10c      	bne.n	800241a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f023 010f 	bic.w	r1, r3, #15
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	1e5a      	subs	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
 8002418:	e007      	b.n	800242a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 020f 	bic.w	r2, r2, #15
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f023 0303 	bic.w	r3, r3, #3
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
 8002440:	e00a      	b.n	8002458 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f023 0312 	bic.w	r3, r3, #18
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002452:	2301      	movs	r3, #1
 8002454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800245c:	4618      	mov	r0, r3
 800245e:	3768      	adds	r7, #104	; 0x68
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	fff0c007 	.word	0xfff0c007

08002468 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 80f9 	bne.w	8002676 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Start+0x2a>
 800248e:	2302      	movs	r3, #2
 8002490:	e0f4      	b.n	800267c <HAL_ADC_Start+0x214>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fd74 	bl	8002f88 <ADC_Enable>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80e0 	bne.w	800266c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_Start+0x6c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6d      	ldr	r2, [pc, #436]	; (8002684 <HAL_ADC_Start+0x21c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_Start+0x7a>
 80024d4:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_ADC_Start+0x220>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_ADC_Start+0x9a>
 80024e0:	e005      	b.n	80024ee <HAL_ADC_Start+0x86>
 80024e2:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_ADC_Start+0x224>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_ADC_Start+0x9a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f6:	d004      	beq.n	8002502 <HAL_ADC_Start+0x9a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a64      	ldr	r2, [pc, #400]	; (8002690 <HAL_ADC_Start+0x228>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d115      	bne.n	800252e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d036      	beq.n	800258a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002524:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800252c:	e02d      	b.n	800258a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002542:	d004      	beq.n	800254e <HAL_ADC_Start+0xe6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4e      	ldr	r2, [pc, #312]	; (8002684 <HAL_ADC_Start+0x21c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10a      	bne.n	8002564 <HAL_ADC_Start+0xfc>
 800254e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e008      	b.n	8002576 <HAL_ADC_Start+0x10e>
 8002564:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_ADC_Start+0x228>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002582:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	d106      	bne.n	80025a6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f023 0206 	bic.w	r2, r3, #6
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	645a      	str	r2, [r3, #68]	; 0x44
 80025a4:	e002      	b.n	80025ac <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	221c      	movs	r2, #28
 80025ba:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c4:	d004      	beq.n	80025d0 <HAL_ADC_Start+0x168>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2e      	ldr	r2, [pc, #184]	; (8002684 <HAL_ADC_Start+0x21c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d106      	bne.n	80025de <HAL_ADC_Start+0x176>
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_ADC_Start+0x220>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d03e      	beq.n	800265a <HAL_ADC_Start+0x1f2>
 80025dc:	e005      	b.n	80025ea <HAL_ADC_Start+0x182>
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_ADC_Start+0x224>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d037      	beq.n	800265a <HAL_ADC_Start+0x1f2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_Start+0x196>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_ADC_Start+0x21c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d106      	bne.n	800260c <HAL_ADC_Start+0x1a4>
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_ADC_Start+0x220>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2b05      	cmp	r3, #5
 8002608:	d027      	beq.n	800265a <HAL_ADC_Start+0x1f2>
 800260a:	e005      	b.n	8002618 <HAL_ADC_Start+0x1b0>
 800260c:	4b1f      	ldr	r3, [pc, #124]	; (800268c <HAL_ADC_Start+0x224>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2b05      	cmp	r3, #5
 8002616:	d020      	beq.n	800265a <HAL_ADC_Start+0x1f2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADC_Start+0x1c4>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_ADC_Start+0x21c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d106      	bne.n	800263a <HAL_ADC_Start+0x1d2>
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_ADC_Start+0x220>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2b09      	cmp	r3, #9
 8002636:	d010      	beq.n	800265a <HAL_ADC_Start+0x1f2>
 8002638:	e005      	b.n	8002646 <HAL_ADC_Start+0x1de>
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_ADC_Start+0x224>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b09      	cmp	r3, #9
 8002644:	d009      	beq.n	800265a <HAL_ADC_Start+0x1f2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800264e:	d004      	beq.n	800265a <HAL_ADC_Start+0x1f2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0e      	ldr	r2, [pc, #56]	; (8002690 <HAL_ADC_Start+0x228>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10f      	bne.n	800267a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0204 	orr.w	r2, r2, #4
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	e006      	b.n	800267a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002674:	e001      	b.n	800267a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002676:	2302      	movs	r3, #2
 8002678:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	50000100 	.word	0x50000100
 8002688:	50000300 	.word	0x50000300
 800268c:	50000700 	.word	0x50000700
 8002690:	50000400 	.word	0x50000400

08002694 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002694:	b480      	push	{r7}
 8002696:	b09d      	sub	sp, #116	; 0x74
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_ADCEx_InjectedConfigChannel+0x26>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e364      	b.n	8002d84 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d151      	bne.n	8002776 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d143      	bne.n	8002762 <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d02b      	beq.n	800273a <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	021a      	lsls	r2, r3, #8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4984      	ldr	r1, [pc, #528]	; (8002900 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80026ee:	428b      	cmp	r3, r1
 80026f0:	d004      	beq.n	80026fc <HAL_ADCEx_InjectedConfigChannel+0x68>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4983      	ldr	r1, [pc, #524]	; (8002904 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d114      	bne.n	8002726 <HAL_ADCEx_InjectedConfigChannel+0x92>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d00e      	beq.n	8002722 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2b14      	cmp	r3, #20
 800270a:	d008      	beq.n	800271e <HAL_ADCEx_InjectedConfigChannel+0x8a>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	2b1c      	cmp	r3, #28
 8002712:	d002      	beq.n	800271a <HAL_ADCEx_InjectedConfigChannel+0x86>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	e007      	b.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x96>
 800271a:	2310      	movs	r3, #16
 800271c:	e005      	b.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x96>
 800271e:	231c      	movs	r3, #28
 8002720:	e003      	b.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x96>
 8002722:	2334      	movs	r3, #52	; 0x34
 8002724:	e001      	b.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x96>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	431a      	orrs	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	4313      	orrs	r3, r2
 8002732:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002734:	4313      	orrs	r3, r2
 8002736:	66bb      	str	r3, [r7, #104]	; 0x68
 8002738:	e005      	b.n	8002746 <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002742:	4313      	orrs	r3, r2
 8002744:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800274c:	4b6e      	ldr	r3, [pc, #440]	; (8002908 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002756:	430b      	orrs	r3, r1
 8002758:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800275e:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002760:	e07f      	b.n	8002862 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002774:	e075      	b.n	8002862 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d140      	bne.n	8002800 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d02d      	beq.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	1e59      	subs	r1, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4857      	ldr	r0, [pc, #348]	; (8002900 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80027a4:	4283      	cmp	r3, r0
 80027a6:	d004      	beq.n	80027b2 <HAL_ADCEx_InjectedConfigChannel+0x11e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4855      	ldr	r0, [pc, #340]	; (8002904 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 80027ae:	4283      	cmp	r3, r0
 80027b0:	d114      	bne.n	80027dc <HAL_ADCEx_InjectedConfigChannel+0x148>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d00e      	beq.n	80027d8 <HAL_ADCEx_InjectedConfigChannel+0x144>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	2b14      	cmp	r3, #20
 80027c0:	d008      	beq.n	80027d4 <HAL_ADCEx_InjectedConfigChannel+0x140>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	2b1c      	cmp	r3, #28
 80027c8:	d002      	beq.n	80027d0 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	e007      	b.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80027d0:	2310      	movs	r3, #16
 80027d2:	e005      	b.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80027d4:	231c      	movs	r3, #28
 80027d6:	e003      	b.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80027d8:	2334      	movs	r3, #52	; 0x34
 80027da:	e001      	b.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4319      	orrs	r1, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	430b      	orrs	r3, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	649a      	str	r2, [r3, #72]	; 0x48
 80027ee:	e007      	b.n	8002800 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	3302      	adds	r3, #2
 8002812:	221f      	movs	r2, #31
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	4019      	ands	r1, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	3302      	adds	r3, #2
 800282e:	fa00 f303 	lsl.w	r3, r0, r3
 8002832:	ea41 0203 	orr.w	r2, r1, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8002854:	4013      	ands	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	430b      	orrs	r3, r1
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d12d      	bne.n	80028cc <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	7f5b      	ldrb	r3, [r3, #29]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d110      	bne.n	800289a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	7f9b      	ldrb	r3, [r3, #30]
 8002886:	055a      	lsls	r2, r3, #21
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	7f1b      	ldrb	r3, [r3, #28]
 800288c:	051b      	lsls	r3, r3, #20
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	e018      	b.n	80028cc <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	7f9b      	ldrb	r3, [r3, #30]
 80028a8:	055a      	lsls	r2, r3, #21
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	7f1b      	ldrb	r3, [r3, #28]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d108      	bne.n	80028cc <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 8111 	bne.w	8002afe <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d113      	bne.n	800290c <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7f5b      	ldrb	r3, [r3, #29]
 80028f2:	065a      	lsls	r2, r3, #25
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e01b      	b.n	8002936 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 80028fe:	bf00      	nop
 8002900:	50000400 	.word	0x50000400
 8002904:	50000500 	.word	0x50000500
 8002908:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800291a:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7f5b      	ldrb	r3, [r3, #29]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d108      	bne.n	8002936 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b09      	cmp	r3, #9
 800293c:	d91c      	bls.n	8002978 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6999      	ldr	r1, [r3, #24]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	3b1e      	subs	r3, #30
 8002950:	2207      	movs	r2, #7
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	4019      	ands	r1, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6898      	ldr	r0, [r3, #8]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	3b1e      	subs	r3, #30
 800296a:	fa00 f203 	lsl.w	r2, r0, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	619a      	str	r2, [r3, #24]
 8002976:	e019      	b.n	80029ac <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6959      	ldr	r1, [r3, #20]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	2207      	movs	r2, #7
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	4019      	ands	r1, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6898      	ldr	r0, [r3, #8]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	fa00 f203 	lsl.w	r2, r0, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	08db      	lsrs	r3, r3, #3
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d84e      	bhi.n	8002a6c <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	08002a07 	.word	0x08002a07
 80029dc:	08002a29 	.word	0x08002a29
 80029e0:	08002a4b 	.word	0x08002a4b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ea:	4b9a      	ldr	r3, [pc, #616]	; (8002c54 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	0691      	lsls	r1, r2, #26
 80029f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80029f6:	430a      	orrs	r2, r1
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a02:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002a04:	e07e      	b.n	8002b04 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a0c:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	0691      	lsls	r1, r2, #26
 8002a16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a24:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002a26:	e06d      	b.n	8002b04 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a2e:	4b89      	ldr	r3, [pc, #548]	; (8002c54 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	0691      	lsls	r1, r2, #26
 8002a38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a46:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002a48:	e05c      	b.n	8002b04 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a50:	4b80      	ldr	r3, [pc, #512]	; (8002c54 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	0691      	lsls	r1, r2, #26
 8002a5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a68:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8002a6a:	e04b      	b.n	8002b04 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d107      	bne.n	8002a90 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a8e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ab2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	069b      	lsls	r3, r3, #26
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10a      	bne.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002afa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002afc:	e001      	b.n	8002b02 <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8002b02:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d108      	bne.n	8002b24 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <HAL_ADCEx_InjectedConfigChannel+0x492>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 8126 	bne.w	8002d78 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d00f      	beq.n	8002b54 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2201      	movs	r2, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b52:	e049      	b.n	8002be8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b09      	cmp	r3, #9
 8002b74:	d91c      	bls.n	8002bb0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6999      	ldr	r1, [r3, #24]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	3b1b      	subs	r3, #27
 8002b88:	2207      	movs	r2, #7
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	4019      	ands	r1, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6898      	ldr	r0, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b1b      	subs	r3, #27
 8002ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	619a      	str	r2, [r3, #24]
 8002bae:	e01b      	b.n	8002be8 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6959      	ldr	r1, [r3, #20]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	4019      	ands	r1, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6898      	ldr	r0, [r3, #8]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADCEx_InjectedConfigChannel+0x568>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 8002bfe:	e000      	b.n	8002c02 <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_ADCEx_InjectedConfigChannel+0x5cc>)
 8002c02:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c1c:	2b11      	cmp	r3, #17
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c30:	2b12      	cmp	r3, #18
 8002c32:	f040 80a1 	bne.w	8002d78 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 809a 	bne.w	8002d78 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4c:	d10a      	bne.n	8002c64 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
 8002c4e:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e022      	b.n	8002c9a <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002c54:	83fff000 	.word	0x83fff000
 8002c58:	50000100 	.word	0x50000100
 8002c5c:	50000300 	.word	0x50000300
 8002c60:	50000700 	.word	0x50000700
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a49      	ldr	r2, [pc, #292]	; (8002d90 <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d103      	bne.n	8002c76 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8002c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e011      	b.n	8002c9a <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a46      	ldr	r2, [pc, #280]	; (8002d94 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d102      	bne.n	8002c86 <HAL_ADCEx_InjectedConfigChannel+0x5f2>
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e009      	b.n	8002c9a <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADCEx_InjectedConfigChannel+0x602>
 8002c90:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e001      	b.n	8002c9a <HAL_ADCEx_InjectedConfigChannel+0x606>
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_ADCEx_InjectedConfigChannel+0x626>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADCEx_InjectedConfigChannel+0x626>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_ADCEx_InjectedConfigChannel+0x628>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d150      	bne.n	8002d62 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cc0:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_ADCEx_InjectedConfigChannel+0x654>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8002ce2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d13c      	bne.n	8002d62 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d11d      	bne.n	8002d2c <HAL_ADCEx_InjectedConfigChannel+0x698>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d118      	bne.n	8002d2c <HAL_ADCEx_InjectedConfigChannel+0x698>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d04:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	0c9a      	lsrs	r2, r3, #18
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002d1c:	e002      	b.n	8002d24 <HAL_ADCEx_InjectedConfigChannel+0x690>
          {
            wait_loop_index--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f9      	bne.n	8002d1e <HAL_ADCEx_InjectedConfigChannel+0x68a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d2a:	e024      	b.n	8002d76 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b11      	cmp	r3, #17
 8002d32:	d10b      	bne.n	8002d4c <HAL_ADCEx_InjectedConfigChannel+0x6b8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADCEx_InjectedConfigChannel+0x6b8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d48:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d4a:	e014      	b.n	8002d76 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b12      	cmp	r3, #18
 8002d52:	d110      	bne.n	8002d76 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d5e:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d60:	e009      	b.n	8002d76 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002d74:	e000      	b.n	8002d78 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d76:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3774      	adds	r7, #116	; 0x74
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	50000100 	.word	0x50000100
 8002d94:	50000400 	.word	0x50000400
 8002d98:	50000500 	.word	0x50000500
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	431bde83 	.word	0x431bde83

08002da4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b099      	sub	sp, #100	; 0x64
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbc:	d102      	bne.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	e01a      	b.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6a      	ldr	r2, [pc, #424]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d103      	bne.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002dce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	e011      	b.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a67      	ldr	r2, [pc, #412]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d102      	bne.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002de0:	4b66      	ldr	r3, [pc, #408]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	e009      	b.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a64      	ldr	r2, [pc, #400]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002df0:	4b61      	ldr	r3, [pc, #388]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	e001      	b.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0b0      	b.n	8002f66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e0a9      	b.n	8002f66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 808d 	bne.w	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 8086 	bne.w	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e40:	d004      	beq.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e4c:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e4e:	e000      	b.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e50:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002e52:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d040      	beq.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6e:	035b      	lsls	r3, r3, #13
 8002e70:	430b      	orrs	r3, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e76:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d108      	bne.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d15c      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002eba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d14b      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ec8:	f023 030f 	bic.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	6811      	ldr	r1, [r2, #0]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eda:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002edc:	e03c      	b.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d123      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d112      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f3a:	f023 030f 	bic.w	r3, r3, #15
 8002f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f42:	e009      	b.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f56:	e000      	b.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f66:	4618      	mov	r0, r3
 8002f68:	3764      	adds	r7, #100	; 0x64
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	50000100 	.word	0x50000100
 8002f78:	50000400 	.word	0x50000400
 8002f7c:	50000500 	.word	0x50000500
 8002f80:	50000300 	.word	0x50000300
 8002f84:	50000700 	.word	0x50000700

08002f88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d108      	bne.n	8002fb4 <ADC_Enable+0x2c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <ADC_Enable+0x2c>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <ADC_Enable+0x2e>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d143      	bne.n	8003042 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <ADC_Enable+0xc4>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0210 	orr.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0201 	orr.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e02f      	b.n	8003044 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ff4:	f7ff f828 	bl	8002048 <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ffa:	e01b      	b.n	8003034 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ffc:	f7ff f824 	bl	8002048 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d914      	bls.n	8003034 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d00d      	beq.n	8003034 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d1dc      	bne.n	8002ffc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	8000003f 	.word	0x8000003f

08003050 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <ADC_Disable+0x2c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <ADC_Disable+0x2c>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <ADC_Disable+0x2e>
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d047      	beq.n	8003112 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030d 	and.w	r3, r3, #13
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10f      	bne.n	80030b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0202 	orr.w	r2, r2, #2
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2203      	movs	r2, #3
 80030a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030a8:	f7fe ffce 	bl	8002048 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030ae:	e029      	b.n	8003104 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f043 0210 	orr.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e023      	b.n	8003114 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030cc:	f7fe ffbc 	bl	8002048 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d914      	bls.n	8003104 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10d      	bne.n	8003104 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0210 	orr.w	r2, r3, #16
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e007      	b.n	8003114 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d0dc      	beq.n	80030cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0ed      	b.n	800330a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d102      	bne.n	8003140 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe f832 	bl	80011a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003150:	f7fe ff7a 	bl	8002048 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003156:	e012      	b.n	800317e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003158:	f7fe ff76 	bl	8002048 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b0a      	cmp	r3, #10
 8003164:	d90b      	bls.n	800317e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2205      	movs	r2, #5
 8003176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0c5      	b.n	800330a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0e5      	beq.n	8003158 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0202 	bic.w	r2, r2, #2
 800319a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7fe ff54 	bl	8002048 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031a2:	e012      	b.n	80031ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a4:	f7fe ff50 	bl	8002048 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d90b      	bls.n	80031ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e09f      	b.n	800330a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7e1b      	ldrb	r3, [r3, #24]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e007      	b.n	8003202 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7e5b      	ldrb	r3, [r3, #25]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e007      	b.n	800322c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e9b      	ldrb	r3, [r3, #26]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0220 	orr.w	r2, r2, #32
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e007      	b.n	8003256 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0220 	bic.w	r2, r2, #32
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7edb      	ldrb	r3, [r3, #27]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0210 	bic.w	r2, r2, #16
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e007      	b.n	8003280 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0210 	orr.w	r2, r2, #16
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7f1b      	ldrb	r3, [r3, #28]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0208 	orr.w	r2, r2, #8
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0208 	bic.w	r2, r2, #8
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7f5b      	ldrb	r3, [r3, #29]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0204 	orr.w	r2, r2, #4
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	ea42 0103 	orr.w	r1, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	1e5a      	subs	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d12e      	bne.n	8003384 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800333e:	f7fe fe83 	bl	8002048 <HAL_GetTick>
 8003342:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003344:	e012      	b.n	800336c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003346:	f7fe fe7f 	bl	8002048 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b0a      	cmp	r3, #10
 8003352:	d90b      	bls.n	800336c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2205      	movs	r2, #5
 8003364:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e012      	b.n	8003392 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e5      	bne.n	8003346 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e006      	b.n	8003392 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800339a:	b480      	push	{r7}
 800339c:	b089      	sub	sp, #36	; 0x24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033b8:	7ffb      	ldrb	r3, [r7, #31]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <HAL_CAN_AddTxMessage+0x2c>
 80033be:	7ffb      	ldrb	r3, [r7, #31]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f040 80b8 	bne.w	8003536 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a0 	beq.w	8003526 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	0e1b      	lsrs	r3, r3, #24
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d907      	bls.n	8003406 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e09e      	b.n	8003544 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003406:	2201      	movs	r2, #1
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	6809      	ldr	r1, [r1, #0]
 8003426:	431a      	orrs	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3318      	adds	r3, #24
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	440b      	add	r3, r1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e00f      	b.n	8003454 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800343e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003448:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3318      	adds	r3, #24
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	440b      	add	r3, r1
 8003452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3318      	adds	r3, #24
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	440b      	add	r3, r1
 8003464:	3304      	adds	r3, #4
 8003466:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	7d1b      	ldrb	r3, [r3, #20]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d111      	bne.n	8003494 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3318      	adds	r3, #24
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	6811      	ldr	r1, [r2, #0]
 8003484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3318      	adds	r3, #24
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	440b      	add	r3, r1
 8003490:	3304      	adds	r3, #4
 8003492:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3307      	adds	r3, #7
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	061a      	lsls	r2, r3, #24
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3306      	adds	r3, #6
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3305      	adds	r3, #5
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	4313      	orrs	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	3204      	adds	r2, #4
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	4610      	mov	r0, r2
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6811      	ldr	r1, [r2, #0]
 80034bc:	ea43 0200 	orr.w	r2, r3, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3303      	adds	r3, #3
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	061a      	lsls	r2, r3, #24
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3302      	adds	r3, #2
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3301      	adds	r3, #1
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	4313      	orrs	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	4610      	mov	r0, r2
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	6811      	ldr	r1, [r2, #0]
 80034f2:	ea43 0200 	orr.w	r2, r3, r0
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003500:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3318      	adds	r3, #24
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	6811      	ldr	r1, [r2, #0]
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	3318      	adds	r3, #24
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	440b      	add	r3, r1
 8003520:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e00e      	b.n	8003544 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e006      	b.n	8003544 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3724      	adds	r7, #36	; 0x24
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003564:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d003      	beq.n	8003574 <HAL_CAN_GetRxMessage+0x24>
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b02      	cmp	r3, #2
 8003570:	f040 80f3 	bne.w	800375a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10e      	bne.n	8003598 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d116      	bne.n	80035b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0e7      	b.n	8003768 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0d8      	b.n	8003768 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	331b      	adds	r3, #27
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	4413      	add	r3, r2
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0204 	and.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10c      	bne.n	80035ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	331b      	adds	r3, #27
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	4413      	add	r3, r2
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0d5b      	lsrs	r3, r3, #21
 80035e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e00b      	b.n	8003606 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	331b      	adds	r3, #27
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	08db      	lsrs	r3, r3, #3
 80035fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	331b      	adds	r3, #27
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0202 	and.w	r2, r3, #2
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	331b      	adds	r3, #27
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	331b      	adds	r3, #27
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	4413      	add	r3, r2
 8003640:	3304      	adds	r3, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	b2da      	uxtb	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	331b      	adds	r3, #27
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	4413      	add	r3, r2
 8003658:	3304      	adds	r3, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	4413      	add	r3, r2
 800366e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0a1a      	lsrs	r2, r3, #8
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0c1a      	lsrs	r2, r3, #16
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	3302      	adds	r3, #2
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0e1a      	lsrs	r2, r3, #24
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	3303      	adds	r3, #3
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	3304      	adds	r3, #4
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0a1a      	lsrs	r2, r3, #8
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3305      	adds	r3, #5
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	4413      	add	r3, r2
 8003704:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0c1a      	lsrs	r2, r3, #16
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	3306      	adds	r3, #6
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e1a      	lsrs	r2, r3, #24
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3307      	adds	r3, #7
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0220 	orr.w	r2, r2, #32
 8003742:	60da      	str	r2, [r3, #12]
 8003744:	e007      	b.n	8003756 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0220 	orr.w	r2, r2, #32
 8003754:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e006      	b.n	8003768 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800377c:	2300      	movs	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d07c      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d023      	beq.n	800380c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2201      	movs	r2, #1
 80037ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f983 	bl	8003ae2 <HAL_CAN_TxMailbox0CompleteCallback>
 80037dc:	e016      	b.n	800380c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
 80037f0:	e00c      	b.n	800380c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	e002      	b.n	800380c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f989 	bl	8003b1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d024      	beq.n	8003860 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f963 	bl	8003af6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003830:	e016      	b.n	8003860 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	e00c      	b.n	8003860 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	e002      	b.n	8003860 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f969 	bl	8003b32 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d024      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003872:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f943 	bl	8003b0a <HAL_CAN_TxMailbox2CompleteCallback>
 8003884:	e016      	b.n	80038b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
 8003898:	e00c      	b.n	80038b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	e002      	b.n	80038b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f949 	bl	8003b46 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2210      	movs	r2, #16
 80038d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2208      	movs	r2, #8
 80038f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f930 	bl	8003b5a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fd70 	bl	80013f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003932:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2210      	movs	r2, #16
 800393a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2208      	movs	r2, #8
 8003956:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f912 	bl	8003b82 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	d009      	beq.n	800397c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8f9 	bl	8003b6e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2210      	movs	r2, #16
 8003996:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8fc 	bl	8003b96 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2208      	movs	r2, #8
 80039b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f8f5 	bl	8003baa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d07b      	beq.n	8003ac2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d072      	beq.n	8003aba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f043 0304 	orr.w	r3, r3, #4
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d043      	beq.n	8003aba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d03e      	beq.n	8003aba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a42:	2b60      	cmp	r3, #96	; 0x60
 8003a44:	d02b      	beq.n	8003a9e <HAL_CAN_IRQHandler+0x32a>
 8003a46:	2b60      	cmp	r3, #96	; 0x60
 8003a48:	d82e      	bhi.n	8003aa8 <HAL_CAN_IRQHandler+0x334>
 8003a4a:	2b50      	cmp	r3, #80	; 0x50
 8003a4c:	d022      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x320>
 8003a4e:	2b50      	cmp	r3, #80	; 0x50
 8003a50:	d82a      	bhi.n	8003aa8 <HAL_CAN_IRQHandler+0x334>
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d019      	beq.n	8003a8a <HAL_CAN_IRQHandler+0x316>
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d826      	bhi.n	8003aa8 <HAL_CAN_IRQHandler+0x334>
 8003a5a:	2b30      	cmp	r3, #48	; 0x30
 8003a5c:	d010      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x30c>
 8003a5e:	2b30      	cmp	r3, #48	; 0x30
 8003a60:	d822      	bhi.n	8003aa8 <HAL_CAN_IRQHandler+0x334>
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d002      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x2f8>
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d005      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a6a:	e01d      	b.n	8003aa8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a74:	e019      	b.n	8003aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	f043 0310 	orr.w	r3, r3, #16
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a7e:	e014      	b.n	8003aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	f043 0320 	orr.w	r3, r3, #32
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a88:	e00f      	b.n	8003aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a92:	e00a      	b.n	8003aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a9c:	e005      	b.n	8003aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aa6:	e000      	b.n	8003aaa <HAL_CAN_IRQHandler+0x336>
            break;
 8003aa8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ab8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f872 	bl	8003bbe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ada:	bf00      	nop
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <__NVIC_SetPriorityGrouping+0x44>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <__NVIC_SetPriorityGrouping+0x44>)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	60d3      	str	r3, [r2, #12]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <__NVIC_GetPriorityGrouping+0x18>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	0a1b      	lsrs	r3, r3, #8
 8003c26:	f003 0307 	and.w	r3, r3, #7
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	db0b      	blt.n	8003c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	f003 021f 	and.w	r2, r3, #31
 8003c50:	4907      	ldr	r1, [pc, #28]	; (8003c70 <__NVIC_EnableIRQ+0x38>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2001      	movs	r0, #1
 8003c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000e100 	.word	0xe000e100

08003c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	6039      	str	r1, [r7, #0]
 8003c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	db0a      	blt.n	8003c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <__NVIC_SetPriority+0x4c>)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	440b      	add	r3, r1
 8003c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c9c:	e00a      	b.n	8003cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4908      	ldr	r1, [pc, #32]	; (8003cc4 <__NVIC_SetPriority+0x50>)
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	3b04      	subs	r3, #4
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	761a      	strb	r2, [r3, #24]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000e100 	.word	0xe000e100
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f1c3 0307 	rsb	r3, r3, #7
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	bf28      	it	cs
 8003ce6:	2304      	movcs	r3, #4
 8003ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3304      	adds	r3, #4
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d902      	bls.n	8003cf8 <NVIC_EncodePriority+0x30>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3b03      	subs	r3, #3
 8003cf6:	e000      	b.n	8003cfa <NVIC_EncodePriority+0x32>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	401a      	ands	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d10:	f04f 31ff 	mov.w	r1, #4294967295
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	43d9      	mvns	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d20:	4313      	orrs	r3, r2
         );
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3724      	adds	r7, #36	; 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d40:	d301      	bcc.n	8003d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d42:	2301      	movs	r3, #1
 8003d44:	e00f      	b.n	8003d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <SysTick_Config+0x40>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d4e:	210f      	movs	r1, #15
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	f7ff ff8e 	bl	8003c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <SysTick_Config+0x40>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d5e:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <SysTick_Config+0x40>)
 8003d60:	2207      	movs	r2, #7
 8003d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	e000e010 	.word	0xe000e010

08003d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff29 	bl	8003bd4 <__NVIC_SetPriorityGrouping>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9c:	f7ff ff3e 	bl	8003c1c <__NVIC_GetPriorityGrouping>
 8003da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f7ff ff8e 	bl	8003cc8 <NVIC_EncodePriority>
 8003dac:	4602      	mov	r2, r0
 8003dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff5d 	bl	8003c74 <__NVIC_SetPriority>
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff31 	bl	8003c38 <__NVIC_EnableIRQ>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ffa2 	bl	8003d30 <SysTick_Config>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e037      	b.n	8003e7c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8b4 	bl	8003fcc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}  
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d024      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x72>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01f      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0204 	bic.w	r2, r2, #4
 8003ed2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003edc:	2104      	movs	r1, #4
 8003ede:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d06a      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ef4:	e065      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	2202      	movs	r2, #2
 8003efc:	409a      	lsls	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02c      	beq.n	8003f60 <HAL_DMA_IRQHandler+0xdc>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d027      	beq.n	8003f60 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 020a 	bic.w	r2, r2, #10
 8003f2c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	2102      	movs	r1, #2
 8003f40:	fa01 f202 	lsl.w	r2, r1, r2
 8003f44:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d035      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003f5e:	e030      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2208      	movs	r2, #8
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d028      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d023      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 020e 	bic.w	r2, r2, #14
 8003f88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	2101      	movs	r1, #1
 8003f94:	fa01 f202 	lsl.w	r2, r1, r2
 8003f98:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
    }
  }
}  
 8003fc0:	e7ff      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x13e>
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b14      	ldr	r3, [pc, #80]	; (800402c <DMA_CalcBaseAndBitshift+0x60>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d80f      	bhi.n	8004000 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <DMA_CalcBaseAndBitshift+0x64>)
 8003fe8:	4413      	add	r3, r2
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <DMA_CalcBaseAndBitshift+0x68>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <DMA_CalcBaseAndBitshift+0x6c>)
 8003ffc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003ffe:	e00e      	b.n	800401e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <DMA_CalcBaseAndBitshift+0x70>)
 8004008:	4413      	add	r3, r2
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <DMA_CalcBaseAndBitshift+0x68>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a09      	ldr	r2, [pc, #36]	; (8004040 <DMA_CalcBaseAndBitshift+0x74>)
 800401c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40020407 	.word	0x40020407
 8004030:	bffdfff8 	.word	0xbffdfff8
 8004034:	cccccccd 	.word	0xcccccccd
 8004038:	40020000 	.word	0x40020000
 800403c:	bffdfbf8 	.word	0xbffdfbf8
 8004040:	40020400 	.word	0x40020400

08004044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004052:	e154      	b.n	80042fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2101      	movs	r1, #1
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	4013      	ands	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 8146 	beq.w	80042f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d005      	beq.n	8004084 <HAL_GPIO_Init+0x40>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d130      	bne.n	80040e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040ba:	2201      	movs	r2, #1
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f003 0201 	and.w	r2, r3, #1
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d017      	beq.n	8004122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	2203      	movs	r2, #3
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d123      	bne.n	8004176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	08da      	lsrs	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3208      	adds	r2, #8
 8004136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	08da      	lsrs	r2, r3, #3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3208      	adds	r2, #8
 8004170:	6939      	ldr	r1, [r7, #16]
 8004172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	2203      	movs	r2, #3
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0203 	and.w	r2, r3, #3
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80a0 	beq.w	80042f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b8:	4b58      	ldr	r3, [pc, #352]	; (800431c <HAL_GPIO_Init+0x2d8>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	4a57      	ldr	r2, [pc, #348]	; (800431c <HAL_GPIO_Init+0x2d8>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6193      	str	r3, [r2, #24]
 80041c4:	4b55      	ldr	r3, [pc, #340]	; (800431c <HAL_GPIO_Init+0x2d8>)
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041d0:	4a53      	ldr	r2, [pc, #332]	; (8004320 <HAL_GPIO_Init+0x2dc>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	3302      	adds	r3, #2
 80041d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	220f      	movs	r2, #15
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041fa:	d019      	beq.n	8004230 <HAL_GPIO_Init+0x1ec>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a49      	ldr	r2, [pc, #292]	; (8004324 <HAL_GPIO_Init+0x2e0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <HAL_GPIO_Init+0x1e8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a48      	ldr	r2, [pc, #288]	; (8004328 <HAL_GPIO_Init+0x2e4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00d      	beq.n	8004228 <HAL_GPIO_Init+0x1e4>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a47      	ldr	r2, [pc, #284]	; (800432c <HAL_GPIO_Init+0x2e8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <HAL_GPIO_Init+0x1e0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a46      	ldr	r2, [pc, #280]	; (8004330 <HAL_GPIO_Init+0x2ec>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_GPIO_Init+0x1dc>
 800421c:	2304      	movs	r3, #4
 800421e:	e008      	b.n	8004232 <HAL_GPIO_Init+0x1ee>
 8004220:	2305      	movs	r3, #5
 8004222:	e006      	b.n	8004232 <HAL_GPIO_Init+0x1ee>
 8004224:	2303      	movs	r3, #3
 8004226:	e004      	b.n	8004232 <HAL_GPIO_Init+0x1ee>
 8004228:	2302      	movs	r3, #2
 800422a:	e002      	b.n	8004232 <HAL_GPIO_Init+0x1ee>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_GPIO_Init+0x1ee>
 8004230:	2300      	movs	r3, #0
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	f002 0203 	and.w	r2, r2, #3
 8004238:	0092      	lsls	r2, r2, #2
 800423a:	4093      	lsls	r3, r2
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004242:	4937      	ldr	r1, [pc, #220]	; (8004320 <HAL_GPIO_Init+0x2dc>)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	089b      	lsrs	r3, r3, #2
 8004248:	3302      	adds	r3, #2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004250:	4b38      	ldr	r3, [pc, #224]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	43db      	mvns	r3, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004274:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800427a:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	43db      	mvns	r3, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800429e:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042a4:	4b23      	ldr	r3, [pc, #140]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042c8:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042f2:	4a10      	ldr	r2, [pc, #64]	; (8004334 <HAL_GPIO_Init+0x2f0>)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3301      	adds	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	f47f aea3 	bne.w	8004054 <HAL_GPIO_Init+0x10>
  }
}
 800430e:	bf00      	nop
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40021000 	.word	0x40021000
 8004320:	40010000 	.word	0x40010000
 8004324:	48000400 	.word	0x48000400
 8004328:	48000800 	.word	0x48000800
 800432c:	48000c00 	.word	0x48000c00
 8004330:	48001000 	.word	0x48001000
 8004334:	40010400 	.word	0x40010400

08004338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]
 8004344:	4613      	mov	r3, r2
 8004346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004348:	787b      	ldrb	r3, [r7, #1]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004354:	e002      	b.n	800435c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800436e:	af00      	add	r7, sp, #0
 8004370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004378:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f001 b823 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 817d 	beq.w	800469e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043a4:	4bbc      	ldr	r3, [pc, #752]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d00c      	beq.n	80043ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043b0:	4bb9      	ldr	r3, [pc, #740]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d15c      	bne.n	8004476 <HAL_RCC_OscConfig+0x10e>
 80043bc:	4bb6      	ldr	r3, [pc, #728]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d155      	bne.n	8004476 <HAL_RCC_OscConfig+0x10e>
 80043ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d102      	bne.n	80043fc <HAL_RCC_OscConfig+0x94>
 80043f6:	4ba8      	ldr	r3, [pc, #672]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	e015      	b.n	8004428 <HAL_RCC_OscConfig+0xc0>
 80043fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004400:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004414:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004418:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800441c:	fa93 f3a3 	rbit	r3, r3
 8004420:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004424:	4b9c      	ldr	r3, [pc, #624]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800442c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004430:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004434:	fa92 f2a2 	rbit	r2, r2
 8004438:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800443c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004440:	fab2 f282 	clz	r2, r2
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	f042 0220 	orr.w	r2, r2, #32
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	f002 021f 	and.w	r2, r2, #31
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f202 	lsl.w	r2, r1, r2
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 811f 	beq.w	800469c <HAL_RCC_OscConfig+0x334>
 800445e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8116 	bne.w	800469c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f000 bfaf 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x12e>
 8004488:	4b83      	ldr	r3, [pc, #524]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a82      	ldr	r2, [pc, #520]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e036      	b.n	8004504 <HAL_RCC_OscConfig+0x19c>
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x158>
 80044a6:	4b7c      	ldr	r3, [pc, #496]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7b      	ldr	r2, [pc, #492]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b79      	ldr	r3, [pc, #484]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a78      	ldr	r2, [pc, #480]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e021      	b.n	8004504 <HAL_RCC_OscConfig+0x19c>
 80044c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0x184>
 80044d2:	4b71      	ldr	r3, [pc, #452]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a70      	ldr	r2, [pc, #448]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b6e      	ldr	r3, [pc, #440]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6d      	ldr	r2, [pc, #436]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0x19c>
 80044ec:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a69      	ldr	r2, [pc, #420]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b67      	ldr	r3, [pc, #412]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a66      	ldr	r2, [pc, #408]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80044fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004502:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004504:	4b64      	ldr	r3, [pc, #400]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	f023 020f 	bic.w	r2, r3, #15
 800450c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004510:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	495f      	ldr	r1, [pc, #380]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 800451a:	4313      	orrs	r3, r2
 800451c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800451e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d059      	beq.n	80045e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452e:	f7fd fd8b 	bl	8002048 <HAL_GetTick>
 8004532:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	e00a      	b.n	800454e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004538:	f7fd fd86 	bl	8002048 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	; 0x64
 8004546:	d902      	bls.n	800454e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	f000 bf43 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
 800454e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004552:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004562:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d102      	bne.n	8004580 <HAL_RCC_OscConfig+0x218>
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	e015      	b.n	80045ac <HAL_RCC_OscConfig+0x244>
 8004580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004584:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004598:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800459c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80045a8:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80045b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80045b8:	fa92 f2a2 	rbit	r2, r2
 80045bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80045c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80045c4:	fab2 f282 	clz	r2, r2
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	f042 0220 	orr.w	r2, r2, #32
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	f002 021f 	and.w	r2, r2, #31
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f202 	lsl.w	r2, r1, r2
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ab      	beq.n	8004538 <HAL_RCC_OscConfig+0x1d0>
 80045e0:	e05d      	b.n	800469e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fd fd31 	bl	8002048 <HAL_GetTick>
 80045e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd fd2c 	bl	8002048 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	; 0x64
 80045fa:	d902      	bls.n	8004602 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	f000 bee9 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004606:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004616:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_RCC_OscConfig+0x2cc>
 800462e:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	e015      	b.n	8004660 <HAL_RCC_OscConfig+0x2f8>
 8004634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004638:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800464c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004650:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <HAL_RCC_OscConfig+0x330>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004664:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004668:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800466c:	fa92 f2a2 	rbit	r2, r2
 8004670:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004674:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004678:	fab2 f282 	clz	r2, r2
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f002 021f 	and.w	r2, r2, #31
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f202 	lsl.w	r2, r1, r2
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ab      	bne.n	80045ec <HAL_RCC_OscConfig+0x284>
 8004694:	e003      	b.n	800469e <HAL_RCC_OscConfig+0x336>
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 817d 	beq.w	80049ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046b4:	4ba6      	ldr	r3, [pc, #664]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046c0:	4ba3      	ldr	r3, [pc, #652]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d172      	bne.n	80047b2 <HAL_RCC_OscConfig+0x44a>
 80046cc:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d16c      	bne.n	80047b2 <HAL_RCC_OscConfig+0x44a>
 80046d8:	2302      	movs	r3, #2
 80046da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80046ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_RCC_OscConfig+0x3a0>
 8004702:	4b93      	ldr	r3, [pc, #588]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	e013      	b.n	8004730 <HAL_RCC_OscConfig+0x3c8>
 8004708:	2302      	movs	r3, #2
 800470a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800471a:	2302      	movs	r3, #2
 800471c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004720:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800472c:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2202      	movs	r2, #2
 8004732:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004736:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800473a:	fa92 f2a2 	rbit	r2, r2
 800473e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004742:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004746:	fab2 f282 	clz	r2, r2
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	f042 0220 	orr.w	r2, r2, #32
 8004750:	b2d2      	uxtb	r2, r2
 8004752:	f002 021f 	and.w	r2, r2, #31
 8004756:	2101      	movs	r1, #1
 8004758:	fa01 f202 	lsl.w	r2, r1, r2
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCC_OscConfig+0x410>
 8004762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d002      	beq.n	8004778 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f000 be2e 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004778:	4b75      	ldr	r3, [pc, #468]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004784:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	21f8      	movs	r1, #248	; 0xf8
 800478e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004796:	fa91 f1a1 	rbit	r1, r1
 800479a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800479e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80047a2:	fab1 f181 	clz	r1, r1
 80047a6:	b2c9      	uxtb	r1, r1
 80047a8:	408b      	lsls	r3, r1
 80047aa:	4969      	ldr	r1, [pc, #420]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b0:	e0fd      	b.n	80049ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8088 	beq.w	80048d4 <HAL_RCC_OscConfig+0x56c>
 80047c4:	2301      	movs	r3, #1
 80047c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80047d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	461a      	mov	r2, r3
 80047ec:	2301      	movs	r3, #1
 80047ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fd fc2a 	bl	8002048 <HAL_GetTick>
 80047f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f8:	e00a      	b.n	8004810 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fa:	f7fd fc25 	bl	8002048 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d902      	bls.n	8004810 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	f000 bde2 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004810:	2302      	movs	r3, #2
 8004812:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800481a:	fa93 f3a3 	rbit	r3, r3
 800481e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004822:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_RCC_OscConfig+0x4d8>
 800483a:	4b45      	ldr	r3, [pc, #276]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	e013      	b.n	8004868 <HAL_RCC_OscConfig+0x500>
 8004840:	2302      	movs	r3, #2
 8004842:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004852:	2302      	movs	r3, #2
 8004854:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004858:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004864:	4b3a      	ldr	r3, [pc, #232]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	2202      	movs	r2, #2
 800486a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800486e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004872:	fa92 f2a2 	rbit	r2, r2
 8004876:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800487a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800487e:	fab2 f282 	clz	r2, r2
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	f042 0220 	orr.w	r2, r2, #32
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	f002 021f 	and.w	r2, r2, #31
 800488e:	2101      	movs	r1, #1
 8004890:	fa01 f202 	lsl.w	r2, r1, r2
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0af      	beq.n	80047fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	21f8      	movs	r1, #248	; 0xf8
 80048b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80048b8:	fa91 f1a1 	rbit	r1, r1
 80048bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80048c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80048c4:	fab1 f181 	clz	r1, r1
 80048c8:	b2c9      	uxtb	r1, r1
 80048ca:	408b      	lsls	r3, r1
 80048cc:	4920      	ldr	r1, [pc, #128]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
 80048d2:	e06c      	b.n	80049ae <HAL_RCC_OscConfig+0x646>
 80048d4:	2301      	movs	r3, #1
 80048d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80048e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ea:	fab3 f383 	clz	r3, r3
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	461a      	mov	r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd fba2 	bl	8002048 <HAL_GetTick>
 8004904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490a:	f7fd fb9d 	bl	8002048 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d902      	bls.n	8004920 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	f000 bd5a 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004920:	2302      	movs	r3, #2
 8004922:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004926:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800492a:	fa93 f3a3 	rbit	r3, r3
 800492e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d104      	bne.n	8004954 <HAL_RCC_OscConfig+0x5ec>
 800494a:	4b01      	ldr	r3, [pc, #4]	; (8004950 <HAL_RCC_OscConfig+0x5e8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	e015      	b.n	800497c <HAL_RCC_OscConfig+0x614>
 8004950:	40021000 	.word	0x40021000
 8004954:	2302      	movs	r3, #2
 8004956:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004966:	2302      	movs	r3, #2
 8004968:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800496c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004970:	fa93 f3a3 	rbit	r3, r3
 8004974:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004978:	4bc8      	ldr	r3, [pc, #800]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2202      	movs	r2, #2
 800497e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004982:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004986:	fa92 f2a2 	rbit	r2, r2
 800498a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800498e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004992:	fab2 f282 	clz	r2, r2
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	f042 0220 	orr.w	r2, r2, #32
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	f002 021f 	and.w	r2, r2, #31
 80049a2:	2101      	movs	r1, #1
 80049a4:	fa01 f202 	lsl.w	r2, r1, r2
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ad      	bne.n	800490a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8110 	beq.w	8004be4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d079      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x760>
 80049d4:	2301      	movs	r3, #1
 80049d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80049e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	4bab      	ldr	r3, [pc, #684]	; (8004ca0 <HAL_RCC_OscConfig+0x938>)
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	461a      	mov	r2, r3
 80049fa:	2301      	movs	r3, #1
 80049fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fd fb23 	bl	8002048 <HAL_GetTick>
 8004a02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a08:	f7fd fb1e 	bl	8002048 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d902      	bls.n	8004a1e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	f000 bcdb 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a38:	2202      	movs	r2, #2
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	fa93 f2a3 	rbit	r2, r3
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	fa93 f2a3 	rbit	r2, r3
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a76:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a78:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a84:	2102      	movs	r1, #2
 8004a86:	6019      	str	r1, [r3, #0]
 8004a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	fa93 f1a3 	rbit	r1, r3
 8004a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a9e:	6019      	str	r1, [r3, #0]
  return result;
 8004aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2101      	movs	r1, #1
 8004abc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0a0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x6a0>
 8004ac6:	e08d      	b.n	8004be4 <HAL_RCC_OscConfig+0x87c>
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	fa93 f2a3 	rbit	r2, r3
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004aea:	601a      	str	r2, [r3, #0]
  return result;
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004af4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCC_OscConfig+0x938>)
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	461a      	mov	r2, r3
 8004b06:	2300      	movs	r3, #0
 8004b08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fa9d 	bl	8002048 <HAL_GetTick>
 8004b0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b14:	f7fd fa98 	bl	8002048 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d902      	bls.n	8004b2a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	f000 bc55 	b.w	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b32:	2202      	movs	r2, #2
 8004b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	fa93 f2a3 	rbit	r2, r3
 8004b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b56:	2202      	movs	r2, #2
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fa93 f2a3 	rbit	r2, r3
 8004b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	fa93 f2a3 	rbit	r2, r3
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b96:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	6019      	str	r1, [r3, #0]
 8004ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004baa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	fa93 f1a3 	rbit	r1, r3
 8004bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bbc:	6019      	str	r1, [r3, #0]
  return result;
 8004bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	fab3 f383 	clz	r3, r3
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2101      	movs	r1, #1
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	4013      	ands	r3, r2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d197      	bne.n	8004b14 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 81a1 	beq.w	8004f3c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d116      	bne.n	8004c3a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b23      	ldr	r3, [pc, #140]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	61d3      	str	r3, [r2, #28]
 8004c18:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c24:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_OscConfig+0x93c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d11a      	bne.n	8004c7c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_RCC_OscConfig+0x93c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <HAL_RCC_OscConfig+0x93c>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c52:	f7fd f9f9 	bl	8002048 <HAL_GetTick>
 8004c56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5a:	e009      	b.n	8004c70 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5c:	f7fd f9f4 	bl	8002048 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b64      	cmp	r3, #100	; 0x64
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e3b1      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCC_OscConfig+0x93c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ef      	beq.n	8004c5c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10d      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x940>
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	4a02      	ldr	r2, [pc, #8]	; (8004c9c <HAL_RCC_OscConfig+0x934>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6213      	str	r3, [r2, #32]
 8004c98:	e03c      	b.n	8004d14 <HAL_RCC_OscConfig+0x9ac>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	10908120 	.word	0x10908120
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x96a>
 8004cb8:	4bc1      	ldr	r3, [pc, #772]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4ac0      	ldr	r2, [pc, #768]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	6213      	str	r3, [r2, #32]
 8004cc4:	4bbe      	ldr	r3, [pc, #760]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4abd      	ldr	r2, [pc, #756]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004cca:	f023 0304 	bic.w	r3, r3, #4
 8004cce:	6213      	str	r3, [r2, #32]
 8004cd0:	e020      	b.n	8004d14 <HAL_RCC_OscConfig+0x9ac>
 8004cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x994>
 8004ce2:	4bb7      	ldr	r3, [pc, #732]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4ab6      	ldr	r2, [pc, #728]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	6213      	str	r3, [r2, #32]
 8004cee:	4bb4      	ldr	r3, [pc, #720]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	4ab3      	ldr	r2, [pc, #716]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	6213      	str	r3, [r2, #32]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0x9ac>
 8004cfc:	4bb0      	ldr	r3, [pc, #704]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4aaf      	ldr	r2, [pc, #700]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	6213      	str	r3, [r2, #32]
 8004d08:	4bad      	ldr	r3, [pc, #692]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	4aac      	ldr	r2, [pc, #688]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004d0e:	f023 0304 	bic.w	r3, r3, #4
 8004d12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8081 	beq.w	8004e28 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd f98f 	bl	8002048 <HAL_GetTick>
 8004d2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fd f98a 	bl	8002048 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e345      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d50:	2202      	movs	r2, #2
 8004d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	fa93 f2a3 	rbit	r2, r3
 8004d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d74:	2202      	movs	r2, #2
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d8e:	601a      	str	r2, [r3, #0]
  return result;
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	fab3 f383 	clz	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d102      	bne.n	8004db4 <HAL_RCC_OscConfig+0xa4c>
 8004dae:	4b84      	ldr	r3, [pc, #528]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	e013      	b.n	8004ddc <HAL_RCC_OscConfig+0xa74>
 8004db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	fa93 f2a3 	rbit	r2, r3
 8004dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	4b79      	ldr	r3, [pc, #484]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004de0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004de4:	2102      	movs	r1, #2
 8004de6:	6011      	str	r1, [r2, #0]
 8004de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	fa92 f1a2 	rbit	r1, r2
 8004df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dfa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004dfe:	6011      	str	r1, [r2, #0]
  return result;
 8004e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e04:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	fab2 f282 	clz	r2, r2
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	f002 021f 	and.w	r2, r2, #31
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d084      	beq.n	8004d30 <HAL_RCC_OscConfig+0x9c8>
 8004e26:	e07f      	b.n	8004f28 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e28:	f7fd f90e 	bl	8002048 <HAL_GetTick>
 8004e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e30:	e00b      	b.n	8004e4a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fd f909 	bl	8002048 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e2c4      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e52:	2202      	movs	r2, #2
 8004e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	fa93 f2a3 	rbit	r2, r3
 8004e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e68:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e76:	2202      	movs	r2, #2
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	fa93 f2a3 	rbit	r2, r3
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e90:	601a      	str	r2, [r3, #0]
  return result;
 8004e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e96:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9c:	fab3 f383 	clz	r3, r3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f043 0302 	orr.w	r3, r3, #2
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d102      	bne.n	8004eb6 <HAL_RCC_OscConfig+0xb4e>
 8004eb0:	4b43      	ldr	r3, [pc, #268]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	e013      	b.n	8004ede <HAL_RCC_OscConfig+0xb76>
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	fa93 f2a3 	rbit	r2, r3
 8004ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ee2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	fa92 f1a2 	rbit	r1, r2
 8004ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004efc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f00:	6011      	str	r1, [r2, #0]
  return result;
 8004f02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f06:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	fab2 f282 	clz	r2, r2
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	f002 021f 	and.w	r2, r2, #31
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d184      	bne.n	8004e32 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f28:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f30:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8242 	beq.w	80053d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f4e:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <HAL_RCC_OscConfig+0xc58>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	f000 8213 	beq.w	8005382 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	f040 8162 	bne.w	8005232 <HAL_RCC_OscConfig+0xeca>
 8004f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f72:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	fa93 f2a3 	rbit	r2, r3
 8004f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f92:	601a      	str	r2, [r3, #0]
  return result;
 8004f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fd f848 	bl	8002048 <HAL_GetTick>
 8004fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fbc:	e00c      	b.n	8004fd8 <HAL_RCC_OscConfig+0xc70>
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fd f840 	bl	8002048 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1fd      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	fa93 f2a3 	rbit	r2, r3
 8004ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ffc:	601a      	str	r2, [r3, #0]
  return result;
 8004ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005002:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005006:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d102      	bne.n	8005022 <HAL_RCC_OscConfig+0xcba>
 800501c:	4bb0      	ldr	r3, [pc, #704]	; (80052e0 <HAL_RCC_OscConfig+0xf78>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	e027      	b.n	8005072 <HAL_RCC_OscConfig+0xd0a>
 8005022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005026:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800502a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800502e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005034:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	fa93 f2a3 	rbit	r2, r3
 800503e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005042:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	fa93 f2a3 	rbit	r2, r3
 8005064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005068:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4b9c      	ldr	r3, [pc, #624]	; (80052e0 <HAL_RCC_OscConfig+0xf78>)
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005076:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800507a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800507e:	6011      	str	r1, [r2, #0]
 8005080:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005084:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	fa92 f1a2 	rbit	r1, r2
 800508e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005092:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005096:	6011      	str	r1, [r2, #0]
  return result;
 8005098:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800509c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	fab2 f282 	clz	r2, r2
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	f042 0220 	orr.w	r2, r2, #32
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	f002 021f 	and.w	r2, r2, #31
 80050b2:	2101      	movs	r1, #1
 80050b4:	fa01 f202 	lsl.w	r2, r1, r2
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d182      	bne.n	8004fc4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050be:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCC_OscConfig+0xf78>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	430b      	orrs	r3, r1
 80050e0:	497f      	ldr	r1, [pc, #508]	; (80052e0 <HAL_RCC_OscConfig+0xf78>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	604b      	str	r3, [r1, #4]
 80050e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80050ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	fa93 f2a3 	rbit	r2, r3
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800510a:	601a      	str	r2, [r3, #0]
  return result;
 800510c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005110:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005114:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005116:	fab3 f383 	clz	r3, r3
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005120:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	461a      	mov	r2, r3
 8005128:	2301      	movs	r3, #1
 800512a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512c:	f7fc ff8c 	bl	8002048 <HAL_GetTick>
 8005130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005134:	e009      	b.n	800514a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005136:	f7fc ff87 	bl	8002048 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e144      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
 800514a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	fa93 f2a3 	rbit	r2, r3
 8005166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800516e:	601a      	str	r2, [r3, #0]
  return result;
 8005170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005174:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005178:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d102      	bne.n	8005194 <HAL_RCC_OscConfig+0xe2c>
 800518e:	4b54      	ldr	r3, [pc, #336]	; (80052e0 <HAL_RCC_OscConfig+0xf78>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	e027      	b.n	80051e4 <HAL_RCC_OscConfig+0xe7c>
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800519c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	fa93 f2a3 	rbit	r2, r3
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	fa93 f2a3 	rbit	r2, r3
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	4b3f      	ldr	r3, [pc, #252]	; (80052e0 <HAL_RCC_OscConfig+0xf78>)
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80051ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	fa92 f1a2 	rbit	r1, r2
 8005200:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005204:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005208:	6011      	str	r1, [r2, #0]
  return result;
 800520a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800520e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	fab2 f282 	clz	r2, r2
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	f042 0220 	orr.w	r2, r2, #32
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	f002 021f 	and.w	r2, r2, #31
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f202 	lsl.w	r2, r1, r2
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d082      	beq.n	8005136 <HAL_RCC_OscConfig+0xdce>
 8005230:	e0cf      	b.n	80053d2 <HAL_RCC_OscConfig+0x106a>
 8005232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005236:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800523a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800523e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005244:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	fa93 f2a3 	rbit	r2, r3
 800524e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005252:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005256:	601a      	str	r2, [r3, #0]
  return result;
 8005258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005260:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800526c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	461a      	mov	r2, r3
 8005274:	2300      	movs	r3, #0
 8005276:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fc fee6 	bl	8002048 <HAL_GetTick>
 800527c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005280:	e009      	b.n	8005296 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005282:	f7fc fee1 	bl	8002048 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e09e      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
 8005296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800529e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	fa93 f2a3 	rbit	r2, r3
 80052b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052ba:	601a      	str	r2, [r3, #0]
  return result;
 80052bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c6:	fab3 f383 	clz	r3, r3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d104      	bne.n	80052e4 <HAL_RCC_OscConfig+0xf7c>
 80052da:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <HAL_RCC_OscConfig+0xf78>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	e029      	b.n	8005334 <HAL_RCC_OscConfig+0xfcc>
 80052e0:	40021000 	.word	0x40021000
 80052e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80052ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	fa93 f2a3 	rbit	r2, r3
 8005300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005304:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	fa93 f2a3 	rbit	r2, r3
 8005326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	4b2b      	ldr	r3, [pc, #172]	; (80053e0 <HAL_RCC_OscConfig+0x1078>)
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005338:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800533c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005340:	6011      	str	r1, [r2, #0]
 8005342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005346:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	fa92 f1a2 	rbit	r1, r2
 8005350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005354:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005358:	6011      	str	r1, [r2, #0]
  return result;
 800535a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800535e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	fab2 f282 	clz	r2, r2
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	f042 0220 	orr.w	r2, r2, #32
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	f002 021f 	and.w	r2, r2, #31
 8005374:	2101      	movs	r1, #1
 8005376:	fa01 f202 	lsl.w	r2, r1, r2
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d180      	bne.n	8005282 <HAL_RCC_OscConfig+0xf1a>
 8005380:	e027      	b.n	80053d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e01e      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <HAL_RCC_OscConfig+0x1078>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800539e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d10b      	bne.n	80053ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d001      	beq.n	80053d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b09e      	sub	sp, #120	; 0x78
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e162      	b.n	80056c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053fc:	4b90      	ldr	r3, [pc, #576]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d910      	bls.n	800542c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b8d      	ldr	r3, [pc, #564]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 0207 	bic.w	r2, r3, #7
 8005412:	498b      	ldr	r1, [pc, #556]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b89      	ldr	r3, [pc, #548]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d001      	beq.n	800542c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e14a      	b.n	80056c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005438:	4b82      	ldr	r3, [pc, #520]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	497f      	ldr	r1, [pc, #508]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 8005446:	4313      	orrs	r3, r2
 8005448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80dc 	beq.w	8005610 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d13c      	bne.n	80054da <HAL_RCC_ClockConfig+0xf6>
 8005460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005464:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005470:	fab3 f383 	clz	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d102      	bne.n	800548a <HAL_RCC_ClockConfig+0xa6>
 8005484:	4b6f      	ldr	r3, [pc, #444]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	e00f      	b.n	80054aa <HAL_RCC_ClockConfig+0xc6>
 800548a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800548e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	667b      	str	r3, [r7, #100]	; 0x64
 8005498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800549c:	663b      	str	r3, [r7, #96]	; 0x60
 800549e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a6:	4b67      	ldr	r3, [pc, #412]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80054b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054b2:	fa92 f2a2 	rbit	r2, r2
 80054b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054ba:	fab2 f282 	clz	r2, r2
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	f042 0220 	orr.w	r2, r2, #32
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	f002 021f 	and.w	r2, r2, #31
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f202 	lsl.w	r2, r1, r2
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d17b      	bne.n	80055ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0f3      	b.n	80056c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d13c      	bne.n	800555c <HAL_RCC_ClockConfig+0x178>
 80054e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ea:	fa93 f3a3 	rbit	r3, r3
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f2:	fab3 f383 	clz	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <HAL_RCC_ClockConfig+0x128>
 8005506:	4b4f      	ldr	r3, [pc, #316]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	e00f      	b.n	800552c <HAL_RCC_ClockConfig+0x148>
 800550c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005510:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005514:	fa93 f3a3 	rbit	r3, r3
 8005518:	647b      	str	r3, [r7, #68]	; 0x44
 800551a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800551e:	643b      	str	r3, [r7, #64]	; 0x40
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	fa93 f3a3 	rbit	r3, r3
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005528:	4b46      	ldr	r3, [pc, #280]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005530:	63ba      	str	r2, [r7, #56]	; 0x38
 8005532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005534:	fa92 f2a2 	rbit	r2, r2
 8005538:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800553a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800553c:	fab2 f282 	clz	r2, r2
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	f042 0220 	orr.w	r2, r2, #32
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	f002 021f 	and.w	r2, r2, #31
 800554c:	2101      	movs	r1, #1
 800554e:	fa01 f202 	lsl.w	r2, r1, r2
 8005552:	4013      	ands	r3, r2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d13a      	bne.n	80055ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0b2      	b.n	80056c2 <HAL_RCC_ClockConfig+0x2de>
 800555c:	2302      	movs	r3, #2
 800555e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	fa93 f3a3 	rbit	r3, r3
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	b2db      	uxtb	r3, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b01      	cmp	r3, #1
 800557c:	d102      	bne.n	8005584 <HAL_RCC_ClockConfig+0x1a0>
 800557e:	4b31      	ldr	r3, [pc, #196]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	e00d      	b.n	80055a0 <HAL_RCC_ClockConfig+0x1bc>
 8005584:	2302      	movs	r3, #2
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
 8005590:	2302      	movs	r3, #2
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	4b29      	ldr	r3, [pc, #164]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2202      	movs	r2, #2
 80055a2:	61ba      	str	r2, [r7, #24]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	fa92 f2a2 	rbit	r2, r2
 80055aa:	617a      	str	r2, [r7, #20]
  return result;
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	fab2 f282 	clz	r2, r2
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	f042 0220 	orr.w	r2, r2, #32
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	f002 021f 	and.w	r2, r2, #31
 80055be:	2101      	movs	r1, #1
 80055c0:	fa01 f202 	lsl.w	r2, r1, r2
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e079      	b.n	80056c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ce:	4b1d      	ldr	r3, [pc, #116]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f023 0203 	bic.w	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	491a      	ldr	r1, [pc, #104]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fc fd32 	bl	8002048 <HAL_GetTick>
 80055e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fc fd2e 	bl	8002048 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e061      	b.n	80056c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	4b11      	ldr	r3, [pc, #68]	; (8005644 <HAL_RCC_ClockConfig+0x260>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 020c 	and.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	429a      	cmp	r2, r3
 800560e:	d1eb      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d214      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 0207 	bic.w	r2, r3, #7
 8005626:	4906      	ldr	r1, [pc, #24]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <HAL_RCC_ClockConfig+0x25c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e040      	b.n	80056c2 <HAL_RCC_ClockConfig+0x2de>
 8005640:	40022000 	.word	0x40022000
 8005644:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005654:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <HAL_RCC_ClockConfig+0x2e8>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	491a      	ldr	r1, [pc, #104]	; (80056cc <HAL_RCC_ClockConfig+0x2e8>)
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005672:	4b16      	ldr	r3, [pc, #88]	; (80056cc <HAL_RCC_ClockConfig+0x2e8>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4912      	ldr	r1, [pc, #72]	; (80056cc <HAL_RCC_ClockConfig+0x2e8>)
 8005682:	4313      	orrs	r3, r2
 8005684:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005686:	f000 f829 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800568a:	4601      	mov	r1, r0
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <HAL_RCC_ClockConfig+0x2e8>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005694:	22f0      	movs	r2, #240	; 0xf0
 8005696:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	fa92 f2a2 	rbit	r2, r2
 800569e:	60fa      	str	r2, [r7, #12]
  return result;
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	fab2 f282 	clz	r2, r2
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	40d3      	lsrs	r3, r2
 80056aa:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <HAL_RCC_ClockConfig+0x2ec>)
 80056ac:	5cd3      	ldrb	r3, [r2, r3]
 80056ae:	fa21 f303 	lsr.w	r3, r1, r3
 80056b2:	4a08      	ldr	r2, [pc, #32]	; (80056d4 <HAL_RCC_ClockConfig+0x2f0>)
 80056b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056b6:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <HAL_RCC_ClockConfig+0x2f4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fc fc80 	bl	8001fc0 <HAL_InitTick>
  
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3778      	adds	r7, #120	; 0x78
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000
 80056d0:	08009f74 	.word	0x08009f74
 80056d4:	20000000 	.word	0x20000000
 80056d8:	20000004 	.word	0x20000004

080056dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	b08b      	sub	sp, #44	; 0x2c
 80056e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	2300      	movs	r3, #0
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80056f6:	4b29      	ldr	r3, [pc, #164]	; (800579c <HAL_RCC_GetSysClockFreq+0xc0>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b04      	cmp	r3, #4
 8005704:	d002      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x30>
 8005706:	2b08      	cmp	r3, #8
 8005708:	d003      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x36>
 800570a:	e03c      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800570e:	623b      	str	r3, [r7, #32]
      break;
 8005710:	e03c      	b.n	800578c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005718:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800571c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	fa92 f2a2 	rbit	r2, r2
 8005724:	607a      	str	r2, [r7, #4]
  return result;
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	fab2 f282 	clz	r2, r2
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	40d3      	lsrs	r3, r2
 8005730:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005732:	5cd3      	ldrb	r3, [r2, r3]
 8005734:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005736:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	220f      	movs	r2, #15
 8005740:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	fa92 f2a2 	rbit	r2, r2
 8005748:	60fa      	str	r2, [r7, #12]
  return result;
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	fab2 f282 	clz	r2, r2
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	40d3      	lsrs	r3, r2
 8005754:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005764:	4a0e      	ldr	r2, [pc, #56]	; (80057a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	fbb2 f2f3 	udiv	r2, r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
 8005774:	e004      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4a0c      	ldr	r2, [pc, #48]	; (80057ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	623b      	str	r3, [r7, #32]
      break;
 8005784:	e002      	b.n	800578c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005788:	623b      	str	r3, [r7, #32]
      break;
 800578a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578c:	6a3b      	ldr	r3, [r7, #32]
}
 800578e:	4618      	mov	r0, r3
 8005790:	372c      	adds	r7, #44	; 0x2c
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	007a1200 	.word	0x007a1200
 80057a4:	08009f8c 	.word	0x08009f8c
 80057a8:	08009f9c 	.word	0x08009f9c
 80057ac:	003d0900 	.word	0x003d0900

080057b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000000 	.word	0x20000000

080057c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057ce:	f7ff ffef 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 80057d2:	4601      	mov	r1, r0
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	fa92 f2a2 	rbit	r2, r2
 80057e8:	603a      	str	r2, [r7, #0]
  return result;
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	fab2 f282 	clz	r2, r2
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	40d3      	lsrs	r3, r2
 80057f4:	4a04      	ldr	r2, [pc, #16]	; (8005808 <HAL_RCC_GetPCLK1Freq+0x40>)
 80057f6:	5cd3      	ldrb	r3, [r2, r3]
 80057f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40021000 	.word	0x40021000
 8005808:	08009f84 	.word	0x08009f84

0800580c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005812:	f7ff ffcd 	bl	80057b0 <HAL_RCC_GetHCLKFreq>
 8005816:	4601      	mov	r1, r0
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005820:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	fa92 f2a2 	rbit	r2, r2
 800582c:	603a      	str	r2, [r7, #0]
  return result;
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	fab2 f282 	clz	r2, r2
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	40d3      	lsrs	r3, r2
 8005838:	4a04      	ldr	r2, [pc, #16]	; (800584c <HAL_RCC_GetPCLK2Freq+0x40>)
 800583a:	5cd3      	ldrb	r3, [r2, r3]
 800583c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40021000 	.word	0x40021000
 800584c:	08009f84 	.word	0x08009f84

08005850 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b092      	sub	sp, #72	; 0x48
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005860:	2300      	movs	r3, #0
 8005862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80d4 	beq.w	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005874:	4b4e      	ldr	r3, [pc, #312]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10e      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005880:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4a4a      	ldr	r2, [pc, #296]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588a:	61d3      	str	r3, [r2, #28]
 800588c:	4b48      	ldr	r3, [pc, #288]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589e:	4b45      	ldr	r3, [pc, #276]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058aa:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a41      	ldr	r2, [pc, #260]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b6:	f7fc fbc7 	bl	8002048 <HAL_GetTick>
 80058ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	e008      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fc fbc3 	bl	8002048 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b64      	cmp	r3, #100	; 0x64
 80058ca:	d901      	bls.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e169      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b38      	ldr	r3, [pc, #224]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058dc:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8084 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d07c      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fc:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800590a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	fa93 f3a3 	rbit	r3, r3
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005916:	fab3 f383 	clz	r3, r3
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	461a      	mov	r2, r3
 8005926:	2301      	movs	r3, #1
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800592e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005932:	fa93 f3a3 	rbit	r3, r3
 8005936:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800593a:	fab3 f383 	clz	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800594e:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005952:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d04b      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595e:	f7fc fb73 	bl	8002048 <HAL_GetTick>
 8005962:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005964:	e00a      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fc fb6f 	bl	8002048 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e113      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800597c:	2302      	movs	r3, #2
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	2302      	movs	r3, #2
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	61fb      	str	r3, [r7, #28]
  return result;
 8005994:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005996:	fab3 f383 	clz	r3, r3
 800599a:	b2db      	uxtb	r3, r3
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d108      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80059aa:	4b01      	ldr	r3, [pc, #4]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	e00d      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40007000 	.word	0x40007000
 80059b8:	10908100 	.word	0x10908100
 80059bc:	2302      	movs	r3, #2
 80059be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	fa93 f3a3 	rbit	r3, r3
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	4b78      	ldr	r3, [pc, #480]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2202      	movs	r2, #2
 80059ce:	613a      	str	r2, [r7, #16]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	fa92 f2a2 	rbit	r2, r2
 80059d6:	60fa      	str	r2, [r7, #12]
  return result;
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	fab2 f282 	clz	r2, r2
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	f002 021f 	and.w	r2, r2, #31
 80059ea:	2101      	movs	r1, #1
 80059ec:	fa01 f202 	lsl.w	r2, r1, r2
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0b7      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80059f6:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	496a      	ldr	r1, [pc, #424]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a10:	4b66      	ldr	r3, [pc, #408]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	4a65      	ldr	r2, [pc, #404]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a28:	4b60      	ldr	r3, [pc, #384]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	f023 0203 	bic.w	r2, r3, #3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	495d      	ldr	r1, [pc, #372]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a46:	4b59      	ldr	r3, [pc, #356]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	4956      	ldr	r1, [pc, #344]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a64:	4b51      	ldr	r3, [pc, #324]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	494e      	ldr	r1, [pc, #312]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a82:	4b4a      	ldr	r3, [pc, #296]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f023 0210 	bic.w	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4947      	ldr	r1, [pc, #284]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	493f      	ldr	r1, [pc, #252]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005abe:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	f023 0220 	bic.w	r2, r3, #32
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	4938      	ldr	r1, [pc, #224]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005adc:	4b33      	ldr	r3, [pc, #204]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	4930      	ldr	r1, [pc, #192]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4929      	ldr	r1, [pc, #164]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b18:	4b24      	ldr	r3, [pc, #144]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	4921      	ldr	r1, [pc, #132]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d008      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	491a      	ldr	r1, [pc, #104]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b54:	4b15      	ldr	r3, [pc, #84]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	4912      	ldr	r1, [pc, #72]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b72:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	490b      	ldr	r1, [pc, #44]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	4903      	ldr	r1, [pc, #12]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3748      	adds	r7, #72	; 0x48
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000

08005bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e09d      	b.n	8005cfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d108      	bne.n	8005bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd2:	d009      	beq.n	8005be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	61da      	str	r2, [r3, #28]
 8005bda:	e005      	b.n	8005be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fb fdb6 	bl	8001774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c28:	d902      	bls.n	8005c30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e002      	b.n	8005c36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c3e:	d007      	beq.n	8005c50 <HAL_SPI_Init+0xa0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c48:	d002      	beq.n	8005c50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c92:	ea42 0103 	orr.w	r1, r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	f003 0204 	and.w	r2, r3, #4
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ccc:	ea42 0103 	orr.w	r1, r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e049      	b.n	8005dac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fb ffcd 	bl	8001ccc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f000 fa49 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <HAL_TIM_PWM_Start+0x24>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e03c      	b.n	8005e52 <HAL_TIM_PWM_Start+0x9e>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d109      	bne.n	8005df2 <HAL_TIM_PWM_Start+0x3e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	bf14      	ite	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	2300      	moveq	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	e02f      	b.n	8005e52 <HAL_TIM_PWM_Start+0x9e>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d109      	bne.n	8005e0c <HAL_TIM_PWM_Start+0x58>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	bf14      	ite	ne
 8005e04:	2301      	movne	r3, #1
 8005e06:	2300      	moveq	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	e022      	b.n	8005e52 <HAL_TIM_PWM_Start+0x9e>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b0c      	cmp	r3, #12
 8005e10:	d109      	bne.n	8005e26 <HAL_TIM_PWM_Start+0x72>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	e015      	b.n	8005e52 <HAL_TIM_PWM_Start+0x9e>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d109      	bne.n	8005e40 <HAL_TIM_PWM_Start+0x8c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	bf14      	ite	ne
 8005e38:	2301      	movne	r3, #1
 8005e3a:	2300      	moveq	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	e008      	b.n	8005e52 <HAL_TIM_PWM_Start+0x9e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	bf14      	ite	ne
 8005e4c:	2301      	movne	r3, #1
 8005e4e:	2300      	moveq	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e097      	b.n	8005f8a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_PWM_Start+0xb6>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e68:	e023      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xfe>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Start+0xc6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e78:	e01b      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xfe>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Start+0xd6>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e88:	e013      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xfe>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start+0xe6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e98:	e00b      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xfe>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xf6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ea8:	e003      	b.n	8005eb2 <HAL_TIM_PWM_Start+0xfe>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fcf4 	bl	80068a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a33      	ldr	r2, [pc, #204]	; (8005f94 <HAL_TIM_PWM_Start+0x1e0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x13e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a32      	ldr	r2, [pc, #200]	; (8005f98 <HAL_TIM_PWM_Start+0x1e4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x13e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	; (8005f9c <HAL_TIM_PWM_Start+0x1e8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x13e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <HAL_TIM_PWM_Start+0x1ec>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x13e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <HAL_TIM_PWM_Start+0x1f0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0x142>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_TIM_PWM_Start+0x144>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a20      	ldr	r2, [pc, #128]	; (8005f94 <HAL_TIM_PWM_Start+0x1e0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d018      	beq.n	8005f48 <HAL_TIM_PWM_Start+0x194>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1e:	d013      	beq.n	8005f48 <HAL_TIM_PWM_Start+0x194>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <HAL_TIM_PWM_Start+0x1f4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00e      	beq.n	8005f48 <HAL_TIM_PWM_Start+0x194>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1f      	ldr	r2, [pc, #124]	; (8005fac <HAL_TIM_PWM_Start+0x1f8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d009      	beq.n	8005f48 <HAL_TIM_PWM_Start+0x194>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <HAL_TIM_PWM_Start+0x1e4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIM_PWM_Start+0x194>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <HAL_TIM_PWM_Start+0x1e8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d115      	bne.n	8005f74 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <HAL_TIM_PWM_Start+0x1fc>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b06      	cmp	r3, #6
 8005f58:	d015      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x1d2>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f60:	d011      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f72:	e008      	b.n	8005f86 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e000      	b.n	8005f88 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	00010007 	.word	0x00010007

08005fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e0ff      	b.n	80061d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b14      	cmp	r3, #20
 8005fde:	f200 80f0 	bhi.w	80061c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800603d 	.word	0x0800603d
 8005fec:	080061c3 	.word	0x080061c3
 8005ff0:	080061c3 	.word	0x080061c3
 8005ff4:	080061c3 	.word	0x080061c3
 8005ff8:	0800607d 	.word	0x0800607d
 8005ffc:	080061c3 	.word	0x080061c3
 8006000:	080061c3 	.word	0x080061c3
 8006004:	080061c3 	.word	0x080061c3
 8006008:	080060bf 	.word	0x080060bf
 800600c:	080061c3 	.word	0x080061c3
 8006010:	080061c3 	.word	0x080061c3
 8006014:	080061c3 	.word	0x080061c3
 8006018:	080060ff 	.word	0x080060ff
 800601c:	080061c3 	.word	0x080061c3
 8006020:	080061c3 	.word	0x080061c3
 8006024:	080061c3 	.word	0x080061c3
 8006028:	08006141 	.word	0x08006141
 800602c:	080061c3 	.word	0x080061c3
 8006030:	080061c3 	.word	0x080061c3
 8006034:	080061c3 	.word	0x080061c3
 8006038:	08006181 	.word	0x08006181
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f95a 	bl	80062fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0208 	orr.w	r2, r2, #8
 8006056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0204 	bic.w	r2, r2, #4
 8006066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6999      	ldr	r1, [r3, #24]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	619a      	str	r2, [r3, #24]
      break;
 800607a:	e0a5      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f9ca 	bl	800641c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6999      	ldr	r1, [r3, #24]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	021a      	lsls	r2, r3, #8
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	619a      	str	r2, [r3, #24]
      break;
 80060bc:	e084      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fa33 	bl	8006530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0204 	bic.w	r2, r2, #4
 80060e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69d9      	ldr	r1, [r3, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
      break;
 80060fc:	e064      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fa9b 	bl	8006640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69d9      	ldr	r1, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	021a      	lsls	r2, r3, #8
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	61da      	str	r2, [r3, #28]
      break;
 800613e:	e043      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fae4 	bl	8006714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0208 	orr.w	r2, r2, #8
 800615a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0204 	bic.w	r2, r2, #4
 800616a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800617e:	e023      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fb28 	bl	80067dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800619a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	021a      	lsls	r2, r3, #8
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061c0:	e002      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
      break;
 80061c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop

080061dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a3c      	ldr	r2, [pc, #240]	; (80062e0 <TIM_Base_SetConfig+0x104>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00f      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d00b      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a39      	ldr	r2, [pc, #228]	; (80062e4 <TIM_Base_SetConfig+0x108>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a38      	ldr	r2, [pc, #224]	; (80062e8 <TIM_Base_SetConfig+0x10c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a37      	ldr	r2, [pc, #220]	; (80062ec <TIM_Base_SetConfig+0x110>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d108      	bne.n	8006226 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2d      	ldr	r2, [pc, #180]	; (80062e0 <TIM_Base_SetConfig+0x104>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01b      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006234:	d017      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <TIM_Base_SetConfig+0x108>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a29      	ldr	r2, [pc, #164]	; (80062e8 <TIM_Base_SetConfig+0x10c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00f      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a28      	ldr	r2, [pc, #160]	; (80062ec <TIM_Base_SetConfig+0x110>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00b      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a26      	ldr	r2, [pc, #152]	; (80062f4 <TIM_Base_SetConfig+0x118>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a25      	ldr	r2, [pc, #148]	; (80062f8 <TIM_Base_SetConfig+0x11c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d108      	bne.n	8006278 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <TIM_Base_SetConfig+0x104>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00f      	beq.n	80062c4 <TIM_Base_SetConfig+0xe8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a11      	ldr	r2, [pc, #68]	; (80062ec <TIM_Base_SetConfig+0x110>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <TIM_Base_SetConfig+0xe8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a10      	ldr	r2, [pc, #64]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_Base_SetConfig+0xe8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a0f      	ldr	r2, [pc, #60]	; (80062f4 <TIM_Base_SetConfig+0x118>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_Base_SetConfig+0xe8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <TIM_Base_SetConfig+0x11c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d103      	bne.n	80062cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	615a      	str	r2, [r3, #20]
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40012c00 	.word	0x40012c00
 80062e4:	40000400 	.word	0x40000400
 80062e8:	40000800 	.word	0x40000800
 80062ec:	40013400 	.word	0x40013400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800

080062fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0201 	bic.w	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 0302 	bic.w	r3, r3, #2
 8006348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <TIM_OC1_SetConfig+0x10c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00f      	beq.n	800637c <TIM_OC1_SetConfig+0x80>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a2b      	ldr	r2, [pc, #172]	; (800640c <TIM_OC1_SetConfig+0x110>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00b      	beq.n	800637c <TIM_OC1_SetConfig+0x80>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <TIM_OC1_SetConfig+0x114>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_OC1_SetConfig+0x80>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a29      	ldr	r2, [pc, #164]	; (8006414 <TIM_OC1_SetConfig+0x118>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC1_SetConfig+0x80>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a28      	ldr	r2, [pc, #160]	; (8006418 <TIM_OC1_SetConfig+0x11c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d10c      	bne.n	8006396 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f023 0308 	bic.w	r3, r3, #8
 8006382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f023 0304 	bic.w	r3, r3, #4
 8006394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <TIM_OC1_SetConfig+0x10c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00f      	beq.n	80063be <TIM_OC1_SetConfig+0xc2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1a      	ldr	r2, [pc, #104]	; (800640c <TIM_OC1_SetConfig+0x110>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_OC1_SetConfig+0xc2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <TIM_OC1_SetConfig+0x114>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_OC1_SetConfig+0xc2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <TIM_OC1_SetConfig+0x118>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC1_SetConfig+0xc2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <TIM_OC1_SetConfig+0x11c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d111      	bne.n	80063e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	621a      	str	r2, [r3, #32]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40013400 	.word	0x40013400
 8006410:	40014000 	.word	0x40014000
 8006414:	40014400 	.word	0x40014400
 8006418:	40014800 	.word	0x40014800

0800641c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f023 0210 	bic.w	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0320 	bic.w	r3, r3, #32
 800646a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a28      	ldr	r2, [pc, #160]	; (800651c <TIM_OC2_SetConfig+0x100>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_OC2_SetConfig+0x6c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a27      	ldr	r2, [pc, #156]	; (8006520 <TIM_OC2_SetConfig+0x104>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d10d      	bne.n	80064a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800648e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <TIM_OC2_SetConfig+0x100>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00f      	beq.n	80064cc <TIM_OC2_SetConfig+0xb0>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <TIM_OC2_SetConfig+0x104>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00b      	beq.n	80064cc <TIM_OC2_SetConfig+0xb0>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <TIM_OC2_SetConfig+0x108>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d007      	beq.n	80064cc <TIM_OC2_SetConfig+0xb0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a1a      	ldr	r2, [pc, #104]	; (8006528 <TIM_OC2_SetConfig+0x10c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0xb0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a19      	ldr	r2, [pc, #100]	; (800652c <TIM_OC2_SetConfig+0x110>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d113      	bne.n	80064f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40013400 	.word	0x40013400
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800

08006530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800655e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800657c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a27      	ldr	r2, [pc, #156]	; (800662c <TIM_OC3_SetConfig+0xfc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d003      	beq.n	800659a <TIM_OC3_SetConfig+0x6a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a26      	ldr	r2, [pc, #152]	; (8006630 <TIM_OC3_SetConfig+0x100>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d10d      	bne.n	80065b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <TIM_OC3_SetConfig+0xfc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00f      	beq.n	80065de <TIM_OC3_SetConfig+0xae>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <TIM_OC3_SetConfig+0x100>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00b      	beq.n	80065de <TIM_OC3_SetConfig+0xae>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1a      	ldr	r2, [pc, #104]	; (8006634 <TIM_OC3_SetConfig+0x104>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d007      	beq.n	80065de <TIM_OC3_SetConfig+0xae>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a19      	ldr	r2, [pc, #100]	; (8006638 <TIM_OC3_SetConfig+0x108>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_OC3_SetConfig+0xae>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a18      	ldr	r2, [pc, #96]	; (800663c <TIM_OC3_SetConfig+0x10c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d113      	bne.n	8006606 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	40012c00 	.word	0x40012c00
 8006630:	40013400 	.word	0x40013400
 8006634:	40014000 	.word	0x40014000
 8006638:	40014400 	.word	0x40014400
 800663c:	40014800 	.word	0x40014800

08006640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800666e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800668e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	031b      	lsls	r3, r3, #12
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a18      	ldr	r2, [pc, #96]	; (8006700 <TIM_OC4_SetConfig+0xc0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_OC4_SetConfig+0x84>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <TIM_OC4_SetConfig+0xc4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00b      	beq.n	80066c4 <TIM_OC4_SetConfig+0x84>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a16      	ldr	r2, [pc, #88]	; (8006708 <TIM_OC4_SetConfig+0xc8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_OC4_SetConfig+0x84>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a15      	ldr	r2, [pc, #84]	; (800670c <TIM_OC4_SetConfig+0xcc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC4_SetConfig+0x84>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a14      	ldr	r2, [pc, #80]	; (8006710 <TIM_OC4_SetConfig+0xd0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d109      	bne.n	80066d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	019b      	lsls	r3, r3, #6
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40013400 	.word	0x40013400
 8006708:	40014000 	.word	0x40014000
 800670c:	40014400 	.word	0x40014400
 8006710:	40014800 	.word	0x40014800

08006714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <TIM_OC5_SetConfig+0xb4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00f      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a16      	ldr	r2, [pc, #88]	; (80067cc <TIM_OC5_SetConfig+0xb8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00b      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <TIM_OC5_SetConfig+0xbc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d007      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <TIM_OC5_SetConfig+0xc0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d003      	beq.n	800678e <TIM_OC5_SetConfig+0x7a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <TIM_OC5_SetConfig+0xc4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d109      	bne.n	80067a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800

080067dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800680a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	051b      	lsls	r3, r3, #20
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a18      	ldr	r2, [pc, #96]	; (8006894 <TIM_OC6_SetConfig+0xb8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00f      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <TIM_OC6_SetConfig+0xbc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00b      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a16      	ldr	r2, [pc, #88]	; (800689c <TIM_OC6_SetConfig+0xc0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d007      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <TIM_OC6_SetConfig+0xc4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC6_SetConfig+0x7c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <TIM_OC6_SetConfig+0xc8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d109      	bne.n	800686c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800685e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	029b      	lsls	r3, r3, #10
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800

080068a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 031f 	and.w	r3, r3, #31
 80068ba:	2201      	movs	r2, #1
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	43db      	mvns	r3, r3
 80068ca:	401a      	ands	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a1a      	ldr	r2, [r3, #32]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	fa01 f303 	lsl.w	r3, r1, r3
 80068e0:	431a      	orrs	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006908:	2302      	movs	r3, #2
 800690a:	e063      	b.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a2b      	ldr	r2, [pc, #172]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d108      	bne.n	8006952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1b      	ldr	r2, [pc, #108]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d018      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697e:	d013      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00e      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a17      	ldr	r2, [pc, #92]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d009      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d10c      	bne.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40013400 	.word	0x40013400
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40014000 	.word	0x40014000

080069f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e040      	b.n	8006a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb fa4e 	bl	8001eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2224      	movs	r2, #36	; 0x24
 8006a20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0201 	bic.w	r2, r2, #1
 8006a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8c0 	bl	8006bb8 <UART_SetConfig>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e022      	b.n	8006a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa8a 	bl	8006f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fb11 	bl	80070a8 <UART_CheckIdleState>
 8006a86:	4603      	mov	r3, r0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	f040 8082 	bne.w	8006bae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <HAL_UART_Transmit+0x26>
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e07a      	b.n	8006bb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d101      	bne.n	8006ac8 <HAL_UART_Transmit+0x38>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	e073      	b.n	8006bb0 <HAL_UART_Transmit+0x120>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2221      	movs	r2, #33	; 0x21
 8006adc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ade:	f7fb fab3 	bl	8002048 <HAL_GetTick>
 8006ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afc:	d108      	bne.n	8006b10 <HAL_UART_Transmit+0x80>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	e003      	b.n	8006b18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b20:	e02d      	b.n	8006b7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 fb04 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e039      	b.n	8006bb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	881a      	ldrh	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b4e:	b292      	uxth	r2, r2
 8006b50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	3302      	adds	r3, #2
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e008      	b.n	8006b6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	b292      	uxth	r2, r2
 8006b64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1cb      	bne.n	8006b22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	2140      	movs	r1, #64	; 0x40
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fad0 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e005      	b.n	8006bb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3720      	adds	r7, #32
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006be6:	f023 030c 	bic.w	r3, r3, #12
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	6979      	ldr	r1, [r7, #20]
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4aa8      	ldr	r2, [pc, #672]	; (8006ed4 <UART_SetConfig+0x31c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d120      	bne.n	8006c7a <UART_SetConfig+0xc2>
 8006c38:	4ba7      	ldr	r3, [pc, #668]	; (8006ed8 <UART_SetConfig+0x320>)
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d817      	bhi.n	8006c74 <UART_SetConfig+0xbc>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <UART_SetConfig+0x94>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006c69 	.word	0x08006c69
 8006c54:	08006c6f 	.word	0x08006c6f
 8006c58:	08006c63 	.word	0x08006c63
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e0b5      	b.n	8006dce <UART_SetConfig+0x216>
 8006c62:	2302      	movs	r3, #2
 8006c64:	77fb      	strb	r3, [r7, #31]
 8006c66:	e0b2      	b.n	8006dce <UART_SetConfig+0x216>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e0af      	b.n	8006dce <UART_SetConfig+0x216>
 8006c6e:	2308      	movs	r3, #8
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e0ac      	b.n	8006dce <UART_SetConfig+0x216>
 8006c74:	2310      	movs	r3, #16
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e0a9      	b.n	8006dce <UART_SetConfig+0x216>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a97      	ldr	r2, [pc, #604]	; (8006edc <UART_SetConfig+0x324>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d124      	bne.n	8006cce <UART_SetConfig+0x116>
 8006c84:	4b94      	ldr	r3, [pc, #592]	; (8006ed8 <UART_SetConfig+0x320>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c90:	d011      	beq.n	8006cb6 <UART_SetConfig+0xfe>
 8006c92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c96:	d817      	bhi.n	8006cc8 <UART_SetConfig+0x110>
 8006c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c9c:	d011      	beq.n	8006cc2 <UART_SetConfig+0x10a>
 8006c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca2:	d811      	bhi.n	8006cc8 <UART_SetConfig+0x110>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <UART_SetConfig+0xf8>
 8006ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cac:	d006      	beq.n	8006cbc <UART_SetConfig+0x104>
 8006cae:	e00b      	b.n	8006cc8 <UART_SetConfig+0x110>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e08b      	b.n	8006dce <UART_SetConfig+0x216>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e088      	b.n	8006dce <UART_SetConfig+0x216>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e085      	b.n	8006dce <UART_SetConfig+0x216>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e082      	b.n	8006dce <UART_SetConfig+0x216>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e07f      	b.n	8006dce <UART_SetConfig+0x216>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a83      	ldr	r2, [pc, #524]	; (8006ee0 <UART_SetConfig+0x328>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d124      	bne.n	8006d22 <UART_SetConfig+0x16a>
 8006cd8:	4b7f      	ldr	r3, [pc, #508]	; (8006ed8 <UART_SetConfig+0x320>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ce0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce4:	d011      	beq.n	8006d0a <UART_SetConfig+0x152>
 8006ce6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cea:	d817      	bhi.n	8006d1c <UART_SetConfig+0x164>
 8006cec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf0:	d011      	beq.n	8006d16 <UART_SetConfig+0x15e>
 8006cf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf6:	d811      	bhi.n	8006d1c <UART_SetConfig+0x164>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <UART_SetConfig+0x14c>
 8006cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d00:	d006      	beq.n	8006d10 <UART_SetConfig+0x158>
 8006d02:	e00b      	b.n	8006d1c <UART_SetConfig+0x164>
 8006d04:	2300      	movs	r3, #0
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e061      	b.n	8006dce <UART_SetConfig+0x216>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	77fb      	strb	r3, [r7, #31]
 8006d0e:	e05e      	b.n	8006dce <UART_SetConfig+0x216>
 8006d10:	2304      	movs	r3, #4
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e05b      	b.n	8006dce <UART_SetConfig+0x216>
 8006d16:	2308      	movs	r3, #8
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e058      	b.n	8006dce <UART_SetConfig+0x216>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e055      	b.n	8006dce <UART_SetConfig+0x216>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a6f      	ldr	r2, [pc, #444]	; (8006ee4 <UART_SetConfig+0x32c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d124      	bne.n	8006d76 <UART_SetConfig+0x1be>
 8006d2c:	4b6a      	ldr	r3, [pc, #424]	; (8006ed8 <UART_SetConfig+0x320>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d38:	d011      	beq.n	8006d5e <UART_SetConfig+0x1a6>
 8006d3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d3e:	d817      	bhi.n	8006d70 <UART_SetConfig+0x1b8>
 8006d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d44:	d011      	beq.n	8006d6a <UART_SetConfig+0x1b2>
 8006d46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d4a:	d811      	bhi.n	8006d70 <UART_SetConfig+0x1b8>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <UART_SetConfig+0x1a0>
 8006d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d54:	d006      	beq.n	8006d64 <UART_SetConfig+0x1ac>
 8006d56:	e00b      	b.n	8006d70 <UART_SetConfig+0x1b8>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e037      	b.n	8006dce <UART_SetConfig+0x216>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	77fb      	strb	r3, [r7, #31]
 8006d62:	e034      	b.n	8006dce <UART_SetConfig+0x216>
 8006d64:	2304      	movs	r3, #4
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e031      	b.n	8006dce <UART_SetConfig+0x216>
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e02e      	b.n	8006dce <UART_SetConfig+0x216>
 8006d70:	2310      	movs	r3, #16
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e02b      	b.n	8006dce <UART_SetConfig+0x216>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a5b      	ldr	r2, [pc, #364]	; (8006ee8 <UART_SetConfig+0x330>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d124      	bne.n	8006dca <UART_SetConfig+0x212>
 8006d80:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <UART_SetConfig+0x320>)
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d8c:	d011      	beq.n	8006db2 <UART_SetConfig+0x1fa>
 8006d8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d92:	d817      	bhi.n	8006dc4 <UART_SetConfig+0x20c>
 8006d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d98:	d011      	beq.n	8006dbe <UART_SetConfig+0x206>
 8006d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d9e:	d811      	bhi.n	8006dc4 <UART_SetConfig+0x20c>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <UART_SetConfig+0x1f4>
 8006da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da8:	d006      	beq.n	8006db8 <UART_SetConfig+0x200>
 8006daa:	e00b      	b.n	8006dc4 <UART_SetConfig+0x20c>
 8006dac:	2300      	movs	r3, #0
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	e00d      	b.n	8006dce <UART_SetConfig+0x216>
 8006db2:	2302      	movs	r3, #2
 8006db4:	77fb      	strb	r3, [r7, #31]
 8006db6:	e00a      	b.n	8006dce <UART_SetConfig+0x216>
 8006db8:	2304      	movs	r3, #4
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e007      	b.n	8006dce <UART_SetConfig+0x216>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e004      	b.n	8006dce <UART_SetConfig+0x216>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e001      	b.n	8006dce <UART_SetConfig+0x216>
 8006dca:	2310      	movs	r3, #16
 8006dcc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d15c      	bne.n	8006e92 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8006dd8:	7ffb      	ldrb	r3, [r7, #31]
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d827      	bhi.n	8006e2e <UART_SetConfig+0x276>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x22c>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	08006e2f 	.word	0x08006e2f
 8006df4:	08006e1f 	.word	0x08006e1f
 8006df8:	08006e2f 	.word	0x08006e2f
 8006dfc:	08006e2f 	.word	0x08006e2f
 8006e00:	08006e2f 	.word	0x08006e2f
 8006e04:	08006e27 	.word	0x08006e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7fe fcde 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 8006e0c:	61b8      	str	r0, [r7, #24]
        break;
 8006e0e:	e013      	b.n	8006e38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e10:	f7fe fcfc 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8006e14:	61b8      	str	r0, [r7, #24]
        break;
 8006e16:	e00f      	b.n	8006e38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e18:	4b34      	ldr	r3, [pc, #208]	; (8006eec <UART_SetConfig+0x334>)
 8006e1a:	61bb      	str	r3, [r7, #24]
        break;
 8006e1c:	e00c      	b.n	8006e38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e1e:	f7fe fc5d 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8006e22:	61b8      	str	r0, [r7, #24]
        break;
 8006e24:	e008      	b.n	8006e38 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2a:	61bb      	str	r3, [r7, #24]
        break;
 8006e2c:	e004      	b.n	8006e38 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	77bb      	strb	r3, [r7, #30]
        break;
 8006e36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 8084 	beq.w	8006f48 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	005a      	lsls	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	441a      	add	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	d916      	bls.n	8006e8c <UART_SetConfig+0x2d4>
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e64:	d212      	bcs.n	8006e8c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f023 030f 	bic.w	r3, r3, #15
 8006e6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	89fa      	ldrh	r2, [r7, #14]
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	e05d      	b.n	8006f48 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	77bb      	strb	r3, [r7, #30]
 8006e90:	e05a      	b.n	8006f48 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e92:	7ffb      	ldrb	r3, [r7, #31]
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d836      	bhi.n	8006f06 <UART_SetConfig+0x34e>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x2e8>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ef1 	.word	0x08006ef1
 8006eac:	08006f07 	.word	0x08006f07
 8006eb0:	08006ef7 	.word	0x08006ef7
 8006eb4:	08006f07 	.word	0x08006f07
 8006eb8:	08006f07 	.word	0x08006f07
 8006ebc:	08006f07 	.word	0x08006f07
 8006ec0:	08006eff 	.word	0x08006eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec4:	f7fe fc80 	bl	80057c8 <HAL_RCC_GetPCLK1Freq>
 8006ec8:	61b8      	str	r0, [r7, #24]
        break;
 8006eca:	e021      	b.n	8006f10 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ecc:	f7fe fc9e 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8006ed0:	61b8      	str	r0, [r7, #24]
        break;
 8006ed2:	e01d      	b.n	8006f10 <UART_SetConfig+0x358>
 8006ed4:	40013800 	.word	0x40013800
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	40004400 	.word	0x40004400
 8006ee0:	40004800 	.word	0x40004800
 8006ee4:	40004c00 	.word	0x40004c00
 8006ee8:	40005000 	.word	0x40005000
 8006eec:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <UART_SetConfig+0x3a8>)
 8006ef2:	61bb      	str	r3, [r7, #24]
        break;
 8006ef4:	e00c      	b.n	8006f10 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7fe fbf1 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8006efa:	61b8      	str	r0, [r7, #24]
        break;
 8006efc:	e008      	b.n	8006f10 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f02:	61bb      	str	r3, [r7, #24]
        break;
 8006f04:	e004      	b.n	8006f10 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	085a      	lsrs	r2, r3, #1
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	441a      	add	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d908      	bls.n	8006f44 <UART_SetConfig+0x38c>
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f38:	d204      	bcs.n	8006f44 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	e001      	b.n	8006f48 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f54:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	007a1200 	.word	0x007a1200

08006f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f003 0308 	and.w	r3, r3, #8
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01a      	beq.n	800707a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007062:	d10a      	bne.n	800707a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]
  }
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b8:	f7fa ffc6 	bl	8002048 <HAL_GetTick>
 80070bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d10e      	bne.n	80070ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f82d 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e023      	b.n	8007132 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d10e      	bne.n	8007116 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f817 	bl	800713a <UART_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e00d      	b.n	8007132 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b09c      	sub	sp, #112	; 0x70
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	603b      	str	r3, [r7, #0]
 8007146:	4613      	mov	r3, r2
 8007148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800714a:	e0a5      	b.n	8007298 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	f000 80a1 	beq.w	8007298 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fa ff77 	bl	8002048 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <UART_WaitOnFlagUntilTimeout+0x32>
 8007166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007168:	2b00      	cmp	r3, #0
 800716a:	d13e      	bne.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800717a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007180:	667b      	str	r3, [r7, #100]	; 0x64
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800718a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800718c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e6      	bne.n	800716c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3308      	adds	r3, #8
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	f023 0301 	bic.w	r3, r3, #1
 80071b4:	663b      	str	r3, [r7, #96]	; 0x60
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3308      	adds	r3, #8
 80071bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071be:	64ba      	str	r2, [r7, #72]	; 0x48
 80071c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e5      	bne.n	800719e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e067      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d04f      	beq.n	8007298 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007206:	d147      	bne.n	8007298 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007210:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
 8007232:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e6      	bne.n	8007212 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	613b      	str	r3, [r7, #16]
   return(result);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	66bb      	str	r3, [r7, #104]	; 0x68
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007264:	623a      	str	r2, [r7, #32]
 8007266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	69f9      	ldr	r1, [r7, #28]
 800726a:	6a3a      	ldr	r2, [r7, #32]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	61bb      	str	r3, [r7, #24]
   return(result);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e010      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	4013      	ands	r3, r2
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	bf0c      	ite	eq
 80072a8:	2301      	moveq	r3, #1
 80072aa:	2300      	movne	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	f43f af4a 	beq.w	800714c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3770      	adds	r7, #112	; 0x70
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <__errno>:
 80072c4:	4b01      	ldr	r3, [pc, #4]	; (80072cc <__errno+0x8>)
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	2000000c 	.word	0x2000000c

080072d0 <__libc_init_array>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	4d0d      	ldr	r5, [pc, #52]	; (8007308 <__libc_init_array+0x38>)
 80072d4:	4c0d      	ldr	r4, [pc, #52]	; (800730c <__libc_init_array+0x3c>)
 80072d6:	1b64      	subs	r4, r4, r5
 80072d8:	10a4      	asrs	r4, r4, #2
 80072da:	2600      	movs	r6, #0
 80072dc:	42a6      	cmp	r6, r4
 80072de:	d109      	bne.n	80072f4 <__libc_init_array+0x24>
 80072e0:	4d0b      	ldr	r5, [pc, #44]	; (8007310 <__libc_init_array+0x40>)
 80072e2:	4c0c      	ldr	r4, [pc, #48]	; (8007314 <__libc_init_array+0x44>)
 80072e4:	f002 fe1a 	bl	8009f1c <_init>
 80072e8:	1b64      	subs	r4, r4, r5
 80072ea:	10a4      	asrs	r4, r4, #2
 80072ec:	2600      	movs	r6, #0
 80072ee:	42a6      	cmp	r6, r4
 80072f0:	d105      	bne.n	80072fe <__libc_init_array+0x2e>
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072f8:	4798      	blx	r3
 80072fa:	3601      	adds	r6, #1
 80072fc:	e7ee      	b.n	80072dc <__libc_init_array+0xc>
 80072fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007302:	4798      	blx	r3
 8007304:	3601      	adds	r6, #1
 8007306:	e7f2      	b.n	80072ee <__libc_init_array+0x1e>
 8007308:	0800a384 	.word	0x0800a384
 800730c:	0800a384 	.word	0x0800a384
 8007310:	0800a384 	.word	0x0800a384
 8007314:	0800a388 	.word	0x0800a388

08007318 <memset>:
 8007318:	4402      	add	r2, r0
 800731a:	4603      	mov	r3, r0
 800731c:	4293      	cmp	r3, r2
 800731e:	d100      	bne.n	8007322 <memset+0xa>
 8007320:	4770      	bx	lr
 8007322:	f803 1b01 	strb.w	r1, [r3], #1
 8007326:	e7f9      	b.n	800731c <memset+0x4>

08007328 <__cvt>:
 8007328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	ec55 4b10 	vmov	r4, r5, d0
 8007330:	2d00      	cmp	r5, #0
 8007332:	460e      	mov	r6, r1
 8007334:	4619      	mov	r1, r3
 8007336:	462b      	mov	r3, r5
 8007338:	bfbb      	ittet	lt
 800733a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800733e:	461d      	movlt	r5, r3
 8007340:	2300      	movge	r3, #0
 8007342:	232d      	movlt	r3, #45	; 0x2d
 8007344:	700b      	strb	r3, [r1, #0]
 8007346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007348:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800734c:	4691      	mov	r9, r2
 800734e:	f023 0820 	bic.w	r8, r3, #32
 8007352:	bfbc      	itt	lt
 8007354:	4622      	movlt	r2, r4
 8007356:	4614      	movlt	r4, r2
 8007358:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800735c:	d005      	beq.n	800736a <__cvt+0x42>
 800735e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007362:	d100      	bne.n	8007366 <__cvt+0x3e>
 8007364:	3601      	adds	r6, #1
 8007366:	2102      	movs	r1, #2
 8007368:	e000      	b.n	800736c <__cvt+0x44>
 800736a:	2103      	movs	r1, #3
 800736c:	ab03      	add	r3, sp, #12
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	ab02      	add	r3, sp, #8
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	ec45 4b10 	vmov	d0, r4, r5
 8007378:	4653      	mov	r3, sl
 800737a:	4632      	mov	r2, r6
 800737c:	f000 fe70 	bl	8008060 <_dtoa_r>
 8007380:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007384:	4607      	mov	r7, r0
 8007386:	d102      	bne.n	800738e <__cvt+0x66>
 8007388:	f019 0f01 	tst.w	r9, #1
 800738c:	d022      	beq.n	80073d4 <__cvt+0xac>
 800738e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007392:	eb07 0906 	add.w	r9, r7, r6
 8007396:	d110      	bne.n	80073ba <__cvt+0x92>
 8007398:	783b      	ldrb	r3, [r7, #0]
 800739a:	2b30      	cmp	r3, #48	; 0x30
 800739c:	d10a      	bne.n	80073b4 <__cvt+0x8c>
 800739e:	2200      	movs	r2, #0
 80073a0:	2300      	movs	r3, #0
 80073a2:	4620      	mov	r0, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	f7f9 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80073aa:	b918      	cbnz	r0, 80073b4 <__cvt+0x8c>
 80073ac:	f1c6 0601 	rsb	r6, r6, #1
 80073b0:	f8ca 6000 	str.w	r6, [sl]
 80073b4:	f8da 3000 	ldr.w	r3, [sl]
 80073b8:	4499      	add	r9, r3
 80073ba:	2200      	movs	r2, #0
 80073bc:	2300      	movs	r3, #0
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f9 fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80073c6:	b108      	cbz	r0, 80073cc <__cvt+0xa4>
 80073c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80073cc:	2230      	movs	r2, #48	; 0x30
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	454b      	cmp	r3, r9
 80073d2:	d307      	bcc.n	80073e4 <__cvt+0xbc>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d8:	1bdb      	subs	r3, r3, r7
 80073da:	4638      	mov	r0, r7
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	b004      	add	sp, #16
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	1c59      	adds	r1, r3, #1
 80073e6:	9103      	str	r1, [sp, #12]
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e7f0      	b.n	80073ce <__cvt+0xa6>

080073ec <__exponent>:
 80073ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ee:	4603      	mov	r3, r0
 80073f0:	2900      	cmp	r1, #0
 80073f2:	bfb8      	it	lt
 80073f4:	4249      	neglt	r1, r1
 80073f6:	f803 2b02 	strb.w	r2, [r3], #2
 80073fa:	bfb4      	ite	lt
 80073fc:	222d      	movlt	r2, #45	; 0x2d
 80073fe:	222b      	movge	r2, #43	; 0x2b
 8007400:	2909      	cmp	r1, #9
 8007402:	7042      	strb	r2, [r0, #1]
 8007404:	dd2a      	ble.n	800745c <__exponent+0x70>
 8007406:	f10d 0407 	add.w	r4, sp, #7
 800740a:	46a4      	mov	ip, r4
 800740c:	270a      	movs	r7, #10
 800740e:	46a6      	mov	lr, r4
 8007410:	460a      	mov	r2, r1
 8007412:	fb91 f6f7 	sdiv	r6, r1, r7
 8007416:	fb07 1516 	mls	r5, r7, r6, r1
 800741a:	3530      	adds	r5, #48	; 0x30
 800741c:	2a63      	cmp	r2, #99	; 0x63
 800741e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007422:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007426:	4631      	mov	r1, r6
 8007428:	dcf1      	bgt.n	800740e <__exponent+0x22>
 800742a:	3130      	adds	r1, #48	; 0x30
 800742c:	f1ae 0502 	sub.w	r5, lr, #2
 8007430:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007434:	1c44      	adds	r4, r0, #1
 8007436:	4629      	mov	r1, r5
 8007438:	4561      	cmp	r1, ip
 800743a:	d30a      	bcc.n	8007452 <__exponent+0x66>
 800743c:	f10d 0209 	add.w	r2, sp, #9
 8007440:	eba2 020e 	sub.w	r2, r2, lr
 8007444:	4565      	cmp	r5, ip
 8007446:	bf88      	it	hi
 8007448:	2200      	movhi	r2, #0
 800744a:	4413      	add	r3, r2
 800744c:	1a18      	subs	r0, r3, r0
 800744e:	b003      	add	sp, #12
 8007450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007456:	f804 2f01 	strb.w	r2, [r4, #1]!
 800745a:	e7ed      	b.n	8007438 <__exponent+0x4c>
 800745c:	2330      	movs	r3, #48	; 0x30
 800745e:	3130      	adds	r1, #48	; 0x30
 8007460:	7083      	strb	r3, [r0, #2]
 8007462:	70c1      	strb	r1, [r0, #3]
 8007464:	1d03      	adds	r3, r0, #4
 8007466:	e7f1      	b.n	800744c <__exponent+0x60>

08007468 <_printf_float>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	ed2d 8b02 	vpush	{d8}
 8007470:	b08d      	sub	sp, #52	; 0x34
 8007472:	460c      	mov	r4, r1
 8007474:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007478:	4616      	mov	r6, r2
 800747a:	461f      	mov	r7, r3
 800747c:	4605      	mov	r5, r0
 800747e:	f001 fd95 	bl	8008fac <_localeconv_r>
 8007482:	f8d0 a000 	ldr.w	sl, [r0]
 8007486:	4650      	mov	r0, sl
 8007488:	f7f8 fea2 	bl	80001d0 <strlen>
 800748c:	2300      	movs	r3, #0
 800748e:	930a      	str	r3, [sp, #40]	; 0x28
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	f8d8 3000 	ldr.w	r3, [r8]
 8007498:	f894 b018 	ldrb.w	fp, [r4, #24]
 800749c:	3307      	adds	r3, #7
 800749e:	f023 0307 	bic.w	r3, r3, #7
 80074a2:	f103 0208 	add.w	r2, r3, #8
 80074a6:	f8c8 2000 	str.w	r2, [r8]
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074ba:	9307      	str	r3, [sp, #28]
 80074bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80074c0:	ee08 0a10 	vmov	s16, r0
 80074c4:	4b9f      	ldr	r3, [pc, #636]	; (8007744 <_printf_float+0x2dc>)
 80074c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074ca:	f04f 32ff 	mov.w	r2, #4294967295
 80074ce:	f7f9 fb2d 	bl	8000b2c <__aeabi_dcmpun>
 80074d2:	bb88      	cbnz	r0, 8007538 <_printf_float+0xd0>
 80074d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074d8:	4b9a      	ldr	r3, [pc, #616]	; (8007744 <_printf_float+0x2dc>)
 80074da:	f04f 32ff 	mov.w	r2, #4294967295
 80074de:	f7f9 fb07 	bl	8000af0 <__aeabi_dcmple>
 80074e2:	bb48      	cbnz	r0, 8007538 <_printf_float+0xd0>
 80074e4:	2200      	movs	r2, #0
 80074e6:	2300      	movs	r3, #0
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f9 faf6 	bl	8000adc <__aeabi_dcmplt>
 80074f0:	b110      	cbz	r0, 80074f8 <_printf_float+0x90>
 80074f2:	232d      	movs	r3, #45	; 0x2d
 80074f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f8:	4b93      	ldr	r3, [pc, #588]	; (8007748 <_printf_float+0x2e0>)
 80074fa:	4894      	ldr	r0, [pc, #592]	; (800774c <_printf_float+0x2e4>)
 80074fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007500:	bf94      	ite	ls
 8007502:	4698      	movls	r8, r3
 8007504:	4680      	movhi	r8, r0
 8007506:	2303      	movs	r3, #3
 8007508:	6123      	str	r3, [r4, #16]
 800750a:	9b05      	ldr	r3, [sp, #20]
 800750c:	f023 0204 	bic.w	r2, r3, #4
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	f04f 0900 	mov.w	r9, #0
 8007516:	9700      	str	r7, [sp, #0]
 8007518:	4633      	mov	r3, r6
 800751a:	aa0b      	add	r2, sp, #44	; 0x2c
 800751c:	4621      	mov	r1, r4
 800751e:	4628      	mov	r0, r5
 8007520:	f000 f9d8 	bl	80078d4 <_printf_common>
 8007524:	3001      	adds	r0, #1
 8007526:	f040 8090 	bne.w	800764a <_printf_float+0x1e2>
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	b00d      	add	sp, #52	; 0x34
 8007530:	ecbd 8b02 	vpop	{d8}
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f9 faf4 	bl	8000b2c <__aeabi_dcmpun>
 8007544:	b140      	cbz	r0, 8007558 <_printf_float+0xf0>
 8007546:	464b      	mov	r3, r9
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfbc      	itt	lt
 800754c:	232d      	movlt	r3, #45	; 0x2d
 800754e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007552:	487f      	ldr	r0, [pc, #508]	; (8007750 <_printf_float+0x2e8>)
 8007554:	4b7f      	ldr	r3, [pc, #508]	; (8007754 <_printf_float+0x2ec>)
 8007556:	e7d1      	b.n	80074fc <_printf_float+0x94>
 8007558:	6863      	ldr	r3, [r4, #4]
 800755a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800755e:	9206      	str	r2, [sp, #24]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	d13f      	bne.n	80075e4 <_printf_float+0x17c>
 8007564:	2306      	movs	r3, #6
 8007566:	6063      	str	r3, [r4, #4]
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	6861      	ldr	r1, [r4, #4]
 800756c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007570:	2300      	movs	r3, #0
 8007572:	9303      	str	r3, [sp, #12]
 8007574:	ab0a      	add	r3, sp, #40	; 0x28
 8007576:	e9cd b301 	strd	fp, r3, [sp, #4]
 800757a:	ab09      	add	r3, sp, #36	; 0x24
 800757c:	ec49 8b10 	vmov	d0, r8, r9
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	6022      	str	r2, [r4, #0]
 8007584:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007588:	4628      	mov	r0, r5
 800758a:	f7ff fecd 	bl	8007328 <__cvt>
 800758e:	9b06      	ldr	r3, [sp, #24]
 8007590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007592:	2b47      	cmp	r3, #71	; 0x47
 8007594:	4680      	mov	r8, r0
 8007596:	d108      	bne.n	80075aa <_printf_float+0x142>
 8007598:	1cc8      	adds	r0, r1, #3
 800759a:	db02      	blt.n	80075a2 <_printf_float+0x13a>
 800759c:	6863      	ldr	r3, [r4, #4]
 800759e:	4299      	cmp	r1, r3
 80075a0:	dd41      	ble.n	8007626 <_printf_float+0x1be>
 80075a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80075a6:	fa5f fb8b 	uxtb.w	fp, fp
 80075aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075ae:	d820      	bhi.n	80075f2 <_printf_float+0x18a>
 80075b0:	3901      	subs	r1, #1
 80075b2:	465a      	mov	r2, fp
 80075b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075b8:	9109      	str	r1, [sp, #36]	; 0x24
 80075ba:	f7ff ff17 	bl	80073ec <__exponent>
 80075be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075c0:	1813      	adds	r3, r2, r0
 80075c2:	2a01      	cmp	r2, #1
 80075c4:	4681      	mov	r9, r0
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	dc02      	bgt.n	80075d0 <_printf_float+0x168>
 80075ca:	6822      	ldr	r2, [r4, #0]
 80075cc:	07d2      	lsls	r2, r2, #31
 80075ce:	d501      	bpl.n	80075d4 <_printf_float+0x16c>
 80075d0:	3301      	adds	r3, #1
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d09c      	beq.n	8007516 <_printf_float+0xae>
 80075dc:	232d      	movs	r3, #45	; 0x2d
 80075de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e2:	e798      	b.n	8007516 <_printf_float+0xae>
 80075e4:	9a06      	ldr	r2, [sp, #24]
 80075e6:	2a47      	cmp	r2, #71	; 0x47
 80075e8:	d1be      	bne.n	8007568 <_printf_float+0x100>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1bc      	bne.n	8007568 <_printf_float+0x100>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e7b9      	b.n	8007566 <_printf_float+0xfe>
 80075f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075f6:	d118      	bne.n	800762a <_printf_float+0x1c2>
 80075f8:	2900      	cmp	r1, #0
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	dd0b      	ble.n	8007616 <_printf_float+0x1ae>
 80075fe:	6121      	str	r1, [r4, #16]
 8007600:	b913      	cbnz	r3, 8007608 <_printf_float+0x1a0>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	07d0      	lsls	r0, r2, #31
 8007606:	d502      	bpl.n	800760e <_printf_float+0x1a6>
 8007608:	3301      	adds	r3, #1
 800760a:	440b      	add	r3, r1
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007610:	f04f 0900 	mov.w	r9, #0
 8007614:	e7de      	b.n	80075d4 <_printf_float+0x16c>
 8007616:	b913      	cbnz	r3, 800761e <_printf_float+0x1b6>
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	07d2      	lsls	r2, r2, #31
 800761c:	d501      	bpl.n	8007622 <_printf_float+0x1ba>
 800761e:	3302      	adds	r3, #2
 8007620:	e7f4      	b.n	800760c <_printf_float+0x1a4>
 8007622:	2301      	movs	r3, #1
 8007624:	e7f2      	b.n	800760c <_printf_float+0x1a4>
 8007626:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800762a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762c:	4299      	cmp	r1, r3
 800762e:	db05      	blt.n	800763c <_printf_float+0x1d4>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	6121      	str	r1, [r4, #16]
 8007634:	07d8      	lsls	r0, r3, #31
 8007636:	d5ea      	bpl.n	800760e <_printf_float+0x1a6>
 8007638:	1c4b      	adds	r3, r1, #1
 800763a:	e7e7      	b.n	800760c <_printf_float+0x1a4>
 800763c:	2900      	cmp	r1, #0
 800763e:	bfd4      	ite	le
 8007640:	f1c1 0202 	rsble	r2, r1, #2
 8007644:	2201      	movgt	r2, #1
 8007646:	4413      	add	r3, r2
 8007648:	e7e0      	b.n	800760c <_printf_float+0x1a4>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	055a      	lsls	r2, r3, #21
 800764e:	d407      	bmi.n	8007660 <_printf_float+0x1f8>
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	4642      	mov	r2, r8
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	d12c      	bne.n	80076b8 <_printf_float+0x250>
 800765e:	e764      	b.n	800752a <_printf_float+0xc2>
 8007660:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007664:	f240 80e0 	bls.w	8007828 <_printf_float+0x3c0>
 8007668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	f7f9 fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007674:	2800      	cmp	r0, #0
 8007676:	d034      	beq.n	80076e2 <_printf_float+0x27a>
 8007678:	4a37      	ldr	r2, [pc, #220]	; (8007758 <_printf_float+0x2f0>)
 800767a:	2301      	movs	r3, #1
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f af51 	beq.w	800752a <_printf_float+0xc2>
 8007688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800768c:	429a      	cmp	r2, r3
 800768e:	db02      	blt.n	8007696 <_printf_float+0x22e>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	07d8      	lsls	r0, r3, #31
 8007694:	d510      	bpl.n	80076b8 <_printf_float+0x250>
 8007696:	ee18 3a10 	vmov	r3, s16
 800769a:	4652      	mov	r2, sl
 800769c:	4631      	mov	r1, r6
 800769e:	4628      	mov	r0, r5
 80076a0:	47b8      	blx	r7
 80076a2:	3001      	adds	r0, #1
 80076a4:	f43f af41 	beq.w	800752a <_printf_float+0xc2>
 80076a8:	f04f 0800 	mov.w	r8, #0
 80076ac:	f104 091a 	add.w	r9, r4, #26
 80076b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b2:	3b01      	subs	r3, #1
 80076b4:	4543      	cmp	r3, r8
 80076b6:	dc09      	bgt.n	80076cc <_printf_float+0x264>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	079b      	lsls	r3, r3, #30
 80076bc:	f100 8105 	bmi.w	80078ca <_printf_float+0x462>
 80076c0:	68e0      	ldr	r0, [r4, #12]
 80076c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c4:	4298      	cmp	r0, r3
 80076c6:	bfb8      	it	lt
 80076c8:	4618      	movlt	r0, r3
 80076ca:	e730      	b.n	800752e <_printf_float+0xc6>
 80076cc:	2301      	movs	r3, #1
 80076ce:	464a      	mov	r2, r9
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f af27 	beq.w	800752a <_printf_float+0xc2>
 80076dc:	f108 0801 	add.w	r8, r8, #1
 80076e0:	e7e6      	b.n	80076b0 <_printf_float+0x248>
 80076e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dc39      	bgt.n	800775c <_printf_float+0x2f4>
 80076e8:	4a1b      	ldr	r2, [pc, #108]	; (8007758 <_printf_float+0x2f0>)
 80076ea:	2301      	movs	r3, #1
 80076ec:	4631      	mov	r1, r6
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b8      	blx	r7
 80076f2:	3001      	adds	r0, #1
 80076f4:	f43f af19 	beq.w	800752a <_printf_float+0xc2>
 80076f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076fc:	4313      	orrs	r3, r2
 80076fe:	d102      	bne.n	8007706 <_printf_float+0x29e>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	07d9      	lsls	r1, r3, #31
 8007704:	d5d8      	bpl.n	80076b8 <_printf_float+0x250>
 8007706:	ee18 3a10 	vmov	r3, s16
 800770a:	4652      	mov	r2, sl
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af09 	beq.w	800752a <_printf_float+0xc2>
 8007718:	f04f 0900 	mov.w	r9, #0
 800771c:	f104 0a1a 	add.w	sl, r4, #26
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	425b      	negs	r3, r3
 8007724:	454b      	cmp	r3, r9
 8007726:	dc01      	bgt.n	800772c <_printf_float+0x2c4>
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	e792      	b.n	8007652 <_printf_float+0x1ea>
 800772c:	2301      	movs	r3, #1
 800772e:	4652      	mov	r2, sl
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f aef7 	beq.w	800752a <_printf_float+0xc2>
 800773c:	f109 0901 	add.w	r9, r9, #1
 8007740:	e7ee      	b.n	8007720 <_printf_float+0x2b8>
 8007742:	bf00      	nop
 8007744:	7fefffff 	.word	0x7fefffff
 8007748:	08009fb0 	.word	0x08009fb0
 800774c:	08009fb4 	.word	0x08009fb4
 8007750:	08009fbc 	.word	0x08009fbc
 8007754:	08009fb8 	.word	0x08009fb8
 8007758:	08009fc0 	.word	0x08009fc0
 800775c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800775e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007760:	429a      	cmp	r2, r3
 8007762:	bfa8      	it	ge
 8007764:	461a      	movge	r2, r3
 8007766:	2a00      	cmp	r2, #0
 8007768:	4691      	mov	r9, r2
 800776a:	dc37      	bgt.n	80077dc <_printf_float+0x374>
 800776c:	f04f 0b00 	mov.w	fp, #0
 8007770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007774:	f104 021a 	add.w	r2, r4, #26
 8007778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800777a:	9305      	str	r3, [sp, #20]
 800777c:	eba3 0309 	sub.w	r3, r3, r9
 8007780:	455b      	cmp	r3, fp
 8007782:	dc33      	bgt.n	80077ec <_printf_float+0x384>
 8007784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007788:	429a      	cmp	r2, r3
 800778a:	db3b      	blt.n	8007804 <_printf_float+0x39c>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	07da      	lsls	r2, r3, #31
 8007790:	d438      	bmi.n	8007804 <_printf_float+0x39c>
 8007792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007794:	9a05      	ldr	r2, [sp, #20]
 8007796:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007798:	1a9a      	subs	r2, r3, r2
 800779a:	eba3 0901 	sub.w	r9, r3, r1
 800779e:	4591      	cmp	r9, r2
 80077a0:	bfa8      	it	ge
 80077a2:	4691      	movge	r9, r2
 80077a4:	f1b9 0f00 	cmp.w	r9, #0
 80077a8:	dc35      	bgt.n	8007816 <_printf_float+0x3ae>
 80077aa:	f04f 0800 	mov.w	r8, #0
 80077ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077b2:	f104 0a1a 	add.w	sl, r4, #26
 80077b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077ba:	1a9b      	subs	r3, r3, r2
 80077bc:	eba3 0309 	sub.w	r3, r3, r9
 80077c0:	4543      	cmp	r3, r8
 80077c2:	f77f af79 	ble.w	80076b8 <_printf_float+0x250>
 80077c6:	2301      	movs	r3, #1
 80077c8:	4652      	mov	r2, sl
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f aeaa 	beq.w	800752a <_printf_float+0xc2>
 80077d6:	f108 0801 	add.w	r8, r8, #1
 80077da:	e7ec      	b.n	80077b6 <_printf_float+0x34e>
 80077dc:	4613      	mov	r3, r2
 80077de:	4631      	mov	r1, r6
 80077e0:	4642      	mov	r2, r8
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	d1c0      	bne.n	800776c <_printf_float+0x304>
 80077ea:	e69e      	b.n	800752a <_printf_float+0xc2>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	9205      	str	r2, [sp, #20]
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f ae97 	beq.w	800752a <_printf_float+0xc2>
 80077fc:	9a05      	ldr	r2, [sp, #20]
 80077fe:	f10b 0b01 	add.w	fp, fp, #1
 8007802:	e7b9      	b.n	8007778 <_printf_float+0x310>
 8007804:	ee18 3a10 	vmov	r3, s16
 8007808:	4652      	mov	r2, sl
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	d1be      	bne.n	8007792 <_printf_float+0x32a>
 8007814:	e689      	b.n	800752a <_printf_float+0xc2>
 8007816:	9a05      	ldr	r2, [sp, #20]
 8007818:	464b      	mov	r3, r9
 800781a:	4442      	add	r2, r8
 800781c:	4631      	mov	r1, r6
 800781e:	4628      	mov	r0, r5
 8007820:	47b8      	blx	r7
 8007822:	3001      	adds	r0, #1
 8007824:	d1c1      	bne.n	80077aa <_printf_float+0x342>
 8007826:	e680      	b.n	800752a <_printf_float+0xc2>
 8007828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800782a:	2a01      	cmp	r2, #1
 800782c:	dc01      	bgt.n	8007832 <_printf_float+0x3ca>
 800782e:	07db      	lsls	r3, r3, #31
 8007830:	d538      	bpl.n	80078a4 <_printf_float+0x43c>
 8007832:	2301      	movs	r3, #1
 8007834:	4642      	mov	r2, r8
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	f43f ae74 	beq.w	800752a <_printf_float+0xc2>
 8007842:	ee18 3a10 	vmov	r3, s16
 8007846:	4652      	mov	r2, sl
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f ae6b 	beq.w	800752a <_printf_float+0xc2>
 8007854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007858:	2200      	movs	r2, #0
 800785a:	2300      	movs	r3, #0
 800785c:	f7f9 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8007860:	b9d8      	cbnz	r0, 800789a <_printf_float+0x432>
 8007862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007864:	f108 0201 	add.w	r2, r8, #1
 8007868:	3b01      	subs	r3, #1
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	d10e      	bne.n	8007892 <_printf_float+0x42a>
 8007874:	e659      	b.n	800752a <_printf_float+0xc2>
 8007876:	2301      	movs	r3, #1
 8007878:	4652      	mov	r2, sl
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f ae52 	beq.w	800752a <_printf_float+0xc2>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788c:	3b01      	subs	r3, #1
 800788e:	4543      	cmp	r3, r8
 8007890:	dcf1      	bgt.n	8007876 <_printf_float+0x40e>
 8007892:	464b      	mov	r3, r9
 8007894:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007898:	e6dc      	b.n	8007654 <_printf_float+0x1ec>
 800789a:	f04f 0800 	mov.w	r8, #0
 800789e:	f104 0a1a 	add.w	sl, r4, #26
 80078a2:	e7f2      	b.n	800788a <_printf_float+0x422>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4642      	mov	r2, r8
 80078a8:	e7df      	b.n	800786a <_printf_float+0x402>
 80078aa:	2301      	movs	r3, #1
 80078ac:	464a      	mov	r2, r9
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f ae38 	beq.w	800752a <_printf_float+0xc2>
 80078ba:	f108 0801 	add.w	r8, r8, #1
 80078be:	68e3      	ldr	r3, [r4, #12]
 80078c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078c2:	1a5b      	subs	r3, r3, r1
 80078c4:	4543      	cmp	r3, r8
 80078c6:	dcf0      	bgt.n	80078aa <_printf_float+0x442>
 80078c8:	e6fa      	b.n	80076c0 <_printf_float+0x258>
 80078ca:	f04f 0800 	mov.w	r8, #0
 80078ce:	f104 0919 	add.w	r9, r4, #25
 80078d2:	e7f4      	b.n	80078be <_printf_float+0x456>

080078d4 <_printf_common>:
 80078d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	4616      	mov	r6, r2
 80078da:	4699      	mov	r9, r3
 80078dc:	688a      	ldr	r2, [r1, #8]
 80078de:	690b      	ldr	r3, [r1, #16]
 80078e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078e4:	4293      	cmp	r3, r2
 80078e6:	bfb8      	it	lt
 80078e8:	4613      	movlt	r3, r2
 80078ea:	6033      	str	r3, [r6, #0]
 80078ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f0:	4607      	mov	r7, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	b10a      	cbz	r2, 80078fa <_printf_common+0x26>
 80078f6:	3301      	adds	r3, #1
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	0699      	lsls	r1, r3, #26
 80078fe:	bf42      	ittt	mi
 8007900:	6833      	ldrmi	r3, [r6, #0]
 8007902:	3302      	addmi	r3, #2
 8007904:	6033      	strmi	r3, [r6, #0]
 8007906:	6825      	ldr	r5, [r4, #0]
 8007908:	f015 0506 	ands.w	r5, r5, #6
 800790c:	d106      	bne.n	800791c <_printf_common+0x48>
 800790e:	f104 0a19 	add.w	sl, r4, #25
 8007912:	68e3      	ldr	r3, [r4, #12]
 8007914:	6832      	ldr	r2, [r6, #0]
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	42ab      	cmp	r3, r5
 800791a:	dc26      	bgt.n	800796a <_printf_common+0x96>
 800791c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007920:	1e13      	subs	r3, r2, #0
 8007922:	6822      	ldr	r2, [r4, #0]
 8007924:	bf18      	it	ne
 8007926:	2301      	movne	r3, #1
 8007928:	0692      	lsls	r2, r2, #26
 800792a:	d42b      	bmi.n	8007984 <_printf_common+0xb0>
 800792c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007930:	4649      	mov	r1, r9
 8007932:	4638      	mov	r0, r7
 8007934:	47c0      	blx	r8
 8007936:	3001      	adds	r0, #1
 8007938:	d01e      	beq.n	8007978 <_printf_common+0xa4>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	68e5      	ldr	r5, [r4, #12]
 800793e:	6832      	ldr	r2, [r6, #0]
 8007940:	f003 0306 	and.w	r3, r3, #6
 8007944:	2b04      	cmp	r3, #4
 8007946:	bf08      	it	eq
 8007948:	1aad      	subeq	r5, r5, r2
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	bf0c      	ite	eq
 8007950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007954:	2500      	movne	r5, #0
 8007956:	4293      	cmp	r3, r2
 8007958:	bfc4      	itt	gt
 800795a:	1a9b      	subgt	r3, r3, r2
 800795c:	18ed      	addgt	r5, r5, r3
 800795e:	2600      	movs	r6, #0
 8007960:	341a      	adds	r4, #26
 8007962:	42b5      	cmp	r5, r6
 8007964:	d11a      	bne.n	800799c <_printf_common+0xc8>
 8007966:	2000      	movs	r0, #0
 8007968:	e008      	b.n	800797c <_printf_common+0xa8>
 800796a:	2301      	movs	r3, #1
 800796c:	4652      	mov	r2, sl
 800796e:	4649      	mov	r1, r9
 8007970:	4638      	mov	r0, r7
 8007972:	47c0      	blx	r8
 8007974:	3001      	adds	r0, #1
 8007976:	d103      	bne.n	8007980 <_printf_common+0xac>
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007980:	3501      	adds	r5, #1
 8007982:	e7c6      	b.n	8007912 <_printf_common+0x3e>
 8007984:	18e1      	adds	r1, r4, r3
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	2030      	movs	r0, #48	; 0x30
 800798a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800798e:	4422      	add	r2, r4
 8007990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007998:	3302      	adds	r3, #2
 800799a:	e7c7      	b.n	800792c <_printf_common+0x58>
 800799c:	2301      	movs	r3, #1
 800799e:	4622      	mov	r2, r4
 80079a0:	4649      	mov	r1, r9
 80079a2:	4638      	mov	r0, r7
 80079a4:	47c0      	blx	r8
 80079a6:	3001      	adds	r0, #1
 80079a8:	d0e6      	beq.n	8007978 <_printf_common+0xa4>
 80079aa:	3601      	adds	r6, #1
 80079ac:	e7d9      	b.n	8007962 <_printf_common+0x8e>
	...

080079b0 <_printf_i>:
 80079b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	7e0f      	ldrb	r7, [r1, #24]
 80079b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079b8:	2f78      	cmp	r7, #120	; 0x78
 80079ba:	4691      	mov	r9, r2
 80079bc:	4680      	mov	r8, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	469a      	mov	sl, r3
 80079c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079c6:	d807      	bhi.n	80079d8 <_printf_i+0x28>
 80079c8:	2f62      	cmp	r7, #98	; 0x62
 80079ca:	d80a      	bhi.n	80079e2 <_printf_i+0x32>
 80079cc:	2f00      	cmp	r7, #0
 80079ce:	f000 80d8 	beq.w	8007b82 <_printf_i+0x1d2>
 80079d2:	2f58      	cmp	r7, #88	; 0x58
 80079d4:	f000 80a3 	beq.w	8007b1e <_printf_i+0x16e>
 80079d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079e0:	e03a      	b.n	8007a58 <_printf_i+0xa8>
 80079e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079e6:	2b15      	cmp	r3, #21
 80079e8:	d8f6      	bhi.n	80079d8 <_printf_i+0x28>
 80079ea:	a101      	add	r1, pc, #4	; (adr r1, 80079f0 <_printf_i+0x40>)
 80079ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079f0:	08007a49 	.word	0x08007a49
 80079f4:	08007a5d 	.word	0x08007a5d
 80079f8:	080079d9 	.word	0x080079d9
 80079fc:	080079d9 	.word	0x080079d9
 8007a00:	080079d9 	.word	0x080079d9
 8007a04:	080079d9 	.word	0x080079d9
 8007a08:	08007a5d 	.word	0x08007a5d
 8007a0c:	080079d9 	.word	0x080079d9
 8007a10:	080079d9 	.word	0x080079d9
 8007a14:	080079d9 	.word	0x080079d9
 8007a18:	080079d9 	.word	0x080079d9
 8007a1c:	08007b69 	.word	0x08007b69
 8007a20:	08007a8d 	.word	0x08007a8d
 8007a24:	08007b4b 	.word	0x08007b4b
 8007a28:	080079d9 	.word	0x080079d9
 8007a2c:	080079d9 	.word	0x080079d9
 8007a30:	08007b8b 	.word	0x08007b8b
 8007a34:	080079d9 	.word	0x080079d9
 8007a38:	08007a8d 	.word	0x08007a8d
 8007a3c:	080079d9 	.word	0x080079d9
 8007a40:	080079d9 	.word	0x080079d9
 8007a44:	08007b53 	.word	0x08007b53
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	1d1a      	adds	r2, r3, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	602a      	str	r2, [r5, #0]
 8007a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0a3      	b.n	8007ba4 <_printf_i+0x1f4>
 8007a5c:	6820      	ldr	r0, [r4, #0]
 8007a5e:	6829      	ldr	r1, [r5, #0]
 8007a60:	0606      	lsls	r6, r0, #24
 8007a62:	f101 0304 	add.w	r3, r1, #4
 8007a66:	d50a      	bpl.n	8007a7e <_printf_i+0xce>
 8007a68:	680e      	ldr	r6, [r1, #0]
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	da03      	bge.n	8007a78 <_printf_i+0xc8>
 8007a70:	232d      	movs	r3, #45	; 0x2d
 8007a72:	4276      	negs	r6, r6
 8007a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a78:	485e      	ldr	r0, [pc, #376]	; (8007bf4 <_printf_i+0x244>)
 8007a7a:	230a      	movs	r3, #10
 8007a7c:	e019      	b.n	8007ab2 <_printf_i+0x102>
 8007a7e:	680e      	ldr	r6, [r1, #0]
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a86:	bf18      	it	ne
 8007a88:	b236      	sxthne	r6, r6
 8007a8a:	e7ef      	b.n	8007a6c <_printf_i+0xbc>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	1d19      	adds	r1, r3, #4
 8007a92:	6029      	str	r1, [r5, #0]
 8007a94:	0601      	lsls	r1, r0, #24
 8007a96:	d501      	bpl.n	8007a9c <_printf_i+0xec>
 8007a98:	681e      	ldr	r6, [r3, #0]
 8007a9a:	e002      	b.n	8007aa2 <_printf_i+0xf2>
 8007a9c:	0646      	lsls	r6, r0, #25
 8007a9e:	d5fb      	bpl.n	8007a98 <_printf_i+0xe8>
 8007aa0:	881e      	ldrh	r6, [r3, #0]
 8007aa2:	4854      	ldr	r0, [pc, #336]	; (8007bf4 <_printf_i+0x244>)
 8007aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8007aa6:	bf0c      	ite	eq
 8007aa8:	2308      	moveq	r3, #8
 8007aaa:	230a      	movne	r3, #10
 8007aac:	2100      	movs	r1, #0
 8007aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ab2:	6865      	ldr	r5, [r4, #4]
 8007ab4:	60a5      	str	r5, [r4, #8]
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	bfa2      	ittt	ge
 8007aba:	6821      	ldrge	r1, [r4, #0]
 8007abc:	f021 0104 	bicge.w	r1, r1, #4
 8007ac0:	6021      	strge	r1, [r4, #0]
 8007ac2:	b90e      	cbnz	r6, 8007ac8 <_printf_i+0x118>
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	d04d      	beq.n	8007b64 <_printf_i+0x1b4>
 8007ac8:	4615      	mov	r5, r2
 8007aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ace:	fb03 6711 	mls	r7, r3, r1, r6
 8007ad2:	5dc7      	ldrb	r7, [r0, r7]
 8007ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ad8:	4637      	mov	r7, r6
 8007ada:	42bb      	cmp	r3, r7
 8007adc:	460e      	mov	r6, r1
 8007ade:	d9f4      	bls.n	8007aca <_printf_i+0x11a>
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d10b      	bne.n	8007afc <_printf_i+0x14c>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	07de      	lsls	r6, r3, #31
 8007ae8:	d508      	bpl.n	8007afc <_printf_i+0x14c>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	6861      	ldr	r1, [r4, #4]
 8007aee:	4299      	cmp	r1, r3
 8007af0:	bfde      	ittt	le
 8007af2:	2330      	movle	r3, #48	; 0x30
 8007af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007afc:	1b52      	subs	r2, r2, r5
 8007afe:	6122      	str	r2, [r4, #16]
 8007b00:	f8cd a000 	str.w	sl, [sp]
 8007b04:	464b      	mov	r3, r9
 8007b06:	aa03      	add	r2, sp, #12
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	f7ff fee2 	bl	80078d4 <_printf_common>
 8007b10:	3001      	adds	r0, #1
 8007b12:	d14c      	bne.n	8007bae <_printf_i+0x1fe>
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295
 8007b18:	b004      	add	sp, #16
 8007b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1e:	4835      	ldr	r0, [pc, #212]	; (8007bf4 <_printf_i+0x244>)
 8007b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b24:	6829      	ldr	r1, [r5, #0]
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b2c:	6029      	str	r1, [r5, #0]
 8007b2e:	061d      	lsls	r5, r3, #24
 8007b30:	d514      	bpl.n	8007b5c <_printf_i+0x1ac>
 8007b32:	07df      	lsls	r7, r3, #31
 8007b34:	bf44      	itt	mi
 8007b36:	f043 0320 	orrmi.w	r3, r3, #32
 8007b3a:	6023      	strmi	r3, [r4, #0]
 8007b3c:	b91e      	cbnz	r6, 8007b46 <_printf_i+0x196>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	f023 0320 	bic.w	r3, r3, #32
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	2310      	movs	r3, #16
 8007b48:	e7b0      	b.n	8007aac <_printf_i+0xfc>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f043 0320 	orr.w	r3, r3, #32
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	2378      	movs	r3, #120	; 0x78
 8007b54:	4828      	ldr	r0, [pc, #160]	; (8007bf8 <_printf_i+0x248>)
 8007b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b5a:	e7e3      	b.n	8007b24 <_printf_i+0x174>
 8007b5c:	0659      	lsls	r1, r3, #25
 8007b5e:	bf48      	it	mi
 8007b60:	b2b6      	uxthmi	r6, r6
 8007b62:	e7e6      	b.n	8007b32 <_printf_i+0x182>
 8007b64:	4615      	mov	r5, r2
 8007b66:	e7bb      	b.n	8007ae0 <_printf_i+0x130>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	6826      	ldr	r6, [r4, #0]
 8007b6c:	6961      	ldr	r1, [r4, #20]
 8007b6e:	1d18      	adds	r0, r3, #4
 8007b70:	6028      	str	r0, [r5, #0]
 8007b72:	0635      	lsls	r5, r6, #24
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	d501      	bpl.n	8007b7c <_printf_i+0x1cc>
 8007b78:	6019      	str	r1, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <_printf_i+0x1d2>
 8007b7c:	0670      	lsls	r0, r6, #25
 8007b7e:	d5fb      	bpl.n	8007b78 <_printf_i+0x1c8>
 8007b80:	8019      	strh	r1, [r3, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	4615      	mov	r5, r2
 8007b88:	e7ba      	b.n	8007b00 <_printf_i+0x150>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	1d1a      	adds	r2, r3, #4
 8007b8e:	602a      	str	r2, [r5, #0]
 8007b90:	681d      	ldr	r5, [r3, #0]
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7f8 fb22 	bl	80001e0 <memchr>
 8007b9c:	b108      	cbz	r0, 8007ba2 <_printf_i+0x1f2>
 8007b9e:	1b40      	subs	r0, r0, r5
 8007ba0:	6060      	str	r0, [r4, #4]
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bac:	e7a8      	b.n	8007b00 <_printf_i+0x150>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	47d0      	blx	sl
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d0ab      	beq.n	8007b14 <_printf_i+0x164>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	079b      	lsls	r3, r3, #30
 8007bc0:	d413      	bmi.n	8007bea <_printf_i+0x23a>
 8007bc2:	68e0      	ldr	r0, [r4, #12]
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	4298      	cmp	r0, r3
 8007bc8:	bfb8      	it	lt
 8007bca:	4618      	movlt	r0, r3
 8007bcc:	e7a4      	b.n	8007b18 <_printf_i+0x168>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	47d0      	blx	sl
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d09b      	beq.n	8007b14 <_printf_i+0x164>
 8007bdc:	3501      	adds	r5, #1
 8007bde:	68e3      	ldr	r3, [r4, #12]
 8007be0:	9903      	ldr	r1, [sp, #12]
 8007be2:	1a5b      	subs	r3, r3, r1
 8007be4:	42ab      	cmp	r3, r5
 8007be6:	dcf2      	bgt.n	8007bce <_printf_i+0x21e>
 8007be8:	e7eb      	b.n	8007bc2 <_printf_i+0x212>
 8007bea:	2500      	movs	r5, #0
 8007bec:	f104 0619 	add.w	r6, r4, #25
 8007bf0:	e7f5      	b.n	8007bde <_printf_i+0x22e>
 8007bf2:	bf00      	nop
 8007bf4:	08009fc2 	.word	0x08009fc2
 8007bf8:	08009fd3 	.word	0x08009fd3

08007bfc <iprintf>:
 8007bfc:	b40f      	push	{r0, r1, r2, r3}
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <iprintf+0x2c>)
 8007c00:	b513      	push	{r0, r1, r4, lr}
 8007c02:	681c      	ldr	r4, [r3, #0]
 8007c04:	b124      	cbz	r4, 8007c10 <iprintf+0x14>
 8007c06:	69a3      	ldr	r3, [r4, #24]
 8007c08:	b913      	cbnz	r3, 8007c10 <iprintf+0x14>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f001 f930 	bl	8008e70 <__sinit>
 8007c10:	ab05      	add	r3, sp, #20
 8007c12:	9a04      	ldr	r2, [sp, #16]
 8007c14:	68a1      	ldr	r1, [r4, #8]
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 feed 	bl	80099f8 <_vfiprintf_r>
 8007c1e:	b002      	add	sp, #8
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	b004      	add	sp, #16
 8007c26:	4770      	bx	lr
 8007c28:	2000000c 	.word	0x2000000c

08007c2c <setbuf>:
 8007c2c:	2900      	cmp	r1, #0
 8007c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c32:	bf0c      	ite	eq
 8007c34:	2202      	moveq	r2, #2
 8007c36:	2200      	movne	r2, #0
 8007c38:	f000 b800 	b.w	8007c3c <setvbuf>

08007c3c <setvbuf>:
 8007c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c40:	461d      	mov	r5, r3
 8007c42:	4b5d      	ldr	r3, [pc, #372]	; (8007db8 <setvbuf+0x17c>)
 8007c44:	681f      	ldr	r7, [r3, #0]
 8007c46:	4604      	mov	r4, r0
 8007c48:	460e      	mov	r6, r1
 8007c4a:	4690      	mov	r8, r2
 8007c4c:	b127      	cbz	r7, 8007c58 <setvbuf+0x1c>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	b913      	cbnz	r3, 8007c58 <setvbuf+0x1c>
 8007c52:	4638      	mov	r0, r7
 8007c54:	f001 f90c 	bl	8008e70 <__sinit>
 8007c58:	4b58      	ldr	r3, [pc, #352]	; (8007dbc <setvbuf+0x180>)
 8007c5a:	429c      	cmp	r4, r3
 8007c5c:	d167      	bne.n	8007d2e <setvbuf+0xf2>
 8007c5e:	687c      	ldr	r4, [r7, #4]
 8007c60:	f1b8 0f02 	cmp.w	r8, #2
 8007c64:	d006      	beq.n	8007c74 <setvbuf+0x38>
 8007c66:	f1b8 0f01 	cmp.w	r8, #1
 8007c6a:	f200 809f 	bhi.w	8007dac <setvbuf+0x170>
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	f2c0 809c 	blt.w	8007dac <setvbuf+0x170>
 8007c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c76:	07db      	lsls	r3, r3, #31
 8007c78:	d405      	bmi.n	8007c86 <setvbuf+0x4a>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	0598      	lsls	r0, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <setvbuf+0x4a>
 8007c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c82:	f001 f998 	bl	8008fb6 <__retarget_lock_acquire_recursive>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f001 f85d 	bl	8008d48 <_fflush_r>
 8007c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c90:	b141      	cbz	r1, 8007ca4 <setvbuf+0x68>
 8007c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c96:	4299      	cmp	r1, r3
 8007c98:	d002      	beq.n	8007ca0 <setvbuf+0x64>
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f001 fda2 	bl	80097e4 <_free_r>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6363      	str	r3, [r4, #52]	; 0x34
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	61a3      	str	r3, [r4, #24]
 8007ca8:	6063      	str	r3, [r4, #4]
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	0619      	lsls	r1, r3, #24
 8007cae:	d503      	bpl.n	8007cb8 <setvbuf+0x7c>
 8007cb0:	6921      	ldr	r1, [r4, #16]
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	f001 fd96 	bl	80097e4 <_free_r>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007cbe:	f023 0303 	bic.w	r3, r3, #3
 8007cc2:	f1b8 0f02 	cmp.w	r8, #2
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	d06c      	beq.n	8007da4 <setvbuf+0x168>
 8007cca:	ab01      	add	r3, sp, #4
 8007ccc:	466a      	mov	r2, sp
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f001 f972 	bl	8008fba <__swhatbuf_r>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	4318      	orrs	r0, r3
 8007cda:	81a0      	strh	r0, [r4, #12]
 8007cdc:	2d00      	cmp	r5, #0
 8007cde:	d130      	bne.n	8007d42 <setvbuf+0x106>
 8007ce0:	9d00      	ldr	r5, [sp, #0]
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f001 f9ce 	bl	8009084 <malloc>
 8007ce8:	4606      	mov	r6, r0
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d155      	bne.n	8007d9a <setvbuf+0x15e>
 8007cee:	f8dd 9000 	ldr.w	r9, [sp]
 8007cf2:	45a9      	cmp	r9, r5
 8007cf4:	d14a      	bne.n	8007d8c <setvbuf+0x150>
 8007cf6:	f04f 35ff 	mov.w	r5, #4294967295
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	60a2      	str	r2, [r4, #8]
 8007cfe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	6122      	str	r2, [r4, #16]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0c:	6162      	str	r2, [r4, #20]
 8007d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d10:	f043 0302 	orr.w	r3, r3, #2
 8007d14:	07d2      	lsls	r2, r2, #31
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	d405      	bmi.n	8007d26 <setvbuf+0xea>
 8007d1a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007d1e:	d102      	bne.n	8007d26 <setvbuf+0xea>
 8007d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d22:	f001 f949 	bl	8008fb8 <__retarget_lock_release_recursive>
 8007d26:	4628      	mov	r0, r5
 8007d28:	b003      	add	sp, #12
 8007d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <setvbuf+0x184>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	d101      	bne.n	8007d38 <setvbuf+0xfc>
 8007d34:	68bc      	ldr	r4, [r7, #8]
 8007d36:	e793      	b.n	8007c60 <setvbuf+0x24>
 8007d38:	4b22      	ldr	r3, [pc, #136]	; (8007dc4 <setvbuf+0x188>)
 8007d3a:	429c      	cmp	r4, r3
 8007d3c:	bf08      	it	eq
 8007d3e:	68fc      	ldreq	r4, [r7, #12]
 8007d40:	e78e      	b.n	8007c60 <setvbuf+0x24>
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	d0cd      	beq.n	8007ce2 <setvbuf+0xa6>
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	b913      	cbnz	r3, 8007d50 <setvbuf+0x114>
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f001 f890 	bl	8008e70 <__sinit>
 8007d50:	f1b8 0f01 	cmp.w	r8, #1
 8007d54:	bf08      	it	eq
 8007d56:	89a3      	ldrheq	r3, [r4, #12]
 8007d58:	6026      	str	r6, [r4, #0]
 8007d5a:	bf04      	itt	eq
 8007d5c:	f043 0301 	orreq.w	r3, r3, #1
 8007d60:	81a3      	strheq	r3, [r4, #12]
 8007d62:	89a2      	ldrh	r2, [r4, #12]
 8007d64:	f012 0308 	ands.w	r3, r2, #8
 8007d68:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007d6c:	d01c      	beq.n	8007da8 <setvbuf+0x16c>
 8007d6e:	07d3      	lsls	r3, r2, #31
 8007d70:	bf41      	itttt	mi
 8007d72:	2300      	movmi	r3, #0
 8007d74:	426d      	negmi	r5, r5
 8007d76:	60a3      	strmi	r3, [r4, #8]
 8007d78:	61a5      	strmi	r5, [r4, #24]
 8007d7a:	bf58      	it	pl
 8007d7c:	60a5      	strpl	r5, [r4, #8]
 8007d7e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007d80:	f015 0501 	ands.w	r5, r5, #1
 8007d84:	d115      	bne.n	8007db2 <setvbuf+0x176>
 8007d86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007d8a:	e7c8      	b.n	8007d1e <setvbuf+0xe2>
 8007d8c:	4648      	mov	r0, r9
 8007d8e:	f001 f979 	bl	8009084 <malloc>
 8007d92:	4606      	mov	r6, r0
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d0ae      	beq.n	8007cf6 <setvbuf+0xba>
 8007d98:	464d      	mov	r5, r9
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	e7d0      	b.n	8007d46 <setvbuf+0x10a>
 8007da4:	2500      	movs	r5, #0
 8007da6:	e7a8      	b.n	8007cfa <setvbuf+0xbe>
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	e7e8      	b.n	8007d7e <setvbuf+0x142>
 8007dac:	f04f 35ff 	mov.w	r5, #4294967295
 8007db0:	e7b9      	b.n	8007d26 <setvbuf+0xea>
 8007db2:	2500      	movs	r5, #0
 8007db4:	e7b7      	b.n	8007d26 <setvbuf+0xea>
 8007db6:	bf00      	nop
 8007db8:	2000000c 	.word	0x2000000c
 8007dbc:	0800a094 	.word	0x0800a094
 8007dc0:	0800a0b4 	.word	0x0800a0b4
 8007dc4:	0800a074 	.word	0x0800a074

08007dc8 <__swbuf_r>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	460e      	mov	r6, r1
 8007dcc:	4614      	mov	r4, r2
 8007dce:	4605      	mov	r5, r0
 8007dd0:	b118      	cbz	r0, 8007dda <__swbuf_r+0x12>
 8007dd2:	6983      	ldr	r3, [r0, #24]
 8007dd4:	b90b      	cbnz	r3, 8007dda <__swbuf_r+0x12>
 8007dd6:	f001 f84b 	bl	8008e70 <__sinit>
 8007dda:	4b21      	ldr	r3, [pc, #132]	; (8007e60 <__swbuf_r+0x98>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	d12b      	bne.n	8007e38 <__swbuf_r+0x70>
 8007de0:	686c      	ldr	r4, [r5, #4]
 8007de2:	69a3      	ldr	r3, [r4, #24]
 8007de4:	60a3      	str	r3, [r4, #8]
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	071a      	lsls	r2, r3, #28
 8007dea:	d52f      	bpl.n	8007e4c <__swbuf_r+0x84>
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	b36b      	cbz	r3, 8007e4c <__swbuf_r+0x84>
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	6820      	ldr	r0, [r4, #0]
 8007df4:	1ac0      	subs	r0, r0, r3
 8007df6:	6963      	ldr	r3, [r4, #20]
 8007df8:	b2f6      	uxtb	r6, r6
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	4637      	mov	r7, r6
 8007dfe:	dc04      	bgt.n	8007e0a <__swbuf_r+0x42>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 ffa0 	bl	8008d48 <_fflush_r>
 8007e08:	bb30      	cbnz	r0, 8007e58 <__swbuf_r+0x90>
 8007e0a:	68a3      	ldr	r3, [r4, #8]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	60a3      	str	r3, [r4, #8]
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	6022      	str	r2, [r4, #0]
 8007e16:	701e      	strb	r6, [r3, #0]
 8007e18:	6963      	ldr	r3, [r4, #20]
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	4283      	cmp	r3, r0
 8007e1e:	d004      	beq.n	8007e2a <__swbuf_r+0x62>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	07db      	lsls	r3, r3, #31
 8007e24:	d506      	bpl.n	8007e34 <__swbuf_r+0x6c>
 8007e26:	2e0a      	cmp	r6, #10
 8007e28:	d104      	bne.n	8007e34 <__swbuf_r+0x6c>
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 ff8b 	bl	8008d48 <_fflush_r>
 8007e32:	b988      	cbnz	r0, 8007e58 <__swbuf_r+0x90>
 8007e34:	4638      	mov	r0, r7
 8007e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <__swbuf_r+0x9c>)
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d101      	bne.n	8007e42 <__swbuf_r+0x7a>
 8007e3e:	68ac      	ldr	r4, [r5, #8]
 8007e40:	e7cf      	b.n	8007de2 <__swbuf_r+0x1a>
 8007e42:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <__swbuf_r+0xa0>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	bf08      	it	eq
 8007e48:	68ec      	ldreq	r4, [r5, #12]
 8007e4a:	e7ca      	b.n	8007de2 <__swbuf_r+0x1a>
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f000 f80c 	bl	8007e6c <__swsetup_r>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0cb      	beq.n	8007df0 <__swbuf_r+0x28>
 8007e58:	f04f 37ff 	mov.w	r7, #4294967295
 8007e5c:	e7ea      	b.n	8007e34 <__swbuf_r+0x6c>
 8007e5e:	bf00      	nop
 8007e60:	0800a094 	.word	0x0800a094
 8007e64:	0800a0b4 	.word	0x0800a0b4
 8007e68:	0800a074 	.word	0x0800a074

08007e6c <__swsetup_r>:
 8007e6c:	4b32      	ldr	r3, [pc, #200]	; (8007f38 <__swsetup_r+0xcc>)
 8007e6e:	b570      	push	{r4, r5, r6, lr}
 8007e70:	681d      	ldr	r5, [r3, #0]
 8007e72:	4606      	mov	r6, r0
 8007e74:	460c      	mov	r4, r1
 8007e76:	b125      	cbz	r5, 8007e82 <__swsetup_r+0x16>
 8007e78:	69ab      	ldr	r3, [r5, #24]
 8007e7a:	b913      	cbnz	r3, 8007e82 <__swsetup_r+0x16>
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f000 fff7 	bl	8008e70 <__sinit>
 8007e82:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <__swsetup_r+0xd0>)
 8007e84:	429c      	cmp	r4, r3
 8007e86:	d10f      	bne.n	8007ea8 <__swsetup_r+0x3c>
 8007e88:	686c      	ldr	r4, [r5, #4]
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e90:	0719      	lsls	r1, r3, #28
 8007e92:	d42c      	bmi.n	8007eee <__swsetup_r+0x82>
 8007e94:	06dd      	lsls	r5, r3, #27
 8007e96:	d411      	bmi.n	8007ebc <__swsetup_r+0x50>
 8007e98:	2309      	movs	r3, #9
 8007e9a:	6033      	str	r3, [r6, #0]
 8007e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea6:	e03e      	b.n	8007f26 <__swsetup_r+0xba>
 8007ea8:	4b25      	ldr	r3, [pc, #148]	; (8007f40 <__swsetup_r+0xd4>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d101      	bne.n	8007eb2 <__swsetup_r+0x46>
 8007eae:	68ac      	ldr	r4, [r5, #8]
 8007eb0:	e7eb      	b.n	8007e8a <__swsetup_r+0x1e>
 8007eb2:	4b24      	ldr	r3, [pc, #144]	; (8007f44 <__swsetup_r+0xd8>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	bf08      	it	eq
 8007eb8:	68ec      	ldreq	r4, [r5, #12]
 8007eba:	e7e6      	b.n	8007e8a <__swsetup_r+0x1e>
 8007ebc:	0758      	lsls	r0, r3, #29
 8007ebe:	d512      	bpl.n	8007ee6 <__swsetup_r+0x7a>
 8007ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ec2:	b141      	cbz	r1, 8007ed6 <__swsetup_r+0x6a>
 8007ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec8:	4299      	cmp	r1, r3
 8007eca:	d002      	beq.n	8007ed2 <__swsetup_r+0x66>
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f001 fc89 	bl	80097e4 <_free_r>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007edc:	81a3      	strh	r3, [r4, #12]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6063      	str	r3, [r4, #4]
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f043 0308 	orr.w	r3, r3, #8
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	b94b      	cbnz	r3, 8007f06 <__swsetup_r+0x9a>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efc:	d003      	beq.n	8007f06 <__swsetup_r+0x9a>
 8007efe:	4621      	mov	r1, r4
 8007f00:	4630      	mov	r0, r6
 8007f02:	f001 f87f 	bl	8009004 <__smakebuf_r>
 8007f06:	89a0      	ldrh	r0, [r4, #12]
 8007f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f0c:	f010 0301 	ands.w	r3, r0, #1
 8007f10:	d00a      	beq.n	8007f28 <__swsetup_r+0xbc>
 8007f12:	2300      	movs	r3, #0
 8007f14:	60a3      	str	r3, [r4, #8]
 8007f16:	6963      	ldr	r3, [r4, #20]
 8007f18:	425b      	negs	r3, r3
 8007f1a:	61a3      	str	r3, [r4, #24]
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	b943      	cbnz	r3, 8007f32 <__swsetup_r+0xc6>
 8007f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f24:	d1ba      	bne.n	8007e9c <__swsetup_r+0x30>
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	0781      	lsls	r1, r0, #30
 8007f2a:	bf58      	it	pl
 8007f2c:	6963      	ldrpl	r3, [r4, #20]
 8007f2e:	60a3      	str	r3, [r4, #8]
 8007f30:	e7f4      	b.n	8007f1c <__swsetup_r+0xb0>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e7f7      	b.n	8007f26 <__swsetup_r+0xba>
 8007f36:	bf00      	nop
 8007f38:	2000000c 	.word	0x2000000c
 8007f3c:	0800a094 	.word	0x0800a094
 8007f40:	0800a0b4 	.word	0x0800a0b4
 8007f44:	0800a074 	.word	0x0800a074

08007f48 <quorem>:
 8007f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	6903      	ldr	r3, [r0, #16]
 8007f4e:	690c      	ldr	r4, [r1, #16]
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	4607      	mov	r7, r0
 8007f54:	f2c0 8081 	blt.w	800805a <quorem+0x112>
 8007f58:	3c01      	subs	r4, #1
 8007f5a:	f101 0814 	add.w	r8, r1, #20
 8007f5e:	f100 0514 	add.w	r5, r0, #20
 8007f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f70:	3301      	adds	r3, #1
 8007f72:	429a      	cmp	r2, r3
 8007f74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f80:	d331      	bcc.n	8007fe6 <quorem+0x9e>
 8007f82:	f04f 0e00 	mov.w	lr, #0
 8007f86:	4640      	mov	r0, r8
 8007f88:	46ac      	mov	ip, r5
 8007f8a:	46f2      	mov	sl, lr
 8007f8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f90:	b293      	uxth	r3, r2
 8007f92:	fb06 e303 	mla	r3, r6, r3, lr
 8007f96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8007fa0:	f8dc a000 	ldr.w	sl, [ip]
 8007fa4:	0c12      	lsrs	r2, r2, #16
 8007fa6:	fa13 f38a 	uxtah	r3, r3, sl
 8007faa:	fb06 e202 	mla	r2, r6, r2, lr
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	9b00      	ldr	r3, [sp, #0]
 8007fb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fc4:	4581      	cmp	r9, r0
 8007fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fca:	f84c 3b04 	str.w	r3, [ip], #4
 8007fce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fd2:	d2db      	bcs.n	8007f8c <quorem+0x44>
 8007fd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fd8:	b92b      	cbnz	r3, 8007fe6 <quorem+0x9e>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	3b04      	subs	r3, #4
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	d32e      	bcc.n	8008042 <quorem+0xfa>
 8007fe4:	613c      	str	r4, [r7, #16]
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f001 fae4 	bl	80095b4 <__mcmp>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	db24      	blt.n	800803a <quorem+0xf2>
 8007ff0:	3601      	adds	r6, #1
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f04f 0c00 	mov.w	ip, #0
 8007ff8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ffc:	f8d0 e000 	ldr.w	lr, [r0]
 8008000:	b293      	uxth	r3, r2
 8008002:	ebac 0303 	sub.w	r3, ip, r3
 8008006:	0c12      	lsrs	r2, r2, #16
 8008008:	fa13 f38e 	uxtah	r3, r3, lr
 800800c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008014:	b29b      	uxth	r3, r3
 8008016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800801a:	45c1      	cmp	r9, r8
 800801c:	f840 3b04 	str.w	r3, [r0], #4
 8008020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008024:	d2e8      	bcs.n	8007ff8 <quorem+0xb0>
 8008026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800802a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800802e:	b922      	cbnz	r2, 800803a <quorem+0xf2>
 8008030:	3b04      	subs	r3, #4
 8008032:	429d      	cmp	r5, r3
 8008034:	461a      	mov	r2, r3
 8008036:	d30a      	bcc.n	800804e <quorem+0x106>
 8008038:	613c      	str	r4, [r7, #16]
 800803a:	4630      	mov	r0, r6
 800803c:	b003      	add	sp, #12
 800803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	3b04      	subs	r3, #4
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1cc      	bne.n	8007fe4 <quorem+0x9c>
 800804a:	3c01      	subs	r4, #1
 800804c:	e7c7      	b.n	8007fde <quorem+0x96>
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	3b04      	subs	r3, #4
 8008052:	2a00      	cmp	r2, #0
 8008054:	d1f0      	bne.n	8008038 <quorem+0xf0>
 8008056:	3c01      	subs	r4, #1
 8008058:	e7eb      	b.n	8008032 <quorem+0xea>
 800805a:	2000      	movs	r0, #0
 800805c:	e7ee      	b.n	800803c <quorem+0xf4>
	...

08008060 <_dtoa_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	ed2d 8b04 	vpush	{d8-d9}
 8008068:	ec57 6b10 	vmov	r6, r7, d0
 800806c:	b093      	sub	sp, #76	; 0x4c
 800806e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008074:	9106      	str	r1, [sp, #24]
 8008076:	ee10 aa10 	vmov	sl, s0
 800807a:	4604      	mov	r4, r0
 800807c:	9209      	str	r2, [sp, #36]	; 0x24
 800807e:	930c      	str	r3, [sp, #48]	; 0x30
 8008080:	46bb      	mov	fp, r7
 8008082:	b975      	cbnz	r5, 80080a2 <_dtoa_r+0x42>
 8008084:	2010      	movs	r0, #16
 8008086:	f000 fffd 	bl	8009084 <malloc>
 800808a:	4602      	mov	r2, r0
 800808c:	6260      	str	r0, [r4, #36]	; 0x24
 800808e:	b920      	cbnz	r0, 800809a <_dtoa_r+0x3a>
 8008090:	4ba7      	ldr	r3, [pc, #668]	; (8008330 <_dtoa_r+0x2d0>)
 8008092:	21ea      	movs	r1, #234	; 0xea
 8008094:	48a7      	ldr	r0, [pc, #668]	; (8008334 <_dtoa_r+0x2d4>)
 8008096:	f001 fe45 	bl	8009d24 <__assert_func>
 800809a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800809e:	6005      	str	r5, [r0, #0]
 80080a0:	60c5      	str	r5, [r0, #12]
 80080a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	b151      	cbz	r1, 80080be <_dtoa_r+0x5e>
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	604a      	str	r2, [r1, #4]
 80080ac:	2301      	movs	r3, #1
 80080ae:	4093      	lsls	r3, r2
 80080b0:	608b      	str	r3, [r1, #8]
 80080b2:	4620      	mov	r0, r4
 80080b4:	f001 f83c 	bl	8009130 <_Bfree>
 80080b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	1e3b      	subs	r3, r7, #0
 80080c0:	bfaa      	itet	ge
 80080c2:	2300      	movge	r3, #0
 80080c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080c8:	f8c8 3000 	strge.w	r3, [r8]
 80080cc:	4b9a      	ldr	r3, [pc, #616]	; (8008338 <_dtoa_r+0x2d8>)
 80080ce:	bfbc      	itt	lt
 80080d0:	2201      	movlt	r2, #1
 80080d2:	f8c8 2000 	strlt.w	r2, [r8]
 80080d6:	ea33 030b 	bics.w	r3, r3, fp
 80080da:	d11b      	bne.n	8008114 <_dtoa_r+0xb4>
 80080dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080de:	f242 730f 	movw	r3, #9999	; 0x270f
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e8:	4333      	orrs	r3, r6
 80080ea:	f000 8592 	beq.w	8008c12 <_dtoa_r+0xbb2>
 80080ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080f0:	b963      	cbnz	r3, 800810c <_dtoa_r+0xac>
 80080f2:	4b92      	ldr	r3, [pc, #584]	; (800833c <_dtoa_r+0x2dc>)
 80080f4:	e022      	b.n	800813c <_dtoa_r+0xdc>
 80080f6:	4b92      	ldr	r3, [pc, #584]	; (8008340 <_dtoa_r+0x2e0>)
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	3308      	adds	r3, #8
 80080fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	9801      	ldr	r0, [sp, #4]
 8008102:	b013      	add	sp, #76	; 0x4c
 8008104:	ecbd 8b04 	vpop	{d8-d9}
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810c:	4b8b      	ldr	r3, [pc, #556]	; (800833c <_dtoa_r+0x2dc>)
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	3303      	adds	r3, #3
 8008112:	e7f3      	b.n	80080fc <_dtoa_r+0x9c>
 8008114:	2200      	movs	r2, #0
 8008116:	2300      	movs	r3, #0
 8008118:	4650      	mov	r0, sl
 800811a:	4659      	mov	r1, fp
 800811c:	f7f8 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008120:	ec4b ab19 	vmov	d9, sl, fp
 8008124:	4680      	mov	r8, r0
 8008126:	b158      	cbz	r0, 8008140 <_dtoa_r+0xe0>
 8008128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800812a:	2301      	movs	r3, #1
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 856b 	beq.w	8008c0c <_dtoa_r+0xbac>
 8008136:	4883      	ldr	r0, [pc, #524]	; (8008344 <_dtoa_r+0x2e4>)
 8008138:	6018      	str	r0, [r3, #0]
 800813a:	1e43      	subs	r3, r0, #1
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	e7df      	b.n	8008100 <_dtoa_r+0xa0>
 8008140:	ec4b ab10 	vmov	d0, sl, fp
 8008144:	aa10      	add	r2, sp, #64	; 0x40
 8008146:	a911      	add	r1, sp, #68	; 0x44
 8008148:	4620      	mov	r0, r4
 800814a:	f001 fad9 	bl	8009700 <__d2b>
 800814e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008152:	ee08 0a10 	vmov	s16, r0
 8008156:	2d00      	cmp	r5, #0
 8008158:	f000 8084 	beq.w	8008264 <_dtoa_r+0x204>
 800815c:	ee19 3a90 	vmov	r3, s19
 8008160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008168:	4656      	mov	r6, sl
 800816a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800816e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008176:	4b74      	ldr	r3, [pc, #464]	; (8008348 <_dtoa_r+0x2e8>)
 8008178:	2200      	movs	r2, #0
 800817a:	4630      	mov	r0, r6
 800817c:	4639      	mov	r1, r7
 800817e:	f7f8 f883 	bl	8000288 <__aeabi_dsub>
 8008182:	a365      	add	r3, pc, #404	; (adr r3, 8008318 <_dtoa_r+0x2b8>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 fa36 	bl	80005f8 <__aeabi_dmul>
 800818c:	a364      	add	r3, pc, #400	; (adr r3, 8008320 <_dtoa_r+0x2c0>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f87b 	bl	800028c <__adddf3>
 8008196:	4606      	mov	r6, r0
 8008198:	4628      	mov	r0, r5
 800819a:	460f      	mov	r7, r1
 800819c:	f7f8 f9c2 	bl	8000524 <__aeabi_i2d>
 80081a0:	a361      	add	r3, pc, #388	; (adr r3, 8008328 <_dtoa_r+0x2c8>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 fa27 	bl	80005f8 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f8 f86b 	bl	800028c <__adddf3>
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	f7f8 fccd 	bl	8000b58 <__aeabi_d2iz>
 80081be:	2200      	movs	r2, #0
 80081c0:	9000      	str	r0, [sp, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fc88 	bl	8000adc <__aeabi_dcmplt>
 80081cc:	b150      	cbz	r0, 80081e4 <_dtoa_r+0x184>
 80081ce:	9800      	ldr	r0, [sp, #0]
 80081d0:	f7f8 f9a8 	bl	8000524 <__aeabi_i2d>
 80081d4:	4632      	mov	r2, r6
 80081d6:	463b      	mov	r3, r7
 80081d8:	f7f8 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80081dc:	b910      	cbnz	r0, 80081e4 <_dtoa_r+0x184>
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	9b00      	ldr	r3, [sp, #0]
 80081e6:	2b16      	cmp	r3, #22
 80081e8:	d85a      	bhi.n	80082a0 <_dtoa_r+0x240>
 80081ea:	9a00      	ldr	r2, [sp, #0]
 80081ec:	4b57      	ldr	r3, [pc, #348]	; (800834c <_dtoa_r+0x2ec>)
 80081ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	ec51 0b19 	vmov	r0, r1, d9
 80081fa:	f7f8 fc6f 	bl	8000adc <__aeabi_dcmplt>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d050      	beq.n	80082a4 <_dtoa_r+0x244>
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	3b01      	subs	r3, #1
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	930b      	str	r3, [sp, #44]	; 0x2c
 800820c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800820e:	1b5d      	subs	r5, r3, r5
 8008210:	1e6b      	subs	r3, r5, #1
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	bf45      	ittet	mi
 8008216:	f1c5 0301 	rsbmi	r3, r5, #1
 800821a:	9304      	strmi	r3, [sp, #16]
 800821c:	2300      	movpl	r3, #0
 800821e:	2300      	movmi	r3, #0
 8008220:	bf4c      	ite	mi
 8008222:	9305      	strmi	r3, [sp, #20]
 8008224:	9304      	strpl	r3, [sp, #16]
 8008226:	9b00      	ldr	r3, [sp, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	db3d      	blt.n	80082a8 <_dtoa_r+0x248>
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	9a00      	ldr	r2, [sp, #0]
 8008230:	920a      	str	r2, [sp, #40]	; 0x28
 8008232:	4413      	add	r3, r2
 8008234:	9305      	str	r3, [sp, #20]
 8008236:	2300      	movs	r3, #0
 8008238:	9307      	str	r3, [sp, #28]
 800823a:	9b06      	ldr	r3, [sp, #24]
 800823c:	2b09      	cmp	r3, #9
 800823e:	f200 8089 	bhi.w	8008354 <_dtoa_r+0x2f4>
 8008242:	2b05      	cmp	r3, #5
 8008244:	bfc4      	itt	gt
 8008246:	3b04      	subgt	r3, #4
 8008248:	9306      	strgt	r3, [sp, #24]
 800824a:	9b06      	ldr	r3, [sp, #24]
 800824c:	f1a3 0302 	sub.w	r3, r3, #2
 8008250:	bfcc      	ite	gt
 8008252:	2500      	movgt	r5, #0
 8008254:	2501      	movle	r5, #1
 8008256:	2b03      	cmp	r3, #3
 8008258:	f200 8087 	bhi.w	800836a <_dtoa_r+0x30a>
 800825c:	e8df f003 	tbb	[pc, r3]
 8008260:	59383a2d 	.word	0x59383a2d
 8008264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008268:	441d      	add	r5, r3
 800826a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800826e:	2b20      	cmp	r3, #32
 8008270:	bfc1      	itttt	gt
 8008272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800827a:	fa0b f303 	lslgt.w	r3, fp, r3
 800827e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008282:	bfda      	itte	le
 8008284:	f1c3 0320 	rsble	r3, r3, #32
 8008288:	fa06 f003 	lslle.w	r0, r6, r3
 800828c:	4318      	orrgt	r0, r3
 800828e:	f7f8 f939 	bl	8000504 <__aeabi_ui2d>
 8008292:	2301      	movs	r3, #1
 8008294:	4606      	mov	r6, r0
 8008296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800829a:	3d01      	subs	r5, #1
 800829c:	930e      	str	r3, [sp, #56]	; 0x38
 800829e:	e76a      	b.n	8008176 <_dtoa_r+0x116>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e7b2      	b.n	800820a <_dtoa_r+0x1aa>
 80082a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80082a6:	e7b1      	b.n	800820c <_dtoa_r+0x1ac>
 80082a8:	9b04      	ldr	r3, [sp, #16]
 80082aa:	9a00      	ldr	r2, [sp, #0]
 80082ac:	1a9b      	subs	r3, r3, r2
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	4253      	negs	r3, r2
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	2300      	movs	r3, #0
 80082b6:	930a      	str	r3, [sp, #40]	; 0x28
 80082b8:	e7bf      	b.n	800823a <_dtoa_r+0x1da>
 80082ba:	2300      	movs	r3, #0
 80082bc:	9308      	str	r3, [sp, #32]
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc55      	bgt.n	8008370 <_dtoa_r+0x310>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082ca:	461a      	mov	r2, r3
 80082cc:	9209      	str	r2, [sp, #36]	; 0x24
 80082ce:	e00c      	b.n	80082ea <_dtoa_r+0x28a>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7f3      	b.n	80082bc <_dtoa_r+0x25c>
 80082d4:	2300      	movs	r3, #0
 80082d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	4413      	add	r3, r2
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	3301      	adds	r3, #1
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	9303      	str	r3, [sp, #12]
 80082e6:	bfb8      	it	lt
 80082e8:	2301      	movlt	r3, #1
 80082ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082ec:	2200      	movs	r2, #0
 80082ee:	6042      	str	r2, [r0, #4]
 80082f0:	2204      	movs	r2, #4
 80082f2:	f102 0614 	add.w	r6, r2, #20
 80082f6:	429e      	cmp	r6, r3
 80082f8:	6841      	ldr	r1, [r0, #4]
 80082fa:	d93d      	bls.n	8008378 <_dtoa_r+0x318>
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fed7 	bl	80090b0 <_Balloc>
 8008302:	9001      	str	r0, [sp, #4]
 8008304:	2800      	cmp	r0, #0
 8008306:	d13b      	bne.n	8008380 <_dtoa_r+0x320>
 8008308:	4b11      	ldr	r3, [pc, #68]	; (8008350 <_dtoa_r+0x2f0>)
 800830a:	4602      	mov	r2, r0
 800830c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008310:	e6c0      	b.n	8008094 <_dtoa_r+0x34>
 8008312:	2301      	movs	r3, #1
 8008314:	e7df      	b.n	80082d6 <_dtoa_r+0x276>
 8008316:	bf00      	nop
 8008318:	636f4361 	.word	0x636f4361
 800831c:	3fd287a7 	.word	0x3fd287a7
 8008320:	8b60c8b3 	.word	0x8b60c8b3
 8008324:	3fc68a28 	.word	0x3fc68a28
 8008328:	509f79fb 	.word	0x509f79fb
 800832c:	3fd34413 	.word	0x3fd34413
 8008330:	08009ff1 	.word	0x08009ff1
 8008334:	0800a008 	.word	0x0800a008
 8008338:	7ff00000 	.word	0x7ff00000
 800833c:	08009fed 	.word	0x08009fed
 8008340:	08009fe4 	.word	0x08009fe4
 8008344:	08009fc1 	.word	0x08009fc1
 8008348:	3ff80000 	.word	0x3ff80000
 800834c:	0800a158 	.word	0x0800a158
 8008350:	0800a063 	.word	0x0800a063
 8008354:	2501      	movs	r5, #1
 8008356:	2300      	movs	r3, #0
 8008358:	9306      	str	r3, [sp, #24]
 800835a:	9508      	str	r5, [sp, #32]
 800835c:	f04f 33ff 	mov.w	r3, #4294967295
 8008360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	2312      	movs	r3, #18
 8008368:	e7b0      	b.n	80082cc <_dtoa_r+0x26c>
 800836a:	2301      	movs	r3, #1
 800836c:	9308      	str	r3, [sp, #32]
 800836e:	e7f5      	b.n	800835c <_dtoa_r+0x2fc>
 8008370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008376:	e7b8      	b.n	80082ea <_dtoa_r+0x28a>
 8008378:	3101      	adds	r1, #1
 800837a:	6041      	str	r1, [r0, #4]
 800837c:	0052      	lsls	r2, r2, #1
 800837e:	e7b8      	b.n	80082f2 <_dtoa_r+0x292>
 8008380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008382:	9a01      	ldr	r2, [sp, #4]
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	2b0e      	cmp	r3, #14
 800838a:	f200 809d 	bhi.w	80084c8 <_dtoa_r+0x468>
 800838e:	2d00      	cmp	r5, #0
 8008390:	f000 809a 	beq.w	80084c8 <_dtoa_r+0x468>
 8008394:	9b00      	ldr	r3, [sp, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dd32      	ble.n	8008400 <_dtoa_r+0x3a0>
 800839a:	4ab7      	ldr	r2, [pc, #732]	; (8008678 <_dtoa_r+0x618>)
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083a8:	9b00      	ldr	r3, [sp, #0]
 80083aa:	05d8      	lsls	r0, r3, #23
 80083ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80083b0:	d516      	bpl.n	80083e0 <_dtoa_r+0x380>
 80083b2:	4bb2      	ldr	r3, [pc, #712]	; (800867c <_dtoa_r+0x61c>)
 80083b4:	ec51 0b19 	vmov	r0, r1, d9
 80083b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083bc:	f7f8 fa46 	bl	800084c <__aeabi_ddiv>
 80083c0:	f007 070f 	and.w	r7, r7, #15
 80083c4:	4682      	mov	sl, r0
 80083c6:	468b      	mov	fp, r1
 80083c8:	2503      	movs	r5, #3
 80083ca:	4eac      	ldr	r6, [pc, #688]	; (800867c <_dtoa_r+0x61c>)
 80083cc:	b957      	cbnz	r7, 80083e4 <_dtoa_r+0x384>
 80083ce:	4642      	mov	r2, r8
 80083d0:	464b      	mov	r3, r9
 80083d2:	4650      	mov	r0, sl
 80083d4:	4659      	mov	r1, fp
 80083d6:	f7f8 fa39 	bl	800084c <__aeabi_ddiv>
 80083da:	4682      	mov	sl, r0
 80083dc:	468b      	mov	fp, r1
 80083de:	e028      	b.n	8008432 <_dtoa_r+0x3d2>
 80083e0:	2502      	movs	r5, #2
 80083e2:	e7f2      	b.n	80083ca <_dtoa_r+0x36a>
 80083e4:	07f9      	lsls	r1, r7, #31
 80083e6:	d508      	bpl.n	80083fa <_dtoa_r+0x39a>
 80083e8:	4640      	mov	r0, r8
 80083ea:	4649      	mov	r1, r9
 80083ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083f0:	f7f8 f902 	bl	80005f8 <__aeabi_dmul>
 80083f4:	3501      	adds	r5, #1
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	107f      	asrs	r7, r7, #1
 80083fc:	3608      	adds	r6, #8
 80083fe:	e7e5      	b.n	80083cc <_dtoa_r+0x36c>
 8008400:	f000 809b 	beq.w	800853a <_dtoa_r+0x4da>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	4f9d      	ldr	r7, [pc, #628]	; (800867c <_dtoa_r+0x61c>)
 8008408:	425e      	negs	r6, r3
 800840a:	4b9b      	ldr	r3, [pc, #620]	; (8008678 <_dtoa_r+0x618>)
 800840c:	f006 020f 	and.w	r2, r6, #15
 8008410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	ec51 0b19 	vmov	r0, r1, d9
 800841c:	f7f8 f8ec 	bl	80005f8 <__aeabi_dmul>
 8008420:	1136      	asrs	r6, r6, #4
 8008422:	4682      	mov	sl, r0
 8008424:	468b      	mov	fp, r1
 8008426:	2300      	movs	r3, #0
 8008428:	2502      	movs	r5, #2
 800842a:	2e00      	cmp	r6, #0
 800842c:	d17a      	bne.n	8008524 <_dtoa_r+0x4c4>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1d3      	bne.n	80083da <_dtoa_r+0x37a>
 8008432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8082 	beq.w	800853e <_dtoa_r+0x4de>
 800843a:	4b91      	ldr	r3, [pc, #580]	; (8008680 <_dtoa_r+0x620>)
 800843c:	2200      	movs	r2, #0
 800843e:	4650      	mov	r0, sl
 8008440:	4659      	mov	r1, fp
 8008442:	f7f8 fb4b 	bl	8000adc <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	d079      	beq.n	800853e <_dtoa_r+0x4de>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d076      	beq.n	800853e <_dtoa_r+0x4de>
 8008450:	9b02      	ldr	r3, [sp, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	dd36      	ble.n	80084c4 <_dtoa_r+0x464>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	4650      	mov	r0, sl
 800845a:	4659      	mov	r1, fp
 800845c:	1e5f      	subs	r7, r3, #1
 800845e:	2200      	movs	r2, #0
 8008460:	4b88      	ldr	r3, [pc, #544]	; (8008684 <_dtoa_r+0x624>)
 8008462:	f7f8 f8c9 	bl	80005f8 <__aeabi_dmul>
 8008466:	9e02      	ldr	r6, [sp, #8]
 8008468:	4682      	mov	sl, r0
 800846a:	468b      	mov	fp, r1
 800846c:	3501      	adds	r5, #1
 800846e:	4628      	mov	r0, r5
 8008470:	f7f8 f858 	bl	8000524 <__aeabi_i2d>
 8008474:	4652      	mov	r2, sl
 8008476:	465b      	mov	r3, fp
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	4b82      	ldr	r3, [pc, #520]	; (8008688 <_dtoa_r+0x628>)
 800847e:	2200      	movs	r2, #0
 8008480:	f7f7 ff04 	bl	800028c <__adddf3>
 8008484:	46d0      	mov	r8, sl
 8008486:	46d9      	mov	r9, fp
 8008488:	4682      	mov	sl, r0
 800848a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800848e:	2e00      	cmp	r6, #0
 8008490:	d158      	bne.n	8008544 <_dtoa_r+0x4e4>
 8008492:	4b7e      	ldr	r3, [pc, #504]	; (800868c <_dtoa_r+0x62c>)
 8008494:	2200      	movs	r2, #0
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	f7f7 fef5 	bl	8000288 <__aeabi_dsub>
 800849e:	4652      	mov	r2, sl
 80084a0:	465b      	mov	r3, fp
 80084a2:	4680      	mov	r8, r0
 80084a4:	4689      	mov	r9, r1
 80084a6:	f7f8 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f040 8295 	bne.w	80089da <_dtoa_r+0x97a>
 80084b0:	4652      	mov	r2, sl
 80084b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084b6:	4640      	mov	r0, r8
 80084b8:	4649      	mov	r1, r9
 80084ba:	f7f8 fb0f 	bl	8000adc <__aeabi_dcmplt>
 80084be:	2800      	cmp	r0, #0
 80084c0:	f040 8289 	bne.w	80089d6 <_dtoa_r+0x976>
 80084c4:	ec5b ab19 	vmov	sl, fp, d9
 80084c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f2c0 8148 	blt.w	8008760 <_dtoa_r+0x700>
 80084d0:	9a00      	ldr	r2, [sp, #0]
 80084d2:	2a0e      	cmp	r2, #14
 80084d4:	f300 8144 	bgt.w	8008760 <_dtoa_r+0x700>
 80084d8:	4b67      	ldr	r3, [pc, #412]	; (8008678 <_dtoa_r+0x618>)
 80084da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f280 80d5 	bge.w	8008694 <_dtoa_r+0x634>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f300 80d1 	bgt.w	8008694 <_dtoa_r+0x634>
 80084f2:	f040 826f 	bne.w	80089d4 <_dtoa_r+0x974>
 80084f6:	4b65      	ldr	r3, [pc, #404]	; (800868c <_dtoa_r+0x62c>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 f87b 	bl	80005f8 <__aeabi_dmul>
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	f7f8 fafd 	bl	8000b04 <__aeabi_dcmpge>
 800850a:	9e03      	ldr	r6, [sp, #12]
 800850c:	4637      	mov	r7, r6
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8245 	bne.w	800899e <_dtoa_r+0x93e>
 8008514:	9d01      	ldr	r5, [sp, #4]
 8008516:	2331      	movs	r3, #49	; 0x31
 8008518:	f805 3b01 	strb.w	r3, [r5], #1
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	3301      	adds	r3, #1
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	e240      	b.n	80089a6 <_dtoa_r+0x946>
 8008524:	07f2      	lsls	r2, r6, #31
 8008526:	d505      	bpl.n	8008534 <_dtoa_r+0x4d4>
 8008528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852c:	f7f8 f864 	bl	80005f8 <__aeabi_dmul>
 8008530:	3501      	adds	r5, #1
 8008532:	2301      	movs	r3, #1
 8008534:	1076      	asrs	r6, r6, #1
 8008536:	3708      	adds	r7, #8
 8008538:	e777      	b.n	800842a <_dtoa_r+0x3ca>
 800853a:	2502      	movs	r5, #2
 800853c:	e779      	b.n	8008432 <_dtoa_r+0x3d2>
 800853e:	9f00      	ldr	r7, [sp, #0]
 8008540:	9e03      	ldr	r6, [sp, #12]
 8008542:	e794      	b.n	800846e <_dtoa_r+0x40e>
 8008544:	9901      	ldr	r1, [sp, #4]
 8008546:	4b4c      	ldr	r3, [pc, #304]	; (8008678 <_dtoa_r+0x618>)
 8008548:	4431      	add	r1, r6
 800854a:	910d      	str	r1, [sp, #52]	; 0x34
 800854c:	9908      	ldr	r1, [sp, #32]
 800854e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008556:	2900      	cmp	r1, #0
 8008558:	d043      	beq.n	80085e2 <_dtoa_r+0x582>
 800855a:	494d      	ldr	r1, [pc, #308]	; (8008690 <_dtoa_r+0x630>)
 800855c:	2000      	movs	r0, #0
 800855e:	f7f8 f975 	bl	800084c <__aeabi_ddiv>
 8008562:	4652      	mov	r2, sl
 8008564:	465b      	mov	r3, fp
 8008566:	f7f7 fe8f 	bl	8000288 <__aeabi_dsub>
 800856a:	9d01      	ldr	r5, [sp, #4]
 800856c:	4682      	mov	sl, r0
 800856e:	468b      	mov	fp, r1
 8008570:	4649      	mov	r1, r9
 8008572:	4640      	mov	r0, r8
 8008574:	f7f8 faf0 	bl	8000b58 <__aeabi_d2iz>
 8008578:	4606      	mov	r6, r0
 800857a:	f7f7 ffd3 	bl	8000524 <__aeabi_i2d>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4640      	mov	r0, r8
 8008584:	4649      	mov	r1, r9
 8008586:	f7f7 fe7f 	bl	8000288 <__aeabi_dsub>
 800858a:	3630      	adds	r6, #48	; 0x30
 800858c:	f805 6b01 	strb.w	r6, [r5], #1
 8008590:	4652      	mov	r2, sl
 8008592:	465b      	mov	r3, fp
 8008594:	4680      	mov	r8, r0
 8008596:	4689      	mov	r9, r1
 8008598:	f7f8 faa0 	bl	8000adc <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	d163      	bne.n	8008668 <_dtoa_r+0x608>
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	4936      	ldr	r1, [pc, #216]	; (8008680 <_dtoa_r+0x620>)
 80085a6:	2000      	movs	r0, #0
 80085a8:	f7f7 fe6e 	bl	8000288 <__aeabi_dsub>
 80085ac:	4652      	mov	r2, sl
 80085ae:	465b      	mov	r3, fp
 80085b0:	f7f8 fa94 	bl	8000adc <__aeabi_dcmplt>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f040 80b5 	bne.w	8008724 <_dtoa_r+0x6c4>
 80085ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085bc:	429d      	cmp	r5, r3
 80085be:	d081      	beq.n	80084c4 <_dtoa_r+0x464>
 80085c0:	4b30      	ldr	r3, [pc, #192]	; (8008684 <_dtoa_r+0x624>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	4650      	mov	r0, sl
 80085c6:	4659      	mov	r1, fp
 80085c8:	f7f8 f816 	bl	80005f8 <__aeabi_dmul>
 80085cc:	4b2d      	ldr	r3, [pc, #180]	; (8008684 <_dtoa_r+0x624>)
 80085ce:	4682      	mov	sl, r0
 80085d0:	468b      	mov	fp, r1
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	2200      	movs	r2, #0
 80085d8:	f7f8 f80e 	bl	80005f8 <__aeabi_dmul>
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	e7c6      	b.n	8008570 <_dtoa_r+0x510>
 80085e2:	4650      	mov	r0, sl
 80085e4:	4659      	mov	r1, fp
 80085e6:	f7f8 f807 	bl	80005f8 <__aeabi_dmul>
 80085ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ec:	9d01      	ldr	r5, [sp, #4]
 80085ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80085f0:	4682      	mov	sl, r0
 80085f2:	468b      	mov	fp, r1
 80085f4:	4649      	mov	r1, r9
 80085f6:	4640      	mov	r0, r8
 80085f8:	f7f8 faae 	bl	8000b58 <__aeabi_d2iz>
 80085fc:	4606      	mov	r6, r0
 80085fe:	f7f7 ff91 	bl	8000524 <__aeabi_i2d>
 8008602:	3630      	adds	r6, #48	; 0x30
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f7 fe3c 	bl	8000288 <__aeabi_dsub>
 8008610:	f805 6b01 	strb.w	r6, [r5], #1
 8008614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008616:	429d      	cmp	r5, r3
 8008618:	4680      	mov	r8, r0
 800861a:	4689      	mov	r9, r1
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	d124      	bne.n	800866c <_dtoa_r+0x60c>
 8008622:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <_dtoa_r+0x630>)
 8008624:	4650      	mov	r0, sl
 8008626:	4659      	mov	r1, fp
 8008628:	f7f7 fe30 	bl	800028c <__adddf3>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f8 fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8008638:	2800      	cmp	r0, #0
 800863a:	d173      	bne.n	8008724 <_dtoa_r+0x6c4>
 800863c:	4652      	mov	r2, sl
 800863e:	465b      	mov	r3, fp
 8008640:	4913      	ldr	r1, [pc, #76]	; (8008690 <_dtoa_r+0x630>)
 8008642:	2000      	movs	r0, #0
 8008644:	f7f7 fe20 	bl	8000288 <__aeabi_dsub>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f8 fa44 	bl	8000adc <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	f43f af35 	beq.w	80084c4 <_dtoa_r+0x464>
 800865a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800865c:	1e6b      	subs	r3, r5, #1
 800865e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008664:	2b30      	cmp	r3, #48	; 0x30
 8008666:	d0f8      	beq.n	800865a <_dtoa_r+0x5fa>
 8008668:	9700      	str	r7, [sp, #0]
 800866a:	e049      	b.n	8008700 <_dtoa_r+0x6a0>
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <_dtoa_r+0x624>)
 800866e:	f7f7 ffc3 	bl	80005f8 <__aeabi_dmul>
 8008672:	4680      	mov	r8, r0
 8008674:	4689      	mov	r9, r1
 8008676:	e7bd      	b.n	80085f4 <_dtoa_r+0x594>
 8008678:	0800a158 	.word	0x0800a158
 800867c:	0800a130 	.word	0x0800a130
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	40240000 	.word	0x40240000
 8008688:	401c0000 	.word	0x401c0000
 800868c:	40140000 	.word	0x40140000
 8008690:	3fe00000 	.word	0x3fe00000
 8008694:	9d01      	ldr	r5, [sp, #4]
 8008696:	4656      	mov	r6, sl
 8008698:	465f      	mov	r7, fp
 800869a:	4642      	mov	r2, r8
 800869c:	464b      	mov	r3, r9
 800869e:	4630      	mov	r0, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f8 f8d3 	bl	800084c <__aeabi_ddiv>
 80086a6:	f7f8 fa57 	bl	8000b58 <__aeabi_d2iz>
 80086aa:	4682      	mov	sl, r0
 80086ac:	f7f7 ff3a 	bl	8000524 <__aeabi_i2d>
 80086b0:	4642      	mov	r2, r8
 80086b2:	464b      	mov	r3, r9
 80086b4:	f7f7 ffa0 	bl	80005f8 <__aeabi_dmul>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086c4:	f7f7 fde0 	bl	8000288 <__aeabi_dsub>
 80086c8:	f805 6b01 	strb.w	r6, [r5], #1
 80086cc:	9e01      	ldr	r6, [sp, #4]
 80086ce:	9f03      	ldr	r7, [sp, #12]
 80086d0:	1bae      	subs	r6, r5, r6
 80086d2:	42b7      	cmp	r7, r6
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	d135      	bne.n	8008746 <_dtoa_r+0x6e6>
 80086da:	f7f7 fdd7 	bl	800028c <__adddf3>
 80086de:	4642      	mov	r2, r8
 80086e0:	464b      	mov	r3, r9
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	f7f8 fa17 	bl	8000b18 <__aeabi_dcmpgt>
 80086ea:	b9d0      	cbnz	r0, 8008722 <_dtoa_r+0x6c2>
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	f7f8 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80086f8:	b110      	cbz	r0, 8008700 <_dtoa_r+0x6a0>
 80086fa:	f01a 0f01 	tst.w	sl, #1
 80086fe:	d110      	bne.n	8008722 <_dtoa_r+0x6c2>
 8008700:	4620      	mov	r0, r4
 8008702:	ee18 1a10 	vmov	r1, s16
 8008706:	f000 fd13 	bl	8009130 <_Bfree>
 800870a:	2300      	movs	r3, #0
 800870c:	9800      	ldr	r0, [sp, #0]
 800870e:	702b      	strb	r3, [r5, #0]
 8008710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008712:	3001      	adds	r0, #1
 8008714:	6018      	str	r0, [r3, #0]
 8008716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008718:	2b00      	cmp	r3, #0
 800871a:	f43f acf1 	beq.w	8008100 <_dtoa_r+0xa0>
 800871e:	601d      	str	r5, [r3, #0]
 8008720:	e4ee      	b.n	8008100 <_dtoa_r+0xa0>
 8008722:	9f00      	ldr	r7, [sp, #0]
 8008724:	462b      	mov	r3, r5
 8008726:	461d      	mov	r5, r3
 8008728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800872c:	2a39      	cmp	r2, #57	; 0x39
 800872e:	d106      	bne.n	800873e <_dtoa_r+0x6de>
 8008730:	9a01      	ldr	r2, [sp, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d1f7      	bne.n	8008726 <_dtoa_r+0x6c6>
 8008736:	9901      	ldr	r1, [sp, #4]
 8008738:	2230      	movs	r2, #48	; 0x30
 800873a:	3701      	adds	r7, #1
 800873c:	700a      	strb	r2, [r1, #0]
 800873e:	781a      	ldrb	r2, [r3, #0]
 8008740:	3201      	adds	r2, #1
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e790      	b.n	8008668 <_dtoa_r+0x608>
 8008746:	4ba6      	ldr	r3, [pc, #664]	; (80089e0 <_dtoa_r+0x980>)
 8008748:	2200      	movs	r2, #0
 800874a:	f7f7 ff55 	bl	80005f8 <__aeabi_dmul>
 800874e:	2200      	movs	r2, #0
 8008750:	2300      	movs	r3, #0
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	f7f8 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800875a:	2800      	cmp	r0, #0
 800875c:	d09d      	beq.n	800869a <_dtoa_r+0x63a>
 800875e:	e7cf      	b.n	8008700 <_dtoa_r+0x6a0>
 8008760:	9a08      	ldr	r2, [sp, #32]
 8008762:	2a00      	cmp	r2, #0
 8008764:	f000 80d7 	beq.w	8008916 <_dtoa_r+0x8b6>
 8008768:	9a06      	ldr	r2, [sp, #24]
 800876a:	2a01      	cmp	r2, #1
 800876c:	f300 80ba 	bgt.w	80088e4 <_dtoa_r+0x884>
 8008770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008772:	2a00      	cmp	r2, #0
 8008774:	f000 80b2 	beq.w	80088dc <_dtoa_r+0x87c>
 8008778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800877c:	9e07      	ldr	r6, [sp, #28]
 800877e:	9d04      	ldr	r5, [sp, #16]
 8008780:	9a04      	ldr	r2, [sp, #16]
 8008782:	441a      	add	r2, r3
 8008784:	9204      	str	r2, [sp, #16]
 8008786:	9a05      	ldr	r2, [sp, #20]
 8008788:	2101      	movs	r1, #1
 800878a:	441a      	add	r2, r3
 800878c:	4620      	mov	r0, r4
 800878e:	9205      	str	r2, [sp, #20]
 8008790:	f000 fd86 	bl	80092a0 <__i2b>
 8008794:	4607      	mov	r7, r0
 8008796:	2d00      	cmp	r5, #0
 8008798:	dd0c      	ble.n	80087b4 <_dtoa_r+0x754>
 800879a:	9b05      	ldr	r3, [sp, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	dd09      	ble.n	80087b4 <_dtoa_r+0x754>
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	9a04      	ldr	r2, [sp, #16]
 80087a4:	bfa8      	it	ge
 80087a6:	462b      	movge	r3, r5
 80087a8:	1ad2      	subs	r2, r2, r3
 80087aa:	9204      	str	r2, [sp, #16]
 80087ac:	9a05      	ldr	r2, [sp, #20]
 80087ae:	1aed      	subs	r5, r5, r3
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	b31b      	cbz	r3, 8008800 <_dtoa_r+0x7a0>
 80087b8:	9b08      	ldr	r3, [sp, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80af 	beq.w	800891e <_dtoa_r+0x8be>
 80087c0:	2e00      	cmp	r6, #0
 80087c2:	dd13      	ble.n	80087ec <_dtoa_r+0x78c>
 80087c4:	4639      	mov	r1, r7
 80087c6:	4632      	mov	r2, r6
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 fe29 	bl	8009420 <__pow5mult>
 80087ce:	ee18 2a10 	vmov	r2, s16
 80087d2:	4601      	mov	r1, r0
 80087d4:	4607      	mov	r7, r0
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 fd78 	bl	80092cc <__multiply>
 80087dc:	ee18 1a10 	vmov	r1, s16
 80087e0:	4680      	mov	r8, r0
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fca4 	bl	8009130 <_Bfree>
 80087e8:	ee08 8a10 	vmov	s16, r8
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	1b9a      	subs	r2, r3, r6
 80087f0:	d006      	beq.n	8008800 <_dtoa_r+0x7a0>
 80087f2:	ee18 1a10 	vmov	r1, s16
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 fe12 	bl	8009420 <__pow5mult>
 80087fc:	ee08 0a10 	vmov	s16, r0
 8008800:	2101      	movs	r1, #1
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fd4c 	bl	80092a0 <__i2b>
 8008808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	4606      	mov	r6, r0
 800880e:	f340 8088 	ble.w	8008922 <_dtoa_r+0x8c2>
 8008812:	461a      	mov	r2, r3
 8008814:	4601      	mov	r1, r0
 8008816:	4620      	mov	r0, r4
 8008818:	f000 fe02 	bl	8009420 <__pow5mult>
 800881c:	9b06      	ldr	r3, [sp, #24]
 800881e:	2b01      	cmp	r3, #1
 8008820:	4606      	mov	r6, r0
 8008822:	f340 8081 	ble.w	8008928 <_dtoa_r+0x8c8>
 8008826:	f04f 0800 	mov.w	r8, #0
 800882a:	6933      	ldr	r3, [r6, #16]
 800882c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008830:	6918      	ldr	r0, [r3, #16]
 8008832:	f000 fce5 	bl	8009200 <__hi0bits>
 8008836:	f1c0 0020 	rsb	r0, r0, #32
 800883a:	9b05      	ldr	r3, [sp, #20]
 800883c:	4418      	add	r0, r3
 800883e:	f010 001f 	ands.w	r0, r0, #31
 8008842:	f000 8092 	beq.w	800896a <_dtoa_r+0x90a>
 8008846:	f1c0 0320 	rsb	r3, r0, #32
 800884a:	2b04      	cmp	r3, #4
 800884c:	f340 808a 	ble.w	8008964 <_dtoa_r+0x904>
 8008850:	f1c0 001c 	rsb	r0, r0, #28
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	4403      	add	r3, r0
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	9b05      	ldr	r3, [sp, #20]
 800885c:	4403      	add	r3, r0
 800885e:	4405      	add	r5, r0
 8008860:	9305      	str	r3, [sp, #20]
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	dd07      	ble.n	8008878 <_dtoa_r+0x818>
 8008868:	ee18 1a10 	vmov	r1, s16
 800886c:	461a      	mov	r2, r3
 800886e:	4620      	mov	r0, r4
 8008870:	f000 fe30 	bl	80094d4 <__lshift>
 8008874:	ee08 0a10 	vmov	s16, r0
 8008878:	9b05      	ldr	r3, [sp, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dd05      	ble.n	800888a <_dtoa_r+0x82a>
 800887e:	4631      	mov	r1, r6
 8008880:	461a      	mov	r2, r3
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fe26 	bl	80094d4 <__lshift>
 8008888:	4606      	mov	r6, r0
 800888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d06e      	beq.n	800896e <_dtoa_r+0x90e>
 8008890:	ee18 0a10 	vmov	r0, s16
 8008894:	4631      	mov	r1, r6
 8008896:	f000 fe8d 	bl	80095b4 <__mcmp>
 800889a:	2800      	cmp	r0, #0
 800889c:	da67      	bge.n	800896e <_dtoa_r+0x90e>
 800889e:	9b00      	ldr	r3, [sp, #0]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	ee18 1a10 	vmov	r1, s16
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	220a      	movs	r2, #10
 80088aa:	2300      	movs	r3, #0
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fc61 	bl	8009174 <__multadd>
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	ee08 0a10 	vmov	s16, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 81b1 	beq.w	8008c20 <_dtoa_r+0xbc0>
 80088be:	2300      	movs	r3, #0
 80088c0:	4639      	mov	r1, r7
 80088c2:	220a      	movs	r2, #10
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 fc55 	bl	8009174 <__multadd>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	4607      	mov	r7, r0
 80088d0:	f300 808e 	bgt.w	80089f0 <_dtoa_r+0x990>
 80088d4:	9b06      	ldr	r3, [sp, #24]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	dc51      	bgt.n	800897e <_dtoa_r+0x91e>
 80088da:	e089      	b.n	80089f0 <_dtoa_r+0x990>
 80088dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088e2:	e74b      	b.n	800877c <_dtoa_r+0x71c>
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	1e5e      	subs	r6, r3, #1
 80088e8:	9b07      	ldr	r3, [sp, #28]
 80088ea:	42b3      	cmp	r3, r6
 80088ec:	bfbf      	itttt	lt
 80088ee:	9b07      	ldrlt	r3, [sp, #28]
 80088f0:	9607      	strlt	r6, [sp, #28]
 80088f2:	1af2      	sublt	r2, r6, r3
 80088f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088f6:	bfb6      	itet	lt
 80088f8:	189b      	addlt	r3, r3, r2
 80088fa:	1b9e      	subge	r6, r3, r6
 80088fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	bfb8      	it	lt
 8008902:	2600      	movlt	r6, #0
 8008904:	2b00      	cmp	r3, #0
 8008906:	bfb7      	itett	lt
 8008908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800890c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008910:	1a9d      	sublt	r5, r3, r2
 8008912:	2300      	movlt	r3, #0
 8008914:	e734      	b.n	8008780 <_dtoa_r+0x720>
 8008916:	9e07      	ldr	r6, [sp, #28]
 8008918:	9d04      	ldr	r5, [sp, #16]
 800891a:	9f08      	ldr	r7, [sp, #32]
 800891c:	e73b      	b.n	8008796 <_dtoa_r+0x736>
 800891e:	9a07      	ldr	r2, [sp, #28]
 8008920:	e767      	b.n	80087f2 <_dtoa_r+0x792>
 8008922:	9b06      	ldr	r3, [sp, #24]
 8008924:	2b01      	cmp	r3, #1
 8008926:	dc18      	bgt.n	800895a <_dtoa_r+0x8fa>
 8008928:	f1ba 0f00 	cmp.w	sl, #0
 800892c:	d115      	bne.n	800895a <_dtoa_r+0x8fa>
 800892e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008932:	b993      	cbnz	r3, 800895a <_dtoa_r+0x8fa>
 8008934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008938:	0d1b      	lsrs	r3, r3, #20
 800893a:	051b      	lsls	r3, r3, #20
 800893c:	b183      	cbz	r3, 8008960 <_dtoa_r+0x900>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	3301      	adds	r3, #1
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	9b05      	ldr	r3, [sp, #20]
 8008946:	3301      	adds	r3, #1
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	f04f 0801 	mov.w	r8, #1
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	f47f af6a 	bne.w	800882a <_dtoa_r+0x7ca>
 8008956:	2001      	movs	r0, #1
 8008958:	e76f      	b.n	800883a <_dtoa_r+0x7da>
 800895a:	f04f 0800 	mov.w	r8, #0
 800895e:	e7f6      	b.n	800894e <_dtoa_r+0x8ee>
 8008960:	4698      	mov	r8, r3
 8008962:	e7f4      	b.n	800894e <_dtoa_r+0x8ee>
 8008964:	f43f af7d 	beq.w	8008862 <_dtoa_r+0x802>
 8008968:	4618      	mov	r0, r3
 800896a:	301c      	adds	r0, #28
 800896c:	e772      	b.n	8008854 <_dtoa_r+0x7f4>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc37      	bgt.n	80089e4 <_dtoa_r+0x984>
 8008974:	9b06      	ldr	r3, [sp, #24]
 8008976:	2b02      	cmp	r3, #2
 8008978:	dd34      	ble.n	80089e4 <_dtoa_r+0x984>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	9302      	str	r3, [sp, #8]
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	b96b      	cbnz	r3, 800899e <_dtoa_r+0x93e>
 8008982:	4631      	mov	r1, r6
 8008984:	2205      	movs	r2, #5
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fbf4 	bl	8009174 <__multadd>
 800898c:	4601      	mov	r1, r0
 800898e:	4606      	mov	r6, r0
 8008990:	ee18 0a10 	vmov	r0, s16
 8008994:	f000 fe0e 	bl	80095b4 <__mcmp>
 8008998:	2800      	cmp	r0, #0
 800899a:	f73f adbb 	bgt.w	8008514 <_dtoa_r+0x4b4>
 800899e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a0:	9d01      	ldr	r5, [sp, #4]
 80089a2:	43db      	mvns	r3, r3
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	f04f 0800 	mov.w	r8, #0
 80089aa:	4631      	mov	r1, r6
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fbbf 	bl	8009130 <_Bfree>
 80089b2:	2f00      	cmp	r7, #0
 80089b4:	f43f aea4 	beq.w	8008700 <_dtoa_r+0x6a0>
 80089b8:	f1b8 0f00 	cmp.w	r8, #0
 80089bc:	d005      	beq.n	80089ca <_dtoa_r+0x96a>
 80089be:	45b8      	cmp	r8, r7
 80089c0:	d003      	beq.n	80089ca <_dtoa_r+0x96a>
 80089c2:	4641      	mov	r1, r8
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fbb3 	bl	8009130 <_Bfree>
 80089ca:	4639      	mov	r1, r7
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 fbaf 	bl	8009130 <_Bfree>
 80089d2:	e695      	b.n	8008700 <_dtoa_r+0x6a0>
 80089d4:	2600      	movs	r6, #0
 80089d6:	4637      	mov	r7, r6
 80089d8:	e7e1      	b.n	800899e <_dtoa_r+0x93e>
 80089da:	9700      	str	r7, [sp, #0]
 80089dc:	4637      	mov	r7, r6
 80089de:	e599      	b.n	8008514 <_dtoa_r+0x4b4>
 80089e0:	40240000 	.word	0x40240000
 80089e4:	9b08      	ldr	r3, [sp, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 80ca 	beq.w	8008b80 <_dtoa_r+0xb20>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	dd05      	ble.n	8008a00 <_dtoa_r+0x9a0>
 80089f4:	4639      	mov	r1, r7
 80089f6:	462a      	mov	r2, r5
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fd6b 	bl	80094d4 <__lshift>
 80089fe:	4607      	mov	r7, r0
 8008a00:	f1b8 0f00 	cmp.w	r8, #0
 8008a04:	d05b      	beq.n	8008abe <_dtoa_r+0xa5e>
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fb51 	bl	80090b0 <_Balloc>
 8008a0e:	4605      	mov	r5, r0
 8008a10:	b928      	cbnz	r0, 8008a1e <_dtoa_r+0x9be>
 8008a12:	4b87      	ldr	r3, [pc, #540]	; (8008c30 <_dtoa_r+0xbd0>)
 8008a14:	4602      	mov	r2, r0
 8008a16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a1a:	f7ff bb3b 	b.w	8008094 <_dtoa_r+0x34>
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	3202      	adds	r2, #2
 8008a22:	0092      	lsls	r2, r2, #2
 8008a24:	f107 010c 	add.w	r1, r7, #12
 8008a28:	300c      	adds	r0, #12
 8008a2a:	f000 fb33 	bl	8009094 <memcpy>
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4629      	mov	r1, r5
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 fd4e 	bl	80094d4 <__lshift>
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	f103 0901 	add.w	r9, r3, #1
 8008a3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a42:	4413      	add	r3, r2
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	f00a 0301 	and.w	r3, sl, #1
 8008a4a:	46b8      	mov	r8, r7
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	4607      	mov	r7, r0
 8008a50:	4631      	mov	r1, r6
 8008a52:	ee18 0a10 	vmov	r0, s16
 8008a56:	f7ff fa77 	bl	8007f48 <quorem>
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	9002      	str	r0, [sp, #8]
 8008a5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a62:	ee18 0a10 	vmov	r0, s16
 8008a66:	f000 fda5 	bl	80095b4 <__mcmp>
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	9003      	str	r0, [sp, #12]
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fdbb 	bl	80095ec <__mdiff>
 8008a76:	68c2      	ldr	r2, [r0, #12]
 8008a78:	f109 3bff 	add.w	fp, r9, #4294967295
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	bb02      	cbnz	r2, 8008ac2 <_dtoa_r+0xa62>
 8008a80:	4601      	mov	r1, r0
 8008a82:	ee18 0a10 	vmov	r0, s16
 8008a86:	f000 fd95 	bl	80095b4 <__mcmp>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4620      	mov	r0, r4
 8008a90:	9207      	str	r2, [sp, #28]
 8008a92:	f000 fb4d 	bl	8009130 <_Bfree>
 8008a96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a9a:	ea43 0102 	orr.w	r1, r3, r2
 8008a9e:	9b04      	ldr	r3, [sp, #16]
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	464d      	mov	r5, r9
 8008aa4:	d10f      	bne.n	8008ac6 <_dtoa_r+0xa66>
 8008aa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008aaa:	d02a      	beq.n	8008b02 <_dtoa_r+0xaa2>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd02      	ble.n	8008ab8 <_dtoa_r+0xa58>
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ab8:	f88b a000 	strb.w	sl, [fp]
 8008abc:	e775      	b.n	80089aa <_dtoa_r+0x94a>
 8008abe:	4638      	mov	r0, r7
 8008ac0:	e7ba      	b.n	8008a38 <_dtoa_r+0x9d8>
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	e7e2      	b.n	8008a8c <_dtoa_r+0xa2c>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db04      	blt.n	8008ad6 <_dtoa_r+0xa76>
 8008acc:	9906      	ldr	r1, [sp, #24]
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	9904      	ldr	r1, [sp, #16]
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	d122      	bne.n	8008b1c <_dtoa_r+0xabc>
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	ddee      	ble.n	8008ab8 <_dtoa_r+0xa58>
 8008ada:	ee18 1a10 	vmov	r1, s16
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fcf7 	bl	80094d4 <__lshift>
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	ee08 0a10 	vmov	s16, r0
 8008aec:	f000 fd62 	bl	80095b4 <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	dc03      	bgt.n	8008afc <_dtoa_r+0xa9c>
 8008af4:	d1e0      	bne.n	8008ab8 <_dtoa_r+0xa58>
 8008af6:	f01a 0f01 	tst.w	sl, #1
 8008afa:	d0dd      	beq.n	8008ab8 <_dtoa_r+0xa58>
 8008afc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b00:	d1d7      	bne.n	8008ab2 <_dtoa_r+0xa52>
 8008b02:	2339      	movs	r3, #57	; 0x39
 8008b04:	f88b 3000 	strb.w	r3, [fp]
 8008b08:	462b      	mov	r3, r5
 8008b0a:	461d      	mov	r5, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b12:	2a39      	cmp	r2, #57	; 0x39
 8008b14:	d071      	beq.n	8008bfa <_dtoa_r+0xb9a>
 8008b16:	3201      	adds	r2, #1
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	e746      	b.n	80089aa <_dtoa_r+0x94a>
 8008b1c:	2a00      	cmp	r2, #0
 8008b1e:	dd07      	ble.n	8008b30 <_dtoa_r+0xad0>
 8008b20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b24:	d0ed      	beq.n	8008b02 <_dtoa_r+0xaa2>
 8008b26:	f10a 0301 	add.w	r3, sl, #1
 8008b2a:	f88b 3000 	strb.w	r3, [fp]
 8008b2e:	e73c      	b.n	80089aa <_dtoa_r+0x94a>
 8008b30:	9b05      	ldr	r3, [sp, #20]
 8008b32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b36:	4599      	cmp	r9, r3
 8008b38:	d047      	beq.n	8008bca <_dtoa_r+0xb6a>
 8008b3a:	ee18 1a10 	vmov	r1, s16
 8008b3e:	2300      	movs	r3, #0
 8008b40:	220a      	movs	r2, #10
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 fb16 	bl	8009174 <__multadd>
 8008b48:	45b8      	cmp	r8, r7
 8008b4a:	ee08 0a10 	vmov	s16, r0
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	f04f 020a 	mov.w	r2, #10
 8008b56:	4641      	mov	r1, r8
 8008b58:	4620      	mov	r0, r4
 8008b5a:	d106      	bne.n	8008b6a <_dtoa_r+0xb0a>
 8008b5c:	f000 fb0a 	bl	8009174 <__multadd>
 8008b60:	4680      	mov	r8, r0
 8008b62:	4607      	mov	r7, r0
 8008b64:	f109 0901 	add.w	r9, r9, #1
 8008b68:	e772      	b.n	8008a50 <_dtoa_r+0x9f0>
 8008b6a:	f000 fb03 	bl	8009174 <__multadd>
 8008b6e:	4639      	mov	r1, r7
 8008b70:	4680      	mov	r8, r0
 8008b72:	2300      	movs	r3, #0
 8008b74:	220a      	movs	r2, #10
 8008b76:	4620      	mov	r0, r4
 8008b78:	f000 fafc 	bl	8009174 <__multadd>
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	e7f1      	b.n	8008b64 <_dtoa_r+0xb04>
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	9302      	str	r3, [sp, #8]
 8008b84:	9d01      	ldr	r5, [sp, #4]
 8008b86:	ee18 0a10 	vmov	r0, s16
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	f7ff f9dc 	bl	8007f48 <quorem>
 8008b90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	f805 ab01 	strb.w	sl, [r5], #1
 8008b9a:	1aea      	subs	r2, r5, r3
 8008b9c:	9b02      	ldr	r3, [sp, #8]
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	dd09      	ble.n	8008bb6 <_dtoa_r+0xb56>
 8008ba2:	ee18 1a10 	vmov	r1, s16
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	220a      	movs	r2, #10
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fae2 	bl	8009174 <__multadd>
 8008bb0:	ee08 0a10 	vmov	s16, r0
 8008bb4:	e7e7      	b.n	8008b86 <_dtoa_r+0xb26>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bfc8      	it	gt
 8008bbc:	461d      	movgt	r5, r3
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	bfd8      	it	le
 8008bc2:	2501      	movle	r5, #1
 8008bc4:	441d      	add	r5, r3
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	ee18 1a10 	vmov	r1, s16
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fc7f 	bl	80094d4 <__lshift>
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	ee08 0a10 	vmov	s16, r0
 8008bdc:	f000 fcea 	bl	80095b4 <__mcmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	dc91      	bgt.n	8008b08 <_dtoa_r+0xaa8>
 8008be4:	d102      	bne.n	8008bec <_dtoa_r+0xb8c>
 8008be6:	f01a 0f01 	tst.w	sl, #1
 8008bea:	d18d      	bne.n	8008b08 <_dtoa_r+0xaa8>
 8008bec:	462b      	mov	r3, r5
 8008bee:	461d      	mov	r5, r3
 8008bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bf4:	2a30      	cmp	r2, #48	; 0x30
 8008bf6:	d0fa      	beq.n	8008bee <_dtoa_r+0xb8e>
 8008bf8:	e6d7      	b.n	80089aa <_dtoa_r+0x94a>
 8008bfa:	9a01      	ldr	r2, [sp, #4]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d184      	bne.n	8008b0a <_dtoa_r+0xaaa>
 8008c00:	9b00      	ldr	r3, [sp, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	2331      	movs	r3, #49	; 0x31
 8008c08:	7013      	strb	r3, [r2, #0]
 8008c0a:	e6ce      	b.n	80089aa <_dtoa_r+0x94a>
 8008c0c:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <_dtoa_r+0xbd4>)
 8008c0e:	f7ff ba95 	b.w	800813c <_dtoa_r+0xdc>
 8008c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f47f aa6e 	bne.w	80080f6 <_dtoa_r+0x96>
 8008c1a:	4b07      	ldr	r3, [pc, #28]	; (8008c38 <_dtoa_r+0xbd8>)
 8008c1c:	f7ff ba8e 	b.w	800813c <_dtoa_r+0xdc>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dcae      	bgt.n	8008b84 <_dtoa_r+0xb24>
 8008c26:	9b06      	ldr	r3, [sp, #24]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	f73f aea8 	bgt.w	800897e <_dtoa_r+0x91e>
 8008c2e:	e7a9      	b.n	8008b84 <_dtoa_r+0xb24>
 8008c30:	0800a063 	.word	0x0800a063
 8008c34:	08009fc0 	.word	0x08009fc0
 8008c38:	08009fe4 	.word	0x08009fe4

08008c3c <__sflush_r>:
 8008c3c:	898a      	ldrh	r2, [r1, #12]
 8008c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c42:	4605      	mov	r5, r0
 8008c44:	0710      	lsls	r0, r2, #28
 8008c46:	460c      	mov	r4, r1
 8008c48:	d458      	bmi.n	8008cfc <__sflush_r+0xc0>
 8008c4a:	684b      	ldr	r3, [r1, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dc05      	bgt.n	8008c5c <__sflush_r+0x20>
 8008c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dc02      	bgt.n	8008c5c <__sflush_r+0x20>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c5e:	2e00      	cmp	r6, #0
 8008c60:	d0f9      	beq.n	8008c56 <__sflush_r+0x1a>
 8008c62:	2300      	movs	r3, #0
 8008c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c68:	682f      	ldr	r7, [r5, #0]
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	d032      	beq.n	8008cd4 <__sflush_r+0x98>
 8008c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	075a      	lsls	r2, r3, #29
 8008c74:	d505      	bpl.n	8008c82 <__sflush_r+0x46>
 8008c76:	6863      	ldr	r3, [r4, #4]
 8008c78:	1ac0      	subs	r0, r0, r3
 8008c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c7c:	b10b      	cbz	r3, 8008c82 <__sflush_r+0x46>
 8008c7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c80:	1ac0      	subs	r0, r0, r3
 8008c82:	2300      	movs	r3, #0
 8008c84:	4602      	mov	r2, r0
 8008c86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c88:	6a21      	ldr	r1, [r4, #32]
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b0      	blx	r6
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	d106      	bne.n	8008ca2 <__sflush_r+0x66>
 8008c94:	6829      	ldr	r1, [r5, #0]
 8008c96:	291d      	cmp	r1, #29
 8008c98:	d82c      	bhi.n	8008cf4 <__sflush_r+0xb8>
 8008c9a:	4a2a      	ldr	r2, [pc, #168]	; (8008d44 <__sflush_r+0x108>)
 8008c9c:	40ca      	lsrs	r2, r1
 8008c9e:	07d6      	lsls	r6, r2, #31
 8008ca0:	d528      	bpl.n	8008cf4 <__sflush_r+0xb8>
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	6062      	str	r2, [r4, #4]
 8008ca6:	04d9      	lsls	r1, r3, #19
 8008ca8:	6922      	ldr	r2, [r4, #16]
 8008caa:	6022      	str	r2, [r4, #0]
 8008cac:	d504      	bpl.n	8008cb8 <__sflush_r+0x7c>
 8008cae:	1c42      	adds	r2, r0, #1
 8008cb0:	d101      	bne.n	8008cb6 <__sflush_r+0x7a>
 8008cb2:	682b      	ldr	r3, [r5, #0]
 8008cb4:	b903      	cbnz	r3, 8008cb8 <__sflush_r+0x7c>
 8008cb6:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cba:	602f      	str	r7, [r5, #0]
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	d0ca      	beq.n	8008c56 <__sflush_r+0x1a>
 8008cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	d002      	beq.n	8008cce <__sflush_r+0x92>
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f000 fd8b 	bl	80097e4 <_free_r>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	6360      	str	r0, [r4, #52]	; 0x34
 8008cd2:	e7c1      	b.n	8008c58 <__sflush_r+0x1c>
 8008cd4:	6a21      	ldr	r1, [r4, #32]
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4628      	mov	r0, r5
 8008cda:	47b0      	blx	r6
 8008cdc:	1c41      	adds	r1, r0, #1
 8008cde:	d1c7      	bne.n	8008c70 <__sflush_r+0x34>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0c4      	beq.n	8008c70 <__sflush_r+0x34>
 8008ce6:	2b1d      	cmp	r3, #29
 8008ce8:	d001      	beq.n	8008cee <__sflush_r+0xb2>
 8008cea:	2b16      	cmp	r3, #22
 8008cec:	d101      	bne.n	8008cf2 <__sflush_r+0xb6>
 8008cee:	602f      	str	r7, [r5, #0]
 8008cf0:	e7b1      	b.n	8008c56 <__sflush_r+0x1a>
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	e7ad      	b.n	8008c58 <__sflush_r+0x1c>
 8008cfc:	690f      	ldr	r7, [r1, #16]
 8008cfe:	2f00      	cmp	r7, #0
 8008d00:	d0a9      	beq.n	8008c56 <__sflush_r+0x1a>
 8008d02:	0793      	lsls	r3, r2, #30
 8008d04:	680e      	ldr	r6, [r1, #0]
 8008d06:	bf08      	it	eq
 8008d08:	694b      	ldreq	r3, [r1, #20]
 8008d0a:	600f      	str	r7, [r1, #0]
 8008d0c:	bf18      	it	ne
 8008d0e:	2300      	movne	r3, #0
 8008d10:	eba6 0807 	sub.w	r8, r6, r7
 8008d14:	608b      	str	r3, [r1, #8]
 8008d16:	f1b8 0f00 	cmp.w	r8, #0
 8008d1a:	dd9c      	ble.n	8008c56 <__sflush_r+0x1a>
 8008d1c:	6a21      	ldr	r1, [r4, #32]
 8008d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d20:	4643      	mov	r3, r8
 8008d22:	463a      	mov	r2, r7
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b0      	blx	r6
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	dc06      	bgt.n	8008d3a <__sflush_r+0xfe>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	e78e      	b.n	8008c58 <__sflush_r+0x1c>
 8008d3a:	4407      	add	r7, r0
 8008d3c:	eba8 0800 	sub.w	r8, r8, r0
 8008d40:	e7e9      	b.n	8008d16 <__sflush_r+0xda>
 8008d42:	bf00      	nop
 8008d44:	20400001 	.word	0x20400001

08008d48 <_fflush_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	690b      	ldr	r3, [r1, #16]
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	b913      	cbnz	r3, 8008d58 <_fflush_r+0x10>
 8008d52:	2500      	movs	r5, #0
 8008d54:	4628      	mov	r0, r5
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	b118      	cbz	r0, 8008d62 <_fflush_r+0x1a>
 8008d5a:	6983      	ldr	r3, [r0, #24]
 8008d5c:	b90b      	cbnz	r3, 8008d62 <_fflush_r+0x1a>
 8008d5e:	f000 f887 	bl	8008e70 <__sinit>
 8008d62:	4b14      	ldr	r3, [pc, #80]	; (8008db4 <_fflush_r+0x6c>)
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d11b      	bne.n	8008da0 <_fflush_r+0x58>
 8008d68:	686c      	ldr	r4, [r5, #4]
 8008d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0ef      	beq.n	8008d52 <_fflush_r+0xa>
 8008d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d74:	07d0      	lsls	r0, r2, #31
 8008d76:	d404      	bmi.n	8008d82 <_fflush_r+0x3a>
 8008d78:	0599      	lsls	r1, r3, #22
 8008d7a:	d402      	bmi.n	8008d82 <_fflush_r+0x3a>
 8008d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d7e:	f000 f91a 	bl	8008fb6 <__retarget_lock_acquire_recursive>
 8008d82:	4628      	mov	r0, r5
 8008d84:	4621      	mov	r1, r4
 8008d86:	f7ff ff59 	bl	8008c3c <__sflush_r>
 8008d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d8c:	07da      	lsls	r2, r3, #31
 8008d8e:	4605      	mov	r5, r0
 8008d90:	d4e0      	bmi.n	8008d54 <_fflush_r+0xc>
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	059b      	lsls	r3, r3, #22
 8008d96:	d4dd      	bmi.n	8008d54 <_fflush_r+0xc>
 8008d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d9a:	f000 f90d 	bl	8008fb8 <__retarget_lock_release_recursive>
 8008d9e:	e7d9      	b.n	8008d54 <_fflush_r+0xc>
 8008da0:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <_fflush_r+0x70>)
 8008da2:	429c      	cmp	r4, r3
 8008da4:	d101      	bne.n	8008daa <_fflush_r+0x62>
 8008da6:	68ac      	ldr	r4, [r5, #8]
 8008da8:	e7df      	b.n	8008d6a <_fflush_r+0x22>
 8008daa:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <_fflush_r+0x74>)
 8008dac:	429c      	cmp	r4, r3
 8008dae:	bf08      	it	eq
 8008db0:	68ec      	ldreq	r4, [r5, #12]
 8008db2:	e7da      	b.n	8008d6a <_fflush_r+0x22>
 8008db4:	0800a094 	.word	0x0800a094
 8008db8:	0800a0b4 	.word	0x0800a0b4
 8008dbc:	0800a074 	.word	0x0800a074

08008dc0 <std>:
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dce:	6083      	str	r3, [r0, #8]
 8008dd0:	8181      	strh	r1, [r0, #12]
 8008dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8008dd4:	81c2      	strh	r2, [r0, #14]
 8008dd6:	6183      	str	r3, [r0, #24]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	2208      	movs	r2, #8
 8008ddc:	305c      	adds	r0, #92	; 0x5c
 8008dde:	f7fe fa9b 	bl	8007318 <memset>
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <std+0x38>)
 8008de4:	6263      	str	r3, [r4, #36]	; 0x24
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <std+0x3c>)
 8008de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <std+0x40>)
 8008dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <std+0x44>)
 8008df0:	6224      	str	r4, [r4, #32]
 8008df2:	6323      	str	r3, [r4, #48]	; 0x30
 8008df4:	bd10      	pop	{r4, pc}
 8008df6:	bf00      	nop
 8008df8:	08009c79 	.word	0x08009c79
 8008dfc:	08009c9b 	.word	0x08009c9b
 8008e00:	08009cd3 	.word	0x08009cd3
 8008e04:	08009cf7 	.word	0x08009cf7

08008e08 <_cleanup_r>:
 8008e08:	4901      	ldr	r1, [pc, #4]	; (8008e10 <_cleanup_r+0x8>)
 8008e0a:	f000 b8af 	b.w	8008f6c <_fwalk_reent>
 8008e0e:	bf00      	nop
 8008e10:	08008d49 	.word	0x08008d49

08008e14 <__sfmoreglue>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	2268      	movs	r2, #104	; 0x68
 8008e18:	1e4d      	subs	r5, r1, #1
 8008e1a:	4355      	muls	r5, r2
 8008e1c:	460e      	mov	r6, r1
 8008e1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e22:	f000 fd4b 	bl	80098bc <_malloc_r>
 8008e26:	4604      	mov	r4, r0
 8008e28:	b140      	cbz	r0, 8008e3c <__sfmoreglue+0x28>
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e30:	300c      	adds	r0, #12
 8008e32:	60a0      	str	r0, [r4, #8]
 8008e34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e38:	f7fe fa6e 	bl	8007318 <memset>
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}

08008e40 <__sfp_lock_acquire>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__sfp_lock_acquire+0x8>)
 8008e42:	f000 b8b8 	b.w	8008fb6 <__retarget_lock_acquire_recursive>
 8008e46:	bf00      	nop
 8008e48:	20000601 	.word	0x20000601

08008e4c <__sfp_lock_release>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__sfp_lock_release+0x8>)
 8008e4e:	f000 b8b3 	b.w	8008fb8 <__retarget_lock_release_recursive>
 8008e52:	bf00      	nop
 8008e54:	20000601 	.word	0x20000601

08008e58 <__sinit_lock_acquire>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__sinit_lock_acquire+0x8>)
 8008e5a:	f000 b8ac 	b.w	8008fb6 <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20000602 	.word	0x20000602

08008e64 <__sinit_lock_release>:
 8008e64:	4801      	ldr	r0, [pc, #4]	; (8008e6c <__sinit_lock_release+0x8>)
 8008e66:	f000 b8a7 	b.w	8008fb8 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	20000602 	.word	0x20000602

08008e70 <__sinit>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	4604      	mov	r4, r0
 8008e74:	f7ff fff0 	bl	8008e58 <__sinit_lock_acquire>
 8008e78:	69a3      	ldr	r3, [r4, #24]
 8008e7a:	b11b      	cbz	r3, 8008e84 <__sinit+0x14>
 8008e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e80:	f7ff bff0 	b.w	8008e64 <__sinit_lock_release>
 8008e84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e88:	6523      	str	r3, [r4, #80]	; 0x50
 8008e8a:	4b13      	ldr	r3, [pc, #76]	; (8008ed8 <__sinit+0x68>)
 8008e8c:	4a13      	ldr	r2, [pc, #76]	; (8008edc <__sinit+0x6c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e92:	42a3      	cmp	r3, r4
 8008e94:	bf04      	itt	eq
 8008e96:	2301      	moveq	r3, #1
 8008e98:	61a3      	streq	r3, [r4, #24]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 f820 	bl	8008ee0 <__sfp>
 8008ea0:	6060      	str	r0, [r4, #4]
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f81c 	bl	8008ee0 <__sfp>
 8008ea8:	60a0      	str	r0, [r4, #8]
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f818 	bl	8008ee0 <__sfp>
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	60e0      	str	r0, [r4, #12]
 8008eb4:	2104      	movs	r1, #4
 8008eb6:	6860      	ldr	r0, [r4, #4]
 8008eb8:	f7ff ff82 	bl	8008dc0 <std>
 8008ebc:	68a0      	ldr	r0, [r4, #8]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	2109      	movs	r1, #9
 8008ec2:	f7ff ff7d 	bl	8008dc0 <std>
 8008ec6:	68e0      	ldr	r0, [r4, #12]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	2112      	movs	r1, #18
 8008ecc:	f7ff ff78 	bl	8008dc0 <std>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	61a3      	str	r3, [r4, #24]
 8008ed4:	e7d2      	b.n	8008e7c <__sinit+0xc>
 8008ed6:	bf00      	nop
 8008ed8:	08009fac 	.word	0x08009fac
 8008edc:	08008e09 	.word	0x08008e09

08008ee0 <__sfp>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	4607      	mov	r7, r0
 8008ee4:	f7ff ffac 	bl	8008e40 <__sfp_lock_acquire>
 8008ee8:	4b1e      	ldr	r3, [pc, #120]	; (8008f64 <__sfp+0x84>)
 8008eea:	681e      	ldr	r6, [r3, #0]
 8008eec:	69b3      	ldr	r3, [r6, #24]
 8008eee:	b913      	cbnz	r3, 8008ef6 <__sfp+0x16>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f7ff ffbd 	bl	8008e70 <__sinit>
 8008ef6:	3648      	adds	r6, #72	; 0x48
 8008ef8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	d503      	bpl.n	8008f08 <__sfp+0x28>
 8008f00:	6833      	ldr	r3, [r6, #0]
 8008f02:	b30b      	cbz	r3, 8008f48 <__sfp+0x68>
 8008f04:	6836      	ldr	r6, [r6, #0]
 8008f06:	e7f7      	b.n	8008ef8 <__sfp+0x18>
 8008f08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f0c:	b9d5      	cbnz	r5, 8008f44 <__sfp+0x64>
 8008f0e:	4b16      	ldr	r3, [pc, #88]	; (8008f68 <__sfp+0x88>)
 8008f10:	60e3      	str	r3, [r4, #12]
 8008f12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f16:	6665      	str	r5, [r4, #100]	; 0x64
 8008f18:	f000 f84c 	bl	8008fb4 <__retarget_lock_init_recursive>
 8008f1c:	f7ff ff96 	bl	8008e4c <__sfp_lock_release>
 8008f20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f28:	6025      	str	r5, [r4, #0]
 8008f2a:	61a5      	str	r5, [r4, #24]
 8008f2c:	2208      	movs	r2, #8
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f34:	f7fe f9f0 	bl	8007318 <memset>
 8008f38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f40:	4620      	mov	r0, r4
 8008f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f44:	3468      	adds	r4, #104	; 0x68
 8008f46:	e7d9      	b.n	8008efc <__sfp+0x1c>
 8008f48:	2104      	movs	r1, #4
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f7ff ff62 	bl	8008e14 <__sfmoreglue>
 8008f50:	4604      	mov	r4, r0
 8008f52:	6030      	str	r0, [r6, #0]
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d1d5      	bne.n	8008f04 <__sfp+0x24>
 8008f58:	f7ff ff78 	bl	8008e4c <__sfp_lock_release>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	e7ee      	b.n	8008f40 <__sfp+0x60>
 8008f62:	bf00      	nop
 8008f64:	08009fac 	.word	0x08009fac
 8008f68:	ffff0001 	.word	0xffff0001

08008f6c <_fwalk_reent>:
 8008f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f70:	4606      	mov	r6, r0
 8008f72:	4688      	mov	r8, r1
 8008f74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f78:	2700      	movs	r7, #0
 8008f7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f7e:	f1b9 0901 	subs.w	r9, r9, #1
 8008f82:	d505      	bpl.n	8008f90 <_fwalk_reent+0x24>
 8008f84:	6824      	ldr	r4, [r4, #0]
 8008f86:	2c00      	cmp	r4, #0
 8008f88:	d1f7      	bne.n	8008f7a <_fwalk_reent+0xe>
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f90:	89ab      	ldrh	r3, [r5, #12]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d907      	bls.n	8008fa6 <_fwalk_reent+0x3a>
 8008f96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	d003      	beq.n	8008fa6 <_fwalk_reent+0x3a>
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	47c0      	blx	r8
 8008fa4:	4307      	orrs	r7, r0
 8008fa6:	3568      	adds	r5, #104	; 0x68
 8008fa8:	e7e9      	b.n	8008f7e <_fwalk_reent+0x12>
	...

08008fac <_localeconv_r>:
 8008fac:	4800      	ldr	r0, [pc, #0]	; (8008fb0 <_localeconv_r+0x4>)
 8008fae:	4770      	bx	lr
 8008fb0:	20000160 	.word	0x20000160

08008fb4 <__retarget_lock_init_recursive>:
 8008fb4:	4770      	bx	lr

08008fb6 <__retarget_lock_acquire_recursive>:
 8008fb6:	4770      	bx	lr

08008fb8 <__retarget_lock_release_recursive>:
 8008fb8:	4770      	bx	lr

08008fba <__swhatbuf_r>:
 8008fba:	b570      	push	{r4, r5, r6, lr}
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	b096      	sub	sp, #88	; 0x58
 8008fc6:	4614      	mov	r4, r2
 8008fc8:	461d      	mov	r5, r3
 8008fca:	da08      	bge.n	8008fde <__swhatbuf_r+0x24>
 8008fcc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	602a      	str	r2, [r5, #0]
 8008fd4:	061a      	lsls	r2, r3, #24
 8008fd6:	d410      	bmi.n	8008ffa <__swhatbuf_r+0x40>
 8008fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fdc:	e00e      	b.n	8008ffc <__swhatbuf_r+0x42>
 8008fde:	466a      	mov	r2, sp
 8008fe0:	f000 fee0 	bl	8009da4 <_fstat_r>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	dbf1      	blt.n	8008fcc <__swhatbuf_r+0x12>
 8008fe8:	9a01      	ldr	r2, [sp, #4]
 8008fea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ff2:	425a      	negs	r2, r3
 8008ff4:	415a      	adcs	r2, r3
 8008ff6:	602a      	str	r2, [r5, #0]
 8008ff8:	e7ee      	b.n	8008fd8 <__swhatbuf_r+0x1e>
 8008ffa:	2340      	movs	r3, #64	; 0x40
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	6023      	str	r3, [r4, #0]
 8009000:	b016      	add	sp, #88	; 0x58
 8009002:	bd70      	pop	{r4, r5, r6, pc}

08009004 <__smakebuf_r>:
 8009004:	898b      	ldrh	r3, [r1, #12]
 8009006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009008:	079d      	lsls	r5, r3, #30
 800900a:	4606      	mov	r6, r0
 800900c:	460c      	mov	r4, r1
 800900e:	d507      	bpl.n	8009020 <__smakebuf_r+0x1c>
 8009010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	6123      	str	r3, [r4, #16]
 8009018:	2301      	movs	r3, #1
 800901a:	6163      	str	r3, [r4, #20]
 800901c:	b002      	add	sp, #8
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	ab01      	add	r3, sp, #4
 8009022:	466a      	mov	r2, sp
 8009024:	f7ff ffc9 	bl	8008fba <__swhatbuf_r>
 8009028:	9900      	ldr	r1, [sp, #0]
 800902a:	4605      	mov	r5, r0
 800902c:	4630      	mov	r0, r6
 800902e:	f000 fc45 	bl	80098bc <_malloc_r>
 8009032:	b948      	cbnz	r0, 8009048 <__smakebuf_r+0x44>
 8009034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009038:	059a      	lsls	r2, r3, #22
 800903a:	d4ef      	bmi.n	800901c <__smakebuf_r+0x18>
 800903c:	f023 0303 	bic.w	r3, r3, #3
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	e7e3      	b.n	8009010 <__smakebuf_r+0xc>
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <__smakebuf_r+0x7c>)
 800904a:	62b3      	str	r3, [r6, #40]	; 0x28
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	6020      	str	r0, [r4, #0]
 8009050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	9b00      	ldr	r3, [sp, #0]
 8009058:	6163      	str	r3, [r4, #20]
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	6120      	str	r0, [r4, #16]
 800905e:	b15b      	cbz	r3, 8009078 <__smakebuf_r+0x74>
 8009060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009064:	4630      	mov	r0, r6
 8009066:	f000 feaf 	bl	8009dc8 <_isatty_r>
 800906a:	b128      	cbz	r0, 8009078 <__smakebuf_r+0x74>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	89a0      	ldrh	r0, [r4, #12]
 800907a:	4305      	orrs	r5, r0
 800907c:	81a5      	strh	r5, [r4, #12]
 800907e:	e7cd      	b.n	800901c <__smakebuf_r+0x18>
 8009080:	08008e09 	.word	0x08008e09

08009084 <malloc>:
 8009084:	4b02      	ldr	r3, [pc, #8]	; (8009090 <malloc+0xc>)
 8009086:	4601      	mov	r1, r0
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	f000 bc17 	b.w	80098bc <_malloc_r>
 800908e:	bf00      	nop
 8009090:	2000000c 	.word	0x2000000c

08009094 <memcpy>:
 8009094:	440a      	add	r2, r1
 8009096:	4291      	cmp	r1, r2
 8009098:	f100 33ff 	add.w	r3, r0, #4294967295
 800909c:	d100      	bne.n	80090a0 <memcpy+0xc>
 800909e:	4770      	bx	lr
 80090a0:	b510      	push	{r4, lr}
 80090a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090aa:	4291      	cmp	r1, r2
 80090ac:	d1f9      	bne.n	80090a2 <memcpy+0xe>
 80090ae:	bd10      	pop	{r4, pc}

080090b0 <_Balloc>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090b4:	4604      	mov	r4, r0
 80090b6:	460d      	mov	r5, r1
 80090b8:	b976      	cbnz	r6, 80090d8 <_Balloc+0x28>
 80090ba:	2010      	movs	r0, #16
 80090bc:	f7ff ffe2 	bl	8009084 <malloc>
 80090c0:	4602      	mov	r2, r0
 80090c2:	6260      	str	r0, [r4, #36]	; 0x24
 80090c4:	b920      	cbnz	r0, 80090d0 <_Balloc+0x20>
 80090c6:	4b18      	ldr	r3, [pc, #96]	; (8009128 <_Balloc+0x78>)
 80090c8:	4818      	ldr	r0, [pc, #96]	; (800912c <_Balloc+0x7c>)
 80090ca:	2166      	movs	r1, #102	; 0x66
 80090cc:	f000 fe2a 	bl	8009d24 <__assert_func>
 80090d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090d4:	6006      	str	r6, [r0, #0]
 80090d6:	60c6      	str	r6, [r0, #12]
 80090d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090da:	68f3      	ldr	r3, [r6, #12]
 80090dc:	b183      	cbz	r3, 8009100 <_Balloc+0x50>
 80090de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090e6:	b9b8      	cbnz	r0, 8009118 <_Balloc+0x68>
 80090e8:	2101      	movs	r1, #1
 80090ea:	fa01 f605 	lsl.w	r6, r1, r5
 80090ee:	1d72      	adds	r2, r6, #5
 80090f0:	0092      	lsls	r2, r2, #2
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fb60 	bl	80097b8 <_calloc_r>
 80090f8:	b160      	cbz	r0, 8009114 <_Balloc+0x64>
 80090fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090fe:	e00e      	b.n	800911e <_Balloc+0x6e>
 8009100:	2221      	movs	r2, #33	; 0x21
 8009102:	2104      	movs	r1, #4
 8009104:	4620      	mov	r0, r4
 8009106:	f000 fb57 	bl	80097b8 <_calloc_r>
 800910a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800910c:	60f0      	str	r0, [r6, #12]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e4      	bne.n	80090de <_Balloc+0x2e>
 8009114:	2000      	movs	r0, #0
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	6802      	ldr	r2, [r0, #0]
 800911a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800911e:	2300      	movs	r3, #0
 8009120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009124:	e7f7      	b.n	8009116 <_Balloc+0x66>
 8009126:	bf00      	nop
 8009128:	08009ff1 	.word	0x08009ff1
 800912c:	0800a0d4 	.word	0x0800a0d4

08009130 <_Bfree>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009134:	4605      	mov	r5, r0
 8009136:	460c      	mov	r4, r1
 8009138:	b976      	cbnz	r6, 8009158 <_Bfree+0x28>
 800913a:	2010      	movs	r0, #16
 800913c:	f7ff ffa2 	bl	8009084 <malloc>
 8009140:	4602      	mov	r2, r0
 8009142:	6268      	str	r0, [r5, #36]	; 0x24
 8009144:	b920      	cbnz	r0, 8009150 <_Bfree+0x20>
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <_Bfree+0x3c>)
 8009148:	4809      	ldr	r0, [pc, #36]	; (8009170 <_Bfree+0x40>)
 800914a:	218a      	movs	r1, #138	; 0x8a
 800914c:	f000 fdea 	bl	8009d24 <__assert_func>
 8009150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009154:	6006      	str	r6, [r0, #0]
 8009156:	60c6      	str	r6, [r0, #12]
 8009158:	b13c      	cbz	r4, 800916a <_Bfree+0x3a>
 800915a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800915c:	6862      	ldr	r2, [r4, #4]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009164:	6021      	str	r1, [r4, #0]
 8009166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	08009ff1 	.word	0x08009ff1
 8009170:	0800a0d4 	.word	0x0800a0d4

08009174 <__multadd>:
 8009174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009178:	690d      	ldr	r5, [r1, #16]
 800917a:	4607      	mov	r7, r0
 800917c:	460c      	mov	r4, r1
 800917e:	461e      	mov	r6, r3
 8009180:	f101 0c14 	add.w	ip, r1, #20
 8009184:	2000      	movs	r0, #0
 8009186:	f8dc 3000 	ldr.w	r3, [ip]
 800918a:	b299      	uxth	r1, r3
 800918c:	fb02 6101 	mla	r1, r2, r1, r6
 8009190:	0c1e      	lsrs	r6, r3, #16
 8009192:	0c0b      	lsrs	r3, r1, #16
 8009194:	fb02 3306 	mla	r3, r2, r6, r3
 8009198:	b289      	uxth	r1, r1
 800919a:	3001      	adds	r0, #1
 800919c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091a0:	4285      	cmp	r5, r0
 80091a2:	f84c 1b04 	str.w	r1, [ip], #4
 80091a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091aa:	dcec      	bgt.n	8009186 <__multadd+0x12>
 80091ac:	b30e      	cbz	r6, 80091f2 <__multadd+0x7e>
 80091ae:	68a3      	ldr	r3, [r4, #8]
 80091b0:	42ab      	cmp	r3, r5
 80091b2:	dc19      	bgt.n	80091e8 <__multadd+0x74>
 80091b4:	6861      	ldr	r1, [r4, #4]
 80091b6:	4638      	mov	r0, r7
 80091b8:	3101      	adds	r1, #1
 80091ba:	f7ff ff79 	bl	80090b0 <_Balloc>
 80091be:	4680      	mov	r8, r0
 80091c0:	b928      	cbnz	r0, 80091ce <__multadd+0x5a>
 80091c2:	4602      	mov	r2, r0
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <__multadd+0x84>)
 80091c6:	480d      	ldr	r0, [pc, #52]	; (80091fc <__multadd+0x88>)
 80091c8:	21b5      	movs	r1, #181	; 0xb5
 80091ca:	f000 fdab 	bl	8009d24 <__assert_func>
 80091ce:	6922      	ldr	r2, [r4, #16]
 80091d0:	3202      	adds	r2, #2
 80091d2:	f104 010c 	add.w	r1, r4, #12
 80091d6:	0092      	lsls	r2, r2, #2
 80091d8:	300c      	adds	r0, #12
 80091da:	f7ff ff5b 	bl	8009094 <memcpy>
 80091de:	4621      	mov	r1, r4
 80091e0:	4638      	mov	r0, r7
 80091e2:	f7ff ffa5 	bl	8009130 <_Bfree>
 80091e6:	4644      	mov	r4, r8
 80091e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091ec:	3501      	adds	r5, #1
 80091ee:	615e      	str	r6, [r3, #20]
 80091f0:	6125      	str	r5, [r4, #16]
 80091f2:	4620      	mov	r0, r4
 80091f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f8:	0800a063 	.word	0x0800a063
 80091fc:	0800a0d4 	.word	0x0800a0d4

08009200 <__hi0bits>:
 8009200:	0c03      	lsrs	r3, r0, #16
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	b9d3      	cbnz	r3, 800923c <__hi0bits+0x3c>
 8009206:	0400      	lsls	r0, r0, #16
 8009208:	2310      	movs	r3, #16
 800920a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800920e:	bf04      	itt	eq
 8009210:	0200      	lsleq	r0, r0, #8
 8009212:	3308      	addeq	r3, #8
 8009214:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009218:	bf04      	itt	eq
 800921a:	0100      	lsleq	r0, r0, #4
 800921c:	3304      	addeq	r3, #4
 800921e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009222:	bf04      	itt	eq
 8009224:	0080      	lsleq	r0, r0, #2
 8009226:	3302      	addeq	r3, #2
 8009228:	2800      	cmp	r0, #0
 800922a:	db05      	blt.n	8009238 <__hi0bits+0x38>
 800922c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009230:	f103 0301 	add.w	r3, r3, #1
 8009234:	bf08      	it	eq
 8009236:	2320      	moveq	r3, #32
 8009238:	4618      	mov	r0, r3
 800923a:	4770      	bx	lr
 800923c:	2300      	movs	r3, #0
 800923e:	e7e4      	b.n	800920a <__hi0bits+0xa>

08009240 <__lo0bits>:
 8009240:	6803      	ldr	r3, [r0, #0]
 8009242:	f013 0207 	ands.w	r2, r3, #7
 8009246:	4601      	mov	r1, r0
 8009248:	d00b      	beq.n	8009262 <__lo0bits+0x22>
 800924a:	07da      	lsls	r2, r3, #31
 800924c:	d423      	bmi.n	8009296 <__lo0bits+0x56>
 800924e:	0798      	lsls	r0, r3, #30
 8009250:	bf49      	itett	mi
 8009252:	085b      	lsrmi	r3, r3, #1
 8009254:	089b      	lsrpl	r3, r3, #2
 8009256:	2001      	movmi	r0, #1
 8009258:	600b      	strmi	r3, [r1, #0]
 800925a:	bf5c      	itt	pl
 800925c:	600b      	strpl	r3, [r1, #0]
 800925e:	2002      	movpl	r0, #2
 8009260:	4770      	bx	lr
 8009262:	b298      	uxth	r0, r3
 8009264:	b9a8      	cbnz	r0, 8009292 <__lo0bits+0x52>
 8009266:	0c1b      	lsrs	r3, r3, #16
 8009268:	2010      	movs	r0, #16
 800926a:	b2da      	uxtb	r2, r3
 800926c:	b90a      	cbnz	r2, 8009272 <__lo0bits+0x32>
 800926e:	3008      	adds	r0, #8
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	071a      	lsls	r2, r3, #28
 8009274:	bf04      	itt	eq
 8009276:	091b      	lsreq	r3, r3, #4
 8009278:	3004      	addeq	r0, #4
 800927a:	079a      	lsls	r2, r3, #30
 800927c:	bf04      	itt	eq
 800927e:	089b      	lsreq	r3, r3, #2
 8009280:	3002      	addeq	r0, #2
 8009282:	07da      	lsls	r2, r3, #31
 8009284:	d403      	bmi.n	800928e <__lo0bits+0x4e>
 8009286:	085b      	lsrs	r3, r3, #1
 8009288:	f100 0001 	add.w	r0, r0, #1
 800928c:	d005      	beq.n	800929a <__lo0bits+0x5a>
 800928e:	600b      	str	r3, [r1, #0]
 8009290:	4770      	bx	lr
 8009292:	4610      	mov	r0, r2
 8009294:	e7e9      	b.n	800926a <__lo0bits+0x2a>
 8009296:	2000      	movs	r0, #0
 8009298:	4770      	bx	lr
 800929a:	2020      	movs	r0, #32
 800929c:	4770      	bx	lr
	...

080092a0 <__i2b>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	460c      	mov	r4, r1
 80092a4:	2101      	movs	r1, #1
 80092a6:	f7ff ff03 	bl	80090b0 <_Balloc>
 80092aa:	4602      	mov	r2, r0
 80092ac:	b928      	cbnz	r0, 80092ba <__i2b+0x1a>
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <__i2b+0x24>)
 80092b0:	4805      	ldr	r0, [pc, #20]	; (80092c8 <__i2b+0x28>)
 80092b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092b6:	f000 fd35 	bl	8009d24 <__assert_func>
 80092ba:	2301      	movs	r3, #1
 80092bc:	6144      	str	r4, [r0, #20]
 80092be:	6103      	str	r3, [r0, #16]
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	bf00      	nop
 80092c4:	0800a063 	.word	0x0800a063
 80092c8:	0800a0d4 	.word	0x0800a0d4

080092cc <__multiply>:
 80092cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	4691      	mov	r9, r2
 80092d2:	690a      	ldr	r2, [r1, #16]
 80092d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092d8:	429a      	cmp	r2, r3
 80092da:	bfb8      	it	lt
 80092dc:	460b      	movlt	r3, r1
 80092de:	460c      	mov	r4, r1
 80092e0:	bfbc      	itt	lt
 80092e2:	464c      	movlt	r4, r9
 80092e4:	4699      	movlt	r9, r3
 80092e6:	6927      	ldr	r7, [r4, #16]
 80092e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092ec:	68a3      	ldr	r3, [r4, #8]
 80092ee:	6861      	ldr	r1, [r4, #4]
 80092f0:	eb07 060a 	add.w	r6, r7, sl
 80092f4:	42b3      	cmp	r3, r6
 80092f6:	b085      	sub	sp, #20
 80092f8:	bfb8      	it	lt
 80092fa:	3101      	addlt	r1, #1
 80092fc:	f7ff fed8 	bl	80090b0 <_Balloc>
 8009300:	b930      	cbnz	r0, 8009310 <__multiply+0x44>
 8009302:	4602      	mov	r2, r0
 8009304:	4b44      	ldr	r3, [pc, #272]	; (8009418 <__multiply+0x14c>)
 8009306:	4845      	ldr	r0, [pc, #276]	; (800941c <__multiply+0x150>)
 8009308:	f240 115d 	movw	r1, #349	; 0x15d
 800930c:	f000 fd0a 	bl	8009d24 <__assert_func>
 8009310:	f100 0514 	add.w	r5, r0, #20
 8009314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009318:	462b      	mov	r3, r5
 800931a:	2200      	movs	r2, #0
 800931c:	4543      	cmp	r3, r8
 800931e:	d321      	bcc.n	8009364 <__multiply+0x98>
 8009320:	f104 0314 	add.w	r3, r4, #20
 8009324:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009328:	f109 0314 	add.w	r3, r9, #20
 800932c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009330:	9202      	str	r2, [sp, #8]
 8009332:	1b3a      	subs	r2, r7, r4
 8009334:	3a15      	subs	r2, #21
 8009336:	f022 0203 	bic.w	r2, r2, #3
 800933a:	3204      	adds	r2, #4
 800933c:	f104 0115 	add.w	r1, r4, #21
 8009340:	428f      	cmp	r7, r1
 8009342:	bf38      	it	cc
 8009344:	2204      	movcc	r2, #4
 8009346:	9201      	str	r2, [sp, #4]
 8009348:	9a02      	ldr	r2, [sp, #8]
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	429a      	cmp	r2, r3
 800934e:	d80c      	bhi.n	800936a <__multiply+0x9e>
 8009350:	2e00      	cmp	r6, #0
 8009352:	dd03      	ble.n	800935c <__multiply+0x90>
 8009354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009358:	2b00      	cmp	r3, #0
 800935a:	d05a      	beq.n	8009412 <__multiply+0x146>
 800935c:	6106      	str	r6, [r0, #16]
 800935e:	b005      	add	sp, #20
 8009360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009364:	f843 2b04 	str.w	r2, [r3], #4
 8009368:	e7d8      	b.n	800931c <__multiply+0x50>
 800936a:	f8b3 a000 	ldrh.w	sl, [r3]
 800936e:	f1ba 0f00 	cmp.w	sl, #0
 8009372:	d024      	beq.n	80093be <__multiply+0xf2>
 8009374:	f104 0e14 	add.w	lr, r4, #20
 8009378:	46a9      	mov	r9, r5
 800937a:	f04f 0c00 	mov.w	ip, #0
 800937e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009382:	f8d9 1000 	ldr.w	r1, [r9]
 8009386:	fa1f fb82 	uxth.w	fp, r2
 800938a:	b289      	uxth	r1, r1
 800938c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009390:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009394:	f8d9 2000 	ldr.w	r2, [r9]
 8009398:	4461      	add	r1, ip
 800939a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800939e:	fb0a c20b 	mla	r2, sl, fp, ip
 80093a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093a6:	b289      	uxth	r1, r1
 80093a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093ac:	4577      	cmp	r7, lr
 80093ae:	f849 1b04 	str.w	r1, [r9], #4
 80093b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093b6:	d8e2      	bhi.n	800937e <__multiply+0xb2>
 80093b8:	9a01      	ldr	r2, [sp, #4]
 80093ba:	f845 c002 	str.w	ip, [r5, r2]
 80093be:	9a03      	ldr	r2, [sp, #12]
 80093c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093c4:	3304      	adds	r3, #4
 80093c6:	f1b9 0f00 	cmp.w	r9, #0
 80093ca:	d020      	beq.n	800940e <__multiply+0x142>
 80093cc:	6829      	ldr	r1, [r5, #0]
 80093ce:	f104 0c14 	add.w	ip, r4, #20
 80093d2:	46ae      	mov	lr, r5
 80093d4:	f04f 0a00 	mov.w	sl, #0
 80093d8:	f8bc b000 	ldrh.w	fp, [ip]
 80093dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093e0:	fb09 220b 	mla	r2, r9, fp, r2
 80093e4:	4492      	add	sl, r2
 80093e6:	b289      	uxth	r1, r1
 80093e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093ec:	f84e 1b04 	str.w	r1, [lr], #4
 80093f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093f4:	f8be 1000 	ldrh.w	r1, [lr]
 80093f8:	0c12      	lsrs	r2, r2, #16
 80093fa:	fb09 1102 	mla	r1, r9, r2, r1
 80093fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009402:	4567      	cmp	r7, ip
 8009404:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009408:	d8e6      	bhi.n	80093d8 <__multiply+0x10c>
 800940a:	9a01      	ldr	r2, [sp, #4]
 800940c:	50a9      	str	r1, [r5, r2]
 800940e:	3504      	adds	r5, #4
 8009410:	e79a      	b.n	8009348 <__multiply+0x7c>
 8009412:	3e01      	subs	r6, #1
 8009414:	e79c      	b.n	8009350 <__multiply+0x84>
 8009416:	bf00      	nop
 8009418:	0800a063 	.word	0x0800a063
 800941c:	0800a0d4 	.word	0x0800a0d4

08009420 <__pow5mult>:
 8009420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009424:	4615      	mov	r5, r2
 8009426:	f012 0203 	ands.w	r2, r2, #3
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	d007      	beq.n	8009440 <__pow5mult+0x20>
 8009430:	4c25      	ldr	r4, [pc, #148]	; (80094c8 <__pow5mult+0xa8>)
 8009432:	3a01      	subs	r2, #1
 8009434:	2300      	movs	r3, #0
 8009436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800943a:	f7ff fe9b 	bl	8009174 <__multadd>
 800943e:	4607      	mov	r7, r0
 8009440:	10ad      	asrs	r5, r5, #2
 8009442:	d03d      	beq.n	80094c0 <__pow5mult+0xa0>
 8009444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009446:	b97c      	cbnz	r4, 8009468 <__pow5mult+0x48>
 8009448:	2010      	movs	r0, #16
 800944a:	f7ff fe1b 	bl	8009084 <malloc>
 800944e:	4602      	mov	r2, r0
 8009450:	6270      	str	r0, [r6, #36]	; 0x24
 8009452:	b928      	cbnz	r0, 8009460 <__pow5mult+0x40>
 8009454:	4b1d      	ldr	r3, [pc, #116]	; (80094cc <__pow5mult+0xac>)
 8009456:	481e      	ldr	r0, [pc, #120]	; (80094d0 <__pow5mult+0xb0>)
 8009458:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800945c:	f000 fc62 	bl	8009d24 <__assert_func>
 8009460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009464:	6004      	str	r4, [r0, #0]
 8009466:	60c4      	str	r4, [r0, #12]
 8009468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800946c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009470:	b94c      	cbnz	r4, 8009486 <__pow5mult+0x66>
 8009472:	f240 2171 	movw	r1, #625	; 0x271
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff ff12 	bl	80092a0 <__i2b>
 800947c:	2300      	movs	r3, #0
 800947e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009482:	4604      	mov	r4, r0
 8009484:	6003      	str	r3, [r0, #0]
 8009486:	f04f 0900 	mov.w	r9, #0
 800948a:	07eb      	lsls	r3, r5, #31
 800948c:	d50a      	bpl.n	80094a4 <__pow5mult+0x84>
 800948e:	4639      	mov	r1, r7
 8009490:	4622      	mov	r2, r4
 8009492:	4630      	mov	r0, r6
 8009494:	f7ff ff1a 	bl	80092cc <__multiply>
 8009498:	4639      	mov	r1, r7
 800949a:	4680      	mov	r8, r0
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff fe47 	bl	8009130 <_Bfree>
 80094a2:	4647      	mov	r7, r8
 80094a4:	106d      	asrs	r5, r5, #1
 80094a6:	d00b      	beq.n	80094c0 <__pow5mult+0xa0>
 80094a8:	6820      	ldr	r0, [r4, #0]
 80094aa:	b938      	cbnz	r0, 80094bc <__pow5mult+0x9c>
 80094ac:	4622      	mov	r2, r4
 80094ae:	4621      	mov	r1, r4
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7ff ff0b 	bl	80092cc <__multiply>
 80094b6:	6020      	str	r0, [r4, #0]
 80094b8:	f8c0 9000 	str.w	r9, [r0]
 80094bc:	4604      	mov	r4, r0
 80094be:	e7e4      	b.n	800948a <__pow5mult+0x6a>
 80094c0:	4638      	mov	r0, r7
 80094c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c6:	bf00      	nop
 80094c8:	0800a220 	.word	0x0800a220
 80094cc:	08009ff1 	.word	0x08009ff1
 80094d0:	0800a0d4 	.word	0x0800a0d4

080094d4 <__lshift>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	460c      	mov	r4, r1
 80094da:	6849      	ldr	r1, [r1, #4]
 80094dc:	6923      	ldr	r3, [r4, #16]
 80094de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	4607      	mov	r7, r0
 80094e6:	4691      	mov	r9, r2
 80094e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094ec:	f108 0601 	add.w	r6, r8, #1
 80094f0:	42b3      	cmp	r3, r6
 80094f2:	db0b      	blt.n	800950c <__lshift+0x38>
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff fddb 	bl	80090b0 <_Balloc>
 80094fa:	4605      	mov	r5, r0
 80094fc:	b948      	cbnz	r0, 8009512 <__lshift+0x3e>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b2a      	ldr	r3, [pc, #168]	; (80095ac <__lshift+0xd8>)
 8009502:	482b      	ldr	r0, [pc, #172]	; (80095b0 <__lshift+0xdc>)
 8009504:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009508:	f000 fc0c 	bl	8009d24 <__assert_func>
 800950c:	3101      	adds	r1, #1
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	e7ee      	b.n	80094f0 <__lshift+0x1c>
 8009512:	2300      	movs	r3, #0
 8009514:	f100 0114 	add.w	r1, r0, #20
 8009518:	f100 0210 	add.w	r2, r0, #16
 800951c:	4618      	mov	r0, r3
 800951e:	4553      	cmp	r3, sl
 8009520:	db37      	blt.n	8009592 <__lshift+0xbe>
 8009522:	6920      	ldr	r0, [r4, #16]
 8009524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009528:	f104 0314 	add.w	r3, r4, #20
 800952c:	f019 091f 	ands.w	r9, r9, #31
 8009530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009534:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009538:	d02f      	beq.n	800959a <__lshift+0xc6>
 800953a:	f1c9 0e20 	rsb	lr, r9, #32
 800953e:	468a      	mov	sl, r1
 8009540:	f04f 0c00 	mov.w	ip, #0
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	fa02 f209 	lsl.w	r2, r2, r9
 800954a:	ea42 020c 	orr.w	r2, r2, ip
 800954e:	f84a 2b04 	str.w	r2, [sl], #4
 8009552:	f853 2b04 	ldr.w	r2, [r3], #4
 8009556:	4298      	cmp	r0, r3
 8009558:	fa22 fc0e 	lsr.w	ip, r2, lr
 800955c:	d8f2      	bhi.n	8009544 <__lshift+0x70>
 800955e:	1b03      	subs	r3, r0, r4
 8009560:	3b15      	subs	r3, #21
 8009562:	f023 0303 	bic.w	r3, r3, #3
 8009566:	3304      	adds	r3, #4
 8009568:	f104 0215 	add.w	r2, r4, #21
 800956c:	4290      	cmp	r0, r2
 800956e:	bf38      	it	cc
 8009570:	2304      	movcc	r3, #4
 8009572:	f841 c003 	str.w	ip, [r1, r3]
 8009576:	f1bc 0f00 	cmp.w	ip, #0
 800957a:	d001      	beq.n	8009580 <__lshift+0xac>
 800957c:	f108 0602 	add.w	r6, r8, #2
 8009580:	3e01      	subs	r6, #1
 8009582:	4638      	mov	r0, r7
 8009584:	612e      	str	r6, [r5, #16]
 8009586:	4621      	mov	r1, r4
 8009588:	f7ff fdd2 	bl	8009130 <_Bfree>
 800958c:	4628      	mov	r0, r5
 800958e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009592:	f842 0f04 	str.w	r0, [r2, #4]!
 8009596:	3301      	adds	r3, #1
 8009598:	e7c1      	b.n	800951e <__lshift+0x4a>
 800959a:	3904      	subs	r1, #4
 800959c:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095a4:	4298      	cmp	r0, r3
 80095a6:	d8f9      	bhi.n	800959c <__lshift+0xc8>
 80095a8:	e7ea      	b.n	8009580 <__lshift+0xac>
 80095aa:	bf00      	nop
 80095ac:	0800a063 	.word	0x0800a063
 80095b0:	0800a0d4 	.word	0x0800a0d4

080095b4 <__mcmp>:
 80095b4:	b530      	push	{r4, r5, lr}
 80095b6:	6902      	ldr	r2, [r0, #16]
 80095b8:	690c      	ldr	r4, [r1, #16]
 80095ba:	1b12      	subs	r2, r2, r4
 80095bc:	d10e      	bne.n	80095dc <__mcmp+0x28>
 80095be:	f100 0314 	add.w	r3, r0, #20
 80095c2:	3114      	adds	r1, #20
 80095c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095d4:	42a5      	cmp	r5, r4
 80095d6:	d003      	beq.n	80095e0 <__mcmp+0x2c>
 80095d8:	d305      	bcc.n	80095e6 <__mcmp+0x32>
 80095da:	2201      	movs	r2, #1
 80095dc:	4610      	mov	r0, r2
 80095de:	bd30      	pop	{r4, r5, pc}
 80095e0:	4283      	cmp	r3, r0
 80095e2:	d3f3      	bcc.n	80095cc <__mcmp+0x18>
 80095e4:	e7fa      	b.n	80095dc <__mcmp+0x28>
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	e7f7      	b.n	80095dc <__mcmp+0x28>

080095ec <__mdiff>:
 80095ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	460c      	mov	r4, r1
 80095f2:	4606      	mov	r6, r0
 80095f4:	4611      	mov	r1, r2
 80095f6:	4620      	mov	r0, r4
 80095f8:	4690      	mov	r8, r2
 80095fa:	f7ff ffdb 	bl	80095b4 <__mcmp>
 80095fe:	1e05      	subs	r5, r0, #0
 8009600:	d110      	bne.n	8009624 <__mdiff+0x38>
 8009602:	4629      	mov	r1, r5
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff fd53 	bl	80090b0 <_Balloc>
 800960a:	b930      	cbnz	r0, 800961a <__mdiff+0x2e>
 800960c:	4b3a      	ldr	r3, [pc, #232]	; (80096f8 <__mdiff+0x10c>)
 800960e:	4602      	mov	r2, r0
 8009610:	f240 2132 	movw	r1, #562	; 0x232
 8009614:	4839      	ldr	r0, [pc, #228]	; (80096fc <__mdiff+0x110>)
 8009616:	f000 fb85 	bl	8009d24 <__assert_func>
 800961a:	2301      	movs	r3, #1
 800961c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	bfa4      	itt	ge
 8009626:	4643      	movge	r3, r8
 8009628:	46a0      	movge	r8, r4
 800962a:	4630      	mov	r0, r6
 800962c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009630:	bfa6      	itte	ge
 8009632:	461c      	movge	r4, r3
 8009634:	2500      	movge	r5, #0
 8009636:	2501      	movlt	r5, #1
 8009638:	f7ff fd3a 	bl	80090b0 <_Balloc>
 800963c:	b920      	cbnz	r0, 8009648 <__mdiff+0x5c>
 800963e:	4b2e      	ldr	r3, [pc, #184]	; (80096f8 <__mdiff+0x10c>)
 8009640:	4602      	mov	r2, r0
 8009642:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009646:	e7e5      	b.n	8009614 <__mdiff+0x28>
 8009648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800964c:	6926      	ldr	r6, [r4, #16]
 800964e:	60c5      	str	r5, [r0, #12]
 8009650:	f104 0914 	add.w	r9, r4, #20
 8009654:	f108 0514 	add.w	r5, r8, #20
 8009658:	f100 0e14 	add.w	lr, r0, #20
 800965c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009664:	f108 0210 	add.w	r2, r8, #16
 8009668:	46f2      	mov	sl, lr
 800966a:	2100      	movs	r1, #0
 800966c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009674:	fa1f f883 	uxth.w	r8, r3
 8009678:	fa11 f18b 	uxtah	r1, r1, fp
 800967c:	0c1b      	lsrs	r3, r3, #16
 800967e:	eba1 0808 	sub.w	r8, r1, r8
 8009682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009686:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800968a:	fa1f f888 	uxth.w	r8, r8
 800968e:	1419      	asrs	r1, r3, #16
 8009690:	454e      	cmp	r6, r9
 8009692:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009696:	f84a 3b04 	str.w	r3, [sl], #4
 800969a:	d8e7      	bhi.n	800966c <__mdiff+0x80>
 800969c:	1b33      	subs	r3, r6, r4
 800969e:	3b15      	subs	r3, #21
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	3304      	adds	r3, #4
 80096a6:	3415      	adds	r4, #21
 80096a8:	42a6      	cmp	r6, r4
 80096aa:	bf38      	it	cc
 80096ac:	2304      	movcc	r3, #4
 80096ae:	441d      	add	r5, r3
 80096b0:	4473      	add	r3, lr
 80096b2:	469e      	mov	lr, r3
 80096b4:	462e      	mov	r6, r5
 80096b6:	4566      	cmp	r6, ip
 80096b8:	d30e      	bcc.n	80096d8 <__mdiff+0xec>
 80096ba:	f10c 0203 	add.w	r2, ip, #3
 80096be:	1b52      	subs	r2, r2, r5
 80096c0:	f022 0203 	bic.w	r2, r2, #3
 80096c4:	3d03      	subs	r5, #3
 80096c6:	45ac      	cmp	ip, r5
 80096c8:	bf38      	it	cc
 80096ca:	2200      	movcc	r2, #0
 80096cc:	441a      	add	r2, r3
 80096ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096d2:	b17b      	cbz	r3, 80096f4 <__mdiff+0x108>
 80096d4:	6107      	str	r7, [r0, #16]
 80096d6:	e7a3      	b.n	8009620 <__mdiff+0x34>
 80096d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80096dc:	fa11 f288 	uxtah	r2, r1, r8
 80096e0:	1414      	asrs	r4, r2, #16
 80096e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096e6:	b292      	uxth	r2, r2
 80096e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096ec:	f84e 2b04 	str.w	r2, [lr], #4
 80096f0:	1421      	asrs	r1, r4, #16
 80096f2:	e7e0      	b.n	80096b6 <__mdiff+0xca>
 80096f4:	3f01      	subs	r7, #1
 80096f6:	e7ea      	b.n	80096ce <__mdiff+0xe2>
 80096f8:	0800a063 	.word	0x0800a063
 80096fc:	0800a0d4 	.word	0x0800a0d4

08009700 <__d2b>:
 8009700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009704:	4689      	mov	r9, r1
 8009706:	2101      	movs	r1, #1
 8009708:	ec57 6b10 	vmov	r6, r7, d0
 800970c:	4690      	mov	r8, r2
 800970e:	f7ff fccf 	bl	80090b0 <_Balloc>
 8009712:	4604      	mov	r4, r0
 8009714:	b930      	cbnz	r0, 8009724 <__d2b+0x24>
 8009716:	4602      	mov	r2, r0
 8009718:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <__d2b+0xb0>)
 800971a:	4826      	ldr	r0, [pc, #152]	; (80097b4 <__d2b+0xb4>)
 800971c:	f240 310a 	movw	r1, #778	; 0x30a
 8009720:	f000 fb00 	bl	8009d24 <__assert_func>
 8009724:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800972c:	bb35      	cbnz	r5, 800977c <__d2b+0x7c>
 800972e:	2e00      	cmp	r6, #0
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	d028      	beq.n	8009786 <__d2b+0x86>
 8009734:	4668      	mov	r0, sp
 8009736:	9600      	str	r6, [sp, #0]
 8009738:	f7ff fd82 	bl	8009240 <__lo0bits>
 800973c:	9900      	ldr	r1, [sp, #0]
 800973e:	b300      	cbz	r0, 8009782 <__d2b+0x82>
 8009740:	9a01      	ldr	r2, [sp, #4]
 8009742:	f1c0 0320 	rsb	r3, r0, #32
 8009746:	fa02 f303 	lsl.w	r3, r2, r3
 800974a:	430b      	orrs	r3, r1
 800974c:	40c2      	lsrs	r2, r0
 800974e:	6163      	str	r3, [r4, #20]
 8009750:	9201      	str	r2, [sp, #4]
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	61a3      	str	r3, [r4, #24]
 8009756:	2b00      	cmp	r3, #0
 8009758:	bf14      	ite	ne
 800975a:	2202      	movne	r2, #2
 800975c:	2201      	moveq	r2, #1
 800975e:	6122      	str	r2, [r4, #16]
 8009760:	b1d5      	cbz	r5, 8009798 <__d2b+0x98>
 8009762:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009766:	4405      	add	r5, r0
 8009768:	f8c9 5000 	str.w	r5, [r9]
 800976c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009770:	f8c8 0000 	str.w	r0, [r8]
 8009774:	4620      	mov	r0, r4
 8009776:	b003      	add	sp, #12
 8009778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800977c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009780:	e7d5      	b.n	800972e <__d2b+0x2e>
 8009782:	6161      	str	r1, [r4, #20]
 8009784:	e7e5      	b.n	8009752 <__d2b+0x52>
 8009786:	a801      	add	r0, sp, #4
 8009788:	f7ff fd5a 	bl	8009240 <__lo0bits>
 800978c:	9b01      	ldr	r3, [sp, #4]
 800978e:	6163      	str	r3, [r4, #20]
 8009790:	2201      	movs	r2, #1
 8009792:	6122      	str	r2, [r4, #16]
 8009794:	3020      	adds	r0, #32
 8009796:	e7e3      	b.n	8009760 <__d2b+0x60>
 8009798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800979c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097a0:	f8c9 0000 	str.w	r0, [r9]
 80097a4:	6918      	ldr	r0, [r3, #16]
 80097a6:	f7ff fd2b 	bl	8009200 <__hi0bits>
 80097aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097ae:	e7df      	b.n	8009770 <__d2b+0x70>
 80097b0:	0800a063 	.word	0x0800a063
 80097b4:	0800a0d4 	.word	0x0800a0d4

080097b8 <_calloc_r>:
 80097b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ba:	fba1 2402 	umull	r2, r4, r1, r2
 80097be:	b94c      	cbnz	r4, 80097d4 <_calloc_r+0x1c>
 80097c0:	4611      	mov	r1, r2
 80097c2:	9201      	str	r2, [sp, #4]
 80097c4:	f000 f87a 	bl	80098bc <_malloc_r>
 80097c8:	9a01      	ldr	r2, [sp, #4]
 80097ca:	4605      	mov	r5, r0
 80097cc:	b930      	cbnz	r0, 80097dc <_calloc_r+0x24>
 80097ce:	4628      	mov	r0, r5
 80097d0:	b003      	add	sp, #12
 80097d2:	bd30      	pop	{r4, r5, pc}
 80097d4:	220c      	movs	r2, #12
 80097d6:	6002      	str	r2, [r0, #0]
 80097d8:	2500      	movs	r5, #0
 80097da:	e7f8      	b.n	80097ce <_calloc_r+0x16>
 80097dc:	4621      	mov	r1, r4
 80097de:	f7fd fd9b 	bl	8007318 <memset>
 80097e2:	e7f4      	b.n	80097ce <_calloc_r+0x16>

080097e4 <_free_r>:
 80097e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d044      	beq.n	8009874 <_free_r+0x90>
 80097ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ee:	9001      	str	r0, [sp, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f1a1 0404 	sub.w	r4, r1, #4
 80097f6:	bfb8      	it	lt
 80097f8:	18e4      	addlt	r4, r4, r3
 80097fa:	f000 fb19 	bl	8009e30 <__malloc_lock>
 80097fe:	4a1e      	ldr	r2, [pc, #120]	; (8009878 <_free_r+0x94>)
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	6813      	ldr	r3, [r2, #0]
 8009804:	b933      	cbnz	r3, 8009814 <_free_r+0x30>
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	6014      	str	r4, [r2, #0]
 800980a:	b003      	add	sp, #12
 800980c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009810:	f000 bb14 	b.w	8009e3c <__malloc_unlock>
 8009814:	42a3      	cmp	r3, r4
 8009816:	d908      	bls.n	800982a <_free_r+0x46>
 8009818:	6825      	ldr	r5, [r4, #0]
 800981a:	1961      	adds	r1, r4, r5
 800981c:	428b      	cmp	r3, r1
 800981e:	bf01      	itttt	eq
 8009820:	6819      	ldreq	r1, [r3, #0]
 8009822:	685b      	ldreq	r3, [r3, #4]
 8009824:	1949      	addeq	r1, r1, r5
 8009826:	6021      	streq	r1, [r4, #0]
 8009828:	e7ed      	b.n	8009806 <_free_r+0x22>
 800982a:	461a      	mov	r2, r3
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	b10b      	cbz	r3, 8009834 <_free_r+0x50>
 8009830:	42a3      	cmp	r3, r4
 8009832:	d9fa      	bls.n	800982a <_free_r+0x46>
 8009834:	6811      	ldr	r1, [r2, #0]
 8009836:	1855      	adds	r5, r2, r1
 8009838:	42a5      	cmp	r5, r4
 800983a:	d10b      	bne.n	8009854 <_free_r+0x70>
 800983c:	6824      	ldr	r4, [r4, #0]
 800983e:	4421      	add	r1, r4
 8009840:	1854      	adds	r4, r2, r1
 8009842:	42a3      	cmp	r3, r4
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	d1e0      	bne.n	800980a <_free_r+0x26>
 8009848:	681c      	ldr	r4, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	6053      	str	r3, [r2, #4]
 800984e:	4421      	add	r1, r4
 8009850:	6011      	str	r1, [r2, #0]
 8009852:	e7da      	b.n	800980a <_free_r+0x26>
 8009854:	d902      	bls.n	800985c <_free_r+0x78>
 8009856:	230c      	movs	r3, #12
 8009858:	6003      	str	r3, [r0, #0]
 800985a:	e7d6      	b.n	800980a <_free_r+0x26>
 800985c:	6825      	ldr	r5, [r4, #0]
 800985e:	1961      	adds	r1, r4, r5
 8009860:	428b      	cmp	r3, r1
 8009862:	bf04      	itt	eq
 8009864:	6819      	ldreq	r1, [r3, #0]
 8009866:	685b      	ldreq	r3, [r3, #4]
 8009868:	6063      	str	r3, [r4, #4]
 800986a:	bf04      	itt	eq
 800986c:	1949      	addeq	r1, r1, r5
 800986e:	6021      	streq	r1, [r4, #0]
 8009870:	6054      	str	r4, [r2, #4]
 8009872:	e7ca      	b.n	800980a <_free_r+0x26>
 8009874:	b003      	add	sp, #12
 8009876:	bd30      	pop	{r4, r5, pc}
 8009878:	20000604 	.word	0x20000604

0800987c <sbrk_aligned>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	4e0e      	ldr	r6, [pc, #56]	; (80098b8 <sbrk_aligned+0x3c>)
 8009880:	460c      	mov	r4, r1
 8009882:	6831      	ldr	r1, [r6, #0]
 8009884:	4605      	mov	r5, r0
 8009886:	b911      	cbnz	r1, 800988e <sbrk_aligned+0x12>
 8009888:	f000 f9e6 	bl	8009c58 <_sbrk_r>
 800988c:	6030      	str	r0, [r6, #0]
 800988e:	4621      	mov	r1, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f000 f9e1 	bl	8009c58 <_sbrk_r>
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	d00a      	beq.n	80098b0 <sbrk_aligned+0x34>
 800989a:	1cc4      	adds	r4, r0, #3
 800989c:	f024 0403 	bic.w	r4, r4, #3
 80098a0:	42a0      	cmp	r0, r4
 80098a2:	d007      	beq.n	80098b4 <sbrk_aligned+0x38>
 80098a4:	1a21      	subs	r1, r4, r0
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 f9d6 	bl	8009c58 <_sbrk_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d101      	bne.n	80098b4 <sbrk_aligned+0x38>
 80098b0:	f04f 34ff 	mov.w	r4, #4294967295
 80098b4:	4620      	mov	r0, r4
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	20000608 	.word	0x20000608

080098bc <_malloc_r>:
 80098bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c0:	1ccd      	adds	r5, r1, #3
 80098c2:	f025 0503 	bic.w	r5, r5, #3
 80098c6:	3508      	adds	r5, #8
 80098c8:	2d0c      	cmp	r5, #12
 80098ca:	bf38      	it	cc
 80098cc:	250c      	movcc	r5, #12
 80098ce:	2d00      	cmp	r5, #0
 80098d0:	4607      	mov	r7, r0
 80098d2:	db01      	blt.n	80098d8 <_malloc_r+0x1c>
 80098d4:	42a9      	cmp	r1, r5
 80098d6:	d905      	bls.n	80098e4 <_malloc_r+0x28>
 80098d8:	230c      	movs	r3, #12
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	2600      	movs	r6, #0
 80098de:	4630      	mov	r0, r6
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	4e2e      	ldr	r6, [pc, #184]	; (80099a0 <_malloc_r+0xe4>)
 80098e6:	f000 faa3 	bl	8009e30 <__malloc_lock>
 80098ea:	6833      	ldr	r3, [r6, #0]
 80098ec:	461c      	mov	r4, r3
 80098ee:	bb34      	cbnz	r4, 800993e <_malloc_r+0x82>
 80098f0:	4629      	mov	r1, r5
 80098f2:	4638      	mov	r0, r7
 80098f4:	f7ff ffc2 	bl	800987c <sbrk_aligned>
 80098f8:	1c43      	adds	r3, r0, #1
 80098fa:	4604      	mov	r4, r0
 80098fc:	d14d      	bne.n	800999a <_malloc_r+0xde>
 80098fe:	6834      	ldr	r4, [r6, #0]
 8009900:	4626      	mov	r6, r4
 8009902:	2e00      	cmp	r6, #0
 8009904:	d140      	bne.n	8009988 <_malloc_r+0xcc>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	4631      	mov	r1, r6
 800990a:	4638      	mov	r0, r7
 800990c:	eb04 0803 	add.w	r8, r4, r3
 8009910:	f000 f9a2 	bl	8009c58 <_sbrk_r>
 8009914:	4580      	cmp	r8, r0
 8009916:	d13a      	bne.n	800998e <_malloc_r+0xd2>
 8009918:	6821      	ldr	r1, [r4, #0]
 800991a:	3503      	adds	r5, #3
 800991c:	1a6d      	subs	r5, r5, r1
 800991e:	f025 0503 	bic.w	r5, r5, #3
 8009922:	3508      	adds	r5, #8
 8009924:	2d0c      	cmp	r5, #12
 8009926:	bf38      	it	cc
 8009928:	250c      	movcc	r5, #12
 800992a:	4629      	mov	r1, r5
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff ffa5 	bl	800987c <sbrk_aligned>
 8009932:	3001      	adds	r0, #1
 8009934:	d02b      	beq.n	800998e <_malloc_r+0xd2>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	442b      	add	r3, r5
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	e00e      	b.n	800995c <_malloc_r+0xa0>
 800993e:	6822      	ldr	r2, [r4, #0]
 8009940:	1b52      	subs	r2, r2, r5
 8009942:	d41e      	bmi.n	8009982 <_malloc_r+0xc6>
 8009944:	2a0b      	cmp	r2, #11
 8009946:	d916      	bls.n	8009976 <_malloc_r+0xba>
 8009948:	1961      	adds	r1, r4, r5
 800994a:	42a3      	cmp	r3, r4
 800994c:	6025      	str	r5, [r4, #0]
 800994e:	bf18      	it	ne
 8009950:	6059      	strne	r1, [r3, #4]
 8009952:	6863      	ldr	r3, [r4, #4]
 8009954:	bf08      	it	eq
 8009956:	6031      	streq	r1, [r6, #0]
 8009958:	5162      	str	r2, [r4, r5]
 800995a:	604b      	str	r3, [r1, #4]
 800995c:	4638      	mov	r0, r7
 800995e:	f104 060b 	add.w	r6, r4, #11
 8009962:	f000 fa6b 	bl	8009e3c <__malloc_unlock>
 8009966:	f026 0607 	bic.w	r6, r6, #7
 800996a:	1d23      	adds	r3, r4, #4
 800996c:	1af2      	subs	r2, r6, r3
 800996e:	d0b6      	beq.n	80098de <_malloc_r+0x22>
 8009970:	1b9b      	subs	r3, r3, r6
 8009972:	50a3      	str	r3, [r4, r2]
 8009974:	e7b3      	b.n	80098de <_malloc_r+0x22>
 8009976:	6862      	ldr	r2, [r4, #4]
 8009978:	42a3      	cmp	r3, r4
 800997a:	bf0c      	ite	eq
 800997c:	6032      	streq	r2, [r6, #0]
 800997e:	605a      	strne	r2, [r3, #4]
 8009980:	e7ec      	b.n	800995c <_malloc_r+0xa0>
 8009982:	4623      	mov	r3, r4
 8009984:	6864      	ldr	r4, [r4, #4]
 8009986:	e7b2      	b.n	80098ee <_malloc_r+0x32>
 8009988:	4634      	mov	r4, r6
 800998a:	6876      	ldr	r6, [r6, #4]
 800998c:	e7b9      	b.n	8009902 <_malloc_r+0x46>
 800998e:	230c      	movs	r3, #12
 8009990:	603b      	str	r3, [r7, #0]
 8009992:	4638      	mov	r0, r7
 8009994:	f000 fa52 	bl	8009e3c <__malloc_unlock>
 8009998:	e7a1      	b.n	80098de <_malloc_r+0x22>
 800999a:	6025      	str	r5, [r4, #0]
 800999c:	e7de      	b.n	800995c <_malloc_r+0xa0>
 800999e:	bf00      	nop
 80099a0:	20000604 	.word	0x20000604

080099a4 <__sfputc_r>:
 80099a4:	6893      	ldr	r3, [r2, #8]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	b410      	push	{r4}
 80099ac:	6093      	str	r3, [r2, #8]
 80099ae:	da08      	bge.n	80099c2 <__sfputc_r+0x1e>
 80099b0:	6994      	ldr	r4, [r2, #24]
 80099b2:	42a3      	cmp	r3, r4
 80099b4:	db01      	blt.n	80099ba <__sfputc_r+0x16>
 80099b6:	290a      	cmp	r1, #10
 80099b8:	d103      	bne.n	80099c2 <__sfputc_r+0x1e>
 80099ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099be:	f7fe ba03 	b.w	8007dc8 <__swbuf_r>
 80099c2:	6813      	ldr	r3, [r2, #0]
 80099c4:	1c58      	adds	r0, r3, #1
 80099c6:	6010      	str	r0, [r2, #0]
 80099c8:	7019      	strb	r1, [r3, #0]
 80099ca:	4608      	mov	r0, r1
 80099cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <__sfputs_r>:
 80099d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d4:	4606      	mov	r6, r0
 80099d6:	460f      	mov	r7, r1
 80099d8:	4614      	mov	r4, r2
 80099da:	18d5      	adds	r5, r2, r3
 80099dc:	42ac      	cmp	r4, r5
 80099de:	d101      	bne.n	80099e4 <__sfputs_r+0x12>
 80099e0:	2000      	movs	r0, #0
 80099e2:	e007      	b.n	80099f4 <__sfputs_r+0x22>
 80099e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e8:	463a      	mov	r2, r7
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7ff ffda 	bl	80099a4 <__sfputc_r>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	d1f3      	bne.n	80099dc <__sfputs_r+0xa>
 80099f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099f8 <_vfiprintf_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	460d      	mov	r5, r1
 80099fe:	b09d      	sub	sp, #116	; 0x74
 8009a00:	4614      	mov	r4, r2
 8009a02:	4698      	mov	r8, r3
 8009a04:	4606      	mov	r6, r0
 8009a06:	b118      	cbz	r0, 8009a10 <_vfiprintf_r+0x18>
 8009a08:	6983      	ldr	r3, [r0, #24]
 8009a0a:	b90b      	cbnz	r3, 8009a10 <_vfiprintf_r+0x18>
 8009a0c:	f7ff fa30 	bl	8008e70 <__sinit>
 8009a10:	4b89      	ldr	r3, [pc, #548]	; (8009c38 <_vfiprintf_r+0x240>)
 8009a12:	429d      	cmp	r5, r3
 8009a14:	d11b      	bne.n	8009a4e <_vfiprintf_r+0x56>
 8009a16:	6875      	ldr	r5, [r6, #4]
 8009a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a1a:	07d9      	lsls	r1, r3, #31
 8009a1c:	d405      	bmi.n	8009a2a <_vfiprintf_r+0x32>
 8009a1e:	89ab      	ldrh	r3, [r5, #12]
 8009a20:	059a      	lsls	r2, r3, #22
 8009a22:	d402      	bmi.n	8009a2a <_vfiprintf_r+0x32>
 8009a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a26:	f7ff fac6 	bl	8008fb6 <__retarget_lock_acquire_recursive>
 8009a2a:	89ab      	ldrh	r3, [r5, #12]
 8009a2c:	071b      	lsls	r3, r3, #28
 8009a2e:	d501      	bpl.n	8009a34 <_vfiprintf_r+0x3c>
 8009a30:	692b      	ldr	r3, [r5, #16]
 8009a32:	b9eb      	cbnz	r3, 8009a70 <_vfiprintf_r+0x78>
 8009a34:	4629      	mov	r1, r5
 8009a36:	4630      	mov	r0, r6
 8009a38:	f7fe fa18 	bl	8007e6c <__swsetup_r>
 8009a3c:	b1c0      	cbz	r0, 8009a70 <_vfiprintf_r+0x78>
 8009a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a40:	07dc      	lsls	r4, r3, #31
 8009a42:	d50e      	bpl.n	8009a62 <_vfiprintf_r+0x6a>
 8009a44:	f04f 30ff 	mov.w	r0, #4294967295
 8009a48:	b01d      	add	sp, #116	; 0x74
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	4b7b      	ldr	r3, [pc, #492]	; (8009c3c <_vfiprintf_r+0x244>)
 8009a50:	429d      	cmp	r5, r3
 8009a52:	d101      	bne.n	8009a58 <_vfiprintf_r+0x60>
 8009a54:	68b5      	ldr	r5, [r6, #8]
 8009a56:	e7df      	b.n	8009a18 <_vfiprintf_r+0x20>
 8009a58:	4b79      	ldr	r3, [pc, #484]	; (8009c40 <_vfiprintf_r+0x248>)
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	bf08      	it	eq
 8009a5e:	68f5      	ldreq	r5, [r6, #12]
 8009a60:	e7da      	b.n	8009a18 <_vfiprintf_r+0x20>
 8009a62:	89ab      	ldrh	r3, [r5, #12]
 8009a64:	0598      	lsls	r0, r3, #22
 8009a66:	d4ed      	bmi.n	8009a44 <_vfiprintf_r+0x4c>
 8009a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a6a:	f7ff faa5 	bl	8008fb8 <__retarget_lock_release_recursive>
 8009a6e:	e7e9      	b.n	8009a44 <_vfiprintf_r+0x4c>
 8009a70:	2300      	movs	r3, #0
 8009a72:	9309      	str	r3, [sp, #36]	; 0x24
 8009a74:	2320      	movs	r3, #32
 8009a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a7e:	2330      	movs	r3, #48	; 0x30
 8009a80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c44 <_vfiprintf_r+0x24c>
 8009a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a88:	f04f 0901 	mov.w	r9, #1
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	469a      	mov	sl, r3
 8009a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a94:	b10a      	cbz	r2, 8009a9a <_vfiprintf_r+0xa2>
 8009a96:	2a25      	cmp	r2, #37	; 0x25
 8009a98:	d1f9      	bne.n	8009a8e <_vfiprintf_r+0x96>
 8009a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a9e:	d00b      	beq.n	8009ab8 <_vfiprintf_r+0xc0>
 8009aa0:	465b      	mov	r3, fp
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7ff ff93 	bl	80099d2 <__sfputs_r>
 8009aac:	3001      	adds	r0, #1
 8009aae:	f000 80aa 	beq.w	8009c06 <_vfiprintf_r+0x20e>
 8009ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab4:	445a      	add	r2, fp
 8009ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 80a2 	beq.w	8009c06 <_vfiprintf_r+0x20e>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009acc:	f10a 0a01 	add.w	sl, sl, #1
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	9307      	str	r3, [sp, #28]
 8009ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8009ada:	4654      	mov	r4, sl
 8009adc:	2205      	movs	r2, #5
 8009ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae2:	4858      	ldr	r0, [pc, #352]	; (8009c44 <_vfiprintf_r+0x24c>)
 8009ae4:	f7f6 fb7c 	bl	80001e0 <memchr>
 8009ae8:	9a04      	ldr	r2, [sp, #16]
 8009aea:	b9d8      	cbnz	r0, 8009b24 <_vfiprintf_r+0x12c>
 8009aec:	06d1      	lsls	r1, r2, #27
 8009aee:	bf44      	itt	mi
 8009af0:	2320      	movmi	r3, #32
 8009af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009af6:	0713      	lsls	r3, r2, #28
 8009af8:	bf44      	itt	mi
 8009afa:	232b      	movmi	r3, #43	; 0x2b
 8009afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b00:	f89a 3000 	ldrb.w	r3, [sl]
 8009b04:	2b2a      	cmp	r3, #42	; 0x2a
 8009b06:	d015      	beq.n	8009b34 <_vfiprintf_r+0x13c>
 8009b08:	9a07      	ldr	r2, [sp, #28]
 8009b0a:	4654      	mov	r4, sl
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f04f 0c0a 	mov.w	ip, #10
 8009b12:	4621      	mov	r1, r4
 8009b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b18:	3b30      	subs	r3, #48	; 0x30
 8009b1a:	2b09      	cmp	r3, #9
 8009b1c:	d94e      	bls.n	8009bbc <_vfiprintf_r+0x1c4>
 8009b1e:	b1b0      	cbz	r0, 8009b4e <_vfiprintf_r+0x156>
 8009b20:	9207      	str	r2, [sp, #28]
 8009b22:	e014      	b.n	8009b4e <_vfiprintf_r+0x156>
 8009b24:	eba0 0308 	sub.w	r3, r0, r8
 8009b28:	fa09 f303 	lsl.w	r3, r9, r3
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	46a2      	mov	sl, r4
 8009b32:	e7d2      	b.n	8009ada <_vfiprintf_r+0xe2>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	1d19      	adds	r1, r3, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	9103      	str	r1, [sp, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	bfbb      	ittet	lt
 8009b40:	425b      	neglt	r3, r3
 8009b42:	f042 0202 	orrlt.w	r2, r2, #2
 8009b46:	9307      	strge	r3, [sp, #28]
 8009b48:	9307      	strlt	r3, [sp, #28]
 8009b4a:	bfb8      	it	lt
 8009b4c:	9204      	strlt	r2, [sp, #16]
 8009b4e:	7823      	ldrb	r3, [r4, #0]
 8009b50:	2b2e      	cmp	r3, #46	; 0x2e
 8009b52:	d10c      	bne.n	8009b6e <_vfiprintf_r+0x176>
 8009b54:	7863      	ldrb	r3, [r4, #1]
 8009b56:	2b2a      	cmp	r3, #42	; 0x2a
 8009b58:	d135      	bne.n	8009bc6 <_vfiprintf_r+0x1ce>
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	1d1a      	adds	r2, r3, #4
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	9203      	str	r2, [sp, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	bfb8      	it	lt
 8009b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b6a:	3402      	adds	r4, #2
 8009b6c:	9305      	str	r3, [sp, #20]
 8009b6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c54 <_vfiprintf_r+0x25c>
 8009b72:	7821      	ldrb	r1, [r4, #0]
 8009b74:	2203      	movs	r2, #3
 8009b76:	4650      	mov	r0, sl
 8009b78:	f7f6 fb32 	bl	80001e0 <memchr>
 8009b7c:	b140      	cbz	r0, 8009b90 <_vfiprintf_r+0x198>
 8009b7e:	2340      	movs	r3, #64	; 0x40
 8009b80:	eba0 000a 	sub.w	r0, r0, sl
 8009b84:	fa03 f000 	lsl.w	r0, r3, r0
 8009b88:	9b04      	ldr	r3, [sp, #16]
 8009b8a:	4303      	orrs	r3, r0
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b94:	482c      	ldr	r0, [pc, #176]	; (8009c48 <_vfiprintf_r+0x250>)
 8009b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b9a:	2206      	movs	r2, #6
 8009b9c:	f7f6 fb20 	bl	80001e0 <memchr>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d03f      	beq.n	8009c24 <_vfiprintf_r+0x22c>
 8009ba4:	4b29      	ldr	r3, [pc, #164]	; (8009c4c <_vfiprintf_r+0x254>)
 8009ba6:	bb1b      	cbnz	r3, 8009bf0 <_vfiprintf_r+0x1f8>
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	3307      	adds	r3, #7
 8009bac:	f023 0307 	bic.w	r3, r3, #7
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb6:	443b      	add	r3, r7
 8009bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bba:	e767      	b.n	8009a8c <_vfiprintf_r+0x94>
 8009bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	2001      	movs	r0, #1
 8009bc4:	e7a5      	b.n	8009b12 <_vfiprintf_r+0x11a>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	3401      	adds	r4, #1
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f04f 0c0a 	mov.w	ip, #10
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bd8:	3a30      	subs	r2, #48	; 0x30
 8009bda:	2a09      	cmp	r2, #9
 8009bdc:	d903      	bls.n	8009be6 <_vfiprintf_r+0x1ee>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0c5      	beq.n	8009b6e <_vfiprintf_r+0x176>
 8009be2:	9105      	str	r1, [sp, #20]
 8009be4:	e7c3      	b.n	8009b6e <_vfiprintf_r+0x176>
 8009be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bea:	4604      	mov	r4, r0
 8009bec:	2301      	movs	r3, #1
 8009bee:	e7f0      	b.n	8009bd2 <_vfiprintf_r+0x1da>
 8009bf0:	ab03      	add	r3, sp, #12
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	462a      	mov	r2, r5
 8009bf6:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <_vfiprintf_r+0x258>)
 8009bf8:	a904      	add	r1, sp, #16
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7fd fc34 	bl	8007468 <_printf_float>
 8009c00:	4607      	mov	r7, r0
 8009c02:	1c78      	adds	r0, r7, #1
 8009c04:	d1d6      	bne.n	8009bb4 <_vfiprintf_r+0x1bc>
 8009c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c08:	07d9      	lsls	r1, r3, #31
 8009c0a:	d405      	bmi.n	8009c18 <_vfiprintf_r+0x220>
 8009c0c:	89ab      	ldrh	r3, [r5, #12]
 8009c0e:	059a      	lsls	r2, r3, #22
 8009c10:	d402      	bmi.n	8009c18 <_vfiprintf_r+0x220>
 8009c12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c14:	f7ff f9d0 	bl	8008fb8 <__retarget_lock_release_recursive>
 8009c18:	89ab      	ldrh	r3, [r5, #12]
 8009c1a:	065b      	lsls	r3, r3, #25
 8009c1c:	f53f af12 	bmi.w	8009a44 <_vfiprintf_r+0x4c>
 8009c20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c22:	e711      	b.n	8009a48 <_vfiprintf_r+0x50>
 8009c24:	ab03      	add	r3, sp, #12
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	462a      	mov	r2, r5
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <_vfiprintf_r+0x258>)
 8009c2c:	a904      	add	r1, sp, #16
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7fd febe 	bl	80079b0 <_printf_i>
 8009c34:	e7e4      	b.n	8009c00 <_vfiprintf_r+0x208>
 8009c36:	bf00      	nop
 8009c38:	0800a094 	.word	0x0800a094
 8009c3c:	0800a0b4 	.word	0x0800a0b4
 8009c40:	0800a074 	.word	0x0800a074
 8009c44:	0800a22c 	.word	0x0800a22c
 8009c48:	0800a236 	.word	0x0800a236
 8009c4c:	08007469 	.word	0x08007469
 8009c50:	080099d3 	.word	0x080099d3
 8009c54:	0800a232 	.word	0x0800a232

08009c58 <_sbrk_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d06      	ldr	r5, [pc, #24]	; (8009c74 <_sbrk_r+0x1c>)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4604      	mov	r4, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	f7f7 fed0 	bl	8001a08 <_sbrk>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d102      	bne.n	8009c72 <_sbrk_r+0x1a>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	b103      	cbz	r3, 8009c72 <_sbrk_r+0x1a>
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	2000060c 	.word	0x2000060c

08009c78 <__sread>:
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c80:	f000 f8e2 	bl	8009e48 <_read_r>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	bfab      	itete	ge
 8009c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c8c:	181b      	addge	r3, r3, r0
 8009c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c92:	bfac      	ite	ge
 8009c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c96:	81a3      	strhlt	r3, [r4, #12]
 8009c98:	bd10      	pop	{r4, pc}

08009c9a <__swrite>:
 8009c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	898b      	ldrh	r3, [r1, #12]
 8009ca2:	05db      	lsls	r3, r3, #23
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4616      	mov	r6, r2
 8009caa:	d505      	bpl.n	8009cb8 <__swrite+0x1e>
 8009cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f000 f898 	bl	8009de8 <_lseek_r>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cc2:	81a3      	strh	r3, [r4, #12]
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	4628      	mov	r0, r5
 8009cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cce:	f000 b817 	b.w	8009d00 <_write_r>

08009cd2 <__sseek>:
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cda:	f000 f885 	bl	8009de8 <_lseek_r>
 8009cde:	1c43      	adds	r3, r0, #1
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	bf15      	itete	ne
 8009ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cee:	81a3      	strheq	r3, [r4, #12]
 8009cf0:	bf18      	it	ne
 8009cf2:	81a3      	strhne	r3, [r4, #12]
 8009cf4:	bd10      	pop	{r4, pc}

08009cf6 <__sclose>:
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	f000 b831 	b.w	8009d60 <_close_r>
	...

08009d00 <_write_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d07      	ldr	r5, [pc, #28]	; (8009d20 <_write_r+0x20>)
 8009d04:	4604      	mov	r4, r0
 8009d06:	4608      	mov	r0, r1
 8009d08:	4611      	mov	r1, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	602a      	str	r2, [r5, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f7f7 fe29 	bl	8001966 <_write>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d102      	bne.n	8009d1e <_write_r+0x1e>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	b103      	cbz	r3, 8009d1e <_write_r+0x1e>
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	bd38      	pop	{r3, r4, r5, pc}
 8009d20:	2000060c 	.word	0x2000060c

08009d24 <__assert_func>:
 8009d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d26:	4614      	mov	r4, r2
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4b09      	ldr	r3, [pc, #36]	; (8009d50 <__assert_func+0x2c>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4605      	mov	r5, r0
 8009d30:	68d8      	ldr	r0, [r3, #12]
 8009d32:	b14c      	cbz	r4, 8009d48 <__assert_func+0x24>
 8009d34:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <__assert_func+0x30>)
 8009d36:	9100      	str	r1, [sp, #0]
 8009d38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d3c:	4906      	ldr	r1, [pc, #24]	; (8009d58 <__assert_func+0x34>)
 8009d3e:	462b      	mov	r3, r5
 8009d40:	f000 f81e 	bl	8009d80 <fiprintf>
 8009d44:	f000 f89f 	bl	8009e86 <abort>
 8009d48:	4b04      	ldr	r3, [pc, #16]	; (8009d5c <__assert_func+0x38>)
 8009d4a:	461c      	mov	r4, r3
 8009d4c:	e7f3      	b.n	8009d36 <__assert_func+0x12>
 8009d4e:	bf00      	nop
 8009d50:	2000000c 	.word	0x2000000c
 8009d54:	0800a23d 	.word	0x0800a23d
 8009d58:	0800a24a 	.word	0x0800a24a
 8009d5c:	0800a278 	.word	0x0800a278

08009d60 <_close_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d06      	ldr	r5, [pc, #24]	; (8009d7c <_close_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f7 fe17 	bl	800199e <_close>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_close_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_close_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	2000060c 	.word	0x2000060c

08009d80 <fiprintf>:
 8009d80:	b40e      	push	{r1, r2, r3}
 8009d82:	b503      	push	{r0, r1, lr}
 8009d84:	4601      	mov	r1, r0
 8009d86:	ab03      	add	r3, sp, #12
 8009d88:	4805      	ldr	r0, [pc, #20]	; (8009da0 <fiprintf+0x20>)
 8009d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f7ff fe31 	bl	80099f8 <_vfiprintf_r>
 8009d96:	b002      	add	sp, #8
 8009d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d9c:	b003      	add	sp, #12
 8009d9e:	4770      	bx	lr
 8009da0:	2000000c 	.word	0x2000000c

08009da4 <_fstat_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d07      	ldr	r5, [pc, #28]	; (8009dc4 <_fstat_r+0x20>)
 8009da8:	2300      	movs	r3, #0
 8009daa:	4604      	mov	r4, r0
 8009dac:	4608      	mov	r0, r1
 8009dae:	4611      	mov	r1, r2
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	f7f7 fe00 	bl	80019b6 <_fstat>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d102      	bne.n	8009dc0 <_fstat_r+0x1c>
 8009dba:	682b      	ldr	r3, [r5, #0]
 8009dbc:	b103      	cbz	r3, 8009dc0 <_fstat_r+0x1c>
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	bd38      	pop	{r3, r4, r5, pc}
 8009dc2:	bf00      	nop
 8009dc4:	2000060c 	.word	0x2000060c

08009dc8 <_isatty_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d06      	ldr	r5, [pc, #24]	; (8009de4 <_isatty_r+0x1c>)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	f7f7 fdff 	bl	80019d6 <_isatty>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_isatty_r+0x1a>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_isatty_r+0x1a>
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	2000060c 	.word	0x2000060c

08009de8 <_lseek_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d07      	ldr	r5, [pc, #28]	; (8009e08 <_lseek_r+0x20>)
 8009dec:	4604      	mov	r4, r0
 8009dee:	4608      	mov	r0, r1
 8009df0:	4611      	mov	r1, r2
 8009df2:	2200      	movs	r2, #0
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f7f7 fdf8 	bl	80019ec <_lseek>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_lseek_r+0x1e>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_lseek_r+0x1e>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	2000060c 	.word	0x2000060c

08009e0c <__ascii_mbtowc>:
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	b901      	cbnz	r1, 8009e12 <__ascii_mbtowc+0x6>
 8009e10:	a901      	add	r1, sp, #4
 8009e12:	b142      	cbz	r2, 8009e26 <__ascii_mbtowc+0x1a>
 8009e14:	b14b      	cbz	r3, 8009e2a <__ascii_mbtowc+0x1e>
 8009e16:	7813      	ldrb	r3, [r2, #0]
 8009e18:	600b      	str	r3, [r1, #0]
 8009e1a:	7812      	ldrb	r2, [r2, #0]
 8009e1c:	1e10      	subs	r0, r2, #0
 8009e1e:	bf18      	it	ne
 8009e20:	2001      	movne	r0, #1
 8009e22:	b002      	add	sp, #8
 8009e24:	4770      	bx	lr
 8009e26:	4610      	mov	r0, r2
 8009e28:	e7fb      	b.n	8009e22 <__ascii_mbtowc+0x16>
 8009e2a:	f06f 0001 	mvn.w	r0, #1
 8009e2e:	e7f8      	b.n	8009e22 <__ascii_mbtowc+0x16>

08009e30 <__malloc_lock>:
 8009e30:	4801      	ldr	r0, [pc, #4]	; (8009e38 <__malloc_lock+0x8>)
 8009e32:	f7ff b8c0 	b.w	8008fb6 <__retarget_lock_acquire_recursive>
 8009e36:	bf00      	nop
 8009e38:	20000600 	.word	0x20000600

08009e3c <__malloc_unlock>:
 8009e3c:	4801      	ldr	r0, [pc, #4]	; (8009e44 <__malloc_unlock+0x8>)
 8009e3e:	f7ff b8bb 	b.w	8008fb8 <__retarget_lock_release_recursive>
 8009e42:	bf00      	nop
 8009e44:	20000600 	.word	0x20000600

08009e48 <_read_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	; (8009e68 <_read_r+0x20>)
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	2200      	movs	r2, #0
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f7f7 fd68 	bl	800192c <_read>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_read_r+0x1e>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_read_r+0x1e>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	2000060c 	.word	0x2000060c

08009e6c <__ascii_wctomb>:
 8009e6c:	b149      	cbz	r1, 8009e82 <__ascii_wctomb+0x16>
 8009e6e:	2aff      	cmp	r2, #255	; 0xff
 8009e70:	bf85      	ittet	hi
 8009e72:	238a      	movhi	r3, #138	; 0x8a
 8009e74:	6003      	strhi	r3, [r0, #0]
 8009e76:	700a      	strbls	r2, [r1, #0]
 8009e78:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e7c:	bf98      	it	ls
 8009e7e:	2001      	movls	r0, #1
 8009e80:	4770      	bx	lr
 8009e82:	4608      	mov	r0, r1
 8009e84:	4770      	bx	lr

08009e86 <abort>:
 8009e86:	b508      	push	{r3, lr}
 8009e88:	2006      	movs	r0, #6
 8009e8a:	f000 f82b 	bl	8009ee4 <raise>
 8009e8e:	2001      	movs	r0, #1
 8009e90:	f7f7 fd42 	bl	8001918 <_exit>

08009e94 <_raise_r>:
 8009e94:	291f      	cmp	r1, #31
 8009e96:	b538      	push	{r3, r4, r5, lr}
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
 8009e9c:	d904      	bls.n	8009ea8 <_raise_r+0x14>
 8009e9e:	2316      	movs	r3, #22
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009eaa:	b112      	cbz	r2, 8009eb2 <_raise_r+0x1e>
 8009eac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009eb0:	b94b      	cbnz	r3, 8009ec6 <_raise_r+0x32>
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 f830 	bl	8009f18 <_getpid_r>
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4601      	mov	r1, r0
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ec2:	f000 b817 	b.w	8009ef4 <_kill_r>
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d00a      	beq.n	8009ee0 <_raise_r+0x4c>
 8009eca:	1c59      	adds	r1, r3, #1
 8009ecc:	d103      	bne.n	8009ed6 <_raise_r+0x42>
 8009ece:	2316      	movs	r3, #22
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	e7e7      	b.n	8009ea6 <_raise_r+0x12>
 8009ed6:	2400      	movs	r4, #0
 8009ed8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009edc:	4628      	mov	r0, r5
 8009ede:	4798      	blx	r3
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e7e0      	b.n	8009ea6 <_raise_r+0x12>

08009ee4 <raise>:
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <raise+0xc>)
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	f7ff bfd3 	b.w	8009e94 <_raise_r>
 8009eee:	bf00      	nop
 8009ef0:	2000000c 	.word	0x2000000c

08009ef4 <_kill_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d07      	ldr	r5, [pc, #28]	; (8009f14 <_kill_r+0x20>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	4611      	mov	r1, r2
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	f7f7 fcf9 	bl	80018f8 <_kill>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d102      	bne.n	8009f10 <_kill_r+0x1c>
 8009f0a:	682b      	ldr	r3, [r5, #0]
 8009f0c:	b103      	cbz	r3, 8009f10 <_kill_r+0x1c>
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	bd38      	pop	{r3, r4, r5, pc}
 8009f12:	bf00      	nop
 8009f14:	2000060c 	.word	0x2000060c

08009f18 <_getpid_r>:
 8009f18:	f7f7 bce6 	b.w	80018e8 <_getpid>

08009f1c <_init>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr

08009f28 <_fini>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr
