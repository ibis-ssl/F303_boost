
orion_F303_boost_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800bff8  0800bff8  0001bff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5cc  0800c5cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5cc  0800c5cc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5cc  0800c5cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          0000064c  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000828  20000828  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018eb1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003853  00000000  00000000  000390bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  0003dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bf3  00000000  00000000  0003efb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7f9  00000000  00000000  00060bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6bed  00000000  00000000  0007c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142f91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006478  00000000  00000000  00142fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfe0 	.word	0x0800bfe0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800bfe0 	.word	0x0800bfe0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2228      	movs	r2, #40	; 0x28
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f008 fb53 	bl	800930c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c80:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb6:	f002 f811 	bl	8002cdc <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f001 fb05 	bl	80022ce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cd0:	f002 feb6 	bl	8003a40 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000cda:	f001 faf8 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d1a:	f002 fb09 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d24:	f001 fad3 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d36:	f002 fafb 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000d40:	f001 fac5 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d44:	2303      	movs	r3, #3
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d52:	f002 faed 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000d5c:	f001 fab7 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	; 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001f8 	.word	0x200001f8

08000d6c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2228      	movs	r2, #40	; 0x28
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f008 fac1 	bl	800930c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d8c:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <MX_ADC3_Init+0x124>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd6:	482d      	ldr	r0, [pc, #180]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd8:	f001 ff80 	bl	8002cdc <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8000de2:	f001 fa74 	bl	80022ce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000df2:	f002 fe25 	bl	8003a40 <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000dfc:	f001 fa67 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e10:	2306      	movs	r3, #6
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e3c:	f002 fa78 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000e46:	f001 fa42 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e58:	f002 fa6a 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8000e62:	f001 fa34 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000e66:	230c      	movs	r3, #12
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e74:	f002 fa5c 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8000e7e:	f001 fa26 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000248 	.word	0x20000248
 8000e90:	50000400 	.word	0x50000400

08000e94 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2228      	movs	r2, #40	; 0x28
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f008 fa33 	bl	800930c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <MX_ADC4_Init+0xdc>)
 8000eaa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ef4:	f001 fef2 	bl	8002cdc <HAL_ADC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC4_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f001 f9e6 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f02:	2303      	movs	r3, #3
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000f12:	2306      	movs	r3, #6
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f38:	f002 f9fa 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC4_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f001 f9c4 	bl	80022ce <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f54:	f002 f9ec 	bl	8003330 <HAL_ADCEx_InjectedConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000f5e:	f001 f9b6 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000298 	.word	0x20000298
 8000f70:	50000500 	.word	0x50000500

08000f74 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f94:	d14d      	bne.n	8001032 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a84      	ldr	r2, [pc, #528]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b82      	ldr	r3, [pc, #520]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	623b      	str	r3, [r7, #32]
 8000fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f003 ff98 	bl	8004f10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe0:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe2:	4a74      	ldr	r2, [pc, #464]	; (80011b4 <HAL_ADC_MspInit+0x240>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe6:	4b72      	ldr	r3, [pc, #456]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001000:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001008:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800100a:	2220      	movs	r2, #32
 800100c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	4866      	ldr	r0, [pc, #408]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001016:	f003 fd50 	bl	8004aba <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001020:	f001 f955 	bl	80022ce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a62      	ldr	r2, [pc, #392]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
 800102a:	4a61      	ldr	r2, [pc, #388]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001030:	e0b7      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC3)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_ADC_MspInit+0x244>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d157      	bne.n	80010ec <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800103c:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <HAL_ADC_MspInit+0x248>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a5e      	ldr	r2, [pc, #376]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001044:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10b      	bne.n	8001066 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800104e:	4b57      	ldr	r3, [pc, #348]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BOOST_V_Pin|BATT_CS_Pin|TEMP_COIL_1_Pin;
 800107e:	f242 0303 	movw	r3, #8195	; 0x2003
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	484b      	ldr	r0, [pc, #300]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 8001094:	f003 ff3c 	bl	8004f10 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 800109a:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_ADC_MspInit+0x254>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010be:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010ce:	483d      	ldr	r0, [pc, #244]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010d0:	f003 fcf3 	bl	8004aba <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 80010da:	f001 f8f8 	bl	80022ce <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
 80010e4:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80010ea:	e05a      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC4)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a36      	ldr	r2, [pc, #216]	; (80011cc <HAL_ADC_MspInit+0x258>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d155      	bne.n	80011a2 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10b      	bne.n	8001120 <HAL_ADC_MspInit+0x1ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001112:	6153      	str	r3, [r2, #20]
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	6153      	str	r3, [r2, #20]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_FET_Pin|TEMP_COIL_2_Pin;
 8001138:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 800114e:	f003 fedf 	bl	8004f10 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001154:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x260>)
 8001156:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800117c:	2220      	movs	r2, #32
 800117e:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001186:	4812      	ldr	r0, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001188:	f003 fc97 	bl	8004aba <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001192:	f001 f89c 	bl	80022ce <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80011a2:	bf00      	nop
 80011a4:	3738      	adds	r7, #56	; 0x38
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	200002e8 	.word	0x200002e8
 80011b4:	40020008 	.word	0x40020008
 80011b8:	50000400 	.word	0x50000400
 80011bc:	200003b4 	.word	0x200003b4
 80011c0:	48000400 	.word	0x48000400
 80011c4:	2000032c 	.word	0x2000032c
 80011c8:	40020458 	.word	0x40020458
 80011cc:	50000500 	.word	0x50000500
 80011d0:	20000370 	.word	0x20000370
 80011d4:	4002041c 	.word	0x4002041c

080011d8 <start_transmit>:
int8_t delta_x, delta_y;
uint8_t quality;
int32_t integral_x, integral_y;

void start_transmit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f004 f825 	bl	8005234 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <end_transmit>:

void end_transmit(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f004 f81a 	bl	8005234 <HAL_GPIO_WritePin>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <reset>:


static void reset(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af02      	add	r7, sp, #8
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <reset+0x48>)
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <reset+0x4c>)
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <reset+0x50>)
 8001218:	f005 fcf3 	bl	8006c02 <HAL_SPI_TransmitReceive>
    end_transmit();
 800121c:	f7ff ffe7 	bl	80011ee <end_transmit>
    // set clk,nss polaryty


    HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f001 fd37 	bl	8002c94 <HAL_Delay>

    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <reset+0x54>)
 800122c:	f004 f802 	bl	8005234 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f001 fd2f 	bl	8002c94 <HAL_Delay>
    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <reset+0x54>)
 800123c:	f003 fffa 	bl	8005234 <HAL_GPIO_WritePin>

    HAL_Delay(250); // waiting for self-test
 8001240:	20fa      	movs	r0, #250	; 0xfa
 8001242:	f001 fd27 	bl	8002c94 <HAL_Delay>
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200003c8 	.word	0x200003c8
 8001250:	200003b8 	.word	0x200003b8
 8001254:	20000600 	.word	0x20000600
 8001258:	48000400 	.word	0x48000400

0800125c <is_connect_ADNS3080>:

bool is_connect_ADNS3080(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af02      	add	r7, sp, #8
    HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2110      	movs	r1, #16
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f003 ffe3 	bl	8005234 <HAL_GPIO_WritePin>

    reset();
 800126e:	f7ff ffc9 	bl	8001204 <reset>


    start_transmit();
 8001272:	f7ff ffb1 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_PRODUCT_ID;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <is_connect_ADNS3080+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 800127c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2302      	movs	r3, #2
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <is_connect_ADNS3080+0x5c>)
 8001286:	490b      	ldr	r1, [pc, #44]	; (80012b4 <is_connect_ADNS3080+0x58>)
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <is_connect_ADNS3080+0x60>)
 800128a:	f005 fcba 	bl	8006c02 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 800128e:	f7ff ffae 	bl	80011ee <end_transmit>

    printf("SPI ID : %d\n", rbuf[1]);
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <is_connect_ADNS3080+0x5c>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	4619      	mov	r1, r3
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <is_connect_ADNS3080+0x64>)
 800129a:	f008 fca9 	bl	8009bf0 <iprintf>

    if (rbuf[1] == ADNS3080_PRODUCT_ID_VALUE)
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <is_connect_ADNS3080+0x5c>)
 80012a0:	785b      	ldrb	r3, [r3, #1]
 80012a2:	2b17      	cmp	r3, #23
 80012a4:	d101      	bne.n	80012aa <is_connect_ADNS3080+0x4e>
    {
        return true;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <is_connect_ADNS3080+0x50>
    }
    else
    {
        return false;
 80012aa:	2300      	movs	r3, #0
    }
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200003b8 	.word	0x200003b8
 80012b8:	200003c8 	.word	0x200003c8
 80012bc:	20000600 	.word	0x20000600
 80012c0:	0800bff8 	.word	0x0800bff8

080012c4 <init_ADNS3080>:

void init_ADNS3080(bool ips_1600)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    delta_x = 0;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <init_ADNS3080+0x8c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    delta_y = 0;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <init_ADNS3080+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
    quality = 0;
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <init_ADNS3080+0x94>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    integral_x = 0;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <init_ADNS3080+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
    integral_y = 0;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <init_ADNS3080+0x9c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
    reset();
 80012ec:	f7ff ff8a 	bl	8001204 <reset>


    start_transmit();
 80012f0:	f7ff ff72 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_REG_WRITE & ADNS3080_CONFIGURATION_BITS; // config write
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <init_ADNS3080+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <init_ADNS3080+0xa4>)
 8001304:	4917      	ldr	r1, [pc, #92]	; (8001364 <init_ADNS3080+0xa0>)
 8001306:	4819      	ldr	r0, [pc, #100]	; (800136c <init_ADNS3080+0xa8>)
 8001308:	f005 fc7b 	bl	8006c02 <HAL_SPI_TransmitReceive>

    //delay >75us
    for (int i = 0; i < 1000; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e002      	b.n	8001318 <init_ADNS3080+0x54>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800131e:	dbf8      	blt.n	8001312 <init_ADNS3080+0x4e>
    {
    }

    uint8_t mouse_config = rbuf[1];
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <init_ADNS3080+0xa4>)
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	72fb      	strb	r3, [r7, #11]
    sbuf[0] = mouse_config | ADNS3080_BIT_1600IPS; // set 1600 ips
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <init_ADNS3080+0xa0>)
 8001330:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <init_ADNS3080+0xa4>)
 800133c:	4909      	ldr	r1, [pc, #36]	; (8001364 <init_ADNS3080+0xa0>)
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <init_ADNS3080+0xa8>)
 8001340:	f005 fc5f 	bl	8006c02 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001344:	f7ff ff53 	bl	80011ee <end_transmit>
}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200003d8 	.word	0x200003d8
 8001354:	200003d9 	.word	0x200003d9
 8001358:	200003da 	.word	0x200003da
 800135c:	200003dc 	.word	0x200003dc
 8001360:	200003e0 	.word	0x200003e0
 8001364:	200003b8 	.word	0x200003b8
 8001368:	200003c8 	.word	0x200003c8
 800136c:	20000600 	.word	0x20000600

08001370 <update_ADNS3080>:


void update_ADNS3080(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af02      	add	r7, sp, #8
    
    start_transmit();
 8001376:	f7ff ff2f 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_MOTION_BURST;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <update_ADNS3080+0x78>)
 800137c:	2250      	movs	r2, #80	; 0x50
 800137e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 8, 1000);
 8001380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2308      	movs	r3, #8
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <update_ADNS3080+0x7c>)
 800138a:	4917      	ldr	r1, [pc, #92]	; (80013e8 <update_ADNS3080+0x78>)
 800138c:	4818      	ldr	r0, [pc, #96]	; (80013f0 <update_ADNS3080+0x80>)
 800138e:	f005 fc38 	bl	8006c02 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001392:	f7ff ff2c 	bl	80011ee <end_transmit>
    
    if (rbuf[1] & ADNS3080_BIT_MOTION)
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <update_ADNS3080+0x7c>)
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da1b      	bge.n	80013d8 <update_ADNS3080+0x68>
    {
        delta_x = (int8_t)rbuf[2];
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <update_ADNS3080+0x7c>)
 80013a2:	789b      	ldrb	r3, [r3, #2]
 80013a4:	b25a      	sxtb	r2, r3
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <update_ADNS3080+0x84>)
 80013a8:	701a      	strb	r2, [r3, #0]
        delta_y = (int8_t)rbuf[3];
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <update_ADNS3080+0x7c>)
 80013ac:	78db      	ldrb	r3, [r3, #3]
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <update_ADNS3080+0x88>)
 80013b2:	701a      	strb	r2, [r3, #0]
        integral_x += delta_x;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <update_ADNS3080+0x84>)
 80013b6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <update_ADNS3080+0x8c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <update_ADNS3080+0x8c>)
 80013c4:	6013      	str	r3, [r2, #0]
        integral_y += delta_y;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <update_ADNS3080+0x88>)
 80013c8:	f993 3000 	ldrsb.w	r3, [r3]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <update_ADNS3080+0x90>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <update_ADNS3080+0x90>)
 80013d6:	6013      	str	r3, [r2, #0]
    }else{

    }
    quality = rbuf[4];
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <update_ADNS3080+0x7c>)
 80013da:	791a      	ldrb	r2, [r3, #4]
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <update_ADNS3080+0x94>)
 80013de:	701a      	strb	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200003b8 	.word	0x200003b8
 80013ec:	200003c8 	.word	0x200003c8
 80013f0:	20000600 	.word	0x20000600
 80013f4:	200003d8 	.word	0x200003d8
 80013f8:	200003d9 	.word	0x200003d9
 80013fc:	200003dc 	.word	0x200003dc
 8001400:	200003e0 	.word	0x200003e0
 8001404:	200003da 	.word	0x200003da

08001408 <get_DeltaX_ADNS3080>:


int8_t get_DeltaX_ADNS3080(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
    return delta_x;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <get_DeltaX_ADNS3080+0x14>)
 800140e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	200003d8 	.word	0x200003d8

08001420 <get_DeltaY_ADNS3080>:
int8_t get_DeltaY_ADNS3080(void){
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
    return delta_y;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <get_DeltaY_ADNS3080+0x14>)
 8001426:	f993 3000 	ldrsb.w	r3, [r3]
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	200003d9 	.word	0x200003d9

08001438 <get_Qualty_ADNS3080>:
uint8_t get_Qualty_ADNS3080(void){
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
    return quality;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <get_Qualty_ADNS3080+0x14>)
 800143e:	781b      	ldrb	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200003da 	.word	0x200003da

08001450 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_CAN_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <MX_CAN_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_CAN_Init+0x64>)
 800145c:	2202      	movs	r2, #2
 800145e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_CAN_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_CAN_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_CAN_Init+0x64>)
 800146e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001472:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_CAN_Init+0x64>)
 8001476:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800147a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_CAN_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_CAN_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_CAN_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_CAN_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_CAN_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_CAN_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_CAN_Init+0x64>)
 80014a2:	f002 fc89 	bl	8003db8 <HAL_CAN_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80014ac:	f000 ff0f 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200003e4 	.word	0x200003e4
 80014b8:	40006400 	.word	0x40006400

080014bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1c      	ldr	r2, [pc, #112]	; (800154c <HAL_CAN_MspInit+0x90>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d131      	bne.n	8001542 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_CAN_MspInit+0x94>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <HAL_CAN_MspInit+0x94>)
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_CAN_MspInit+0x94>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_CAN_MspInit+0x94>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_CAN_MspInit+0x94>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_CAN_MspInit+0x94>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800150e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001520:	2309      	movs	r3, #9
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f003 fcef 	bl	8004f10 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2101      	movs	r1, #1
 8001536:	2014      	movs	r0, #20
 8001538:	f003 fa89 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800153c:	2014      	movs	r0, #20
 800153e:	f003 faa2 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40006400 	.word	0x40006400
 8001550:	40021000 	.word	0x40021000

08001554 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x00) << 5;
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x100) << 5;
 800156a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x010) << 5;
 8001570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001574:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x110) << 5;
 8001576:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800157a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001580:	2301      	movs	r3, #1
 8001582:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <CAN_Filter_Init+0x64>)
 800158e:	f002 fd0e 	bl	8003fae <HAL_CAN_ConfigFilter>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <CAN_Filter_Init+0x48>
  {
    Error_Handler();
 8001598:	f000 fe99 	bl	80022ce <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800159c:	2102      	movs	r1, #2
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <CAN_Filter_Init+0x64>)
 80015a0:	f002 ff25 	bl	80043ee <HAL_CAN_ActivateNotification>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <CAN_Filter_Init+0x5a>
  {
    Error_Handler();
 80015aa:	f000 fe90 	bl	80022ce <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	; 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200003e4 	.word	0x200003e4

080015bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <MX_DMA_Init+0x80>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <MX_DMA_Init+0x80>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6153      	str	r3, [r2, #20]
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <MX_DMA_Init+0x80>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_DMA_Init+0x80>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <MX_DMA_Init+0x80>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6153      	str	r3, [r2, #20]
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_DMA_Init+0x80>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	200b      	movs	r0, #11
 80015f8:	f003 fa29 	bl	8004a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015fc:	200b      	movs	r0, #11
 80015fe:	f003 fa42 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	200e      	movs	r0, #14
 8001608:	f003 fa21 	bl	8004a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800160c:	200e      	movs	r0, #14
 800160e:	f003 fa3a 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2039      	movs	r0, #57	; 0x39
 8001618:	f003 fa19 	bl	8004a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800161c:	2039      	movs	r0, #57	; 0x39
 800161e:	f003 fa32 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	203c      	movs	r0, #60	; 0x3c
 8001628:	f003 fa11 	bl	8004a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800162c:	203c      	movs	r0, #60	; 0x3c
 800162e:	f003 fa2a 	bl	8004a86 <HAL_NVIC_EnableIRQ>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <MX_GPIO_Init+0x118>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a3f      	ldr	r2, [pc, #252]	; (8001758 <MX_GPIO_Init+0x118>)
 800165c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001660:	6153      	str	r3, [r2, #20]
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <MX_GPIO_Init+0x118>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <MX_GPIO_Init+0x118>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a39      	ldr	r2, [pc, #228]	; (8001758 <MX_GPIO_Init+0x118>)
 8001674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <MX_GPIO_Init+0x118>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_GPIO_Init+0x118>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <MX_GPIO_Init+0x118>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_GPIO_Init+0x118>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_GPIO_Init+0x118>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <MX_GPIO_Init+0x118>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6153      	str	r3, [r2, #20]
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_GPIO_Init+0x118>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016bc:	4827      	ldr	r0, [pc, #156]	; (800175c <MX_GPIO_Init+0x11c>)
 80016be:	f003 fdb9 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CURRENT_Pin|MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f248 0110 	movw	r1, #32784	; 0x8010
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f003 fdb2 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POWER_SW_EN_Pin|MOUSE_RST_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2144      	movs	r1, #68	; 0x44
 80016d4:	4822      	ldr	r0, [pc, #136]	; (8001760 <MX_GPIO_Init+0x120>)
 80016d6:	f003 fdad 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80016da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	481a      	ldr	r0, [pc, #104]	; (800175c <MX_GPIO_Init+0x11c>)
 80016f4:	f003 fc0c 	bl	8004f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_CURRENT_Pin|MOUSE_NSS_Pin;
 80016f8:	f248 0310 	movw	r3, #32784	; 0x8010
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f003 fbfc 	bl	8004f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_SW_EN_Pin|MOUSE_RST_Pin;
 8001718:	2344      	movs	r3, #68	; 0x44
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_GPIO_Init+0x120>)
 8001730:	f003 fbee 	bl	8004f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8001734:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800173e:	2301      	movs	r3, #1
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_GPIO_Init+0x120>)
 800174a:	f003 fbe1 	bl	8004f10 <HAL_GPIO_Init>

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800
 8001760:	48000400 	.word	0x48000400

08001764 <_write>:
#define UART_TEMP_BUF_SIZE (200)
char first_buf[UART_TEMP_BUF_SIZE];
char temp_buf[UART_TEMP_BUF_SIZE];
int re_queue_len = 0;
int _write(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	if (huart1.hdmatx->State == HAL_DMA_BURST_STATE_BUSY)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_write+0x5c>)
 8001772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001774:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001778:	2b02      	cmp	r3, #2
 800177a:	d10f      	bne.n	800179c <_write+0x38>
	{
		if (len >= UART_TEMP_BUF_SIZE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2bc7      	cmp	r3, #199	; 0xc7
 8001780:	dd01      	ble.n	8001786 <_write+0x22>
			len = UART_TEMP_BUF_SIZE;
 8001782:	23c8      	movs	r3, #200	; 0xc8
 8001784:	607b      	str	r3, [r7, #4]
		memcpy(temp_buf, ptr, len);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	461a      	mov	r2, r3
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <_write+0x60>)
 800178e:	f007 fdaf 	bl	80092f0 <memcpy>
		re_queue_len = len;
 8001792:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <_write+0x64>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6013      	str	r3, [r2, #0]
		return len;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e00d      	b.n	80017b8 <_write+0x54>
	}
	memcpy(first_buf, ptr, len);							   // 8ms
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <_write+0x68>)
 80017a4:	f007 fda4 	bl	80092f0 <memcpy>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, len); // 2ms
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4907      	ldr	r1, [pc, #28]	; (80017cc <_write+0x68>)
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <_write+0x5c>)
 80017b2:	f006 fcf7 	bl	80081a4 <HAL_UART_Transmit_DMA>
	return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000074c 	.word	0x2000074c
 80017c4:	200004d4 	.word	0x200004d4
 80017c8:	2000059c 	.word	0x2000059c
 80017cc:	2000040c 	.word	0x2000040c

080017d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if (re_queue_len)
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_UART_TxCpltCallback+0x30>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00a      	beq.n	80017f6 <HAL_UART_TxCpltCallback+0x26>
	{

		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)temp_buf, re_queue_len);
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <HAL_UART_TxCpltCallback+0x30>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <HAL_UART_TxCpltCallback+0x34>)
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <HAL_UART_TxCpltCallback+0x38>)
 80017ec:	f006 fcda 	bl	80081a4 <HAL_UART_Transmit_DMA>
		re_queue_len = 0;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_UART_TxCpltCallback+0x30>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
	}
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000059c 	.word	0x2000059c
 8001804:	200004d4 	.word	0x200004d4
 8001808:	2000074c 	.word	0x2000074c

0800180c <setTargetVoltage>:
	  float value;
  }power;
} uint8_to_float_t;

uint8_to_float_t rx;
void setTargetVoltage(float target){
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	ed87 0a01 	vstr	s0, [r7, #4]
	if(target > 450){
 8001816:	edd7 7a01 	vldr	s15, [r7, #4]
 800181a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001854 <setTargetVoltage+0x48>
 800181e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	dd01      	ble.n	800182c <setTargetVoltage+0x20>
		target = 450;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <setTargetVoltage+0x4c>)
 800182a:	607b      	str	r3, [r7, #4]
	}
	if(target < 20){
 800182c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001830:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d501      	bpl.n	8001842 <setTargetVoltage+0x36>
		target = 20;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <setTargetVoltage+0x50>)
 8001840:	607b      	str	r3, [r7, #4]
	}
	power_cmd.target_voltage = target;
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <setTargetVoltage+0x54>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6053      	str	r3, [r2, #4]
	//printf("set target voltage = %f\n",power_cmd.target_voltage);
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	43e10000 	.word	0x43e10000
 8001858:	43e10000 	.word	0x43e10000
 800185c:	41a00000 	.word	0x41a00000
 8001860:	200005c0 	.word	0x200005c0

08001864 <startKick>:

static uint32_t loop_cnt = 0, kick_cnt = 0;
static int boost_cnt = 0;

void startKick(uint8_t power){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
    if (kick_cnt == 0)
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <startKick+0x50>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d119      	bne.n	80018aa <startKick+0x46>
    {
      kick_cnt = 100;
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <startKick+0x50>)
 8001878:	2264      	movs	r2, #100	; 0x64
 800187a:	601a      	str	r2, [r3, #0]
      boost_cnt = 0;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <startKick+0x54>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
      power_cmd.kick_power = TIM_KICK_PERI * power / 255;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <startKick+0x58>)
 800188e:	fb82 1203 	smull	r1, r2, r2, r3
 8001892:	441a      	add	r2, r3
 8001894:	11d2      	asrs	r2, r2, #7
 8001896:	17db      	asrs	r3, r3, #31
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <startKick+0x5c>)
 800189c:	6093      	str	r3, [r2, #8]
      printf("start kick! : %d\n",power_cmd.kick_power);
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <startKick+0x5c>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <startKick+0x60>)
 80018a6:	f008 f9a3 	bl	8009bf0 <iprintf>
    }
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200005d8 	.word	0x200005d8
 80018b8:	200005dc 	.word	0x200005dc
 80018bc:	80808081 	.word	0x80808081
 80018c0:	200005c0 	.word	0x200005c0
 80018c4:	0800c024 	.word	0x0800c024

080018c8 <startCharge>:

void startCharge(){
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
    if (boost_cnt == 0 && kick_cnt == 0)
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <startCharge+0x28>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <startCharge+0x1c>
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <startCharge+0x2c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <startCharge+0x1c>
    {
      //printf("boost start!!\n");
      boost_cnt = 1000;
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <startCharge+0x28>)
 80018de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e2:	601a      	str	r2, [r3, #0]
    }
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200005dc 	.word	0x200005dc
 80018f4:	200005d8 	.word	0x200005d8

080018f8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, rx.data) != HAL_OK)
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001902:	4a2e      	ldr	r2, [pc, #184]	; (80019bc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001904:	2100      	movs	r1, #0
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f002 fc5f 	bl	80041ca <HAL_CAN_GetRxMessage>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001912:	f000 fcdc 	bl	80022ce <Error_Handler>
  }
  can_rx_cnt++;
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800191e:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId)
 8001920:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 8001928:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800192c:	d004      	beq.n	8001938 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
    default:
      break;
    }
    break;
  default:
	  break;
 800192e:	e03e      	b.n	80019ae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
    power_cmd.charge_enabled = false;
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
    break;
 8001936:	e03a      	b.n	80019ae <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
    switch (rx.power.idx)
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d834      	bhi.n	80019aa <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	08001959 	.word	0x08001959
 800194c:	08001969 	.word	0x08001969
 8001950:	08001985 	.word	0x08001985
 8001954:	0800199d 	.word	0x0800199d
    	setTargetVoltage(rx.power.value);
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800195a:	edd3 7a01 	vldr	s15, [r3, #4]
 800195e:	eeb0 0a67 	vmov.f32	s0, s15
 8001962:	f7ff ff53 	bl	800180c <setTargetVoltage>
      break;
 8001966:	e021      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    	if(rx.data[1] == 1){
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800196a:	785b      	ldrb	r3, [r3, #1]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
    		power_cmd.charge_enabled = true;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
        	startCharge();
 8001976:	f7ff ffa7 	bl	80018c8 <startCharge>
      break;
 800197a:	e017      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    		power_cmd.charge_enabled = false;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
      break;
 8001982:	e013      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    	if(rx.data[1] == 1){
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d103      	bne.n	8001994 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
    		power_cmd.kick_chip_selected = true;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800198e:	2201      	movs	r2, #1
 8001990:	705a      	strb	r2, [r3, #1]
      break;
 8001992:	e00b      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
    		power_cmd.kick_chip_selected = false;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001996:	2200      	movs	r2, #0
 8001998:	705a      	strb	r2, [r3, #1]
      break;
 800199a:	e007      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
      printf("[CAN] kick!\n");
 800199c:	480a      	ldr	r0, [pc, #40]	; (80019c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800199e:	f008 f9ad 	bl	8009cfc <puts>
  	startKick(255);
 80019a2:	20ff      	movs	r0, #255	; 0xff
 80019a4:	f7ff ff5e 	bl	8001864 <startKick>
      break;
 80019a8:	e000      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
      break;
 80019aa:	bf00      	nop
    break;
 80019ac:	bf00      	nop
  }
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200005cc 	.word	0x200005cc
 80019bc:	200005a4 	.word	0x200005a4
 80019c0:	200005a0 	.word	0x200005a0
 80019c4:	200005c0 	.word	0x200005c0
 80019c8:	0800c038 	.word	0x0800c038
 80019cc:	00000000 	.word	0x00000000

080019d0 <updateADCs>:
  HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
}

static float boost_v = 0, batt_v, gd_16p, gd_16m, batt_cs;
static int temp_coil_1, temp_coil_2, temp_fet;
void updateADCs(void){
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    batt_v = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * 3.3 / 4096 * 11 / 1;
 80019d4:	2101      	movs	r1, #1
 80019d6:	4890      	ldr	r0, [pc, #576]	; (8001c18 <updateADCs+0x248>)
 80019d8:	f001 fc76 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 80019dc:	ee07 0a90 	vmov	s15, r0
 80019e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e4:	ee17 0a90 	vmov	r0, s15
 80019e8:	f7fe fdae 	bl	8000548 <__aeabi_f2d>
 80019ec:	a386      	add	r3, pc, #536	; (adr r3, 8001c08 <updateADCs+0x238>)
 80019ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f2:	f7fe fe01 	bl	80005f8 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	4b86      	ldr	r3, [pc, #536]	; (8001c1c <updateADCs+0x24c>)
 8001a04:	f7fe ff22 	bl	800084c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <updateADCs+0x250>)
 8001a16:	f7fe fdef 	bl	80005f8 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff f8c1 	bl	8000ba8 <__aeabi_d2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a7e      	ldr	r2, [pc, #504]	; (8001c24 <updateADCs+0x254>)
 8001a2a:	6013      	str	r3, [r2, #0]
    gd_16p = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2) * 3.3 / 4096 * 11 / 1;
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	487a      	ldr	r0, [pc, #488]	; (8001c18 <updateADCs+0x248>)
 8001a30:	f001 fc4a 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 8001a34:	ee07 0a90 	vmov	s15, r0
 8001a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3c:	ee17 0a90 	vmov	r0, s15
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	a370      	add	r3, pc, #448	; (adr r3, 8001c08 <updateADCs+0x238>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fdd5 	bl	80005f8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <updateADCs+0x24c>)
 8001a5c:	f7fe fef6 	bl	800084c <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <updateADCs+0x250>)
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f895 	bl	8000ba8 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a69      	ldr	r2, [pc, #420]	; (8001c28 <updateADCs+0x258>)
 8001a82:	6013      	str	r3, [r2, #0]
    gd_16m = (((float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3) * 3.3 / 4096) * 21 - gd_16p * 11) / 10;
 8001a84:	2103      	movs	r1, #3
 8001a86:	4864      	ldr	r0, [pc, #400]	; (8001c18 <updateADCs+0x248>)
 8001a88:	f001 fc1e 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 8001a8c:	ee07 0a90 	vmov	s15, r0
 8001a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a94:	ee17 0a90 	vmov	r0, s15
 8001a98:	f7fe fd56 	bl	8000548 <__aeabi_f2d>
 8001a9c:	a35a      	add	r3, pc, #360	; (adr r3, 8001c08 <updateADCs+0x238>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fda9 	bl	80005f8 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <updateADCs+0x24c>)
 8001ab4:	f7fe feca 	bl	800084c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <updateADCs+0x25c>)
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <updateADCs+0x258>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	ee17 0a90 	vmov	r0, s15
 8001ae4:	f7fe fd30 	bl	8000548 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fbca 	bl	8000288 <__aeabi_dsub>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <updateADCs+0x260>)
 8001b02:	f7fe fea3 	bl	800084c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f84b 	bl	8000ba8 <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <updateADCs+0x264>)
 8001b16:	6013      	str	r3, [r2, #0]
    boost_v = (float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_3) * 213 * 3.3 / 4096 * 1.038; // 1.038 is calib
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4847      	ldr	r0, [pc, #284]	; (8001c38 <updateADCs+0x268>)
 8001b1c:	f001 fbd4 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 8001b20:	ee07 0a90 	vmov	s15, r0
 8001b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b28:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001c3c <updateADCs+0x26c>
 8001b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b30:	ee17 0a90 	vmov	r0, s15
 8001b34:	f7fe fd08 	bl	8000548 <__aeabi_f2d>
 8001b38:	a333      	add	r3, pc, #204	; (adr r3, 8001c08 <updateADCs+0x238>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd5b 	bl	80005f8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <updateADCs+0x24c>)
 8001b50:	f7fe fe7c 	bl	800084c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	a32c      	add	r3, pc, #176	; (adr r3, 8001c10 <updateADCs+0x240>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe fd49 	bl	80005f8 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f81b 	bl	8000ba8 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a32      	ldr	r2, [pc, #200]	; (8001c40 <updateADCs+0x270>)
 8001b76:	6013      	str	r3, [r2, #0]
    // INA199x1 : 50 V/V
    //  2m ohm x 50VV -> 100m V / A
    batt_cs = ((float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1) * 3.3 / 4096) * 10;
 8001b78:	2101      	movs	r1, #1
 8001b7a:	482f      	ldr	r0, [pc, #188]	; (8001c38 <updateADCs+0x268>)
 8001b7c:	f001 fba4 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 8001b80:	ee07 0a90 	vmov	s15, r0
 8001b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b88:	ee17 0a90 	vmov	r0, s15
 8001b8c:	f7fe fcdc 	bl	8000548 <__aeabi_f2d>
 8001b90:	a31d      	add	r3, pc, #116	; (adr r3, 8001c08 <updateADCs+0x238>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <updateADCs+0x24c>)
 8001ba8:	f7fe fe50 	bl	800084c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <updateADCs+0x260>)
 8001bba:	f7fe fd1d 	bl	80005f8 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ffef 	bl	8000ba8 <__aeabi_d2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <updateADCs+0x274>)
 8001bce:	6013      	str	r3, [r2, #0]
    temp_fet = HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_1);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <updateADCs+0x278>)
 8001bd4:	f001 fb78 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <updateADCs+0x27c>)
 8001bde:	601a      	str	r2, [r3, #0]
    temp_coil_1 = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_2);
 8001be0:	2102      	movs	r1, #2
 8001be2:	4815      	ldr	r0, [pc, #84]	; (8001c38 <updateADCs+0x268>)
 8001be4:	f001 fb70 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <updateADCs+0x280>)
 8001bee:	601a      	str	r2, [r3, #0]
    temp_coil_2 = HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_2);
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4815      	ldr	r0, [pc, #84]	; (8001c48 <updateADCs+0x278>)
 8001bf4:	f001 fb68 	bl	80032c8 <HAL_ADCEx_InjectedGetValue>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <updateADCs+0x284>)
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}
 8001c04:	f3af 8000 	nop.w
 8001c08:	66666666 	.word	0x66666666
 8001c0c:	400a6666 	.word	0x400a6666
 8001c10:	e353f7cf 	.word	0xe353f7cf
 8001c14:	3ff09ba5 	.word	0x3ff09ba5
 8001c18:	200001f8 	.word	0x200001f8
 8001c1c:	40b00000 	.word	0x40b00000
 8001c20:	40260000 	.word	0x40260000
 8001c24:	200005e4 	.word	0x200005e4
 8001c28:	200005e8 	.word	0x200005e8
 8001c2c:	40350000 	.word	0x40350000
 8001c30:	40240000 	.word	0x40240000
 8001c34:	200005ec 	.word	0x200005ec
 8001c38:	20000248 	.word	0x20000248
 8001c3c:	43550000 	.word	0x43550000
 8001c40:	200005e0 	.word	0x200005e0
 8001c44:	200005f0 	.word	0x200005f0
 8001c48:	20000298 	.word	0x20000298
 8001c4c:	200005fc 	.word	0x200005fc
 8001c50:	200005f4 	.word	0x200005f4
 8001c54:	200005f8 	.word	0x200005f8

08001c58 <protecter>:

void protecter(void){
 8001c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af06      	add	r7, sp, #24
    if (batt_v < 20 || batt_cs > 10 || gd_16p < 10 || gd_16m > -5)
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <protecter+0xe0>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d41e      	bmi.n	8001cb2 <protecter+0x5a>
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <protecter+0xe4>)
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	dc14      	bgt.n	8001cb2 <protecter+0x5a>
 8001c88:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <protecter+0xe8>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d40a      	bmi.n	8001cb2 <protecter+0x5a>
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <protecter+0xec>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8001ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dc00      	bgt.n	8001cb2 <protecter+0x5a>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
    }
}
 8001cb0:	e03e      	b.n	8001d30 <protecter+0xd8>
      printf("[ERR] power line error!!! / battv %6.2f battcs %6.3f / GDp %+5.2f GDm %+5.2f\n", batt_v, batt_cs, gd_16p, gd_16m);
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <protecter+0xe0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc46 	bl	8000548 <__aeabi_f2d>
 8001cbc:	4682      	mov	sl, r0
 8001cbe:	468b      	mov	fp, r1
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <protecter+0xe4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc3f 	bl	8000548 <__aeabi_f2d>
 8001cca:	4604      	mov	r4, r0
 8001ccc:	460d      	mov	r5, r1
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <protecter+0xe8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc38 	bl	8000548 <__aeabi_f2d>
 8001cd8:	4680      	mov	r8, r0
 8001cda:	4689      	mov	r9, r1
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <protecter+0xec>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc31 	bl	8000548 <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cf2:	e9cd 4500 	strd	r4, r5, [sp]
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	465b      	mov	r3, fp
 8001cfa:	4813      	ldr	r0, [pc, #76]	; (8001d48 <protecter+0xf0>)
 8001cfc:	f007 ff78 	bl	8009bf0 <iprintf>
      kick_cnt = 0;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <protecter+0xf4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
      boost_cnt = 0;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <protecter+0xf8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <protecter+0xfc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <protecter+0xfc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <protecter+0x100>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2a:	480c      	ldr	r0, [pc, #48]	; (8001d5c <protecter+0x104>)
 8001d2c:	f003 fa82 	bl	8005234 <HAL_GPIO_WritePin>
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d38:	200005e4 	.word	0x200005e4
 8001d3c:	200005f0 	.word	0x200005f0
 8001d40:	200005e8 	.word	0x200005e8
 8001d44:	200005ec 	.word	0x200005ec
 8001d48:	0800c044 	.word	0x0800c044
 8001d4c:	200005d8 	.word	0x200005d8
 8001d50:	200005dc 	.word	0x200005dc
 8001d54:	200006b4 	.word	0x200006b4
 8001d58:	20000668 	.word	0x20000668
 8001d5c:	48000800 	.word	0x48000800

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d64:	b097      	sub	sp, #92	; 0x5c
 8001d66:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d68:	f000 ff2e 	bl	8002bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d6c:	f000 fa4e 	bl	800220c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d70:	f7ff fc66 	bl	8001640 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d74:	f7ff fc22 	bl	80015bc <MX_DMA_Init>
  MX_ADC1_Init();
 8001d78:	f7fe ff66 	bl	8000c48 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001d7c:	f7fe fff6 	bl	8000d6c <MX_ADC3_Init>
  MX_ADC4_Init();
 8001d80:	f7ff f888 	bl	8000e94 <MX_ADC4_Init>
  MX_CAN_Init();
 8001d84:	f7ff fb64 	bl	8001450 <MX_CAN_Init>
  MX_SPI1_Init();
 8001d88:	f000 faa6 	bl	80022d8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001d8c:	f000 fc6c 	bl	8002668 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d90:	f000 fcc4 	bl	800271c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d94:	f000 fe48 	bl	8002a28 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001d98:	f000 fd26 	bl	80027e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // kick
  HAL_TIM_PWM_Init(&htim3);
 8001d9c:	4885      	ldr	r0, [pc, #532]	; (8001fb4 <main+0x254>)
 8001d9e:	f005 faa7 	bl	80072f0 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001da2:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <main+0x254>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001daa:	4b82      	ldr	r3, [pc, #520]	; (8001fb4 <main+0x254>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8001db2:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <main+0x254>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dbc:	4b7d      	ldr	r3, [pc, #500]	; (8001fb4 <main+0x254>)
 8001dbe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dc2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8001dc4:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <main+0x254>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dce:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <main+0x254>)
 8001dd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dd4:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4876      	ldr	r0, [pc, #472]	; (8001fb4 <main+0x254>)
 8001dda:	f005 fae1 	bl	80073a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001dde:	2104      	movs	r1, #4
 8001de0:	4874      	ldr	r0, [pc, #464]	; (8001fb4 <main+0x254>)
 8001de2:	f005 fadd 	bl	80073a0 <HAL_TIM_PWM_Start>

  // boost
  HAL_TIM_PWM_Init(&htim2);
 8001de6:	4874      	ldr	r0, [pc, #464]	; (8001fb8 <main+0x258>)
 8001de8:	f005 fa82 	bl	80072f0 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001dec:	4b72      	ldr	r3, [pc, #456]	; (8001fb8 <main+0x258>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2200      	movs	r2, #0
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 8001df4:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <main+0x258>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dfe:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <main+0x258>)
 8001e00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e04:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e06:	210c      	movs	r1, #12
 8001e08:	486b      	ldr	r0, [pc, #428]	; (8001fb8 <main+0x258>)
 8001e0a:	f005 fac9 	bl	80073a0 <HAL_TIM_PWM_Start>

  // GD negative PS
  HAL_TIM_PWM_Init(&htim4);
 8001e0e:	486b      	ldr	r0, [pc, #428]	; (8001fbc <main+0x25c>)
 8001e10:	f005 fa6e 	bl	80072f0 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
 8001e14:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <main+0x25c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim4, 2000);
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <main+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e28:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <main+0x25c>)
 8001e2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e2e:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001e30:	2104      	movs	r1, #4
 8001e32:	4862      	ldr	r0, [pc, #392]	; (8001fbc <main+0x25c>)
 8001e34:	f005 fab4 	bl	80073a0 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 8001e38:	2064      	movs	r0, #100	; 0x64
 8001e3a:	f000 ff2b 	bl	8002c94 <HAL_Delay>
  // wait charging

  // can init
  CAN_Filter_Init();
 8001e3e:	f7ff fb89 	bl	8001554 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8001e42:	485f      	ldr	r0, [pc, #380]	; (8001fc0 <main+0x260>)
 8001e44:	f002 f97d 	bl	8004142 <HAL_CAN_Start>

  setbuf(stdout, NULL);
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <main+0x264>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f007 ff5b 	bl	8009d0c <setbuf>

  HAL_UART_Init(&huart1);
 8001e56:	485c      	ldr	r0, [pc, #368]	; (8001fc8 <main+0x268>)
 8001e58:	f006 f8c2 	bl	8007fe0 <HAL_UART_Init>

  uint8_t data[] = "orion boost v1 start!!\n";
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <main+0x26c>)
 8001e5e:	f107 040c 	add.w	r4, r7, #12
 8001e62:	461d      	mov	r5, r3
 8001e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e6c:	e884 0003 	stmia.w	r4, {r0, r1}

  HAL_UART_Transmit(&huart1, data, sizeof(data), 100);
 8001e70:	f107 010c 	add.w	r1, r7, #12
 8001e74:	2364      	movs	r3, #100	; 0x64
 8001e76:	2218      	movs	r2, #24
 8001e78:	4853      	ldr	r0, [pc, #332]	; (8001fc8 <main+0x268>)
 8001e7a:	f006 f8ff 	bl	800807c <HAL_UART_Transmit>
  printf("hogehoge %d ,%f\n", 10, 1.0);
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <main+0x270>)
 8001e84:	210a      	movs	r1, #10
 8001e86:	4853      	ldr	r0, [pc, #332]	; (8001fd4 <main+0x274>)
 8001e88:	f007 feb2 	bl	8009bf0 <iprintf>



  HAL_ADC_Start(&hadc1);
 8001e8c:	4852      	ldr	r0, [pc, #328]	; (8001fd8 <main+0x278>)
 8001e8e:	f001 f905 	bl	800309c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8001e92:	4852      	ldr	r0, [pc, #328]	; (8001fdc <main+0x27c>)
 8001e94:	f001 f902 	bl	800309c <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 8001e98:	4851      	ldr	r0, [pc, #324]	; (8001fe0 <main+0x280>)
 8001e9a:	f001 f8ff 	bl	800309c <HAL_ADC_Start>

  HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2104      	movs	r1, #4
 8001ea2:	4850      	ldr	r0, [pc, #320]	; (8001fe4 <main+0x284>)
 8001ea4:	f003 f9c6 	bl	8005234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f003 f9c0 	bl	8005234 <HAL_GPIO_WritePin>
      HAL_Delay(100);
      sendCan();
      printf("can rx : %d\n",can_rx_cnt);
      can_rx_cnt = 0;
  }*/
  if (is_connect_ADNS3080())
 8001eb4:	f7ff f9d2 	bl	800125c <is_connect_ADNS3080>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d011      	beq.n	8001ee2 <main+0x182>
  {
    printf("ADNS3080 OK!\n");
 8001ebe:	484a      	ldr	r0, [pc, #296]	; (8001fe8 <main+0x288>)
 8001ec0:	f007 ff1c 	bl	8009cfc <puts>
    {
      /* code */
    }
  }

  init_ADNS3080(true);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f9fd 	bl	80012c4 <init_ADNS3080>

  bool frame_capture_mdoe = false;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_RESET)
 8001ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed4:	4843      	ldr	r0, [pc, #268]	; (8001fe4 <main+0x284>)
 8001ed6:	f003 f995 	bl	8005204 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d120      	bne.n	8001f22 <main+0x1c2>
 8001ee0:	e003      	b.n	8001eea <main+0x18a>
    printf("ADNS3080 not found...\n");
 8001ee2:	4842      	ldr	r0, [pc, #264]	; (8001fec <main+0x28c>)
 8001ee4:	f007 ff0a 	bl	8009cfc <puts>
    while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <main+0x188>
  {
    frame_capture_mdoe = true;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  while (frame_capture_mdoe)
 8001ef0:	e017      	b.n	8001f22 <main+0x1c2>
  {
    // frame_print_ADNS3080();
    HAL_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 fece 	bl	8002c94 <HAL_Delay>

    update_ADNS3080();
 8001ef8:	f7ff fa3a 	bl	8001370 <update_ADNS3080>
    printf("\n\n%+3d %+3d %4d\n\n", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 8001efc:	f7ff fa84 	bl	8001408 <get_DeltaX_ADNS3080>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461c      	mov	r4, r3
 8001f04:	f7ff fa8c 	bl	8001420 <get_DeltaY_ADNS3080>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	f7ff fa94 	bl	8001438 <get_Qualty_ADNS3080>
 8001f10:	4603      	mov	r3, r0
 8001f12:	462a      	mov	r2, r5
 8001f14:	4621      	mov	r1, r4
 8001f16:	4836      	ldr	r0, [pc, #216]	; (8001ff0 <main+0x290>)
 8001f18:	f007 fe6a 	bl	8009bf0 <iprintf>
    HAL_Delay(100);
 8001f1c:	2064      	movs	r0, #100	; 0x64
 8001f1e:	f000 feb9 	bl	8002c94 <HAL_Delay>
  while (frame_capture_mdoe)
 8001f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1e3      	bne.n	8001ef2 <main+0x192>
  }

  setTargetVoltage(400);
 8001f2a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001ff4 <main+0x294>
 8001f2e:	f7ff fc6d 	bl	800180c <setTargetVoltage>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    update_ADNS3080();
 8001f32:	f7ff fa1d 	bl	8001370 <update_ADNS3080>
    updateADCs();
 8001f36:	f7ff fd4b 	bl	80019d0 <updateADCs>
    protecter();
 8001f3a:	f7ff fe8d 	bl	8001c58 <protecter>

    loop_cnt++;
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <main+0x298>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <main+0x298>)
 8001f46:	6013      	str	r3, [r2, #0]
    if (kick_cnt > 0)
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <main+0x29c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d05b      	beq.n	8002008 <main+0x2a8>
    {
        // kick!!!
        if(power_cmd.kick_chip_selected){
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <main+0x2a0>)
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <main+0x20c>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, power_cmd.kick_power);    	  // chip
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <main+0x2a0>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <main+0x254>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <main+0x254>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
 8001f6a:	e008      	b.n	8001f7e <main+0x21e>
        }else{
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, power_cmd.kick_power);	// straight
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <main+0x2a0>)
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <main+0x254>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	635a      	str	r2, [r3, #52]	; 0x34
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <main+0x254>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
        }
      kick_cnt--;
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <main+0x29c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <main+0x29c>)
 8001f86:	6013      	str	r3, [r2, #0]
      if (kick_cnt == 0)
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <main+0x29c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d143      	bne.n	8002018 <main+0x2b8>
      {
        printf("kick end!!\n");
 8001f90:	481c      	ldr	r0, [pc, #112]	; (8002004 <main+0x2a4>)
 8001f92:	f007 feb3 	bl	8009cfc <puts>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <main+0x254>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <main+0x254>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
        if(power_cmd.charge_enabled){
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <main+0x2a0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d034      	beq.n	8002018 <main+0x2b8>
        	startCharge();
 8001fae:	f7ff fc8b 	bl	80018c8 <startCharge>
 8001fb2:	e031      	b.n	8002018 <main+0x2b8>
 8001fb4:	200006b4 	.word	0x200006b4
 8001fb8:	20000668 	.word	0x20000668
 8001fbc:	20000700 	.word	0x20000700
 8001fc0:	200003e4 	.word	0x200003e4
 8001fc4:	2000000c 	.word	0x2000000c
 8001fc8:	2000074c 	.word	0x2000074c
 8001fcc:	0800c1a4 	.word	0x0800c1a4
 8001fd0:	3ff00000 	.word	0x3ff00000
 8001fd4:	0800c094 	.word	0x0800c094
 8001fd8:	200001f8 	.word	0x200001f8
 8001fdc:	20000248 	.word	0x20000248
 8001fe0:	20000298 	.word	0x20000298
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	0800c0a8 	.word	0x0800c0a8
 8001fec:	0800c0b8 	.word	0x0800c0b8
 8001ff0:	0800c0d0 	.word	0x0800c0d0
 8001ff4:	43c80000 	.word	0x43c80000
 8001ff8:	200005d4 	.word	0x200005d4
 8001ffc:	200005d8 	.word	0x200005d8
 8002000:	200005c0 	.word	0x200005c0
 8002004:	0800c0e4 	.word	0x0800c0e4
      }
    }
    else
    {
    	// idol
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002008:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <main+0x458>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002010:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <main+0x458>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	; 0x38
    }

    // User SW control
    if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_RESET)
 8002018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800201c:	4867      	ldr	r0, [pc, #412]	; (80021bc <main+0x45c>)
 800201e:	f003 f8f1 	bl	8005204 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <main+0x2d4>
    {
    	printf("[USR] boost start!!\n");
 8002028:	4865      	ldr	r0, [pc, #404]	; (80021c0 <main+0x460>)
 800202a:	f007 fe67 	bl	8009cfc <puts>
    	startKick(255);
 800202e:	20ff      	movs	r0, #255	; 0xff
 8002030:	f7ff fc18 	bl	8001864 <startKick>
    }
    if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET)
 8002034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002038:	4860      	ldr	r0, [pc, #384]	; (80021bc <main+0x45c>)
 800203a:	f003 f8e3 	bl	8005204 <HAL_GPIO_ReadPin>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d104      	bne.n	800204e <main+0x2ee>
    {
    	printf("[USR] boost start!!\n");
 8002044:	485e      	ldr	r0, [pc, #376]	; (80021c0 <main+0x460>)
 8002046:	f007 fe59 	bl	8009cfc <puts>
    	startCharge();
 800204a:	f7ff fc3d 	bl	80018c8 <startCharge>
    }


    // debug print
    if (loop_cnt > 100)
 800204e:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <main+0x464>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d95c      	bls.n	8002110 <main+0x3b0>
    {
      // printf("%8ld %8ld %8ld / ",HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2),HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3));
      // printf("%8ld %8ld %8ld / ",HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_2),HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_3));
      // printf("%8ld %8ld\n",HAL_ADCEx_InjectedGetValue(&hadc4,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc4,ADC_INJECTED_RANK_2));
      // HAL_ADCEx_InjectedStart(&hadc1);
    	printf("BV %3.0f, CK %d, CH %d ",power_cmd.target_voltage,power_cmd.kick_chip_selected,power_cmd.charge_enabled);
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <main+0x468>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa74 	bl	8000548 <__aeabi_f2d>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4958      	ldr	r1, [pc, #352]	; (80021c8 <main+0x468>)
 8002066:	7849      	ldrb	r1, [r1, #1]
 8002068:	4608      	mov	r0, r1
 800206a:	4957      	ldr	r1, [pc, #348]	; (80021c8 <main+0x468>)
 800206c:	7809      	ldrb	r1, [r1, #0]
 800206e:	9101      	str	r1, [sp, #4]
 8002070:	9000      	str	r0, [sp, #0]
 8002072:	4856      	ldr	r0, [pc, #344]	; (80021cc <main+0x46c>)
 8002074:	f007 fdbc 	bl	8009bf0 <iprintf>
      printf("%+3d %+3d %4d ", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 8002078:	f7ff f9c6 	bl	8001408 <get_DeltaX_ADNS3080>
 800207c:	4603      	mov	r3, r0
 800207e:	461c      	mov	r4, r3
 8002080:	f7ff f9ce 	bl	8001420 <get_DeltaY_ADNS3080>
 8002084:	4603      	mov	r3, r0
 8002086:	461d      	mov	r5, r3
 8002088:	f7ff f9d6 	bl	8001438 <get_Qualty_ADNS3080>
 800208c:	4603      	mov	r3, r0
 800208e:	462a      	mov	r2, r5
 8002090:	4621      	mov	r1, r4
 8002092:	484f      	ldr	r0, [pc, #316]	; (80021d0 <main+0x470>)
 8002094:	f007 fdac 	bl	8009bf0 <iprintf>
      printf("BattV %4.2f, GD16P %+5.2f GD16M %+5.2f BoostV %5.2f, BattCS %+5.2f temp0 %d temp1 %d temp2 %d \n", batt_v, gd_16p, gd_16m, boost_v, batt_cs, temp_fet, temp_coil_1, temp_coil_2);
 8002098:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <main+0x474>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa53 	bl	8000548 <__aeabi_f2d>
 80020a2:	e9c7 0100 	strd	r0, r1, [r7]
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <main+0x478>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	4604      	mov	r4, r0
 80020b2:	460d      	mov	r5, r1
 80020b4:	4b49      	ldr	r3, [pc, #292]	; (80021dc <main+0x47c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4680      	mov	r8, r0
 80020c0:	4689      	mov	r9, r1
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <main+0x480>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa3e 	bl	8000548 <__aeabi_f2d>
 80020cc:	4682      	mov	sl, r0
 80020ce:	468b      	mov	fp, r1
 80020d0:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <main+0x484>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa37 	bl	8000548 <__aeabi_f2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4942      	ldr	r1, [pc, #264]	; (80021e8 <main+0x488>)
 80020e0:	6809      	ldr	r1, [r1, #0]
 80020e2:	4842      	ldr	r0, [pc, #264]	; (80021ec <main+0x48c>)
 80020e4:	6800      	ldr	r0, [r0, #0]
 80020e6:	4e42      	ldr	r6, [pc, #264]	; (80021f0 <main+0x490>)
 80020e8:	6836      	ldr	r6, [r6, #0]
 80020ea:	960a      	str	r6, [sp, #40]	; 0x28
 80020ec:	9009      	str	r0, [sp, #36]	; 0x24
 80020ee:	9108      	str	r1, [sp, #32]
 80020f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80020f4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80020f8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80020fc:	e9cd 4500 	strd	r4, r5, [sp]
 8002100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002104:	483b      	ldr	r0, [pc, #236]	; (80021f4 <main+0x494>)
 8002106:	f007 fd73 	bl	8009bf0 <iprintf>
      // printf("adc1 : ch1 %8ld / ch2 %8ld / ch3 %8ld / adc3: ch1 %8ld / ch5 %8ld / ch12 %8ld / adc4 : ch3 %8ld / ch4 %8ld \n", adc1_raw_data[0], adc1_raw_data[1], adc1_raw_data[2], adc3_raw_data[0],adc3_raw_data[1],adc3_raw_data[2],adc4_raw_data[0],adc4_raw_data[1]);
      loop_cnt = 0;
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <main+0x464>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
    }

    //sendCan();
    HAL_Delay(1);
 8002110:	2001      	movs	r0, #1
 8002112:	f000 fdbf 	bl	8002c94 <HAL_Delay>
    if (boost_v < power_cmd.target_voltage && boost_cnt > 0)
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <main+0x468>)
 8002118:	ed93 7a01 	vldr	s14, [r3, #4]
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <main+0x480>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	dd1b      	ble.n	8002164 <main+0x404>
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <main+0x498>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	dd17      	ble.n	8002164 <main+0x404>
    {
      boost_cnt--;
 8002134:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <main+0x498>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3b01      	subs	r3, #1
 800213a:	4a2f      	ldr	r2, [pc, #188]	; (80021f8 <main+0x498>)
 800213c:	6013      	str	r3, [r2, #0]
      if (boost_cnt == 0)
 800213e:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <main+0x498>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <main+0x3ec>
      {
        printf("[ERR] boost timeout!!\n");
 8002146:	482d      	ldr	r0, [pc, #180]	; (80021fc <main+0x49c>)
 8002148:	f007 fdd8 	bl	8009cfc <puts>
      }
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 600);
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <main+0x4a0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002156:	2201      	movs	r2, #1
 8002158:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215c:	4829      	ldr	r0, [pc, #164]	; (8002204 <main+0x4a4>)
 800215e:	f003 f869 	bl	8005234 <HAL_GPIO_WritePin>
 8002162:	e010      	b.n	8002186 <main+0x426>
    }
    else
    {
      if (boost_cnt != 0)
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <main+0x498>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <main+0x412>
      {
        //printf("boost end!!\n\n !! %d cycle !!\n\n", boost_cnt);
        boost_cnt = 0;
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <main+0x498>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
      }
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <main+0x4a0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002180:	4820      	ldr	r0, [pc, #128]	; (8002204 <main+0x4a4>)
 8002182:	f003 f857 	bl	8005234 <HAL_GPIO_WritePin>
    }

    // charge-indication
    if (boost_v > 100)
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <main+0x480>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002208 <main+0x4a8>
 8002190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	dd06      	ble.n	80021a8 <main+0x448>
    {
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a0:	4818      	ldr	r0, [pc, #96]	; (8002204 <main+0x4a4>)
 80021a2:	f003 f847 	bl	8005234 <HAL_GPIO_WritePin>
 80021a6:	e6c4      	b.n	8001f32 <main+0x1d2>
    }
    else
    {
      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ae:	4815      	ldr	r0, [pc, #84]	; (8002204 <main+0x4a4>)
 80021b0:	f003 f840 	bl	8005234 <HAL_GPIO_WritePin>
    update_ADNS3080();
 80021b4:	e6bd      	b.n	8001f32 <main+0x1d2>
 80021b6:	bf00      	nop
 80021b8:	200006b4 	.word	0x200006b4
 80021bc:	48000400 	.word	0x48000400
 80021c0:	0800c0f0 	.word	0x0800c0f0
 80021c4:	200005d4 	.word	0x200005d4
 80021c8:	200005c0 	.word	0x200005c0
 80021cc:	0800c104 	.word	0x0800c104
 80021d0:	0800c11c 	.word	0x0800c11c
 80021d4:	200005e4 	.word	0x200005e4
 80021d8:	200005e8 	.word	0x200005e8
 80021dc:	200005ec 	.word	0x200005ec
 80021e0:	200005e0 	.word	0x200005e0
 80021e4:	200005f0 	.word	0x200005f0
 80021e8:	200005fc 	.word	0x200005fc
 80021ec:	200005f4 	.word	0x200005f4
 80021f0:	200005f8 	.word	0x200005f8
 80021f4:	0800c12c 	.word	0x0800c12c
 80021f8:	200005dc 	.word	0x200005dc
 80021fc:	0800c18c 	.word	0x0800c18c
 8002200:	20000668 	.word	0x20000668
 8002204:	48000800 	.word	0x48000800
 8002208:	42c80000 	.word	0x42c80000

0800220c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b09e      	sub	sp, #120	; 0x78
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002216:	2228      	movs	r2, #40	; 0x28
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f007 f876 	bl	800930c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002220:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	223c      	movs	r2, #60	; 0x3c
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f007 f868 	bl	800930c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800223c:	2301      	movs	r3, #1
 800223e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002244:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800224a:	2301      	movs	r3, #1
 800224c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224e:	2302      	movs	r3, #2
 8002250:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002256:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002258:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800225c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800225e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002262:	4618      	mov	r0, r3
 8002264:	f002 fffe 	bl	8005264 <HAL_RCC_OscConfig>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800226e:	f000 f82e 	bl	80022ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002272:	230f      	movs	r3, #15
 8002274:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002276:	2302      	movs	r3, #2
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227a:	2300      	movs	r3, #0
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800227e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800228c:	2102      	movs	r1, #2
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f826 	bl	80062e0 <HAL_RCC_ClockConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800229a:	f000 f818 	bl	80022ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 800229e:	f240 1381 	movw	r3, #385	; 0x181
 80022a2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80022ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b4:	463b      	mov	r3, r7
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 fa48 	bl	800674c <HAL_RCCEx_PeriphCLKConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80022c2:	f000 f804 	bl	80022ce <Error_Handler>
  }
}
 80022c6:	bf00      	nop
 80022c8:	3778      	adds	r7, #120	; 0x78
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d2:	b672      	cpsid	i
}
 80022d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <Error_Handler+0x8>

080022d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <MX_SPI1_Init+0x74>)
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <MX_SPI1_Init+0x78>)
 80022e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <MX_SPI1_Init+0x74>)
 80022e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_SPI1_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <MX_SPI1_Init+0x74>)
 80022f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_SPI1_Init+0x74>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_SPI1_Init+0x74>)
 8002300:	2201      	movs	r2, #1
 8002302:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_SPI1_Init+0x74>)
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_SPI1_Init+0x74>)
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_SPI1_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_SPI1_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_SPI1_Init+0x74>)
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_SPI1_Init+0x74>)
 8002326:	2207      	movs	r2, #7
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_SPI1_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_SPI1_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_SPI1_Init+0x74>)
 8002338:	f004 fbb8 	bl	8006aac <HAL_SPI_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002342:	f7ff ffc4 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000600 	.word	0x20000600
 8002350:	40013000 	.word	0x40013000

08002354 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <HAL_SPI_MspInit+0x7c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d127      	bne.n	80023c6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_SPI_MspInit+0x80>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <HAL_SPI_MspInit+0x80>)
 800237c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002380:	6193      	str	r3, [r2, #24]
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_SPI_MspInit+0x80>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_SPI_MspInit+0x80>)
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_SPI_MspInit+0x80>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002398:	6153      	str	r3, [r2, #20]
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_SPI_MspInit+0x80>)
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80023a6:	2338      	movs	r3, #56	; 0x38
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023b6:	2305      	movs	r3, #5
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <HAL_SPI_MspInit+0x84>)
 80023c2:	f002 fda5 	bl	8004f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40013000 	.word	0x40013000
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48000400 	.word	0x48000400

080023dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_MspInit+0x44>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_MspInit+0x44>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6193      	str	r3, [r2, #24]
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_MspInit+0x44>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_MspInit+0x44>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_MspInit+0x44>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_MspInit+0x44>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <NMI_Handler+0x4>

0800242a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <MemManage_Handler+0x4>

08002436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <BusFault_Handler+0x4>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <UsageFault_Handler+0x4>

08002442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002470:	f000 fbf0 	bl	8002c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <DMA1_Channel1_IRQHandler+0x10>)
 800247e:	f002 fc39 	bl	8004cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200002e8 	.word	0x200002e8

0800248c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Channel4_IRQHandler+0x10>)
 8002492:	f002 fc2f 	bl	8004cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200007d0 	.word	0x200007d0

080024a0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80024a6:	f001 ffc8 	bl	800443a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200003e4 	.word	0x200003e4

080024b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <USART1_IRQHandler+0x10>)
 80024ba:	f005 ff03 	bl	80082c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000074c 	.word	0x2000074c

080024c8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA2_Channel2_IRQHandler+0x10>)
 80024ce:	f002 fc11 	bl	8004cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000370 	.word	0x20000370

080024dc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <DMA2_Channel5_IRQHandler+0x10>)
 80024e2:	f002 fc07 	bl	8004cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000032c 	.word	0x2000032c

080024f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	return 1;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_kill>:

int _kill(int pid, int sig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800250a:	f006 fec7 	bl	800929c <__errno>
 800250e:	4603      	mov	r3, r0
 8002510:	2216      	movs	r2, #22
 8002512:	601a      	str	r2, [r3, #0]
	return -1;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_exit>:

void _exit (int status)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffe7 	bl	8002500 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002532:	e7fe      	b.n	8002532 <_exit+0x12>

08002534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e00a      	b.n	800255c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002546:	f3af 8000 	nop.w
 800254a:	4601      	mov	r1, r0
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60ba      	str	r2, [r7, #8]
 8002552:	b2ca      	uxtb	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	429a      	cmp	r2, r3
 8002562:	dbf0      	blt.n	8002546 <_read+0x12>
	}

return len;
 8002564:	687b      	ldr	r3, [r7, #4]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_close>:
	}
	return len;
}

int _close(int file)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
	return -1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002596:	605a      	str	r2, [r3, #4]
	return 0;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_isatty>:

int _isatty(int file)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	return 1;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
	return 0;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <_sbrk+0x5c>)
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <_sbrk+0x60>)
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <_sbrk+0x64>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <_sbrk+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002608:	f006 fe48 	bl	800929c <__errno>
 800260c:	4603      	mov	r3, r0
 800260e:	220c      	movs	r2, #12
 8002610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	e009      	b.n	800262c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <_sbrk+0x64>)
 8002628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20008000 	.word	0x20008000
 8002638:	00000400 	.word	0x00000400
 800263c:	20000664 	.word	0x20000664
 8002640:	20000828 	.word	0x20000828

08002644 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <SystemInit+0x20>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <SystemInit+0x20>)
 8002650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800267a:	463b      	mov	r3, r7
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
 8002688:	615a      	str	r2, [r3, #20]
 800268a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <MX_TIM2_Init+0xb0>)
 800268e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002692:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <MX_TIM2_Init+0xb0>)
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MX_TIM2_Init+0xb0>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <MX_TIM2_Init+0xb0>)
 80026a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <MX_TIM2_Init+0xb0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <MX_TIM2_Init+0xb0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026b4:	4818      	ldr	r0, [pc, #96]	; (8002718 <MX_TIM2_Init+0xb0>)
 80026b6:	f004 fe1b 	bl	80072f0 <HAL_TIM_PWM_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80026c0:	f7ff fe05 	bl	80022ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4811      	ldr	r0, [pc, #68]	; (8002718 <MX_TIM2_Init+0xb0>)
 80026d4:	f005 fc04 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80026de:	f7ff fdf6 	bl	80022ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e2:	2360      	movs	r3, #96	; 0x60
 80026e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	220c      	movs	r2, #12
 80026f6:	4619      	mov	r1, r3
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <MX_TIM2_Init+0xb0>)
 80026fa:	f004 ff51 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002704:	f7ff fde3 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002708:	4803      	ldr	r0, [pc, #12]	; (8002718 <MX_TIM2_Init+0xb0>)
 800270a:	f000 f90d 	bl	8002928 <HAL_TIM_MspPostInit>

}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000668 	.word	0x20000668

0800271c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800272e:	463b      	mov	r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
 800273c:	615a      	str	r2, [r3, #20]
 800273e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <MX_TIM3_Init+0xc4>)
 8002742:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <MX_TIM3_Init+0xc8>)
 8002744:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <MX_TIM3_Init+0xc4>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <MX_TIM3_Init+0xc4>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <MX_TIM3_Init+0xc4>)
 8002754:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002758:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275a:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <MX_TIM3_Init+0xc4>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <MX_TIM3_Init+0xc4>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <MX_TIM3_Init+0xc4>)
 8002768:	f004 fdc2 	bl	80072f0 <HAL_TIM_PWM_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002772:	f7ff fdac 	bl	80022ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277e:	f107 031c 	add.w	r3, r7, #28
 8002782:	4619      	mov	r1, r3
 8002784:	4816      	ldr	r0, [pc, #88]	; (80027e0 <MX_TIM3_Init+0xc4>)
 8002786:	f005 fbab 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002790:	f7ff fd9d 	bl	80022ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002794:	2360      	movs	r3, #96	; 0x60
 8002796:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	480d      	ldr	r0, [pc, #52]	; (80027e0 <MX_TIM3_Init+0xc4>)
 80027ac:	f004 fef8 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80027b6:	f7ff fd8a 	bl	80022ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027ba:	463b      	mov	r3, r7
 80027bc:	2204      	movs	r2, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	4807      	ldr	r0, [pc, #28]	; (80027e0 <MX_TIM3_Init+0xc4>)
 80027c2:	f004 feed 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80027cc:	f7ff fd7f 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027d0:	4803      	ldr	r0, [pc, #12]	; (80027e0 <MX_TIM3_Init+0xc4>)
 80027d2:	f000 f8a9 	bl	8002928 <HAL_TIM_MspPostInit>

}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200006b4 	.word	0x200006b4
 80027e4:	40000400 	.word	0x40000400

080027e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027fa:	463b      	mov	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
 8002808:	615a      	str	r2, [r3, #20]
 800280a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <MX_TIM4_Init+0xac>)
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <MX_TIM4_Init+0xb0>)
 8002810:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <MX_TIM4_Init+0xac>)
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <MX_TIM4_Init+0xac>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600;
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <MX_TIM4_Init+0xac>)
 8002820:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <MX_TIM4_Init+0xac>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <MX_TIM4_Init+0xac>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002832:	4818      	ldr	r0, [pc, #96]	; (8002894 <MX_TIM4_Init+0xac>)
 8002834:	f004 fd5c 	bl	80072f0 <HAL_TIM_PWM_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800283e:	f7ff fd46 	bl	80022ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	4810      	ldr	r0, [pc, #64]	; (8002894 <MX_TIM4_Init+0xac>)
 8002852:	f005 fb45 	bl	8007ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800285c:	f7ff fd37 	bl	80022ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002860:	2360      	movs	r3, #96	; 0x60
 8002862:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	2204      	movs	r2, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4807      	ldr	r0, [pc, #28]	; (8002894 <MX_TIM4_Init+0xac>)
 8002878:	f004 fe92 	bl	80075a0 <HAL_TIM_PWM_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002882:	f7ff fd24 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002886:	4803      	ldr	r0, [pc, #12]	; (8002894 <MX_TIM4_Init+0xac>)
 8002888:	f000 f84e 	bl	8002928 <HAL_TIM_MspPostInit>

}
 800288c:	bf00      	nop
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000700 	.word	0x20000700
 8002898:	40000800 	.word	0x40000800

0800289c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d10c      	bne.n	80028c8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028c6:	e022      	b.n	800290e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_TIM_PWM_MspInit+0x84>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10c      	bne.n	80028ec <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	61d3      	str	r3, [r2, #28]
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
}
 80028ea:	e010      	b.n	800290e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <HAL_TIM_PWM_MspInit+0x88>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10b      	bne.n	800290e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	61d3      	str	r3, [r2, #28]
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_TIM_PWM_MspInit+0x80>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800

08002928 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d11d      	bne.n	8002986 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 8002950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002954:	6153      	str	r3, [r2, #20]
 8002956:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BOOST_SW_Pin;
 8002962:	2308      	movs	r3, #8
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002972:	2301      	movs	r3, #1
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_SW_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002980:	f002 fac6 	bl	8004f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002984:	e043      	b.n	8002a0e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <HAL_TIM_MspPostInit+0xf4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d11d      	bne.n	80029cc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 8002996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299a:	6153      	str	r3, [r2, #20]
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = KICK_1_Pin|KICK_2_Pin;
 80029a8:	23c0      	movs	r3, #192	; 0xc0
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029b8:	2302      	movs	r3, #2
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c6:	f002 faa3 	bl	8004f10 <HAL_GPIO_Init>
}
 80029ca:	e020      	b.n	8002a0e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_TIM_MspPostInit+0xf8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d11b      	bne.n	8002a0e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6153      	str	r3, [r2, #20]
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_TIM_MspPostInit+0xf0>)
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD_16M_PWM_Pin;
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029fe:	2302      	movs	r3, #2
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GD_16M_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <HAL_TIM_MspPostInit+0xfc>)
 8002a0a:	f002 fa81 	bl	8004f10 <HAL_GPIO_Init>
}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	48000400 	.word	0x48000400

08002a28 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a2e:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <MX_USART1_UART_Init+0x58>)
 8002a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a34:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <MX_USART1_UART_Init+0x5c>)
 8002a36:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a4c:	220c      	movs	r2, #12
 8002a4e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a68:	4804      	ldr	r0, [pc, #16]	; (8002a7c <MX_USART1_UART_Init+0x54>)
 8002a6a:	f005 fab9 	bl	8007fe0 <HAL_UART_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8002a74:	f7ff fc2b 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	2000074c 	.word	0x2000074c
 8002a80:	40013800 	.word	0x40013800
 8002a84:	001e8480 	.word	0x001e8480

08002a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <HAL_UART_MspInit+0xdc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d157      	bne.n	8002b5a <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_UART_MspInit+0xe0>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	4a2e      	ldr	r2, [pc, #184]	; (8002b68 <HAL_UART_MspInit+0xe0>)
 8002ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab4:	6193      	str	r3, [r2, #24]
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <HAL_UART_MspInit+0xe0>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <HAL_UART_MspInit+0xe0>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4a28      	ldr	r2, [pc, #160]	; (8002b68 <HAL_UART_MspInit+0xe0>)
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	6153      	str	r3, [r2, #20]
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_UART_MspInit+0xe0>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ada:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aec:	2307      	movs	r3, #7
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	4619      	mov	r1, r3
 8002af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afa:	f002 fa09 	bl	8004f10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002afe:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_UART_MspInit+0xe8>)
 8002b02:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b06:	2210      	movs	r2, #16
 8002b08:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0a:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b10:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b2e:	480f      	ldr	r0, [pc, #60]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b30:	f001 ffc3 	bl	8004aba <HAL_DMA_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002b3a:	f7ff fbc8 	bl	80022ce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b42:	66da      	str	r2, [r3, #108]	; 0x6c
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_UART_MspInit+0xe4>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2025      	movs	r0, #37	; 0x25
 8002b50:	f001 ff7d 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b54:	2025      	movs	r0, #37	; 0x25
 8002b56:	f001 ff96 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	3728      	adds	r7, #40	; 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40013800 	.word	0x40013800
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	200007d0 	.word	0x200007d0
 8002b70:	40020044 	.word	0x40020044

08002b74 <Reset_Handler>:
 8002b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bac <LoopForever+0x2>
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <LoopForever+0x6>)
 8002b7a:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <LoopForever+0xa>)
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <LoopForever+0xe>)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e002      	b.n	8002b88 <LoopCopyDataInit>

08002b82 <CopyDataInit>:
 8002b82:	58d4      	ldr	r4, [r2, r3]
 8002b84:	50c4      	str	r4, [r0, r3]
 8002b86:	3304      	adds	r3, #4

08002b88 <LoopCopyDataInit>:
 8002b88:	18c4      	adds	r4, r0, r3
 8002b8a:	428c      	cmp	r4, r1
 8002b8c:	d3f9      	bcc.n	8002b82 <CopyDataInit>
 8002b8e:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <LoopForever+0x12>)
 8002b90:	4c0b      	ldr	r4, [pc, #44]	; (8002bc0 <LoopForever+0x16>)
 8002b92:	2300      	movs	r3, #0
 8002b94:	e001      	b.n	8002b9a <LoopFillZerobss>

08002b96 <FillZerobss>:
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	3204      	adds	r2, #4

08002b9a <LoopFillZerobss>:
 8002b9a:	42a2      	cmp	r2, r4
 8002b9c:	d3fb      	bcc.n	8002b96 <FillZerobss>
 8002b9e:	f7ff fd51 	bl	8002644 <SystemInit>
 8002ba2:	f006 fb81 	bl	80092a8 <__libc_init_array>
 8002ba6:	f7ff f8db 	bl	8001d60 <main>

08002baa <LoopForever>:
 8002baa:	e7fe      	b.n	8002baa <LoopForever>
 8002bac:	20008000 	.word	0x20008000
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	200001dc 	.word	0x200001dc
 8002bb8:	0800c5d4 	.word	0x0800c5d4
 8002bbc:	200001dc 	.word	0x200001dc
 8002bc0:	20000828 	.word	0x20000828

08002bc4 <ADC1_2_IRQHandler>:
 8002bc4:	e7fe      	b.n	8002bc4 <ADC1_2_IRQHandler>
	...

08002bc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_Init+0x28>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_Init+0x28>)
 8002bd2:	f043 0310 	orr.w	r3, r3, #16
 8002bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd8:	2003      	movs	r0, #3
 8002bda:	f001 ff2d 	bl	8004a38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bde:	200f      	movs	r0, #15
 8002be0:	f000 f808 	bl	8002bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be4:	f7ff fbfa 	bl	80023dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40022000 	.word	0x40022000

08002bf4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_InitTick+0x54>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_InitTick+0x58>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 ff45 	bl	8004aa2 <HAL_SYSTICK_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00e      	b.n	8002c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d80a      	bhi.n	8002c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f001 ff0d 	bl	8004a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c34:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <HAL_InitTick+0x5c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000008 	.word	0x20000008
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_IncTick+0x20>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_IncTick+0x24>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_IncTick+0x24>)
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	20000008 	.word	0x20000008
 8002c78:	20000814 	.word	0x20000814

08002c7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_GetTick+0x14>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000814 	.word	0x20000814

08002c94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff ffee 	bl	8002c7c <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d005      	beq.n	8002cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_Delay+0x44>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002cba:	bf00      	nop
 8002cbc:	f7ff ffde 	bl	8002c7c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d8f7      	bhi.n	8002cbc <HAL_Delay+0x28>
  {
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008

08002cdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b09a      	sub	sp, #104	; 0x68
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e1c9      	b.n	8003090 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d176      	bne.n	8002dfc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d152      	bne.n	8002dbc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fe f91f 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d13b      	bne.n	8002dbc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 ffd1 	bl	8003cec <ADC_Disable>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12f      	bne.n	8002dbc <HAL_ADC_Init+0xe0>
 8002d5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12b      	bne.n	8002dbc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d6c:	f023 0302 	bic.w	r3, r3, #2
 8002d70:	f043 0202 	orr.w	r2, r3, #2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d86:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d96:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d98:	4b86      	ldr	r3, [pc, #536]	; (8002fb4 <HAL_ADC_Init+0x2d8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a86      	ldr	r2, [pc, #536]	; (8002fb8 <HAL_ADC_Init+0x2dc>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0c9a      	lsrs	r2, r3, #18
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dae:	e002      	b.n	8002db6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f9      	bne.n	8002db0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd8:	d110      	bne.n	8002dfc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f023 0312 	bic.w	r3, r3, #18
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 8136 	bne.w	8003076 <HAL_ADC_Init+0x39a>
 8002e0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 8131 	bne.w	8003076 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 8129 	bne.w	8003076 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e2c:	f043 0202 	orr.w	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_Init+0x16c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a5e      	ldr	r2, [pc, #376]	; (8002fbc <HAL_ADC_Init+0x2e0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_Init+0x170>
 8002e48:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_ADC_Init+0x2e4>)
 8002e4a:	e000      	b.n	8002e4e <HAL_ADC_Init+0x172>
 8002e4c:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_ADC_Init+0x2e8>)
 8002e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e58:	d102      	bne.n	8002e60 <HAL_ADC_Init+0x184>
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_ADC_Init+0x2e0>)
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e01a      	b.n	8002e96 <HAL_ADC_Init+0x1ba>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a55      	ldr	r2, [pc, #340]	; (8002fbc <HAL_ADC_Init+0x2e0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d103      	bne.n	8002e72 <HAL_ADC_Init+0x196>
 8002e6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e011      	b.n	8002e96 <HAL_ADC_Init+0x1ba>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a54      	ldr	r2, [pc, #336]	; (8002fc8 <HAL_ADC_Init+0x2ec>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d102      	bne.n	8002e82 <HAL_ADC_Init+0x1a6>
 8002e7c:	4b53      	ldr	r3, [pc, #332]	; (8002fcc <HAL_ADC_Init+0x2f0>)
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e009      	b.n	8002e96 <HAL_ADC_Init+0x1ba>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a51      	ldr	r2, [pc, #324]	; (8002fcc <HAL_ADC_Init+0x2f0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d102      	bne.n	8002e92 <HAL_ADC_Init+0x1b6>
 8002e8c:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_ADC_Init+0x2ec>)
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e001      	b.n	8002e96 <HAL_ADC_Init+0x1ba>
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d108      	bne.n	8002eb6 <HAL_ADC_Init+0x1da>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_Init+0x1da>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_ADC_Init+0x1dc>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11c      	bne.n	8002ef6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_ADC_Init+0x202>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Init+0x202>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_ADC_Init+0x204>
 8002ede:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d108      	bne.n	8002ef6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7e5b      	ldrb	r3, [r3, #25]
 8002efa:	035b      	lsls	r3, r3, #13
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f00:	2a01      	cmp	r2, #1
 8002f02:	d002      	beq.n	8002f0a <HAL_ADC_Init+0x22e>
 8002f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f08:	e000      	b.n	8002f0c <HAL_ADC_Init+0x230>
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d11b      	bne.n	8002f62 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7e5b      	ldrb	r3, [r3, #25]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	3b01      	subs	r3, #1
 8002f38:	045a      	lsls	r2, r3, #17
 8002f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	663b      	str	r3, [r7, #96]	; 0x60
 8002f44:	e00d      	b.n	8002f62 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d03a      	beq.n	8002fe0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_ADC_Init+0x2ec>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_ADC_Init+0x2a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <HAL_ADC_Init+0x2f0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d128      	bne.n	8002fd0 <HAL_ADC_Init+0x2f4>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002f86:	d012      	beq.n	8002fae <HAL_ADC_Init+0x2d2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d00a      	beq.n	8002fa8 <HAL_ADC_Init+0x2cc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_ADC_Init+0x2c6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	e018      	b.n	8002fd4 <HAL_ADC_Init+0x2f8>
 8002fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fa6:	e015      	b.n	8002fd4 <HAL_ADC_Init+0x2f8>
 8002fa8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002fac:	e012      	b.n	8002fd4 <HAL_ADC_Init+0x2f8>
 8002fae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002fb2:	e00f      	b.n	8002fd4 <HAL_ADC_Init+0x2f8>
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	50000100 	.word	0x50000100
 8002fc0:	50000300 	.word	0x50000300
 8002fc4:	50000700 	.word	0x50000700
 8002fc8:	50000400 	.word	0x50000400
 8002fcc:	50000500 	.word	0x50000500
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d114      	bne.n	8003018 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ffc:	f023 0302 	bic.w	r3, r3, #2
 8003000:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	7e1b      	ldrb	r3, [r3, #24]
 8003006:	039a      	lsls	r2, r3, #14
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4313      	orrs	r3, r2
 8003012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003014:	4313      	orrs	r3, r2
 8003016:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_ADC_Init+0x3bc>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003028:	430b      	orrs	r3, r1
 800302a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10c      	bne.n	800304e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f023 010f 	bic.w	r1, r3, #15
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	1e5a      	subs	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
 800304c:	e007      	b.n	800305e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 020f 	bic.w	r2, r2, #15
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f023 0303 	bic.w	r3, r3, #3
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
 8003074:	e00a      	b.n	800308c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f023 0312 	bic.w	r3, r3, #18
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003086:	2301      	movs	r3, #1
 8003088:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800308c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003090:	4618      	mov	r0, r3
 8003092:	3768      	adds	r7, #104	; 0x68
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	fff0c007 	.word	0xfff0c007

0800309c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 80f9 	bne.w	80032aa <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Start+0x2a>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0f4      	b.n	80032b0 <HAL_ADC_Start+0x214>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fda8 	bl	8003c24 <ADC_Enable>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 80e0 	bne.w	80032a0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fc:	d004      	beq.n	8003108 <HAL_ADC_Start+0x6c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6d      	ldr	r2, [pc, #436]	; (80032b8 <HAL_ADC_Start+0x21c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d106      	bne.n	8003116 <HAL_ADC_Start+0x7a>
 8003108:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <HAL_ADC_Start+0x220>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_ADC_Start+0x9a>
 8003114:	e005      	b.n	8003122 <HAL_ADC_Start+0x86>
 8003116:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <HAL_ADC_Start+0x224>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_ADC_Start+0x9a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800312a:	d004      	beq.n	8003136 <HAL_ADC_Start+0x9a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a64      	ldr	r2, [pc, #400]	; (80032c4 <HAL_ADC_Start+0x228>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d115      	bne.n	8003162 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d036      	beq.n	80031be <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003158:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003160:	e02d      	b.n	80031be <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003176:	d004      	beq.n	8003182 <HAL_ADC_Start+0xe6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <HAL_ADC_Start+0x21c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10a      	bne.n	8003198 <HAL_ADC_Start+0xfc>
 8003182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e008      	b.n	80031aa <HAL_ADC_Start+0x10e>
 8003198:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_ADC_Start+0x228>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ca:	d106      	bne.n	80031da <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f023 0206 	bic.w	r2, r3, #6
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
 80031d8:	e002      	b.n	80031e0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	221c      	movs	r2, #28
 80031ee:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f8:	d004      	beq.n	8003204 <HAL_ADC_Start+0x168>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_ADC_Start+0x21c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d106      	bne.n	8003212 <HAL_ADC_Start+0x176>
 8003204:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_ADC_Start+0x220>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	2b00      	cmp	r3, #0
 800320e:	d03e      	beq.n	800328e <HAL_ADC_Start+0x1f2>
 8003210:	e005      	b.n	800321e <HAL_ADC_Start+0x182>
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_ADC_Start+0x224>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2b00      	cmp	r3, #0
 800321c:	d037      	beq.n	800328e <HAL_ADC_Start+0x1f2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003226:	d004      	beq.n	8003232 <HAL_ADC_Start+0x196>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HAL_ADC_Start+0x21c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d106      	bne.n	8003240 <HAL_ADC_Start+0x1a4>
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_ADC_Start+0x220>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2b05      	cmp	r3, #5
 800323c:	d027      	beq.n	800328e <HAL_ADC_Start+0x1f2>
 800323e:	e005      	b.n	800324c <HAL_ADC_Start+0x1b0>
 8003240:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <HAL_ADC_Start+0x224>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2b05      	cmp	r3, #5
 800324a:	d020      	beq.n	800328e <HAL_ADC_Start+0x1f2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003254:	d004      	beq.n	8003260 <HAL_ADC_Start+0x1c4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a17      	ldr	r2, [pc, #92]	; (80032b8 <HAL_ADC_Start+0x21c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d106      	bne.n	800326e <HAL_ADC_Start+0x1d2>
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_ADC_Start+0x220>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2b09      	cmp	r3, #9
 800326a:	d010      	beq.n	800328e <HAL_ADC_Start+0x1f2>
 800326c:	e005      	b.n	800327a <HAL_ADC_Start+0x1de>
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_ADC_Start+0x224>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2b09      	cmp	r3, #9
 8003278:	d009      	beq.n	800328e <HAL_ADC_Start+0x1f2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003282:	d004      	beq.n	800328e <HAL_ADC_Start+0x1f2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_ADC_Start+0x228>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10f      	bne.n	80032ae <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0204 	orr.w	r2, r2, #4
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	e006      	b.n	80032ae <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032a8:	e001      	b.n	80032ae <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
 80032ac:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	50000100 	.word	0x50000100
 80032bc:	50000300 	.word	0x50000300
 80032c0:	50000700 	.word	0x50000700
 80032c4:	50000400 	.word	0x50000400

080032c8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d009      	beq.n	80032f0 <HAL_ADCEx_InjectedGetValue+0x28>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d818      	bhi.n	8003314 <HAL_ADCEx_InjectedGetValue+0x4c>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d00f      	beq.n	8003308 <HAL_ADCEx_InjectedGetValue+0x40>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d006      	beq.n	80032fc <HAL_ADCEx_InjectedGetValue+0x34>
 80032ee:	e011      	b.n	8003314 <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f8:	60fb      	str	r3, [r7, #12]
      break;
 80032fa:	e011      	b.n	8003320 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	60fb      	str	r3, [r7, #12]
      break;
 8003306:	e00b      	b.n	8003320 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003310:	60fb      	str	r3, [r7, #12]
      break;
 8003312:	e005      	b.n	8003320 <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331c:	60fb      	str	r3, [r7, #12]
      break;
 800331e:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8003320:	68fb      	ldr	r3, [r7, #12]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003330:	b480      	push	{r7}
 8003332:	b09d      	sub	sp, #116	; 0x74
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADCEx_InjectedConfigChannel+0x26>
 8003352:	2302      	movs	r3, #2
 8003354:	e364      	b.n	8003a20 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800336a:	2b01      	cmp	r3, #1
 800336c:	d151      	bne.n	8003412 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d143      	bne.n	80033fe <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d02b      	beq.n	80033d6 <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4984      	ldr	r1, [pc, #528]	; (800359c <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 800338a:	428b      	cmp	r3, r1
 800338c:	d004      	beq.n	8003398 <HAL_ADCEx_InjectedConfigChannel+0x68>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4983      	ldr	r1, [pc, #524]	; (80035a0 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8003394:	428b      	cmp	r3, r1
 8003396:	d114      	bne.n	80033c2 <HAL_ADCEx_InjectedConfigChannel+0x92>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d00e      	beq.n	80033be <HAL_ADCEx_InjectedConfigChannel+0x8e>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	2b14      	cmp	r3, #20
 80033a6:	d008      	beq.n	80033ba <HAL_ADCEx_InjectedConfigChannel+0x8a>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	2b1c      	cmp	r3, #28
 80033ae:	d002      	beq.n	80033b6 <HAL_ADCEx_InjectedConfigChannel+0x86>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	e007      	b.n	80033c6 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80033b6:	2310      	movs	r3, #16
 80033b8:	e005      	b.n	80033c6 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80033ba:	231c      	movs	r3, #28
 80033bc:	e003      	b.n	80033c6 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80033be:	2334      	movs	r3, #52	; 0x34
 80033c0:	e001      	b.n	80033c6 <HAL_ADCEx_InjectedConfigChannel+0x96>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4313      	orrs	r3, r2
 80033ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033d0:	4313      	orrs	r3, r2
 80033d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d4:	e005      	b.n	80033e2 <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033de:	4313      	orrs	r3, r2
 80033e0:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e8:	4b6e      	ldr	r3, [pc, #440]	; (80035a4 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033f2:	430b      	orrs	r3, r1
 80033f4:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033fa:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80033fc:	e07f      	b.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003410:	e075      	b.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d140      	bne.n	800349c <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d02d      	beq.n	800348c <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	1e59      	subs	r1, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4857      	ldr	r0, [pc, #348]	; (800359c <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8003440:	4283      	cmp	r3, r0
 8003442:	d004      	beq.n	800344e <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4855      	ldr	r0, [pc, #340]	; (80035a0 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 800344a:	4283      	cmp	r3, r0
 800344c:	d114      	bne.n	8003478 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	2b08      	cmp	r3, #8
 8003454:	d00e      	beq.n	8003474 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	2b14      	cmp	r3, #20
 800345c:	d008      	beq.n	8003470 <HAL_ADCEx_InjectedConfigChannel+0x140>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	2b1c      	cmp	r3, #28
 8003464:	d002      	beq.n	800346c <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	e007      	b.n	800347c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800346c:	2310      	movs	r3, #16
 800346e:	e005      	b.n	800347c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003470:	231c      	movs	r3, #28
 8003472:	e003      	b.n	800347c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003474:	2334      	movs	r3, #52	; 0x34
 8003476:	e001      	b.n	800347c <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4319      	orrs	r1, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	430b      	orrs	r3, r1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	649a      	str	r2, [r3, #72]	; 0x48
 800348a:	e007      	b.n	800349c <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	3b01      	subs	r3, #1
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	3302      	adds	r3, #2
 80034ae:	221f      	movs	r2, #31
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4019      	ands	r1, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	3302      	adds	r3, #2
 80034ca:	fa00 f303 	lsl.w	r3, r0, r3
 80034ce:	ea41 0203 	orr.w	r2, r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034ee:	4b2d      	ldr	r3, [pc, #180]	; (80035a4 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	430b      	orrs	r3, r1
 80034fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d12d      	bne.n	8003568 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	7f5b      	ldrb	r3, [r3, #29]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d110      	bne.n	8003536 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	7f9b      	ldrb	r3, [r3, #30]
 8003522:	055a      	lsls	r2, r3, #21
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	7f1b      	ldrb	r3, [r3, #28]
 8003528:	051b      	lsls	r3, r3, #20
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	e018      	b.n	8003568 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	7f9b      	ldrb	r3, [r3, #30]
 8003544:	055a      	lsls	r2, r3, #21
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	7f1b      	ldrb	r3, [r3, #28]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d108      	bne.n	8003568 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8111 	bne.w	800379a <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d113      	bne.n	80035a8 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	7f5b      	ldrb	r3, [r3, #29]
 800358e:	065a      	lsls	r2, r3, #25
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	e01b      	b.n	80035d2 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 800359a:	bf00      	nop
 800359c:	50000400 	.word	0x50000400
 80035a0:	50000500 	.word	0x50000500
 80035a4:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80035b6:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	7f5b      	ldrb	r3, [r3, #29]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b09      	cmp	r3, #9
 80035d8:	d91c      	bls.n	8003614 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6999      	ldr	r1, [r3, #24]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	3b1e      	subs	r3, #30
 80035ec:	2207      	movs	r2, #7
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4019      	ands	r1, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6898      	ldr	r0, [r3, #8]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	3b1e      	subs	r3, #30
 8003606:	fa00 f203 	lsl.w	r2, r0, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	619a      	str	r2, [r3, #24]
 8003612:	e019      	b.n	8003648 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6959      	ldr	r1, [r3, #20]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	2207      	movs	r2, #7
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	4019      	ands	r1, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6898      	ldr	r0, [r3, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	fa00 f203 	lsl.w	r2, r0, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	3b01      	subs	r3, #1
 8003666:	2b03      	cmp	r3, #3
 8003668:	d84e      	bhi.n	8003708 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003681 	.word	0x08003681
 8003674:	080036a3 	.word	0x080036a3
 8003678:	080036c5 	.word	0x080036c5
 800367c:	080036e7 	.word	0x080036e7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003686:	4b9a      	ldr	r3, [pc, #616]	; (80038f0 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8003688:	4013      	ands	r3, r2
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	0691      	lsls	r1, r2, #26
 8003690:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003692:	430a      	orrs	r2, r1
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800369e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80036a0:	e07e      	b.n	80037a0 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036a8:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	0691      	lsls	r1, r2, #26
 80036b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80036b4:	430a      	orrs	r2, r1
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036c0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80036c2:	e06d      	b.n	80037a0 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036ca:	4b89      	ldr	r3, [pc, #548]	; (80038f0 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	0691      	lsls	r1, r2, #26
 80036d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80036d6:	430a      	orrs	r2, r1
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036e2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80036e4:	e05c      	b.n	80037a0 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036ec:	4b80      	ldr	r3, [pc, #512]	; (80038f0 <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	0691      	lsls	r1, r2, #26
 80036f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80036f8:	430a      	orrs	r2, r1
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003704:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8003706:	e04b      	b.n	80037a0 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	069b      	lsls	r3, r3, #26
 8003718:	429a      	cmp	r2, r3
 800371a:	d107      	bne.n	800372c <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800372a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	069b      	lsls	r3, r3, #26
 800373c:	429a      	cmp	r2, r3
 800373e:	d107      	bne.n	8003750 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800374e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	429a      	cmp	r2, r3
 8003762:	d107      	bne.n	8003774 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003772:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800377a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	069b      	lsls	r3, r3, #26
 8003784:	429a      	cmp	r2, r3
 8003786:	d10a      	bne.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003796:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003798:	e001      	b.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 800379e:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <HAL_ADCEx_InjectedConfigChannel+0x490>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_ADCEx_InjectedConfigChannel+0x490>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_ADCEx_InjectedConfigChannel+0x492>
 80037c0:	2300      	movs	r3, #0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 8126 	bne.w	8003a14 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d00f      	beq.n	80037f0 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	400a      	ands	r2, r1
 80037ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80037ee:	e049      	b.n	8003884 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2201      	movs	r2, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b09      	cmp	r3, #9
 8003810:	d91c      	bls.n	800384c <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	3b1b      	subs	r3, #27
 8003824:	2207      	movs	r2, #7
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	4019      	ands	r1, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6898      	ldr	r0, [r3, #8]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	3b1b      	subs	r3, #27
 800383e:	fa00 f203 	lsl.w	r2, r0, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	619a      	str	r2, [r3, #24]
 800384a:	e01b      	b.n	8003884 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6959      	ldr	r1, [r3, #20]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	2207      	movs	r2, #7
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	4019      	ands	r1, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6898      	ldr	r0, [r3, #8]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	fa00 f203 	lsl.w	r2, r0, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800388c:	d004      	beq.n	8003898 <HAL_ADCEx_InjectedConfigChannel+0x568>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 800389a:	e000      	b.n	800389e <HAL_ADCEx_InjectedConfigChannel+0x56e>
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_ADCEx_InjectedConfigChannel+0x5cc>)
 800389e:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d105      	bne.n	80038b4 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038b8:	2b11      	cmp	r3, #17
 80038ba:	d105      	bne.n	80038c8 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038cc:	2b12      	cmp	r3, #18
 80038ce:	f040 80a1 	bne.w	8003a14 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80038d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 809a 	bne.w	8003a14 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e8:	d10a      	bne.n	8003900 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
 80038ea:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	e022      	b.n	8003936 <HAL_ADCEx_InjectedConfigChannel+0x606>
 80038f0:	83fff000 	.word	0x83fff000
 80038f4:	50000100 	.word	0x50000100
 80038f8:	50000300 	.word	0x50000300
 80038fc:	50000700 	.word	0x50000700
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a49      	ldr	r2, [pc, #292]	; (8003a2c <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d103      	bne.n	8003912 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 800390a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e011      	b.n	8003936 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a46      	ldr	r2, [pc, #280]	; (8003a30 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d102      	bne.n	8003922 <HAL_ADCEx_InjectedConfigChannel+0x5f2>
 800391c:	4b45      	ldr	r3, [pc, #276]	; (8003a34 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e009      	b.n	8003936 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a43      	ldr	r2, [pc, #268]	; (8003a34 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d102      	bne.n	8003932 <HAL_ADCEx_InjectedConfigChannel+0x602>
 800392c:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	e001      	b.n	8003936 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d108      	bne.n	8003956 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d150      	bne.n	80039fe <HAL_ADCEx_InjectedConfigChannel+0x6ce>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800395c:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800395e:	2b00      	cmp	r3, #0
 8003960:	d010      	beq.n	8003984 <HAL_ADCEx_InjectedConfigChannel+0x654>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_ADCEx_InjectedConfigChannel+0x64e>
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_ADCEx_InjectedConfigChannel+0x64e>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_ADCEx_InjectedConfigChannel+0x650>
 800397e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003980:	2b00      	cmp	r3, #0
 8003982:	d13c      	bne.n	80039fe <HAL_ADCEx_InjectedConfigChannel+0x6ce>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b10      	cmp	r3, #16
 800398a:	d11d      	bne.n	80039c8 <HAL_ADCEx_InjectedConfigChannel+0x698>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003994:	d118      	bne.n	80039c8 <HAL_ADCEx_InjectedConfigChannel+0x698>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800399e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039a0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	0c9a      	lsrs	r2, r3, #18
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80039b8:	e002      	b.n	80039c0 <HAL_ADCEx_InjectedConfigChannel+0x690>
          {
            wait_loop_index--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f9      	bne.n	80039ba <HAL_ADCEx_InjectedConfigChannel+0x68a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039c6:	e024      	b.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b11      	cmp	r3, #17
 80039ce:	d10b      	bne.n	80039e8 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d8:	d106      	bne.n	80039e8 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80039da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80039e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e4:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039e6:	e014      	b.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b12      	cmp	r3, #18
 80039ee:	d110      	bne.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80039f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fa:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039fc:	e009      	b.n	8003a12 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003a10:	e000      	b.n	8003a14 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a12:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3774      	adds	r7, #116	; 0x74
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	50000100 	.word	0x50000100
 8003a30:	50000400 	.word	0x50000400
 8003a34:	50000500 	.word	0x50000500
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	431bde83 	.word	0x431bde83

08003a40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b099      	sub	sp, #100	; 0x64
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a58:	d102      	bne.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	e01a      	b.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6a      	ldr	r2, [pc, #424]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d103      	bne.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	e011      	b.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a67      	ldr	r2, [pc, #412]	; (8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d102      	bne.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a7c:	4b66      	ldr	r3, [pc, #408]	; (8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	e009      	b.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a64      	ldr	r2, [pc, #400]	; (8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d102      	bne.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a8c:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	e001      	b.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0b0      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0a9      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 808d 	bne.w	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 8086 	bne.w	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003adc:	d004      	beq.n	8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4b      	ldr	r2, [pc, #300]	; (8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ae8:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003aea:	e000      	b.n	8003aee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003aec:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003aee:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d040      	beq.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b0a:	035b      	lsls	r3, r3, #13
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b12:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d108      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d15c      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003b56:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d14b      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b64:	f023 030f 	bic.w	r3, r3, #15
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	6811      	ldr	r1, [r2, #0]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	6892      	ldr	r2, [r2, #8]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b76:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b78:	e03c      	b.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b84:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d108      	bne.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d123      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003bc8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d112      	bne.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bd6:	f023 030f 	bic.w	r3, r3, #15
 8003bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bdc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bde:	e009      	b.n	8003bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003bf2:	e000      	b.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003c02:	4618      	mov	r0, r3
 8003c04:	3764      	adds	r7, #100	; 0x64
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	50000100 	.word	0x50000100
 8003c14:	50000400 	.word	0x50000400
 8003c18:	50000500 	.word	0x50000500
 8003c1c:	50000300 	.word	0x50000300
 8003c20:	50000700 	.word	0x50000700

08003c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d108      	bne.n	8003c50 <ADC_Enable+0x2c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <ADC_Enable+0x2c>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <ADC_Enable+0x2e>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d143      	bne.n	8003cde <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <ADC_Enable+0xc4>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0210 	orr.w	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e02f      	b.n	8003ce0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003c90:	f7fe fff4 	bl	8002c7c <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c96:	e01b      	b.n	8003cd0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c98:	f7fe fff0 	bl	8002c7c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d914      	bls.n	8003cd0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d00d      	beq.n	8003cd0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f043 0210 	orr.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	f043 0201 	orr.w	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e007      	b.n	8003ce0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d1dc      	bne.n	8003c98 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	8000003f 	.word	0x8000003f

08003cec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d108      	bne.n	8003d18 <ADC_Disable+0x2c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <ADC_Disable+0x2c>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <ADC_Disable+0x2e>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d047      	beq.n	8003dae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030d 	and.w	r3, r3, #13
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10f      	bne.n	8003d4c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0202 	orr.w	r2, r2, #2
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2203      	movs	r2, #3
 8003d42:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003d44:	f7fe ff9a 	bl	8002c7c <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d4a:	e029      	b.n	8003da0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f043 0210 	orr.w	r2, r3, #16
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e023      	b.n	8003db0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d68:	f7fe ff88 	bl	8002c7c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d914      	bls.n	8003da0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10d      	bne.n	8003da0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f043 0210 	orr.w	r2, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f043 0201 	orr.w	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e007      	b.n	8003db0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d0dc      	beq.n	8003d68 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0ed      	b.n	8003fa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fb70 	bl	80014bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dec:	f7fe ff46 	bl	8002c7c <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003df2:	e012      	b.n	8003e1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003df4:	f7fe ff42 	bl	8002c7c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b0a      	cmp	r3, #10
 8003e00:	d90b      	bls.n	8003e1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2205      	movs	r2, #5
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0c5      	b.n	8003fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0e5      	beq.n	8003df4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0202 	bic.w	r2, r2, #2
 8003e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e38:	f7fe ff20 	bl	8002c7c <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e3e:	e012      	b.n	8003e66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e40:	f7fe ff1c 	bl	8002c7c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b0a      	cmp	r3, #10
 8003e4c:	d90b      	bls.n	8003e66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e09f      	b.n	8003fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7e1b      	ldrb	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d108      	bne.n	8003e8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e007      	b.n	8003e9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	7e5b      	ldrb	r3, [r3, #25]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d108      	bne.n	8003eb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e007      	b.n	8003ec8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7e9b      	ldrb	r3, [r3, #26]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d108      	bne.n	8003ee2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0220 	orr.w	r2, r2, #32
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e007      	b.n	8003ef2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0220 	bic.w	r2, r2, #32
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7edb      	ldrb	r3, [r3, #27]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0210 	bic.w	r2, r2, #16
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e007      	b.n	8003f1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0210 	orr.w	r2, r2, #16
 8003f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7f1b      	ldrb	r3, [r3, #28]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d108      	bne.n	8003f36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0208 	orr.w	r2, r2, #8
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e007      	b.n	8003f46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0208 	bic.w	r2, r2, #8
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7f5b      	ldrb	r3, [r3, #29]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0204 	orr.w	r2, r2, #4
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e007      	b.n	8003f70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	ea42 0103 	orr.w	r1, r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	1e5a      	subs	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d003      	beq.n	8003fd4 <HAL_CAN_ConfigFilter+0x26>
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	f040 80aa 	bne.w	8004128 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2201      	movs	r2, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	401a      	ands	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d123      	bne.n	8004056 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43db      	mvns	r3, r3
 8004018:	401a      	ands	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004030:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	3248      	adds	r2, #72	; 0x48
 8004036:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800404a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800404c:	6979      	ldr	r1, [r7, #20]
 800404e:	3348      	adds	r3, #72	; 0x48
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d122      	bne.n	80040a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	431a      	orrs	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800407e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3248      	adds	r2, #72	; 0x48
 8004084:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004098:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	3348      	adds	r3, #72	; 0x48
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040be:	e007      	b.n	80040d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	401a      	ands	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040ea:	e007      	b.n	80040fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	431a      	orrs	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	431a      	orrs	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800411a:	f023 0201 	bic.w	r2, r3, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e006      	b.n	8004136 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d12e      	bne.n	80041b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800416e:	f7fe fd85 	bl	8002c7c <HAL_GetTick>
 8004172:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004174:	e012      	b.n	800419c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004176:	f7fe fd81 	bl	8002c7c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b0a      	cmp	r3, #10
 8004182:	d90b      	bls.n	800419c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2205      	movs	r2, #5
 8004194:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e012      	b.n	80041c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e5      	bne.n	8004176 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e006      	b.n	80041c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
  }
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041ca:	b480      	push	{r7}
 80041cc:	b087      	sub	sp, #28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d003      	beq.n	80041ee <HAL_CAN_GetRxMessage+0x24>
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	f040 80f3 	bne.w	80043d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10e      	bne.n	8004212 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0e7      	b.n	80043e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d8      	b.n	80043e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	331b      	adds	r3, #27
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	4413      	add	r3, r2
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0204 	and.w	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	331b      	adds	r3, #27
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4413      	add	r3, r2
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0d5b      	lsrs	r3, r3, #21
 800425e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e00b      	b.n	8004280 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	331b      	adds	r3, #27
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	4413      	add	r3, r2
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	08db      	lsrs	r3, r3, #3
 8004278:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	331b      	adds	r3, #27
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4413      	add	r3, r2
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0202 	and.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	331b      	adds	r3, #27
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	4413      	add	r3, r2
 80042a2:	3304      	adds	r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	331b      	adds	r3, #27
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	4413      	add	r3, r2
 80042ba:	3304      	adds	r3, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	331b      	adds	r3, #27
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	4413      	add	r3, r2
 80042d2:	3304      	adds	r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0a1a      	lsrs	r2, r3, #8
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	4413      	add	r3, r2
 8004318:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0c1a      	lsrs	r2, r3, #16
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	3302      	adds	r3, #2
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	4413      	add	r3, r2
 8004332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e1a      	lsrs	r2, r3, #24
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	3303      	adds	r3, #3
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4413      	add	r3, r2
 800434c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4413      	add	r3, r2
 8004364:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0a1a      	lsrs	r2, r3, #8
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	3305      	adds	r3, #5
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	4413      	add	r3, r2
 800437e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0c1a      	lsrs	r2, r3, #16
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	3306      	adds	r3, #6
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	4413      	add	r3, r2
 8004398:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	0e1a      	lsrs	r2, r3, #24
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	3307      	adds	r3, #7
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d108      	bne.n	80043c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0220 	orr.w	r2, r2, #32
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	e007      	b.n	80043d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0220 	orr.w	r2, r2, #32
 80043ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e006      	b.n	80043e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d002      	beq.n	800440c <HAL_CAN_ActivateNotification+0x1e>
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d109      	bne.n	8004420 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6959      	ldr	r1, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e006      	b.n	800442e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b08a      	sub	sp, #40	; 0x28
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d07c      	beq.n	800457a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d023      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f983 	bl	80047a8 <HAL_CAN_TxMailbox0CompleteCallback>
 80044a2:	e016      	b.n	80044d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	e00c      	b.n	80044d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ca:	e002      	b.n	80044d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f989 	bl	80047e4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d024      	beq.n	8004526 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f963 	bl	80047bc <HAL_CAN_TxMailbox1CompleteCallback>
 80044f6:	e016      	b.n	8004526 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	e00c      	b.n	8004526 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	e002      	b.n	8004526 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f969 	bl	80047f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d024      	beq.n	800457a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004538:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f943 	bl	80047d0 <HAL_CAN_TxMailbox2CompleteCallback>
 800454a:	e016      	b.n	800457a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	e00c      	b.n	800457a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	e002      	b.n	800457a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f949 	bl	800480c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004594:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2208      	movs	r2, #8
 80045b8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f930 	bl	8004820 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fd f98d 	bl	80018f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2210      	movs	r2, #16
 8004600:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2208      	movs	r2, #8
 800461c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f912 	bl	8004848 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8f9 	bl	8004834 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2210      	movs	r2, #16
 800465c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8fc 	bl	800485c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2208      	movs	r2, #8
 800467e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8f5 	bl	8004870 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d07b      	beq.n	8004788 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d072      	beq.n	8004780 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d043      	beq.n	8004780 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d03e      	beq.n	8004780 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004708:	2b60      	cmp	r3, #96	; 0x60
 800470a:	d02b      	beq.n	8004764 <HAL_CAN_IRQHandler+0x32a>
 800470c:	2b60      	cmp	r3, #96	; 0x60
 800470e:	d82e      	bhi.n	800476e <HAL_CAN_IRQHandler+0x334>
 8004710:	2b50      	cmp	r3, #80	; 0x50
 8004712:	d022      	beq.n	800475a <HAL_CAN_IRQHandler+0x320>
 8004714:	2b50      	cmp	r3, #80	; 0x50
 8004716:	d82a      	bhi.n	800476e <HAL_CAN_IRQHandler+0x334>
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d019      	beq.n	8004750 <HAL_CAN_IRQHandler+0x316>
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d826      	bhi.n	800476e <HAL_CAN_IRQHandler+0x334>
 8004720:	2b30      	cmp	r3, #48	; 0x30
 8004722:	d010      	beq.n	8004746 <HAL_CAN_IRQHandler+0x30c>
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d822      	bhi.n	800476e <HAL_CAN_IRQHandler+0x334>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d002      	beq.n	8004732 <HAL_CAN_IRQHandler+0x2f8>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d005      	beq.n	800473c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004730:	e01d      	b.n	800476e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	f043 0308 	orr.w	r3, r3, #8
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800473a:	e019      	b.n	8004770 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	f043 0310 	orr.w	r3, r3, #16
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004744:	e014      	b.n	8004770 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800474e:	e00f      	b.n	8004770 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004758:	e00a      	b.n	8004770 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004762:	e005      	b.n	8004770 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800476c:	e000      	b.n	8004770 <HAL_CAN_IRQHandler+0x336>
            break;
 800476e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800477e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2204      	movs	r2, #4
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f872 	bl	8004884 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047a0:	bf00      	nop
 80047a2:	3728      	adds	r7, #40	; 0x28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048b4:	4013      	ands	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ca:	4a04      	ldr	r2, [pc, #16]	; (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	60d3      	str	r3, [r2, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <__NVIC_GetPriorityGrouping+0x18>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 0307 	and.w	r3, r3, #7
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	4907      	ldr	r1, [pc, #28]	; (8004934 <__NVIC_EnableIRQ+0x38>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2001      	movs	r0, #1
 800491e:	fa00 f202 	lsl.w	r2, r0, r2
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000e100 	.word	0xe000e100

08004938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db0a      	blt.n	8004962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	490c      	ldr	r1, [pc, #48]	; (8004984 <__NVIC_SetPriority+0x4c>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	0112      	lsls	r2, r2, #4
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	440b      	add	r3, r1
 800495c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004960:	e00a      	b.n	8004978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	4908      	ldr	r1, [pc, #32]	; (8004988 <__NVIC_SetPriority+0x50>)
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	3b04      	subs	r3, #4
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	440b      	add	r3, r1
 8004976:	761a      	strb	r2, [r3, #24]
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000e100 	.word	0xe000e100
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f1c3 0307 	rsb	r3, r3, #7
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	bf28      	it	cs
 80049aa:	2304      	movcs	r3, #4
 80049ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d902      	bls.n	80049bc <NVIC_EncodePriority+0x30>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3b03      	subs	r3, #3
 80049ba:	e000      	b.n	80049be <NVIC_EncodePriority+0x32>
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	401a      	ands	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d4:	f04f 31ff 	mov.w	r1, #4294967295
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	43d9      	mvns	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e4:	4313      	orrs	r3, r2
         );
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3724      	adds	r7, #36	; 0x24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a04:	d301      	bcc.n	8004a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a06:	2301      	movs	r3, #1
 8004a08:	e00f      	b.n	8004a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <SysTick_Config+0x40>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a12:	210f      	movs	r1, #15
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	f7ff ff8e 	bl	8004938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <SysTick_Config+0x40>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <SysTick_Config+0x40>)
 8004a24:	2207      	movs	r2, #7
 8004a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	e000e010 	.word	0xe000e010

08004a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff29 	bl	8004898 <__NVIC_SetPriorityGrouping>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	4603      	mov	r3, r0
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a60:	f7ff ff3e 	bl	80048e0 <__NVIC_GetPriorityGrouping>
 8004a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f7ff ff8e 	bl	800498c <NVIC_EncodePriority>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff5d 	bl	8004938 <__NVIC_SetPriority>
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff31 	bl	80048fc <__NVIC_EnableIRQ>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff ffa2 	bl	80049f4 <SysTick_Config>
 8004ab0:	4603      	mov	r3, r0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e037      	b.n	8004b40 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ae6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004aea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9b8 	bl	8004e98 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}  
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_DMA_Start_IT+0x20>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e04a      	b.n	8004bfe <HAL_DMA_Start_IT+0xb6>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d13a      	bne.n	8004bf0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f94b 	bl	8004e3a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 020e 	orr.w	r2, r2, #14
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e00f      	b.n	8004bde <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 020a 	orr.w	r2, r2, #10
 8004bcc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0204 	bic.w	r2, r2, #4
 8004bdc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0201 	orr.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e005      	b.n	8004bfc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d008      	beq.n	8004c2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e020      	b.n	8004c6c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 020e 	bic.w	r2, r2, #14
 8004c38:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	2101      	movs	r1, #1
 8004c54:	fa01 f202 	lsl.w	r2, r1, r2
 8004c58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d005      	beq.n	8004c9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2204      	movs	r2, #4
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e027      	b.n	8004cea <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 020e 	bic.w	r2, r2, #14
 8004ca8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
    } 
  }
  return status;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	2204      	movs	r2, #4
 8004d12:	409a      	lsls	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d024      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x72>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01f      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0204 	bic.w	r2, r2, #4
 8004d42:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d52:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d06a      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004d64:	e065      	b.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02c      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0xdc>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d027      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 020a 	bic.w	r2, r2, #10
 8004d9c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	2102      	movs	r1, #2
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d035      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004dce:	e030      	b.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d028      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d023      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 020e 	bic.w	r2, r2, #14
 8004df8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f202 	lsl.w	r2, r1, r2
 8004e08:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
    }
  }
}  
 8004e30:	e7ff      	b.n	8004e32 <HAL_DMA_IRQHandler+0x13e>
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	2101      	movs	r1, #1
 8004e52:	fa01 f202 	lsl.w	r2, r1, r2
 8004e56:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d108      	bne.n	8004e7a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e78:	e007      	b.n	8004e8a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <DMA_CalcBaseAndBitshift+0x60>)
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d80f      	bhi.n	8004ecc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b12      	ldr	r3, [pc, #72]	; (8004efc <DMA_CalcBaseAndBitshift+0x64>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <DMA_CalcBaseAndBitshift+0x68>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a0f      	ldr	r2, [pc, #60]	; (8004f04 <DMA_CalcBaseAndBitshift+0x6c>)
 8004ec8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004eca:	e00e      	b.n	8004eea <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <DMA_CalcBaseAndBitshift+0x70>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <DMA_CalcBaseAndBitshift+0x68>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	009a      	lsls	r2, r3, #2
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a09      	ldr	r2, [pc, #36]	; (8004f0c <DMA_CalcBaseAndBitshift+0x74>)
 8004ee8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40020407 	.word	0x40020407
 8004efc:	bffdfff8 	.word	0xbffdfff8
 8004f00:	cccccccd 	.word	0xcccccccd
 8004f04:	40020000 	.word	0x40020000
 8004f08:	bffdfbf8 	.word	0xbffdfbf8
 8004f0c:	40020400 	.word	0x40020400

08004f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f1e:	e154      	b.n	80051ca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	2101      	movs	r1, #1
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8146 	beq.w	80051c4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d005      	beq.n	8004f50 <HAL_GPIO_Init+0x40>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d130      	bne.n	8004fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	43db      	mvns	r3, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f86:	2201      	movs	r2, #1
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4013      	ands	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 0201 	and.w	r2, r3, #1
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d017      	beq.n	8004fee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	2203      	movs	r2, #3
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d123      	bne.n	8005042 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	08da      	lsrs	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3208      	adds	r2, #8
 8005002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	220f      	movs	r2, #15
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4013      	ands	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	08da      	lsrs	r2, r3, #3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3208      	adds	r2, #8
 800503c:	6939      	ldr	r1, [r7, #16]
 800503e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	2203      	movs	r2, #3
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4013      	ands	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 0203 	and.w	r2, r3, #3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80a0 	beq.w	80051c4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005084:	4b58      	ldr	r3, [pc, #352]	; (80051e8 <HAL_GPIO_Init+0x2d8>)
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	4a57      	ldr	r2, [pc, #348]	; (80051e8 <HAL_GPIO_Init+0x2d8>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6193      	str	r3, [r2, #24]
 8005090:	4b55      	ldr	r3, [pc, #340]	; (80051e8 <HAL_GPIO_Init+0x2d8>)
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800509c:	4a53      	ldr	r2, [pc, #332]	; (80051ec <HAL_GPIO_Init+0x2dc>)
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	3302      	adds	r3, #2
 80050a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	220f      	movs	r2, #15
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050c6:	d019      	beq.n	80050fc <HAL_GPIO_Init+0x1ec>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a49      	ldr	r2, [pc, #292]	; (80051f0 <HAL_GPIO_Init+0x2e0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <HAL_GPIO_Init+0x1e8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a48      	ldr	r2, [pc, #288]	; (80051f4 <HAL_GPIO_Init+0x2e4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00d      	beq.n	80050f4 <HAL_GPIO_Init+0x1e4>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a47      	ldr	r2, [pc, #284]	; (80051f8 <HAL_GPIO_Init+0x2e8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <HAL_GPIO_Init+0x1e0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a46      	ldr	r2, [pc, #280]	; (80051fc <HAL_GPIO_Init+0x2ec>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <HAL_GPIO_Init+0x1dc>
 80050e8:	2304      	movs	r3, #4
 80050ea:	e008      	b.n	80050fe <HAL_GPIO_Init+0x1ee>
 80050ec:	2305      	movs	r3, #5
 80050ee:	e006      	b.n	80050fe <HAL_GPIO_Init+0x1ee>
 80050f0:	2303      	movs	r3, #3
 80050f2:	e004      	b.n	80050fe <HAL_GPIO_Init+0x1ee>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e002      	b.n	80050fe <HAL_GPIO_Init+0x1ee>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <HAL_GPIO_Init+0x1ee>
 80050fc:	2300      	movs	r3, #0
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	f002 0203 	and.w	r2, r2, #3
 8005104:	0092      	lsls	r2, r2, #2
 8005106:	4093      	lsls	r3, r2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800510e:	4937      	ldr	r1, [pc, #220]	; (80051ec <HAL_GPIO_Init+0x2dc>)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	3302      	adds	r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800511c:	4b38      	ldr	r3, [pc, #224]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	43db      	mvns	r3, r3
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005140:	4a2f      	ldr	r2, [pc, #188]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005146:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	43db      	mvns	r3, r3
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4013      	ands	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800516a:	4a25      	ldr	r2, [pc, #148]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005170:	4b23      	ldr	r3, [pc, #140]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	43db      	mvns	r3, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4013      	ands	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005194:	4a1a      	ldr	r2, [pc, #104]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800519a:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051be:	4a10      	ldr	r2, [pc, #64]	; (8005200 <HAL_GPIO_Init+0x2f0>)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3301      	adds	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f47f aea3 	bne.w	8004f20 <HAL_GPIO_Init+0x10>
  }
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40010000 	.word	0x40010000
 80051f0:	48000400 	.word	0x48000400
 80051f4:	48000800 	.word	0x48000800
 80051f8:	48000c00 	.word	0x48000c00
 80051fc:	48001000 	.word	0x48001000
 8005200:	40010400 	.word	0x40010400

08005204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	887b      	ldrh	r3, [r7, #2]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
 8005220:	e001      	b.n	8005226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
 8005240:	4613      	mov	r3, r2
 8005242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005244:	787b      	ldrb	r3, [r7, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005250:	e002      	b.n	8005258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005252:	887a      	ldrh	r2, [r7, #2]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800526a:	af00      	add	r7, sp, #0
 800526c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005274:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f001 b823 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 817d 	beq.w	800559a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80052a0:	4bbc      	ldr	r3, [pc, #752]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 030c 	and.w	r3, r3, #12
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d00c      	beq.n	80052c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052ac:	4bb9      	ldr	r3, [pc, #740]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f003 030c 	and.w	r3, r3, #12
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d15c      	bne.n	8005372 <HAL_RCC_OscConfig+0x10e>
 80052b8:	4bb6      	ldr	r3, [pc, #728]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d155      	bne.n	8005372 <HAL_RCC_OscConfig+0x10e>
 80052c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80052d2:	fa93 f3a3 	rbit	r3, r3
 80052d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052de:	fab3 f383 	clz	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d102      	bne.n	80052f8 <HAL_RCC_OscConfig+0x94>
 80052f2:	4ba8      	ldr	r3, [pc, #672]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	e015      	b.n	8005324 <HAL_RCC_OscConfig+0xc0>
 80052f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005304:	fa93 f3a3 	rbit	r3, r3
 8005308:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800530c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005310:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005314:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005318:	fa93 f3a3 	rbit	r3, r3
 800531c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005320:	4b9c      	ldr	r3, [pc, #624]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005328:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800532c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005330:	fa92 f2a2 	rbit	r2, r2
 8005334:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005338:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800533c:	fab2 f282 	clz	r2, r2
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	f042 0220 	orr.w	r2, r2, #32
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	f002 021f 	and.w	r2, r2, #31
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f202 	lsl.w	r2, r1, r2
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 811f 	beq.w	8005598 <HAL_RCC_OscConfig+0x334>
 800535a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 8116 	bne.w	8005598 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	f000 bfaf 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d106      	bne.n	8005392 <HAL_RCC_OscConfig+0x12e>
 8005384:	4b83      	ldr	r3, [pc, #524]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 800538a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	e036      	b.n	8005400 <HAL_RCC_OscConfig+0x19c>
 8005392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x158>
 80053a2:	4b7c      	ldr	r3, [pc, #496]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a7b      	ldr	r2, [pc, #492]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b79      	ldr	r3, [pc, #484]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a78      	ldr	r2, [pc, #480]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e021      	b.n	8005400 <HAL_RCC_OscConfig+0x19c>
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x184>
 80053ce:	4b71      	ldr	r3, [pc, #452]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a70      	ldr	r2, [pc, #448]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b6e      	ldr	r3, [pc, #440]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6d      	ldr	r2, [pc, #436]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0x19c>
 80053e8:	4b6a      	ldr	r3, [pc, #424]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a69      	ldr	r2, [pc, #420]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b67      	ldr	r3, [pc, #412]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a66      	ldr	r2, [pc, #408]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80053fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005400:	4b64      	ldr	r3, [pc, #400]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	f023 020f 	bic.w	r2, r3, #15
 8005408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	495f      	ldr	r1, [pc, #380]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 8005416:	4313      	orrs	r3, r2
 8005418:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800541a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d059      	beq.n	80054de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fd fc27 	bl	8002c7c <HAL_GetTick>
 800542e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	e00a      	b.n	800544a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd fc22 	bl	8002c7c <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b64      	cmp	r3, #100	; 0x64
 8005442:	d902      	bls.n	800544a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	f000 bf43 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
 800544a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800544e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005452:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005456:	fa93 f3a3 	rbit	r3, r3
 800545a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800545e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d102      	bne.n	800547c <HAL_RCC_OscConfig+0x218>
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	e015      	b.n	80054a8 <HAL_RCC_OscConfig+0x244>
 800547c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005480:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005488:	fa93 f3a3 	rbit	r3, r3
 800548c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005494:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005498:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80054a4:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80054b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80054b4:	fa92 f2a2 	rbit	r2, r2
 80054b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80054bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80054c0:	fab2 f282 	clz	r2, r2
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	f042 0220 	orr.w	r2, r2, #32
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	f002 021f 	and.w	r2, r2, #31
 80054d0:	2101      	movs	r1, #1
 80054d2:	fa01 f202 	lsl.w	r2, r1, r2
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ab      	beq.n	8005434 <HAL_RCC_OscConfig+0x1d0>
 80054dc:	e05d      	b.n	800559a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fd fbcd 	bl	8002c7c <HAL_GetTick>
 80054e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e6:	e00a      	b.n	80054fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e8:	f7fd fbc8 	bl	8002c7c <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b64      	cmp	r3, #100	; 0x64
 80054f6:	d902      	bls.n	80054fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	f000 bee9 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
 80054fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005502:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005512:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <HAL_RCC_OscConfig+0x2cc>
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	e015      	b.n	800555c <HAL_RCC_OscConfig+0x2f8>
 8005530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005534:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800553c:	fa93 f3a3 	rbit	r3, r3
 8005540:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005548:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800554c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005550:	fa93 f3a3 	rbit	r3, r3
 8005554:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <HAL_RCC_OscConfig+0x330>)
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005560:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005564:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005568:	fa92 f2a2 	rbit	r2, r2
 800556c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005570:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005574:	fab2 f282 	clz	r2, r2
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	f042 0220 	orr.w	r2, r2, #32
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	f002 021f 	and.w	r2, r2, #31
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f202 	lsl.w	r2, r1, r2
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ab      	bne.n	80054e8 <HAL_RCC_OscConfig+0x284>
 8005590:	e003      	b.n	800559a <HAL_RCC_OscConfig+0x336>
 8005592:	bf00      	nop
 8005594:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800559a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 817d 	beq.w	80058aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80055b0:	4ba6      	ldr	r3, [pc, #664]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80055bc:	4ba3      	ldr	r3, [pc, #652]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 030c 	and.w	r3, r3, #12
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d172      	bne.n	80056ae <HAL_RCC_OscConfig+0x44a>
 80055c8:	4ba0      	ldr	r3, [pc, #640]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d16c      	bne.n	80056ae <HAL_RCC_OscConfig+0x44a>
 80055d4:	2302      	movs	r3, #2
 80055d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80055e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ea:	fab3 f383 	clz	r3, r3
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d102      	bne.n	8005604 <HAL_RCC_OscConfig+0x3a0>
 80055fe:	4b93      	ldr	r3, [pc, #588]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	e013      	b.n	800562c <HAL_RCC_OscConfig+0x3c8>
 8005604:	2302      	movs	r3, #2
 8005606:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800560e:	fa93 f3a3 	rbit	r3, r3
 8005612:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005616:	2302      	movs	r3, #2
 8005618:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800561c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005628:	4b88      	ldr	r3, [pc, #544]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	2202      	movs	r2, #2
 800562e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005632:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005636:	fa92 f2a2 	rbit	r2, r2
 800563a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800563e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005642:	fab2 f282 	clz	r2, r2
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	f042 0220 	orr.w	r2, r2, #32
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	f002 021f 	and.w	r2, r2, #31
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f202 	lsl.w	r2, r1, r2
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCC_OscConfig+0x410>
 800565e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d002      	beq.n	8005674 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f000 be2e 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005674:	4b75      	ldr	r3, [pc, #468]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800567c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	21f8      	movs	r1, #248	; 0xf8
 800568a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005692:	fa91 f1a1 	rbit	r1, r1
 8005696:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800569a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800569e:	fab1 f181 	clz	r1, r1
 80056a2:	b2c9      	uxtb	r1, r1
 80056a4:	408b      	lsls	r3, r1
 80056a6:	4969      	ldr	r1, [pc, #420]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ac:	e0fd      	b.n	80058aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8088 	beq.w	80057d0 <HAL_RCC_OscConfig+0x56c>
 80056c0:	2301      	movs	r3, #1
 80056c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80056ca:	fa93 f3a3 	rbit	r3, r3
 80056ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80056d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	461a      	mov	r2, r3
 80056e8:	2301      	movs	r3, #1
 80056ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ec:	f7fd fac6 	bl	8002c7c <HAL_GetTick>
 80056f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f4:	e00a      	b.n	800570c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f6:	f7fd fac1 	bl	8002c7c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d902      	bls.n	800570c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	f000 bde2 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
 800570c:	2302      	movs	r3, #2
 800570e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005716:	fa93 f3a3 	rbit	r3, r3
 800571a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800571e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_RCC_OscConfig+0x4d8>
 8005736:	4b45      	ldr	r3, [pc, #276]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	e013      	b.n	8005764 <HAL_RCC_OscConfig+0x500>
 800573c:	2302      	movs	r3, #2
 800573e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005742:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800574e:	2302      	movs	r3, #2
 8005750:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005754:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005758:	fa93 f3a3 	rbit	r3, r3
 800575c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005760:	4b3a      	ldr	r3, [pc, #232]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2202      	movs	r2, #2
 8005766:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800576a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800576e:	fa92 f2a2 	rbit	r2, r2
 8005772:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005776:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800577a:	fab2 f282 	clz	r2, r2
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	f042 0220 	orr.w	r2, r2, #32
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f002 021f 	and.w	r2, r2, #31
 800578a:	2101      	movs	r1, #1
 800578c:	fa01 f202 	lsl.w	r2, r1, r2
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0af      	beq.n	80056f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800579e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	21f8      	movs	r1, #248	; 0xf8
 80057ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80057b4:	fa91 f1a1 	rbit	r1, r1
 80057b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80057bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80057c0:	fab1 f181 	clz	r1, r1
 80057c4:	b2c9      	uxtb	r1, r1
 80057c6:	408b      	lsls	r3, r1
 80057c8:	4920      	ldr	r1, [pc, #128]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]
 80057ce:	e06c      	b.n	80058aa <HAL_RCC_OscConfig+0x646>
 80057d0:	2301      	movs	r3, #1
 80057d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80057da:	fa93 f3a3 	rbit	r3, r3
 80057de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80057e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e6:	fab3 f383 	clz	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	461a      	mov	r2, r3
 80057f8:	2300      	movs	r3, #0
 80057fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fd fa3e 	bl	8002c7c <HAL_GetTick>
 8005800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005804:	e00a      	b.n	800581c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005806:	f7fd fa39 	bl	8002c7c <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d902      	bls.n	800581c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	f000 bd5a 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
 800581c:	2302      	movs	r3, #2
 800581e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800582e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005832:	fab3 f383 	clz	r3, r3
 8005836:	b2db      	uxtb	r3, r3
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f043 0301 	orr.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d104      	bne.n	8005850 <HAL_RCC_OscConfig+0x5ec>
 8005846:	4b01      	ldr	r3, [pc, #4]	; (800584c <HAL_RCC_OscConfig+0x5e8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	e015      	b.n	8005878 <HAL_RCC_OscConfig+0x614>
 800584c:	40021000 	.word	0x40021000
 8005850:	2302      	movs	r3, #2
 8005852:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005856:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800585a:	fa93 f3a3 	rbit	r3, r3
 800585e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005862:	2302      	movs	r3, #2
 8005864:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005868:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800586c:	fa93 f3a3 	rbit	r3, r3
 8005870:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005874:	4bc8      	ldr	r3, [pc, #800]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2202      	movs	r2, #2
 800587a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800587e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005882:	fa92 f2a2 	rbit	r2, r2
 8005886:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800588a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800588e:	fab2 f282 	clz	r2, r2
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	f042 0220 	orr.w	r2, r2, #32
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	f002 021f 	and.w	r2, r2, #31
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f202 	lsl.w	r2, r1, r2
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1ad      	bne.n	8005806 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8110 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d079      	beq.n	80059c4 <HAL_RCC_OscConfig+0x760>
 80058d0:	2301      	movs	r3, #1
 80058d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058da:	fa93 f3a3 	rbit	r3, r3
 80058de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80058e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	4bab      	ldr	r3, [pc, #684]	; (8005b9c <HAL_RCC_OscConfig+0x938>)
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	461a      	mov	r2, r3
 80058f6:	2301      	movs	r3, #1
 80058f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058fa:	f7fd f9bf 	bl	8002c7c <HAL_GetTick>
 80058fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005904:	f7fd f9ba 	bl	8002c7c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d902      	bls.n	800591a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	f000 bcdb 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
 800591a:	2302      	movs	r3, #2
 800591c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005924:	fa93 f3a3 	rbit	r3, r3
 8005928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800592c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005930:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005934:	2202      	movs	r2, #2
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	fa93 f2a3 	rbit	r2, r3
 8005946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005958:	2202      	movs	r2, #2
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	fa93 f2a3 	rbit	r2, r3
 800596a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005972:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005974:	4b88      	ldr	r3, [pc, #544]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005980:	2102      	movs	r1, #2
 8005982:	6019      	str	r1, [r3, #0]
 8005984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005988:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	fa93 f1a3 	rbit	r1, r3
 8005992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005996:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800599a:	6019      	str	r1, [r3, #0]
  return result;
 800599c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	fab3 f383 	clz	r3, r3
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2101      	movs	r1, #1
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0a0      	beq.n	8005904 <HAL_RCC_OscConfig+0x6a0>
 80059c2:	e08d      	b.n	8005ae0 <HAL_RCC_OscConfig+0x87c>
 80059c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	fa93 f2a3 	rbit	r2, r3
 80059de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059e6:	601a      	str	r2, [r3, #0]
  return result;
 80059e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f2:	fab3 f383 	clz	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCC_OscConfig+0x938>)
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	461a      	mov	r2, r3
 8005a02:	2300      	movs	r3, #0
 8005a04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a06:	f7fd f939 	bl	8002c7c <HAL_GetTick>
 8005a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a10:	f7fd f934 	bl	8002c7c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d902      	bls.n	8005a26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	f000 bc55 	b.w	80062d0 <HAL_RCC_OscConfig+0x106c>
 8005a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005a2e:	2202      	movs	r2, #2
 8005a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	fa93 f2a3 	rbit	r2, r3
 8005a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a52:	2202      	movs	r2, #2
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	fa93 f2a3 	rbit	r2, r3
 8005a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a76:	2202      	movs	r2, #2
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	fa93 f2a3 	rbit	r2, r3
 8005a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005a90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a92:	4b41      	ldr	r3, [pc, #260]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	6019      	str	r1, [r3, #0]
 8005aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	fa93 f1a3 	rbit	r1, r3
 8005ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005ab8:	6019      	str	r1, [r3, #0]
  return result;
 8005aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	fab3 f383 	clz	r3, r3
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d197      	bne.n	8005a10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 81a1 	beq.w	8005e38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005afc:	4b26      	ldr	r3, [pc, #152]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d116      	bne.n	8005b36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b12:	61d3      	str	r3, [r2, #28]
 8005b14:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005b2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <HAL_RCC_OscConfig+0x93c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11a      	bne.n	8005b78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <HAL_RCC_OscConfig+0x93c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a16      	ldr	r2, [pc, #88]	; (8005ba0 <HAL_RCC_OscConfig+0x93c>)
 8005b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b4e:	f7fd f895 	bl	8002c7c <HAL_GetTick>
 8005b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b56:	e009      	b.n	8005b6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b58:	f7fd f890 	bl	8002c7c <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b64      	cmp	r3, #100	; 0x64
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e3b1      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <HAL_RCC_OscConfig+0x93c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ef      	beq.n	8005b58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d10d      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x940>
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4a02      	ldr	r2, [pc, #8]	; (8005b98 <HAL_RCC_OscConfig+0x934>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6213      	str	r3, [r2, #32]
 8005b94:	e03c      	b.n	8005c10 <HAL_RCC_OscConfig+0x9ac>
 8005b96:	bf00      	nop
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	10908120 	.word	0x10908120
 8005ba0:	40007000 	.word	0x40007000
 8005ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCC_OscConfig+0x96a>
 8005bb4:	4bc1      	ldr	r3, [pc, #772]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	4ac0      	ldr	r2, [pc, #768]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	6213      	str	r3, [r2, #32]
 8005bc0:	4bbe      	ldr	r3, [pc, #760]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	4abd      	ldr	r2, [pc, #756]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bc6:	f023 0304 	bic.w	r3, r3, #4
 8005bca:	6213      	str	r3, [r2, #32]
 8005bcc:	e020      	b.n	8005c10 <HAL_RCC_OscConfig+0x9ac>
 8005bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x994>
 8005bde:	4bb7      	ldr	r3, [pc, #732]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4ab6      	ldr	r2, [pc, #728]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005be4:	f043 0304 	orr.w	r3, r3, #4
 8005be8:	6213      	str	r3, [r2, #32]
 8005bea:	4bb4      	ldr	r3, [pc, #720]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	4ab3      	ldr	r2, [pc, #716]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	6213      	str	r3, [r2, #32]
 8005bf6:	e00b      	b.n	8005c10 <HAL_RCC_OscConfig+0x9ac>
 8005bf8:	4bb0      	ldr	r3, [pc, #704]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	4aaf      	ldr	r2, [pc, #700]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	6213      	str	r3, [r2, #32]
 8005c04:	4bad      	ldr	r3, [pc, #692]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	4aac      	ldr	r2, [pc, #688]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005c0a:	f023 0304 	bic.w	r3, r3, #4
 8005c0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8081 	beq.w	8005d24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c22:	f7fd f82b 	bl	8002c7c <HAL_GetTick>
 8005c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fd f826 	bl	8002c7c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e345      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
 8005c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	fa93 f2a3 	rbit	r2, r3
 8005c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005c70:	2202      	movs	r2, #2
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	fa93 f2a3 	rbit	r2, r3
 8005c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005c8a:	601a      	str	r2, [r3, #0]
  return result;
 8005c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c90:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005c94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c96:	fab3 f383 	clz	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d102      	bne.n	8005cb0 <HAL_RCC_OscConfig+0xa4c>
 8005caa:	4b84      	ldr	r3, [pc, #528]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	e013      	b.n	8005cd8 <HAL_RCC_OscConfig+0xa74>
 8005cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005cb8:	2202      	movs	r2, #2
 8005cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	fa93 f2a3 	rbit	r2, r3
 8005cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	4b79      	ldr	r3, [pc, #484]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cdc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005ce0:	2102      	movs	r1, #2
 8005ce2:	6011      	str	r1, [r2, #0]
 8005ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ce8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	fa92 f1a2 	rbit	r1, r2
 8005cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005cf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005cfa:	6011      	str	r1, [r2, #0]
  return result;
 8005cfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d00:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	fab2 f282 	clz	r2, r2
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	f002 021f 	and.w	r2, r2, #31
 8005d16:	2101      	movs	r1, #1
 8005d18:	fa01 f202 	lsl.w	r2, r1, r2
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d084      	beq.n	8005c2c <HAL_RCC_OscConfig+0x9c8>
 8005d22:	e07f      	b.n	8005e24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d24:	f7fc ffaa 	bl	8002c7c <HAL_GetTick>
 8005d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2c:	e00b      	b.n	8005d46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d2e:	f7fc ffa5 	bl	8002c7c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e2c4      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
 8005d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005d4e:	2202      	movs	r2, #2
 8005d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	fa93 f2a3 	rbit	r2, r3
 8005d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005d72:	2202      	movs	r2, #2
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	fa93 f2a3 	rbit	r2, r3
 8005d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005d8c:	601a      	str	r2, [r3, #0]
  return result;
 8005d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005d96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d98:	fab3 f383 	clz	r3, r3
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f043 0302 	orr.w	r3, r3, #2
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d102      	bne.n	8005db2 <HAL_RCC_OscConfig+0xb4e>
 8005dac:	4b43      	ldr	r3, [pc, #268]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	e013      	b.n	8005dda <HAL_RCC_OscConfig+0xb76>
 8005db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005dba:	2202      	movs	r2, #2
 8005dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	fa93 f2a3 	rbit	r2, r3
 8005dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	4b39      	ldr	r3, [pc, #228]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dde:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005de2:	2102      	movs	r1, #2
 8005de4:	6011      	str	r1, [r2, #0]
 8005de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	fa92 f1a2 	rbit	r1, r2
 8005df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005df8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005dfc:	6011      	str	r1, [r2, #0]
  return result;
 8005dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	fab2 f282 	clz	r2, r2
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	f002 021f 	and.w	r2, r2, #31
 8005e18:	2101      	movs	r1, #1
 8005e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d184      	bne.n	8005d2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4a22      	ldr	r2, [pc, #136]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8242 	beq.w	80062ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <HAL_RCC_OscConfig+0xc58>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	f000 8213 	beq.w	800627e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	f040 8162 	bne.w	800612e <HAL_RCC_OscConfig+0xeca>
 8005e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	fa93 f2a3 	rbit	r2, r3
 8005e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005e8e:	601a      	str	r2, [r3, #0]
  return result;
 8005e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005e98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9a:	fab3 f383 	clz	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ea4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	461a      	mov	r2, r3
 8005eac:	2300      	movs	r3, #0
 8005eae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb0:	f7fc fee4 	bl	8002c7c <HAL_GetTick>
 8005eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eb8:	e00c      	b.n	8005ed4 <HAL_RCC_OscConfig+0xc70>
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fc fedc 	bl	8002c7c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e1fd      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
 8005ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	fa93 f2a3 	rbit	r2, r3
 8005ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005ef8:	601a      	str	r2, [r3, #0]
  return result;
 8005efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005efe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005f02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f04:	fab3 f383 	clz	r3, r3
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d102      	bne.n	8005f1e <HAL_RCC_OscConfig+0xcba>
 8005f18:	4bb0      	ldr	r3, [pc, #704]	; (80061dc <HAL_RCC_OscConfig+0xf78>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	e027      	b.n	8005f6e <HAL_RCC_OscConfig+0xd0a>
 8005f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	fa93 f2a3 	rbit	r2, r3
 8005f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	fa93 f2a3 	rbit	r2, r3
 8005f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	4b9c      	ldr	r3, [pc, #624]	; (80061dc <HAL_RCC_OscConfig+0xf78>)
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005f76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f7a:	6011      	str	r1, [r2, #0]
 8005f7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	fa92 f1a2 	rbit	r1, r2
 8005f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005f92:	6011      	str	r1, [r2, #0]
  return result;
 8005f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	fab2 f282 	clz	r2, r2
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	f042 0220 	orr.w	r2, r2, #32
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	f002 021f 	and.w	r2, r2, #31
 8005fae:	2101      	movs	r1, #1
 8005fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d182      	bne.n	8005ec0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fba:	4b88      	ldr	r3, [pc, #544]	; (80061dc <HAL_RCC_OscConfig+0xf78>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	497f      	ldr	r1, [pc, #508]	; (80061dc <HAL_RCC_OscConfig+0xf78>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	604b      	str	r3, [r1, #4]
 8005fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005fea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ff4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	fa93 f2a3 	rbit	r2, r3
 8005ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006002:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006006:	601a      	str	r2, [r3, #0]
  return result;
 8006008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006010:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006012:	fab3 f383 	clz	r3, r3
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800601c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	461a      	mov	r2, r3
 8006024:	2301      	movs	r3, #1
 8006026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006028:	f7fc fe28 	bl	8002c7c <HAL_GetTick>
 800602c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006030:	e009      	b.n	8006046 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006032:	f7fc fe23 	bl	8002c7c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e144      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
 8006046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800604e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006058:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	fa93 f2a3 	rbit	r2, r3
 8006062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006066:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800606a:	601a      	str	r2, [r3, #0]
  return result;
 800606c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006070:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006074:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d102      	bne.n	8006090 <HAL_RCC_OscConfig+0xe2c>
 800608a:	4b54      	ldr	r3, [pc, #336]	; (80061dc <HAL_RCC_OscConfig+0xf78>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	e027      	b.n	80060e0 <HAL_RCC_OscConfig+0xe7c>
 8006090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006094:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800609c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	fa93 f2a3 	rbit	r2, r3
 80060ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80060be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	fa93 f2a3 	rbit	r2, r3
 80060d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	4b3f      	ldr	r3, [pc, #252]	; (80061dc <HAL_RCC_OscConfig+0xf78>)
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80060e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060ec:	6011      	str	r1, [r2, #0]
 80060ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	fa92 f1a2 	rbit	r1, r2
 80060fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006100:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006104:	6011      	str	r1, [r2, #0]
  return result;
 8006106:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800610a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	fab2 f282 	clz	r2, r2
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	f042 0220 	orr.w	r2, r2, #32
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	f002 021f 	and.w	r2, r2, #31
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f202 	lsl.w	r2, r1, r2
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d082      	beq.n	8006032 <HAL_RCC_OscConfig+0xdce>
 800612c:	e0cf      	b.n	80062ce <HAL_RCC_OscConfig+0x106a>
 800612e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006132:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006136:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800613a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006140:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	fa93 f2a3 	rbit	r2, r3
 800614a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800614e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006152:	601a      	str	r2, [r3, #0]
  return result;
 8006154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006158:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800615c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615e:	fab3 f383 	clz	r3, r3
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006168:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	461a      	mov	r2, r3
 8006170:	2300      	movs	r3, #0
 8006172:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006174:	f7fc fd82 	bl	8002c7c <HAL_GetTick>
 8006178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800617c:	e009      	b.n	8006192 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800617e:	f7fc fd7d 	bl	8002c7c <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e09e      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
 8006192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006196:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800619a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800619e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	fa93 f2a3 	rbit	r2, r3
 80061ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80061b6:	601a      	str	r2, [r3, #0]
  return result;
 80061b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80061c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f043 0301 	orr.w	r3, r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d104      	bne.n	80061e0 <HAL_RCC_OscConfig+0xf7c>
 80061d6:	4b01      	ldr	r3, [pc, #4]	; (80061dc <HAL_RCC_OscConfig+0xf78>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	e029      	b.n	8006230 <HAL_RCC_OscConfig+0xfcc>
 80061dc:	40021000 	.word	0x40021000
 80061e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80061e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	fa93 f2a3 	rbit	r2, r3
 80061fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006200:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800620a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800620e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006218:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	fa93 f2a3 	rbit	r2, r3
 8006222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006226:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCC_OscConfig+0x1078>)
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006234:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006238:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800623c:	6011      	str	r1, [r2, #0]
 800623e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006242:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	fa92 f1a2 	rbit	r1, r2
 800624c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006250:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006254:	6011      	str	r1, [r2, #0]
  return result;
 8006256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800625a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	fab2 f282 	clz	r2, r2
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	f042 0220 	orr.w	r2, r2, #32
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	f002 021f 	and.w	r2, r2, #31
 8006270:	2101      	movs	r1, #1
 8006272:	fa01 f202 	lsl.w	r2, r1, r2
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d180      	bne.n	800617e <HAL_RCC_OscConfig+0xf1a>
 800627c:	e027      	b.n	80062ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800627e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e01e      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <HAL_RCC_OscConfig+0x1078>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800629a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800629e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d10b      	bne.n	80062ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80062b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80062b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d001      	beq.n	80062ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40021000 	.word	0x40021000

080062e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b09e      	sub	sp, #120	; 0x78
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e162      	b.n	80065be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b90      	ldr	r3, [pc, #576]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d910      	bls.n	8006328 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b8d      	ldr	r3, [pc, #564]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 0207 	bic.w	r2, r3, #7
 800630e:	498b      	ldr	r1, [pc, #556]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b89      	ldr	r3, [pc, #548]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e14a      	b.n	80065be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006334:	4b82      	ldr	r3, [pc, #520]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	497f      	ldr	r1, [pc, #508]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80dc 	beq.w	800650c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d13c      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xf6>
 800635c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006360:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006364:	fa93 f3a3 	rbit	r3, r3
 8006368:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800636a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d102      	bne.n	8006386 <HAL_RCC_ClockConfig+0xa6>
 8006380:	4b6f      	ldr	r3, [pc, #444]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	e00f      	b.n	80063a6 <HAL_RCC_ClockConfig+0xc6>
 8006386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800638a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800638e:	fa93 f3a3 	rbit	r3, r3
 8006392:	667b      	str	r3, [r7, #100]	; 0x64
 8006394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006398:	663b      	str	r3, [r7, #96]	; 0x60
 800639a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800639c:	fa93 f3a3 	rbit	r3, r3
 80063a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063a2:	4b67      	ldr	r3, [pc, #412]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80063ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063ae:	fa92 f2a2 	rbit	r2, r2
 80063b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80063b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063b6:	fab2 f282 	clz	r2, r2
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	f042 0220 	orr.w	r2, r2, #32
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	f002 021f 	and.w	r2, r2, #31
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f202 	lsl.w	r2, r1, r2
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d17b      	bne.n	80064ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e0f3      	b.n	80065be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d13c      	bne.n	8006458 <HAL_RCC_ClockConfig+0x178>
 80063de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e6:	fa93 f3a3 	rbit	r3, r3
 80063ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80063ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d102      	bne.n	8006408 <HAL_RCC_ClockConfig+0x128>
 8006402:	4b4f      	ldr	r3, [pc, #316]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	e00f      	b.n	8006428 <HAL_RCC_ClockConfig+0x148>
 8006408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800640c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006410:	fa93 f3a3 	rbit	r3, r3
 8006414:	647b      	str	r3, [r7, #68]	; 0x44
 8006416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800641a:	643b      	str	r3, [r7, #64]	; 0x40
 800641c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641e:	fa93 f3a3 	rbit	r3, r3
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006424:	4b46      	ldr	r3, [pc, #280]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800642c:	63ba      	str	r2, [r7, #56]	; 0x38
 800642e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006430:	fa92 f2a2 	rbit	r2, r2
 8006434:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006438:	fab2 f282 	clz	r2, r2
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	f042 0220 	orr.w	r2, r2, #32
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	f002 021f 	and.w	r2, r2, #31
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f202 	lsl.w	r2, r1, r2
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d13a      	bne.n	80064ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e0b2      	b.n	80065be <HAL_RCC_ClockConfig+0x2de>
 8006458:	2302      	movs	r3, #2
 800645a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	fa93 f3a3 	rbit	r3, r3
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006466:	fab3 f383 	clz	r3, r3
 800646a:	b2db      	uxtb	r3, r3
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	b2db      	uxtb	r3, r3
 8006470:	f043 0301 	orr.w	r3, r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b01      	cmp	r3, #1
 8006478:	d102      	bne.n	8006480 <HAL_RCC_ClockConfig+0x1a0>
 800647a:	4b31      	ldr	r3, [pc, #196]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	e00d      	b.n	800649c <HAL_RCC_ClockConfig+0x1bc>
 8006480:	2302      	movs	r3, #2
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	fa93 f3a3 	rbit	r3, r3
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
 800648c:	2302      	movs	r3, #2
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	fa93 f3a3 	rbit	r3, r3
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	4b29      	ldr	r3, [pc, #164]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2202      	movs	r2, #2
 800649e:	61ba      	str	r2, [r7, #24]
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	fa92 f2a2 	rbit	r2, r2
 80064a6:	617a      	str	r2, [r7, #20]
  return result;
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	fab2 f282 	clz	r2, r2
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	f042 0220 	orr.w	r2, r2, #32
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	f002 021f 	and.w	r2, r2, #31
 80064ba:	2101      	movs	r1, #1
 80064bc:	fa01 f202 	lsl.w	r2, r1, r2
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e079      	b.n	80065be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ca:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f023 0203 	bic.w	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	491a      	ldr	r1, [pc, #104]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064dc:	f7fc fbce 	bl	8002c7c <HAL_GetTick>
 80064e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e2:	e00a      	b.n	80064fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e4:	f7fc fbca 	bl	8002c7c <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e061      	b.n	80065be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fa:	4b11      	ldr	r3, [pc, #68]	; (8006540 <HAL_RCC_ClockConfig+0x260>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 020c 	and.w	r2, r3, #12
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	429a      	cmp	r2, r3
 800650a:	d1eb      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d214      	bcs.n	8006544 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 0207 	bic.w	r2, r3, #7
 8006522:	4906      	ldr	r1, [pc, #24]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	4313      	orrs	r3, r2
 8006528:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b04      	ldr	r3, [pc, #16]	; (800653c <HAL_RCC_ClockConfig+0x25c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d005      	beq.n	8006544 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e040      	b.n	80065be <HAL_RCC_ClockConfig+0x2de>
 800653c:	40022000 	.word	0x40022000
 8006540:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <HAL_RCC_ClockConfig+0x2e8>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	491a      	ldr	r1, [pc, #104]	; (80065c8 <HAL_RCC_ClockConfig+0x2e8>)
 800655e:	4313      	orrs	r3, r2
 8006560:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800656e:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <HAL_RCC_ClockConfig+0x2e8>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4912      	ldr	r1, [pc, #72]	; (80065c8 <HAL_RCC_ClockConfig+0x2e8>)
 800657e:	4313      	orrs	r3, r2
 8006580:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006582:	f000 f829 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 8006586:	4601      	mov	r1, r0
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <HAL_RCC_ClockConfig+0x2e8>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006590:	22f0      	movs	r2, #240	; 0xf0
 8006592:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	fa92 f2a2 	rbit	r2, r2
 800659a:	60fa      	str	r2, [r7, #12]
  return result;
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	fab2 f282 	clz	r2, r2
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	40d3      	lsrs	r3, r2
 80065a6:	4a09      	ldr	r2, [pc, #36]	; (80065cc <HAL_RCC_ClockConfig+0x2ec>)
 80065a8:	5cd3      	ldrb	r3, [r2, r3]
 80065aa:	fa21 f303 	lsr.w	r3, r1, r3
 80065ae:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <HAL_RCC_ClockConfig+0x2f0>)
 80065b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80065b2:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <HAL_RCC_ClockConfig+0x2f4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fc fb1c 	bl	8002bf4 <HAL_InitTick>
  
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3778      	adds	r7, #120	; 0x78
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	0800c1bc 	.word	0x0800c1bc
 80065d0:	20000000 	.word	0x20000000
 80065d4:	20000004 	.word	0x20000004

080065d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	b08b      	sub	sp, #44	; 0x2c
 80065dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	2300      	movs	r3, #0
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	2300      	movs	r3, #0
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80065f2:	4b29      	ldr	r3, [pc, #164]	; (8006698 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d002      	beq.n	8006608 <HAL_RCC_GetSysClockFreq+0x30>
 8006602:	2b08      	cmp	r3, #8
 8006604:	d003      	beq.n	800660e <HAL_RCC_GetSysClockFreq+0x36>
 8006606:	e03c      	b.n	8006682 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006608:	4b24      	ldr	r3, [pc, #144]	; (800669c <HAL_RCC_GetSysClockFreq+0xc4>)
 800660a:	623b      	str	r3, [r7, #32]
      break;
 800660c:	e03c      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006614:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006618:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	fa92 f2a2 	rbit	r2, r2
 8006620:	607a      	str	r2, [r7, #4]
  return result;
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	fab2 f282 	clz	r2, r2
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	40d3      	lsrs	r3, r2
 800662c:	4a1c      	ldr	r2, [pc, #112]	; (80066a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800662e:	5cd3      	ldrb	r3, [r2, r3]
 8006630:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006632:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	220f      	movs	r2, #15
 800663c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	fa92 f2a2 	rbit	r2, r2
 8006644:	60fa      	str	r2, [r7, #12]
  return result;
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	fab2 f282 	clz	r2, r2
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	40d3      	lsrs	r3, r2
 8006650:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006652:	5cd3      	ldrb	r3, [r2, r3]
 8006654:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006660:	4a0e      	ldr	r2, [pc, #56]	; (800669c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	fbb2 f2f3 	udiv	r2, r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	fb02 f303 	mul.w	r3, r2, r3
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
 8006670:	e004      	b.n	800667c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	623b      	str	r3, [r7, #32]
      break;
 8006680:	e002      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006684:	623b      	str	r3, [r7, #32]
      break;
 8006686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006688:	6a3b      	ldr	r3, [r7, #32]
}
 800668a:	4618      	mov	r0, r3
 800668c:	372c      	adds	r7, #44	; 0x2c
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000
 800669c:	007a1200 	.word	0x007a1200
 80066a0:	0800c1d4 	.word	0x0800c1d4
 80066a4:	0800c1e4 	.word	0x0800c1e4
 80066a8:	003d0900 	.word	0x003d0900

080066ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b0:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80066b2:	681b      	ldr	r3, [r3, #0]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000000 	.word	0x20000000

080066c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80066ca:	f7ff ffef 	bl	80066ac <HAL_RCC_GetHCLKFreq>
 80066ce:	4601      	mov	r1, r0
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80066dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	fa92 f2a2 	rbit	r2, r2
 80066e4:	603a      	str	r2, [r7, #0]
  return result;
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	fab2 f282 	clz	r2, r2
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	40d3      	lsrs	r3, r2
 80066f0:	4a04      	ldr	r2, [pc, #16]	; (8006704 <HAL_RCC_GetPCLK1Freq+0x40>)
 80066f2:	5cd3      	ldrb	r3, [r2, r3]
 80066f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40021000 	.word	0x40021000
 8006704:	0800c1cc 	.word	0x0800c1cc

08006708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800670e:	f7ff ffcd 	bl	80066ac <HAL_RCC_GetHCLKFreq>
 8006712:	4601      	mov	r1, r0
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800671c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006720:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	fa92 f2a2 	rbit	r2, r2
 8006728:	603a      	str	r2, [r7, #0]
  return result;
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	fab2 f282 	clz	r2, r2
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	40d3      	lsrs	r3, r2
 8006734:	4a04      	ldr	r2, [pc, #16]	; (8006748 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006736:	5cd3      	ldrb	r3, [r2, r3]
 8006738:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40021000 	.word	0x40021000
 8006748:	0800c1cc 	.word	0x0800c1cc

0800674c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b092      	sub	sp, #72	; 0x48
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800675c:	2300      	movs	r3, #0
 800675e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80d4 	beq.w	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006770:	4b4e      	ldr	r3, [pc, #312]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10e      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677c:	4b4b      	ldr	r3, [pc, #300]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	4a4a      	ldr	r2, [pc, #296]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006786:	61d3      	str	r3, [r2, #28]
 8006788:	4b48      	ldr	r3, [pc, #288]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679a:	4b45      	ldr	r3, [pc, #276]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d118      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a6:	4b42      	ldr	r3, [pc, #264]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a41      	ldr	r2, [pc, #260]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b2:	f7fc fa63 	bl	8002c7c <HAL_GetTick>
 80067b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b8:	e008      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ba:	f7fc fa5f 	bl	8002c7c <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b64      	cmp	r3, #100	; 0x64
 80067c6:	d901      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e169      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067cc:	4b38      	ldr	r3, [pc, #224]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067d8:	4b34      	ldr	r3, [pc, #208]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8084 	beq.w	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d07c      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067f8:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	fa93 f3a3 	rbit	r3, r3
 800680e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006812:	fab3 f383 	clz	r3, r3
 8006816:	b2db      	uxtb	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	461a      	mov	r2, r3
 8006822:	2301      	movs	r3, #1
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800682a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	fa93 f3a3 	rbit	r3, r3
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006836:	fab3 f383 	clz	r3, r3
 800683a:	b2db      	uxtb	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	4b1d      	ldr	r3, [pc, #116]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	461a      	mov	r2, r3
 8006846:	2300      	movs	r3, #0
 8006848:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800684a:	4a18      	ldr	r2, [pc, #96]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800684c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d04b      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685a:	f7fc fa0f 	bl	8002c7c <HAL_GetTick>
 800685e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006860:	e00a      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fc fa0b 	bl	8002c7c <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e113      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006878:	2302      	movs	r3, #2
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	fa93 f3a3 	rbit	r3, r3
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
 8006884:	2302      	movs	r3, #2
 8006886:	623b      	str	r3, [r7, #32]
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	fa93 f3a3 	rbit	r3, r3
 800688e:	61fb      	str	r3, [r7, #28]
  return result;
 8006890:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006892:	fab3 f383 	clz	r3, r3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f043 0302 	orr.w	r3, r3, #2
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d108      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80068a6:	4b01      	ldr	r3, [pc, #4]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	e00d      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40007000 	.word	0x40007000
 80068b4:	10908100 	.word	0x10908100
 80068b8:	2302      	movs	r3, #2
 80068ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	fa93 f3a3 	rbit	r3, r3
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	4b78      	ldr	r3, [pc, #480]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	2202      	movs	r2, #2
 80068ca:	613a      	str	r2, [r7, #16]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	fa92 f2a2 	rbit	r2, r2
 80068d2:	60fa      	str	r2, [r7, #12]
  return result;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	fab2 f282 	clz	r2, r2
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	f002 021f 	and.w	r2, r2, #31
 80068e6:	2101      	movs	r1, #1
 80068e8:	fa01 f202 	lsl.w	r2, r1, r2
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0b7      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80068f2:	4b6d      	ldr	r3, [pc, #436]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	496a      	ldr	r1, [pc, #424]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006900:	4313      	orrs	r3, r2
 8006902:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006904:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006908:	2b01      	cmp	r3, #1
 800690a:	d105      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800690c:	4b66      	ldr	r3, [pc, #408]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	4a65      	ldr	r2, [pc, #404]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006916:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006924:	4b60      	ldr	r3, [pc, #384]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	f023 0203 	bic.w	r2, r3, #3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	495d      	ldr	r1, [pc, #372]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006932:	4313      	orrs	r3, r2
 8006934:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006942:	4b59      	ldr	r3, [pc, #356]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	4956      	ldr	r1, [pc, #344]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006950:	4313      	orrs	r3, r2
 8006952:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006960:	4b51      	ldr	r3, [pc, #324]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	494e      	ldr	r1, [pc, #312]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800696e:	4313      	orrs	r3, r2
 8006970:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800697e:	4b4a      	ldr	r3, [pc, #296]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f023 0210 	bic.w	r2, r3, #16
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	4947      	ldr	r1, [pc, #284]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800698c:	4313      	orrs	r3, r2
 800698e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800699c:	4b42      	ldr	r3, [pc, #264]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	493f      	ldr	r1, [pc, #252]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069ba:	4b3b      	ldr	r3, [pc, #236]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	f023 0220 	bic.w	r2, r3, #32
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	4938      	ldr	r1, [pc, #224]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069d8:	4b33      	ldr	r3, [pc, #204]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	4930      	ldr	r1, [pc, #192]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069f6:	4b2c      	ldr	r3, [pc, #176]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	4929      	ldr	r1, [pc, #164]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d008      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a14:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	4921      	ldr	r1, [pc, #132]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	491a      	ldr	r1, [pc, #104]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d008      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006a50:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	4912      	ldr	r1, [pc, #72]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d008      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	490b      	ldr	r1, [pc, #44]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	4903      	ldr	r1, [pc, #12]	; (8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3748      	adds	r7, #72	; 0x48
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40021000 	.word	0x40021000

08006aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e09d      	b.n	8006bfa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d108      	bne.n	8006ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d009      	beq.n	8006ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	61da      	str	r2, [r3, #28]
 8006ad6:	e005      	b.n	8006ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fb fc28 	bl	8002354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b24:	d902      	bls.n	8006b2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e002      	b.n	8006b32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b3a:	d007      	beq.n	8006b4c <HAL_SPI_Init+0xa0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b44:	d002      	beq.n	8006b4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	ea42 0103 	orr.w	r1, r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	0c1b      	lsrs	r3, r3, #16
 8006ba8:	f003 0204 	and.w	r2, r3, #4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006bc8:	ea42 0103 	orr.w	r1, r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b08a      	sub	sp, #40	; 0x28
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c10:	2301      	movs	r3, #1
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x26>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e1fb      	b.n	8007020 <HAL_SPI_TransmitReceive+0x41e>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c30:	f7fc f824 	bl	8002c7c <HAL_GetTick>
 8006c34:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c3c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006c44:	887b      	ldrh	r3, [r7, #2]
 8006c46:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006c48:	887b      	ldrh	r3, [r7, #2]
 8006c4a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c4c:	7efb      	ldrb	r3, [r7, #27]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d00e      	beq.n	8006c70 <HAL_SPI_TransmitReceive+0x6e>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c58:	d106      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <HAL_SPI_TransmitReceive+0x66>
 8006c62:	7efb      	ldrb	r3, [r7, #27]
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d003      	beq.n	8006c70 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006c6e:	e1cd      	b.n	800700c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_SPI_TransmitReceive+0x80>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_SPI_TransmitReceive+0x80>
 8006c7c:	887b      	ldrh	r3, [r7, #2]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006c88:	e1c0      	b.n	800700c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d003      	beq.n	8006c9e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2205      	movs	r2, #5
 8006c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	887a      	ldrh	r2, [r7, #2]
 8006cae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	887a      	ldrh	r2, [r7, #2]
 8006cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	887a      	ldrh	r2, [r7, #2]
 8006cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	887a      	ldrh	r2, [r7, #2]
 8006cca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ce0:	d802      	bhi.n	8006ce8 <HAL_SPI_TransmitReceive+0xe6>
 8006ce2:	8a3b      	ldrh	r3, [r7, #16]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d908      	bls.n	8006cfa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cf6:	605a      	str	r2, [r3, #4]
 8006cf8:	e007      	b.n	8006d0a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d007      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d30:	d97c      	bls.n	8006e2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x13e>
 8006d3a:	8a7b      	ldrh	r3, [r7, #18]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d169      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	881a      	ldrh	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	1c9a      	adds	r2, r3, #2
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d64:	e056      	b.n	8006e14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d11b      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x1aa>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d016      	beq.n	8006dac <HAL_SPI_TransmitReceive+0x1aa>
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d113      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	881a      	ldrh	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d11c      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x1f2>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d016      	beq.n	8006df4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	1c9a      	adds	r2, r3, #2
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006df0:	2301      	movs	r3, #1
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006df4:	f7fb ff42 	bl	8002c7c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d807      	bhi.n	8006e14 <HAL_SPI_TransmitReceive+0x212>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0a:	d003      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e12:	e0fb      	b.n	800700c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1a3      	bne.n	8006d66 <HAL_SPI_TransmitReceive+0x164>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d19d      	bne.n	8006d66 <HAL_SPI_TransmitReceive+0x164>
 8006e2a:	e0df      	b.n	8006fec <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_SPI_TransmitReceive+0x23a>
 8006e34:	8a7b      	ldrh	r3, [r7, #18]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	f040 80cb 	bne.w	8006fd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d912      	bls.n	8006e6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	881a      	ldrh	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b02      	subs	r3, #2
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e6a:	e0b2      	b.n	8006fd2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	330c      	adds	r3, #12
 8006e76:	7812      	ldrb	r2, [r2, #0]
 8006e78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e92:	e09e      	b.n	8006fd2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d134      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x30a>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d02f      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x30a>
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d12c      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d912      	bls.n	8006ee2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	1c9a      	adds	r2, r3, #2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b02      	subs	r3, #2
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ee0:	e012      	b.n	8006f08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	330c      	adds	r3, #12
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d148      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x3aa>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d042      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d923      	bls.n	8006f7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	1c9a      	adds	r2, r3, #2
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b02      	subs	r3, #2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d81f      	bhi.n	8006fa8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f76:	605a      	str	r2, [r3, #4]
 8006f78:	e016      	b.n	8006fa8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f103 020c 	add.w	r2, r3, #12
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	7812      	ldrb	r2, [r2, #0]
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fac:	f7fb fe66 	bl	8002c7c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d803      	bhi.n	8006fc4 <HAL_SPI_TransmitReceive+0x3c2>
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc2:	d102      	bne.n	8006fca <HAL_SPI_TransmitReceive+0x3c8>
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006fd0:	e01c      	b.n	800700c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f47f af5b 	bne.w	8006e94 <HAL_SPI_TransmitReceive+0x292>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f47f af54 	bne.w	8006e94 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f937 	bl	8007264 <SPI_EndRxTxTransaction>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d006      	beq.n	800700a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	661a      	str	r2, [r3, #96]	; 0x60
 8007008:	e000      	b.n	800700c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800700a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800701c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007020:	4618      	mov	r0, r3
 8007022:	3728      	adds	r7, #40	; 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007038:	f7fb fe20 	bl	8002c7c <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4413      	add	r3, r2
 8007046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007048:	f7fb fe18 	bl	8002c7c <HAL_GetTick>
 800704c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800704e:	4b39      	ldr	r3, [pc, #228]	; (8007134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	015b      	lsls	r3, r3, #5
 8007054:	0d1b      	lsrs	r3, r3, #20
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	fb02 f303 	mul.w	r3, r2, r3
 800705c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800705e:	e054      	b.n	800710a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007066:	d050      	beq.n	800710a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007068:	f7fb fe08 	bl	8002c7c <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	429a      	cmp	r2, r3
 8007076:	d902      	bls.n	800707e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d13d      	bne.n	80070fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800708c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007096:	d111      	bne.n	80070bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a0:	d004      	beq.n	80070ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070aa:	d107      	bne.n	80070bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c4:	d10f      	bne.n	80070e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e017      	b.n	800712a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	3b01      	subs	r3, #1
 8007108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4013      	ands	r3, r2
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	bf0c      	ite	eq
 800711a:	2301      	moveq	r3, #1
 800711c:	2300      	movne	r3, #0
 800711e:	b2db      	uxtb	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	429a      	cmp	r2, r3
 8007126:	d19b      	bne.n	8007060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000000 	.word	0x20000000

08007138 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b08a      	sub	sp, #40	; 0x28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800714a:	f7fb fd97 	bl	8002c7c <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	4413      	add	r3, r2
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800715a:	f7fb fd8f 	bl	8002c7c <HAL_GetTick>
 800715e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	330c      	adds	r3, #12
 8007166:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007168:	4b3d      	ldr	r3, [pc, #244]	; (8007260 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	00da      	lsls	r2, r3, #3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	0d1b      	lsrs	r3, r3, #20
 8007178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007180:	e060      	b.n	8007244 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007188:	d107      	bne.n	800719a <SPI_WaitFifoStateUntilTimeout+0x62>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007198:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d050      	beq.n	8007244 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071a2:	f7fb fd6b 	bl	8002c7c <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d902      	bls.n	80071b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d13d      	bne.n	8007234 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d0:	d111      	bne.n	80071f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071da:	d004      	beq.n	80071e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d107      	bne.n	80071f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fe:	d10f      	bne.n	8007220 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800721e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e010      	b.n	8007256 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	3b01      	subs	r3, #1
 8007242:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4013      	ands	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d196      	bne.n	8007182 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3728      	adds	r7, #40	; 0x28
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000000 	.word	0x20000000

08007264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7ff ff5b 	bl	8007138 <SPI_WaitFifoStateUntilTimeout>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728c:	f043 0220 	orr.w	r2, r3, #32
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e027      	b.n	80072e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff fec0 	bl	8007028 <SPI_WaitFlagStateUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e014      	b.n	80072e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff ff34 	bl	8007138 <SPI_WaitFifoStateUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072da:	f043 0220 	orr.w	r2, r3, #32
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e000      	b.n	80072e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e049      	b.n	8007396 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fb fac0 	bl	800289c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f000 fa4a 	bl	80077c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d109      	bne.n	80073c4 <HAL_TIM_PWM_Start+0x24>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	bf14      	ite	ne
 80073bc:	2301      	movne	r3, #1
 80073be:	2300      	moveq	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	e03c      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d109      	bne.n	80073de <HAL_TIM_PWM_Start+0x3e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	bf14      	ite	ne
 80073d6:	2301      	movne	r3, #1
 80073d8:	2300      	moveq	r3, #0
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	e02f      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d109      	bne.n	80073f8 <HAL_TIM_PWM_Start+0x58>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e022      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b0c      	cmp	r3, #12
 80073fc:	d109      	bne.n	8007412 <HAL_TIM_PWM_Start+0x72>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b01      	cmp	r3, #1
 8007408:	bf14      	ite	ne
 800740a:	2301      	movne	r3, #1
 800740c:	2300      	moveq	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	e015      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b10      	cmp	r3, #16
 8007416:	d109      	bne.n	800742c <HAL_TIM_PWM_Start+0x8c>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e008      	b.n	800743e <HAL_TIM_PWM_Start+0x9e>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	bf14      	ite	ne
 8007438:	2301      	movne	r3, #1
 800743a:	2300      	moveq	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e097      	b.n	8007576 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <HAL_TIM_PWM_Start+0xb6>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007454:	e023      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d104      	bne.n	8007466 <HAL_TIM_PWM_Start+0xc6>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007464:	e01b      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d104      	bne.n	8007476 <HAL_TIM_PWM_Start+0xd6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007474:	e013      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b0c      	cmp	r3, #12
 800747a:	d104      	bne.n	8007486 <HAL_TIM_PWM_Start+0xe6>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007484:	e00b      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b10      	cmp	r3, #16
 800748a:	d104      	bne.n	8007496 <HAL_TIM_PWM_Start+0xf6>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007494:	e003      	b.n	800749e <HAL_TIM_PWM_Start+0xfe>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2202      	movs	r2, #2
 800749a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fcf4 	bl	8007e94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a33      	ldr	r2, [pc, #204]	; (8007580 <HAL_TIM_PWM_Start+0x1e0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_TIM_PWM_Start+0x13e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a32      	ldr	r2, [pc, #200]	; (8007584 <HAL_TIM_PWM_Start+0x1e4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00e      	beq.n	80074de <HAL_TIM_PWM_Start+0x13e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a30      	ldr	r2, [pc, #192]	; (8007588 <HAL_TIM_PWM_Start+0x1e8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d009      	beq.n	80074de <HAL_TIM_PWM_Start+0x13e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a2f      	ldr	r2, [pc, #188]	; (800758c <HAL_TIM_PWM_Start+0x1ec>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_TIM_PWM_Start+0x13e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a2d      	ldr	r2, [pc, #180]	; (8007590 <HAL_TIM_PWM_Start+0x1f0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d101      	bne.n	80074e2 <HAL_TIM_PWM_Start+0x142>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <HAL_TIM_PWM_Start+0x144>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a20      	ldr	r2, [pc, #128]	; (8007580 <HAL_TIM_PWM_Start+0x1e0>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d018      	beq.n	8007534 <HAL_TIM_PWM_Start+0x194>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750a:	d013      	beq.n	8007534 <HAL_TIM_PWM_Start+0x194>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a20      	ldr	r2, [pc, #128]	; (8007594 <HAL_TIM_PWM_Start+0x1f4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00e      	beq.n	8007534 <HAL_TIM_PWM_Start+0x194>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1f      	ldr	r2, [pc, #124]	; (8007598 <HAL_TIM_PWM_Start+0x1f8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d009      	beq.n	8007534 <HAL_TIM_PWM_Start+0x194>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <HAL_TIM_PWM_Start+0x1e4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_TIM_PWM_Start+0x194>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a16      	ldr	r2, [pc, #88]	; (8007588 <HAL_TIM_PWM_Start+0x1e8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d115      	bne.n	8007560 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	4b18      	ldr	r3, [pc, #96]	; (800759c <HAL_TIM_PWM_Start+0x1fc>)
 800753c:	4013      	ands	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b06      	cmp	r3, #6
 8007544:	d015      	beq.n	8007572 <HAL_TIM_PWM_Start+0x1d2>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754c:	d011      	beq.n	8007572 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0201 	orr.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755e:	e008      	b.n	8007572 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0201 	orr.w	r2, r2, #1
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	e000      	b.n	8007574 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00
 8007584:	40013400 	.word	0x40013400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	00010007 	.word	0x00010007

080075a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e0ff      	b.n	80077be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b14      	cmp	r3, #20
 80075ca:	f200 80f0 	bhi.w	80077ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075ce:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	08007629 	.word	0x08007629
 80075d8:	080077af 	.word	0x080077af
 80075dc:	080077af 	.word	0x080077af
 80075e0:	080077af 	.word	0x080077af
 80075e4:	08007669 	.word	0x08007669
 80075e8:	080077af 	.word	0x080077af
 80075ec:	080077af 	.word	0x080077af
 80075f0:	080077af 	.word	0x080077af
 80075f4:	080076ab 	.word	0x080076ab
 80075f8:	080077af 	.word	0x080077af
 80075fc:	080077af 	.word	0x080077af
 8007600:	080077af 	.word	0x080077af
 8007604:	080076eb 	.word	0x080076eb
 8007608:	080077af 	.word	0x080077af
 800760c:	080077af 	.word	0x080077af
 8007610:	080077af 	.word	0x080077af
 8007614:	0800772d 	.word	0x0800772d
 8007618:	080077af 	.word	0x080077af
 800761c:	080077af 	.word	0x080077af
 8007620:	080077af 	.word	0x080077af
 8007624:	0800776d 	.word	0x0800776d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f95a 	bl	80078e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0208 	orr.w	r2, r2, #8
 8007642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0204 	bic.w	r2, r2, #4
 8007652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6999      	ldr	r1, [r3, #24]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	619a      	str	r2, [r3, #24]
      break;
 8007666:	e0a5      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f9ca 	bl	8007a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	699a      	ldr	r2, [r3, #24]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	699a      	ldr	r2, [r3, #24]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6999      	ldr	r1, [r3, #24]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	021a      	lsls	r2, r3, #8
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	619a      	str	r2, [r3, #24]
      break;
 80076a8:	e084      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fa33 	bl	8007b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69da      	ldr	r2, [r3, #28]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0208 	orr.w	r2, r2, #8
 80076c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0204 	bic.w	r2, r2, #4
 80076d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69d9      	ldr	r1, [r3, #28]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	61da      	str	r2, [r3, #28]
      break;
 80076e8:	e064      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fa9b 	bl	8007c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69da      	ldr	r2, [r3, #28]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69da      	ldr	r2, [r3, #28]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69d9      	ldr	r1, [r3, #28]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	021a      	lsls	r2, r3, #8
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	61da      	str	r2, [r3, #28]
      break;
 800772a:	e043      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fae4 	bl	8007d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0208 	orr.w	r2, r2, #8
 8007746:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0204 	bic.w	r2, r2, #4
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800776a:	e023      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68b9      	ldr	r1, [r7, #8]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 fb28 	bl	8007dc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	021a      	lsls	r2, r3, #8
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077ac:	e002      	b.n	80077b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
      break;
 80077b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a3c      	ldr	r2, [pc, #240]	; (80078cc <TIM_Base_SetConfig+0x104>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00f      	beq.n	8007800 <TIM_Base_SetConfig+0x38>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e6:	d00b      	beq.n	8007800 <TIM_Base_SetConfig+0x38>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a39      	ldr	r2, [pc, #228]	; (80078d0 <TIM_Base_SetConfig+0x108>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d007      	beq.n	8007800 <TIM_Base_SetConfig+0x38>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <TIM_Base_SetConfig+0x10c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_Base_SetConfig+0x38>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a37      	ldr	r2, [pc, #220]	; (80078d8 <TIM_Base_SetConfig+0x110>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d108      	bne.n	8007812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a2d      	ldr	r2, [pc, #180]	; (80078cc <TIM_Base_SetConfig+0x104>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d01b      	beq.n	8007852 <TIM_Base_SetConfig+0x8a>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007820:	d017      	beq.n	8007852 <TIM_Base_SetConfig+0x8a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2a      	ldr	r2, [pc, #168]	; (80078d0 <TIM_Base_SetConfig+0x108>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d013      	beq.n	8007852 <TIM_Base_SetConfig+0x8a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a29      	ldr	r2, [pc, #164]	; (80078d4 <TIM_Base_SetConfig+0x10c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00f      	beq.n	8007852 <TIM_Base_SetConfig+0x8a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a28      	ldr	r2, [pc, #160]	; (80078d8 <TIM_Base_SetConfig+0x110>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00b      	beq.n	8007852 <TIM_Base_SetConfig+0x8a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a27      	ldr	r2, [pc, #156]	; (80078dc <TIM_Base_SetConfig+0x114>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d007      	beq.n	8007852 <TIM_Base_SetConfig+0x8a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a26      	ldr	r2, [pc, #152]	; (80078e0 <TIM_Base_SetConfig+0x118>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d003      	beq.n	8007852 <TIM_Base_SetConfig+0x8a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a25      	ldr	r2, [pc, #148]	; (80078e4 <TIM_Base_SetConfig+0x11c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d108      	bne.n	8007864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a10      	ldr	r2, [pc, #64]	; (80078cc <TIM_Base_SetConfig+0x104>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00f      	beq.n	80078b0 <TIM_Base_SetConfig+0xe8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a11      	ldr	r2, [pc, #68]	; (80078d8 <TIM_Base_SetConfig+0x110>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00b      	beq.n	80078b0 <TIM_Base_SetConfig+0xe8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a10      	ldr	r2, [pc, #64]	; (80078dc <TIM_Base_SetConfig+0x114>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_Base_SetConfig+0xe8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a0f      	ldr	r2, [pc, #60]	; (80078e0 <TIM_Base_SetConfig+0x118>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_Base_SetConfig+0xe8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a0e      	ldr	r2, [pc, #56]	; (80078e4 <TIM_Base_SetConfig+0x11c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d103      	bne.n	80078b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	615a      	str	r2, [r3, #20]
}
 80078be:	bf00      	nop
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40000800 	.word	0x40000800
 80078d8:	40013400 	.word	0x40013400
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40014400 	.word	0x40014400
 80078e4:	40014800 	.word	0x40014800

080078e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	f023 0201 	bic.w	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0303 	bic.w	r3, r3, #3
 8007922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f023 0302 	bic.w	r3, r3, #2
 8007934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4313      	orrs	r3, r2
 800793e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a2c      	ldr	r2, [pc, #176]	; (80079f4 <TIM_OC1_SetConfig+0x10c>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00f      	beq.n	8007968 <TIM_OC1_SetConfig+0x80>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a2b      	ldr	r2, [pc, #172]	; (80079f8 <TIM_OC1_SetConfig+0x110>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_OC1_SetConfig+0x80>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a2a      	ldr	r2, [pc, #168]	; (80079fc <TIM_OC1_SetConfig+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_OC1_SetConfig+0x80>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a29      	ldr	r2, [pc, #164]	; (8007a00 <TIM_OC1_SetConfig+0x118>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC1_SetConfig+0x80>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a28      	ldr	r2, [pc, #160]	; (8007a04 <TIM_OC1_SetConfig+0x11c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d10c      	bne.n	8007982 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0308 	bic.w	r3, r3, #8
 800796e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f023 0304 	bic.w	r3, r3, #4
 8007980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <TIM_OC1_SetConfig+0x10c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00f      	beq.n	80079aa <TIM_OC1_SetConfig+0xc2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1a      	ldr	r2, [pc, #104]	; (80079f8 <TIM_OC1_SetConfig+0x110>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00b      	beq.n	80079aa <TIM_OC1_SetConfig+0xc2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a19      	ldr	r2, [pc, #100]	; (80079fc <TIM_OC1_SetConfig+0x114>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d007      	beq.n	80079aa <TIM_OC1_SetConfig+0xc2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <TIM_OC1_SetConfig+0x118>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d003      	beq.n	80079aa <TIM_OC1_SetConfig+0xc2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <TIM_OC1_SetConfig+0x11c>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d111      	bne.n	80079ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	621a      	str	r2, [r3, #32]
}
 80079e8:	bf00      	nop
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	40012c00 	.word	0x40012c00
 80079f8:	40013400 	.word	0x40013400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40014400 	.word	0x40014400
 8007a04:	40014800 	.word	0x40014800

08007a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f023 0210 	bic.w	r2, r3, #16
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	021b      	lsls	r3, r3, #8
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f023 0320 	bic.w	r3, r3, #32
 8007a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a28      	ldr	r2, [pc, #160]	; (8007b08 <TIM_OC2_SetConfig+0x100>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_OC2_SetConfig+0x6c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <TIM_OC2_SetConfig+0x104>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d10d      	bne.n	8007a90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a1d      	ldr	r2, [pc, #116]	; (8007b08 <TIM_OC2_SetConfig+0x100>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00f      	beq.n	8007ab8 <TIM_OC2_SetConfig+0xb0>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1c      	ldr	r2, [pc, #112]	; (8007b0c <TIM_OC2_SetConfig+0x104>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00b      	beq.n	8007ab8 <TIM_OC2_SetConfig+0xb0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a1b      	ldr	r2, [pc, #108]	; (8007b10 <TIM_OC2_SetConfig+0x108>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d007      	beq.n	8007ab8 <TIM_OC2_SetConfig+0xb0>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <TIM_OC2_SetConfig+0x10c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC2_SetConfig+0xb0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <TIM_OC2_SetConfig+0x110>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d113      	bne.n	8007ae0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007abe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ac6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	621a      	str	r2, [r3, #32]
}
 8007afa:	bf00      	nop
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40014400 	.word	0x40014400
 8007b18:	40014800 	.word	0x40014800

08007b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a27      	ldr	r2, [pc, #156]	; (8007c18 <TIM_OC3_SetConfig+0xfc>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d003      	beq.n	8007b86 <TIM_OC3_SetConfig+0x6a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a26      	ldr	r2, [pc, #152]	; (8007c1c <TIM_OC3_SetConfig+0x100>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d10d      	bne.n	8007ba2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ba0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <TIM_OC3_SetConfig+0xfc>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00f      	beq.n	8007bca <TIM_OC3_SetConfig+0xae>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <TIM_OC3_SetConfig+0x100>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00b      	beq.n	8007bca <TIM_OC3_SetConfig+0xae>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a1a      	ldr	r2, [pc, #104]	; (8007c20 <TIM_OC3_SetConfig+0x104>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <TIM_OC3_SetConfig+0xae>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <TIM_OC3_SetConfig+0x108>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d003      	beq.n	8007bca <TIM_OC3_SetConfig+0xae>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <TIM_OC3_SetConfig+0x10c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d113      	bne.n	8007bf2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	621a      	str	r2, [r3, #32]
}
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	40012c00 	.word	0x40012c00
 8007c1c:	40013400 	.word	0x40013400
 8007c20:	40014000 	.word	0x40014000
 8007c24:	40014400 	.word	0x40014400
 8007c28:	40014800 	.word	0x40014800

08007c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	031b      	lsls	r3, r3, #12
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a18      	ldr	r2, [pc, #96]	; (8007cec <TIM_OC4_SetConfig+0xc0>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00f      	beq.n	8007cb0 <TIM_OC4_SetConfig+0x84>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a17      	ldr	r2, [pc, #92]	; (8007cf0 <TIM_OC4_SetConfig+0xc4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00b      	beq.n	8007cb0 <TIM_OC4_SetConfig+0x84>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <TIM_OC4_SetConfig+0xc8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d007      	beq.n	8007cb0 <TIM_OC4_SetConfig+0x84>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <TIM_OC4_SetConfig+0xcc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d003      	beq.n	8007cb0 <TIM_OC4_SetConfig+0x84>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a14      	ldr	r2, [pc, #80]	; (8007cfc <TIM_OC4_SetConfig+0xd0>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d109      	bne.n	8007cc4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	019b      	lsls	r3, r3, #6
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	621a      	str	r2, [r3, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	40013400 	.word	0x40013400
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	40014400 	.word	0x40014400
 8007cfc:	40014800 	.word	0x40014800

08007d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	041b      	lsls	r3, r3, #16
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a17      	ldr	r2, [pc, #92]	; (8007db4 <TIM_OC5_SetConfig+0xb4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00f      	beq.n	8007d7a <TIM_OC5_SetConfig+0x7a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a16      	ldr	r2, [pc, #88]	; (8007db8 <TIM_OC5_SetConfig+0xb8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00b      	beq.n	8007d7a <TIM_OC5_SetConfig+0x7a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a15      	ldr	r2, [pc, #84]	; (8007dbc <TIM_OC5_SetConfig+0xbc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d007      	beq.n	8007d7a <TIM_OC5_SetConfig+0x7a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <TIM_OC5_SetConfig+0xc0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_OC5_SetConfig+0x7a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a13      	ldr	r2, [pc, #76]	; (8007dc4 <TIM_OC5_SetConfig+0xc4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d109      	bne.n	8007d8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	621a      	str	r2, [r3, #32]
}
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	40012c00 	.word	0x40012c00
 8007db8:	40013400 	.word	0x40013400
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40014400 	.word	0x40014400
 8007dc4:	40014800 	.word	0x40014800

08007dc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	051b      	lsls	r3, r3, #20
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a18      	ldr	r2, [pc, #96]	; (8007e80 <TIM_OC6_SetConfig+0xb8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00f      	beq.n	8007e44 <TIM_OC6_SetConfig+0x7c>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a17      	ldr	r2, [pc, #92]	; (8007e84 <TIM_OC6_SetConfig+0xbc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d00b      	beq.n	8007e44 <TIM_OC6_SetConfig+0x7c>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a16      	ldr	r2, [pc, #88]	; (8007e88 <TIM_OC6_SetConfig+0xc0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d007      	beq.n	8007e44 <TIM_OC6_SetConfig+0x7c>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a15      	ldr	r2, [pc, #84]	; (8007e8c <TIM_OC6_SetConfig+0xc4>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC6_SetConfig+0x7c>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a14      	ldr	r2, [pc, #80]	; (8007e90 <TIM_OC6_SetConfig+0xc8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d109      	bne.n	8007e58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	029b      	lsls	r3, r3, #10
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40013400 	.word	0x40013400
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40014400 	.word	0x40014400
 8007e90:	40014800 	.word	0x40014800

08007e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a1a      	ldr	r2, [r3, #32]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	43db      	mvns	r3, r3
 8007eb6:	401a      	ands	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a1a      	ldr	r2, [r3, #32]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f003 031f 	and.w	r3, r3, #31
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	621a      	str	r2, [r3, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e063      	b.n	8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a2b      	ldr	r2, [pc, #172]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a2a      	ldr	r2, [pc, #168]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d108      	bne.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1b      	ldr	r2, [pc, #108]	; (8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d018      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d013      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00e      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d009      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a12      	ldr	r2, [pc, #72]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d10c      	bne.n	8007fae <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40013400 	.word	0x40013400
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000800 	.word	0x40000800
 8007fdc:	40014000 	.word	0x40014000

08007fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e040      	b.n	8008074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fa fd40 	bl	8002a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2224      	movs	r2, #36	; 0x24
 800800c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fc4e 	bl	80088c0 <UART_SetConfig>
 8008024:	4603      	mov	r3, r0
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e022      	b.n	8008074 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fe18 	bl	8008c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800804a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800805a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fe9f 	bl	8008db0 <UART_CheckIdleState>
 8008072:	4603      	mov	r3, r0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af02      	add	r7, sp, #8
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	4613      	mov	r3, r2
 800808a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008090:	2b20      	cmp	r3, #32
 8008092:	f040 8082 	bne.w	800819a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <HAL_UART_Transmit+0x26>
 800809c:	88fb      	ldrh	r3, [r7, #6]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e07a      	b.n	800819c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_UART_Transmit+0x38>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e073      	b.n	800819c <HAL_UART_Transmit+0x120>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2221      	movs	r2, #33	; 0x21
 80080c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080ca:	f7fa fdd7 	bl	8002c7c <HAL_GetTick>
 80080ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	88fa      	ldrh	r2, [r7, #6]
 80080d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e8:	d108      	bne.n	80080fc <HAL_UART_Transmit+0x80>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d104      	bne.n	80080fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	e003      	b.n	8008104 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800810c:	e02d      	b.n	800816a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2200      	movs	r2, #0
 8008116:	2180      	movs	r1, #128	; 0x80
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fe92 	bl	8008e42 <UART_WaitOnFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e039      	b.n	800819c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	881a      	ldrh	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800813a:	b292      	uxth	r2, r2
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	3302      	adds	r3, #2
 8008142:	61bb      	str	r3, [r7, #24]
 8008144:	e008      	b.n	8008158 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	781a      	ldrb	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	b292      	uxth	r2, r2
 8008150:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	3301      	adds	r3, #1
 8008156:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1cb      	bne.n	800810e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2200      	movs	r2, #0
 800817e:	2140      	movs	r1, #64	; 0x40
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fe5e 	bl	8008e42 <UART_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e005      	b.n	800819c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2220      	movs	r2, #32
 8008194:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	e000      	b.n	800819c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800819a:	2302      	movs	r3, #2
  }
}
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	; 0x28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	4613      	mov	r3, r2
 80081b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	d178      	bne.n	80082ac <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <HAL_UART_Transmit_DMA+0x22>
 80081c0:	88fb      	ldrh	r3, [r7, #6]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e071      	b.n	80082ae <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d101      	bne.n	80081d8 <HAL_UART_Transmit_DMA+0x34>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e06a      	b.n	80082ae <HAL_UART_Transmit_DMA+0x10a>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	88fa      	ldrh	r2, [r7, #6]
 80081f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2221      	movs	r2, #33	; 0x21
 8008202:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02b      	beq.n	8008264 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008210:	4a29      	ldr	r2, [pc, #164]	; (80082b8 <HAL_UART_Transmit_DMA+0x114>)
 8008212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008218:	4a28      	ldr	r2, [pc, #160]	; (80082bc <HAL_UART_Transmit_DMA+0x118>)
 800821a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008220:	4a27      	ldr	r2, [pc, #156]	; (80082c0 <HAL_UART_Transmit_DMA+0x11c>)
 8008222:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008228:	2200      	movs	r2, #0
 800822a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008234:	4619      	mov	r1, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3328      	adds	r3, #40	; 0x28
 800823c:	461a      	mov	r2, r3
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	f7fc fc82 	bl	8004b48 <HAL_DMA_Start_IT>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00c      	beq.n	8008264 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2210      	movs	r2, #16
 800824e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e024      	b.n	80082ae <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2240      	movs	r2, #64	; 0x40
 800826a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	613b      	str	r3, [r7, #16]
   return(result);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008294:	623a      	str	r2, [r7, #32]
 8008296:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	6a3a      	ldr	r2, [r7, #32]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e5      	bne.n	8008274 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e000      	b.n	80082ae <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80082ac:	2302      	movs	r3, #2
  }
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3728      	adds	r7, #40	; 0x28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	080090dd 	.word	0x080090dd
 80082bc:	08009171 	.word	0x08009171
 80082c0:	0800918d 	.word	0x0800918d

080082c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b0ba      	sub	sp, #232	; 0xe8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80082ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80082f2:	4013      	ands	r3, r2
 80082f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80082f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d115      	bne.n	800832c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00f      	beq.n	800832c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800830c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 82a3 	beq.w	8008868 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
      }
      return;
 800832a:	e29d      	b.n	8008868 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800832c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8117 	beq.w	8008564 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008346:	4b85      	ldr	r3, [pc, #532]	; (800855c <HAL_UART_IRQHandler+0x298>)
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 810a 	beq.w	8008564 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d011      	beq.n	8008380 <HAL_UART_IRQHandler+0xbc>
 800835c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2201      	movs	r2, #1
 800836e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008376:	f043 0201 	orr.w	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d011      	beq.n	80083b0 <HAL_UART_IRQHandler+0xec>
 800838c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2202      	movs	r2, #2
 800839e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d011      	beq.n	80083e0 <HAL_UART_IRQHandler+0x11c>
 80083bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2204      	movs	r2, #4
 80083ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083d6:	f043 0202 	orr.w	r2, r3, #2
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80083f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2208      	movs	r2, #8
 800840a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008412:	f043 0208 	orr.w	r2, r3, #8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008424:	2b00      	cmp	r3, #0
 8008426:	d012      	beq.n	800844e <HAL_UART_IRQHandler+0x18a>
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00c      	beq.n	800844e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800843c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008444:	f043 0220 	orr.w	r2, r3, #32
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8209 	beq.w	800886c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800845a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00d      	beq.n	8008482 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d005      	beq.n	80084a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800849a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800849e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d04f      	beq.n	8008546 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fdb5 	bl	8009016 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b6:	2b40      	cmp	r3, #64	; 0x40
 80084b8:	d141      	bne.n	800853e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1d9      	bne.n	80084ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850a:	2b00      	cmp	r3, #0
 800850c:	d013      	beq.n	8008536 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008512:	4a13      	ldr	r2, [pc, #76]	; (8008560 <HAL_UART_IRQHandler+0x29c>)
 8008514:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4618      	mov	r0, r3
 800851c:	f7fc fbac 	bl	8004c78 <HAL_DMA_Abort_IT>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d017      	beq.n	8008556 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008534:	e00f      	b.n	8008556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f9ac 	bl	8008894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853c:	e00b      	b.n	8008556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f9a8 	bl	8008894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008544:	e007      	b.n	8008556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f9a4 	bl	8008894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008554:	e18a      	b.n	800886c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008556:	bf00      	nop
    return;
 8008558:	e188      	b.n	800886c <HAL_UART_IRQHandler+0x5a8>
 800855a:	bf00      	nop
 800855c:	04000120 	.word	0x04000120
 8008560:	08009209 	.word	0x08009209

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008568:	2b01      	cmp	r3, #1
 800856a:	f040 8143 	bne.w	80087f4 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800856e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 813c 	beq.w	80087f4 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800857c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8135 	beq.w	80087f4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2210      	movs	r2, #16
 8008590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b40      	cmp	r3, #64	; 0x40
 800859e:	f040 80b1 	bne.w	8008704 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 815c 	beq.w	8008870 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085c2:	429a      	cmp	r2, r3
 80085c4:	f080 8154 	bcs.w	8008870 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	2b20      	cmp	r3, #32
 80085da:	f000 8085 	beq.w	80086e8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008608:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800860c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008614:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1da      	bne.n	80085de <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800864c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008650:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008654:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800865e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e1      	bne.n	8008628 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3308      	adds	r3, #8
 800866a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800867a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3308      	adds	r3, #8
 8008684:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008688:	66fa      	str	r2, [r7, #108]	; 0x6c
 800868a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800868e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e3      	bne.n	8008664 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b8:	f023 0310 	bic.w	r3, r3, #16
 80086bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	461a      	mov	r2, r3
 80086c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80086cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e4      	bne.n	80086a8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fc fa8f 	bl	8004c06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8d3 	bl	80088a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008702:	e0b5      	b.n	8008870 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008710:	b29b      	uxth	r3, r3
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800871e:	b29b      	uxth	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80a7 	beq.w	8008874 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008726:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80a2 	beq.w	8008874 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800873e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008752:	647b      	str	r3, [r7, #68]	; 0x44
 8008754:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e4      	bne.n	8008730 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	623b      	str	r3, [r7, #32]
   return(result);
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800878a:	633a      	str	r2, [r7, #48]	; 0x30
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e3      	bne.n	8008766 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f023 0310 	bic.w	r3, r3, #16
 80087c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	69b9      	ldr	r1, [r7, #24]
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	617b      	str	r3, [r7, #20]
   return(result);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e4      	bne.n	80087b0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f85b 	bl	80088a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087f2:	e03f      	b.n	8008874 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00e      	beq.n	800881e <HAL_UART_IRQHandler+0x55a>
 8008800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d008      	beq.n	800881e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fd36 	bl	8009288 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800881c:	e02d      	b.n	800887a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00e      	beq.n	8008848 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800882a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800883a:	2b00      	cmp	r3, #0
 800883c:	d01c      	beq.n	8008878 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
    }
    return;
 8008846:	e017      	b.n	8008878 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d012      	beq.n	800887a <HAL_UART_IRQHandler+0x5b6>
 8008854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00c      	beq.n	800887a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fce7 	bl	8009234 <UART_EndTransmit_IT>
    return;
 8008866:	e008      	b.n	800887a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008868:	bf00      	nop
 800886a:	e006      	b.n	800887a <HAL_UART_IRQHandler+0x5b6>
    return;
 800886c:	bf00      	nop
 800886e:	e004      	b.n	800887a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008870:	bf00      	nop
 8008872:	e002      	b.n	800887a <HAL_UART_IRQHandler+0x5b6>
      return;
 8008874:	bf00      	nop
 8008876:	e000      	b.n	800887a <HAL_UART_IRQHandler+0x5b6>
    return;
 8008878:	bf00      	nop
  }

}
 800887a:	37e8      	adds	r7, #232	; 0xe8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80088ee:	f023 030c 	bic.w	r3, r3, #12
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	6979      	ldr	r1, [r7, #20]
 80088f8:	430b      	orrs	r3, r1
 80088fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	430a      	orrs	r2, r1
 8008934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4aa8      	ldr	r2, [pc, #672]	; (8008bdc <UART_SetConfig+0x31c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d120      	bne.n	8008982 <UART_SetConfig+0xc2>
 8008940:	4ba7      	ldr	r3, [pc, #668]	; (8008be0 <UART_SetConfig+0x320>)
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	2b03      	cmp	r3, #3
 800894a:	d817      	bhi.n	800897c <UART_SetConfig+0xbc>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x94>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008965 	.word	0x08008965
 8008958:	08008971 	.word	0x08008971
 800895c:	08008977 	.word	0x08008977
 8008960:	0800896b 	.word	0x0800896b
 8008964:	2301      	movs	r3, #1
 8008966:	77fb      	strb	r3, [r7, #31]
 8008968:	e0b5      	b.n	8008ad6 <UART_SetConfig+0x216>
 800896a:	2302      	movs	r3, #2
 800896c:	77fb      	strb	r3, [r7, #31]
 800896e:	e0b2      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008970:	2304      	movs	r3, #4
 8008972:	77fb      	strb	r3, [r7, #31]
 8008974:	e0af      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008976:	2308      	movs	r3, #8
 8008978:	77fb      	strb	r3, [r7, #31]
 800897a:	e0ac      	b.n	8008ad6 <UART_SetConfig+0x216>
 800897c:	2310      	movs	r3, #16
 800897e:	77fb      	strb	r3, [r7, #31]
 8008980:	e0a9      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a97      	ldr	r2, [pc, #604]	; (8008be4 <UART_SetConfig+0x324>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d124      	bne.n	80089d6 <UART_SetConfig+0x116>
 800898c:	4b94      	ldr	r3, [pc, #592]	; (8008be0 <UART_SetConfig+0x320>)
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008994:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008998:	d011      	beq.n	80089be <UART_SetConfig+0xfe>
 800899a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800899e:	d817      	bhi.n	80089d0 <UART_SetConfig+0x110>
 80089a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089a4:	d011      	beq.n	80089ca <UART_SetConfig+0x10a>
 80089a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089aa:	d811      	bhi.n	80089d0 <UART_SetConfig+0x110>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <UART_SetConfig+0xf8>
 80089b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089b4:	d006      	beq.n	80089c4 <UART_SetConfig+0x104>
 80089b6:	e00b      	b.n	80089d0 <UART_SetConfig+0x110>
 80089b8:	2300      	movs	r3, #0
 80089ba:	77fb      	strb	r3, [r7, #31]
 80089bc:	e08b      	b.n	8008ad6 <UART_SetConfig+0x216>
 80089be:	2302      	movs	r3, #2
 80089c0:	77fb      	strb	r3, [r7, #31]
 80089c2:	e088      	b.n	8008ad6 <UART_SetConfig+0x216>
 80089c4:	2304      	movs	r3, #4
 80089c6:	77fb      	strb	r3, [r7, #31]
 80089c8:	e085      	b.n	8008ad6 <UART_SetConfig+0x216>
 80089ca:	2308      	movs	r3, #8
 80089cc:	77fb      	strb	r3, [r7, #31]
 80089ce:	e082      	b.n	8008ad6 <UART_SetConfig+0x216>
 80089d0:	2310      	movs	r3, #16
 80089d2:	77fb      	strb	r3, [r7, #31]
 80089d4:	e07f      	b.n	8008ad6 <UART_SetConfig+0x216>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a83      	ldr	r2, [pc, #524]	; (8008be8 <UART_SetConfig+0x328>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d124      	bne.n	8008a2a <UART_SetConfig+0x16a>
 80089e0:	4b7f      	ldr	r3, [pc, #508]	; (8008be0 <UART_SetConfig+0x320>)
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80089e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80089ec:	d011      	beq.n	8008a12 <UART_SetConfig+0x152>
 80089ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80089f2:	d817      	bhi.n	8008a24 <UART_SetConfig+0x164>
 80089f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089f8:	d011      	beq.n	8008a1e <UART_SetConfig+0x15e>
 80089fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089fe:	d811      	bhi.n	8008a24 <UART_SetConfig+0x164>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <UART_SetConfig+0x14c>
 8008a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a08:	d006      	beq.n	8008a18 <UART_SetConfig+0x158>
 8008a0a:	e00b      	b.n	8008a24 <UART_SetConfig+0x164>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	77fb      	strb	r3, [r7, #31]
 8008a10:	e061      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a12:	2302      	movs	r3, #2
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	e05e      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	77fb      	strb	r3, [r7, #31]
 8008a1c:	e05b      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a1e:	2308      	movs	r3, #8
 8008a20:	77fb      	strb	r3, [r7, #31]
 8008a22:	e058      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a24:	2310      	movs	r3, #16
 8008a26:	77fb      	strb	r3, [r7, #31]
 8008a28:	e055      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a6f      	ldr	r2, [pc, #444]	; (8008bec <UART_SetConfig+0x32c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d124      	bne.n	8008a7e <UART_SetConfig+0x1be>
 8008a34:	4b6a      	ldr	r3, [pc, #424]	; (8008be0 <UART_SetConfig+0x320>)
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008a3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a40:	d011      	beq.n	8008a66 <UART_SetConfig+0x1a6>
 8008a42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a46:	d817      	bhi.n	8008a78 <UART_SetConfig+0x1b8>
 8008a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a4c:	d011      	beq.n	8008a72 <UART_SetConfig+0x1b2>
 8008a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a52:	d811      	bhi.n	8008a78 <UART_SetConfig+0x1b8>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <UART_SetConfig+0x1a0>
 8008a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5c:	d006      	beq.n	8008a6c <UART_SetConfig+0x1ac>
 8008a5e:	e00b      	b.n	8008a78 <UART_SetConfig+0x1b8>
 8008a60:	2300      	movs	r3, #0
 8008a62:	77fb      	strb	r3, [r7, #31]
 8008a64:	e037      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a66:	2302      	movs	r3, #2
 8008a68:	77fb      	strb	r3, [r7, #31]
 8008a6a:	e034      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	77fb      	strb	r3, [r7, #31]
 8008a70:	e031      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a72:	2308      	movs	r3, #8
 8008a74:	77fb      	strb	r3, [r7, #31]
 8008a76:	e02e      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	77fb      	strb	r3, [r7, #31]
 8008a7c:	e02b      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a5b      	ldr	r2, [pc, #364]	; (8008bf0 <UART_SetConfig+0x330>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d124      	bne.n	8008ad2 <UART_SetConfig+0x212>
 8008a88:	4b55      	ldr	r3, [pc, #340]	; (8008be0 <UART_SetConfig+0x320>)
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008a90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a94:	d011      	beq.n	8008aba <UART_SetConfig+0x1fa>
 8008a96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a9a:	d817      	bhi.n	8008acc <UART_SetConfig+0x20c>
 8008a9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aa0:	d011      	beq.n	8008ac6 <UART_SetConfig+0x206>
 8008aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aa6:	d811      	bhi.n	8008acc <UART_SetConfig+0x20c>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <UART_SetConfig+0x1f4>
 8008aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ab0:	d006      	beq.n	8008ac0 <UART_SetConfig+0x200>
 8008ab2:	e00b      	b.n	8008acc <UART_SetConfig+0x20c>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	77fb      	strb	r3, [r7, #31]
 8008ab8:	e00d      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008aba:	2302      	movs	r3, #2
 8008abc:	77fb      	strb	r3, [r7, #31]
 8008abe:	e00a      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008ac0:	2304      	movs	r3, #4
 8008ac2:	77fb      	strb	r3, [r7, #31]
 8008ac4:	e007      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	77fb      	strb	r3, [r7, #31]
 8008aca:	e004      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008acc:	2310      	movs	r3, #16
 8008ace:	77fb      	strb	r3, [r7, #31]
 8008ad0:	e001      	b.n	8008ad6 <UART_SetConfig+0x216>
 8008ad2:	2310      	movs	r3, #16
 8008ad4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ade:	d15c      	bne.n	8008b9a <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8008ae0:	7ffb      	ldrb	r3, [r7, #31]
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	d827      	bhi.n	8008b36 <UART_SetConfig+0x276>
 8008ae6:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <UART_SetConfig+0x22c>)
 8008ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b19 	.word	0x08008b19
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	08008b37 	.word	0x08008b37
 8008afc:	08008b27 	.word	0x08008b27
 8008b00:	08008b37 	.word	0x08008b37
 8008b04:	08008b37 	.word	0x08008b37
 8008b08:	08008b37 	.word	0x08008b37
 8008b0c:	08008b2f 	.word	0x08008b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b10:	f7fd fdd8 	bl	80066c4 <HAL_RCC_GetPCLK1Freq>
 8008b14:	61b8      	str	r0, [r7, #24]
        break;
 8008b16:	e013      	b.n	8008b40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b18:	f7fd fdf6 	bl	8006708 <HAL_RCC_GetPCLK2Freq>
 8008b1c:	61b8      	str	r0, [r7, #24]
        break;
 8008b1e:	e00f      	b.n	8008b40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b20:	4b34      	ldr	r3, [pc, #208]	; (8008bf4 <UART_SetConfig+0x334>)
 8008b22:	61bb      	str	r3, [r7, #24]
        break;
 8008b24:	e00c      	b.n	8008b40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b26:	f7fd fd57 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 8008b2a:	61b8      	str	r0, [r7, #24]
        break;
 8008b2c:	e008      	b.n	8008b40 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b32:	61bb      	str	r3, [r7, #24]
        break;
 8008b34:	e004      	b.n	8008b40 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	77bb      	strb	r3, [r7, #30]
        break;
 8008b3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 8084 	beq.w	8008c50 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	005a      	lsls	r2, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	441a      	add	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b0f      	cmp	r3, #15
 8008b64:	d916      	bls.n	8008b94 <UART_SetConfig+0x2d4>
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6c:	d212      	bcs.n	8008b94 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	f023 030f 	bic.w	r3, r3, #15
 8008b76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	89fb      	ldrh	r3, [r7, #14]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	89fa      	ldrh	r2, [r7, #14]
 8008b90:	60da      	str	r2, [r3, #12]
 8008b92:	e05d      	b.n	8008c50 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	77bb      	strb	r3, [r7, #30]
 8008b98:	e05a      	b.n	8008c50 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b9a:	7ffb      	ldrb	r3, [r7, #31]
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d836      	bhi.n	8008c0e <UART_SetConfig+0x34e>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <UART_SetConfig+0x2e8>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bf9 	.word	0x08008bf9
 8008bb4:	08008c0f 	.word	0x08008c0f
 8008bb8:	08008bff 	.word	0x08008bff
 8008bbc:	08008c0f 	.word	0x08008c0f
 8008bc0:	08008c0f 	.word	0x08008c0f
 8008bc4:	08008c0f 	.word	0x08008c0f
 8008bc8:	08008c07 	.word	0x08008c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fd fd7a 	bl	80066c4 <HAL_RCC_GetPCLK1Freq>
 8008bd0:	61b8      	str	r0, [r7, #24]
        break;
 8008bd2:	e021      	b.n	8008c18 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd4:	f7fd fd98 	bl	8006708 <HAL_RCC_GetPCLK2Freq>
 8008bd8:	61b8      	str	r0, [r7, #24]
        break;
 8008bda:	e01d      	b.n	8008c18 <UART_SetConfig+0x358>
 8008bdc:	40013800 	.word	0x40013800
 8008be0:	40021000 	.word	0x40021000
 8008be4:	40004400 	.word	0x40004400
 8008be8:	40004800 	.word	0x40004800
 8008bec:	40004c00 	.word	0x40004c00
 8008bf0:	40005000 	.word	0x40005000
 8008bf4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf8:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <UART_SetConfig+0x3a8>)
 8008bfa:	61bb      	str	r3, [r7, #24]
        break;
 8008bfc:	e00c      	b.n	8008c18 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfe:	f7fd fceb 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 8008c02:	61b8      	str	r0, [r7, #24]
        break;
 8008c04:	e008      	b.n	8008c18 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0a:	61bb      	str	r3, [r7, #24]
        break;
 8008c0c:	e004      	b.n	8008c18 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	77bb      	strb	r3, [r7, #30]
        break;
 8008c16:	bf00      	nop
    }

    if (pclk != 0U)
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d018      	beq.n	8008c50 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	085a      	lsrs	r2, r3, #1
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	441a      	add	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2b0f      	cmp	r3, #15
 8008c38:	d908      	bls.n	8008c4c <UART_SetConfig+0x38c>
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c40:	d204      	bcs.n	8008c4c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	e001      	b.n	8008c50 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3720      	adds	r7, #32
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	007a1200 	.word	0x007a1200

08008c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	f003 0308 	and.w	r3, r3, #8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	f003 0310 	and.w	r3, r3, #16
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00a      	beq.n	8008d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01a      	beq.n	8008d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6a:	d10a      	bne.n	8008d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	605a      	str	r2, [r3, #4]
  }
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dc0:	f7f9 ff5c 	bl	8002c7c <HAL_GetTick>
 8008dc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d10e      	bne.n	8008df2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f82d 	bl	8008e42 <UART_WaitOnFlagUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e023      	b.n	8008e3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b04      	cmp	r3, #4
 8008dfe:	d10e      	bne.n	8008e1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f817 	bl	8008e42 <UART_WaitOnFlagUntilTimeout>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e00d      	b.n	8008e3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2220      	movs	r2, #32
 8008e28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b09c      	sub	sp, #112	; 0x70
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	603b      	str	r3, [r7, #0]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e52:	e0a5      	b.n	8008fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	f000 80a1 	beq.w	8008fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e5e:	f7f9 ff0d 	bl	8002c7c <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d302      	bcc.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d13e      	bne.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e88:	667b      	str	r3, [r7, #100]	; 0x64
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e94:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e6      	bne.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ec6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e5      	bne.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e067      	b.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d04f      	beq.n	8008fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f0e:	d147      	bne.n	8008fa0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	e853 3f00 	ldrex	r3, [r3]
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f38:	637b      	str	r3, [r7, #52]	; 0x34
 8008f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e6      	bne.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3308      	adds	r3, #8
 8008f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f023 0301 	bic.w	r3, r3, #1
 8008f62:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3308      	adds	r3, #8
 8008f6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f6c:	623a      	str	r2, [r7, #32]
 8008f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	69f9      	ldr	r1, [r7, #28]
 8008f72:	6a3a      	ldr	r2, [r7, #32]
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e5      	bne.n	8008f4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2220      	movs	r2, #32
 8008f84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e010      	b.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	69da      	ldr	r2, [r3, #28]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	f43f af4a 	beq.w	8008e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3770      	adds	r7, #112	; 0x70
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b089      	sub	sp, #36	; 0x24
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	e853 3f00 	ldrex	r3, [r3]
 8008fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008fe6:	61fb      	str	r3, [r7, #28]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	461a      	mov	r2, r3
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	6979      	ldr	r1, [r7, #20]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e6      	bne.n	8008fd2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2220      	movs	r2, #32
 8009008:	679a      	str	r2, [r3, #120]	; 0x78
}
 800900a:	bf00      	nop
 800900c:	3724      	adds	r7, #36	; 0x24
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009016:	b480      	push	{r7}
 8009018:	b095      	sub	sp, #84	; 0x54
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903c:	643b      	str	r3, [r7, #64]	; 0x40
 800903e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e6      	bne.n	800901e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3308      	adds	r3, #8
 8009056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	f023 0301 	bic.w	r3, r3, #1
 8009066:	64bb      	str	r3, [r7, #72]	; 0x48
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e5      	bne.n	8009050 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009088:	2b01      	cmp	r3, #1
 800908a:	d118      	bne.n	80090be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	e853 3f00 	ldrex	r3, [r3]
 8009098:	60bb      	str	r3, [r7, #8]
   return(result);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f023 0310 	bic.w	r3, r3, #16
 80090a0:	647b      	str	r3, [r7, #68]	; 0x44
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090aa:	61bb      	str	r3, [r7, #24]
 80090ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	6979      	ldr	r1, [r7, #20]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	613b      	str	r3, [r7, #16]
   return(result);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e6      	bne.n	800908c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80090d0:	bf00      	nop
 80090d2:	3754      	adds	r7, #84	; 0x54
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b090      	sub	sp, #64	; 0x40
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d037      	beq.n	8009162 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80090f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f4:	2200      	movs	r2, #0
 80090f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	623b      	str	r3, [r7, #32]
   return(result);
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009110:	63bb      	str	r3, [r7, #56]	; 0x38
 8009112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911a:	633a      	str	r2, [r7, #48]	; 0x30
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e5      	bne.n	80090fa <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800912e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	60fb      	str	r3, [r7, #12]
   return(result);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009142:	637b      	str	r3, [r7, #52]	; 0x34
 8009144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	69b9      	ldr	r1, [r7, #24]
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	617b      	str	r3, [r7, #20]
   return(result);
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e6      	bne.n	800912e <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009160:	e002      	b.n	8009168 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8009162:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009164:	f7f8 fb34 	bl	80017d0 <HAL_UART_TxCpltCallback>
}
 8009168:	bf00      	nop
 800916a:	3740      	adds	r7, #64	; 0x40
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff fb7e 	bl	8008880 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800919e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b0:	2b80      	cmp	r3, #128	; 0x80
 80091b2:	d109      	bne.n	80091c8 <UART_DMAError+0x3c>
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2b21      	cmp	r3, #33	; 0x21
 80091b8:	d106      	bne.n	80091c8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80091c2:	6978      	ldr	r0, [r7, #20]
 80091c4:	f7ff ff01 	bl	8008fca <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d2:	2b40      	cmp	r3, #64	; 0x40
 80091d4:	d109      	bne.n	80091ea <UART_DMAError+0x5e>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b22      	cmp	r3, #34	; 0x22
 80091da:	d106      	bne.n	80091ea <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80091e4:	6978      	ldr	r0, [r7, #20]
 80091e6:	f7ff ff16 	bl	8009016 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091f0:	f043 0210 	orr.w	r2, r3, #16
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091fa:	6978      	ldr	r0, [r7, #20]
 80091fc:	f7ff fb4a 	bl	8008894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009200:	bf00      	nop
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff fb34 	bl	8008894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	60bb      	str	r3, [r7, #8]
   return(result);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009250:	61fb      	str	r3, [r7, #28]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6979      	ldr	r1, [r7, #20]
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	613b      	str	r3, [r7, #16]
   return(result);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e6      	bne.n	800923c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7f8 faa8 	bl	80017d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009280:	bf00      	nop
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <__errno>:
 800929c:	4b01      	ldr	r3, [pc, #4]	; (80092a4 <__errno+0x8>)
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	2000000c 	.word	0x2000000c

080092a8 <__libc_init_array>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	4d0d      	ldr	r5, [pc, #52]	; (80092e0 <__libc_init_array+0x38>)
 80092ac:	4c0d      	ldr	r4, [pc, #52]	; (80092e4 <__libc_init_array+0x3c>)
 80092ae:	1b64      	subs	r4, r4, r5
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	2600      	movs	r6, #0
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	d109      	bne.n	80092cc <__libc_init_array+0x24>
 80092b8:	4d0b      	ldr	r5, [pc, #44]	; (80092e8 <__libc_init_array+0x40>)
 80092ba:	4c0c      	ldr	r4, [pc, #48]	; (80092ec <__libc_init_array+0x44>)
 80092bc:	f002 fe90 	bl	800bfe0 <_init>
 80092c0:	1b64      	subs	r4, r4, r5
 80092c2:	10a4      	asrs	r4, r4, #2
 80092c4:	2600      	movs	r6, #0
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	d105      	bne.n	80092d6 <__libc_init_array+0x2e>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d0:	4798      	blx	r3
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7ee      	b.n	80092b4 <__libc_init_array+0xc>
 80092d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092da:	4798      	blx	r3
 80092dc:	3601      	adds	r6, #1
 80092de:	e7f2      	b.n	80092c6 <__libc_init_array+0x1e>
 80092e0:	0800c5cc 	.word	0x0800c5cc
 80092e4:	0800c5cc 	.word	0x0800c5cc
 80092e8:	0800c5cc 	.word	0x0800c5cc
 80092ec:	0800c5d0 	.word	0x0800c5d0

080092f0 <memcpy>:
 80092f0:	440a      	add	r2, r1
 80092f2:	4291      	cmp	r1, r2
 80092f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f8:	d100      	bne.n	80092fc <memcpy+0xc>
 80092fa:	4770      	bx	lr
 80092fc:	b510      	push	{r4, lr}
 80092fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009302:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009306:	4291      	cmp	r1, r2
 8009308:	d1f9      	bne.n	80092fe <memcpy+0xe>
 800930a:	bd10      	pop	{r4, pc}

0800930c <memset>:
 800930c:	4402      	add	r2, r0
 800930e:	4603      	mov	r3, r0
 8009310:	4293      	cmp	r3, r2
 8009312:	d100      	bne.n	8009316 <memset+0xa>
 8009314:	4770      	bx	lr
 8009316:	f803 1b01 	strb.w	r1, [r3], #1
 800931a:	e7f9      	b.n	8009310 <memset+0x4>

0800931c <__cvt>:
 800931c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	ec55 4b10 	vmov	r4, r5, d0
 8009324:	2d00      	cmp	r5, #0
 8009326:	460e      	mov	r6, r1
 8009328:	4619      	mov	r1, r3
 800932a:	462b      	mov	r3, r5
 800932c:	bfbb      	ittet	lt
 800932e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009332:	461d      	movlt	r5, r3
 8009334:	2300      	movge	r3, #0
 8009336:	232d      	movlt	r3, #45	; 0x2d
 8009338:	700b      	strb	r3, [r1, #0]
 800933a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800933c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009340:	4691      	mov	r9, r2
 8009342:	f023 0820 	bic.w	r8, r3, #32
 8009346:	bfbc      	itt	lt
 8009348:	4622      	movlt	r2, r4
 800934a:	4614      	movlt	r4, r2
 800934c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009350:	d005      	beq.n	800935e <__cvt+0x42>
 8009352:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009356:	d100      	bne.n	800935a <__cvt+0x3e>
 8009358:	3601      	adds	r6, #1
 800935a:	2102      	movs	r1, #2
 800935c:	e000      	b.n	8009360 <__cvt+0x44>
 800935e:	2103      	movs	r1, #3
 8009360:	ab03      	add	r3, sp, #12
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	ab02      	add	r3, sp, #8
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	ec45 4b10 	vmov	d0, r4, r5
 800936c:	4653      	mov	r3, sl
 800936e:	4632      	mov	r2, r6
 8009370:	f000 fee6 	bl	800a140 <_dtoa_r>
 8009374:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009378:	4607      	mov	r7, r0
 800937a:	d102      	bne.n	8009382 <__cvt+0x66>
 800937c:	f019 0f01 	tst.w	r9, #1
 8009380:	d022      	beq.n	80093c8 <__cvt+0xac>
 8009382:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009386:	eb07 0906 	add.w	r9, r7, r6
 800938a:	d110      	bne.n	80093ae <__cvt+0x92>
 800938c:	783b      	ldrb	r3, [r7, #0]
 800938e:	2b30      	cmp	r3, #48	; 0x30
 8009390:	d10a      	bne.n	80093a8 <__cvt+0x8c>
 8009392:	2200      	movs	r2, #0
 8009394:	2300      	movs	r3, #0
 8009396:	4620      	mov	r0, r4
 8009398:	4629      	mov	r1, r5
 800939a:	f7f7 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800939e:	b918      	cbnz	r0, 80093a8 <__cvt+0x8c>
 80093a0:	f1c6 0601 	rsb	r6, r6, #1
 80093a4:	f8ca 6000 	str.w	r6, [sl]
 80093a8:	f8da 3000 	ldr.w	r3, [sl]
 80093ac:	4499      	add	r9, r3
 80093ae:	2200      	movs	r2, #0
 80093b0:	2300      	movs	r3, #0
 80093b2:	4620      	mov	r0, r4
 80093b4:	4629      	mov	r1, r5
 80093b6:	f7f7 fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 80093ba:	b108      	cbz	r0, 80093c0 <__cvt+0xa4>
 80093bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80093c0:	2230      	movs	r2, #48	; 0x30
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	454b      	cmp	r3, r9
 80093c6:	d307      	bcc.n	80093d8 <__cvt+0xbc>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093cc:	1bdb      	subs	r3, r3, r7
 80093ce:	4638      	mov	r0, r7
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	b004      	add	sp, #16
 80093d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d8:	1c59      	adds	r1, r3, #1
 80093da:	9103      	str	r1, [sp, #12]
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	e7f0      	b.n	80093c2 <__cvt+0xa6>

080093e0 <__exponent>:
 80093e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093e2:	4603      	mov	r3, r0
 80093e4:	2900      	cmp	r1, #0
 80093e6:	bfb8      	it	lt
 80093e8:	4249      	neglt	r1, r1
 80093ea:	f803 2b02 	strb.w	r2, [r3], #2
 80093ee:	bfb4      	ite	lt
 80093f0:	222d      	movlt	r2, #45	; 0x2d
 80093f2:	222b      	movge	r2, #43	; 0x2b
 80093f4:	2909      	cmp	r1, #9
 80093f6:	7042      	strb	r2, [r0, #1]
 80093f8:	dd2a      	ble.n	8009450 <__exponent+0x70>
 80093fa:	f10d 0407 	add.w	r4, sp, #7
 80093fe:	46a4      	mov	ip, r4
 8009400:	270a      	movs	r7, #10
 8009402:	46a6      	mov	lr, r4
 8009404:	460a      	mov	r2, r1
 8009406:	fb91 f6f7 	sdiv	r6, r1, r7
 800940a:	fb07 1516 	mls	r5, r7, r6, r1
 800940e:	3530      	adds	r5, #48	; 0x30
 8009410:	2a63      	cmp	r2, #99	; 0x63
 8009412:	f104 34ff 	add.w	r4, r4, #4294967295
 8009416:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800941a:	4631      	mov	r1, r6
 800941c:	dcf1      	bgt.n	8009402 <__exponent+0x22>
 800941e:	3130      	adds	r1, #48	; 0x30
 8009420:	f1ae 0502 	sub.w	r5, lr, #2
 8009424:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009428:	1c44      	adds	r4, r0, #1
 800942a:	4629      	mov	r1, r5
 800942c:	4561      	cmp	r1, ip
 800942e:	d30a      	bcc.n	8009446 <__exponent+0x66>
 8009430:	f10d 0209 	add.w	r2, sp, #9
 8009434:	eba2 020e 	sub.w	r2, r2, lr
 8009438:	4565      	cmp	r5, ip
 800943a:	bf88      	it	hi
 800943c:	2200      	movhi	r2, #0
 800943e:	4413      	add	r3, r2
 8009440:	1a18      	subs	r0, r3, r0
 8009442:	b003      	add	sp, #12
 8009444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009446:	f811 2b01 	ldrb.w	r2, [r1], #1
 800944a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800944e:	e7ed      	b.n	800942c <__exponent+0x4c>
 8009450:	2330      	movs	r3, #48	; 0x30
 8009452:	3130      	adds	r1, #48	; 0x30
 8009454:	7083      	strb	r3, [r0, #2]
 8009456:	70c1      	strb	r1, [r0, #3]
 8009458:	1d03      	adds	r3, r0, #4
 800945a:	e7f1      	b.n	8009440 <__exponent+0x60>

0800945c <_printf_float>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	ed2d 8b02 	vpush	{d8}
 8009464:	b08d      	sub	sp, #52	; 0x34
 8009466:	460c      	mov	r4, r1
 8009468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800946c:	4616      	mov	r6, r2
 800946e:	461f      	mov	r7, r3
 8009470:	4605      	mov	r5, r0
 8009472:	f001 fe0b 	bl	800b08c <_localeconv_r>
 8009476:	f8d0 a000 	ldr.w	sl, [r0]
 800947a:	4650      	mov	r0, sl
 800947c:	f7f6 fea8 	bl	80001d0 <strlen>
 8009480:	2300      	movs	r3, #0
 8009482:	930a      	str	r3, [sp, #40]	; 0x28
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	9305      	str	r3, [sp, #20]
 8009488:	f8d8 3000 	ldr.w	r3, [r8]
 800948c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009490:	3307      	adds	r3, #7
 8009492:	f023 0307 	bic.w	r3, r3, #7
 8009496:	f103 0208 	add.w	r2, r3, #8
 800949a:	f8c8 2000 	str.w	r2, [r8]
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80094aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094ae:	9307      	str	r3, [sp, #28]
 80094b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80094b4:	ee08 0a10 	vmov	s16, r0
 80094b8:	4b9f      	ldr	r3, [pc, #636]	; (8009738 <_printf_float+0x2dc>)
 80094ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094be:	f04f 32ff 	mov.w	r2, #4294967295
 80094c2:	f7f7 fb33 	bl	8000b2c <__aeabi_dcmpun>
 80094c6:	bb88      	cbnz	r0, 800952c <_printf_float+0xd0>
 80094c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094cc:	4b9a      	ldr	r3, [pc, #616]	; (8009738 <_printf_float+0x2dc>)
 80094ce:	f04f 32ff 	mov.w	r2, #4294967295
 80094d2:	f7f7 fb0d 	bl	8000af0 <__aeabi_dcmple>
 80094d6:	bb48      	cbnz	r0, 800952c <_printf_float+0xd0>
 80094d8:	2200      	movs	r2, #0
 80094da:	2300      	movs	r3, #0
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f7f7 fafc 	bl	8000adc <__aeabi_dcmplt>
 80094e4:	b110      	cbz	r0, 80094ec <_printf_float+0x90>
 80094e6:	232d      	movs	r3, #45	; 0x2d
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	4b93      	ldr	r3, [pc, #588]	; (800973c <_printf_float+0x2e0>)
 80094ee:	4894      	ldr	r0, [pc, #592]	; (8009740 <_printf_float+0x2e4>)
 80094f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80094f4:	bf94      	ite	ls
 80094f6:	4698      	movls	r8, r3
 80094f8:	4680      	movhi	r8, r0
 80094fa:	2303      	movs	r3, #3
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	9b05      	ldr	r3, [sp, #20]
 8009500:	f023 0204 	bic.w	r2, r3, #4
 8009504:	6022      	str	r2, [r4, #0]
 8009506:	f04f 0900 	mov.w	r9, #0
 800950a:	9700      	str	r7, [sp, #0]
 800950c:	4633      	mov	r3, r6
 800950e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009510:	4621      	mov	r1, r4
 8009512:	4628      	mov	r0, r5
 8009514:	f000 f9d8 	bl	80098c8 <_printf_common>
 8009518:	3001      	adds	r0, #1
 800951a:	f040 8090 	bne.w	800963e <_printf_float+0x1e2>
 800951e:	f04f 30ff 	mov.w	r0, #4294967295
 8009522:	b00d      	add	sp, #52	; 0x34
 8009524:	ecbd 8b02 	vpop	{d8}
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	4642      	mov	r2, r8
 800952e:	464b      	mov	r3, r9
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f7 fafa 	bl	8000b2c <__aeabi_dcmpun>
 8009538:	b140      	cbz	r0, 800954c <_printf_float+0xf0>
 800953a:	464b      	mov	r3, r9
 800953c:	2b00      	cmp	r3, #0
 800953e:	bfbc      	itt	lt
 8009540:	232d      	movlt	r3, #45	; 0x2d
 8009542:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009546:	487f      	ldr	r0, [pc, #508]	; (8009744 <_printf_float+0x2e8>)
 8009548:	4b7f      	ldr	r3, [pc, #508]	; (8009748 <_printf_float+0x2ec>)
 800954a:	e7d1      	b.n	80094f0 <_printf_float+0x94>
 800954c:	6863      	ldr	r3, [r4, #4]
 800954e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009552:	9206      	str	r2, [sp, #24]
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	d13f      	bne.n	80095d8 <_printf_float+0x17c>
 8009558:	2306      	movs	r3, #6
 800955a:	6063      	str	r3, [r4, #4]
 800955c:	9b05      	ldr	r3, [sp, #20]
 800955e:	6861      	ldr	r1, [r4, #4]
 8009560:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009564:	2300      	movs	r3, #0
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	ab0a      	add	r3, sp, #40	; 0x28
 800956a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800956e:	ab09      	add	r3, sp, #36	; 0x24
 8009570:	ec49 8b10 	vmov	d0, r8, r9
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	6022      	str	r2, [r4, #0]
 8009578:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800957c:	4628      	mov	r0, r5
 800957e:	f7ff fecd 	bl	800931c <__cvt>
 8009582:	9b06      	ldr	r3, [sp, #24]
 8009584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009586:	2b47      	cmp	r3, #71	; 0x47
 8009588:	4680      	mov	r8, r0
 800958a:	d108      	bne.n	800959e <_printf_float+0x142>
 800958c:	1cc8      	adds	r0, r1, #3
 800958e:	db02      	blt.n	8009596 <_printf_float+0x13a>
 8009590:	6863      	ldr	r3, [r4, #4]
 8009592:	4299      	cmp	r1, r3
 8009594:	dd41      	ble.n	800961a <_printf_float+0x1be>
 8009596:	f1ab 0b02 	sub.w	fp, fp, #2
 800959a:	fa5f fb8b 	uxtb.w	fp, fp
 800959e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095a2:	d820      	bhi.n	80095e6 <_printf_float+0x18a>
 80095a4:	3901      	subs	r1, #1
 80095a6:	465a      	mov	r2, fp
 80095a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80095ac:	9109      	str	r1, [sp, #36]	; 0x24
 80095ae:	f7ff ff17 	bl	80093e0 <__exponent>
 80095b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095b4:	1813      	adds	r3, r2, r0
 80095b6:	2a01      	cmp	r2, #1
 80095b8:	4681      	mov	r9, r0
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	dc02      	bgt.n	80095c4 <_printf_float+0x168>
 80095be:	6822      	ldr	r2, [r4, #0]
 80095c0:	07d2      	lsls	r2, r2, #31
 80095c2:	d501      	bpl.n	80095c8 <_printf_float+0x16c>
 80095c4:	3301      	adds	r3, #1
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d09c      	beq.n	800950a <_printf_float+0xae>
 80095d0:	232d      	movs	r3, #45	; 0x2d
 80095d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d6:	e798      	b.n	800950a <_printf_float+0xae>
 80095d8:	9a06      	ldr	r2, [sp, #24]
 80095da:	2a47      	cmp	r2, #71	; 0x47
 80095dc:	d1be      	bne.n	800955c <_printf_float+0x100>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1bc      	bne.n	800955c <_printf_float+0x100>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e7b9      	b.n	800955a <_printf_float+0xfe>
 80095e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80095ea:	d118      	bne.n	800961e <_printf_float+0x1c2>
 80095ec:	2900      	cmp	r1, #0
 80095ee:	6863      	ldr	r3, [r4, #4]
 80095f0:	dd0b      	ble.n	800960a <_printf_float+0x1ae>
 80095f2:	6121      	str	r1, [r4, #16]
 80095f4:	b913      	cbnz	r3, 80095fc <_printf_float+0x1a0>
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	07d0      	lsls	r0, r2, #31
 80095fa:	d502      	bpl.n	8009602 <_printf_float+0x1a6>
 80095fc:	3301      	adds	r3, #1
 80095fe:	440b      	add	r3, r1
 8009600:	6123      	str	r3, [r4, #16]
 8009602:	65a1      	str	r1, [r4, #88]	; 0x58
 8009604:	f04f 0900 	mov.w	r9, #0
 8009608:	e7de      	b.n	80095c8 <_printf_float+0x16c>
 800960a:	b913      	cbnz	r3, 8009612 <_printf_float+0x1b6>
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	07d2      	lsls	r2, r2, #31
 8009610:	d501      	bpl.n	8009616 <_printf_float+0x1ba>
 8009612:	3302      	adds	r3, #2
 8009614:	e7f4      	b.n	8009600 <_printf_float+0x1a4>
 8009616:	2301      	movs	r3, #1
 8009618:	e7f2      	b.n	8009600 <_printf_float+0x1a4>
 800961a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800961e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009620:	4299      	cmp	r1, r3
 8009622:	db05      	blt.n	8009630 <_printf_float+0x1d4>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	6121      	str	r1, [r4, #16]
 8009628:	07d8      	lsls	r0, r3, #31
 800962a:	d5ea      	bpl.n	8009602 <_printf_float+0x1a6>
 800962c:	1c4b      	adds	r3, r1, #1
 800962e:	e7e7      	b.n	8009600 <_printf_float+0x1a4>
 8009630:	2900      	cmp	r1, #0
 8009632:	bfd4      	ite	le
 8009634:	f1c1 0202 	rsble	r2, r1, #2
 8009638:	2201      	movgt	r2, #1
 800963a:	4413      	add	r3, r2
 800963c:	e7e0      	b.n	8009600 <_printf_float+0x1a4>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	055a      	lsls	r2, r3, #21
 8009642:	d407      	bmi.n	8009654 <_printf_float+0x1f8>
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	4642      	mov	r2, r8
 8009648:	4631      	mov	r1, r6
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	d12c      	bne.n	80096ac <_printf_float+0x250>
 8009652:	e764      	b.n	800951e <_printf_float+0xc2>
 8009654:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009658:	f240 80e0 	bls.w	800981c <_printf_float+0x3c0>
 800965c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	f7f7 fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009668:	2800      	cmp	r0, #0
 800966a:	d034      	beq.n	80096d6 <_printf_float+0x27a>
 800966c:	4a37      	ldr	r2, [pc, #220]	; (800974c <_printf_float+0x2f0>)
 800966e:	2301      	movs	r3, #1
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	f43f af51 	beq.w	800951e <_printf_float+0xc2>
 800967c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009680:	429a      	cmp	r2, r3
 8009682:	db02      	blt.n	800968a <_printf_float+0x22e>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	07d8      	lsls	r0, r3, #31
 8009688:	d510      	bpl.n	80096ac <_printf_float+0x250>
 800968a:	ee18 3a10 	vmov	r3, s16
 800968e:	4652      	mov	r2, sl
 8009690:	4631      	mov	r1, r6
 8009692:	4628      	mov	r0, r5
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	f43f af41 	beq.w	800951e <_printf_float+0xc2>
 800969c:	f04f 0800 	mov.w	r8, #0
 80096a0:	f104 091a 	add.w	r9, r4, #26
 80096a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a6:	3b01      	subs	r3, #1
 80096a8:	4543      	cmp	r3, r8
 80096aa:	dc09      	bgt.n	80096c0 <_printf_float+0x264>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	079b      	lsls	r3, r3, #30
 80096b0:	f100 8105 	bmi.w	80098be <_printf_float+0x462>
 80096b4:	68e0      	ldr	r0, [r4, #12]
 80096b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b8:	4298      	cmp	r0, r3
 80096ba:	bfb8      	it	lt
 80096bc:	4618      	movlt	r0, r3
 80096be:	e730      	b.n	8009522 <_printf_float+0xc6>
 80096c0:	2301      	movs	r3, #1
 80096c2:	464a      	mov	r2, r9
 80096c4:	4631      	mov	r1, r6
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b8      	blx	r7
 80096ca:	3001      	adds	r0, #1
 80096cc:	f43f af27 	beq.w	800951e <_printf_float+0xc2>
 80096d0:	f108 0801 	add.w	r8, r8, #1
 80096d4:	e7e6      	b.n	80096a4 <_printf_float+0x248>
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	dc39      	bgt.n	8009750 <_printf_float+0x2f4>
 80096dc:	4a1b      	ldr	r2, [pc, #108]	; (800974c <_printf_float+0x2f0>)
 80096de:	2301      	movs	r3, #1
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	f43f af19 	beq.w	800951e <_printf_float+0xc2>
 80096ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096f0:	4313      	orrs	r3, r2
 80096f2:	d102      	bne.n	80096fa <_printf_float+0x29e>
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	07d9      	lsls	r1, r3, #31
 80096f8:	d5d8      	bpl.n	80096ac <_printf_float+0x250>
 80096fa:	ee18 3a10 	vmov	r3, s16
 80096fe:	4652      	mov	r2, sl
 8009700:	4631      	mov	r1, r6
 8009702:	4628      	mov	r0, r5
 8009704:	47b8      	blx	r7
 8009706:	3001      	adds	r0, #1
 8009708:	f43f af09 	beq.w	800951e <_printf_float+0xc2>
 800970c:	f04f 0900 	mov.w	r9, #0
 8009710:	f104 0a1a 	add.w	sl, r4, #26
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	425b      	negs	r3, r3
 8009718:	454b      	cmp	r3, r9
 800971a:	dc01      	bgt.n	8009720 <_printf_float+0x2c4>
 800971c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800971e:	e792      	b.n	8009646 <_printf_float+0x1ea>
 8009720:	2301      	movs	r3, #1
 8009722:	4652      	mov	r2, sl
 8009724:	4631      	mov	r1, r6
 8009726:	4628      	mov	r0, r5
 8009728:	47b8      	blx	r7
 800972a:	3001      	adds	r0, #1
 800972c:	f43f aef7 	beq.w	800951e <_printf_float+0xc2>
 8009730:	f109 0901 	add.w	r9, r9, #1
 8009734:	e7ee      	b.n	8009714 <_printf_float+0x2b8>
 8009736:	bf00      	nop
 8009738:	7fefffff 	.word	0x7fefffff
 800973c:	0800c1f8 	.word	0x0800c1f8
 8009740:	0800c1fc 	.word	0x0800c1fc
 8009744:	0800c204 	.word	0x0800c204
 8009748:	0800c200 	.word	0x0800c200
 800974c:	0800c208 	.word	0x0800c208
 8009750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009754:	429a      	cmp	r2, r3
 8009756:	bfa8      	it	ge
 8009758:	461a      	movge	r2, r3
 800975a:	2a00      	cmp	r2, #0
 800975c:	4691      	mov	r9, r2
 800975e:	dc37      	bgt.n	80097d0 <_printf_float+0x374>
 8009760:	f04f 0b00 	mov.w	fp, #0
 8009764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009768:	f104 021a 	add.w	r2, r4, #26
 800976c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800976e:	9305      	str	r3, [sp, #20]
 8009770:	eba3 0309 	sub.w	r3, r3, r9
 8009774:	455b      	cmp	r3, fp
 8009776:	dc33      	bgt.n	80097e0 <_printf_float+0x384>
 8009778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800977c:	429a      	cmp	r2, r3
 800977e:	db3b      	blt.n	80097f8 <_printf_float+0x39c>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	07da      	lsls	r2, r3, #31
 8009784:	d438      	bmi.n	80097f8 <_printf_float+0x39c>
 8009786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009788:	9a05      	ldr	r2, [sp, #20]
 800978a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800978c:	1a9a      	subs	r2, r3, r2
 800978e:	eba3 0901 	sub.w	r9, r3, r1
 8009792:	4591      	cmp	r9, r2
 8009794:	bfa8      	it	ge
 8009796:	4691      	movge	r9, r2
 8009798:	f1b9 0f00 	cmp.w	r9, #0
 800979c:	dc35      	bgt.n	800980a <_printf_float+0x3ae>
 800979e:	f04f 0800 	mov.w	r8, #0
 80097a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097a6:	f104 0a1a 	add.w	sl, r4, #26
 80097aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	eba3 0309 	sub.w	r3, r3, r9
 80097b4:	4543      	cmp	r3, r8
 80097b6:	f77f af79 	ble.w	80096ac <_printf_float+0x250>
 80097ba:	2301      	movs	r3, #1
 80097bc:	4652      	mov	r2, sl
 80097be:	4631      	mov	r1, r6
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b8      	blx	r7
 80097c4:	3001      	adds	r0, #1
 80097c6:	f43f aeaa 	beq.w	800951e <_printf_float+0xc2>
 80097ca:	f108 0801 	add.w	r8, r8, #1
 80097ce:	e7ec      	b.n	80097aa <_printf_float+0x34e>
 80097d0:	4613      	mov	r3, r2
 80097d2:	4631      	mov	r1, r6
 80097d4:	4642      	mov	r2, r8
 80097d6:	4628      	mov	r0, r5
 80097d8:	47b8      	blx	r7
 80097da:	3001      	adds	r0, #1
 80097dc:	d1c0      	bne.n	8009760 <_printf_float+0x304>
 80097de:	e69e      	b.n	800951e <_printf_float+0xc2>
 80097e0:	2301      	movs	r3, #1
 80097e2:	4631      	mov	r1, r6
 80097e4:	4628      	mov	r0, r5
 80097e6:	9205      	str	r2, [sp, #20]
 80097e8:	47b8      	blx	r7
 80097ea:	3001      	adds	r0, #1
 80097ec:	f43f ae97 	beq.w	800951e <_printf_float+0xc2>
 80097f0:	9a05      	ldr	r2, [sp, #20]
 80097f2:	f10b 0b01 	add.w	fp, fp, #1
 80097f6:	e7b9      	b.n	800976c <_printf_float+0x310>
 80097f8:	ee18 3a10 	vmov	r3, s16
 80097fc:	4652      	mov	r2, sl
 80097fe:	4631      	mov	r1, r6
 8009800:	4628      	mov	r0, r5
 8009802:	47b8      	blx	r7
 8009804:	3001      	adds	r0, #1
 8009806:	d1be      	bne.n	8009786 <_printf_float+0x32a>
 8009808:	e689      	b.n	800951e <_printf_float+0xc2>
 800980a:	9a05      	ldr	r2, [sp, #20]
 800980c:	464b      	mov	r3, r9
 800980e:	4442      	add	r2, r8
 8009810:	4631      	mov	r1, r6
 8009812:	4628      	mov	r0, r5
 8009814:	47b8      	blx	r7
 8009816:	3001      	adds	r0, #1
 8009818:	d1c1      	bne.n	800979e <_printf_float+0x342>
 800981a:	e680      	b.n	800951e <_printf_float+0xc2>
 800981c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800981e:	2a01      	cmp	r2, #1
 8009820:	dc01      	bgt.n	8009826 <_printf_float+0x3ca>
 8009822:	07db      	lsls	r3, r3, #31
 8009824:	d538      	bpl.n	8009898 <_printf_float+0x43c>
 8009826:	2301      	movs	r3, #1
 8009828:	4642      	mov	r2, r8
 800982a:	4631      	mov	r1, r6
 800982c:	4628      	mov	r0, r5
 800982e:	47b8      	blx	r7
 8009830:	3001      	adds	r0, #1
 8009832:	f43f ae74 	beq.w	800951e <_printf_float+0xc2>
 8009836:	ee18 3a10 	vmov	r3, s16
 800983a:	4652      	mov	r2, sl
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	47b8      	blx	r7
 8009842:	3001      	adds	r0, #1
 8009844:	f43f ae6b 	beq.w	800951e <_printf_float+0xc2>
 8009848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800984c:	2200      	movs	r2, #0
 800984e:	2300      	movs	r3, #0
 8009850:	f7f7 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009854:	b9d8      	cbnz	r0, 800988e <_printf_float+0x432>
 8009856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009858:	f108 0201 	add.w	r2, r8, #1
 800985c:	3b01      	subs	r3, #1
 800985e:	4631      	mov	r1, r6
 8009860:	4628      	mov	r0, r5
 8009862:	47b8      	blx	r7
 8009864:	3001      	adds	r0, #1
 8009866:	d10e      	bne.n	8009886 <_printf_float+0x42a>
 8009868:	e659      	b.n	800951e <_printf_float+0xc2>
 800986a:	2301      	movs	r3, #1
 800986c:	4652      	mov	r2, sl
 800986e:	4631      	mov	r1, r6
 8009870:	4628      	mov	r0, r5
 8009872:	47b8      	blx	r7
 8009874:	3001      	adds	r0, #1
 8009876:	f43f ae52 	beq.w	800951e <_printf_float+0xc2>
 800987a:	f108 0801 	add.w	r8, r8, #1
 800987e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009880:	3b01      	subs	r3, #1
 8009882:	4543      	cmp	r3, r8
 8009884:	dcf1      	bgt.n	800986a <_printf_float+0x40e>
 8009886:	464b      	mov	r3, r9
 8009888:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800988c:	e6dc      	b.n	8009648 <_printf_float+0x1ec>
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	f104 0a1a 	add.w	sl, r4, #26
 8009896:	e7f2      	b.n	800987e <_printf_float+0x422>
 8009898:	2301      	movs	r3, #1
 800989a:	4642      	mov	r2, r8
 800989c:	e7df      	b.n	800985e <_printf_float+0x402>
 800989e:	2301      	movs	r3, #1
 80098a0:	464a      	mov	r2, r9
 80098a2:	4631      	mov	r1, r6
 80098a4:	4628      	mov	r0, r5
 80098a6:	47b8      	blx	r7
 80098a8:	3001      	adds	r0, #1
 80098aa:	f43f ae38 	beq.w	800951e <_printf_float+0xc2>
 80098ae:	f108 0801 	add.w	r8, r8, #1
 80098b2:	68e3      	ldr	r3, [r4, #12]
 80098b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098b6:	1a5b      	subs	r3, r3, r1
 80098b8:	4543      	cmp	r3, r8
 80098ba:	dcf0      	bgt.n	800989e <_printf_float+0x442>
 80098bc:	e6fa      	b.n	80096b4 <_printf_float+0x258>
 80098be:	f04f 0800 	mov.w	r8, #0
 80098c2:	f104 0919 	add.w	r9, r4, #25
 80098c6:	e7f4      	b.n	80098b2 <_printf_float+0x456>

080098c8 <_printf_common>:
 80098c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098cc:	4616      	mov	r6, r2
 80098ce:	4699      	mov	r9, r3
 80098d0:	688a      	ldr	r2, [r1, #8]
 80098d2:	690b      	ldr	r3, [r1, #16]
 80098d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098d8:	4293      	cmp	r3, r2
 80098da:	bfb8      	it	lt
 80098dc:	4613      	movlt	r3, r2
 80098de:	6033      	str	r3, [r6, #0]
 80098e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098e4:	4607      	mov	r7, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	b10a      	cbz	r2, 80098ee <_printf_common+0x26>
 80098ea:	3301      	adds	r3, #1
 80098ec:	6033      	str	r3, [r6, #0]
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	0699      	lsls	r1, r3, #26
 80098f2:	bf42      	ittt	mi
 80098f4:	6833      	ldrmi	r3, [r6, #0]
 80098f6:	3302      	addmi	r3, #2
 80098f8:	6033      	strmi	r3, [r6, #0]
 80098fa:	6825      	ldr	r5, [r4, #0]
 80098fc:	f015 0506 	ands.w	r5, r5, #6
 8009900:	d106      	bne.n	8009910 <_printf_common+0x48>
 8009902:	f104 0a19 	add.w	sl, r4, #25
 8009906:	68e3      	ldr	r3, [r4, #12]
 8009908:	6832      	ldr	r2, [r6, #0]
 800990a:	1a9b      	subs	r3, r3, r2
 800990c:	42ab      	cmp	r3, r5
 800990e:	dc26      	bgt.n	800995e <_printf_common+0x96>
 8009910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009914:	1e13      	subs	r3, r2, #0
 8009916:	6822      	ldr	r2, [r4, #0]
 8009918:	bf18      	it	ne
 800991a:	2301      	movne	r3, #1
 800991c:	0692      	lsls	r2, r2, #26
 800991e:	d42b      	bmi.n	8009978 <_printf_common+0xb0>
 8009920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009924:	4649      	mov	r1, r9
 8009926:	4638      	mov	r0, r7
 8009928:	47c0      	blx	r8
 800992a:	3001      	adds	r0, #1
 800992c:	d01e      	beq.n	800996c <_printf_common+0xa4>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	68e5      	ldr	r5, [r4, #12]
 8009932:	6832      	ldr	r2, [r6, #0]
 8009934:	f003 0306 	and.w	r3, r3, #6
 8009938:	2b04      	cmp	r3, #4
 800993a:	bf08      	it	eq
 800993c:	1aad      	subeq	r5, r5, r2
 800993e:	68a3      	ldr	r3, [r4, #8]
 8009940:	6922      	ldr	r2, [r4, #16]
 8009942:	bf0c      	ite	eq
 8009944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009948:	2500      	movne	r5, #0
 800994a:	4293      	cmp	r3, r2
 800994c:	bfc4      	itt	gt
 800994e:	1a9b      	subgt	r3, r3, r2
 8009950:	18ed      	addgt	r5, r5, r3
 8009952:	2600      	movs	r6, #0
 8009954:	341a      	adds	r4, #26
 8009956:	42b5      	cmp	r5, r6
 8009958:	d11a      	bne.n	8009990 <_printf_common+0xc8>
 800995a:	2000      	movs	r0, #0
 800995c:	e008      	b.n	8009970 <_printf_common+0xa8>
 800995e:	2301      	movs	r3, #1
 8009960:	4652      	mov	r2, sl
 8009962:	4649      	mov	r1, r9
 8009964:	4638      	mov	r0, r7
 8009966:	47c0      	blx	r8
 8009968:	3001      	adds	r0, #1
 800996a:	d103      	bne.n	8009974 <_printf_common+0xac>
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009974:	3501      	adds	r5, #1
 8009976:	e7c6      	b.n	8009906 <_printf_common+0x3e>
 8009978:	18e1      	adds	r1, r4, r3
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	2030      	movs	r0, #48	; 0x30
 800997e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009982:	4422      	add	r2, r4
 8009984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800998c:	3302      	adds	r3, #2
 800998e:	e7c7      	b.n	8009920 <_printf_common+0x58>
 8009990:	2301      	movs	r3, #1
 8009992:	4622      	mov	r2, r4
 8009994:	4649      	mov	r1, r9
 8009996:	4638      	mov	r0, r7
 8009998:	47c0      	blx	r8
 800999a:	3001      	adds	r0, #1
 800999c:	d0e6      	beq.n	800996c <_printf_common+0xa4>
 800999e:	3601      	adds	r6, #1
 80099a0:	e7d9      	b.n	8009956 <_printf_common+0x8e>
	...

080099a4 <_printf_i>:
 80099a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	7e0f      	ldrb	r7, [r1, #24]
 80099aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099ac:	2f78      	cmp	r7, #120	; 0x78
 80099ae:	4691      	mov	r9, r2
 80099b0:	4680      	mov	r8, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	469a      	mov	sl, r3
 80099b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ba:	d807      	bhi.n	80099cc <_printf_i+0x28>
 80099bc:	2f62      	cmp	r7, #98	; 0x62
 80099be:	d80a      	bhi.n	80099d6 <_printf_i+0x32>
 80099c0:	2f00      	cmp	r7, #0
 80099c2:	f000 80d8 	beq.w	8009b76 <_printf_i+0x1d2>
 80099c6:	2f58      	cmp	r7, #88	; 0x58
 80099c8:	f000 80a3 	beq.w	8009b12 <_printf_i+0x16e>
 80099cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099d4:	e03a      	b.n	8009a4c <_printf_i+0xa8>
 80099d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099da:	2b15      	cmp	r3, #21
 80099dc:	d8f6      	bhi.n	80099cc <_printf_i+0x28>
 80099de:	a101      	add	r1, pc, #4	; (adr r1, 80099e4 <_printf_i+0x40>)
 80099e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099e4:	08009a3d 	.word	0x08009a3d
 80099e8:	08009a51 	.word	0x08009a51
 80099ec:	080099cd 	.word	0x080099cd
 80099f0:	080099cd 	.word	0x080099cd
 80099f4:	080099cd 	.word	0x080099cd
 80099f8:	080099cd 	.word	0x080099cd
 80099fc:	08009a51 	.word	0x08009a51
 8009a00:	080099cd 	.word	0x080099cd
 8009a04:	080099cd 	.word	0x080099cd
 8009a08:	080099cd 	.word	0x080099cd
 8009a0c:	080099cd 	.word	0x080099cd
 8009a10:	08009b5d 	.word	0x08009b5d
 8009a14:	08009a81 	.word	0x08009a81
 8009a18:	08009b3f 	.word	0x08009b3f
 8009a1c:	080099cd 	.word	0x080099cd
 8009a20:	080099cd 	.word	0x080099cd
 8009a24:	08009b7f 	.word	0x08009b7f
 8009a28:	080099cd 	.word	0x080099cd
 8009a2c:	08009a81 	.word	0x08009a81
 8009a30:	080099cd 	.word	0x080099cd
 8009a34:	080099cd 	.word	0x080099cd
 8009a38:	08009b47 	.word	0x08009b47
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	1d1a      	adds	r2, r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	602a      	str	r2, [r5, #0]
 8009a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e0a3      	b.n	8009b98 <_printf_i+0x1f4>
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	6829      	ldr	r1, [r5, #0]
 8009a54:	0606      	lsls	r6, r0, #24
 8009a56:	f101 0304 	add.w	r3, r1, #4
 8009a5a:	d50a      	bpl.n	8009a72 <_printf_i+0xce>
 8009a5c:	680e      	ldr	r6, [r1, #0]
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	da03      	bge.n	8009a6c <_printf_i+0xc8>
 8009a64:	232d      	movs	r3, #45	; 0x2d
 8009a66:	4276      	negs	r6, r6
 8009a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6c:	485e      	ldr	r0, [pc, #376]	; (8009be8 <_printf_i+0x244>)
 8009a6e:	230a      	movs	r3, #10
 8009a70:	e019      	b.n	8009aa6 <_printf_i+0x102>
 8009a72:	680e      	ldr	r6, [r1, #0]
 8009a74:	602b      	str	r3, [r5, #0]
 8009a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a7a:	bf18      	it	ne
 8009a7c:	b236      	sxthne	r6, r6
 8009a7e:	e7ef      	b.n	8009a60 <_printf_i+0xbc>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	6820      	ldr	r0, [r4, #0]
 8009a84:	1d19      	adds	r1, r3, #4
 8009a86:	6029      	str	r1, [r5, #0]
 8009a88:	0601      	lsls	r1, r0, #24
 8009a8a:	d501      	bpl.n	8009a90 <_printf_i+0xec>
 8009a8c:	681e      	ldr	r6, [r3, #0]
 8009a8e:	e002      	b.n	8009a96 <_printf_i+0xf2>
 8009a90:	0646      	lsls	r6, r0, #25
 8009a92:	d5fb      	bpl.n	8009a8c <_printf_i+0xe8>
 8009a94:	881e      	ldrh	r6, [r3, #0]
 8009a96:	4854      	ldr	r0, [pc, #336]	; (8009be8 <_printf_i+0x244>)
 8009a98:	2f6f      	cmp	r7, #111	; 0x6f
 8009a9a:	bf0c      	ite	eq
 8009a9c:	2308      	moveq	r3, #8
 8009a9e:	230a      	movne	r3, #10
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aa6:	6865      	ldr	r5, [r4, #4]
 8009aa8:	60a5      	str	r5, [r4, #8]
 8009aaa:	2d00      	cmp	r5, #0
 8009aac:	bfa2      	ittt	ge
 8009aae:	6821      	ldrge	r1, [r4, #0]
 8009ab0:	f021 0104 	bicge.w	r1, r1, #4
 8009ab4:	6021      	strge	r1, [r4, #0]
 8009ab6:	b90e      	cbnz	r6, 8009abc <_printf_i+0x118>
 8009ab8:	2d00      	cmp	r5, #0
 8009aba:	d04d      	beq.n	8009b58 <_printf_i+0x1b4>
 8009abc:	4615      	mov	r5, r2
 8009abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ac6:	5dc7      	ldrb	r7, [r0, r7]
 8009ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009acc:	4637      	mov	r7, r6
 8009ace:	42bb      	cmp	r3, r7
 8009ad0:	460e      	mov	r6, r1
 8009ad2:	d9f4      	bls.n	8009abe <_printf_i+0x11a>
 8009ad4:	2b08      	cmp	r3, #8
 8009ad6:	d10b      	bne.n	8009af0 <_printf_i+0x14c>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	07de      	lsls	r6, r3, #31
 8009adc:	d508      	bpl.n	8009af0 <_printf_i+0x14c>
 8009ade:	6923      	ldr	r3, [r4, #16]
 8009ae0:	6861      	ldr	r1, [r4, #4]
 8009ae2:	4299      	cmp	r1, r3
 8009ae4:	bfde      	ittt	le
 8009ae6:	2330      	movle	r3, #48	; 0x30
 8009ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009aec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009af0:	1b52      	subs	r2, r2, r5
 8009af2:	6122      	str	r2, [r4, #16]
 8009af4:	f8cd a000 	str.w	sl, [sp]
 8009af8:	464b      	mov	r3, r9
 8009afa:	aa03      	add	r2, sp, #12
 8009afc:	4621      	mov	r1, r4
 8009afe:	4640      	mov	r0, r8
 8009b00:	f7ff fee2 	bl	80098c8 <_printf_common>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d14c      	bne.n	8009ba2 <_printf_i+0x1fe>
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	b004      	add	sp, #16
 8009b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b12:	4835      	ldr	r0, [pc, #212]	; (8009be8 <_printf_i+0x244>)
 8009b14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b18:	6829      	ldr	r1, [r5, #0]
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b20:	6029      	str	r1, [r5, #0]
 8009b22:	061d      	lsls	r5, r3, #24
 8009b24:	d514      	bpl.n	8009b50 <_printf_i+0x1ac>
 8009b26:	07df      	lsls	r7, r3, #31
 8009b28:	bf44      	itt	mi
 8009b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b2e:	6023      	strmi	r3, [r4, #0]
 8009b30:	b91e      	cbnz	r6, 8009b3a <_printf_i+0x196>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	f023 0320 	bic.w	r3, r3, #32
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	2310      	movs	r3, #16
 8009b3c:	e7b0      	b.n	8009aa0 <_printf_i+0xfc>
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	f043 0320 	orr.w	r3, r3, #32
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	2378      	movs	r3, #120	; 0x78
 8009b48:	4828      	ldr	r0, [pc, #160]	; (8009bec <_printf_i+0x248>)
 8009b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b4e:	e7e3      	b.n	8009b18 <_printf_i+0x174>
 8009b50:	0659      	lsls	r1, r3, #25
 8009b52:	bf48      	it	mi
 8009b54:	b2b6      	uxthmi	r6, r6
 8009b56:	e7e6      	b.n	8009b26 <_printf_i+0x182>
 8009b58:	4615      	mov	r5, r2
 8009b5a:	e7bb      	b.n	8009ad4 <_printf_i+0x130>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	6826      	ldr	r6, [r4, #0]
 8009b60:	6961      	ldr	r1, [r4, #20]
 8009b62:	1d18      	adds	r0, r3, #4
 8009b64:	6028      	str	r0, [r5, #0]
 8009b66:	0635      	lsls	r5, r6, #24
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	d501      	bpl.n	8009b70 <_printf_i+0x1cc>
 8009b6c:	6019      	str	r1, [r3, #0]
 8009b6e:	e002      	b.n	8009b76 <_printf_i+0x1d2>
 8009b70:	0670      	lsls	r0, r6, #25
 8009b72:	d5fb      	bpl.n	8009b6c <_printf_i+0x1c8>
 8009b74:	8019      	strh	r1, [r3, #0]
 8009b76:	2300      	movs	r3, #0
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	4615      	mov	r5, r2
 8009b7c:	e7ba      	b.n	8009af4 <_printf_i+0x150>
 8009b7e:	682b      	ldr	r3, [r5, #0]
 8009b80:	1d1a      	adds	r2, r3, #4
 8009b82:	602a      	str	r2, [r5, #0]
 8009b84:	681d      	ldr	r5, [r3, #0]
 8009b86:	6862      	ldr	r2, [r4, #4]
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7f6 fb28 	bl	80001e0 <memchr>
 8009b90:	b108      	cbz	r0, 8009b96 <_printf_i+0x1f2>
 8009b92:	1b40      	subs	r0, r0, r5
 8009b94:	6060      	str	r0, [r4, #4]
 8009b96:	6863      	ldr	r3, [r4, #4]
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ba0:	e7a8      	b.n	8009af4 <_printf_i+0x150>
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	462a      	mov	r2, r5
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	4640      	mov	r0, r8
 8009baa:	47d0      	blx	sl
 8009bac:	3001      	adds	r0, #1
 8009bae:	d0ab      	beq.n	8009b08 <_printf_i+0x164>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	079b      	lsls	r3, r3, #30
 8009bb4:	d413      	bmi.n	8009bde <_printf_i+0x23a>
 8009bb6:	68e0      	ldr	r0, [r4, #12]
 8009bb8:	9b03      	ldr	r3, [sp, #12]
 8009bba:	4298      	cmp	r0, r3
 8009bbc:	bfb8      	it	lt
 8009bbe:	4618      	movlt	r0, r3
 8009bc0:	e7a4      	b.n	8009b0c <_printf_i+0x168>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	4640      	mov	r0, r8
 8009bca:	47d0      	blx	sl
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d09b      	beq.n	8009b08 <_printf_i+0x164>
 8009bd0:	3501      	adds	r5, #1
 8009bd2:	68e3      	ldr	r3, [r4, #12]
 8009bd4:	9903      	ldr	r1, [sp, #12]
 8009bd6:	1a5b      	subs	r3, r3, r1
 8009bd8:	42ab      	cmp	r3, r5
 8009bda:	dcf2      	bgt.n	8009bc2 <_printf_i+0x21e>
 8009bdc:	e7eb      	b.n	8009bb6 <_printf_i+0x212>
 8009bde:	2500      	movs	r5, #0
 8009be0:	f104 0619 	add.w	r6, r4, #25
 8009be4:	e7f5      	b.n	8009bd2 <_printf_i+0x22e>
 8009be6:	bf00      	nop
 8009be8:	0800c20a 	.word	0x0800c20a
 8009bec:	0800c21b 	.word	0x0800c21b

08009bf0 <iprintf>:
 8009bf0:	b40f      	push	{r0, r1, r2, r3}
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <iprintf+0x2c>)
 8009bf4:	b513      	push	{r0, r1, r4, lr}
 8009bf6:	681c      	ldr	r4, [r3, #0]
 8009bf8:	b124      	cbz	r4, 8009c04 <iprintf+0x14>
 8009bfa:	69a3      	ldr	r3, [r4, #24]
 8009bfc:	b913      	cbnz	r3, 8009c04 <iprintf+0x14>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f001 f9a6 	bl	800af50 <__sinit>
 8009c04:	ab05      	add	r3, sp, #20
 8009c06:	9a04      	ldr	r2, [sp, #16]
 8009c08:	68a1      	ldr	r1, [r4, #8]
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f001 ff55 	bl	800babc <_vfiprintf_r>
 8009c12:	b002      	add	sp, #8
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c18:	b004      	add	sp, #16
 8009c1a:	4770      	bx	lr
 8009c1c:	2000000c 	.word	0x2000000c

08009c20 <_puts_r>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	460e      	mov	r6, r1
 8009c24:	4605      	mov	r5, r0
 8009c26:	b118      	cbz	r0, 8009c30 <_puts_r+0x10>
 8009c28:	6983      	ldr	r3, [r0, #24]
 8009c2a:	b90b      	cbnz	r3, 8009c30 <_puts_r+0x10>
 8009c2c:	f001 f990 	bl	800af50 <__sinit>
 8009c30:	69ab      	ldr	r3, [r5, #24]
 8009c32:	68ac      	ldr	r4, [r5, #8]
 8009c34:	b913      	cbnz	r3, 8009c3c <_puts_r+0x1c>
 8009c36:	4628      	mov	r0, r5
 8009c38:	f001 f98a 	bl	800af50 <__sinit>
 8009c3c:	4b2c      	ldr	r3, [pc, #176]	; (8009cf0 <_puts_r+0xd0>)
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d120      	bne.n	8009c84 <_puts_r+0x64>
 8009c42:	686c      	ldr	r4, [r5, #4]
 8009c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c46:	07db      	lsls	r3, r3, #31
 8009c48:	d405      	bmi.n	8009c56 <_puts_r+0x36>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	0598      	lsls	r0, r3, #22
 8009c4e:	d402      	bmi.n	8009c56 <_puts_r+0x36>
 8009c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c52:	f001 fa20 	bl	800b096 <__retarget_lock_acquire_recursive>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	0719      	lsls	r1, r3, #28
 8009c5a:	d51d      	bpl.n	8009c98 <_puts_r+0x78>
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	b1db      	cbz	r3, 8009c98 <_puts_r+0x78>
 8009c60:	3e01      	subs	r6, #1
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	60a3      	str	r3, [r4, #8]
 8009c6c:	bb39      	cbnz	r1, 8009cbe <_puts_r+0x9e>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da38      	bge.n	8009ce4 <_puts_r+0xc4>
 8009c72:	4622      	mov	r2, r4
 8009c74:	210a      	movs	r1, #10
 8009c76:	4628      	mov	r0, r5
 8009c78:	f000 f916 	bl	8009ea8 <__swbuf_r>
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d011      	beq.n	8009ca4 <_puts_r+0x84>
 8009c80:	250a      	movs	r5, #10
 8009c82:	e011      	b.n	8009ca8 <_puts_r+0x88>
 8009c84:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <_puts_r+0xd4>)
 8009c86:	429c      	cmp	r4, r3
 8009c88:	d101      	bne.n	8009c8e <_puts_r+0x6e>
 8009c8a:	68ac      	ldr	r4, [r5, #8]
 8009c8c:	e7da      	b.n	8009c44 <_puts_r+0x24>
 8009c8e:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <_puts_r+0xd8>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	bf08      	it	eq
 8009c94:	68ec      	ldreq	r4, [r5, #12]
 8009c96:	e7d5      	b.n	8009c44 <_puts_r+0x24>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 f956 	bl	8009f4c <__swsetup_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d0dd      	beq.n	8009c60 <_puts_r+0x40>
 8009ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8009ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009caa:	07da      	lsls	r2, r3, #31
 8009cac:	d405      	bmi.n	8009cba <_puts_r+0x9a>
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	059b      	lsls	r3, r3, #22
 8009cb2:	d402      	bmi.n	8009cba <_puts_r+0x9a>
 8009cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cb6:	f001 f9ef 	bl	800b098 <__retarget_lock_release_recursive>
 8009cba:	4628      	mov	r0, r5
 8009cbc:	bd70      	pop	{r4, r5, r6, pc}
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da04      	bge.n	8009ccc <_puts_r+0xac>
 8009cc2:	69a2      	ldr	r2, [r4, #24]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	dc06      	bgt.n	8009cd6 <_puts_r+0xb6>
 8009cc8:	290a      	cmp	r1, #10
 8009cca:	d004      	beq.n	8009cd6 <_puts_r+0xb6>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	6022      	str	r2, [r4, #0]
 8009cd2:	7019      	strb	r1, [r3, #0]
 8009cd4:	e7c5      	b.n	8009c62 <_puts_r+0x42>
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f000 f8e5 	bl	8009ea8 <__swbuf_r>
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d1bf      	bne.n	8009c62 <_puts_r+0x42>
 8009ce2:	e7df      	b.n	8009ca4 <_puts_r+0x84>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	250a      	movs	r5, #10
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	6022      	str	r2, [r4, #0]
 8009cec:	701d      	strb	r5, [r3, #0]
 8009cee:	e7db      	b.n	8009ca8 <_puts_r+0x88>
 8009cf0:	0800c2dc 	.word	0x0800c2dc
 8009cf4:	0800c2fc 	.word	0x0800c2fc
 8009cf8:	0800c2bc 	.word	0x0800c2bc

08009cfc <puts>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <puts+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f7ff bf8d 	b.w	8009c20 <_puts_r>
 8009d06:	bf00      	nop
 8009d08:	2000000c 	.word	0x2000000c

08009d0c <setbuf>:
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d12:	bf0c      	ite	eq
 8009d14:	2202      	moveq	r2, #2
 8009d16:	2200      	movne	r2, #0
 8009d18:	f000 b800 	b.w	8009d1c <setvbuf>

08009d1c <setvbuf>:
 8009d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d20:	461d      	mov	r5, r3
 8009d22:	4b5d      	ldr	r3, [pc, #372]	; (8009e98 <setvbuf+0x17c>)
 8009d24:	681f      	ldr	r7, [r3, #0]
 8009d26:	4604      	mov	r4, r0
 8009d28:	460e      	mov	r6, r1
 8009d2a:	4690      	mov	r8, r2
 8009d2c:	b127      	cbz	r7, 8009d38 <setvbuf+0x1c>
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	b913      	cbnz	r3, 8009d38 <setvbuf+0x1c>
 8009d32:	4638      	mov	r0, r7
 8009d34:	f001 f90c 	bl	800af50 <__sinit>
 8009d38:	4b58      	ldr	r3, [pc, #352]	; (8009e9c <setvbuf+0x180>)
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	d167      	bne.n	8009e0e <setvbuf+0xf2>
 8009d3e:	687c      	ldr	r4, [r7, #4]
 8009d40:	f1b8 0f02 	cmp.w	r8, #2
 8009d44:	d006      	beq.n	8009d54 <setvbuf+0x38>
 8009d46:	f1b8 0f01 	cmp.w	r8, #1
 8009d4a:	f200 809f 	bhi.w	8009e8c <setvbuf+0x170>
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	f2c0 809c 	blt.w	8009e8c <setvbuf+0x170>
 8009d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d56:	07db      	lsls	r3, r3, #31
 8009d58:	d405      	bmi.n	8009d66 <setvbuf+0x4a>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	0598      	lsls	r0, r3, #22
 8009d5e:	d402      	bmi.n	8009d66 <setvbuf+0x4a>
 8009d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d62:	f001 f998 	bl	800b096 <__retarget_lock_acquire_recursive>
 8009d66:	4621      	mov	r1, r4
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f001 f85d 	bl	800ae28 <_fflush_r>
 8009d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d70:	b141      	cbz	r1, 8009d84 <setvbuf+0x68>
 8009d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d76:	4299      	cmp	r1, r3
 8009d78:	d002      	beq.n	8009d80 <setvbuf+0x64>
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	f001 fd94 	bl	800b8a8 <_free_r>
 8009d80:	2300      	movs	r3, #0
 8009d82:	6363      	str	r3, [r4, #52]	; 0x34
 8009d84:	2300      	movs	r3, #0
 8009d86:	61a3      	str	r3, [r4, #24]
 8009d88:	6063      	str	r3, [r4, #4]
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	0619      	lsls	r1, r3, #24
 8009d8e:	d503      	bpl.n	8009d98 <setvbuf+0x7c>
 8009d90:	6921      	ldr	r1, [r4, #16]
 8009d92:	4638      	mov	r0, r7
 8009d94:	f001 fd88 	bl	800b8a8 <_free_r>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009d9e:	f023 0303 	bic.w	r3, r3, #3
 8009da2:	f1b8 0f02 	cmp.w	r8, #2
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	d06c      	beq.n	8009e84 <setvbuf+0x168>
 8009daa:	ab01      	add	r3, sp, #4
 8009dac:	466a      	mov	r2, sp
 8009dae:	4621      	mov	r1, r4
 8009db0:	4638      	mov	r0, r7
 8009db2:	f001 f972 	bl	800b09a <__swhatbuf_r>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	4318      	orrs	r0, r3
 8009dba:	81a0      	strh	r0, [r4, #12]
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	d130      	bne.n	8009e22 <setvbuf+0x106>
 8009dc0:	9d00      	ldr	r5, [sp, #0]
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f001 f9ce 	bl	800b164 <malloc>
 8009dc8:	4606      	mov	r6, r0
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d155      	bne.n	8009e7a <setvbuf+0x15e>
 8009dce:	f8dd 9000 	ldr.w	r9, [sp]
 8009dd2:	45a9      	cmp	r9, r5
 8009dd4:	d14a      	bne.n	8009e6c <setvbuf+0x150>
 8009dd6:	f04f 35ff 	mov.w	r5, #4294967295
 8009dda:	2200      	movs	r2, #0
 8009ddc:	60a2      	str	r2, [r4, #8]
 8009dde:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009de2:	6022      	str	r2, [r4, #0]
 8009de4:	6122      	str	r2, [r4, #16]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dec:	6162      	str	r2, [r4, #20]
 8009dee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009df0:	f043 0302 	orr.w	r3, r3, #2
 8009df4:	07d2      	lsls	r2, r2, #31
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	d405      	bmi.n	8009e06 <setvbuf+0xea>
 8009dfa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009dfe:	d102      	bne.n	8009e06 <setvbuf+0xea>
 8009e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e02:	f001 f949 	bl	800b098 <__retarget_lock_release_recursive>
 8009e06:	4628      	mov	r0, r5
 8009e08:	b003      	add	sp, #12
 8009e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e0e:	4b24      	ldr	r3, [pc, #144]	; (8009ea0 <setvbuf+0x184>)
 8009e10:	429c      	cmp	r4, r3
 8009e12:	d101      	bne.n	8009e18 <setvbuf+0xfc>
 8009e14:	68bc      	ldr	r4, [r7, #8]
 8009e16:	e793      	b.n	8009d40 <setvbuf+0x24>
 8009e18:	4b22      	ldr	r3, [pc, #136]	; (8009ea4 <setvbuf+0x188>)
 8009e1a:	429c      	cmp	r4, r3
 8009e1c:	bf08      	it	eq
 8009e1e:	68fc      	ldreq	r4, [r7, #12]
 8009e20:	e78e      	b.n	8009d40 <setvbuf+0x24>
 8009e22:	2e00      	cmp	r6, #0
 8009e24:	d0cd      	beq.n	8009dc2 <setvbuf+0xa6>
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	b913      	cbnz	r3, 8009e30 <setvbuf+0x114>
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	f001 f890 	bl	800af50 <__sinit>
 8009e30:	f1b8 0f01 	cmp.w	r8, #1
 8009e34:	bf08      	it	eq
 8009e36:	89a3      	ldrheq	r3, [r4, #12]
 8009e38:	6026      	str	r6, [r4, #0]
 8009e3a:	bf04      	itt	eq
 8009e3c:	f043 0301 	orreq.w	r3, r3, #1
 8009e40:	81a3      	strheq	r3, [r4, #12]
 8009e42:	89a2      	ldrh	r2, [r4, #12]
 8009e44:	f012 0308 	ands.w	r3, r2, #8
 8009e48:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009e4c:	d01c      	beq.n	8009e88 <setvbuf+0x16c>
 8009e4e:	07d3      	lsls	r3, r2, #31
 8009e50:	bf41      	itttt	mi
 8009e52:	2300      	movmi	r3, #0
 8009e54:	426d      	negmi	r5, r5
 8009e56:	60a3      	strmi	r3, [r4, #8]
 8009e58:	61a5      	strmi	r5, [r4, #24]
 8009e5a:	bf58      	it	pl
 8009e5c:	60a5      	strpl	r5, [r4, #8]
 8009e5e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009e60:	f015 0501 	ands.w	r5, r5, #1
 8009e64:	d115      	bne.n	8009e92 <setvbuf+0x176>
 8009e66:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009e6a:	e7c8      	b.n	8009dfe <setvbuf+0xe2>
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	f001 f979 	bl	800b164 <malloc>
 8009e72:	4606      	mov	r6, r0
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d0ae      	beq.n	8009dd6 <setvbuf+0xba>
 8009e78:	464d      	mov	r5, r9
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	e7d0      	b.n	8009e26 <setvbuf+0x10a>
 8009e84:	2500      	movs	r5, #0
 8009e86:	e7a8      	b.n	8009dda <setvbuf+0xbe>
 8009e88:	60a3      	str	r3, [r4, #8]
 8009e8a:	e7e8      	b.n	8009e5e <setvbuf+0x142>
 8009e8c:	f04f 35ff 	mov.w	r5, #4294967295
 8009e90:	e7b9      	b.n	8009e06 <setvbuf+0xea>
 8009e92:	2500      	movs	r5, #0
 8009e94:	e7b7      	b.n	8009e06 <setvbuf+0xea>
 8009e96:	bf00      	nop
 8009e98:	2000000c 	.word	0x2000000c
 8009e9c:	0800c2dc 	.word	0x0800c2dc
 8009ea0:	0800c2fc 	.word	0x0800c2fc
 8009ea4:	0800c2bc 	.word	0x0800c2bc

08009ea8 <__swbuf_r>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	460e      	mov	r6, r1
 8009eac:	4614      	mov	r4, r2
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b118      	cbz	r0, 8009eba <__swbuf_r+0x12>
 8009eb2:	6983      	ldr	r3, [r0, #24]
 8009eb4:	b90b      	cbnz	r3, 8009eba <__swbuf_r+0x12>
 8009eb6:	f001 f84b 	bl	800af50 <__sinit>
 8009eba:	4b21      	ldr	r3, [pc, #132]	; (8009f40 <__swbuf_r+0x98>)
 8009ebc:	429c      	cmp	r4, r3
 8009ebe:	d12b      	bne.n	8009f18 <__swbuf_r+0x70>
 8009ec0:	686c      	ldr	r4, [r5, #4]
 8009ec2:	69a3      	ldr	r3, [r4, #24]
 8009ec4:	60a3      	str	r3, [r4, #8]
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	071a      	lsls	r2, r3, #28
 8009eca:	d52f      	bpl.n	8009f2c <__swbuf_r+0x84>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	b36b      	cbz	r3, 8009f2c <__swbuf_r+0x84>
 8009ed0:	6923      	ldr	r3, [r4, #16]
 8009ed2:	6820      	ldr	r0, [r4, #0]
 8009ed4:	1ac0      	subs	r0, r0, r3
 8009ed6:	6963      	ldr	r3, [r4, #20]
 8009ed8:	b2f6      	uxtb	r6, r6
 8009eda:	4283      	cmp	r3, r0
 8009edc:	4637      	mov	r7, r6
 8009ede:	dc04      	bgt.n	8009eea <__swbuf_r+0x42>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f000 ffa0 	bl	800ae28 <_fflush_r>
 8009ee8:	bb30      	cbnz	r0, 8009f38 <__swbuf_r+0x90>
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	60a3      	str	r3, [r4, #8]
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	6022      	str	r2, [r4, #0]
 8009ef6:	701e      	strb	r6, [r3, #0]
 8009ef8:	6963      	ldr	r3, [r4, #20]
 8009efa:	3001      	adds	r0, #1
 8009efc:	4283      	cmp	r3, r0
 8009efe:	d004      	beq.n	8009f0a <__swbuf_r+0x62>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	07db      	lsls	r3, r3, #31
 8009f04:	d506      	bpl.n	8009f14 <__swbuf_r+0x6c>
 8009f06:	2e0a      	cmp	r6, #10
 8009f08:	d104      	bne.n	8009f14 <__swbuf_r+0x6c>
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 ff8b 	bl	800ae28 <_fflush_r>
 8009f12:	b988      	cbnz	r0, 8009f38 <__swbuf_r+0x90>
 8009f14:	4638      	mov	r0, r7
 8009f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <__swbuf_r+0x9c>)
 8009f1a:	429c      	cmp	r4, r3
 8009f1c:	d101      	bne.n	8009f22 <__swbuf_r+0x7a>
 8009f1e:	68ac      	ldr	r4, [r5, #8]
 8009f20:	e7cf      	b.n	8009ec2 <__swbuf_r+0x1a>
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <__swbuf_r+0xa0>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	bf08      	it	eq
 8009f28:	68ec      	ldreq	r4, [r5, #12]
 8009f2a:	e7ca      	b.n	8009ec2 <__swbuf_r+0x1a>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f000 f80c 	bl	8009f4c <__swsetup_r>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d0cb      	beq.n	8009ed0 <__swbuf_r+0x28>
 8009f38:	f04f 37ff 	mov.w	r7, #4294967295
 8009f3c:	e7ea      	b.n	8009f14 <__swbuf_r+0x6c>
 8009f3e:	bf00      	nop
 8009f40:	0800c2dc 	.word	0x0800c2dc
 8009f44:	0800c2fc 	.word	0x0800c2fc
 8009f48:	0800c2bc 	.word	0x0800c2bc

08009f4c <__swsetup_r>:
 8009f4c:	4b32      	ldr	r3, [pc, #200]	; (800a018 <__swsetup_r+0xcc>)
 8009f4e:	b570      	push	{r4, r5, r6, lr}
 8009f50:	681d      	ldr	r5, [r3, #0]
 8009f52:	4606      	mov	r6, r0
 8009f54:	460c      	mov	r4, r1
 8009f56:	b125      	cbz	r5, 8009f62 <__swsetup_r+0x16>
 8009f58:	69ab      	ldr	r3, [r5, #24]
 8009f5a:	b913      	cbnz	r3, 8009f62 <__swsetup_r+0x16>
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f000 fff7 	bl	800af50 <__sinit>
 8009f62:	4b2e      	ldr	r3, [pc, #184]	; (800a01c <__swsetup_r+0xd0>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	d10f      	bne.n	8009f88 <__swsetup_r+0x3c>
 8009f68:	686c      	ldr	r4, [r5, #4]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f70:	0719      	lsls	r1, r3, #28
 8009f72:	d42c      	bmi.n	8009fce <__swsetup_r+0x82>
 8009f74:	06dd      	lsls	r5, r3, #27
 8009f76:	d411      	bmi.n	8009f9c <__swsetup_r+0x50>
 8009f78:	2309      	movs	r3, #9
 8009f7a:	6033      	str	r3, [r6, #0]
 8009f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f80:	81a3      	strh	r3, [r4, #12]
 8009f82:	f04f 30ff 	mov.w	r0, #4294967295
 8009f86:	e03e      	b.n	800a006 <__swsetup_r+0xba>
 8009f88:	4b25      	ldr	r3, [pc, #148]	; (800a020 <__swsetup_r+0xd4>)
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	d101      	bne.n	8009f92 <__swsetup_r+0x46>
 8009f8e:	68ac      	ldr	r4, [r5, #8]
 8009f90:	e7eb      	b.n	8009f6a <__swsetup_r+0x1e>
 8009f92:	4b24      	ldr	r3, [pc, #144]	; (800a024 <__swsetup_r+0xd8>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	bf08      	it	eq
 8009f98:	68ec      	ldreq	r4, [r5, #12]
 8009f9a:	e7e6      	b.n	8009f6a <__swsetup_r+0x1e>
 8009f9c:	0758      	lsls	r0, r3, #29
 8009f9e:	d512      	bpl.n	8009fc6 <__swsetup_r+0x7a>
 8009fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa2:	b141      	cbz	r1, 8009fb6 <__swsetup_r+0x6a>
 8009fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fa8:	4299      	cmp	r1, r3
 8009faa:	d002      	beq.n	8009fb2 <__swsetup_r+0x66>
 8009fac:	4630      	mov	r0, r6
 8009fae:	f001 fc7b 	bl	800b8a8 <_free_r>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	f043 0308 	orr.w	r3, r3, #8
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	b94b      	cbnz	r3, 8009fe6 <__swsetup_r+0x9a>
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fdc:	d003      	beq.n	8009fe6 <__swsetup_r+0x9a>
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f001 f87f 	bl	800b0e4 <__smakebuf_r>
 8009fe6:	89a0      	ldrh	r0, [r4, #12]
 8009fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fec:	f010 0301 	ands.w	r3, r0, #1
 8009ff0:	d00a      	beq.n	800a008 <__swsetup_r+0xbc>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60a3      	str	r3, [r4, #8]
 8009ff6:	6963      	ldr	r3, [r4, #20]
 8009ff8:	425b      	negs	r3, r3
 8009ffa:	61a3      	str	r3, [r4, #24]
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	b943      	cbnz	r3, 800a012 <__swsetup_r+0xc6>
 800a000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a004:	d1ba      	bne.n	8009f7c <__swsetup_r+0x30>
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	0781      	lsls	r1, r0, #30
 800a00a:	bf58      	it	pl
 800a00c:	6963      	ldrpl	r3, [r4, #20]
 800a00e:	60a3      	str	r3, [r4, #8]
 800a010:	e7f4      	b.n	8009ffc <__swsetup_r+0xb0>
 800a012:	2000      	movs	r0, #0
 800a014:	e7f7      	b.n	800a006 <__swsetup_r+0xba>
 800a016:	bf00      	nop
 800a018:	2000000c 	.word	0x2000000c
 800a01c:	0800c2dc 	.word	0x0800c2dc
 800a020:	0800c2fc 	.word	0x0800c2fc
 800a024:	0800c2bc 	.word	0x0800c2bc

0800a028 <quorem>:
 800a028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	6903      	ldr	r3, [r0, #16]
 800a02e:	690c      	ldr	r4, [r1, #16]
 800a030:	42a3      	cmp	r3, r4
 800a032:	4607      	mov	r7, r0
 800a034:	f2c0 8081 	blt.w	800a13a <quorem+0x112>
 800a038:	3c01      	subs	r4, #1
 800a03a:	f101 0814 	add.w	r8, r1, #20
 800a03e:	f100 0514 	add.w	r5, r0, #20
 800a042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a04c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a050:	3301      	adds	r3, #1
 800a052:	429a      	cmp	r2, r3
 800a054:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a058:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a05c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a060:	d331      	bcc.n	800a0c6 <quorem+0x9e>
 800a062:	f04f 0e00 	mov.w	lr, #0
 800a066:	4640      	mov	r0, r8
 800a068:	46ac      	mov	ip, r5
 800a06a:	46f2      	mov	sl, lr
 800a06c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a070:	b293      	uxth	r3, r2
 800a072:	fb06 e303 	mla	r3, r6, r3, lr
 800a076:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	ebaa 0303 	sub.w	r3, sl, r3
 800a080:	f8dc a000 	ldr.w	sl, [ip]
 800a084:	0c12      	lsrs	r2, r2, #16
 800a086:	fa13 f38a 	uxtah	r3, r3, sl
 800a08a:	fb06 e202 	mla	r2, r6, r2, lr
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	9b00      	ldr	r3, [sp, #0]
 800a092:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a096:	b292      	uxth	r2, r2
 800a098:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a09c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0a4:	4581      	cmp	r9, r0
 800a0a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0aa:	f84c 3b04 	str.w	r3, [ip], #4
 800a0ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0b2:	d2db      	bcs.n	800a06c <quorem+0x44>
 800a0b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0b8:	b92b      	cbnz	r3, 800a0c6 <quorem+0x9e>
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	3b04      	subs	r3, #4
 800a0be:	429d      	cmp	r5, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	d32e      	bcc.n	800a122 <quorem+0xfa>
 800a0c4:	613c      	str	r4, [r7, #16]
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f001 fad6 	bl	800b678 <__mcmp>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	db24      	blt.n	800a11a <quorem+0xf2>
 800a0d0:	3601      	adds	r6, #1
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f04f 0c00 	mov.w	ip, #0
 800a0d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0dc:	f8d0 e000 	ldr.w	lr, [r0]
 800a0e0:	b293      	uxth	r3, r2
 800a0e2:	ebac 0303 	sub.w	r3, ip, r3
 800a0e6:	0c12      	lsrs	r2, r2, #16
 800a0e8:	fa13 f38e 	uxtah	r3, r3, lr
 800a0ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0fa:	45c1      	cmp	r9, r8
 800a0fc:	f840 3b04 	str.w	r3, [r0], #4
 800a100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a104:	d2e8      	bcs.n	800a0d8 <quorem+0xb0>
 800a106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a10a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a10e:	b922      	cbnz	r2, 800a11a <quorem+0xf2>
 800a110:	3b04      	subs	r3, #4
 800a112:	429d      	cmp	r5, r3
 800a114:	461a      	mov	r2, r3
 800a116:	d30a      	bcc.n	800a12e <quorem+0x106>
 800a118:	613c      	str	r4, [r7, #16]
 800a11a:	4630      	mov	r0, r6
 800a11c:	b003      	add	sp, #12
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a122:	6812      	ldr	r2, [r2, #0]
 800a124:	3b04      	subs	r3, #4
 800a126:	2a00      	cmp	r2, #0
 800a128:	d1cc      	bne.n	800a0c4 <quorem+0x9c>
 800a12a:	3c01      	subs	r4, #1
 800a12c:	e7c7      	b.n	800a0be <quorem+0x96>
 800a12e:	6812      	ldr	r2, [r2, #0]
 800a130:	3b04      	subs	r3, #4
 800a132:	2a00      	cmp	r2, #0
 800a134:	d1f0      	bne.n	800a118 <quorem+0xf0>
 800a136:	3c01      	subs	r4, #1
 800a138:	e7eb      	b.n	800a112 <quorem+0xea>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e7ee      	b.n	800a11c <quorem+0xf4>
	...

0800a140 <_dtoa_r>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	ed2d 8b04 	vpush	{d8-d9}
 800a148:	ec57 6b10 	vmov	r6, r7, d0
 800a14c:	b093      	sub	sp, #76	; 0x4c
 800a14e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a150:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a154:	9106      	str	r1, [sp, #24]
 800a156:	ee10 aa10 	vmov	sl, s0
 800a15a:	4604      	mov	r4, r0
 800a15c:	9209      	str	r2, [sp, #36]	; 0x24
 800a15e:	930c      	str	r3, [sp, #48]	; 0x30
 800a160:	46bb      	mov	fp, r7
 800a162:	b975      	cbnz	r5, 800a182 <_dtoa_r+0x42>
 800a164:	2010      	movs	r0, #16
 800a166:	f000 fffd 	bl	800b164 <malloc>
 800a16a:	4602      	mov	r2, r0
 800a16c:	6260      	str	r0, [r4, #36]	; 0x24
 800a16e:	b920      	cbnz	r0, 800a17a <_dtoa_r+0x3a>
 800a170:	4ba7      	ldr	r3, [pc, #668]	; (800a410 <_dtoa_r+0x2d0>)
 800a172:	21ea      	movs	r1, #234	; 0xea
 800a174:	48a7      	ldr	r0, [pc, #668]	; (800a414 <_dtoa_r+0x2d4>)
 800a176:	f001 fe37 	bl	800bde8 <__assert_func>
 800a17a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a17e:	6005      	str	r5, [r0, #0]
 800a180:	60c5      	str	r5, [r0, #12]
 800a182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a184:	6819      	ldr	r1, [r3, #0]
 800a186:	b151      	cbz	r1, 800a19e <_dtoa_r+0x5e>
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	604a      	str	r2, [r1, #4]
 800a18c:	2301      	movs	r3, #1
 800a18e:	4093      	lsls	r3, r2
 800a190:	608b      	str	r3, [r1, #8]
 800a192:	4620      	mov	r0, r4
 800a194:	f001 f82e 	bl	800b1f4 <_Bfree>
 800a198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	1e3b      	subs	r3, r7, #0
 800a1a0:	bfaa      	itet	ge
 800a1a2:	2300      	movge	r3, #0
 800a1a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a1a8:	f8c8 3000 	strge.w	r3, [r8]
 800a1ac:	4b9a      	ldr	r3, [pc, #616]	; (800a418 <_dtoa_r+0x2d8>)
 800a1ae:	bfbc      	itt	lt
 800a1b0:	2201      	movlt	r2, #1
 800a1b2:	f8c8 2000 	strlt.w	r2, [r8]
 800a1b6:	ea33 030b 	bics.w	r3, r3, fp
 800a1ba:	d11b      	bne.n	800a1f4 <_dtoa_r+0xb4>
 800a1bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1be:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1c8:	4333      	orrs	r3, r6
 800a1ca:	f000 8592 	beq.w	800acf2 <_dtoa_r+0xbb2>
 800a1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1d0:	b963      	cbnz	r3, 800a1ec <_dtoa_r+0xac>
 800a1d2:	4b92      	ldr	r3, [pc, #584]	; (800a41c <_dtoa_r+0x2dc>)
 800a1d4:	e022      	b.n	800a21c <_dtoa_r+0xdc>
 800a1d6:	4b92      	ldr	r3, [pc, #584]	; (800a420 <_dtoa_r+0x2e0>)
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	3308      	adds	r3, #8
 800a1dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	9801      	ldr	r0, [sp, #4]
 800a1e2:	b013      	add	sp, #76	; 0x4c
 800a1e4:	ecbd 8b04 	vpop	{d8-d9}
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	4b8b      	ldr	r3, [pc, #556]	; (800a41c <_dtoa_r+0x2dc>)
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	3303      	adds	r3, #3
 800a1f2:	e7f3      	b.n	800a1dc <_dtoa_r+0x9c>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4650      	mov	r0, sl
 800a1fa:	4659      	mov	r1, fp
 800a1fc:	f7f6 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 800a200:	ec4b ab19 	vmov	d9, sl, fp
 800a204:	4680      	mov	r8, r0
 800a206:	b158      	cbz	r0, 800a220 <_dtoa_r+0xe0>
 800a208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a20a:	2301      	movs	r3, #1
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 856b 	beq.w	800acec <_dtoa_r+0xbac>
 800a216:	4883      	ldr	r0, [pc, #524]	; (800a424 <_dtoa_r+0x2e4>)
 800a218:	6018      	str	r0, [r3, #0]
 800a21a:	1e43      	subs	r3, r0, #1
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	e7df      	b.n	800a1e0 <_dtoa_r+0xa0>
 800a220:	ec4b ab10 	vmov	d0, sl, fp
 800a224:	aa10      	add	r2, sp, #64	; 0x40
 800a226:	a911      	add	r1, sp, #68	; 0x44
 800a228:	4620      	mov	r0, r4
 800a22a:	f001 facb 	bl	800b7c4 <__d2b>
 800a22e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a232:	ee08 0a10 	vmov	s16, r0
 800a236:	2d00      	cmp	r5, #0
 800a238:	f000 8084 	beq.w	800a344 <_dtoa_r+0x204>
 800a23c:	ee19 3a90 	vmov	r3, s19
 800a240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a244:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a248:	4656      	mov	r6, sl
 800a24a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a24e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a252:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a256:	4b74      	ldr	r3, [pc, #464]	; (800a428 <_dtoa_r+0x2e8>)
 800a258:	2200      	movs	r2, #0
 800a25a:	4630      	mov	r0, r6
 800a25c:	4639      	mov	r1, r7
 800a25e:	f7f6 f813 	bl	8000288 <__aeabi_dsub>
 800a262:	a365      	add	r3, pc, #404	; (adr r3, 800a3f8 <_dtoa_r+0x2b8>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f7f6 f9c6 	bl	80005f8 <__aeabi_dmul>
 800a26c:	a364      	add	r3, pc, #400	; (adr r3, 800a400 <_dtoa_r+0x2c0>)
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f7f6 f80b 	bl	800028c <__adddf3>
 800a276:	4606      	mov	r6, r0
 800a278:	4628      	mov	r0, r5
 800a27a:	460f      	mov	r7, r1
 800a27c:	f7f6 f952 	bl	8000524 <__aeabi_i2d>
 800a280:	a361      	add	r3, pc, #388	; (adr r3, 800a408 <_dtoa_r+0x2c8>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f6 f9b7 	bl	80005f8 <__aeabi_dmul>
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4630      	mov	r0, r6
 800a290:	4639      	mov	r1, r7
 800a292:	f7f5 fffb 	bl	800028c <__adddf3>
 800a296:	4606      	mov	r6, r0
 800a298:	460f      	mov	r7, r1
 800a29a:	f7f6 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	9000      	str	r0, [sp, #0]
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	f7f6 fc18 	bl	8000adc <__aeabi_dcmplt>
 800a2ac:	b150      	cbz	r0, 800a2c4 <_dtoa_r+0x184>
 800a2ae:	9800      	ldr	r0, [sp, #0]
 800a2b0:	f7f6 f938 	bl	8000524 <__aeabi_i2d>
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	f7f6 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2bc:	b910      	cbnz	r0, 800a2c4 <_dtoa_r+0x184>
 800a2be:	9b00      	ldr	r3, [sp, #0]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	9b00      	ldr	r3, [sp, #0]
 800a2c6:	2b16      	cmp	r3, #22
 800a2c8:	d85a      	bhi.n	800a380 <_dtoa_r+0x240>
 800a2ca:	9a00      	ldr	r2, [sp, #0]
 800a2cc:	4b57      	ldr	r3, [pc, #348]	; (800a42c <_dtoa_r+0x2ec>)
 800a2ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	ec51 0b19 	vmov	r0, r1, d9
 800a2da:	f7f6 fbff 	bl	8000adc <__aeabi_dcmplt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d050      	beq.n	800a384 <_dtoa_r+0x244>
 800a2e2:	9b00      	ldr	r3, [sp, #0]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2ee:	1b5d      	subs	r5, r3, r5
 800a2f0:	1e6b      	subs	r3, r5, #1
 800a2f2:	9305      	str	r3, [sp, #20]
 800a2f4:	bf45      	ittet	mi
 800a2f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a2fa:	9304      	strmi	r3, [sp, #16]
 800a2fc:	2300      	movpl	r3, #0
 800a2fe:	2300      	movmi	r3, #0
 800a300:	bf4c      	ite	mi
 800a302:	9305      	strmi	r3, [sp, #20]
 800a304:	9304      	strpl	r3, [sp, #16]
 800a306:	9b00      	ldr	r3, [sp, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	db3d      	blt.n	800a388 <_dtoa_r+0x248>
 800a30c:	9b05      	ldr	r3, [sp, #20]
 800a30e:	9a00      	ldr	r2, [sp, #0]
 800a310:	920a      	str	r2, [sp, #40]	; 0x28
 800a312:	4413      	add	r3, r2
 800a314:	9305      	str	r3, [sp, #20]
 800a316:	2300      	movs	r3, #0
 800a318:	9307      	str	r3, [sp, #28]
 800a31a:	9b06      	ldr	r3, [sp, #24]
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	f200 8089 	bhi.w	800a434 <_dtoa_r+0x2f4>
 800a322:	2b05      	cmp	r3, #5
 800a324:	bfc4      	itt	gt
 800a326:	3b04      	subgt	r3, #4
 800a328:	9306      	strgt	r3, [sp, #24]
 800a32a:	9b06      	ldr	r3, [sp, #24]
 800a32c:	f1a3 0302 	sub.w	r3, r3, #2
 800a330:	bfcc      	ite	gt
 800a332:	2500      	movgt	r5, #0
 800a334:	2501      	movle	r5, #1
 800a336:	2b03      	cmp	r3, #3
 800a338:	f200 8087 	bhi.w	800a44a <_dtoa_r+0x30a>
 800a33c:	e8df f003 	tbb	[pc, r3]
 800a340:	59383a2d 	.word	0x59383a2d
 800a344:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a348:	441d      	add	r5, r3
 800a34a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a34e:	2b20      	cmp	r3, #32
 800a350:	bfc1      	itttt	gt
 800a352:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a356:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a35a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a35e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a362:	bfda      	itte	le
 800a364:	f1c3 0320 	rsble	r3, r3, #32
 800a368:	fa06 f003 	lslle.w	r0, r6, r3
 800a36c:	4318      	orrgt	r0, r3
 800a36e:	f7f6 f8c9 	bl	8000504 <__aeabi_ui2d>
 800a372:	2301      	movs	r3, #1
 800a374:	4606      	mov	r6, r0
 800a376:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a37a:	3d01      	subs	r5, #1
 800a37c:	930e      	str	r3, [sp, #56]	; 0x38
 800a37e:	e76a      	b.n	800a256 <_dtoa_r+0x116>
 800a380:	2301      	movs	r3, #1
 800a382:	e7b2      	b.n	800a2ea <_dtoa_r+0x1aa>
 800a384:	900b      	str	r0, [sp, #44]	; 0x2c
 800a386:	e7b1      	b.n	800a2ec <_dtoa_r+0x1ac>
 800a388:	9b04      	ldr	r3, [sp, #16]
 800a38a:	9a00      	ldr	r2, [sp, #0]
 800a38c:	1a9b      	subs	r3, r3, r2
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	4253      	negs	r3, r2
 800a392:	9307      	str	r3, [sp, #28]
 800a394:	2300      	movs	r3, #0
 800a396:	930a      	str	r3, [sp, #40]	; 0x28
 800a398:	e7bf      	b.n	800a31a <_dtoa_r+0x1da>
 800a39a:	2300      	movs	r3, #0
 800a39c:	9308      	str	r3, [sp, #32]
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dc55      	bgt.n	800a450 <_dtoa_r+0x310>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ae:	e00c      	b.n	800a3ca <_dtoa_r+0x28a>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e7f3      	b.n	800a39c <_dtoa_r+0x25c>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b8:	9308      	str	r3, [sp, #32]
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	4413      	add	r3, r2
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	bfb8      	it	lt
 800a3c8:	2301      	movlt	r3, #1
 800a3ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	6042      	str	r2, [r0, #4]
 800a3d0:	2204      	movs	r2, #4
 800a3d2:	f102 0614 	add.w	r6, r2, #20
 800a3d6:	429e      	cmp	r6, r3
 800a3d8:	6841      	ldr	r1, [r0, #4]
 800a3da:	d93d      	bls.n	800a458 <_dtoa_r+0x318>
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 fec9 	bl	800b174 <_Balloc>
 800a3e2:	9001      	str	r0, [sp, #4]
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d13b      	bne.n	800a460 <_dtoa_r+0x320>
 800a3e8:	4b11      	ldr	r3, [pc, #68]	; (800a430 <_dtoa_r+0x2f0>)
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3f0:	e6c0      	b.n	800a174 <_dtoa_r+0x34>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e7df      	b.n	800a3b6 <_dtoa_r+0x276>
 800a3f6:	bf00      	nop
 800a3f8:	636f4361 	.word	0x636f4361
 800a3fc:	3fd287a7 	.word	0x3fd287a7
 800a400:	8b60c8b3 	.word	0x8b60c8b3
 800a404:	3fc68a28 	.word	0x3fc68a28
 800a408:	509f79fb 	.word	0x509f79fb
 800a40c:	3fd34413 	.word	0x3fd34413
 800a410:	0800c239 	.word	0x0800c239
 800a414:	0800c250 	.word	0x0800c250
 800a418:	7ff00000 	.word	0x7ff00000
 800a41c:	0800c235 	.word	0x0800c235
 800a420:	0800c22c 	.word	0x0800c22c
 800a424:	0800c209 	.word	0x0800c209
 800a428:	3ff80000 	.word	0x3ff80000
 800a42c:	0800c3a0 	.word	0x0800c3a0
 800a430:	0800c2ab 	.word	0x0800c2ab
 800a434:	2501      	movs	r5, #1
 800a436:	2300      	movs	r3, #0
 800a438:	9306      	str	r3, [sp, #24]
 800a43a:	9508      	str	r5, [sp, #32]
 800a43c:	f04f 33ff 	mov.w	r3, #4294967295
 800a440:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a444:	2200      	movs	r2, #0
 800a446:	2312      	movs	r3, #18
 800a448:	e7b0      	b.n	800a3ac <_dtoa_r+0x26c>
 800a44a:	2301      	movs	r3, #1
 800a44c:	9308      	str	r3, [sp, #32]
 800a44e:	e7f5      	b.n	800a43c <_dtoa_r+0x2fc>
 800a450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a452:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a456:	e7b8      	b.n	800a3ca <_dtoa_r+0x28a>
 800a458:	3101      	adds	r1, #1
 800a45a:	6041      	str	r1, [r0, #4]
 800a45c:	0052      	lsls	r2, r2, #1
 800a45e:	e7b8      	b.n	800a3d2 <_dtoa_r+0x292>
 800a460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a462:	9a01      	ldr	r2, [sp, #4]
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	2b0e      	cmp	r3, #14
 800a46a:	f200 809d 	bhi.w	800a5a8 <_dtoa_r+0x468>
 800a46e:	2d00      	cmp	r5, #0
 800a470:	f000 809a 	beq.w	800a5a8 <_dtoa_r+0x468>
 800a474:	9b00      	ldr	r3, [sp, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	dd32      	ble.n	800a4e0 <_dtoa_r+0x3a0>
 800a47a:	4ab7      	ldr	r2, [pc, #732]	; (800a758 <_dtoa_r+0x618>)
 800a47c:	f003 030f 	and.w	r3, r3, #15
 800a480:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a484:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a488:	9b00      	ldr	r3, [sp, #0]
 800a48a:	05d8      	lsls	r0, r3, #23
 800a48c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a490:	d516      	bpl.n	800a4c0 <_dtoa_r+0x380>
 800a492:	4bb2      	ldr	r3, [pc, #712]	; (800a75c <_dtoa_r+0x61c>)
 800a494:	ec51 0b19 	vmov	r0, r1, d9
 800a498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a49c:	f7f6 f9d6 	bl	800084c <__aeabi_ddiv>
 800a4a0:	f007 070f 	and.w	r7, r7, #15
 800a4a4:	4682      	mov	sl, r0
 800a4a6:	468b      	mov	fp, r1
 800a4a8:	2503      	movs	r5, #3
 800a4aa:	4eac      	ldr	r6, [pc, #688]	; (800a75c <_dtoa_r+0x61c>)
 800a4ac:	b957      	cbnz	r7, 800a4c4 <_dtoa_r+0x384>
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	464b      	mov	r3, r9
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	f7f6 f9c9 	bl	800084c <__aeabi_ddiv>
 800a4ba:	4682      	mov	sl, r0
 800a4bc:	468b      	mov	fp, r1
 800a4be:	e028      	b.n	800a512 <_dtoa_r+0x3d2>
 800a4c0:	2502      	movs	r5, #2
 800a4c2:	e7f2      	b.n	800a4aa <_dtoa_r+0x36a>
 800a4c4:	07f9      	lsls	r1, r7, #31
 800a4c6:	d508      	bpl.n	800a4da <_dtoa_r+0x39a>
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4d0:	f7f6 f892 	bl	80005f8 <__aeabi_dmul>
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	4680      	mov	r8, r0
 800a4d8:	4689      	mov	r9, r1
 800a4da:	107f      	asrs	r7, r7, #1
 800a4dc:	3608      	adds	r6, #8
 800a4de:	e7e5      	b.n	800a4ac <_dtoa_r+0x36c>
 800a4e0:	f000 809b 	beq.w	800a61a <_dtoa_r+0x4da>
 800a4e4:	9b00      	ldr	r3, [sp, #0]
 800a4e6:	4f9d      	ldr	r7, [pc, #628]	; (800a75c <_dtoa_r+0x61c>)
 800a4e8:	425e      	negs	r6, r3
 800a4ea:	4b9b      	ldr	r3, [pc, #620]	; (800a758 <_dtoa_r+0x618>)
 800a4ec:	f006 020f 	and.w	r2, r6, #15
 800a4f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	ec51 0b19 	vmov	r0, r1, d9
 800a4fc:	f7f6 f87c 	bl	80005f8 <__aeabi_dmul>
 800a500:	1136      	asrs	r6, r6, #4
 800a502:	4682      	mov	sl, r0
 800a504:	468b      	mov	fp, r1
 800a506:	2300      	movs	r3, #0
 800a508:	2502      	movs	r5, #2
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d17a      	bne.n	800a604 <_dtoa_r+0x4c4>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1d3      	bne.n	800a4ba <_dtoa_r+0x37a>
 800a512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 8082 	beq.w	800a61e <_dtoa_r+0x4de>
 800a51a:	4b91      	ldr	r3, [pc, #580]	; (800a760 <_dtoa_r+0x620>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	4650      	mov	r0, sl
 800a520:	4659      	mov	r1, fp
 800a522:	f7f6 fadb 	bl	8000adc <__aeabi_dcmplt>
 800a526:	2800      	cmp	r0, #0
 800a528:	d079      	beq.n	800a61e <_dtoa_r+0x4de>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d076      	beq.n	800a61e <_dtoa_r+0x4de>
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	dd36      	ble.n	800a5a4 <_dtoa_r+0x464>
 800a536:	9b00      	ldr	r3, [sp, #0]
 800a538:	4650      	mov	r0, sl
 800a53a:	4659      	mov	r1, fp
 800a53c:	1e5f      	subs	r7, r3, #1
 800a53e:	2200      	movs	r2, #0
 800a540:	4b88      	ldr	r3, [pc, #544]	; (800a764 <_dtoa_r+0x624>)
 800a542:	f7f6 f859 	bl	80005f8 <__aeabi_dmul>
 800a546:	9e02      	ldr	r6, [sp, #8]
 800a548:	4682      	mov	sl, r0
 800a54a:	468b      	mov	fp, r1
 800a54c:	3501      	adds	r5, #1
 800a54e:	4628      	mov	r0, r5
 800a550:	f7f5 ffe8 	bl	8000524 <__aeabi_i2d>
 800a554:	4652      	mov	r2, sl
 800a556:	465b      	mov	r3, fp
 800a558:	f7f6 f84e 	bl	80005f8 <__aeabi_dmul>
 800a55c:	4b82      	ldr	r3, [pc, #520]	; (800a768 <_dtoa_r+0x628>)
 800a55e:	2200      	movs	r2, #0
 800a560:	f7f5 fe94 	bl	800028c <__adddf3>
 800a564:	46d0      	mov	r8, sl
 800a566:	46d9      	mov	r9, fp
 800a568:	4682      	mov	sl, r0
 800a56a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a56e:	2e00      	cmp	r6, #0
 800a570:	d158      	bne.n	800a624 <_dtoa_r+0x4e4>
 800a572:	4b7e      	ldr	r3, [pc, #504]	; (800a76c <_dtoa_r+0x62c>)
 800a574:	2200      	movs	r2, #0
 800a576:	4640      	mov	r0, r8
 800a578:	4649      	mov	r1, r9
 800a57a:	f7f5 fe85 	bl	8000288 <__aeabi_dsub>
 800a57e:	4652      	mov	r2, sl
 800a580:	465b      	mov	r3, fp
 800a582:	4680      	mov	r8, r0
 800a584:	4689      	mov	r9, r1
 800a586:	f7f6 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f040 8295 	bne.w	800aaba <_dtoa_r+0x97a>
 800a590:	4652      	mov	r2, sl
 800a592:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f6 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f040 8289 	bne.w	800aab6 <_dtoa_r+0x976>
 800a5a4:	ec5b ab19 	vmov	sl, fp, d9
 800a5a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f2c0 8148 	blt.w	800a840 <_dtoa_r+0x700>
 800a5b0:	9a00      	ldr	r2, [sp, #0]
 800a5b2:	2a0e      	cmp	r2, #14
 800a5b4:	f300 8144 	bgt.w	800a840 <_dtoa_r+0x700>
 800a5b8:	4b67      	ldr	r3, [pc, #412]	; (800a758 <_dtoa_r+0x618>)
 800a5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f280 80d5 	bge.w	800a774 <_dtoa_r+0x634>
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f300 80d1 	bgt.w	800a774 <_dtoa_r+0x634>
 800a5d2:	f040 826f 	bne.w	800aab4 <_dtoa_r+0x974>
 800a5d6:	4b65      	ldr	r3, [pc, #404]	; (800a76c <_dtoa_r+0x62c>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4649      	mov	r1, r9
 800a5de:	f7f6 f80b 	bl	80005f8 <__aeabi_dmul>
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	f7f6 fa8d 	bl	8000b04 <__aeabi_dcmpge>
 800a5ea:	9e03      	ldr	r6, [sp, #12]
 800a5ec:	4637      	mov	r7, r6
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f040 8245 	bne.w	800aa7e <_dtoa_r+0x93e>
 800a5f4:	9d01      	ldr	r5, [sp, #4]
 800a5f6:	2331      	movs	r3, #49	; 0x31
 800a5f8:	f805 3b01 	strb.w	r3, [r5], #1
 800a5fc:	9b00      	ldr	r3, [sp, #0]
 800a5fe:	3301      	adds	r3, #1
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	e240      	b.n	800aa86 <_dtoa_r+0x946>
 800a604:	07f2      	lsls	r2, r6, #31
 800a606:	d505      	bpl.n	800a614 <_dtoa_r+0x4d4>
 800a608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	3501      	adds	r5, #1
 800a612:	2301      	movs	r3, #1
 800a614:	1076      	asrs	r6, r6, #1
 800a616:	3708      	adds	r7, #8
 800a618:	e777      	b.n	800a50a <_dtoa_r+0x3ca>
 800a61a:	2502      	movs	r5, #2
 800a61c:	e779      	b.n	800a512 <_dtoa_r+0x3d2>
 800a61e:	9f00      	ldr	r7, [sp, #0]
 800a620:	9e03      	ldr	r6, [sp, #12]
 800a622:	e794      	b.n	800a54e <_dtoa_r+0x40e>
 800a624:	9901      	ldr	r1, [sp, #4]
 800a626:	4b4c      	ldr	r3, [pc, #304]	; (800a758 <_dtoa_r+0x618>)
 800a628:	4431      	add	r1, r6
 800a62a:	910d      	str	r1, [sp, #52]	; 0x34
 800a62c:	9908      	ldr	r1, [sp, #32]
 800a62e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a632:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a636:	2900      	cmp	r1, #0
 800a638:	d043      	beq.n	800a6c2 <_dtoa_r+0x582>
 800a63a:	494d      	ldr	r1, [pc, #308]	; (800a770 <_dtoa_r+0x630>)
 800a63c:	2000      	movs	r0, #0
 800a63e:	f7f6 f905 	bl	800084c <__aeabi_ddiv>
 800a642:	4652      	mov	r2, sl
 800a644:	465b      	mov	r3, fp
 800a646:	f7f5 fe1f 	bl	8000288 <__aeabi_dsub>
 800a64a:	9d01      	ldr	r5, [sp, #4]
 800a64c:	4682      	mov	sl, r0
 800a64e:	468b      	mov	fp, r1
 800a650:	4649      	mov	r1, r9
 800a652:	4640      	mov	r0, r8
 800a654:	f7f6 fa80 	bl	8000b58 <__aeabi_d2iz>
 800a658:	4606      	mov	r6, r0
 800a65a:	f7f5 ff63 	bl	8000524 <__aeabi_i2d>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	f7f5 fe0f 	bl	8000288 <__aeabi_dsub>
 800a66a:	3630      	adds	r6, #48	; 0x30
 800a66c:	f805 6b01 	strb.w	r6, [r5], #1
 800a670:	4652      	mov	r2, sl
 800a672:	465b      	mov	r3, fp
 800a674:	4680      	mov	r8, r0
 800a676:	4689      	mov	r9, r1
 800a678:	f7f6 fa30 	bl	8000adc <__aeabi_dcmplt>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d163      	bne.n	800a748 <_dtoa_r+0x608>
 800a680:	4642      	mov	r2, r8
 800a682:	464b      	mov	r3, r9
 800a684:	4936      	ldr	r1, [pc, #216]	; (800a760 <_dtoa_r+0x620>)
 800a686:	2000      	movs	r0, #0
 800a688:	f7f5 fdfe 	bl	8000288 <__aeabi_dsub>
 800a68c:	4652      	mov	r2, sl
 800a68e:	465b      	mov	r3, fp
 800a690:	f7f6 fa24 	bl	8000adc <__aeabi_dcmplt>
 800a694:	2800      	cmp	r0, #0
 800a696:	f040 80b5 	bne.w	800a804 <_dtoa_r+0x6c4>
 800a69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a69c:	429d      	cmp	r5, r3
 800a69e:	d081      	beq.n	800a5a4 <_dtoa_r+0x464>
 800a6a0:	4b30      	ldr	r3, [pc, #192]	; (800a764 <_dtoa_r+0x624>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	4659      	mov	r1, fp
 800a6a8:	f7f5 ffa6 	bl	80005f8 <__aeabi_dmul>
 800a6ac:	4b2d      	ldr	r3, [pc, #180]	; (800a764 <_dtoa_r+0x624>)
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	468b      	mov	fp, r1
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f7f5 ff9e 	bl	80005f8 <__aeabi_dmul>
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4689      	mov	r9, r1
 800a6c0:	e7c6      	b.n	800a650 <_dtoa_r+0x510>
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	f7f5 ff97 	bl	80005f8 <__aeabi_dmul>
 800a6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6cc:	9d01      	ldr	r5, [sp, #4]
 800a6ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	468b      	mov	fp, r1
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7f6 fa3e 	bl	8000b58 <__aeabi_d2iz>
 800a6dc:	4606      	mov	r6, r0
 800a6de:	f7f5 ff21 	bl	8000524 <__aeabi_i2d>
 800a6e2:	3630      	adds	r6, #48	; 0x30
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f5 fdcc 	bl	8000288 <__aeabi_dsub>
 800a6f0:	f805 6b01 	strb.w	r6, [r5], #1
 800a6f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	4689      	mov	r9, r1
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	d124      	bne.n	800a74c <_dtoa_r+0x60c>
 800a702:	4b1b      	ldr	r3, [pc, #108]	; (800a770 <_dtoa_r+0x630>)
 800a704:	4650      	mov	r0, sl
 800a706:	4659      	mov	r1, fp
 800a708:	f7f5 fdc0 	bl	800028c <__adddf3>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	f7f6 fa00 	bl	8000b18 <__aeabi_dcmpgt>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d173      	bne.n	800a804 <_dtoa_r+0x6c4>
 800a71c:	4652      	mov	r2, sl
 800a71e:	465b      	mov	r3, fp
 800a720:	4913      	ldr	r1, [pc, #76]	; (800a770 <_dtoa_r+0x630>)
 800a722:	2000      	movs	r0, #0
 800a724:	f7f5 fdb0 	bl	8000288 <__aeabi_dsub>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4640      	mov	r0, r8
 800a72e:	4649      	mov	r1, r9
 800a730:	f7f6 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800a734:	2800      	cmp	r0, #0
 800a736:	f43f af35 	beq.w	800a5a4 <_dtoa_r+0x464>
 800a73a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a73c:	1e6b      	subs	r3, r5, #1
 800a73e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a740:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a744:	2b30      	cmp	r3, #48	; 0x30
 800a746:	d0f8      	beq.n	800a73a <_dtoa_r+0x5fa>
 800a748:	9700      	str	r7, [sp, #0]
 800a74a:	e049      	b.n	800a7e0 <_dtoa_r+0x6a0>
 800a74c:	4b05      	ldr	r3, [pc, #20]	; (800a764 <_dtoa_r+0x624>)
 800a74e:	f7f5 ff53 	bl	80005f8 <__aeabi_dmul>
 800a752:	4680      	mov	r8, r0
 800a754:	4689      	mov	r9, r1
 800a756:	e7bd      	b.n	800a6d4 <_dtoa_r+0x594>
 800a758:	0800c3a0 	.word	0x0800c3a0
 800a75c:	0800c378 	.word	0x0800c378
 800a760:	3ff00000 	.word	0x3ff00000
 800a764:	40240000 	.word	0x40240000
 800a768:	401c0000 	.word	0x401c0000
 800a76c:	40140000 	.word	0x40140000
 800a770:	3fe00000 	.word	0x3fe00000
 800a774:	9d01      	ldr	r5, [sp, #4]
 800a776:	4656      	mov	r6, sl
 800a778:	465f      	mov	r7, fp
 800a77a:	4642      	mov	r2, r8
 800a77c:	464b      	mov	r3, r9
 800a77e:	4630      	mov	r0, r6
 800a780:	4639      	mov	r1, r7
 800a782:	f7f6 f863 	bl	800084c <__aeabi_ddiv>
 800a786:	f7f6 f9e7 	bl	8000b58 <__aeabi_d2iz>
 800a78a:	4682      	mov	sl, r0
 800a78c:	f7f5 feca 	bl	8000524 <__aeabi_i2d>
 800a790:	4642      	mov	r2, r8
 800a792:	464b      	mov	r3, r9
 800a794:	f7f5 ff30 	bl	80005f8 <__aeabi_dmul>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a7a4:	f7f5 fd70 	bl	8000288 <__aeabi_dsub>
 800a7a8:	f805 6b01 	strb.w	r6, [r5], #1
 800a7ac:	9e01      	ldr	r6, [sp, #4]
 800a7ae:	9f03      	ldr	r7, [sp, #12]
 800a7b0:	1bae      	subs	r6, r5, r6
 800a7b2:	42b7      	cmp	r7, r6
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	d135      	bne.n	800a826 <_dtoa_r+0x6e6>
 800a7ba:	f7f5 fd67 	bl	800028c <__adddf3>
 800a7be:	4642      	mov	r2, r8
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	f7f6 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 800a7ca:	b9d0      	cbnz	r0, 800a802 <_dtoa_r+0x6c2>
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	464b      	mov	r3, r9
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f6 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7d8:	b110      	cbz	r0, 800a7e0 <_dtoa_r+0x6a0>
 800a7da:	f01a 0f01 	tst.w	sl, #1
 800a7de:	d110      	bne.n	800a802 <_dtoa_r+0x6c2>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	ee18 1a10 	vmov	r1, s16
 800a7e6:	f000 fd05 	bl	800b1f4 <_Bfree>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9800      	ldr	r0, [sp, #0]
 800a7ee:	702b      	strb	r3, [r5, #0]
 800a7f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	6018      	str	r0, [r3, #0]
 800a7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f43f acf1 	beq.w	800a1e0 <_dtoa_r+0xa0>
 800a7fe:	601d      	str	r5, [r3, #0]
 800a800:	e4ee      	b.n	800a1e0 <_dtoa_r+0xa0>
 800a802:	9f00      	ldr	r7, [sp, #0]
 800a804:	462b      	mov	r3, r5
 800a806:	461d      	mov	r5, r3
 800a808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a80c:	2a39      	cmp	r2, #57	; 0x39
 800a80e:	d106      	bne.n	800a81e <_dtoa_r+0x6de>
 800a810:	9a01      	ldr	r2, [sp, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d1f7      	bne.n	800a806 <_dtoa_r+0x6c6>
 800a816:	9901      	ldr	r1, [sp, #4]
 800a818:	2230      	movs	r2, #48	; 0x30
 800a81a:	3701      	adds	r7, #1
 800a81c:	700a      	strb	r2, [r1, #0]
 800a81e:	781a      	ldrb	r2, [r3, #0]
 800a820:	3201      	adds	r2, #1
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	e790      	b.n	800a748 <_dtoa_r+0x608>
 800a826:	4ba6      	ldr	r3, [pc, #664]	; (800aac0 <_dtoa_r+0x980>)
 800a828:	2200      	movs	r2, #0
 800a82a:	f7f5 fee5 	bl	80005f8 <__aeabi_dmul>
 800a82e:	2200      	movs	r2, #0
 800a830:	2300      	movs	r3, #0
 800a832:	4606      	mov	r6, r0
 800a834:	460f      	mov	r7, r1
 800a836:	f7f6 f947 	bl	8000ac8 <__aeabi_dcmpeq>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d09d      	beq.n	800a77a <_dtoa_r+0x63a>
 800a83e:	e7cf      	b.n	800a7e0 <_dtoa_r+0x6a0>
 800a840:	9a08      	ldr	r2, [sp, #32]
 800a842:	2a00      	cmp	r2, #0
 800a844:	f000 80d7 	beq.w	800a9f6 <_dtoa_r+0x8b6>
 800a848:	9a06      	ldr	r2, [sp, #24]
 800a84a:	2a01      	cmp	r2, #1
 800a84c:	f300 80ba 	bgt.w	800a9c4 <_dtoa_r+0x884>
 800a850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a852:	2a00      	cmp	r2, #0
 800a854:	f000 80b2 	beq.w	800a9bc <_dtoa_r+0x87c>
 800a858:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a85c:	9e07      	ldr	r6, [sp, #28]
 800a85e:	9d04      	ldr	r5, [sp, #16]
 800a860:	9a04      	ldr	r2, [sp, #16]
 800a862:	441a      	add	r2, r3
 800a864:	9204      	str	r2, [sp, #16]
 800a866:	9a05      	ldr	r2, [sp, #20]
 800a868:	2101      	movs	r1, #1
 800a86a:	441a      	add	r2, r3
 800a86c:	4620      	mov	r0, r4
 800a86e:	9205      	str	r2, [sp, #20]
 800a870:	f000 fd78 	bl	800b364 <__i2b>
 800a874:	4607      	mov	r7, r0
 800a876:	2d00      	cmp	r5, #0
 800a878:	dd0c      	ble.n	800a894 <_dtoa_r+0x754>
 800a87a:	9b05      	ldr	r3, [sp, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	dd09      	ble.n	800a894 <_dtoa_r+0x754>
 800a880:	42ab      	cmp	r3, r5
 800a882:	9a04      	ldr	r2, [sp, #16]
 800a884:	bfa8      	it	ge
 800a886:	462b      	movge	r3, r5
 800a888:	1ad2      	subs	r2, r2, r3
 800a88a:	9204      	str	r2, [sp, #16]
 800a88c:	9a05      	ldr	r2, [sp, #20]
 800a88e:	1aed      	subs	r5, r5, r3
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	9305      	str	r3, [sp, #20]
 800a894:	9b07      	ldr	r3, [sp, #28]
 800a896:	b31b      	cbz	r3, 800a8e0 <_dtoa_r+0x7a0>
 800a898:	9b08      	ldr	r3, [sp, #32]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 80af 	beq.w	800a9fe <_dtoa_r+0x8be>
 800a8a0:	2e00      	cmp	r6, #0
 800a8a2:	dd13      	ble.n	800a8cc <_dtoa_r+0x78c>
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	4632      	mov	r2, r6
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 fe1b 	bl	800b4e4 <__pow5mult>
 800a8ae:	ee18 2a10 	vmov	r2, s16
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 fd6a 	bl	800b390 <__multiply>
 800a8bc:	ee18 1a10 	vmov	r1, s16
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fc96 	bl	800b1f4 <_Bfree>
 800a8c8:	ee08 8a10 	vmov	s16, r8
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	1b9a      	subs	r2, r3, r6
 800a8d0:	d006      	beq.n	800a8e0 <_dtoa_r+0x7a0>
 800a8d2:	ee18 1a10 	vmov	r1, s16
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f000 fe04 	bl	800b4e4 <__pow5mult>
 800a8dc:	ee08 0a10 	vmov	s16, r0
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 fd3e 	bl	800b364 <__i2b>
 800a8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	f340 8088 	ble.w	800aa02 <_dtoa_r+0x8c2>
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fdf4 	bl	800b4e4 <__pow5mult>
 800a8fc:	9b06      	ldr	r3, [sp, #24]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	4606      	mov	r6, r0
 800a902:	f340 8081 	ble.w	800aa08 <_dtoa_r+0x8c8>
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	6933      	ldr	r3, [r6, #16]
 800a90c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a910:	6918      	ldr	r0, [r3, #16]
 800a912:	f000 fcd7 	bl	800b2c4 <__hi0bits>
 800a916:	f1c0 0020 	rsb	r0, r0, #32
 800a91a:	9b05      	ldr	r3, [sp, #20]
 800a91c:	4418      	add	r0, r3
 800a91e:	f010 001f 	ands.w	r0, r0, #31
 800a922:	f000 8092 	beq.w	800aa4a <_dtoa_r+0x90a>
 800a926:	f1c0 0320 	rsb	r3, r0, #32
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	f340 808a 	ble.w	800aa44 <_dtoa_r+0x904>
 800a930:	f1c0 001c 	rsb	r0, r0, #28
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	4403      	add	r3, r0
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	9b05      	ldr	r3, [sp, #20]
 800a93c:	4403      	add	r3, r0
 800a93e:	4405      	add	r5, r0
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	dd07      	ble.n	800a958 <_dtoa_r+0x818>
 800a948:	ee18 1a10 	vmov	r1, s16
 800a94c:	461a      	mov	r2, r3
 800a94e:	4620      	mov	r0, r4
 800a950:	f000 fe22 	bl	800b598 <__lshift>
 800a954:	ee08 0a10 	vmov	s16, r0
 800a958:	9b05      	ldr	r3, [sp, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	dd05      	ble.n	800a96a <_dtoa_r+0x82a>
 800a95e:	4631      	mov	r1, r6
 800a960:	461a      	mov	r2, r3
 800a962:	4620      	mov	r0, r4
 800a964:	f000 fe18 	bl	800b598 <__lshift>
 800a968:	4606      	mov	r6, r0
 800a96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d06e      	beq.n	800aa4e <_dtoa_r+0x90e>
 800a970:	ee18 0a10 	vmov	r0, s16
 800a974:	4631      	mov	r1, r6
 800a976:	f000 fe7f 	bl	800b678 <__mcmp>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	da67      	bge.n	800aa4e <_dtoa_r+0x90e>
 800a97e:	9b00      	ldr	r3, [sp, #0]
 800a980:	3b01      	subs	r3, #1
 800a982:	ee18 1a10 	vmov	r1, s16
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	220a      	movs	r2, #10
 800a98a:	2300      	movs	r3, #0
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 fc53 	bl	800b238 <__multadd>
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	ee08 0a10 	vmov	s16, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 81b1 	beq.w	800ad00 <_dtoa_r+0xbc0>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	220a      	movs	r2, #10
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f000 fc47 	bl	800b238 <__multadd>
 800a9aa:	9b02      	ldr	r3, [sp, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	f300 808e 	bgt.w	800aad0 <_dtoa_r+0x990>
 800a9b4:	9b06      	ldr	r3, [sp, #24]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	dc51      	bgt.n	800aa5e <_dtoa_r+0x91e>
 800a9ba:	e089      	b.n	800aad0 <_dtoa_r+0x990>
 800a9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9c2:	e74b      	b.n	800a85c <_dtoa_r+0x71c>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	1e5e      	subs	r6, r3, #1
 800a9c8:	9b07      	ldr	r3, [sp, #28]
 800a9ca:	42b3      	cmp	r3, r6
 800a9cc:	bfbf      	itttt	lt
 800a9ce:	9b07      	ldrlt	r3, [sp, #28]
 800a9d0:	9607      	strlt	r6, [sp, #28]
 800a9d2:	1af2      	sublt	r2, r6, r3
 800a9d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9d6:	bfb6      	itet	lt
 800a9d8:	189b      	addlt	r3, r3, r2
 800a9da:	1b9e      	subge	r6, r3, r6
 800a9dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	bfb8      	it	lt
 800a9e2:	2600      	movlt	r6, #0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfb7      	itett	lt
 800a9e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a9ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a9f0:	1a9d      	sublt	r5, r3, r2
 800a9f2:	2300      	movlt	r3, #0
 800a9f4:	e734      	b.n	800a860 <_dtoa_r+0x720>
 800a9f6:	9e07      	ldr	r6, [sp, #28]
 800a9f8:	9d04      	ldr	r5, [sp, #16]
 800a9fa:	9f08      	ldr	r7, [sp, #32]
 800a9fc:	e73b      	b.n	800a876 <_dtoa_r+0x736>
 800a9fe:	9a07      	ldr	r2, [sp, #28]
 800aa00:	e767      	b.n	800a8d2 <_dtoa_r+0x792>
 800aa02:	9b06      	ldr	r3, [sp, #24]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	dc18      	bgt.n	800aa3a <_dtoa_r+0x8fa>
 800aa08:	f1ba 0f00 	cmp.w	sl, #0
 800aa0c:	d115      	bne.n	800aa3a <_dtoa_r+0x8fa>
 800aa0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa12:	b993      	cbnz	r3, 800aa3a <_dtoa_r+0x8fa>
 800aa14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa18:	0d1b      	lsrs	r3, r3, #20
 800aa1a:	051b      	lsls	r3, r3, #20
 800aa1c:	b183      	cbz	r3, 800aa40 <_dtoa_r+0x900>
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	3301      	adds	r3, #1
 800aa22:	9304      	str	r3, [sp, #16]
 800aa24:	9b05      	ldr	r3, [sp, #20]
 800aa26:	3301      	adds	r3, #1
 800aa28:	9305      	str	r3, [sp, #20]
 800aa2a:	f04f 0801 	mov.w	r8, #1
 800aa2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f47f af6a 	bne.w	800a90a <_dtoa_r+0x7ca>
 800aa36:	2001      	movs	r0, #1
 800aa38:	e76f      	b.n	800a91a <_dtoa_r+0x7da>
 800aa3a:	f04f 0800 	mov.w	r8, #0
 800aa3e:	e7f6      	b.n	800aa2e <_dtoa_r+0x8ee>
 800aa40:	4698      	mov	r8, r3
 800aa42:	e7f4      	b.n	800aa2e <_dtoa_r+0x8ee>
 800aa44:	f43f af7d 	beq.w	800a942 <_dtoa_r+0x802>
 800aa48:	4618      	mov	r0, r3
 800aa4a:	301c      	adds	r0, #28
 800aa4c:	e772      	b.n	800a934 <_dtoa_r+0x7f4>
 800aa4e:	9b03      	ldr	r3, [sp, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dc37      	bgt.n	800aac4 <_dtoa_r+0x984>
 800aa54:	9b06      	ldr	r3, [sp, #24]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	dd34      	ble.n	800aac4 <_dtoa_r+0x984>
 800aa5a:	9b03      	ldr	r3, [sp, #12]
 800aa5c:	9302      	str	r3, [sp, #8]
 800aa5e:	9b02      	ldr	r3, [sp, #8]
 800aa60:	b96b      	cbnz	r3, 800aa7e <_dtoa_r+0x93e>
 800aa62:	4631      	mov	r1, r6
 800aa64:	2205      	movs	r2, #5
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 fbe6 	bl	800b238 <__multadd>
 800aa6c:	4601      	mov	r1, r0
 800aa6e:	4606      	mov	r6, r0
 800aa70:	ee18 0a10 	vmov	r0, s16
 800aa74:	f000 fe00 	bl	800b678 <__mcmp>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	f73f adbb 	bgt.w	800a5f4 <_dtoa_r+0x4b4>
 800aa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa80:	9d01      	ldr	r5, [sp, #4]
 800aa82:	43db      	mvns	r3, r3
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	f04f 0800 	mov.w	r8, #0
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 fbb1 	bl	800b1f4 <_Bfree>
 800aa92:	2f00      	cmp	r7, #0
 800aa94:	f43f aea4 	beq.w	800a7e0 <_dtoa_r+0x6a0>
 800aa98:	f1b8 0f00 	cmp.w	r8, #0
 800aa9c:	d005      	beq.n	800aaaa <_dtoa_r+0x96a>
 800aa9e:	45b8      	cmp	r8, r7
 800aaa0:	d003      	beq.n	800aaaa <_dtoa_r+0x96a>
 800aaa2:	4641      	mov	r1, r8
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fba5 	bl	800b1f4 <_Bfree>
 800aaaa:	4639      	mov	r1, r7
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 fba1 	bl	800b1f4 <_Bfree>
 800aab2:	e695      	b.n	800a7e0 <_dtoa_r+0x6a0>
 800aab4:	2600      	movs	r6, #0
 800aab6:	4637      	mov	r7, r6
 800aab8:	e7e1      	b.n	800aa7e <_dtoa_r+0x93e>
 800aaba:	9700      	str	r7, [sp, #0]
 800aabc:	4637      	mov	r7, r6
 800aabe:	e599      	b.n	800a5f4 <_dtoa_r+0x4b4>
 800aac0:	40240000 	.word	0x40240000
 800aac4:	9b08      	ldr	r3, [sp, #32]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 80ca 	beq.w	800ac60 <_dtoa_r+0xb20>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	9302      	str	r3, [sp, #8]
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	dd05      	ble.n	800aae0 <_dtoa_r+0x9a0>
 800aad4:	4639      	mov	r1, r7
 800aad6:	462a      	mov	r2, r5
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fd5d 	bl	800b598 <__lshift>
 800aade:	4607      	mov	r7, r0
 800aae0:	f1b8 0f00 	cmp.w	r8, #0
 800aae4:	d05b      	beq.n	800ab9e <_dtoa_r+0xa5e>
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fb43 	bl	800b174 <_Balloc>
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b928      	cbnz	r0, 800aafe <_dtoa_r+0x9be>
 800aaf2:	4b87      	ldr	r3, [pc, #540]	; (800ad10 <_dtoa_r+0xbd0>)
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aafa:	f7ff bb3b 	b.w	800a174 <_dtoa_r+0x34>
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	3202      	adds	r2, #2
 800ab02:	0092      	lsls	r2, r2, #2
 800ab04:	f107 010c 	add.w	r1, r7, #12
 800ab08:	300c      	adds	r0, #12
 800ab0a:	f7fe fbf1 	bl	80092f0 <memcpy>
 800ab0e:	2201      	movs	r2, #1
 800ab10:	4629      	mov	r1, r5
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 fd40 	bl	800b598 <__lshift>
 800ab18:	9b01      	ldr	r3, [sp, #4]
 800ab1a:	f103 0901 	add.w	r9, r3, #1
 800ab1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ab22:	4413      	add	r3, r2
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	f00a 0301 	and.w	r3, sl, #1
 800ab2a:	46b8      	mov	r8, r7
 800ab2c:	9304      	str	r3, [sp, #16]
 800ab2e:	4607      	mov	r7, r0
 800ab30:	4631      	mov	r1, r6
 800ab32:	ee18 0a10 	vmov	r0, s16
 800ab36:	f7ff fa77 	bl	800a028 <quorem>
 800ab3a:	4641      	mov	r1, r8
 800ab3c:	9002      	str	r0, [sp, #8]
 800ab3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab42:	ee18 0a10 	vmov	r0, s16
 800ab46:	f000 fd97 	bl	800b678 <__mcmp>
 800ab4a:	463a      	mov	r2, r7
 800ab4c:	9003      	str	r0, [sp, #12]
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 fdad 	bl	800b6b0 <__mdiff>
 800ab56:	68c2      	ldr	r2, [r0, #12]
 800ab58:	f109 3bff 	add.w	fp, r9, #4294967295
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	bb02      	cbnz	r2, 800aba2 <_dtoa_r+0xa62>
 800ab60:	4601      	mov	r1, r0
 800ab62:	ee18 0a10 	vmov	r0, s16
 800ab66:	f000 fd87 	bl	800b678 <__mcmp>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4620      	mov	r0, r4
 800ab70:	9207      	str	r2, [sp, #28]
 800ab72:	f000 fb3f 	bl	800b1f4 <_Bfree>
 800ab76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ab7a:	ea43 0102 	orr.w	r1, r3, r2
 800ab7e:	9b04      	ldr	r3, [sp, #16]
 800ab80:	430b      	orrs	r3, r1
 800ab82:	464d      	mov	r5, r9
 800ab84:	d10f      	bne.n	800aba6 <_dtoa_r+0xa66>
 800ab86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab8a:	d02a      	beq.n	800abe2 <_dtoa_r+0xaa2>
 800ab8c:	9b03      	ldr	r3, [sp, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	dd02      	ble.n	800ab98 <_dtoa_r+0xa58>
 800ab92:	9b02      	ldr	r3, [sp, #8]
 800ab94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ab98:	f88b a000 	strb.w	sl, [fp]
 800ab9c:	e775      	b.n	800aa8a <_dtoa_r+0x94a>
 800ab9e:	4638      	mov	r0, r7
 800aba0:	e7ba      	b.n	800ab18 <_dtoa_r+0x9d8>
 800aba2:	2201      	movs	r2, #1
 800aba4:	e7e2      	b.n	800ab6c <_dtoa_r+0xa2c>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	db04      	blt.n	800abb6 <_dtoa_r+0xa76>
 800abac:	9906      	ldr	r1, [sp, #24]
 800abae:	430b      	orrs	r3, r1
 800abb0:	9904      	ldr	r1, [sp, #16]
 800abb2:	430b      	orrs	r3, r1
 800abb4:	d122      	bne.n	800abfc <_dtoa_r+0xabc>
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	ddee      	ble.n	800ab98 <_dtoa_r+0xa58>
 800abba:	ee18 1a10 	vmov	r1, s16
 800abbe:	2201      	movs	r2, #1
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fce9 	bl	800b598 <__lshift>
 800abc6:	4631      	mov	r1, r6
 800abc8:	ee08 0a10 	vmov	s16, r0
 800abcc:	f000 fd54 	bl	800b678 <__mcmp>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	dc03      	bgt.n	800abdc <_dtoa_r+0xa9c>
 800abd4:	d1e0      	bne.n	800ab98 <_dtoa_r+0xa58>
 800abd6:	f01a 0f01 	tst.w	sl, #1
 800abda:	d0dd      	beq.n	800ab98 <_dtoa_r+0xa58>
 800abdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abe0:	d1d7      	bne.n	800ab92 <_dtoa_r+0xa52>
 800abe2:	2339      	movs	r3, #57	; 0x39
 800abe4:	f88b 3000 	strb.w	r3, [fp]
 800abe8:	462b      	mov	r3, r5
 800abea:	461d      	mov	r5, r3
 800abec:	3b01      	subs	r3, #1
 800abee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abf2:	2a39      	cmp	r2, #57	; 0x39
 800abf4:	d071      	beq.n	800acda <_dtoa_r+0xb9a>
 800abf6:	3201      	adds	r2, #1
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	e746      	b.n	800aa8a <_dtoa_r+0x94a>
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	dd07      	ble.n	800ac10 <_dtoa_r+0xad0>
 800ac00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac04:	d0ed      	beq.n	800abe2 <_dtoa_r+0xaa2>
 800ac06:	f10a 0301 	add.w	r3, sl, #1
 800ac0a:	f88b 3000 	strb.w	r3, [fp]
 800ac0e:	e73c      	b.n	800aa8a <_dtoa_r+0x94a>
 800ac10:	9b05      	ldr	r3, [sp, #20]
 800ac12:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ac16:	4599      	cmp	r9, r3
 800ac18:	d047      	beq.n	800acaa <_dtoa_r+0xb6a>
 800ac1a:	ee18 1a10 	vmov	r1, s16
 800ac1e:	2300      	movs	r3, #0
 800ac20:	220a      	movs	r2, #10
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 fb08 	bl	800b238 <__multadd>
 800ac28:	45b8      	cmp	r8, r7
 800ac2a:	ee08 0a10 	vmov	s16, r0
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	f04f 020a 	mov.w	r2, #10
 800ac36:	4641      	mov	r1, r8
 800ac38:	4620      	mov	r0, r4
 800ac3a:	d106      	bne.n	800ac4a <_dtoa_r+0xb0a>
 800ac3c:	f000 fafc 	bl	800b238 <__multadd>
 800ac40:	4680      	mov	r8, r0
 800ac42:	4607      	mov	r7, r0
 800ac44:	f109 0901 	add.w	r9, r9, #1
 800ac48:	e772      	b.n	800ab30 <_dtoa_r+0x9f0>
 800ac4a:	f000 faf5 	bl	800b238 <__multadd>
 800ac4e:	4639      	mov	r1, r7
 800ac50:	4680      	mov	r8, r0
 800ac52:	2300      	movs	r3, #0
 800ac54:	220a      	movs	r2, #10
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 faee 	bl	800b238 <__multadd>
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	e7f1      	b.n	800ac44 <_dtoa_r+0xb04>
 800ac60:	9b03      	ldr	r3, [sp, #12]
 800ac62:	9302      	str	r3, [sp, #8]
 800ac64:	9d01      	ldr	r5, [sp, #4]
 800ac66:	ee18 0a10 	vmov	r0, s16
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	f7ff f9dc 	bl	800a028 <quorem>
 800ac70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac74:	9b01      	ldr	r3, [sp, #4]
 800ac76:	f805 ab01 	strb.w	sl, [r5], #1
 800ac7a:	1aea      	subs	r2, r5, r3
 800ac7c:	9b02      	ldr	r3, [sp, #8]
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	dd09      	ble.n	800ac96 <_dtoa_r+0xb56>
 800ac82:	ee18 1a10 	vmov	r1, s16
 800ac86:	2300      	movs	r3, #0
 800ac88:	220a      	movs	r2, #10
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 fad4 	bl	800b238 <__multadd>
 800ac90:	ee08 0a10 	vmov	s16, r0
 800ac94:	e7e7      	b.n	800ac66 <_dtoa_r+0xb26>
 800ac96:	9b02      	ldr	r3, [sp, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	bfc8      	it	gt
 800ac9c:	461d      	movgt	r5, r3
 800ac9e:	9b01      	ldr	r3, [sp, #4]
 800aca0:	bfd8      	it	le
 800aca2:	2501      	movle	r5, #1
 800aca4:	441d      	add	r5, r3
 800aca6:	f04f 0800 	mov.w	r8, #0
 800acaa:	ee18 1a10 	vmov	r1, s16
 800acae:	2201      	movs	r2, #1
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 fc71 	bl	800b598 <__lshift>
 800acb6:	4631      	mov	r1, r6
 800acb8:	ee08 0a10 	vmov	s16, r0
 800acbc:	f000 fcdc 	bl	800b678 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	dc91      	bgt.n	800abe8 <_dtoa_r+0xaa8>
 800acc4:	d102      	bne.n	800accc <_dtoa_r+0xb8c>
 800acc6:	f01a 0f01 	tst.w	sl, #1
 800acca:	d18d      	bne.n	800abe8 <_dtoa_r+0xaa8>
 800accc:	462b      	mov	r3, r5
 800acce:	461d      	mov	r5, r3
 800acd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acd4:	2a30      	cmp	r2, #48	; 0x30
 800acd6:	d0fa      	beq.n	800acce <_dtoa_r+0xb8e>
 800acd8:	e6d7      	b.n	800aa8a <_dtoa_r+0x94a>
 800acda:	9a01      	ldr	r2, [sp, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d184      	bne.n	800abea <_dtoa_r+0xaaa>
 800ace0:	9b00      	ldr	r3, [sp, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	2331      	movs	r3, #49	; 0x31
 800ace8:	7013      	strb	r3, [r2, #0]
 800acea:	e6ce      	b.n	800aa8a <_dtoa_r+0x94a>
 800acec:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <_dtoa_r+0xbd4>)
 800acee:	f7ff ba95 	b.w	800a21c <_dtoa_r+0xdc>
 800acf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f47f aa6e 	bne.w	800a1d6 <_dtoa_r+0x96>
 800acfa:	4b07      	ldr	r3, [pc, #28]	; (800ad18 <_dtoa_r+0xbd8>)
 800acfc:	f7ff ba8e 	b.w	800a21c <_dtoa_r+0xdc>
 800ad00:	9b02      	ldr	r3, [sp, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	dcae      	bgt.n	800ac64 <_dtoa_r+0xb24>
 800ad06:	9b06      	ldr	r3, [sp, #24]
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	f73f aea8 	bgt.w	800aa5e <_dtoa_r+0x91e>
 800ad0e:	e7a9      	b.n	800ac64 <_dtoa_r+0xb24>
 800ad10:	0800c2ab 	.word	0x0800c2ab
 800ad14:	0800c208 	.word	0x0800c208
 800ad18:	0800c22c 	.word	0x0800c22c

0800ad1c <__sflush_r>:
 800ad1c:	898a      	ldrh	r2, [r1, #12]
 800ad1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad22:	4605      	mov	r5, r0
 800ad24:	0710      	lsls	r0, r2, #28
 800ad26:	460c      	mov	r4, r1
 800ad28:	d458      	bmi.n	800addc <__sflush_r+0xc0>
 800ad2a:	684b      	ldr	r3, [r1, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dc05      	bgt.n	800ad3c <__sflush_r+0x20>
 800ad30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dc02      	bgt.n	800ad3c <__sflush_r+0x20>
 800ad36:	2000      	movs	r0, #0
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	d0f9      	beq.n	800ad36 <__sflush_r+0x1a>
 800ad42:	2300      	movs	r3, #0
 800ad44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad48:	682f      	ldr	r7, [r5, #0]
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	d032      	beq.n	800adb4 <__sflush_r+0x98>
 800ad4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	075a      	lsls	r2, r3, #29
 800ad54:	d505      	bpl.n	800ad62 <__sflush_r+0x46>
 800ad56:	6863      	ldr	r3, [r4, #4]
 800ad58:	1ac0      	subs	r0, r0, r3
 800ad5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad5c:	b10b      	cbz	r3, 800ad62 <__sflush_r+0x46>
 800ad5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad60:	1ac0      	subs	r0, r0, r3
 800ad62:	2300      	movs	r3, #0
 800ad64:	4602      	mov	r2, r0
 800ad66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad68:	6a21      	ldr	r1, [r4, #32]
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	47b0      	blx	r6
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	d106      	bne.n	800ad82 <__sflush_r+0x66>
 800ad74:	6829      	ldr	r1, [r5, #0]
 800ad76:	291d      	cmp	r1, #29
 800ad78:	d82c      	bhi.n	800add4 <__sflush_r+0xb8>
 800ad7a:	4a2a      	ldr	r2, [pc, #168]	; (800ae24 <__sflush_r+0x108>)
 800ad7c:	40ca      	lsrs	r2, r1
 800ad7e:	07d6      	lsls	r6, r2, #31
 800ad80:	d528      	bpl.n	800add4 <__sflush_r+0xb8>
 800ad82:	2200      	movs	r2, #0
 800ad84:	6062      	str	r2, [r4, #4]
 800ad86:	04d9      	lsls	r1, r3, #19
 800ad88:	6922      	ldr	r2, [r4, #16]
 800ad8a:	6022      	str	r2, [r4, #0]
 800ad8c:	d504      	bpl.n	800ad98 <__sflush_r+0x7c>
 800ad8e:	1c42      	adds	r2, r0, #1
 800ad90:	d101      	bne.n	800ad96 <__sflush_r+0x7a>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	b903      	cbnz	r3, 800ad98 <__sflush_r+0x7c>
 800ad96:	6560      	str	r0, [r4, #84]	; 0x54
 800ad98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad9a:	602f      	str	r7, [r5, #0]
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	d0ca      	beq.n	800ad36 <__sflush_r+0x1a>
 800ada0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ada4:	4299      	cmp	r1, r3
 800ada6:	d002      	beq.n	800adae <__sflush_r+0x92>
 800ada8:	4628      	mov	r0, r5
 800adaa:	f000 fd7d 	bl	800b8a8 <_free_r>
 800adae:	2000      	movs	r0, #0
 800adb0:	6360      	str	r0, [r4, #52]	; 0x34
 800adb2:	e7c1      	b.n	800ad38 <__sflush_r+0x1c>
 800adb4:	6a21      	ldr	r1, [r4, #32]
 800adb6:	2301      	movs	r3, #1
 800adb8:	4628      	mov	r0, r5
 800adba:	47b0      	blx	r6
 800adbc:	1c41      	adds	r1, r0, #1
 800adbe:	d1c7      	bne.n	800ad50 <__sflush_r+0x34>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0c4      	beq.n	800ad50 <__sflush_r+0x34>
 800adc6:	2b1d      	cmp	r3, #29
 800adc8:	d001      	beq.n	800adce <__sflush_r+0xb2>
 800adca:	2b16      	cmp	r3, #22
 800adcc:	d101      	bne.n	800add2 <__sflush_r+0xb6>
 800adce:	602f      	str	r7, [r5, #0]
 800add0:	e7b1      	b.n	800ad36 <__sflush_r+0x1a>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	e7ad      	b.n	800ad38 <__sflush_r+0x1c>
 800addc:	690f      	ldr	r7, [r1, #16]
 800adde:	2f00      	cmp	r7, #0
 800ade0:	d0a9      	beq.n	800ad36 <__sflush_r+0x1a>
 800ade2:	0793      	lsls	r3, r2, #30
 800ade4:	680e      	ldr	r6, [r1, #0]
 800ade6:	bf08      	it	eq
 800ade8:	694b      	ldreq	r3, [r1, #20]
 800adea:	600f      	str	r7, [r1, #0]
 800adec:	bf18      	it	ne
 800adee:	2300      	movne	r3, #0
 800adf0:	eba6 0807 	sub.w	r8, r6, r7
 800adf4:	608b      	str	r3, [r1, #8]
 800adf6:	f1b8 0f00 	cmp.w	r8, #0
 800adfa:	dd9c      	ble.n	800ad36 <__sflush_r+0x1a>
 800adfc:	6a21      	ldr	r1, [r4, #32]
 800adfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae00:	4643      	mov	r3, r8
 800ae02:	463a      	mov	r2, r7
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b0      	blx	r6
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	dc06      	bgt.n	800ae1a <__sflush_r+0xfe>
 800ae0c:	89a3      	ldrh	r3, [r4, #12]
 800ae0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295
 800ae18:	e78e      	b.n	800ad38 <__sflush_r+0x1c>
 800ae1a:	4407      	add	r7, r0
 800ae1c:	eba8 0800 	sub.w	r8, r8, r0
 800ae20:	e7e9      	b.n	800adf6 <__sflush_r+0xda>
 800ae22:	bf00      	nop
 800ae24:	20400001 	.word	0x20400001

0800ae28 <_fflush_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	690b      	ldr	r3, [r1, #16]
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	b913      	cbnz	r3, 800ae38 <_fflush_r+0x10>
 800ae32:	2500      	movs	r5, #0
 800ae34:	4628      	mov	r0, r5
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	b118      	cbz	r0, 800ae42 <_fflush_r+0x1a>
 800ae3a:	6983      	ldr	r3, [r0, #24]
 800ae3c:	b90b      	cbnz	r3, 800ae42 <_fflush_r+0x1a>
 800ae3e:	f000 f887 	bl	800af50 <__sinit>
 800ae42:	4b14      	ldr	r3, [pc, #80]	; (800ae94 <_fflush_r+0x6c>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	d11b      	bne.n	800ae80 <_fflush_r+0x58>
 800ae48:	686c      	ldr	r4, [r5, #4]
 800ae4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0ef      	beq.n	800ae32 <_fflush_r+0xa>
 800ae52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae54:	07d0      	lsls	r0, r2, #31
 800ae56:	d404      	bmi.n	800ae62 <_fflush_r+0x3a>
 800ae58:	0599      	lsls	r1, r3, #22
 800ae5a:	d402      	bmi.n	800ae62 <_fflush_r+0x3a>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f000 f91a 	bl	800b096 <__retarget_lock_acquire_recursive>
 800ae62:	4628      	mov	r0, r5
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7ff ff59 	bl	800ad1c <__sflush_r>
 800ae6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae6c:	07da      	lsls	r2, r3, #31
 800ae6e:	4605      	mov	r5, r0
 800ae70:	d4e0      	bmi.n	800ae34 <_fflush_r+0xc>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	059b      	lsls	r3, r3, #22
 800ae76:	d4dd      	bmi.n	800ae34 <_fflush_r+0xc>
 800ae78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7a:	f000 f90d 	bl	800b098 <__retarget_lock_release_recursive>
 800ae7e:	e7d9      	b.n	800ae34 <_fflush_r+0xc>
 800ae80:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <_fflush_r+0x70>)
 800ae82:	429c      	cmp	r4, r3
 800ae84:	d101      	bne.n	800ae8a <_fflush_r+0x62>
 800ae86:	68ac      	ldr	r4, [r5, #8]
 800ae88:	e7df      	b.n	800ae4a <_fflush_r+0x22>
 800ae8a:	4b04      	ldr	r3, [pc, #16]	; (800ae9c <_fflush_r+0x74>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	bf08      	it	eq
 800ae90:	68ec      	ldreq	r4, [r5, #12]
 800ae92:	e7da      	b.n	800ae4a <_fflush_r+0x22>
 800ae94:	0800c2dc 	.word	0x0800c2dc
 800ae98:	0800c2fc 	.word	0x0800c2fc
 800ae9c:	0800c2bc 	.word	0x0800c2bc

0800aea0 <std>:
 800aea0:	2300      	movs	r3, #0
 800aea2:	b510      	push	{r4, lr}
 800aea4:	4604      	mov	r4, r0
 800aea6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeae:	6083      	str	r3, [r0, #8]
 800aeb0:	8181      	strh	r1, [r0, #12]
 800aeb2:	6643      	str	r3, [r0, #100]	; 0x64
 800aeb4:	81c2      	strh	r2, [r0, #14]
 800aeb6:	6183      	str	r3, [r0, #24]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	2208      	movs	r2, #8
 800aebc:	305c      	adds	r0, #92	; 0x5c
 800aebe:	f7fe fa25 	bl	800930c <memset>
 800aec2:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <std+0x38>)
 800aec4:	6263      	str	r3, [r4, #36]	; 0x24
 800aec6:	4b05      	ldr	r3, [pc, #20]	; (800aedc <std+0x3c>)
 800aec8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeca:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <std+0x40>)
 800aecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aece:	4b05      	ldr	r3, [pc, #20]	; (800aee4 <std+0x44>)
 800aed0:	6224      	str	r4, [r4, #32]
 800aed2:	6323      	str	r3, [r4, #48]	; 0x30
 800aed4:	bd10      	pop	{r4, pc}
 800aed6:	bf00      	nop
 800aed8:	0800bd3d 	.word	0x0800bd3d
 800aedc:	0800bd5f 	.word	0x0800bd5f
 800aee0:	0800bd97 	.word	0x0800bd97
 800aee4:	0800bdbb 	.word	0x0800bdbb

0800aee8 <_cleanup_r>:
 800aee8:	4901      	ldr	r1, [pc, #4]	; (800aef0 <_cleanup_r+0x8>)
 800aeea:	f000 b8af 	b.w	800b04c <_fwalk_reent>
 800aeee:	bf00      	nop
 800aef0:	0800ae29 	.word	0x0800ae29

0800aef4 <__sfmoreglue>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	2268      	movs	r2, #104	; 0x68
 800aef8:	1e4d      	subs	r5, r1, #1
 800aefa:	4355      	muls	r5, r2
 800aefc:	460e      	mov	r6, r1
 800aefe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af02:	f000 fd3d 	bl	800b980 <_malloc_r>
 800af06:	4604      	mov	r4, r0
 800af08:	b140      	cbz	r0, 800af1c <__sfmoreglue+0x28>
 800af0a:	2100      	movs	r1, #0
 800af0c:	e9c0 1600 	strd	r1, r6, [r0]
 800af10:	300c      	adds	r0, #12
 800af12:	60a0      	str	r0, [r4, #8]
 800af14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af18:	f7fe f9f8 	bl	800930c <memset>
 800af1c:	4620      	mov	r0, r4
 800af1e:	bd70      	pop	{r4, r5, r6, pc}

0800af20 <__sfp_lock_acquire>:
 800af20:	4801      	ldr	r0, [pc, #4]	; (800af28 <__sfp_lock_acquire+0x8>)
 800af22:	f000 b8b8 	b.w	800b096 <__retarget_lock_acquire_recursive>
 800af26:	bf00      	nop
 800af28:	20000819 	.word	0x20000819

0800af2c <__sfp_lock_release>:
 800af2c:	4801      	ldr	r0, [pc, #4]	; (800af34 <__sfp_lock_release+0x8>)
 800af2e:	f000 b8b3 	b.w	800b098 <__retarget_lock_release_recursive>
 800af32:	bf00      	nop
 800af34:	20000819 	.word	0x20000819

0800af38 <__sinit_lock_acquire>:
 800af38:	4801      	ldr	r0, [pc, #4]	; (800af40 <__sinit_lock_acquire+0x8>)
 800af3a:	f000 b8ac 	b.w	800b096 <__retarget_lock_acquire_recursive>
 800af3e:	bf00      	nop
 800af40:	2000081a 	.word	0x2000081a

0800af44 <__sinit_lock_release>:
 800af44:	4801      	ldr	r0, [pc, #4]	; (800af4c <__sinit_lock_release+0x8>)
 800af46:	f000 b8a7 	b.w	800b098 <__retarget_lock_release_recursive>
 800af4a:	bf00      	nop
 800af4c:	2000081a 	.word	0x2000081a

0800af50 <__sinit>:
 800af50:	b510      	push	{r4, lr}
 800af52:	4604      	mov	r4, r0
 800af54:	f7ff fff0 	bl	800af38 <__sinit_lock_acquire>
 800af58:	69a3      	ldr	r3, [r4, #24]
 800af5a:	b11b      	cbz	r3, 800af64 <__sinit+0x14>
 800af5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af60:	f7ff bff0 	b.w	800af44 <__sinit_lock_release>
 800af64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af68:	6523      	str	r3, [r4, #80]	; 0x50
 800af6a:	4b13      	ldr	r3, [pc, #76]	; (800afb8 <__sinit+0x68>)
 800af6c:	4a13      	ldr	r2, [pc, #76]	; (800afbc <__sinit+0x6c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	62a2      	str	r2, [r4, #40]	; 0x28
 800af72:	42a3      	cmp	r3, r4
 800af74:	bf04      	itt	eq
 800af76:	2301      	moveq	r3, #1
 800af78:	61a3      	streq	r3, [r4, #24]
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 f820 	bl	800afc0 <__sfp>
 800af80:	6060      	str	r0, [r4, #4]
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f81c 	bl	800afc0 <__sfp>
 800af88:	60a0      	str	r0, [r4, #8]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 f818 	bl	800afc0 <__sfp>
 800af90:	2200      	movs	r2, #0
 800af92:	60e0      	str	r0, [r4, #12]
 800af94:	2104      	movs	r1, #4
 800af96:	6860      	ldr	r0, [r4, #4]
 800af98:	f7ff ff82 	bl	800aea0 <std>
 800af9c:	68a0      	ldr	r0, [r4, #8]
 800af9e:	2201      	movs	r2, #1
 800afa0:	2109      	movs	r1, #9
 800afa2:	f7ff ff7d 	bl	800aea0 <std>
 800afa6:	68e0      	ldr	r0, [r4, #12]
 800afa8:	2202      	movs	r2, #2
 800afaa:	2112      	movs	r1, #18
 800afac:	f7ff ff78 	bl	800aea0 <std>
 800afb0:	2301      	movs	r3, #1
 800afb2:	61a3      	str	r3, [r4, #24]
 800afb4:	e7d2      	b.n	800af5c <__sinit+0xc>
 800afb6:	bf00      	nop
 800afb8:	0800c1f4 	.word	0x0800c1f4
 800afbc:	0800aee9 	.word	0x0800aee9

0800afc0 <__sfp>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	4607      	mov	r7, r0
 800afc4:	f7ff ffac 	bl	800af20 <__sfp_lock_acquire>
 800afc8:	4b1e      	ldr	r3, [pc, #120]	; (800b044 <__sfp+0x84>)
 800afca:	681e      	ldr	r6, [r3, #0]
 800afcc:	69b3      	ldr	r3, [r6, #24]
 800afce:	b913      	cbnz	r3, 800afd6 <__sfp+0x16>
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7ff ffbd 	bl	800af50 <__sinit>
 800afd6:	3648      	adds	r6, #72	; 0x48
 800afd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afdc:	3b01      	subs	r3, #1
 800afde:	d503      	bpl.n	800afe8 <__sfp+0x28>
 800afe0:	6833      	ldr	r3, [r6, #0]
 800afe2:	b30b      	cbz	r3, 800b028 <__sfp+0x68>
 800afe4:	6836      	ldr	r6, [r6, #0]
 800afe6:	e7f7      	b.n	800afd8 <__sfp+0x18>
 800afe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afec:	b9d5      	cbnz	r5, 800b024 <__sfp+0x64>
 800afee:	4b16      	ldr	r3, [pc, #88]	; (800b048 <__sfp+0x88>)
 800aff0:	60e3      	str	r3, [r4, #12]
 800aff2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aff6:	6665      	str	r5, [r4, #100]	; 0x64
 800aff8:	f000 f84c 	bl	800b094 <__retarget_lock_init_recursive>
 800affc:	f7ff ff96 	bl	800af2c <__sfp_lock_release>
 800b000:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b004:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b008:	6025      	str	r5, [r4, #0]
 800b00a:	61a5      	str	r5, [r4, #24]
 800b00c:	2208      	movs	r2, #8
 800b00e:	4629      	mov	r1, r5
 800b010:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b014:	f7fe f97a 	bl	800930c <memset>
 800b018:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b01c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b020:	4620      	mov	r0, r4
 800b022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b024:	3468      	adds	r4, #104	; 0x68
 800b026:	e7d9      	b.n	800afdc <__sfp+0x1c>
 800b028:	2104      	movs	r1, #4
 800b02a:	4638      	mov	r0, r7
 800b02c:	f7ff ff62 	bl	800aef4 <__sfmoreglue>
 800b030:	4604      	mov	r4, r0
 800b032:	6030      	str	r0, [r6, #0]
 800b034:	2800      	cmp	r0, #0
 800b036:	d1d5      	bne.n	800afe4 <__sfp+0x24>
 800b038:	f7ff ff78 	bl	800af2c <__sfp_lock_release>
 800b03c:	230c      	movs	r3, #12
 800b03e:	603b      	str	r3, [r7, #0]
 800b040:	e7ee      	b.n	800b020 <__sfp+0x60>
 800b042:	bf00      	nop
 800b044:	0800c1f4 	.word	0x0800c1f4
 800b048:	ffff0001 	.word	0xffff0001

0800b04c <_fwalk_reent>:
 800b04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b050:	4606      	mov	r6, r0
 800b052:	4688      	mov	r8, r1
 800b054:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b058:	2700      	movs	r7, #0
 800b05a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b05e:	f1b9 0901 	subs.w	r9, r9, #1
 800b062:	d505      	bpl.n	800b070 <_fwalk_reent+0x24>
 800b064:	6824      	ldr	r4, [r4, #0]
 800b066:	2c00      	cmp	r4, #0
 800b068:	d1f7      	bne.n	800b05a <_fwalk_reent+0xe>
 800b06a:	4638      	mov	r0, r7
 800b06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b070:	89ab      	ldrh	r3, [r5, #12]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d907      	bls.n	800b086 <_fwalk_reent+0x3a>
 800b076:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b07a:	3301      	adds	r3, #1
 800b07c:	d003      	beq.n	800b086 <_fwalk_reent+0x3a>
 800b07e:	4629      	mov	r1, r5
 800b080:	4630      	mov	r0, r6
 800b082:	47c0      	blx	r8
 800b084:	4307      	orrs	r7, r0
 800b086:	3568      	adds	r5, #104	; 0x68
 800b088:	e7e9      	b.n	800b05e <_fwalk_reent+0x12>
	...

0800b08c <_localeconv_r>:
 800b08c:	4800      	ldr	r0, [pc, #0]	; (800b090 <_localeconv_r+0x4>)
 800b08e:	4770      	bx	lr
 800b090:	20000160 	.word	0x20000160

0800b094 <__retarget_lock_init_recursive>:
 800b094:	4770      	bx	lr

0800b096 <__retarget_lock_acquire_recursive>:
 800b096:	4770      	bx	lr

0800b098 <__retarget_lock_release_recursive>:
 800b098:	4770      	bx	lr

0800b09a <__swhatbuf_r>:
 800b09a:	b570      	push	{r4, r5, r6, lr}
 800b09c:	460e      	mov	r6, r1
 800b09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a2:	2900      	cmp	r1, #0
 800b0a4:	b096      	sub	sp, #88	; 0x58
 800b0a6:	4614      	mov	r4, r2
 800b0a8:	461d      	mov	r5, r3
 800b0aa:	da08      	bge.n	800b0be <__swhatbuf_r+0x24>
 800b0ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	602a      	str	r2, [r5, #0]
 800b0b4:	061a      	lsls	r2, r3, #24
 800b0b6:	d410      	bmi.n	800b0da <__swhatbuf_r+0x40>
 800b0b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0bc:	e00e      	b.n	800b0dc <__swhatbuf_r+0x42>
 800b0be:	466a      	mov	r2, sp
 800b0c0:	f000 fed2 	bl	800be68 <_fstat_r>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	dbf1      	blt.n	800b0ac <__swhatbuf_r+0x12>
 800b0c8:	9a01      	ldr	r2, [sp, #4]
 800b0ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0d2:	425a      	negs	r2, r3
 800b0d4:	415a      	adcs	r2, r3
 800b0d6:	602a      	str	r2, [r5, #0]
 800b0d8:	e7ee      	b.n	800b0b8 <__swhatbuf_r+0x1e>
 800b0da:	2340      	movs	r3, #64	; 0x40
 800b0dc:	2000      	movs	r0, #0
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	b016      	add	sp, #88	; 0x58
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}

0800b0e4 <__smakebuf_r>:
 800b0e4:	898b      	ldrh	r3, [r1, #12]
 800b0e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0e8:	079d      	lsls	r5, r3, #30
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	d507      	bpl.n	800b100 <__smakebuf_r+0x1c>
 800b0f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	6163      	str	r3, [r4, #20]
 800b0fc:	b002      	add	sp, #8
 800b0fe:	bd70      	pop	{r4, r5, r6, pc}
 800b100:	ab01      	add	r3, sp, #4
 800b102:	466a      	mov	r2, sp
 800b104:	f7ff ffc9 	bl	800b09a <__swhatbuf_r>
 800b108:	9900      	ldr	r1, [sp, #0]
 800b10a:	4605      	mov	r5, r0
 800b10c:	4630      	mov	r0, r6
 800b10e:	f000 fc37 	bl	800b980 <_malloc_r>
 800b112:	b948      	cbnz	r0, 800b128 <__smakebuf_r+0x44>
 800b114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b118:	059a      	lsls	r2, r3, #22
 800b11a:	d4ef      	bmi.n	800b0fc <__smakebuf_r+0x18>
 800b11c:	f023 0303 	bic.w	r3, r3, #3
 800b120:	f043 0302 	orr.w	r3, r3, #2
 800b124:	81a3      	strh	r3, [r4, #12]
 800b126:	e7e3      	b.n	800b0f0 <__smakebuf_r+0xc>
 800b128:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <__smakebuf_r+0x7c>)
 800b12a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	6020      	str	r0, [r4, #0]
 800b130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b134:	81a3      	strh	r3, [r4, #12]
 800b136:	9b00      	ldr	r3, [sp, #0]
 800b138:	6163      	str	r3, [r4, #20]
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	6120      	str	r0, [r4, #16]
 800b13e:	b15b      	cbz	r3, 800b158 <__smakebuf_r+0x74>
 800b140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b144:	4630      	mov	r0, r6
 800b146:	f000 fea1 	bl	800be8c <_isatty_r>
 800b14a:	b128      	cbz	r0, 800b158 <__smakebuf_r+0x74>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f023 0303 	bic.w	r3, r3, #3
 800b152:	f043 0301 	orr.w	r3, r3, #1
 800b156:	81a3      	strh	r3, [r4, #12]
 800b158:	89a0      	ldrh	r0, [r4, #12]
 800b15a:	4305      	orrs	r5, r0
 800b15c:	81a5      	strh	r5, [r4, #12]
 800b15e:	e7cd      	b.n	800b0fc <__smakebuf_r+0x18>
 800b160:	0800aee9 	.word	0x0800aee9

0800b164 <malloc>:
 800b164:	4b02      	ldr	r3, [pc, #8]	; (800b170 <malloc+0xc>)
 800b166:	4601      	mov	r1, r0
 800b168:	6818      	ldr	r0, [r3, #0]
 800b16a:	f000 bc09 	b.w	800b980 <_malloc_r>
 800b16e:	bf00      	nop
 800b170:	2000000c 	.word	0x2000000c

0800b174 <_Balloc>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	b976      	cbnz	r6, 800b19c <_Balloc+0x28>
 800b17e:	2010      	movs	r0, #16
 800b180:	f7ff fff0 	bl	800b164 <malloc>
 800b184:	4602      	mov	r2, r0
 800b186:	6260      	str	r0, [r4, #36]	; 0x24
 800b188:	b920      	cbnz	r0, 800b194 <_Balloc+0x20>
 800b18a:	4b18      	ldr	r3, [pc, #96]	; (800b1ec <_Balloc+0x78>)
 800b18c:	4818      	ldr	r0, [pc, #96]	; (800b1f0 <_Balloc+0x7c>)
 800b18e:	2166      	movs	r1, #102	; 0x66
 800b190:	f000 fe2a 	bl	800bde8 <__assert_func>
 800b194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b198:	6006      	str	r6, [r0, #0]
 800b19a:	60c6      	str	r6, [r0, #12]
 800b19c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b19e:	68f3      	ldr	r3, [r6, #12]
 800b1a0:	b183      	cbz	r3, 800b1c4 <_Balloc+0x50>
 800b1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1aa:	b9b8      	cbnz	r0, 800b1dc <_Balloc+0x68>
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b1b2:	1d72      	adds	r2, r6, #5
 800b1b4:	0092      	lsls	r2, r2, #2
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 fb60 	bl	800b87c <_calloc_r>
 800b1bc:	b160      	cbz	r0, 800b1d8 <_Balloc+0x64>
 800b1be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1c2:	e00e      	b.n	800b1e2 <_Balloc+0x6e>
 800b1c4:	2221      	movs	r2, #33	; 0x21
 800b1c6:	2104      	movs	r1, #4
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fb57 	bl	800b87c <_calloc_r>
 800b1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1d0:	60f0      	str	r0, [r6, #12]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e4      	bne.n	800b1a2 <_Balloc+0x2e>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	6802      	ldr	r2, [r0, #0]
 800b1de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1e8:	e7f7      	b.n	800b1da <_Balloc+0x66>
 800b1ea:	bf00      	nop
 800b1ec:	0800c239 	.word	0x0800c239
 800b1f0:	0800c31c 	.word	0x0800c31c

0800b1f4 <_Bfree>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b976      	cbnz	r6, 800b21c <_Bfree+0x28>
 800b1fe:	2010      	movs	r0, #16
 800b200:	f7ff ffb0 	bl	800b164 <malloc>
 800b204:	4602      	mov	r2, r0
 800b206:	6268      	str	r0, [r5, #36]	; 0x24
 800b208:	b920      	cbnz	r0, 800b214 <_Bfree+0x20>
 800b20a:	4b09      	ldr	r3, [pc, #36]	; (800b230 <_Bfree+0x3c>)
 800b20c:	4809      	ldr	r0, [pc, #36]	; (800b234 <_Bfree+0x40>)
 800b20e:	218a      	movs	r1, #138	; 0x8a
 800b210:	f000 fdea 	bl	800bde8 <__assert_func>
 800b214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b218:	6006      	str	r6, [r0, #0]
 800b21a:	60c6      	str	r6, [r0, #12]
 800b21c:	b13c      	cbz	r4, 800b22e <_Bfree+0x3a>
 800b21e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b220:	6862      	ldr	r2, [r4, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b228:	6021      	str	r1, [r4, #0]
 800b22a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	0800c239 	.word	0x0800c239
 800b234:	0800c31c 	.word	0x0800c31c

0800b238 <__multadd>:
 800b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23c:	690d      	ldr	r5, [r1, #16]
 800b23e:	4607      	mov	r7, r0
 800b240:	460c      	mov	r4, r1
 800b242:	461e      	mov	r6, r3
 800b244:	f101 0c14 	add.w	ip, r1, #20
 800b248:	2000      	movs	r0, #0
 800b24a:	f8dc 3000 	ldr.w	r3, [ip]
 800b24e:	b299      	uxth	r1, r3
 800b250:	fb02 6101 	mla	r1, r2, r1, r6
 800b254:	0c1e      	lsrs	r6, r3, #16
 800b256:	0c0b      	lsrs	r3, r1, #16
 800b258:	fb02 3306 	mla	r3, r2, r6, r3
 800b25c:	b289      	uxth	r1, r1
 800b25e:	3001      	adds	r0, #1
 800b260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b264:	4285      	cmp	r5, r0
 800b266:	f84c 1b04 	str.w	r1, [ip], #4
 800b26a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b26e:	dcec      	bgt.n	800b24a <__multadd+0x12>
 800b270:	b30e      	cbz	r6, 800b2b6 <__multadd+0x7e>
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	42ab      	cmp	r3, r5
 800b276:	dc19      	bgt.n	800b2ac <__multadd+0x74>
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	4638      	mov	r0, r7
 800b27c:	3101      	adds	r1, #1
 800b27e:	f7ff ff79 	bl	800b174 <_Balloc>
 800b282:	4680      	mov	r8, r0
 800b284:	b928      	cbnz	r0, 800b292 <__multadd+0x5a>
 800b286:	4602      	mov	r2, r0
 800b288:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <__multadd+0x84>)
 800b28a:	480d      	ldr	r0, [pc, #52]	; (800b2c0 <__multadd+0x88>)
 800b28c:	21b5      	movs	r1, #181	; 0xb5
 800b28e:	f000 fdab 	bl	800bde8 <__assert_func>
 800b292:	6922      	ldr	r2, [r4, #16]
 800b294:	3202      	adds	r2, #2
 800b296:	f104 010c 	add.w	r1, r4, #12
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	300c      	adds	r0, #12
 800b29e:	f7fe f827 	bl	80092f0 <memcpy>
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ffa5 	bl	800b1f4 <_Bfree>
 800b2aa:	4644      	mov	r4, r8
 800b2ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	615e      	str	r6, [r3, #20]
 800b2b4:	6125      	str	r5, [r4, #16]
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	0800c2ab 	.word	0x0800c2ab
 800b2c0:	0800c31c 	.word	0x0800c31c

0800b2c4 <__hi0bits>:
 800b2c4:	0c03      	lsrs	r3, r0, #16
 800b2c6:	041b      	lsls	r3, r3, #16
 800b2c8:	b9d3      	cbnz	r3, 800b300 <__hi0bits+0x3c>
 800b2ca:	0400      	lsls	r0, r0, #16
 800b2cc:	2310      	movs	r3, #16
 800b2ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2d2:	bf04      	itt	eq
 800b2d4:	0200      	lsleq	r0, r0, #8
 800b2d6:	3308      	addeq	r3, #8
 800b2d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2dc:	bf04      	itt	eq
 800b2de:	0100      	lsleq	r0, r0, #4
 800b2e0:	3304      	addeq	r3, #4
 800b2e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2e6:	bf04      	itt	eq
 800b2e8:	0080      	lsleq	r0, r0, #2
 800b2ea:	3302      	addeq	r3, #2
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	db05      	blt.n	800b2fc <__hi0bits+0x38>
 800b2f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2f4:	f103 0301 	add.w	r3, r3, #1
 800b2f8:	bf08      	it	eq
 800b2fa:	2320      	moveq	r3, #32
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	4770      	bx	lr
 800b300:	2300      	movs	r3, #0
 800b302:	e7e4      	b.n	800b2ce <__hi0bits+0xa>

0800b304 <__lo0bits>:
 800b304:	6803      	ldr	r3, [r0, #0]
 800b306:	f013 0207 	ands.w	r2, r3, #7
 800b30a:	4601      	mov	r1, r0
 800b30c:	d00b      	beq.n	800b326 <__lo0bits+0x22>
 800b30e:	07da      	lsls	r2, r3, #31
 800b310:	d423      	bmi.n	800b35a <__lo0bits+0x56>
 800b312:	0798      	lsls	r0, r3, #30
 800b314:	bf49      	itett	mi
 800b316:	085b      	lsrmi	r3, r3, #1
 800b318:	089b      	lsrpl	r3, r3, #2
 800b31a:	2001      	movmi	r0, #1
 800b31c:	600b      	strmi	r3, [r1, #0]
 800b31e:	bf5c      	itt	pl
 800b320:	600b      	strpl	r3, [r1, #0]
 800b322:	2002      	movpl	r0, #2
 800b324:	4770      	bx	lr
 800b326:	b298      	uxth	r0, r3
 800b328:	b9a8      	cbnz	r0, 800b356 <__lo0bits+0x52>
 800b32a:	0c1b      	lsrs	r3, r3, #16
 800b32c:	2010      	movs	r0, #16
 800b32e:	b2da      	uxtb	r2, r3
 800b330:	b90a      	cbnz	r2, 800b336 <__lo0bits+0x32>
 800b332:	3008      	adds	r0, #8
 800b334:	0a1b      	lsrs	r3, r3, #8
 800b336:	071a      	lsls	r2, r3, #28
 800b338:	bf04      	itt	eq
 800b33a:	091b      	lsreq	r3, r3, #4
 800b33c:	3004      	addeq	r0, #4
 800b33e:	079a      	lsls	r2, r3, #30
 800b340:	bf04      	itt	eq
 800b342:	089b      	lsreq	r3, r3, #2
 800b344:	3002      	addeq	r0, #2
 800b346:	07da      	lsls	r2, r3, #31
 800b348:	d403      	bmi.n	800b352 <__lo0bits+0x4e>
 800b34a:	085b      	lsrs	r3, r3, #1
 800b34c:	f100 0001 	add.w	r0, r0, #1
 800b350:	d005      	beq.n	800b35e <__lo0bits+0x5a>
 800b352:	600b      	str	r3, [r1, #0]
 800b354:	4770      	bx	lr
 800b356:	4610      	mov	r0, r2
 800b358:	e7e9      	b.n	800b32e <__lo0bits+0x2a>
 800b35a:	2000      	movs	r0, #0
 800b35c:	4770      	bx	lr
 800b35e:	2020      	movs	r0, #32
 800b360:	4770      	bx	lr
	...

0800b364 <__i2b>:
 800b364:	b510      	push	{r4, lr}
 800b366:	460c      	mov	r4, r1
 800b368:	2101      	movs	r1, #1
 800b36a:	f7ff ff03 	bl	800b174 <_Balloc>
 800b36e:	4602      	mov	r2, r0
 800b370:	b928      	cbnz	r0, 800b37e <__i2b+0x1a>
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <__i2b+0x24>)
 800b374:	4805      	ldr	r0, [pc, #20]	; (800b38c <__i2b+0x28>)
 800b376:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b37a:	f000 fd35 	bl	800bde8 <__assert_func>
 800b37e:	2301      	movs	r3, #1
 800b380:	6144      	str	r4, [r0, #20]
 800b382:	6103      	str	r3, [r0, #16]
 800b384:	bd10      	pop	{r4, pc}
 800b386:	bf00      	nop
 800b388:	0800c2ab 	.word	0x0800c2ab
 800b38c:	0800c31c 	.word	0x0800c31c

0800b390 <__multiply>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	4691      	mov	r9, r2
 800b396:	690a      	ldr	r2, [r1, #16]
 800b398:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	bfb8      	it	lt
 800b3a0:	460b      	movlt	r3, r1
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	bfbc      	itt	lt
 800b3a6:	464c      	movlt	r4, r9
 800b3a8:	4699      	movlt	r9, r3
 800b3aa:	6927      	ldr	r7, [r4, #16]
 800b3ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3b0:	68a3      	ldr	r3, [r4, #8]
 800b3b2:	6861      	ldr	r1, [r4, #4]
 800b3b4:	eb07 060a 	add.w	r6, r7, sl
 800b3b8:	42b3      	cmp	r3, r6
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	bfb8      	it	lt
 800b3be:	3101      	addlt	r1, #1
 800b3c0:	f7ff fed8 	bl	800b174 <_Balloc>
 800b3c4:	b930      	cbnz	r0, 800b3d4 <__multiply+0x44>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4b44      	ldr	r3, [pc, #272]	; (800b4dc <__multiply+0x14c>)
 800b3ca:	4845      	ldr	r0, [pc, #276]	; (800b4e0 <__multiply+0x150>)
 800b3cc:	f240 115d 	movw	r1, #349	; 0x15d
 800b3d0:	f000 fd0a 	bl	800bde8 <__assert_func>
 800b3d4:	f100 0514 	add.w	r5, r0, #20
 800b3d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3dc:	462b      	mov	r3, r5
 800b3de:	2200      	movs	r2, #0
 800b3e0:	4543      	cmp	r3, r8
 800b3e2:	d321      	bcc.n	800b428 <__multiply+0x98>
 800b3e4:	f104 0314 	add.w	r3, r4, #20
 800b3e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b3ec:	f109 0314 	add.w	r3, r9, #20
 800b3f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b3f4:	9202      	str	r2, [sp, #8]
 800b3f6:	1b3a      	subs	r2, r7, r4
 800b3f8:	3a15      	subs	r2, #21
 800b3fa:	f022 0203 	bic.w	r2, r2, #3
 800b3fe:	3204      	adds	r2, #4
 800b400:	f104 0115 	add.w	r1, r4, #21
 800b404:	428f      	cmp	r7, r1
 800b406:	bf38      	it	cc
 800b408:	2204      	movcc	r2, #4
 800b40a:	9201      	str	r2, [sp, #4]
 800b40c:	9a02      	ldr	r2, [sp, #8]
 800b40e:	9303      	str	r3, [sp, #12]
 800b410:	429a      	cmp	r2, r3
 800b412:	d80c      	bhi.n	800b42e <__multiply+0x9e>
 800b414:	2e00      	cmp	r6, #0
 800b416:	dd03      	ble.n	800b420 <__multiply+0x90>
 800b418:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d05a      	beq.n	800b4d6 <__multiply+0x146>
 800b420:	6106      	str	r6, [r0, #16]
 800b422:	b005      	add	sp, #20
 800b424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b428:	f843 2b04 	str.w	r2, [r3], #4
 800b42c:	e7d8      	b.n	800b3e0 <__multiply+0x50>
 800b42e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b432:	f1ba 0f00 	cmp.w	sl, #0
 800b436:	d024      	beq.n	800b482 <__multiply+0xf2>
 800b438:	f104 0e14 	add.w	lr, r4, #20
 800b43c:	46a9      	mov	r9, r5
 800b43e:	f04f 0c00 	mov.w	ip, #0
 800b442:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b446:	f8d9 1000 	ldr.w	r1, [r9]
 800b44a:	fa1f fb82 	uxth.w	fp, r2
 800b44e:	b289      	uxth	r1, r1
 800b450:	fb0a 110b 	mla	r1, sl, fp, r1
 800b454:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b458:	f8d9 2000 	ldr.w	r2, [r9]
 800b45c:	4461      	add	r1, ip
 800b45e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b462:	fb0a c20b 	mla	r2, sl, fp, ip
 800b466:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b46a:	b289      	uxth	r1, r1
 800b46c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b470:	4577      	cmp	r7, lr
 800b472:	f849 1b04 	str.w	r1, [r9], #4
 800b476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b47a:	d8e2      	bhi.n	800b442 <__multiply+0xb2>
 800b47c:	9a01      	ldr	r2, [sp, #4]
 800b47e:	f845 c002 	str.w	ip, [r5, r2]
 800b482:	9a03      	ldr	r2, [sp, #12]
 800b484:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b488:	3304      	adds	r3, #4
 800b48a:	f1b9 0f00 	cmp.w	r9, #0
 800b48e:	d020      	beq.n	800b4d2 <__multiply+0x142>
 800b490:	6829      	ldr	r1, [r5, #0]
 800b492:	f104 0c14 	add.w	ip, r4, #20
 800b496:	46ae      	mov	lr, r5
 800b498:	f04f 0a00 	mov.w	sl, #0
 800b49c:	f8bc b000 	ldrh.w	fp, [ip]
 800b4a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4a4:	fb09 220b 	mla	r2, r9, fp, r2
 800b4a8:	4492      	add	sl, r2
 800b4aa:	b289      	uxth	r1, r1
 800b4ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4b0:	f84e 1b04 	str.w	r1, [lr], #4
 800b4b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4b8:	f8be 1000 	ldrh.w	r1, [lr]
 800b4bc:	0c12      	lsrs	r2, r2, #16
 800b4be:	fb09 1102 	mla	r1, r9, r2, r1
 800b4c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b4c6:	4567      	cmp	r7, ip
 800b4c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4cc:	d8e6      	bhi.n	800b49c <__multiply+0x10c>
 800b4ce:	9a01      	ldr	r2, [sp, #4]
 800b4d0:	50a9      	str	r1, [r5, r2]
 800b4d2:	3504      	adds	r5, #4
 800b4d4:	e79a      	b.n	800b40c <__multiply+0x7c>
 800b4d6:	3e01      	subs	r6, #1
 800b4d8:	e79c      	b.n	800b414 <__multiply+0x84>
 800b4da:	bf00      	nop
 800b4dc:	0800c2ab 	.word	0x0800c2ab
 800b4e0:	0800c31c 	.word	0x0800c31c

0800b4e4 <__pow5mult>:
 800b4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e8:	4615      	mov	r5, r2
 800b4ea:	f012 0203 	ands.w	r2, r2, #3
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	460f      	mov	r7, r1
 800b4f2:	d007      	beq.n	800b504 <__pow5mult+0x20>
 800b4f4:	4c25      	ldr	r4, [pc, #148]	; (800b58c <__pow5mult+0xa8>)
 800b4f6:	3a01      	subs	r2, #1
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4fe:	f7ff fe9b 	bl	800b238 <__multadd>
 800b502:	4607      	mov	r7, r0
 800b504:	10ad      	asrs	r5, r5, #2
 800b506:	d03d      	beq.n	800b584 <__pow5mult+0xa0>
 800b508:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b50a:	b97c      	cbnz	r4, 800b52c <__pow5mult+0x48>
 800b50c:	2010      	movs	r0, #16
 800b50e:	f7ff fe29 	bl	800b164 <malloc>
 800b512:	4602      	mov	r2, r0
 800b514:	6270      	str	r0, [r6, #36]	; 0x24
 800b516:	b928      	cbnz	r0, 800b524 <__pow5mult+0x40>
 800b518:	4b1d      	ldr	r3, [pc, #116]	; (800b590 <__pow5mult+0xac>)
 800b51a:	481e      	ldr	r0, [pc, #120]	; (800b594 <__pow5mult+0xb0>)
 800b51c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b520:	f000 fc62 	bl	800bde8 <__assert_func>
 800b524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b528:	6004      	str	r4, [r0, #0]
 800b52a:	60c4      	str	r4, [r0, #12]
 800b52c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b534:	b94c      	cbnz	r4, 800b54a <__pow5mult+0x66>
 800b536:	f240 2171 	movw	r1, #625	; 0x271
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7ff ff12 	bl	800b364 <__i2b>
 800b540:	2300      	movs	r3, #0
 800b542:	f8c8 0008 	str.w	r0, [r8, #8]
 800b546:	4604      	mov	r4, r0
 800b548:	6003      	str	r3, [r0, #0]
 800b54a:	f04f 0900 	mov.w	r9, #0
 800b54e:	07eb      	lsls	r3, r5, #31
 800b550:	d50a      	bpl.n	800b568 <__pow5mult+0x84>
 800b552:	4639      	mov	r1, r7
 800b554:	4622      	mov	r2, r4
 800b556:	4630      	mov	r0, r6
 800b558:	f7ff ff1a 	bl	800b390 <__multiply>
 800b55c:	4639      	mov	r1, r7
 800b55e:	4680      	mov	r8, r0
 800b560:	4630      	mov	r0, r6
 800b562:	f7ff fe47 	bl	800b1f4 <_Bfree>
 800b566:	4647      	mov	r7, r8
 800b568:	106d      	asrs	r5, r5, #1
 800b56a:	d00b      	beq.n	800b584 <__pow5mult+0xa0>
 800b56c:	6820      	ldr	r0, [r4, #0]
 800b56e:	b938      	cbnz	r0, 800b580 <__pow5mult+0x9c>
 800b570:	4622      	mov	r2, r4
 800b572:	4621      	mov	r1, r4
 800b574:	4630      	mov	r0, r6
 800b576:	f7ff ff0b 	bl	800b390 <__multiply>
 800b57a:	6020      	str	r0, [r4, #0]
 800b57c:	f8c0 9000 	str.w	r9, [r0]
 800b580:	4604      	mov	r4, r0
 800b582:	e7e4      	b.n	800b54e <__pow5mult+0x6a>
 800b584:	4638      	mov	r0, r7
 800b586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b58a:	bf00      	nop
 800b58c:	0800c468 	.word	0x0800c468
 800b590:	0800c239 	.word	0x0800c239
 800b594:	0800c31c 	.word	0x0800c31c

0800b598 <__lshift>:
 800b598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b59c:	460c      	mov	r4, r1
 800b59e:	6849      	ldr	r1, [r1, #4]
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5a6:	68a3      	ldr	r3, [r4, #8]
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	4691      	mov	r9, r2
 800b5ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5b0:	f108 0601 	add.w	r6, r8, #1
 800b5b4:	42b3      	cmp	r3, r6
 800b5b6:	db0b      	blt.n	800b5d0 <__lshift+0x38>
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	f7ff fddb 	bl	800b174 <_Balloc>
 800b5be:	4605      	mov	r5, r0
 800b5c0:	b948      	cbnz	r0, 800b5d6 <__lshift+0x3e>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	4b2a      	ldr	r3, [pc, #168]	; (800b670 <__lshift+0xd8>)
 800b5c6:	482b      	ldr	r0, [pc, #172]	; (800b674 <__lshift+0xdc>)
 800b5c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5cc:	f000 fc0c 	bl	800bde8 <__assert_func>
 800b5d0:	3101      	adds	r1, #1
 800b5d2:	005b      	lsls	r3, r3, #1
 800b5d4:	e7ee      	b.n	800b5b4 <__lshift+0x1c>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f100 0114 	add.w	r1, r0, #20
 800b5dc:	f100 0210 	add.w	r2, r0, #16
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	4553      	cmp	r3, sl
 800b5e4:	db37      	blt.n	800b656 <__lshift+0xbe>
 800b5e6:	6920      	ldr	r0, [r4, #16]
 800b5e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5ec:	f104 0314 	add.w	r3, r4, #20
 800b5f0:	f019 091f 	ands.w	r9, r9, #31
 800b5f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b5fc:	d02f      	beq.n	800b65e <__lshift+0xc6>
 800b5fe:	f1c9 0e20 	rsb	lr, r9, #32
 800b602:	468a      	mov	sl, r1
 800b604:	f04f 0c00 	mov.w	ip, #0
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	fa02 f209 	lsl.w	r2, r2, r9
 800b60e:	ea42 020c 	orr.w	r2, r2, ip
 800b612:	f84a 2b04 	str.w	r2, [sl], #4
 800b616:	f853 2b04 	ldr.w	r2, [r3], #4
 800b61a:	4298      	cmp	r0, r3
 800b61c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b620:	d8f2      	bhi.n	800b608 <__lshift+0x70>
 800b622:	1b03      	subs	r3, r0, r4
 800b624:	3b15      	subs	r3, #21
 800b626:	f023 0303 	bic.w	r3, r3, #3
 800b62a:	3304      	adds	r3, #4
 800b62c:	f104 0215 	add.w	r2, r4, #21
 800b630:	4290      	cmp	r0, r2
 800b632:	bf38      	it	cc
 800b634:	2304      	movcc	r3, #4
 800b636:	f841 c003 	str.w	ip, [r1, r3]
 800b63a:	f1bc 0f00 	cmp.w	ip, #0
 800b63e:	d001      	beq.n	800b644 <__lshift+0xac>
 800b640:	f108 0602 	add.w	r6, r8, #2
 800b644:	3e01      	subs	r6, #1
 800b646:	4638      	mov	r0, r7
 800b648:	612e      	str	r6, [r5, #16]
 800b64a:	4621      	mov	r1, r4
 800b64c:	f7ff fdd2 	bl	800b1f4 <_Bfree>
 800b650:	4628      	mov	r0, r5
 800b652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b656:	f842 0f04 	str.w	r0, [r2, #4]!
 800b65a:	3301      	adds	r3, #1
 800b65c:	e7c1      	b.n	800b5e2 <__lshift+0x4a>
 800b65e:	3904      	subs	r1, #4
 800b660:	f853 2b04 	ldr.w	r2, [r3], #4
 800b664:	f841 2f04 	str.w	r2, [r1, #4]!
 800b668:	4298      	cmp	r0, r3
 800b66a:	d8f9      	bhi.n	800b660 <__lshift+0xc8>
 800b66c:	e7ea      	b.n	800b644 <__lshift+0xac>
 800b66e:	bf00      	nop
 800b670:	0800c2ab 	.word	0x0800c2ab
 800b674:	0800c31c 	.word	0x0800c31c

0800b678 <__mcmp>:
 800b678:	b530      	push	{r4, r5, lr}
 800b67a:	6902      	ldr	r2, [r0, #16]
 800b67c:	690c      	ldr	r4, [r1, #16]
 800b67e:	1b12      	subs	r2, r2, r4
 800b680:	d10e      	bne.n	800b6a0 <__mcmp+0x28>
 800b682:	f100 0314 	add.w	r3, r0, #20
 800b686:	3114      	adds	r1, #20
 800b688:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b68c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b690:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b694:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b698:	42a5      	cmp	r5, r4
 800b69a:	d003      	beq.n	800b6a4 <__mcmp+0x2c>
 800b69c:	d305      	bcc.n	800b6aa <__mcmp+0x32>
 800b69e:	2201      	movs	r2, #1
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	bd30      	pop	{r4, r5, pc}
 800b6a4:	4283      	cmp	r3, r0
 800b6a6:	d3f3      	bcc.n	800b690 <__mcmp+0x18>
 800b6a8:	e7fa      	b.n	800b6a0 <__mcmp+0x28>
 800b6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ae:	e7f7      	b.n	800b6a0 <__mcmp+0x28>

0800b6b0 <__mdiff>:
 800b6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	4690      	mov	r8, r2
 800b6be:	f7ff ffdb 	bl	800b678 <__mcmp>
 800b6c2:	1e05      	subs	r5, r0, #0
 800b6c4:	d110      	bne.n	800b6e8 <__mdiff+0x38>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7ff fd53 	bl	800b174 <_Balloc>
 800b6ce:	b930      	cbnz	r0, 800b6de <__mdiff+0x2e>
 800b6d0:	4b3a      	ldr	r3, [pc, #232]	; (800b7bc <__mdiff+0x10c>)
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	f240 2132 	movw	r1, #562	; 0x232
 800b6d8:	4839      	ldr	r0, [pc, #228]	; (800b7c0 <__mdiff+0x110>)
 800b6da:	f000 fb85 	bl	800bde8 <__assert_func>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e8:	bfa4      	itt	ge
 800b6ea:	4643      	movge	r3, r8
 800b6ec:	46a0      	movge	r8, r4
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6f4:	bfa6      	itte	ge
 800b6f6:	461c      	movge	r4, r3
 800b6f8:	2500      	movge	r5, #0
 800b6fa:	2501      	movlt	r5, #1
 800b6fc:	f7ff fd3a 	bl	800b174 <_Balloc>
 800b700:	b920      	cbnz	r0, 800b70c <__mdiff+0x5c>
 800b702:	4b2e      	ldr	r3, [pc, #184]	; (800b7bc <__mdiff+0x10c>)
 800b704:	4602      	mov	r2, r0
 800b706:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b70a:	e7e5      	b.n	800b6d8 <__mdiff+0x28>
 800b70c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b710:	6926      	ldr	r6, [r4, #16]
 800b712:	60c5      	str	r5, [r0, #12]
 800b714:	f104 0914 	add.w	r9, r4, #20
 800b718:	f108 0514 	add.w	r5, r8, #20
 800b71c:	f100 0e14 	add.w	lr, r0, #20
 800b720:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b724:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b728:	f108 0210 	add.w	r2, r8, #16
 800b72c:	46f2      	mov	sl, lr
 800b72e:	2100      	movs	r1, #0
 800b730:	f859 3b04 	ldr.w	r3, [r9], #4
 800b734:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b738:	fa1f f883 	uxth.w	r8, r3
 800b73c:	fa11 f18b 	uxtah	r1, r1, fp
 800b740:	0c1b      	lsrs	r3, r3, #16
 800b742:	eba1 0808 	sub.w	r8, r1, r8
 800b746:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b74a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b74e:	fa1f f888 	uxth.w	r8, r8
 800b752:	1419      	asrs	r1, r3, #16
 800b754:	454e      	cmp	r6, r9
 800b756:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b75a:	f84a 3b04 	str.w	r3, [sl], #4
 800b75e:	d8e7      	bhi.n	800b730 <__mdiff+0x80>
 800b760:	1b33      	subs	r3, r6, r4
 800b762:	3b15      	subs	r3, #21
 800b764:	f023 0303 	bic.w	r3, r3, #3
 800b768:	3304      	adds	r3, #4
 800b76a:	3415      	adds	r4, #21
 800b76c:	42a6      	cmp	r6, r4
 800b76e:	bf38      	it	cc
 800b770:	2304      	movcc	r3, #4
 800b772:	441d      	add	r5, r3
 800b774:	4473      	add	r3, lr
 800b776:	469e      	mov	lr, r3
 800b778:	462e      	mov	r6, r5
 800b77a:	4566      	cmp	r6, ip
 800b77c:	d30e      	bcc.n	800b79c <__mdiff+0xec>
 800b77e:	f10c 0203 	add.w	r2, ip, #3
 800b782:	1b52      	subs	r2, r2, r5
 800b784:	f022 0203 	bic.w	r2, r2, #3
 800b788:	3d03      	subs	r5, #3
 800b78a:	45ac      	cmp	ip, r5
 800b78c:	bf38      	it	cc
 800b78e:	2200      	movcc	r2, #0
 800b790:	441a      	add	r2, r3
 800b792:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b796:	b17b      	cbz	r3, 800b7b8 <__mdiff+0x108>
 800b798:	6107      	str	r7, [r0, #16]
 800b79a:	e7a3      	b.n	800b6e4 <__mdiff+0x34>
 800b79c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7a0:	fa11 f288 	uxtah	r2, r1, r8
 800b7a4:	1414      	asrs	r4, r2, #16
 800b7a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7aa:	b292      	uxth	r2, r2
 800b7ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7b0:	f84e 2b04 	str.w	r2, [lr], #4
 800b7b4:	1421      	asrs	r1, r4, #16
 800b7b6:	e7e0      	b.n	800b77a <__mdiff+0xca>
 800b7b8:	3f01      	subs	r7, #1
 800b7ba:	e7ea      	b.n	800b792 <__mdiff+0xe2>
 800b7bc:	0800c2ab 	.word	0x0800c2ab
 800b7c0:	0800c31c 	.word	0x0800c31c

0800b7c4 <__d2b>:
 800b7c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7c8:	4689      	mov	r9, r1
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	ec57 6b10 	vmov	r6, r7, d0
 800b7d0:	4690      	mov	r8, r2
 800b7d2:	f7ff fccf 	bl	800b174 <_Balloc>
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	b930      	cbnz	r0, 800b7e8 <__d2b+0x24>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	4b25      	ldr	r3, [pc, #148]	; (800b874 <__d2b+0xb0>)
 800b7de:	4826      	ldr	r0, [pc, #152]	; (800b878 <__d2b+0xb4>)
 800b7e0:	f240 310a 	movw	r1, #778	; 0x30a
 800b7e4:	f000 fb00 	bl	800bde8 <__assert_func>
 800b7e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7f0:	bb35      	cbnz	r5, 800b840 <__d2b+0x7c>
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	9301      	str	r3, [sp, #4]
 800b7f6:	d028      	beq.n	800b84a <__d2b+0x86>
 800b7f8:	4668      	mov	r0, sp
 800b7fa:	9600      	str	r6, [sp, #0]
 800b7fc:	f7ff fd82 	bl	800b304 <__lo0bits>
 800b800:	9900      	ldr	r1, [sp, #0]
 800b802:	b300      	cbz	r0, 800b846 <__d2b+0x82>
 800b804:	9a01      	ldr	r2, [sp, #4]
 800b806:	f1c0 0320 	rsb	r3, r0, #32
 800b80a:	fa02 f303 	lsl.w	r3, r2, r3
 800b80e:	430b      	orrs	r3, r1
 800b810:	40c2      	lsrs	r2, r0
 800b812:	6163      	str	r3, [r4, #20]
 800b814:	9201      	str	r2, [sp, #4]
 800b816:	9b01      	ldr	r3, [sp, #4]
 800b818:	61a3      	str	r3, [r4, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bf14      	ite	ne
 800b81e:	2202      	movne	r2, #2
 800b820:	2201      	moveq	r2, #1
 800b822:	6122      	str	r2, [r4, #16]
 800b824:	b1d5      	cbz	r5, 800b85c <__d2b+0x98>
 800b826:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b82a:	4405      	add	r5, r0
 800b82c:	f8c9 5000 	str.w	r5, [r9]
 800b830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b834:	f8c8 0000 	str.w	r0, [r8]
 800b838:	4620      	mov	r0, r4
 800b83a:	b003      	add	sp, #12
 800b83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b844:	e7d5      	b.n	800b7f2 <__d2b+0x2e>
 800b846:	6161      	str	r1, [r4, #20]
 800b848:	e7e5      	b.n	800b816 <__d2b+0x52>
 800b84a:	a801      	add	r0, sp, #4
 800b84c:	f7ff fd5a 	bl	800b304 <__lo0bits>
 800b850:	9b01      	ldr	r3, [sp, #4]
 800b852:	6163      	str	r3, [r4, #20]
 800b854:	2201      	movs	r2, #1
 800b856:	6122      	str	r2, [r4, #16]
 800b858:	3020      	adds	r0, #32
 800b85a:	e7e3      	b.n	800b824 <__d2b+0x60>
 800b85c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b864:	f8c9 0000 	str.w	r0, [r9]
 800b868:	6918      	ldr	r0, [r3, #16]
 800b86a:	f7ff fd2b 	bl	800b2c4 <__hi0bits>
 800b86e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b872:	e7df      	b.n	800b834 <__d2b+0x70>
 800b874:	0800c2ab 	.word	0x0800c2ab
 800b878:	0800c31c 	.word	0x0800c31c

0800b87c <_calloc_r>:
 800b87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b87e:	fba1 2402 	umull	r2, r4, r1, r2
 800b882:	b94c      	cbnz	r4, 800b898 <_calloc_r+0x1c>
 800b884:	4611      	mov	r1, r2
 800b886:	9201      	str	r2, [sp, #4]
 800b888:	f000 f87a 	bl	800b980 <_malloc_r>
 800b88c:	9a01      	ldr	r2, [sp, #4]
 800b88e:	4605      	mov	r5, r0
 800b890:	b930      	cbnz	r0, 800b8a0 <_calloc_r+0x24>
 800b892:	4628      	mov	r0, r5
 800b894:	b003      	add	sp, #12
 800b896:	bd30      	pop	{r4, r5, pc}
 800b898:	220c      	movs	r2, #12
 800b89a:	6002      	str	r2, [r0, #0]
 800b89c:	2500      	movs	r5, #0
 800b89e:	e7f8      	b.n	800b892 <_calloc_r+0x16>
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	f7fd fd33 	bl	800930c <memset>
 800b8a6:	e7f4      	b.n	800b892 <_calloc_r+0x16>

0800b8a8 <_free_r>:
 800b8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8aa:	2900      	cmp	r1, #0
 800b8ac:	d044      	beq.n	800b938 <_free_r+0x90>
 800b8ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b2:	9001      	str	r0, [sp, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f1a1 0404 	sub.w	r4, r1, #4
 800b8ba:	bfb8      	it	lt
 800b8bc:	18e4      	addlt	r4, r4, r3
 800b8be:	f000 fb19 	bl	800bef4 <__malloc_lock>
 800b8c2:	4a1e      	ldr	r2, [pc, #120]	; (800b93c <_free_r+0x94>)
 800b8c4:	9801      	ldr	r0, [sp, #4]
 800b8c6:	6813      	ldr	r3, [r2, #0]
 800b8c8:	b933      	cbnz	r3, 800b8d8 <_free_r+0x30>
 800b8ca:	6063      	str	r3, [r4, #4]
 800b8cc:	6014      	str	r4, [r2, #0]
 800b8ce:	b003      	add	sp, #12
 800b8d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8d4:	f000 bb14 	b.w	800bf00 <__malloc_unlock>
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	d908      	bls.n	800b8ee <_free_r+0x46>
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	1961      	adds	r1, r4, r5
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf01      	itttt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	1949      	addeq	r1, r1, r5
 800b8ea:	6021      	streq	r1, [r4, #0]
 800b8ec:	e7ed      	b.n	800b8ca <_free_r+0x22>
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	b10b      	cbz	r3, 800b8f8 <_free_r+0x50>
 800b8f4:	42a3      	cmp	r3, r4
 800b8f6:	d9fa      	bls.n	800b8ee <_free_r+0x46>
 800b8f8:	6811      	ldr	r1, [r2, #0]
 800b8fa:	1855      	adds	r5, r2, r1
 800b8fc:	42a5      	cmp	r5, r4
 800b8fe:	d10b      	bne.n	800b918 <_free_r+0x70>
 800b900:	6824      	ldr	r4, [r4, #0]
 800b902:	4421      	add	r1, r4
 800b904:	1854      	adds	r4, r2, r1
 800b906:	42a3      	cmp	r3, r4
 800b908:	6011      	str	r1, [r2, #0]
 800b90a:	d1e0      	bne.n	800b8ce <_free_r+0x26>
 800b90c:	681c      	ldr	r4, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	6053      	str	r3, [r2, #4]
 800b912:	4421      	add	r1, r4
 800b914:	6011      	str	r1, [r2, #0]
 800b916:	e7da      	b.n	800b8ce <_free_r+0x26>
 800b918:	d902      	bls.n	800b920 <_free_r+0x78>
 800b91a:	230c      	movs	r3, #12
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	e7d6      	b.n	800b8ce <_free_r+0x26>
 800b920:	6825      	ldr	r5, [r4, #0]
 800b922:	1961      	adds	r1, r4, r5
 800b924:	428b      	cmp	r3, r1
 800b926:	bf04      	itt	eq
 800b928:	6819      	ldreq	r1, [r3, #0]
 800b92a:	685b      	ldreq	r3, [r3, #4]
 800b92c:	6063      	str	r3, [r4, #4]
 800b92e:	bf04      	itt	eq
 800b930:	1949      	addeq	r1, r1, r5
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	6054      	str	r4, [r2, #4]
 800b936:	e7ca      	b.n	800b8ce <_free_r+0x26>
 800b938:	b003      	add	sp, #12
 800b93a:	bd30      	pop	{r4, r5, pc}
 800b93c:	2000081c 	.word	0x2000081c

0800b940 <sbrk_aligned>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	4e0e      	ldr	r6, [pc, #56]	; (800b97c <sbrk_aligned+0x3c>)
 800b944:	460c      	mov	r4, r1
 800b946:	6831      	ldr	r1, [r6, #0]
 800b948:	4605      	mov	r5, r0
 800b94a:	b911      	cbnz	r1, 800b952 <sbrk_aligned+0x12>
 800b94c:	f000 f9e6 	bl	800bd1c <_sbrk_r>
 800b950:	6030      	str	r0, [r6, #0]
 800b952:	4621      	mov	r1, r4
 800b954:	4628      	mov	r0, r5
 800b956:	f000 f9e1 	bl	800bd1c <_sbrk_r>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	d00a      	beq.n	800b974 <sbrk_aligned+0x34>
 800b95e:	1cc4      	adds	r4, r0, #3
 800b960:	f024 0403 	bic.w	r4, r4, #3
 800b964:	42a0      	cmp	r0, r4
 800b966:	d007      	beq.n	800b978 <sbrk_aligned+0x38>
 800b968:	1a21      	subs	r1, r4, r0
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f9d6 	bl	800bd1c <_sbrk_r>
 800b970:	3001      	adds	r0, #1
 800b972:	d101      	bne.n	800b978 <sbrk_aligned+0x38>
 800b974:	f04f 34ff 	mov.w	r4, #4294967295
 800b978:	4620      	mov	r0, r4
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
 800b97c:	20000820 	.word	0x20000820

0800b980 <_malloc_r>:
 800b980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b984:	1ccd      	adds	r5, r1, #3
 800b986:	f025 0503 	bic.w	r5, r5, #3
 800b98a:	3508      	adds	r5, #8
 800b98c:	2d0c      	cmp	r5, #12
 800b98e:	bf38      	it	cc
 800b990:	250c      	movcc	r5, #12
 800b992:	2d00      	cmp	r5, #0
 800b994:	4607      	mov	r7, r0
 800b996:	db01      	blt.n	800b99c <_malloc_r+0x1c>
 800b998:	42a9      	cmp	r1, r5
 800b99a:	d905      	bls.n	800b9a8 <_malloc_r+0x28>
 800b99c:	230c      	movs	r3, #12
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	2600      	movs	r6, #0
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a8:	4e2e      	ldr	r6, [pc, #184]	; (800ba64 <_malloc_r+0xe4>)
 800b9aa:	f000 faa3 	bl	800bef4 <__malloc_lock>
 800b9ae:	6833      	ldr	r3, [r6, #0]
 800b9b0:	461c      	mov	r4, r3
 800b9b2:	bb34      	cbnz	r4, 800ba02 <_malloc_r+0x82>
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f7ff ffc2 	bl	800b940 <sbrk_aligned>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	4604      	mov	r4, r0
 800b9c0:	d14d      	bne.n	800ba5e <_malloc_r+0xde>
 800b9c2:	6834      	ldr	r4, [r6, #0]
 800b9c4:	4626      	mov	r6, r4
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	d140      	bne.n	800ba4c <_malloc_r+0xcc>
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	eb04 0803 	add.w	r8, r4, r3
 800b9d4:	f000 f9a2 	bl	800bd1c <_sbrk_r>
 800b9d8:	4580      	cmp	r8, r0
 800b9da:	d13a      	bne.n	800ba52 <_malloc_r+0xd2>
 800b9dc:	6821      	ldr	r1, [r4, #0]
 800b9de:	3503      	adds	r5, #3
 800b9e0:	1a6d      	subs	r5, r5, r1
 800b9e2:	f025 0503 	bic.w	r5, r5, #3
 800b9e6:	3508      	adds	r5, #8
 800b9e8:	2d0c      	cmp	r5, #12
 800b9ea:	bf38      	it	cc
 800b9ec:	250c      	movcc	r5, #12
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7ff ffa5 	bl	800b940 <sbrk_aligned>
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	d02b      	beq.n	800ba52 <_malloc_r+0xd2>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	442b      	add	r3, r5
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	e00e      	b.n	800ba20 <_malloc_r+0xa0>
 800ba02:	6822      	ldr	r2, [r4, #0]
 800ba04:	1b52      	subs	r2, r2, r5
 800ba06:	d41e      	bmi.n	800ba46 <_malloc_r+0xc6>
 800ba08:	2a0b      	cmp	r2, #11
 800ba0a:	d916      	bls.n	800ba3a <_malloc_r+0xba>
 800ba0c:	1961      	adds	r1, r4, r5
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	6025      	str	r5, [r4, #0]
 800ba12:	bf18      	it	ne
 800ba14:	6059      	strne	r1, [r3, #4]
 800ba16:	6863      	ldr	r3, [r4, #4]
 800ba18:	bf08      	it	eq
 800ba1a:	6031      	streq	r1, [r6, #0]
 800ba1c:	5162      	str	r2, [r4, r5]
 800ba1e:	604b      	str	r3, [r1, #4]
 800ba20:	4638      	mov	r0, r7
 800ba22:	f104 060b 	add.w	r6, r4, #11
 800ba26:	f000 fa6b 	bl	800bf00 <__malloc_unlock>
 800ba2a:	f026 0607 	bic.w	r6, r6, #7
 800ba2e:	1d23      	adds	r3, r4, #4
 800ba30:	1af2      	subs	r2, r6, r3
 800ba32:	d0b6      	beq.n	800b9a2 <_malloc_r+0x22>
 800ba34:	1b9b      	subs	r3, r3, r6
 800ba36:	50a3      	str	r3, [r4, r2]
 800ba38:	e7b3      	b.n	800b9a2 <_malloc_r+0x22>
 800ba3a:	6862      	ldr	r2, [r4, #4]
 800ba3c:	42a3      	cmp	r3, r4
 800ba3e:	bf0c      	ite	eq
 800ba40:	6032      	streq	r2, [r6, #0]
 800ba42:	605a      	strne	r2, [r3, #4]
 800ba44:	e7ec      	b.n	800ba20 <_malloc_r+0xa0>
 800ba46:	4623      	mov	r3, r4
 800ba48:	6864      	ldr	r4, [r4, #4]
 800ba4a:	e7b2      	b.n	800b9b2 <_malloc_r+0x32>
 800ba4c:	4634      	mov	r4, r6
 800ba4e:	6876      	ldr	r6, [r6, #4]
 800ba50:	e7b9      	b.n	800b9c6 <_malloc_r+0x46>
 800ba52:	230c      	movs	r3, #12
 800ba54:	603b      	str	r3, [r7, #0]
 800ba56:	4638      	mov	r0, r7
 800ba58:	f000 fa52 	bl	800bf00 <__malloc_unlock>
 800ba5c:	e7a1      	b.n	800b9a2 <_malloc_r+0x22>
 800ba5e:	6025      	str	r5, [r4, #0]
 800ba60:	e7de      	b.n	800ba20 <_malloc_r+0xa0>
 800ba62:	bf00      	nop
 800ba64:	2000081c 	.word	0x2000081c

0800ba68 <__sfputc_r>:
 800ba68:	6893      	ldr	r3, [r2, #8]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	b410      	push	{r4}
 800ba70:	6093      	str	r3, [r2, #8]
 800ba72:	da08      	bge.n	800ba86 <__sfputc_r+0x1e>
 800ba74:	6994      	ldr	r4, [r2, #24]
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	db01      	blt.n	800ba7e <__sfputc_r+0x16>
 800ba7a:	290a      	cmp	r1, #10
 800ba7c:	d103      	bne.n	800ba86 <__sfputc_r+0x1e>
 800ba7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba82:	f7fe ba11 	b.w	8009ea8 <__swbuf_r>
 800ba86:	6813      	ldr	r3, [r2, #0]
 800ba88:	1c58      	adds	r0, r3, #1
 800ba8a:	6010      	str	r0, [r2, #0]
 800ba8c:	7019      	strb	r1, [r3, #0]
 800ba8e:	4608      	mov	r0, r1
 800ba90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <__sfputs_r>:
 800ba96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba98:	4606      	mov	r6, r0
 800ba9a:	460f      	mov	r7, r1
 800ba9c:	4614      	mov	r4, r2
 800ba9e:	18d5      	adds	r5, r2, r3
 800baa0:	42ac      	cmp	r4, r5
 800baa2:	d101      	bne.n	800baa8 <__sfputs_r+0x12>
 800baa4:	2000      	movs	r0, #0
 800baa6:	e007      	b.n	800bab8 <__sfputs_r+0x22>
 800baa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baac:	463a      	mov	r2, r7
 800baae:	4630      	mov	r0, r6
 800bab0:	f7ff ffda 	bl	800ba68 <__sfputc_r>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d1f3      	bne.n	800baa0 <__sfputs_r+0xa>
 800bab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800babc <_vfiprintf_r>:
 800babc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac0:	460d      	mov	r5, r1
 800bac2:	b09d      	sub	sp, #116	; 0x74
 800bac4:	4614      	mov	r4, r2
 800bac6:	4698      	mov	r8, r3
 800bac8:	4606      	mov	r6, r0
 800baca:	b118      	cbz	r0, 800bad4 <_vfiprintf_r+0x18>
 800bacc:	6983      	ldr	r3, [r0, #24]
 800bace:	b90b      	cbnz	r3, 800bad4 <_vfiprintf_r+0x18>
 800bad0:	f7ff fa3e 	bl	800af50 <__sinit>
 800bad4:	4b89      	ldr	r3, [pc, #548]	; (800bcfc <_vfiprintf_r+0x240>)
 800bad6:	429d      	cmp	r5, r3
 800bad8:	d11b      	bne.n	800bb12 <_vfiprintf_r+0x56>
 800bada:	6875      	ldr	r5, [r6, #4]
 800badc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bade:	07d9      	lsls	r1, r3, #31
 800bae0:	d405      	bmi.n	800baee <_vfiprintf_r+0x32>
 800bae2:	89ab      	ldrh	r3, [r5, #12]
 800bae4:	059a      	lsls	r2, r3, #22
 800bae6:	d402      	bmi.n	800baee <_vfiprintf_r+0x32>
 800bae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baea:	f7ff fad4 	bl	800b096 <__retarget_lock_acquire_recursive>
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	071b      	lsls	r3, r3, #28
 800baf2:	d501      	bpl.n	800baf8 <_vfiprintf_r+0x3c>
 800baf4:	692b      	ldr	r3, [r5, #16]
 800baf6:	b9eb      	cbnz	r3, 800bb34 <_vfiprintf_r+0x78>
 800baf8:	4629      	mov	r1, r5
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7fe fa26 	bl	8009f4c <__swsetup_r>
 800bb00:	b1c0      	cbz	r0, 800bb34 <_vfiprintf_r+0x78>
 800bb02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb04:	07dc      	lsls	r4, r3, #31
 800bb06:	d50e      	bpl.n	800bb26 <_vfiprintf_r+0x6a>
 800bb08:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0c:	b01d      	add	sp, #116	; 0x74
 800bb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb12:	4b7b      	ldr	r3, [pc, #492]	; (800bd00 <_vfiprintf_r+0x244>)
 800bb14:	429d      	cmp	r5, r3
 800bb16:	d101      	bne.n	800bb1c <_vfiprintf_r+0x60>
 800bb18:	68b5      	ldr	r5, [r6, #8]
 800bb1a:	e7df      	b.n	800badc <_vfiprintf_r+0x20>
 800bb1c:	4b79      	ldr	r3, [pc, #484]	; (800bd04 <_vfiprintf_r+0x248>)
 800bb1e:	429d      	cmp	r5, r3
 800bb20:	bf08      	it	eq
 800bb22:	68f5      	ldreq	r5, [r6, #12]
 800bb24:	e7da      	b.n	800badc <_vfiprintf_r+0x20>
 800bb26:	89ab      	ldrh	r3, [r5, #12]
 800bb28:	0598      	lsls	r0, r3, #22
 800bb2a:	d4ed      	bmi.n	800bb08 <_vfiprintf_r+0x4c>
 800bb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb2e:	f7ff fab3 	bl	800b098 <__retarget_lock_release_recursive>
 800bb32:	e7e9      	b.n	800bb08 <_vfiprintf_r+0x4c>
 800bb34:	2300      	movs	r3, #0
 800bb36:	9309      	str	r3, [sp, #36]	; 0x24
 800bb38:	2320      	movs	r3, #32
 800bb3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb42:	2330      	movs	r3, #48	; 0x30
 800bb44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd08 <_vfiprintf_r+0x24c>
 800bb48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb4c:	f04f 0901 	mov.w	r9, #1
 800bb50:	4623      	mov	r3, r4
 800bb52:	469a      	mov	sl, r3
 800bb54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb58:	b10a      	cbz	r2, 800bb5e <_vfiprintf_r+0xa2>
 800bb5a:	2a25      	cmp	r2, #37	; 0x25
 800bb5c:	d1f9      	bne.n	800bb52 <_vfiprintf_r+0x96>
 800bb5e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb62:	d00b      	beq.n	800bb7c <_vfiprintf_r+0xc0>
 800bb64:	465b      	mov	r3, fp
 800bb66:	4622      	mov	r2, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7ff ff93 	bl	800ba96 <__sfputs_r>
 800bb70:	3001      	adds	r0, #1
 800bb72:	f000 80aa 	beq.w	800bcca <_vfiprintf_r+0x20e>
 800bb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb78:	445a      	add	r2, fp
 800bb7a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb7c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 80a2 	beq.w	800bcca <_vfiprintf_r+0x20e>
 800bb86:	2300      	movs	r3, #0
 800bb88:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb90:	f10a 0a01 	add.w	sl, sl, #1
 800bb94:	9304      	str	r3, [sp, #16]
 800bb96:	9307      	str	r3, [sp, #28]
 800bb98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb9c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb9e:	4654      	mov	r4, sl
 800bba0:	2205      	movs	r2, #5
 800bba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba6:	4858      	ldr	r0, [pc, #352]	; (800bd08 <_vfiprintf_r+0x24c>)
 800bba8:	f7f4 fb1a 	bl	80001e0 <memchr>
 800bbac:	9a04      	ldr	r2, [sp, #16]
 800bbae:	b9d8      	cbnz	r0, 800bbe8 <_vfiprintf_r+0x12c>
 800bbb0:	06d1      	lsls	r1, r2, #27
 800bbb2:	bf44      	itt	mi
 800bbb4:	2320      	movmi	r3, #32
 800bbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbba:	0713      	lsls	r3, r2, #28
 800bbbc:	bf44      	itt	mi
 800bbbe:	232b      	movmi	r3, #43	; 0x2b
 800bbc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbc4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbca:	d015      	beq.n	800bbf8 <_vfiprintf_r+0x13c>
 800bbcc:	9a07      	ldr	r2, [sp, #28]
 800bbce:	4654      	mov	r4, sl
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	f04f 0c0a 	mov.w	ip, #10
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbdc:	3b30      	subs	r3, #48	; 0x30
 800bbde:	2b09      	cmp	r3, #9
 800bbe0:	d94e      	bls.n	800bc80 <_vfiprintf_r+0x1c4>
 800bbe2:	b1b0      	cbz	r0, 800bc12 <_vfiprintf_r+0x156>
 800bbe4:	9207      	str	r2, [sp, #28]
 800bbe6:	e014      	b.n	800bc12 <_vfiprintf_r+0x156>
 800bbe8:	eba0 0308 	sub.w	r3, r0, r8
 800bbec:	fa09 f303 	lsl.w	r3, r9, r3
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	9304      	str	r3, [sp, #16]
 800bbf4:	46a2      	mov	sl, r4
 800bbf6:	e7d2      	b.n	800bb9e <_vfiprintf_r+0xe2>
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	1d19      	adds	r1, r3, #4
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	9103      	str	r1, [sp, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfbb      	ittet	lt
 800bc04:	425b      	neglt	r3, r3
 800bc06:	f042 0202 	orrlt.w	r2, r2, #2
 800bc0a:	9307      	strge	r3, [sp, #28]
 800bc0c:	9307      	strlt	r3, [sp, #28]
 800bc0e:	bfb8      	it	lt
 800bc10:	9204      	strlt	r2, [sp, #16]
 800bc12:	7823      	ldrb	r3, [r4, #0]
 800bc14:	2b2e      	cmp	r3, #46	; 0x2e
 800bc16:	d10c      	bne.n	800bc32 <_vfiprintf_r+0x176>
 800bc18:	7863      	ldrb	r3, [r4, #1]
 800bc1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc1c:	d135      	bne.n	800bc8a <_vfiprintf_r+0x1ce>
 800bc1e:	9b03      	ldr	r3, [sp, #12]
 800bc20:	1d1a      	adds	r2, r3, #4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	9203      	str	r2, [sp, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	bfb8      	it	lt
 800bc2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc2e:	3402      	adds	r4, #2
 800bc30:	9305      	str	r3, [sp, #20]
 800bc32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd18 <_vfiprintf_r+0x25c>
 800bc36:	7821      	ldrb	r1, [r4, #0]
 800bc38:	2203      	movs	r2, #3
 800bc3a:	4650      	mov	r0, sl
 800bc3c:	f7f4 fad0 	bl	80001e0 <memchr>
 800bc40:	b140      	cbz	r0, 800bc54 <_vfiprintf_r+0x198>
 800bc42:	2340      	movs	r3, #64	; 0x40
 800bc44:	eba0 000a 	sub.w	r0, r0, sl
 800bc48:	fa03 f000 	lsl.w	r0, r3, r0
 800bc4c:	9b04      	ldr	r3, [sp, #16]
 800bc4e:	4303      	orrs	r3, r0
 800bc50:	3401      	adds	r4, #1
 800bc52:	9304      	str	r3, [sp, #16]
 800bc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc58:	482c      	ldr	r0, [pc, #176]	; (800bd0c <_vfiprintf_r+0x250>)
 800bc5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc5e:	2206      	movs	r2, #6
 800bc60:	f7f4 fabe 	bl	80001e0 <memchr>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d03f      	beq.n	800bce8 <_vfiprintf_r+0x22c>
 800bc68:	4b29      	ldr	r3, [pc, #164]	; (800bd10 <_vfiprintf_r+0x254>)
 800bc6a:	bb1b      	cbnz	r3, 800bcb4 <_vfiprintf_r+0x1f8>
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	3307      	adds	r3, #7
 800bc70:	f023 0307 	bic.w	r3, r3, #7
 800bc74:	3308      	adds	r3, #8
 800bc76:	9303      	str	r3, [sp, #12]
 800bc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc7a:	443b      	add	r3, r7
 800bc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc7e:	e767      	b.n	800bb50 <_vfiprintf_r+0x94>
 800bc80:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc84:	460c      	mov	r4, r1
 800bc86:	2001      	movs	r0, #1
 800bc88:	e7a5      	b.n	800bbd6 <_vfiprintf_r+0x11a>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	3401      	adds	r4, #1
 800bc8e:	9305      	str	r3, [sp, #20]
 800bc90:	4619      	mov	r1, r3
 800bc92:	f04f 0c0a 	mov.w	ip, #10
 800bc96:	4620      	mov	r0, r4
 800bc98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc9c:	3a30      	subs	r2, #48	; 0x30
 800bc9e:	2a09      	cmp	r2, #9
 800bca0:	d903      	bls.n	800bcaa <_vfiprintf_r+0x1ee>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d0c5      	beq.n	800bc32 <_vfiprintf_r+0x176>
 800bca6:	9105      	str	r1, [sp, #20]
 800bca8:	e7c3      	b.n	800bc32 <_vfiprintf_r+0x176>
 800bcaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcae:	4604      	mov	r4, r0
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e7f0      	b.n	800bc96 <_vfiprintf_r+0x1da>
 800bcb4:	ab03      	add	r3, sp, #12
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	462a      	mov	r2, r5
 800bcba:	4b16      	ldr	r3, [pc, #88]	; (800bd14 <_vfiprintf_r+0x258>)
 800bcbc:	a904      	add	r1, sp, #16
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f7fd fbcc 	bl	800945c <_printf_float>
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	1c78      	adds	r0, r7, #1
 800bcc8:	d1d6      	bne.n	800bc78 <_vfiprintf_r+0x1bc>
 800bcca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bccc:	07d9      	lsls	r1, r3, #31
 800bcce:	d405      	bmi.n	800bcdc <_vfiprintf_r+0x220>
 800bcd0:	89ab      	ldrh	r3, [r5, #12]
 800bcd2:	059a      	lsls	r2, r3, #22
 800bcd4:	d402      	bmi.n	800bcdc <_vfiprintf_r+0x220>
 800bcd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd8:	f7ff f9de 	bl	800b098 <__retarget_lock_release_recursive>
 800bcdc:	89ab      	ldrh	r3, [r5, #12]
 800bcde:	065b      	lsls	r3, r3, #25
 800bce0:	f53f af12 	bmi.w	800bb08 <_vfiprintf_r+0x4c>
 800bce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bce6:	e711      	b.n	800bb0c <_vfiprintf_r+0x50>
 800bce8:	ab03      	add	r3, sp, #12
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	462a      	mov	r2, r5
 800bcee:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <_vfiprintf_r+0x258>)
 800bcf0:	a904      	add	r1, sp, #16
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f7fd fe56 	bl	80099a4 <_printf_i>
 800bcf8:	e7e4      	b.n	800bcc4 <_vfiprintf_r+0x208>
 800bcfa:	bf00      	nop
 800bcfc:	0800c2dc 	.word	0x0800c2dc
 800bd00:	0800c2fc 	.word	0x0800c2fc
 800bd04:	0800c2bc 	.word	0x0800c2bc
 800bd08:	0800c474 	.word	0x0800c474
 800bd0c:	0800c47e 	.word	0x0800c47e
 800bd10:	0800945d 	.word	0x0800945d
 800bd14:	0800ba97 	.word	0x0800ba97
 800bd18:	0800c47a 	.word	0x0800c47a

0800bd1c <_sbrk_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d06      	ldr	r5, [pc, #24]	; (800bd38 <_sbrk_r+0x1c>)
 800bd20:	2300      	movs	r3, #0
 800bd22:	4604      	mov	r4, r0
 800bd24:	4608      	mov	r0, r1
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	f7f6 fc56 	bl	80025d8 <_sbrk>
 800bd2c:	1c43      	adds	r3, r0, #1
 800bd2e:	d102      	bne.n	800bd36 <_sbrk_r+0x1a>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	b103      	cbz	r3, 800bd36 <_sbrk_r+0x1a>
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	20000824 	.word	0x20000824

0800bd3c <__sread>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	460c      	mov	r4, r1
 800bd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd44:	f000 f8e2 	bl	800bf0c <_read_r>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	bfab      	itete	ge
 800bd4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd4e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd50:	181b      	addge	r3, r3, r0
 800bd52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd56:	bfac      	ite	ge
 800bd58:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd5a:	81a3      	strhlt	r3, [r4, #12]
 800bd5c:	bd10      	pop	{r4, pc}

0800bd5e <__swrite>:
 800bd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd62:	461f      	mov	r7, r3
 800bd64:	898b      	ldrh	r3, [r1, #12]
 800bd66:	05db      	lsls	r3, r3, #23
 800bd68:	4605      	mov	r5, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	d505      	bpl.n	800bd7c <__swrite+0x1e>
 800bd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd74:	2302      	movs	r3, #2
 800bd76:	2200      	movs	r2, #0
 800bd78:	f000 f898 	bl	800beac <_lseek_r>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	4632      	mov	r2, r6
 800bd8a:	463b      	mov	r3, r7
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd92:	f000 b817 	b.w	800bdc4 <_write_r>

0800bd96 <__sseek>:
 800bd96:	b510      	push	{r4, lr}
 800bd98:	460c      	mov	r4, r1
 800bd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9e:	f000 f885 	bl	800beac <_lseek_r>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	bf15      	itete	ne
 800bda8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdb2:	81a3      	strheq	r3, [r4, #12]
 800bdb4:	bf18      	it	ne
 800bdb6:	81a3      	strhne	r3, [r4, #12]
 800bdb8:	bd10      	pop	{r4, pc}

0800bdba <__sclose>:
 800bdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdbe:	f000 b831 	b.w	800be24 <_close_r>
	...

0800bdc4 <_write_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4d07      	ldr	r5, [pc, #28]	; (800bde4 <_write_r+0x20>)
 800bdc8:	4604      	mov	r4, r0
 800bdca:	4608      	mov	r0, r1
 800bdcc:	4611      	mov	r1, r2
 800bdce:	2200      	movs	r2, #0
 800bdd0:	602a      	str	r2, [r5, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f7f5 fcc6 	bl	8001764 <_write>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_write_r+0x1e>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_write_r+0x1e>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000824 	.word	0x20000824

0800bde8 <__assert_func>:
 800bde8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdea:	4614      	mov	r4, r2
 800bdec:	461a      	mov	r2, r3
 800bdee:	4b09      	ldr	r3, [pc, #36]	; (800be14 <__assert_func+0x2c>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	68d8      	ldr	r0, [r3, #12]
 800bdf6:	b14c      	cbz	r4, 800be0c <__assert_func+0x24>
 800bdf8:	4b07      	ldr	r3, [pc, #28]	; (800be18 <__assert_func+0x30>)
 800bdfa:	9100      	str	r1, [sp, #0]
 800bdfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be00:	4906      	ldr	r1, [pc, #24]	; (800be1c <__assert_func+0x34>)
 800be02:	462b      	mov	r3, r5
 800be04:	f000 f81e 	bl	800be44 <fiprintf>
 800be08:	f000 f89f 	bl	800bf4a <abort>
 800be0c:	4b04      	ldr	r3, [pc, #16]	; (800be20 <__assert_func+0x38>)
 800be0e:	461c      	mov	r4, r3
 800be10:	e7f3      	b.n	800bdfa <__assert_func+0x12>
 800be12:	bf00      	nop
 800be14:	2000000c 	.word	0x2000000c
 800be18:	0800c485 	.word	0x0800c485
 800be1c:	0800c492 	.word	0x0800c492
 800be20:	0800c4c0 	.word	0x0800c4c0

0800be24 <_close_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4d06      	ldr	r5, [pc, #24]	; (800be40 <_close_r+0x1c>)
 800be28:	2300      	movs	r3, #0
 800be2a:	4604      	mov	r4, r0
 800be2c:	4608      	mov	r0, r1
 800be2e:	602b      	str	r3, [r5, #0]
 800be30:	f7f6 fb9d 	bl	800256e <_close>
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	d102      	bne.n	800be3e <_close_r+0x1a>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	b103      	cbz	r3, 800be3e <_close_r+0x1a>
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	20000824 	.word	0x20000824

0800be44 <fiprintf>:
 800be44:	b40e      	push	{r1, r2, r3}
 800be46:	b503      	push	{r0, r1, lr}
 800be48:	4601      	mov	r1, r0
 800be4a:	ab03      	add	r3, sp, #12
 800be4c:	4805      	ldr	r0, [pc, #20]	; (800be64 <fiprintf+0x20>)
 800be4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be52:	6800      	ldr	r0, [r0, #0]
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	f7ff fe31 	bl	800babc <_vfiprintf_r>
 800be5a:	b002      	add	sp, #8
 800be5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be60:	b003      	add	sp, #12
 800be62:	4770      	bx	lr
 800be64:	2000000c 	.word	0x2000000c

0800be68 <_fstat_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	; (800be88 <_fstat_r+0x20>)
 800be6c:	2300      	movs	r3, #0
 800be6e:	4604      	mov	r4, r0
 800be70:	4608      	mov	r0, r1
 800be72:	4611      	mov	r1, r2
 800be74:	602b      	str	r3, [r5, #0]
 800be76:	f7f6 fb86 	bl	8002586 <_fstat>
 800be7a:	1c43      	adds	r3, r0, #1
 800be7c:	d102      	bne.n	800be84 <_fstat_r+0x1c>
 800be7e:	682b      	ldr	r3, [r5, #0]
 800be80:	b103      	cbz	r3, 800be84 <_fstat_r+0x1c>
 800be82:	6023      	str	r3, [r4, #0]
 800be84:	bd38      	pop	{r3, r4, r5, pc}
 800be86:	bf00      	nop
 800be88:	20000824 	.word	0x20000824

0800be8c <_isatty_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d06      	ldr	r5, [pc, #24]	; (800bea8 <_isatty_r+0x1c>)
 800be90:	2300      	movs	r3, #0
 800be92:	4604      	mov	r4, r0
 800be94:	4608      	mov	r0, r1
 800be96:	602b      	str	r3, [r5, #0]
 800be98:	f7f6 fb85 	bl	80025a6 <_isatty>
 800be9c:	1c43      	adds	r3, r0, #1
 800be9e:	d102      	bne.n	800bea6 <_isatty_r+0x1a>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	b103      	cbz	r3, 800bea6 <_isatty_r+0x1a>
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	bd38      	pop	{r3, r4, r5, pc}
 800bea8:	20000824 	.word	0x20000824

0800beac <_lseek_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4d07      	ldr	r5, [pc, #28]	; (800becc <_lseek_r+0x20>)
 800beb0:	4604      	mov	r4, r0
 800beb2:	4608      	mov	r0, r1
 800beb4:	4611      	mov	r1, r2
 800beb6:	2200      	movs	r2, #0
 800beb8:	602a      	str	r2, [r5, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	f7f6 fb7e 	bl	80025bc <_lseek>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_lseek_r+0x1e>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_lseek_r+0x1e>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	20000824 	.word	0x20000824

0800bed0 <__ascii_mbtowc>:
 800bed0:	b082      	sub	sp, #8
 800bed2:	b901      	cbnz	r1, 800bed6 <__ascii_mbtowc+0x6>
 800bed4:	a901      	add	r1, sp, #4
 800bed6:	b142      	cbz	r2, 800beea <__ascii_mbtowc+0x1a>
 800bed8:	b14b      	cbz	r3, 800beee <__ascii_mbtowc+0x1e>
 800beda:	7813      	ldrb	r3, [r2, #0]
 800bedc:	600b      	str	r3, [r1, #0]
 800bede:	7812      	ldrb	r2, [r2, #0]
 800bee0:	1e10      	subs	r0, r2, #0
 800bee2:	bf18      	it	ne
 800bee4:	2001      	movne	r0, #1
 800bee6:	b002      	add	sp, #8
 800bee8:	4770      	bx	lr
 800beea:	4610      	mov	r0, r2
 800beec:	e7fb      	b.n	800bee6 <__ascii_mbtowc+0x16>
 800beee:	f06f 0001 	mvn.w	r0, #1
 800bef2:	e7f8      	b.n	800bee6 <__ascii_mbtowc+0x16>

0800bef4 <__malloc_lock>:
 800bef4:	4801      	ldr	r0, [pc, #4]	; (800befc <__malloc_lock+0x8>)
 800bef6:	f7ff b8ce 	b.w	800b096 <__retarget_lock_acquire_recursive>
 800befa:	bf00      	nop
 800befc:	20000818 	.word	0x20000818

0800bf00 <__malloc_unlock>:
 800bf00:	4801      	ldr	r0, [pc, #4]	; (800bf08 <__malloc_unlock+0x8>)
 800bf02:	f7ff b8c9 	b.w	800b098 <__retarget_lock_release_recursive>
 800bf06:	bf00      	nop
 800bf08:	20000818 	.word	0x20000818

0800bf0c <_read_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4d07      	ldr	r5, [pc, #28]	; (800bf2c <_read_r+0x20>)
 800bf10:	4604      	mov	r4, r0
 800bf12:	4608      	mov	r0, r1
 800bf14:	4611      	mov	r1, r2
 800bf16:	2200      	movs	r2, #0
 800bf18:	602a      	str	r2, [r5, #0]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	f7f6 fb0a 	bl	8002534 <_read>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d102      	bne.n	800bf2a <_read_r+0x1e>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	b103      	cbz	r3, 800bf2a <_read_r+0x1e>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	20000824 	.word	0x20000824

0800bf30 <__ascii_wctomb>:
 800bf30:	b149      	cbz	r1, 800bf46 <__ascii_wctomb+0x16>
 800bf32:	2aff      	cmp	r2, #255	; 0xff
 800bf34:	bf85      	ittet	hi
 800bf36:	238a      	movhi	r3, #138	; 0x8a
 800bf38:	6003      	strhi	r3, [r0, #0]
 800bf3a:	700a      	strbls	r2, [r1, #0]
 800bf3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf40:	bf98      	it	ls
 800bf42:	2001      	movls	r0, #1
 800bf44:	4770      	bx	lr
 800bf46:	4608      	mov	r0, r1
 800bf48:	4770      	bx	lr

0800bf4a <abort>:
 800bf4a:	b508      	push	{r3, lr}
 800bf4c:	2006      	movs	r0, #6
 800bf4e:	f000 f82b 	bl	800bfa8 <raise>
 800bf52:	2001      	movs	r0, #1
 800bf54:	f7f6 fae4 	bl	8002520 <_exit>

0800bf58 <_raise_r>:
 800bf58:	291f      	cmp	r1, #31
 800bf5a:	b538      	push	{r3, r4, r5, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	460d      	mov	r5, r1
 800bf60:	d904      	bls.n	800bf6c <_raise_r+0x14>
 800bf62:	2316      	movs	r3, #22
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf6e:	b112      	cbz	r2, 800bf76 <_raise_r+0x1e>
 800bf70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf74:	b94b      	cbnz	r3, 800bf8a <_raise_r+0x32>
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 f830 	bl	800bfdc <_getpid_r>
 800bf7c:	462a      	mov	r2, r5
 800bf7e:	4601      	mov	r1, r0
 800bf80:	4620      	mov	r0, r4
 800bf82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf86:	f000 b817 	b.w	800bfb8 <_kill_r>
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d00a      	beq.n	800bfa4 <_raise_r+0x4c>
 800bf8e:	1c59      	adds	r1, r3, #1
 800bf90:	d103      	bne.n	800bf9a <_raise_r+0x42>
 800bf92:	2316      	movs	r3, #22
 800bf94:	6003      	str	r3, [r0, #0]
 800bf96:	2001      	movs	r0, #1
 800bf98:	e7e7      	b.n	800bf6a <_raise_r+0x12>
 800bf9a:	2400      	movs	r4, #0
 800bf9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	4798      	blx	r3
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	e7e0      	b.n	800bf6a <_raise_r+0x12>

0800bfa8 <raise>:
 800bfa8:	4b02      	ldr	r3, [pc, #8]	; (800bfb4 <raise+0xc>)
 800bfaa:	4601      	mov	r1, r0
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	f7ff bfd3 	b.w	800bf58 <_raise_r>
 800bfb2:	bf00      	nop
 800bfb4:	2000000c 	.word	0x2000000c

0800bfb8 <_kill_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	; (800bfd8 <_kill_r+0x20>)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	602b      	str	r3, [r5, #0]
 800bfc6:	f7f6 fa9b 	bl	8002500 <_kill>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	d102      	bne.n	800bfd4 <_kill_r+0x1c>
 800bfce:	682b      	ldr	r3, [r5, #0]
 800bfd0:	b103      	cbz	r3, 800bfd4 <_kill_r+0x1c>
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	bd38      	pop	{r3, r4, r5, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20000824 	.word	0x20000824

0800bfdc <_getpid_r>:
 800bfdc:	f7f6 ba88 	b.w	80024f0 <_getpid>

0800bfe0 <_init>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	bf00      	nop
 800bfe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfe6:	bc08      	pop	{r3}
 800bfe8:	469e      	mov	lr, r3
 800bfea:	4770      	bx	lr

0800bfec <_fini>:
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	bf00      	nop
 800bff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bff2:	bc08      	pop	{r3}
 800bff4:	469e      	mov	lr, r3
 800bff6:	4770      	bx	lr
