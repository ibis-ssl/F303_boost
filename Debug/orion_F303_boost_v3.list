
orion_F303_boost_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d438  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  0800d5c8  0800d5c8  0001d5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de5c  0800de5c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800de5c  0800de5c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de5c  0800de5c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de5c  0800de5c  0001de5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de60  0800de60  0001de60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800de64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000b44  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d24  20000d24  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019377  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038db  00000000  00000000  00039587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c0  00000000  00000000  0003e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e6d  00000000  00000000  0003f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c295  00000000  00000000  000613dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6f7c  00000000  00000000  0007d672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001445ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006618  00000000  00000000  00144640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5b0 	.word	0x0800d5b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d5b0 	.word	0x0800d5b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2228      	movs	r2, #40	; 0x28
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f009 fceb 	bl	800a63c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c80:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8e:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c94:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb4:	482c      	ldr	r0, [pc, #176]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cb6:	f003 f96f 	bl	8003f98 <HAL_ADC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f002 fb39 	bl	8003336 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000cd0:	f004 f814 	bl	8004cfc <HAL_ADCEx_MultiModeConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000cda:	f002 fb2c 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000cea:	2303      	movs	r3, #3
 8000cec:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d1a:	f003 fc67 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d24:	f002 fb07 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d36:	f003 fc59 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000d40:	f002 faf9 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000d44:	2303      	movs	r3, #3
 8000d46:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_ADC1_Init+0x120>)
 8000d52:	f003 fc4b 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000d5c:	f002 faeb 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3738      	adds	r7, #56	; 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001fc 	.word	0x200001fc

08000d6c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2228      	movs	r2, #40	; 0x28
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f009 fc59 	bl	800a63c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d8c:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <MX_ADC3_Init+0x124>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd6:	482d      	ldr	r0, [pc, #180]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000dd8:	f003 f8de 	bl	8003f98 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC3_Init+0x7a>
  {
    Error_Handler();
 8000de2:	f002 faa8 	bl	8003336 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000df2:	f003 ff83 	bl	8004cfc <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000dfc:	f002 fa9b 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000e10:	2306      	movs	r3, #6
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.InjectedOffset = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4814      	ldr	r0, [pc, #80]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e3c:	f003 fbd6 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_ADC3_Init+0xde>
  {
    Error_Handler();
 8000e46:	f002 fa76 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e58:	f003 fbc8 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 8000e62:	f002 fa68 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000e66:	230c      	movs	r3, #12
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_ADC3_Init+0x120>)
 8000e74:	f003 fbba 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8000e7e:	f002 fa5a 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000024c 	.word	0x2000024c
 8000e90:	50000400 	.word	0x50000400

08000e94 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2228      	movs	r2, #40	; 0x28
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f009 fbcb 	bl	800a63c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ea8:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <MX_ADC4_Init+0xdc>)
 8000eaa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000ef4:	f003 f850 	bl	8003f98 <HAL_ADC_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC4_Init+0x6e>
  {
    Error_Handler();
 8000efe:	f002 fa1a 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f02:	2303      	movs	r3, #3
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000f12:	2306      	movs	r3, #6
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = ENABLE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	777b      	strb	r3, [r7, #29]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	773b      	strb	r3, [r7, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.InjectedOffset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f38:	f003 fb58 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC4_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f002 f9f8 	bl	8003336 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <MX_ADC4_Init+0xd8>)
 8000f54:	f003 fb4a 	bl	80045ec <HAL_ADCEx_InjectedConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000f5e:	f002 f9ea 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000029c 	.word	0x2000029c
 8000f70:	50000500 	.word	0x50000500

08000f74 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC34_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f94:	d14d      	bne.n	8001032 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a84      	ldr	r2, [pc, #528]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b82      	ldr	r3, [pc, #520]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	623b      	str	r3, [r7, #32]
 8000fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f005 f9d2 	bl	8006384 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe0:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe2:	4a74      	ldr	r2, [pc, #464]	; (80011b4 <HAL_ADC_MspInit+0x240>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe6:	4b72      	ldr	r3, [pc, #456]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b6f      	ldr	r3, [pc, #444]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8000ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001000:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001008:	4b69      	ldr	r3, [pc, #420]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800100a:	2220      	movs	r2, #32
 800100c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800100e:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001014:	4866      	ldr	r0, [pc, #408]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001016:	f004 ff8a 	bl	8005f2e <HAL_DMA_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001020:	f002 f989 	bl	8003336 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a62      	ldr	r2, [pc, #392]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
 800102a:	4a61      	ldr	r2, [pc, #388]	; (80011b0 <HAL_ADC_MspInit+0x23c>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001030:	e0b7      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC3)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <HAL_ADC_MspInit+0x244>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d157      	bne.n	80010ec <HAL_ADC_MspInit+0x178>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800103c:	4b5f      	ldr	r3, [pc, #380]	; (80011bc <HAL_ADC_MspInit+0x248>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a5e      	ldr	r2, [pc, #376]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001044:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10b      	bne.n	8001066 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800104e:	4b57      	ldr	r3, [pc, #348]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b54      	ldr	r3, [pc, #336]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a50      	ldr	r2, [pc, #320]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BOOST_V_Pin|BATT_CS_Pin|TEMP_COIL_1_Pin;
 800107e:	f242 0303 	movw	r3, #8195	; 0x2003
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	484b      	ldr	r0, [pc, #300]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 8001094:	f005 f976 	bl	8006384 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 800109a:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_ADC_MspInit+0x254>)
 800109c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b0:	4b44      	ldr	r3, [pc, #272]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b8:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010be:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80010ce:	483d      	ldr	r0, [pc, #244]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010d0:	f004 ff2d 	bl	8005f2e <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_ADC_MspInit+0x16a>
      Error_Handler();
 80010da:	f002 f92c 	bl	8003336 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
 80010e4:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <HAL_ADC_MspInit+0x250>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80010ea:	e05a      	b.n	80011a2 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC4)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a36      	ldr	r2, [pc, #216]	; (80011cc <HAL_ADC_MspInit+0x258>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d155      	bne.n	80011a2 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_ADC_MspInit+0x248>)
 80010fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_ADC_MspInit+0x248>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10b      	bne.n	8001120 <HAL_ADC_MspInit+0x1ac>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800110e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001112:	6153      	str	r3, [r2, #20]
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0x238>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	6153      	str	r3, [r2, #20]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_ADC_MspInit+0x238>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TEMP_FET_Pin|TEMP_COIL_2_Pin;
 8001138:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <HAL_ADC_MspInit+0x24c>)
 800114e:	f005 f919 	bl	8006384 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001154:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0x260>)
 8001156:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800117c:	2220      	movs	r2, #32
 800117e:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001186:	4812      	ldr	r0, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 8001188:	f004 fed1 	bl	8005f2e <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001192:	f002 f8d0 	bl	8003336 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x25c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80011a2:	bf00      	nop
 80011a4:	3738      	adds	r7, #56	; 0x38
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	200002ec 	.word	0x200002ec
 80011b4:	40020008 	.word	0x40020008
 80011b8:	50000400 	.word	0x50000400
 80011bc:	200003b8 	.word	0x200003b8
 80011c0:	48000400 	.word	0x48000400
 80011c4:	20000330 	.word	0x20000330
 80011c8:	40020458 	.word	0x40020458
 80011cc:	50000500 	.word	0x50000500
 80011d0:	20000374 	.word	0x20000374
 80011d4:	4002041c 	.word	0x4002041c

080011d8 <start_transmit>:
int8_t delta_x, delta_y;
uint8_t quality;
int32_t integral_x, integral_y;

void start_transmit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f005 fa5f 	bl	80066a8 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <end_transmit>:

void end_transmit(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOUSE_NSS_GPIO_Port, MOUSE_NSS_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f005 fa54 	bl	80066a8 <HAL_GPIO_WritePin>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <reset>:


static void reset(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af02      	add	r7, sp, #8
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <reset+0x48>)
 8001214:	490e      	ldr	r1, [pc, #56]	; (8001250 <reset+0x4c>)
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <reset+0x50>)
 8001218:	f006 ff2d 	bl	8008076 <HAL_SPI_TransmitReceive>
    end_transmit();
 800121c:	f7ff ffe7 	bl	80011ee <end_transmit>
    // set clk,nss polaryty


    HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f002 fe95 	bl	8003f50 <HAL_Delay>

    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <reset+0x54>)
 800122c:	f005 fa3c 	bl	80066a8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001230:	2001      	movs	r0, #1
 8001232:	f002 fe8d 	bl	8003f50 <HAL_Delay>
    HAL_GPIO_WritePin(MOUSE_RST_GPIO_Port, MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <reset+0x54>)
 800123c:	f005 fa34 	bl	80066a8 <HAL_GPIO_WritePin>

    HAL_Delay(250); // waiting for self-test
 8001240:	20fa      	movs	r0, #250	; 0xfa
 8001242:	f002 fe85 	bl	8003f50 <HAL_Delay>
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200003cc 	.word	0x200003cc
 8001250:	200003bc 	.word	0x200003bc
 8001254:	200004b0 	.word	0x200004b0
 8001258:	48000400 	.word	0x48000400

0800125c <is_connect_ADNS3080>:

bool is_connect_ADNS3080(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af02      	add	r7, sp, #8
    //HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);

    reset();
 8001262:	f7ff ffcf 	bl	8001204 <reset>


    start_transmit();
 8001266:	f7ff ffb7 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_PRODUCT_ID;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <is_connect_ADNS3080+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 8001270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <is_connect_ADNS3080+0x50>)
 800127a:	490b      	ldr	r1, [pc, #44]	; (80012a8 <is_connect_ADNS3080+0x4c>)
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <is_connect_ADNS3080+0x54>)
 800127e:	f006 fefa 	bl	8008076 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001282:	f7ff ffb4 	bl	80011ee <end_transmit>

    p("SPI ID : %d\n", rbuf[1]);
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <is_connect_ADNS3080+0x50>)
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <is_connect_ADNS3080+0x58>)
 800128e:	f002 fd1f 	bl	8003cd0 <p>

    if (rbuf[1] == ADNS3080_PRODUCT_ID_VALUE)
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <is_connect_ADNS3080+0x50>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	2b17      	cmp	r3, #23
 8001298:	d101      	bne.n	800129e <is_connect_ADNS3080+0x42>
    {
        return true;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <is_connect_ADNS3080+0x44>
    }
    else
    {
        return false;
 800129e:	2300      	movs	r3, #0
    }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200003bc 	.word	0x200003bc
 80012ac:	200003cc 	.word	0x200003cc
 80012b0:	200004b0 	.word	0x200004b0
 80012b4:	0800d5c8 	.word	0x0800d5c8

080012b8 <init_ADNS3080>:

void init_ADNS3080(bool ips_1600)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
    delta_x = 0;
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <init_ADNS3080+0x8c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    delta_y = 0;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <init_ADNS3080+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
    quality = 0;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <init_ADNS3080+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    integral_x = 0;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <init_ADNS3080+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
    integral_y = 0;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <init_ADNS3080+0x9c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
    reset();
 80012e0:	f7ff ff90 	bl	8001204 <reset>


    start_transmit();
 80012e4:	f7ff ff78 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_REG_WRITE & ADNS3080_CONFIGURATION_BITS; // config write
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <init_ADNS3080+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	4a19      	ldr	r2, [pc, #100]	; (800135c <init_ADNS3080+0xa4>)
 80012f8:	4917      	ldr	r1, [pc, #92]	; (8001358 <init_ADNS3080+0xa0>)
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <init_ADNS3080+0xa8>)
 80012fc:	f006 febb 	bl	8008076 <HAL_SPI_TransmitReceive>

    //delay >75us
    for (int i = 0; i < 1000; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e002      	b.n	800130c <init_ADNS3080+0x54>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3301      	adds	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001312:	dbf8      	blt.n	8001306 <init_ADNS3080+0x4e>
    {
    }

    uint8_t mouse_config = rbuf[1];
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <init_ADNS3080+0xa4>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	72fb      	strb	r3, [r7, #11]
    sbuf[0] = mouse_config | ADNS3080_BIT_1600IPS; // set 1600 ips
 800131a:	7afb      	ldrb	r3, [r7, #11]
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <init_ADNS3080+0xa0>)
 8001324:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 1, 1000);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <init_ADNS3080+0xa4>)
 8001330:	4909      	ldr	r1, [pc, #36]	; (8001358 <init_ADNS3080+0xa0>)
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <init_ADNS3080+0xa8>)
 8001334:	f006 fe9f 	bl	8008076 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001338:	f7ff ff59 	bl	80011ee <end_transmit>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200003dc 	.word	0x200003dc
 8001348:	200003dd 	.word	0x200003dd
 800134c:	200003de 	.word	0x200003de
 8001350:	200003e0 	.word	0x200003e0
 8001354:	200003e4 	.word	0x200003e4
 8001358:	200003bc 	.word	0x200003bc
 800135c:	200003cc 	.word	0x200003cc
 8001360:	200004b0 	.word	0x200004b0

08001364 <update_ADNS3080>:


void update_ADNS3080(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af02      	add	r7, sp, #8
    
    start_transmit();
 800136a:	f7ff ff35 	bl	80011d8 <start_transmit>

    sbuf[0] = ADNS3080_MOTION_BURST;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <update_ADNS3080+0x78>)
 8001370:	2250      	movs	r2, #80	; 0x50
 8001372:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 8, 1000);
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2308      	movs	r3, #8
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <update_ADNS3080+0x7c>)
 800137e:	4917      	ldr	r1, [pc, #92]	; (80013dc <update_ADNS3080+0x78>)
 8001380:	4818      	ldr	r0, [pc, #96]	; (80013e4 <update_ADNS3080+0x80>)
 8001382:	f006 fe78 	bl	8008076 <HAL_SPI_TransmitReceive>
    
    end_transmit();
 8001386:	f7ff ff32 	bl	80011ee <end_transmit>
    
    if (rbuf[1] & ADNS3080_BIT_MOTION)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <update_ADNS3080+0x7c>)
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	da1b      	bge.n	80013cc <update_ADNS3080+0x68>
    {
        delta_x = (int8_t)rbuf[2];
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <update_ADNS3080+0x7c>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	b25a      	sxtb	r2, r3
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <update_ADNS3080+0x84>)
 800139c:	701a      	strb	r2, [r3, #0]
        delta_y = (int8_t)rbuf[3];
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <update_ADNS3080+0x7c>)
 80013a0:	78db      	ldrb	r3, [r3, #3]
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <update_ADNS3080+0x88>)
 80013a6:	701a      	strb	r2, [r3, #0]
        integral_x += delta_x;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <update_ADNS3080+0x84>)
 80013aa:	f993 3000 	ldrsb.w	r3, [r3]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <update_ADNS3080+0x8c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <update_ADNS3080+0x8c>)
 80013b8:	6013      	str	r3, [r2, #0]
        integral_y += delta_y;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <update_ADNS3080+0x88>)
 80013bc:	f993 3000 	ldrsb.w	r3, [r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <update_ADNS3080+0x90>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <update_ADNS3080+0x90>)
 80013ca:	6013      	str	r3, [r2, #0]
    }else{

    }
    quality = rbuf[4];
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <update_ADNS3080+0x7c>)
 80013ce:	791a      	ldrb	r2, [r3, #4]
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <update_ADNS3080+0x94>)
 80013d2:	701a      	strb	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200003bc 	.word	0x200003bc
 80013e0:	200003cc 	.word	0x200003cc
 80013e4:	200004b0 	.word	0x200004b0
 80013e8:	200003dc 	.word	0x200003dc
 80013ec:	200003dd 	.word	0x200003dd
 80013f0:	200003e0 	.word	0x200003e0
 80013f4:	200003e4 	.word	0x200003e4
 80013f8:	200003de 	.word	0x200003de

080013fc <get_DeltaX_ADNS3080>:


int8_t get_DeltaX_ADNS3080(void){
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
    return delta_x;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <get_DeltaX_ADNS3080+0x14>)
 8001402:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	200003dc 	.word	0x200003dc

08001414 <get_DeltaY_ADNS3080>:
int8_t get_DeltaY_ADNS3080(void){
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
    return delta_y;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <get_DeltaY_ADNS3080+0x14>)
 800141a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	200003dd 	.word	0x200003dd

0800142c <get_Qualty_ADNS3080>:
uint8_t get_Qualty_ADNS3080(void){
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
    return quality;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <get_Qualty_ADNS3080+0x14>)
 8001432:	781b      	ldrb	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200003de 	.word	0x200003de

08001444 <frame_print_ADNS3080>:
}
int32_t get_Y_ADNS3080(void){
    return integral_y;
}

void frame_print_ADNS3080(void){
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af02      	add	r7, sp, #8
    char scale[] = "#987654321-,.'` ";
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <frame_print_ADNS3080+0xc8>)
 800144c:	1d3c      	adds	r4, r7, #4
 800144e:	461d      	mov	r5, r3
 8001450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	7023      	strb	r3, [r4, #0]
    sbuf[0] = ADNS3080_FRAME_CAPTURE | ADNS3080_REG_WRITE; // frame capture write
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <frame_print_ADNS3080+0xcc>)
 800145a:	2293      	movs	r2, #147	; 0x93
 800145c:	701a      	strb	r2, [r3, #0]
    sbuf[1] = ADNS3080_FRAME_CAPTURE_START;
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <frame_print_ADNS3080+0xcc>)
 8001460:	2283      	movs	r2, #131	; 0x83
 8001462:	705a      	strb	r2, [r3, #1]
    start_transmit();
 8001464:	f7ff feb8 	bl	80011d8 <start_transmit>
    HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 8001468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2302      	movs	r3, #2
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <frame_print_ADNS3080+0xd0>)
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <frame_print_ADNS3080+0xcc>)
 8001474:	4828      	ldr	r0, [pc, #160]	; (8001518 <frame_print_ADNS3080+0xd4>)
 8001476:	f006 fdfe 	bl	8008076 <HAL_SPI_TransmitReceive>
    end_transmit();
 800147a:	f7ff feb8 	bl	80011ee <end_transmit>
    HAL_Delay(2);
 800147e:	2002      	movs	r0, #2
 8001480:	f002 fd66 	bl	8003f50 <HAL_Delay>

    for (int pixel_x = 0; pixel_x < ADNS3080_PIXELS_X; pixel_x++)
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	e036      	b.n	80014f8 <frame_print_ADNS3080+0xb4>
    {
        for (int pixel_y = 0; pixel_y < ADNS3080_PIXELS_Y; pixel_y++)
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	e02a      	b.n	80014e6 <frame_print_ADNS3080+0xa2>
        {
            sbuf[0] = ADNS3080_FRAME_CAPTURE; // frame capture
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <frame_print_ADNS3080+0xcc>)
 8001492:	2213      	movs	r2, #19
 8001494:	701a      	strb	r2, [r3, #0]
            start_transmit();
 8001496:	f7ff fe9f 	bl	80011d8 <start_transmit>
            HAL_SPI_TransmitReceive(&hspi1, sbuf, rbuf, 2, 1000);
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2302      	movs	r3, #2
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <frame_print_ADNS3080+0xd0>)
 80014a4:	491a      	ldr	r1, [pc, #104]	; (8001510 <frame_print_ADNS3080+0xcc>)
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <frame_print_ADNS3080+0xd4>)
 80014a8:	f006 fde5 	bl	8008076 <HAL_SPI_TransmitReceive>
            end_transmit();
 80014ac:	f7ff fe9f 	bl	80011ee <end_transmit>

            p("%c ", scale[(rbuf[1] % 0x3F) >> 2]);
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <frame_print_ADNS3080+0xd0>)
 80014b2:	785a      	ldrb	r2, [r3, #1]
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <frame_print_ADNS3080+0xd8>)
 80014b6:	fba3 1302 	umull	r1, r3, r3, r2
 80014ba:	1ad1      	subs	r1, r2, r3
 80014bc:	0849      	lsrs	r1, r1, #1
 80014be:	440b      	add	r3, r1
 80014c0:	0959      	lsrs	r1, r3, #5
 80014c2:	460b      	mov	r3, r1
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	1a5b      	subs	r3, r3, r1
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3320      	adds	r3, #32
 80014d2:	443b      	add	r3, r7
 80014d4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80014d8:	4619      	mov	r1, r3
 80014da:	4811      	ldr	r0, [pc, #68]	; (8001520 <frame_print_ADNS3080+0xdc>)
 80014dc:	f002 fbf8 	bl	8003cd0 <p>
        for (int pixel_y = 0; pixel_y < ADNS3080_PIXELS_Y; pixel_y++)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	3301      	adds	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b1d      	cmp	r3, #29
 80014ea:	ddd1      	ble.n	8001490 <frame_print_ADNS3080+0x4c>
        }
        p("\n");
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <frame_print_ADNS3080+0xe0>)
 80014ee:	f002 fbef 	bl	8003cd0 <p>
    for (int pixel_x = 0; pixel_x < ADNS3080_PIXELS_X; pixel_x++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b1d      	cmp	r3, #29
 80014fc:	ddc5      	ble.n	800148a <frame_print_ADNS3080+0x46>
    }
    p("\n\n");
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <frame_print_ADNS3080+0xe4>)
 8001500:	f002 fbe6 	bl	8003cd0 <p>
}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bdb0      	pop	{r4, r5, r7, pc}
 800150c:	0800d5e4 	.word	0x0800d5e4
 8001510:	200003bc 	.word	0x200003bc
 8001514:	200003cc 	.word	0x200003cc
 8001518:	200004b0 	.word	0x200004b0
 800151c:	04104105 	.word	0x04104105
 8001520:	0800d5d8 	.word	0x0800d5d8
 8001524:	0800d5dc 	.word	0x0800d5dc
 8001528:	0800d5e0 	.word	0x0800d5e0

0800152c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_CAN_Init+0x64>)
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <MX_CAN_Init+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_CAN_Init+0x64>)
 8001538:	2202      	movs	r2, #2
 800153a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_CAN_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_CAN_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_CAN_Init+0x64>)
 800154a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800154e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_CAN_Init+0x64>)
 8001552:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001556:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <MX_CAN_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_CAN_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_CAN_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_CAN_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_CAN_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_CAN_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_CAN_Init+0x64>)
 800157e:	f003 fd79 	bl	8005074 <HAL_CAN_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001588:	f001 fed5 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200003e8 	.word	0x200003e8
 8001594:	40006400 	.word	0x40006400

08001598 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <HAL_CAN_MspInit+0x90>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d131      	bne.n	800161e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_CAN_MspInit+0x94>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_CAN_MspInit+0x94>)
 80015c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_CAN_MspInit+0x94>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_CAN_MspInit+0x94>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	4a15      	ldr	r2, [pc, #84]	; (800162c <HAL_CAN_MspInit+0x94>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	6153      	str	r3, [r2, #20]
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_CAN_MspInit+0x94>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80015fc:	2309      	movs	r3, #9
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f004 febb 	bl	8006384 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2101      	movs	r1, #1
 8001612:	2014      	movs	r0, #20
 8001614:	f004 fc55 	bl	8005ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001618:	2014      	movs	r0, #20
 800161a:	f004 fc6e 	bl	8005efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40006400 	.word	0x40006400
 800162c:	40021000 	.word	0x40021000

08001630 <CAN_Filter_Init>:
  /* USER CODE END CAN_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001636:	2301      	movs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterBank = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterIdHigh = (0x00) << 5;
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = (0x100) << 5;
 8001646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = (0x010) << 5;
 800164c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001650:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = (0x110) << 5;
 8001652:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001656:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800165c:	2301      	movs	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <CAN_Filter_Init+0x64>)
 800166a:	f003 fdfe 	bl	800526a <HAL_CAN_ConfigFilter>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <CAN_Filter_Init+0x48>
    Error_Handler();
 8001674:	f001 fe5f 	bl	8003336 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001678:	2102      	movs	r1, #2
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <CAN_Filter_Init+0x64>)
 800167c:	f004 f8f0 	bl	8005860 <HAL_CAN_ActivateNotification>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <CAN_Filter_Init+0x5a>
    Error_Handler();
 8001686:	f001 fe56 	bl	8003336 <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200003e8 	.word	0x200003e8

08001698 <sendCanError>:

void sendCanError(uint16_t type, uint32_t data) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	80fb      	strh	r3, [r7, #6]
  CAN_TxHeaderTypeDef can_header;
  uint8_t can_data[8];
  uint32_t can_mailbox;

  can_header.StdId = 0x0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
  can_header.RTR = CAN_RTR_DATA;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  can_header.DLC = 8;
 80016ac:	2308      	movs	r3, #8
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  can_header.TransmitGlobalTime = DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  can_data[0] = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	743b      	strb	r3, [r7, #16]
  can_data[1] = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	747b      	strb	r3, [r7, #17]
  can_data[2] = type;
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	74bb      	strb	r3, [r7, #18]
  can_data[3] = type >> 8;
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	74fb      	strb	r3, [r7, #19]

  HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	f107 0210 	add.w	r2, r7, #16
 80016d6:	f107 0118 	add.w	r1, r7, #24
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <sendCanError+0x50>)
 80016dc:	f003 fed3 	bl	8005486 <HAL_CAN_AddTxMessage>
}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200003e8 	.word	0x200003e8

080016ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_DMA_Init+0x80>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a1d      	ldr	r2, [pc, #116]	; (800176c <MX_DMA_Init+0x80>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_DMA_Init+0x80>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_DMA_Init+0x80>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <MX_DMA_Init+0x80>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6153      	str	r3, [r2, #20]
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_DMA_Init+0x80>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	200b      	movs	r0, #11
 8001728:	f004 fbcb 	bl	8005ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800172c:	200b      	movs	r0, #11
 800172e:	f004 fbe4 	bl	8005efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	200e      	movs	r0, #14
 8001738:	f004 fbc3 	bl	8005ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800173c:	200e      	movs	r0, #14
 800173e:	f004 fbdc 	bl	8005efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2039      	movs	r0, #57	; 0x39
 8001748:	f004 fbbb 	bl	8005ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800174c:	2039      	movs	r0, #57	; 0x39
 800174e:	f004 fbd4 	bl	8005efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	203c      	movs	r0, #60	; 0x3c
 8001758:	f004 fbb3 	bl	8005ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800175c:	203c      	movs	r0, #60	; 0x3c
 800175e:	f004 fbcc 	bl	8005efa <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b40      	ldr	r3, [pc, #256]	; (8001888 <MX_GPIO_Init+0x118>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <MX_GPIO_Init+0x118>)
 800178c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001790:	6153      	str	r3, [r2, #20]
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <MX_GPIO_Init+0x118>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <MX_GPIO_Init+0x118>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	4a39      	ldr	r2, [pc, #228]	; (8001888 <MX_GPIO_Init+0x118>)
 80017a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a8:	6153      	str	r3, [r2, #20]
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <MX_GPIO_Init+0x118>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <MX_GPIO_Init+0x118>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	4a33      	ldr	r2, [pc, #204]	; (8001888 <MX_GPIO_Init+0x118>)
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	6153      	str	r3, [r2, #20]
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <MX_GPIO_Init+0x118>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <MX_GPIO_Init+0x118>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <MX_GPIO_Init+0x118>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d8:	6153      	str	r3, [r2, #20]
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <MX_GPIO_Init+0x118>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80017ec:	4827      	ldr	r0, [pc, #156]	; (800188c <MX_GPIO_Init+0x11c>)
 80017ee:	f004 ff5b 	bl	80066a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CURRENT_Pin|MOUSE_NSS_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f248 0110 	movw	r1, #32784	; 0x8010
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f004 ff54 	bl	80066a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POWER_SW_EN_Pin|MOUSE_RST_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2144      	movs	r1, #68	; 0x44
 8001804:	4822      	ldr	r0, [pc, #136]	; (8001890 <MX_GPIO_Init+0x120>)
 8001806:	f004 ff4f 	bl	80066a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 800180a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	481a      	ldr	r0, [pc, #104]	; (800188c <MX_GPIO_Init+0x11c>)
 8001824:	f004 fdae 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_CURRENT_Pin|MOUSE_NSS_Pin;
 8001828:	f248 0310 	movw	r3, #32784	; 0x8010
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f004 fd9e 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_SW_EN_Pin|MOUSE_RST_Pin;
 8001848:	2344      	movs	r3, #68	; 0x44
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <MX_GPIO_Init+0x120>)
 8001860:	f004 fd90 	bl	8006384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8001864:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_GPIO_Init+0x120>)
 800187a:	f004 fd83 	bl	8006384 <HAL_GPIO_Init>

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	48000800 	.word	0x48000800
 8001890:	48000400 	.word	0x48000400

08001894 <setTargetVoltage>:
    uint16_t quality;
  } mouse;
} uint8_to_float_t;

uint8_to_float_t rx, tx;
void setTargetVoltage(float target) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (target > 450) {
 800189e:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80018dc <setTargetVoltage+0x48>
 80018a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	dd01      	ble.n	80018b4 <setTargetVoltage+0x20>
    target = 450;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <setTargetVoltage+0x4c>)
 80018b2:	607b      	str	r3, [r7, #4]
  }
  if (target < 20) {
 80018b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	d501      	bpl.n	80018ca <setTargetVoltage+0x36>
    target = 20;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <setTargetVoltage+0x50>)
 80018c8:	607b      	str	r3, [r7, #4]
  }
  power_cmd.target_voltage = target;
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <setTargetVoltage+0x54>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6053      	str	r3, [r2, #4]
  // printf("set target voltage = %f\n",power_cmd.target_voltage);
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	43e10000 	.word	0x43e10000
 80018e0:	43e10000 	.word	0x43e10000
 80018e4:	41a00000 	.word	0x41a00000
 80018e8:	20000410 	.word	0x20000410

080018ec <startKick>:
  int boost_cnt;
  bool power_enabled;
  uint16_t error;
} stat;

void startKick(uint8_t power) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if (stat.kick_cnt == 0) {
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <startKick+0x48>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d113      	bne.n	8001926 <startKick+0x3a>
    stat.kick_cnt = 100;
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <startKick+0x48>)
 8001900:	2264      	movs	r2, #100	; 0x64
 8001902:	605a      	str	r2, [r3, #4]
    stat.boost_cnt = 0;
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <startKick+0x48>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
    power_cmd.kick_power = TIM_KICK_PERI * power / 255;
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <startKick+0x4c>)
 8001916:	fb82 1203 	smull	r1, r2, r2, r3
 800191a:	441a      	add	r2, r3
 800191c:	11d2      	asrs	r2, r2, #7
 800191e:	17db      	asrs	r3, r3, #31
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4a06      	ldr	r2, [pc, #24]	; (800193c <startKick+0x50>)
 8001924:	6093      	str	r3, [r2, #8]
    // p("start kick! : %d\n", power_cmd.kick_power);
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000444 	.word	0x20000444
 8001938:	80808081 	.word	0x80808081
 800193c:	20000410 	.word	0x20000410

08001940 <startCharge>:

void startCharge() {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  if (stat.boost_cnt == 0 && stat.kick_cnt == 0) {
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <startCharge+0x28>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <startCharge+0x1c>
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <startCharge+0x28>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <startCharge+0x1c>
    // printf("boost start!!\n");
    stat.boost_cnt = 1000;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <startCharge+0x28>)
 8001956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800195a:	609a      	str	r2, [r3, #8]
  }
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000444 	.word	0x20000444

0800196c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef can_rx_header;

  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, rx.data) != HAL_OK) {
 8001974:	f107 020c 	add.w	r2, r7, #12
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f003 fe5d 	bl	800563c <HAL_CAN_GetRxMessage>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
    /* Reception Error */
    Error_Handler();
 8001988:	f001 fcd5 	bl	8003336 <Error_Handler>
  }

  can_rx_cnt++;
 800198c:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	4a44      	ldr	r2, [pc, #272]	; (8001aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001994:	6013      	str	r3, [r2, #0]
  switch (can_rx_header.StdId) {
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800199c:	d043      	beq.n	8001a26 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
 800199e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80019a2:	d877      	bhi.n	8001a94 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d004      	beq.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
    default:
      break;
    }
    break;
  default:
    break;
 80019ac:	e072      	b.n	8001a94 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
    power_cmd.charge_enabled = false;
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
    break;
 80019b4:	e06f      	b.n	8001a96 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
    switch (rx.data[0]) {
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d82f      	bhi.n	8001a1e <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	080019dd 	.word	0x080019dd
 80019c8:	080019ed 	.word	0x080019ed
 80019cc:	080019f7 	.word	0x080019f7
 80019d0:	08001a01 	.word	0x08001a01
 80019d4:	08001a0b 	.word	0x08001a0b
 80019d8:	08001a15 	.word	0x08001a15
      if (rx.power_en.enable) {
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01e      	beq.n	8001a22 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
        power_cmd.sw_enable_cnt = 100;
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80019e6:	2264      	movs	r2, #100	; 0x64
 80019e8:	60da      	str	r2, [r3, #12]
      break;
 80019ea:	e01a      	b.n	8001a22 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
      power_cmd.min_v = rx.set_protect_param.value;
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80019f2:	6113      	str	r3, [r2, #16]
      break;
 80019f4:	e016      	b.n	8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
      power_cmd.max_v = rx.set_protect_param.value;
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a2b      	ldr	r2, [pc, #172]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80019fc:	6153      	str	r3, [r2, #20]
      break;
 80019fe:	e011      	b.n	8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
      power_cmd.max_c = rx.set_protect_param.value;
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001a06:	6193      	str	r3, [r2, #24]
      break;
 8001a08:	e00c      	b.n	8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
      power_cmd.fet_temp = rx.set_protect_param.value;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001a10:	61d3      	str	r3, [r2, #28]
      break;
 8001a12:	e007      	b.n	8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
      power_cmd.coil_temp = rx.set_protect_param.value;
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001a1a:	6213      	str	r3, [r2, #32]
      break;
 8001a1c:	e002      	b.n	8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e039      	b.n	8001a96 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
      break;
 8001a22:	bf00      	nop
    break;
 8001a24:	e037      	b.n	8001a96 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
    switch (rx.power.idx) {
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d830      	bhi.n	8001a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a55 	.word	0x08001a55
 8001a3c:	08001a71 	.word	0x08001a71
 8001a40:	08001a89 	.word	0x08001a89
      setTargetVoltage(rx.power.value);
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001a46:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	f7ff ff21 	bl	8001894 <setTargetVoltage>
      break;
 8001a52:	e01e      	b.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
      if (rx.data[1] == 1) {
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
        power_cmd.charge_enabled = true;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
        startCharge();
 8001a62:	f7ff ff6d 	bl	8001940 <startCharge>
      break;
 8001a66:	e014      	b.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
        power_cmd.charge_enabled = false;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
      break;
 8001a6e:	e010      	b.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
      if (rx.data[1] == 1) {
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d103      	bne.n	8001a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
        power_cmd.kick_chip_selected = true;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	705a      	strb	r2, [r3, #1]
      break;
 8001a7e:	e008      	b.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
        power_cmd.kick_chip_selected = false;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	705a      	strb	r2, [r3, #1]
      break;
 8001a86:	e004      	b.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
      startKick(255);
 8001a88:	20ff      	movs	r0, #255	; 0xff
 8001a8a:	f7ff ff2f 	bl	80018ec <startKick>
      break;
 8001a8e:	e000      	b.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
      break;
 8001a90:	bf00      	nop
    break;
 8001a92:	e000      	b.n	8001a96 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
    break;
 8001a94:	bf00      	nop
  }
}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000434 	.word	0x20000434
 8001aa4:	20000454 	.word	0x20000454
 8001aa8:	20000410 	.word	0x20000410

08001aac <sendCanMouse>:
  can_data[2] = 1;
  can_data[3] = 1;
  HAL_CAN_AddTxMessage(&hcan, &can_header, can_data, &can_mailbox);
}

void sendCanMouse(int16_t delta_x, int16_t delta_y, uint16_t quality) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	80bb      	strh	r3, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	807b      	strh	r3, [r7, #2]
  can_header.StdId = 0x240;
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <sendCanMouse+0x54>)
 8001ac0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001ac4:	601a      	str	r2, [r3, #0]
  can_header.RTR = CAN_RTR_DATA;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <sendCanMouse+0x54>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  can_header.DLC = 4;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <sendCanMouse+0x54>)
 8001ace:	2204      	movs	r2, #4
 8001ad0:	611a      	str	r2, [r3, #16]
  can_header.TransmitGlobalTime = DISABLE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <sendCanMouse+0x54>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	751a      	strb	r2, [r3, #20]
  tx.mouse.delta_x = delta_x;
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <sendCanMouse+0x58>)
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	8013      	strh	r3, [r2, #0]
  tx.mouse.delta_y = delta_y;
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <sendCanMouse+0x58>)
 8001ae0:	88bb      	ldrh	r3, [r7, #4]
 8001ae2:	8053      	strh	r3, [r2, #2]
  tx.mouse.quality = quality;
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <sendCanMouse+0x58>)
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	8093      	strh	r3, [r2, #4]
  HAL_CAN_AddTxMessage(&hcan, &can_header, tx.data, &can_mailbox);
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <sendCanMouse+0x5c>)
 8001aec:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <sendCanMouse+0x58>)
 8001aee:	4904      	ldr	r1, [pc, #16]	; (8001b00 <sendCanMouse+0x54>)
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <sendCanMouse+0x60>)
 8001af2:	f003 fcc8 	bl	8005486 <HAL_CAN_AddTxMessage>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000458 	.word	0x20000458
 8001b04:	2000043c 	.word	0x2000043c
 8001b08:	20000470 	.word	0x20000470
 8001b0c:	200003e8 	.word	0x200003e8

08001b10 <updateADCs>:
  float batt_v_min, batt_v_max;
  float gd_16p_min, gd_16m_min;
  float batt_cs_max;
} peak;

void updateADCs(void) {
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  sensor.batt_v = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1) * 3.3 / 4096 * 11 / 1;
 8001b14:	2101      	movs	r1, #1
 8001b16:	48de      	ldr	r0, [pc, #888]	; (8001e90 <updateADCs+0x380>)
 8001b18:	f002 fd34 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001b1c:	ee07 0a90 	vmov	s15, r0
 8001b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b24:	ee17 0a90 	vmov	r0, s15
 8001b28:	f7fe fd0e 	bl	8000548 <__aeabi_f2d>
 8001b2c:	a3d6      	add	r3, pc, #856	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fd61 	bl	80005f8 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4bd4      	ldr	r3, [pc, #848]	; (8001e94 <updateADCs+0x384>)
 8001b44:	f7fe fe82 	bl	800084c <__aeabi_ddiv>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4bd0      	ldr	r3, [pc, #832]	; (8001e98 <updateADCs+0x388>)
 8001b56:	f7fe fd4f 	bl	80005f8 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7ff f821 	bl	8000ba8 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4acc      	ldr	r2, [pc, #816]	; (8001e9c <updateADCs+0x38c>)
 8001b6a:	6053      	str	r3, [r2, #4]
  sensor.gd_16p = (float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2) * 3.3 / 4096 * 11 / 1;
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	48c8      	ldr	r0, [pc, #800]	; (8001e90 <updateADCs+0x380>)
 8001b70:	f002 fd08 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001b74:	ee07 0a90 	vmov	s15, r0
 8001b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7c:	ee17 0a90 	vmov	r0, s15
 8001b80:	f7fe fce2 	bl	8000548 <__aeabi_f2d>
 8001b84:	a3c0      	add	r3, pc, #768	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fd35 	bl	80005f8 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4bbe      	ldr	r3, [pc, #760]	; (8001e94 <updateADCs+0x384>)
 8001b9c:	f7fe fe56 	bl	800084c <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4bba      	ldr	r3, [pc, #744]	; (8001e98 <updateADCs+0x388>)
 8001bae:	f7fe fd23 	bl	80005f8 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe fff5 	bl	8000ba8 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4ab6      	ldr	r2, [pc, #728]	; (8001e9c <updateADCs+0x38c>)
 8001bc2:	6093      	str	r3, [r2, #8]
  sensor.gd_16m = (((float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3) * 3.3 / 4096) * 21 - sensor.gd_16p * 11) / 10;
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	48b2      	ldr	r0, [pc, #712]	; (8001e90 <updateADCs+0x380>)
 8001bc8:	f002 fcdc 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001bcc:	ee07 0a90 	vmov	s15, r0
 8001bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fcb6 	bl	8000548 <__aeabi_f2d>
 8001bdc:	a3aa      	add	r3, pc, #680	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fd09 	bl	80005f8 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4ba8      	ldr	r3, [pc, #672]	; (8001e94 <updateADCs+0x384>)
 8001bf4:	f7fe fe2a 	bl	800084c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4ba6      	ldr	r3, [pc, #664]	; (8001ea0 <updateADCs+0x390>)
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4614      	mov	r4, r2
 8001c10:	461d      	mov	r5, r3
 8001c12:	4ba2      	ldr	r3, [pc, #648]	; (8001e9c <updateADCs+0x38c>)
 8001c14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c18:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8001c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c20:	ee17 0a90 	vmov	r0, s15
 8001c24:	f7fe fc90 	bl	8000548 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fb2a 	bl	8000288 <__aeabi_dsub>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b98      	ldr	r3, [pc, #608]	; (8001ea4 <updateADCs+0x394>)
 8001c42:	f7fe fe03 	bl	800084c <__aeabi_ddiv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7fe ffab 	bl	8000ba8 <__aeabi_d2f>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a91      	ldr	r2, [pc, #580]	; (8001e9c <updateADCs+0x38c>)
 8001c56:	60d3      	str	r3, [r2, #12]
  sensor.boost_v = (float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_3) * 213 * 3.3 / 4096;// * 1.038; // 1.038 is calib(v3),
 8001c58:	2103      	movs	r1, #3
 8001c5a:	4893      	ldr	r0, [pc, #588]	; (8001ea8 <updateADCs+0x398>)
 8001c5c:	f002 fc92 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001c60:	ee07 0a90 	vmov	s15, r0
 8001c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c68:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001eac <updateADCs+0x39c>
 8001c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c70:	ee17 0a90 	vmov	r0, s15
 8001c74:	f7fe fc68 	bl	8000548 <__aeabi_f2d>
 8001c78:	a383      	add	r3, pc, #524	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fcbb 	bl	80005f8 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <updateADCs+0x384>)
 8001c90:	f7fe fddc 	bl	800084c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ff84 	bl	8000ba8 <__aeabi_d2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a7e      	ldr	r2, [pc, #504]	; (8001e9c <updateADCs+0x38c>)
 8001ca4:	6013      	str	r3, [r2, #0]
  // 33A-max (v3 board)

  // ZXCT1085 : 25V/V
  //  2m ohm x 25VV -> 50m V / A
  // 66A-max (v4 board)
  sensor.batt_cs = ((float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1) * 3.3 / 4096) * 20 - 2;	// 2A offset is manual offfset (~0.14V~)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	487f      	ldr	r0, [pc, #508]	; (8001ea8 <updateADCs+0x398>)
 8001caa:	f002 fc6b 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001cae:	ee07 0a90 	vmov	s15, r0
 8001cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb6:	ee17 0a90 	vmov	r0, s15
 8001cba:	f7fe fc45 	bl	8000548 <__aeabi_f2d>
 8001cbe:	a372      	add	r3, pc, #456	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fc98 	bl	80005f8 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <updateADCs+0x384>)
 8001cd6:	f7fe fdb9 	bl	800084c <__aeabi_ddiv>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <updateADCs+0x3a0>)
 8001ce8:	f7fe fc86 	bl	80005f8 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfc:	f7fe fac4 	bl	8000288 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff4e 	bl	8000ba8 <__aeabi_d2f>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <updateADCs+0x38c>)
 8001d10:	6113      	str	r3, [r2, #16]
  sensor.temp_fet = (-((float)HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_1) * 3.3 / 4096) + 1.5) * 70 + 25;
 8001d12:	2101      	movs	r1, #1
 8001d14:	4867      	ldr	r0, [pc, #412]	; (8001eb4 <updateADCs+0x3a4>)
 8001d16:	f002 fc35 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001d1a:	ee07 0a90 	vmov	s15, r0
 8001d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fc0f 	bl	8000548 <__aeabi_f2d>
 8001d2a:	a357      	add	r3, pc, #348	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fc62 	bl	80005f8 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <updateADCs+0x384>)
 8001d42:	f7fe fd83 	bl	800084c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	f04f 0000 	mov.w	r0, #0
 8001d4e:	495a      	ldr	r1, [pc, #360]	; (8001eb8 <updateADCs+0x3a8>)
 8001d50:	f7fe fa9a 	bl	8000288 <__aeabi_dsub>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <updateADCs+0x3ac>)
 8001d62:	f7fe fc49 	bl	80005f8 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <updateADCs+0x3b0>)
 8001d74:	f7fe fa8a 	bl	800028c <__adddf3>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe ff12 	bl	8000ba8 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a45      	ldr	r2, [pc, #276]	; (8001e9c <updateADCs+0x38c>)
 8001d88:	61d3      	str	r3, [r2, #28]
  sensor.temp_coil_1 = (-((float)HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_2) * 3.3 / 4096) + 1.5) * 70 + 25;
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4846      	ldr	r0, [pc, #280]	; (8001ea8 <updateADCs+0x398>)
 8001d8e:	f002 fbf9 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001d92:	ee07 0a90 	vmov	s15, r0
 8001d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7fe fbd3 	bl	8000548 <__aeabi_f2d>
 8001da2:	a339      	add	r3, pc, #228	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <updateADCs+0x384>)
 8001dba:	f7fe fd47 	bl	800084c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	493c      	ldr	r1, [pc, #240]	; (8001eb8 <updateADCs+0x3a8>)
 8001dc8:	f7fe fa5e 	bl	8000288 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <updateADCs+0x3ac>)
 8001dda:	f7fe fc0d 	bl	80005f8 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <updateADCs+0x3b0>)
 8001dec:	f7fe fa4e 	bl	800028c <__adddf3>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fed6 	bl	8000ba8 <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <updateADCs+0x38c>)
 8001e00:	6153      	str	r3, [r2, #20]
  sensor.temp_coil_2 = (-((float)HAL_ADCEx_InjectedGetValue(&hadc4, ADC_INJECTED_RANK_2) * 3.3 / 4096) + 1.5) * 70 + 25;
 8001e02:	2102      	movs	r1, #2
 8001e04:	482b      	ldr	r0, [pc, #172]	; (8001eb4 <updateADCs+0x3a4>)
 8001e06:	f002 fbbd 	bl	8004584 <HAL_ADCEx_InjectedGetValue>
 8001e0a:	ee07 0a90 	vmov	s15, r0
 8001e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e12:	ee17 0a90 	vmov	r0, s15
 8001e16:	f7fe fb97 	bl	8000548 <__aeabi_f2d>
 8001e1a:	a31b      	add	r3, pc, #108	; (adr r3, 8001e88 <updateADCs+0x378>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fbea 	bl	80005f8 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <updateADCs+0x384>)
 8001e32:	f7fe fd0b 	bl	800084c <__aeabi_ddiv>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <updateADCs+0x3a8>)
 8001e40:	f7fe fa22 	bl	8000288 <__aeabi_dsub>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <updateADCs+0x3ac>)
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <updateADCs+0x3b0>)
 8001e64:	f7fe fa12 	bl	800028c <__adddf3>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fe9a 	bl	8000ba8 <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <updateADCs+0x38c>)
 8001e78:	6193      	str	r3, [r2, #24]

  // real : normal -> 1.4V
  // 80~100deg -> 0.7V
  // 0.7V / 50 deg ->

  if (sensor.batt_v < peak.batt_v_min) {
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <updateADCs+0x38c>)
 8001e7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e80:	e020      	b.n	8001ec4 <updateADCs+0x3b4>
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	66666666 	.word	0x66666666
 8001e8c:	400a6666 	.word	0x400a6666
 8001e90:	200001fc 	.word	0x200001fc
 8001e94:	40b00000 	.word	0x40b00000
 8001e98:	40260000 	.word	0x40260000
 8001e9c:	20000474 	.word	0x20000474
 8001ea0:	40350000 	.word	0x40350000
 8001ea4:	40240000 	.word	0x40240000
 8001ea8:	2000024c 	.word	0x2000024c
 8001eac:	43550000 	.word	0x43550000
 8001eb0:	40340000 	.word	0x40340000
 8001eb4:	2000029c 	.word	0x2000029c
 8001eb8:	3ff80000 	.word	0x3ff80000
 8001ebc:	40518000 	.word	0x40518000
 8001ec0:	40390000 	.word	0x40390000
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <updateADCs+0x44c>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	d503      	bpl.n	8001edc <updateADCs+0x3cc>
    peak.batt_v_min = sensor.batt_v;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <updateADCs+0x450>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <updateADCs+0x44c>)
 8001eda:	6013      	str	r3, [r2, #0]
  }
  if (sensor.batt_v > peak.batt_v_max) {
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <updateADCs+0x450>)
 8001ede:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <updateADCs+0x44c>)
 8001ee4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	dd03      	ble.n	8001efa <updateADCs+0x3ea>
    peak.batt_v_max = sensor.batt_v;
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <updateADCs+0x450>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <updateADCs+0x44c>)
 8001ef8:	6053      	str	r3, [r2, #4]
  }
  if (sensor.batt_cs > peak.batt_cs_max) {
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <updateADCs+0x450>)
 8001efc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f00:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <updateADCs+0x44c>)
 8001f02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	dd03      	ble.n	8001f18 <updateADCs+0x408>
    peak.batt_cs_max = sensor.batt_cs;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <updateADCs+0x450>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <updateADCs+0x44c>)
 8001f16:	6113      	str	r3, [r2, #16]
  }
  if (sensor.gd_16p < peak.gd_16p_min) {
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <updateADCs+0x450>)
 8001f1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <updateADCs+0x44c>)
 8001f20:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2c:	d503      	bpl.n	8001f36 <updateADCs+0x426>
    peak.gd_16p_min = sensor.gd_16p;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <updateADCs+0x450>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <updateADCs+0x44c>)
 8001f34:	6093      	str	r3, [r2, #8]
  }
  if (sensor.gd_16m > peak.gd_16m_min) {
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <updateADCs+0x450>)
 8001f38:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <updateADCs+0x44c>)
 8001f3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	dc00      	bgt.n	8001f4e <updateADCs+0x43e>
    peak.gd_16m_min = sensor.gd_16m;
  }
}
 8001f4c:	e003      	b.n	8001f56 <updateADCs+0x446>
    peak.gd_16m_min = sensor.gd_16m;
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <updateADCs+0x450>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a02      	ldr	r2, [pc, #8]	; (8001f5c <updateADCs+0x44c>)
 8001f54:	60d3      	str	r3, [r2, #12]
}
 8001f56:	bf00      	nop
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000494 	.word	0x20000494
 8001f60:	20000474 	.word	0x20000474

08001f64 <protecter>:

void protecter(void) {
 8001f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f68:	b08a      	sub	sp, #40	; 0x28
 8001f6a:	af08      	add	r7, sp, #32
  static uint16_t pre_sys_error = NONE;
  if (sensor.batt_v < 20 && stat.power_enabled) {
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <protecter+0x104>)
 8001f6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f72:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d516      	bpl.n	8001fae <protecter+0x4a>
 8001f80:	4b3a      	ldr	r3, [pc, #232]	; (800206c <protecter+0x108>)
 8001f82:	7b1b      	ldrb	r3, [r3, #12]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d011      	beq.n	8001fae <protecter+0x4a>
    stat.error |= UNDER_VOLTAGE;
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <protecter+0x108>)
 8001f8c:	89db      	ldrh	r3, [r3, #14]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b35      	ldr	r3, [pc, #212]	; (800206c <protecter+0x108>)
 8001f98:	81da      	strh	r2, [r3, #14]
    if (pre_sys_error != stat.error) {
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <protecter+0x108>)
 8001f9c:	89db      	ldrh	r3, [r3, #14]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <protecter+0x10c>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d002      	beq.n	8001fae <protecter+0x4a>
      p("\n\n[ERR] UNDER_VOLTAGE\n\n");
 8001fa8:	4832      	ldr	r0, [pc, #200]	; (8002074 <protecter+0x110>)
 8001faa:	f001 fe91 	bl	8003cd0 <p>
    }
  }
  if (sensor.batt_v > 35) {
 8001fae:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <protecter+0x104>)
 8001fb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fb4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002078 <protecter+0x114>
 8001fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	dd11      	ble.n	8001fe6 <protecter+0x82>
    stat.error |= OVER_VOLTAGE;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <protecter+0x108>)
 8001fc4:	89db      	ldrh	r3, [r3, #14]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <protecter+0x108>)
 8001fd0:	81da      	strh	r2, [r3, #14]
    if (pre_sys_error != stat.error) {
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <protecter+0x108>)
 8001fd4:	89db      	ldrh	r3, [r3, #14]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <protecter+0x10c>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d002      	beq.n	8001fe6 <protecter+0x82>
      p("\n\n[ERR] OVER_VOLTAGE\n\n");
 8001fe0:	4826      	ldr	r0, [pc, #152]	; (800207c <protecter+0x118>)
 8001fe2:	f001 fe75 	bl	8003cd0 <p>
    }
  }
  if (sensor.batt_cs > 30) {
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <protecter+0x104>)
 8001fe8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff8:	dd11      	ble.n	800201e <protecter+0xba>
    stat.error |= SHORT_CURCUIT;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <protecter+0x108>)
 8001ffc:	89db      	ldrh	r3, [r3, #14]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <protecter+0x108>)
 8002008:	81da      	strh	r2, [r3, #14]
    if (pre_sys_error != stat.error) {
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <protecter+0x108>)
 800200c:	89db      	ldrh	r3, [r3, #14]
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <protecter+0x10c>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d002      	beq.n	800201e <protecter+0xba>
      p("\n\n[ERR] SHORT_CURCUIT\n\n");
 8002018:	4819      	ldr	r0, [pc, #100]	; (8002080 <protecter+0x11c>)
 800201a:	f001 fe59 	bl	8003cd0 <p>
    }
  }
  if (stat.boost_cnt > 10) {
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <protecter+0x108>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b0a      	cmp	r3, #10
 8002024:	dd30      	ble.n	8002088 <protecter+0x124>
    if (sensor.batt_cs > 25) {
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <protecter+0x104>)
 8002028:	edd3 7a04 	vldr	s15, [r3, #16]
 800202c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	dd45      	ble.n	80020c6 <protecter+0x162>
      stat.error |= OVER_CURRENT;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <protecter+0x108>)
 800203c:	89db      	ldrh	r3, [r3, #14]
 800203e:	b29b      	uxth	r3, r3
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <protecter+0x108>)
 8002048:	81da      	strh	r2, [r3, #14]
      if (pre_sys_error != stat.error) {
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <protecter+0x108>)
 800204c:	89db      	ldrh	r3, [r3, #14]
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <protecter+0x10c>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d036      	beq.n	80020c6 <protecter+0x162>
        p("\n\n[ERR] OVER_CURRENT cnt %d\n\n",stat.boost_cnt);
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <protecter+0x108>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4619      	mov	r1, r3
 800205e:	4809      	ldr	r0, [pc, #36]	; (8002084 <protecter+0x120>)
 8002060:	f001 fe36 	bl	8003cd0 <p>
 8002064:	e02f      	b.n	80020c6 <protecter+0x162>
 8002066:	bf00      	nop
 8002068:	20000474 	.word	0x20000474
 800206c:	20000444 	.word	0x20000444
 8002070:	200004a8 	.word	0x200004a8
 8002074:	0800d5f8 	.word	0x0800d5f8
 8002078:	420c0000 	.word	0x420c0000
 800207c:	0800d610 	.word	0x0800d610
 8002080:	0800d628 	.word	0x0800d628
 8002084:	0800d640 	.word	0x0800d640
      }
    }
  } else {
    if (sensor.batt_cs > 10) {
 8002088:	4b8e      	ldr	r3, [pc, #568]	; (80022c4 <protecter+0x360>)
 800208a:	edd3 7a04 	vldr	s15, [r3, #16]
 800208e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209a:	dd14      	ble.n	80020c6 <protecter+0x162>
      stat.error |= OVER_CURRENT;
 800209c:	4b8a      	ldr	r3, [pc, #552]	; (80022c8 <protecter+0x364>)
 800209e:	89db      	ldrh	r3, [r3, #14]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b87      	ldr	r3, [pc, #540]	; (80022c8 <protecter+0x364>)
 80020aa:	81da      	strh	r2, [r3, #14]
      if (pre_sys_error != stat.error) {
 80020ac:	4b86      	ldr	r3, [pc, #536]	; (80022c8 <protecter+0x364>)
 80020ae:	89db      	ldrh	r3, [r3, #14]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b86      	ldr	r3, [pc, #536]	; (80022cc <protecter+0x368>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d005      	beq.n	80020c6 <protecter+0x162>
        p("\n\n[ERR] OVER_CURRENT %d\n\n",stat.boost_cnt);
 80020ba:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <protecter+0x364>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4619      	mov	r1, r3
 80020c0:	4883      	ldr	r0, [pc, #524]	; (80022d0 <protecter+0x36c>)
 80020c2:	f001 fe05 	bl	8003cd0 <p>
      }
    }
  }
  if (sensor.gd_16p < 10 || sensor.gd_16m > -5) {
 80020c6:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <protecter+0x360>)
 80020c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80020cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	d409      	bmi.n	80020ee <protecter+0x18a>
 80020da:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <protecter+0x360>)
 80020dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80020e0:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80020e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	dd11      	ble.n	8002112 <protecter+0x1ae>
    stat.error |= GD_POWER_FAIL;
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <protecter+0x364>)
 80020f0:	89db      	ldrh	r3, [r3, #14]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <protecter+0x364>)
 80020fc:	81da      	strh	r2, [r3, #14]
    if (pre_sys_error != stat.error) {
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <protecter+0x364>)
 8002100:	89db      	ldrh	r3, [r3, #14]
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b71      	ldr	r3, [pc, #452]	; (80022cc <protecter+0x368>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d002      	beq.n	8002112 <protecter+0x1ae>
      p("\n\n[ERR] GD_POWER_FAIL\n\n");
 800210c:	4871      	ldr	r0, [pc, #452]	; (80022d4 <protecter+0x370>)
 800210e:	f001 fddf 	bl	8003cd0 <p>
    }
  }

  if (sensor.boost_v > 460) {
 8002112:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <protecter+0x360>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80022d8 <protecter+0x374>
 800211c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	dd11      	ble.n	800214a <protecter+0x1e6>
    stat.error |= NO_CAP;
 8002126:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <protecter+0x364>)
 8002128:	89db      	ldrh	r3, [r3, #14]
 800212a:	b29b      	uxth	r3, r3
 800212c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <protecter+0x364>)
 8002134:	81da      	strh	r2, [r3, #14]
    if (pre_sys_error != stat.error) {
 8002136:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <protecter+0x364>)
 8002138:	89db      	ldrh	r3, [r3, #14]
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <protecter+0x368>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d002      	beq.n	800214a <protecter+0x1e6>
      p("\n\n[ERR] NO_CAP\n\n");
 8002144:	4865      	ldr	r0, [pc, #404]	; (80022dc <protecter+0x378>)
 8002146:	f001 fdc3 	bl	8003cd0 <p>
    }
  }

  if (sensor.temp_coil_1 > 60 || sensor.temp_coil_2 > 60) {
 800214a:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <protecter+0x360>)
 800214c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002150:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80022e0 <protecter+0x37c>
 8002154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	dc09      	bgt.n	8002172 <protecter+0x20e>
 800215e:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <protecter+0x360>)
 8002160:	edd3 7a06 	vldr	s15, [r3, #24]
 8002164:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80022e0 <protecter+0x37c>
 8002168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	dd11      	ble.n	8002196 <protecter+0x232>
    stat.error |= COIL_OVER_HEAT;
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <protecter+0x364>)
 8002174:	89db      	ldrh	r3, [r3, #14]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <protecter+0x364>)
 8002180:	81da      	strh	r2, [r3, #14]
    if (pre_sys_error != stat.error) {
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <protecter+0x364>)
 8002184:	89db      	ldrh	r3, [r3, #14]
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <protecter+0x368>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d002      	beq.n	8002196 <protecter+0x232>
      p("\n\n[ERR] COIL_OVER_HEAT\n\n");
 8002190:	4854      	ldr	r0, [pc, #336]	; (80022e4 <protecter+0x380>)
 8002192:	f001 fd9d 	bl	8003cd0 <p>
    }
  }

  if (sensor.temp_fet > 80) {
 8002196:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <protecter+0x360>)
 8002198:	edd3 7a07 	vldr	s15, [r3, #28]
 800219c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80022e8 <protecter+0x384>
 80021a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	dd11      	ble.n	80021ce <protecter+0x26a>
    stat.error |= FET_OVER_HEAT;
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <protecter+0x364>)
 80021ac:	89db      	ldrh	r3, [r3, #14]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b44      	ldr	r3, [pc, #272]	; (80022c8 <protecter+0x364>)
 80021b8:	81da      	strh	r2, [r3, #14]
    if (pre_sys_error != stat.error) {
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <protecter+0x364>)
 80021bc:	89db      	ldrh	r3, [r3, #14]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b42      	ldr	r3, [pc, #264]	; (80022cc <protecter+0x368>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d002      	beq.n	80021ce <protecter+0x26a>
      p("\n\n[ERR] FET_OVER_HEAT\n\n");
 80021c8:	4848      	ldr	r0, [pc, #288]	; (80022ec <protecter+0x388>)
 80021ca:	f001 fd81 	bl	8003cd0 <p>
    }
  }

  if (stat.error && stat.error != pre_sys_error) {
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <protecter+0x364>)
 80021d0:	89db      	ldrh	r3, [r3, #14]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d06b      	beq.n	80022b0 <protecter+0x34c>
 80021d8:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <protecter+0x364>)
 80021da:	89db      	ldrh	r3, [r3, #14]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <protecter+0x368>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d064      	beq.n	80022b0 <protecter+0x34c>
    HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_RESET); // output disable
 80021e6:	2200      	movs	r2, #0
 80021e8:	2104      	movs	r1, #4
 80021ea:	4841      	ldr	r0, [pc, #260]	; (80022f0 <protecter+0x38c>)
 80021ec:	f004 fa5c 	bl	80066a8 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80021f0:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <protecter+0x390>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80021f8:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <protecter+0x390>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002200:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <protecter+0x394>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
    sendCanError(stat.error, 0);
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <protecter+0x364>)
 800220a:	89db      	ldrh	r3, [r3, #14]
 800220c:	b29b      	uxth	r3, r3
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fa41 	bl	8001698 <sendCanError>

    p("[ERR] power line error!!! / battv %6.2f battcs %6.3f / GDp %+5.2f GDm %+5.2f boost %6.2f\n", sensor.batt_v, sensor.batt_cs, sensor.gd_16p,
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <protecter+0x360>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	e9c7 0100 	strd	r0, r1, [r7]
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <protecter+0x360>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f98d 	bl	8000548 <__aeabi_f2d>
 800222e:	4604      	mov	r4, r0
 8002230:	460d      	mov	r5, r1
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <protecter+0x360>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f986 	bl	8000548 <__aeabi_f2d>
 800223c:	4680      	mov	r8, r0
 800223e:	4689      	mov	r9, r1
      sensor.gd_16m, sensor.boost_v);
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <protecter+0x360>)
 8002242:	68db      	ldr	r3, [r3, #12]
    p("[ERR] power line error!!! / battv %6.2f battcs %6.3f / GDp %+5.2f GDm %+5.2f boost %6.2f\n", sensor.batt_v, sensor.batt_cs, sensor.gd_16p,
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f97f 	bl	8000548 <__aeabi_f2d>
 800224a:	4682      	mov	sl, r0
 800224c:	468b      	mov	fp, r1
      sensor.gd_16m, sensor.boost_v);
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <protecter+0x360>)
 8002250:	681b      	ldr	r3, [r3, #0]
    p("[ERR] power line error!!! / battv %6.2f battcs %6.3f / GDp %+5.2f GDm %+5.2f boost %6.2f\n", sensor.batt_v, sensor.batt_cs, sensor.gd_16p,
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f978 	bl	8000548 <__aeabi_f2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002260:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002264:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002268:	e9cd 4500 	strd	r4, r5, [sp]
 800226c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002270:	4822      	ldr	r0, [pc, #136]	; (80022fc <protecter+0x398>)
 8002272:	f001 fd2d 	bl	8003cd0 <p>
    if (stat.error == UNDER_VOLTAGE) {
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <protecter+0x364>)
 8002278:	89db      	ldrh	r3, [r3, #14]
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d111      	bne.n	80022a4 <protecter+0x340>
      // discharge!!
      p("DISCHARGE!!!\n");
 8002280:	481f      	ldr	r0, [pc, #124]	; (8002300 <protecter+0x39c>)
 8002282:	f001 fd25 	bl	8003cd0 <p>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, TIM_KICK_PERI);
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <protecter+0x390>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, TIM_KICK_PERI);
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <protecter+0x390>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(1000);
 800229a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800229e:	f001 fe57 	bl	8003f50 <HAL_Delay>
 80022a2:	e005      	b.n	80022b0 <protecter+0x34c>
    } else {
      stat.kick_cnt = 0;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <protecter+0x364>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
      stat.boost_cnt = 0;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <protecter+0x364>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
    }
  }
  pre_sys_error = stat.error;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <protecter+0x364>)
 80022b2:	89db      	ldrh	r3, [r3, #14]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <protecter+0x368>)
 80022b8:	801a      	strh	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c4:	20000474 	.word	0x20000474
 80022c8:	20000444 	.word	0x20000444
 80022cc:	200004a8 	.word	0x200004a8
 80022d0:	0800d660 	.word	0x0800d660
 80022d4:	0800d67c 	.word	0x0800d67c
 80022d8:	43e60000 	.word	0x43e60000
 80022dc:	0800d694 	.word	0x0800d694
 80022e0:	42700000 	.word	0x42700000
 80022e4:	0800d6a8 	.word	0x0800d6a8
 80022e8:	42a00000 	.word	0x42a00000
 80022ec:	0800d6c4 	.word	0x0800d6c4
 80022f0:	48000400 	.word	0x48000400
 80022f4:	20000564 	.word	0x20000564
 80022f8:	20000518 	.word	0x20000518
 80022fc:	0800d6dc 	.word	0x0800d6dc
 8002300:	0800d738 	.word	0x0800d738

08002304 <boostControl>:

void boostControl(void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af02      	add	r7, sp, #8
  static int temp_pwm_autoreload = 1000, pre_pwm_autoreload = 0;

  if (sensor.boost_v < power_cmd.target_voltage && stat.boost_cnt > 0) {
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <boostControl+0x180>)
 800230c:	ed93 7a00 	vldr	s14, [r3]
 8002310:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <boostControl+0x184>)
 8002312:	edd3 7a01 	vldr	s15, [r3, #4]
 8002316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	f140 8088 	bpl.w	8002432 <boostControl+0x12e>
 8002322:	4b5a      	ldr	r3, [pc, #360]	; (800248c <boostControl+0x188>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f340 8083 	ble.w	8002432 <boostControl+0x12e>
    stat.boost_cnt--;
 800232c:	4b57      	ldr	r3, [pc, #348]	; (800248c <boostControl+0x188>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	4a56      	ldr	r2, [pc, #344]	; (800248c <boostControl+0x188>)
 8002334:	6093      	str	r3, [r2, #8]
    if (sensor.boost_v < 50) {
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <boostControl+0x180>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002490 <boostControl+0x18c>
 8002340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002348:	d504      	bpl.n	8002354 <boostControl+0x50>
      temp_pwm_autoreload = PWM_CNT * 10;
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <boostControl+0x190>)
 800234c:	f242 1234 	movw	r2, #8500	; 0x2134
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e03f      	b.n	80023d4 <boostControl+0xd0>
    } else if (sensor.boost_v < 100) {
 8002354:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <boostControl+0x180>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002498 <boostControl+0x194>
 800235e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	d504      	bpl.n	8002372 <boostControl+0x6e>
      temp_pwm_autoreload = PWM_CNT * 3;
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <boostControl+0x190>)
 800236a:	f640 12f6 	movw	r2, #2550	; 0x9f6
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e030      	b.n	80023d4 <boostControl+0xd0>
    } else if (sensor.boost_v < 200) {
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <boostControl+0x180>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800249c <boostControl+0x198>
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	d504      	bpl.n	8002390 <boostControl+0x8c>
      temp_pwm_autoreload = PWM_CNT * 1.5;
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <boostControl+0x190>)
 8002388:	f240 42fb 	movw	r2, #1275	; 0x4fb
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e021      	b.n	80023d4 <boostControl+0xd0>
    } else if (sensor.boost_v < 300) {
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <boostControl+0x180>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80024a0 <boostControl+0x19c>
 800239a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a2:	d504      	bpl.n	80023ae <boostControl+0xaa>
      temp_pwm_autoreload = PWM_CNT * 1.4;
 80023a4:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <boostControl+0x190>)
 80023a6:	f240 42a6 	movw	r2, #1190	; 0x4a6
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e012      	b.n	80023d4 <boostControl+0xd0>
    } else if (sensor.boost_v < 400) {
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <boostControl+0x180>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80024a4 <boostControl+0x1a0>
 80023b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	d504      	bpl.n	80023cc <boostControl+0xc8>
      temp_pwm_autoreload = PWM_CNT * 1.3;
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <boostControl+0x190>)
 80023c4:	f240 4251 	movw	r2, #1105	; 0x451
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e003      	b.n	80023d4 <boostControl+0xd0>
    } else {
      temp_pwm_autoreload = PWM_CNT * 1.25;
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <boostControl+0x190>)
 80023ce:	f240 4226 	movw	r2, #1062	; 0x426
 80023d2:	601a      	str	r2, [r3, #0]
    }
    if (pre_pwm_autoreload != temp_pwm_autoreload) {
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <boostControl+0x1a4>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <boostControl+0x190>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d00d      	beq.n	80023fc <boostControl+0xf8>
      htim2.Instance->CNT = 0;
 80023e0:	4b32      	ldr	r3, [pc, #200]	; (80024ac <boostControl+0x1a8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_TIM_SET_AUTORELOAD(&htim2, temp_pwm_autoreload);
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <boostControl+0x190>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <boostControl+0x1a8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <boostControl+0x190>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <boostControl+0x1a8>)
 80023fa:	60da      	str	r2, [r3, #12]
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWM_CNT);
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <boostControl+0x1a8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f240 3252 	movw	r2, #850	; 0x352
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
    pre_pwm_autoreload = temp_pwm_autoreload;
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <boostControl+0x190>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <boostControl+0x1a4>)
 800240c:	6013      	str	r3, [r2, #0]

    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002414:	4826      	ldr	r0, [pc, #152]	; (80024b0 <boostControl+0x1ac>)
 8002416:	f004 f947 	bl	80066a8 <HAL_GPIO_WritePin>
    if (stat.boost_cnt == 0) {
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <boostControl+0x188>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d12d      	bne.n	800247e <boostControl+0x17a>
      p("[ERR] boost timeout!!\n");
 8002422:	4824      	ldr	r0, [pc, #144]	; (80024b4 <boostControl+0x1b0>)
 8002424:	f001 fc54 	bl	8003cd0 <p>
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002428:	4b20      	ldr	r3, [pc, #128]	; (80024ac <boostControl+0x1a8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
    if (stat.boost_cnt == 0) {
 8002430:	e025      	b.n	800247e <boostControl+0x17a>
    }
  } else {
    if (stat.boost_cnt != 0) {
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <boostControl+0x188>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <boostControl+0x164>
    	if(stat.boost_cnt < 900){
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <boostControl+0x188>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002442:	da0e      	bge.n	8002462 <boostControl+0x15e>
    	      p("boost end!! / %4.2f V / %3d\n",sensor.boost_v,1000 - stat.boost_cnt);
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <boostControl+0x180>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f87d 	bl	8000548 <__aeabi_f2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <boostControl+0x188>)
 8002454:	6889      	ldr	r1, [r1, #8]
 8002456:	f5c1 717a 	rsb	r1, r1, #1000	; 0x3e8
 800245a:	9100      	str	r1, [sp, #0]
 800245c:	4816      	ldr	r0, [pc, #88]	; (80024b8 <boostControl+0x1b4>)
 800245e:	f001 fc37 	bl	8003cd0 <p>
    	}
      stat.boost_cnt = 0;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <boostControl+0x188>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <boostControl+0x1a8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2200      	movs	r2, #0
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002476:	480e      	ldr	r0, [pc, #56]	; (80024b0 <boostControl+0x1ac>)
 8002478:	f004 f916 	bl	80066a8 <HAL_GPIO_WritePin>
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000474 	.word	0x20000474
 8002488:	20000410 	.word	0x20000410
 800248c:	20000444 	.word	0x20000444
 8002490:	42480000 	.word	0x42480000
 8002494:	20000000 	.word	0x20000000
 8002498:	42c80000 	.word	0x42c80000
 800249c:	43480000 	.word	0x43480000
 80024a0:	43960000 	.word	0x43960000
 80024a4:	43c80000 	.word	0x43c80000
 80024a8:	200004ac 	.word	0x200004ac
 80024ac:	20000518 	.word	0x20000518
 80024b0:	48000800 	.word	0x48000800
 80024b4:	0800d748 	.word	0x0800d748
 80024b8:	0800d760 	.word	0x0800d760

080024bc <kickControl>:

void kickControl(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  if (stat.kick_cnt > 0) {
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <kickControl+0x84>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d030      	beq.n	800252a <kickControl+0x6e>
    // kick!!!
    if (power_cmd.kick_chip_selected) {
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <kickControl+0x88>)
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <kickControl+0x2a>
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, power_cmd.kick_power); // chip
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <kickControl+0x88>)
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <kickControl+0x8c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <kickControl+0x8c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2200      	movs	r2, #0
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34
 80024e4:	e008      	b.n	80024f8 <kickControl+0x3c>
    } else {
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, power_cmd.kick_power); // straight
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <kickControl+0x88>)
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <kickControl+0x8c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <kickControl+0x8c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2200      	movs	r2, #0
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    stat.kick_cnt--;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <kickControl+0x84>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <kickControl+0x84>)
 8002500:	6053      	str	r3, [r2, #4]
    if (stat.kick_cnt == 0) {
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <kickControl+0x84>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d117      	bne.n	800253a <kickControl+0x7e>
      // p("kick end!!\n");
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <kickControl+0x8c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <kickControl+0x8c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
      if (power_cmd.charge_enabled) {
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <kickControl+0x88>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <kickControl+0x7e>
        // p("continue charge!!\n");
        startCharge();
 8002524:	f7ff fa0c 	bl	8001940 <startCharge>
  } else {
    // idol
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
  }
}
 8002528:	e007      	b.n	800253a <kickControl+0x7e>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <kickControl+0x8c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <kickControl+0x8c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000444 	.word	0x20000444
 8002544:	20000410 	.word	0x20000410
 8002548:	20000564 	.word	0x20000564

0800254c <userInterface>:

void userInterface(void) {
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b08e      	sub	sp, #56	; 0x38
 8002552:	af0a      	add	r7, sp, #40	; 0x28

  // User SW control
  if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_RESET) {
 8002554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002558:	4869      	ldr	r0, [pc, #420]	; (8002700 <userInterface+0x1b4>)
 800255a:	f004 f88d 	bl	8006678 <HAL_GPIO_ReadPin>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <userInterface+0x24>
    p("[USR] boost start!!\n");
 8002564:	4867      	ldr	r0, [pc, #412]	; (8002704 <userInterface+0x1b8>)
 8002566:	f001 fbb3 	bl	8003cd0 <p>
    startKick(255);
 800256a:	20ff      	movs	r0, #255	; 0xff
 800256c:	f7ff f9be 	bl	80018ec <startKick>
  }
  if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET) {
 8002570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002574:	4862      	ldr	r0, [pc, #392]	; (8002700 <userInterface+0x1b4>)
 8002576:	f004 f87f 	bl	8006678 <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <userInterface+0x3e>
    p("[USR] boost start!!\n");
 8002580:	4860      	ldr	r0, [pc, #384]	; (8002704 <userInterface+0x1b8>)
 8002582:	f001 fba5 	bl	8003cd0 <p>
    startCharge();
 8002586:	f7ff f9db 	bl	8001940 <startCharge>
  }

  stat.print_loop_cnt++;
 800258a:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <userInterface+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	4a5d      	ldr	r2, [pc, #372]	; (8002708 <userInterface+0x1bc>)
 8002592:	6013      	str	r3, [r2, #0]
  // debug print
  if (stat.print_loop_cnt > 10) {
 8002594:	4b5c      	ldr	r3, [pc, #368]	; (8002708 <userInterface+0x1bc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	f240 8095 	bls.w	80026c8 <userInterface+0x17c>
    // printf("%8ld
    // %8ld\n",HAL_ADCEx_InjectedGetValue(&hadc4,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc4,ADC_INJECTED_RANK_2));
    // HAL_ADCEx_InjectedStart(&hadc1);

    // p("pwm = %d : ",temp_pwm_autoreload);
    if (stat.error) {
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <userInterface+0x1bc>)
 80025a0:	89db      	ldrh	r3, [r3, #14]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <userInterface+0x6c>
      p("E:0x%04x ", stat.error);
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <userInterface+0x1bc>)
 80025aa:	89db      	ldrh	r3, [r3, #14]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4619      	mov	r1, r3
 80025b0:	4856      	ldr	r0, [pc, #344]	; (800270c <userInterface+0x1c0>)
 80025b2:	f001 fb8d 	bl	8003cd0 <p>
 80025b6:	e002      	b.n	80025be <userInterface+0x72>
    } else {
      p("         ");
 80025b8:	4855      	ldr	r0, [pc, #340]	; (8002710 <userInterface+0x1c4>)
 80025ba:	f001 fb89 	bl	8003cd0 <p>
    }
    // p("Vm %3.1f VM %3.1f CM %3.1f DF %3.1f DC %3.1f
    // ",power_cmd.min_v,power_cmd.max_v,power_cmd.max_c,power_cmd.fet_temp,power_cmd.coil_temp);
    p("PW %3d BV %3.0f, CK %d, CH %d / ", power_cmd.sw_enable_cnt, power_cmd.target_voltage, power_cmd.kick_chip_selected, power_cmd.charge_enabled);
 80025be:	4b55      	ldr	r3, [pc, #340]	; (8002714 <userInterface+0x1c8>)
 80025c0:	68dc      	ldr	r4, [r3, #12]
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <userInterface+0x1c8>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffbe 	bl	8000548 <__aeabi_f2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4950      	ldr	r1, [pc, #320]	; (8002714 <userInterface+0x1c8>)
 80025d2:	7849      	ldrb	r1, [r1, #1]
 80025d4:	b2c9      	uxtb	r1, r1
 80025d6:	4608      	mov	r0, r1
 80025d8:	494e      	ldr	r1, [pc, #312]	; (8002714 <userInterface+0x1c8>)
 80025da:	7809      	ldrb	r1, [r1, #0]
 80025dc:	b2c9      	uxtb	r1, r1
 80025de:	9101      	str	r1, [sp, #4]
 80025e0:	9000      	str	r0, [sp, #0]
 80025e2:	4621      	mov	r1, r4
 80025e4:	484c      	ldr	r0, [pc, #304]	; (8002718 <userInterface+0x1cc>)
 80025e6:	f001 fb73 	bl	8003cd0 <p>
    /*p("BattVm %3.1f VM %3.1f GD+ %+4.1f GD- %+4.1f BattCS %+5.1f / ", peak.batt_v_max, peak.batt_v_min, peak.gd_16p_min, peak.gd_16m_min,
      peak.batt_cs_max);*/
    p("%+3d %+3d %4d / ", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 80025ea:	f7fe ff07 	bl	80013fc <get_DeltaX_ADNS3080>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461c      	mov	r4, r3
 80025f2:	f7fe ff0f 	bl	8001414 <get_DeltaY_ADNS3080>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461d      	mov	r5, r3
 80025fa:	f7fe ff17 	bl	800142c <get_Qualty_ADNS3080>
 80025fe:	4603      	mov	r3, r0
 8002600:	462a      	mov	r2, r5
 8002602:	4621      	mov	r1, r4
 8002604:	4845      	ldr	r0, [pc, #276]	; (800271c <userInterface+0x1d0>)
 8002606:	f001 fb63 	bl	8003cd0 <p>
    p("TargetV %5.1f, ",power_cmd.target_voltage);
 800260a:	4b42      	ldr	r3, [pc, #264]	; (8002714 <userInterface+0x1c8>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd ff9a 	bl	8000548 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4841      	ldr	r0, [pc, #260]	; (8002720 <userInterface+0x1d4>)
 800261a:	f001 fb59 	bl	8003cd0 <p>
    p("BattV %3.1f, BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.boost_v, sensor.batt_cs, sensor.temp_fet,
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <userInterface+0x1d8>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff90 	bl	8000548 <__aeabi_f2d>
 8002628:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800262c:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <userInterface+0x1d8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff89 	bl	8000548 <__aeabi_f2d>
 8002636:	4604      	mov	r4, r0
 8002638:	460d      	mov	r5, r1
 800263a:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <userInterface+0x1d8>)
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff82 	bl	8000548 <__aeabi_f2d>
 8002644:	4680      	mov	r8, r0
 8002646:	4689      	mov	r9, r1
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <userInterface+0x1d8>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff7b 	bl	8000548 <__aeabi_f2d>
 8002652:	4682      	mov	sl, r0
 8002654:	468b      	mov	fp, r1
      sensor.temp_coil_1, sensor.temp_coil_2);
 8002656:	4b33      	ldr	r3, [pc, #204]	; (8002724 <userInterface+0x1d8>)
 8002658:	695b      	ldr	r3, [r3, #20]
    p("BattV %3.1f, BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.boost_v, sensor.batt_cs, sensor.temp_fet,
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff74 	bl	8000548 <__aeabi_f2d>
 8002660:	e9c7 0100 	strd	r0, r1, [r7]
      sensor.temp_coil_1, sensor.temp_coil_2);
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <userInterface+0x1d8>)
 8002666:	699b      	ldr	r3, [r3, #24]
    p("BattV %3.1f, BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.boost_v, sensor.batt_cs, sensor.temp_fet,
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff6d 	bl	8000548 <__aeabi_f2d>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002676:	ed97 7b00 	vldr	d7, [r7]
 800267a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800267e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002682:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002686:	e9cd 4500 	strd	r4, r5, [sp]
 800268a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800268e:	4826      	ldr	r0, [pc, #152]	; (8002728 <userInterface+0x1dc>)
 8002690:	f001 fb1e 	bl	8003cd0 <p>
    // printf("adc1 : ch1 %8ld / ch2 %8ld / ch3 %8ld / adc3: ch1 %8ld / ch5 %8ld / ch12 %8ld /
    // adc4 : ch3 %8ld / ch4 %8ld \n", adc1_raw_data[0], adc1_raw_data[1], adc1_raw_data[2],
    // adc3_raw_data[0],adc3_raw_data[1],adc3_raw_data[2],adc4_raw_data[0],adc4_raw_data[1]);
    stat.print_loop_cnt = 0;
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <userInterface+0x1bc>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

    if (!stat.power_enabled && stat.error) {
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <userInterface+0x1bc>)
 800269c:	7b1b      	ldrb	r3, [r3, #12]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f083 0301 	eor.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00e      	beq.n	80026c8 <userInterface+0x17c>
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <userInterface+0x1bc>)
 80026ac:	89db      	ldrh	r3, [r3, #14]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <userInterface+0x17c>
      p("!! clear Error : %d !!\n", stat.error);
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <userInterface+0x1bc>)
 80026b6:	89db      	ldrh	r3, [r3, #14]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	481b      	ldr	r0, [pc, #108]	; (800272c <userInterface+0x1e0>)
 80026be:	f001 fb07 	bl	8003cd0 <p>
      stat.error = 0;
 80026c2:	4b11      	ldr	r3, [pc, #68]	; (8002708 <userInterface+0x1bc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	81da      	strh	r2, [r3, #14]
    }
  }
  // charge-indication
  if (sensor.boost_v > 100) {
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <userInterface+0x1d8>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002730 <userInterface+0x1e4>
 80026d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	dd06      	ble.n	80026ea <userInterface+0x19e>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e2:	4814      	ldr	r0, [pc, #80]	; (8002734 <userInterface+0x1e8>)
 80026e4:	f003 ffe0 	bl	80066a8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
  }
}
 80026e8:	e005      	b.n	80026f6 <userInterface+0x1aa>
    HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f0:	4810      	ldr	r0, [pc, #64]	; (8002734 <userInterface+0x1e8>)
 80026f2:	f003 ffd9 	bl	80066a8 <HAL_GPIO_WritePin>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002700:	48000400 	.word	0x48000400
 8002704:	0800d780 	.word	0x0800d780
 8002708:	20000444 	.word	0x20000444
 800270c:	0800d798 	.word	0x0800d798
 8002710:	0800d7a4 	.word	0x0800d7a4
 8002714:	20000410 	.word	0x20000410
 8002718:	0800d7b0 	.word	0x0800d7b0
 800271c:	0800d7d4 	.word	0x0800d7d4
 8002720:	0800d7e8 	.word	0x0800d7e8
 8002724:	20000474 	.word	0x20000474
 8002728:	0800d7f8 	.word	0x0800d7f8
 800272c:	0800d844 	.word	0x0800d844
 8002730:	42c80000 	.word	0x42c80000
 8002734:	48000800 	.word	0x48000800

08002738 <connectionTest>:



void connectionTest(void) {
 8002738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800273c:	b098      	sub	sp, #96	; 0x60
 800273e:	af0e      	add	r7, sp, #56	; 0x38
  while (1) {
    updateADCs();
 8002740:	f7ff f9e6 	bl	8001b10 <updateADCs>
    HAL_Delay(100);
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	f001 fc03 	bl	8003f50 <HAL_Delay>
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 800274a:	4bb1      	ldr	r3, [pc, #708]	; (8002a10 <connectionTest+0x2d8>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fefa 	bl	8000548 <__aeabi_f2d>
 8002754:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002758:	4bad      	ldr	r3, [pc, #692]	; (8002a10 <connectionTest+0x2d8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fef3 	bl	8000548 <__aeabi_f2d>
 8002762:	4682      	mov	sl, r0
 8002764:	468b      	mov	fp, r1
      sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002766:	4baa      	ldr	r3, [pc, #680]	; (8002a10 <connectionTest+0x2d8>)
 8002768:	68db      	ldr	r3, [r3, #12]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd feec 	bl	8000548 <__aeabi_f2d>
 8002770:	e9c7 0104 	strd	r0, r1, [r7, #16]
      sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002774:	4ba6      	ldr	r3, [pc, #664]	; (8002a10 <connectionTest+0x2d8>)
 8002776:	681b      	ldr	r3, [r3, #0]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fee5 	bl	8000548 <__aeabi_f2d>
 800277e:	e9c7 0102 	strd	r0, r1, [r7, #8]
      sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002782:	4ba3      	ldr	r3, [pc, #652]	; (8002a10 <connectionTest+0x2d8>)
 8002784:	691b      	ldr	r3, [r3, #16]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fede 	bl	8000548 <__aeabi_f2d>
 800278c:	e9c7 0100 	strd	r0, r1, [r7]
      sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002790:	4b9f      	ldr	r3, [pc, #636]	; (8002a10 <connectionTest+0x2d8>)
 8002792:	69db      	ldr	r3, [r3, #28]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fed7 	bl	8000548 <__aeabi_f2d>
 800279a:	4680      	mov	r8, r0
 800279c:	4689      	mov	r9, r1
      sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 800279e:	4b9c      	ldr	r3, [pc, #624]	; (8002a10 <connectionTest+0x2d8>)
 80027a0:	695b      	ldr	r3, [r3, #20]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fed0 	bl	8000548 <__aeabi_f2d>
 80027a8:	4604      	mov	r4, r0
 80027aa:	460d      	mov	r5, r1
      sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80027ac:	4b98      	ldr	r3, [pc, #608]	; (8002a10 <connectionTest+0x2d8>)
 80027ae:	699b      	ldr	r3, [r3, #24]
    p("Pre-test : BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fec9 	bl	8000548 <__aeabi_f2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80027be:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80027c2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80027c6:	ed97 7b00 	vldr	d7, [r7]
 80027ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80027ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80027d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80027d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80027da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80027de:	e9cd ab00 	strd	sl, fp, [sp]
 80027e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e6:	488b      	ldr	r0, [pc, #556]	; (8002a14 <connectionTest+0x2dc>)
 80027e8:	f001 fa72 	bl	8003cd0 <p>
    if (sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < 8 && sensor.batt_cs < 0.1 && sensor.temp_fet < 50 && sensor.temp_coil_1 < 70 &&
 80027ec:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <connectionTest+0x2d8>)
 80027ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80027f2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80027f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fe:	dd4a      	ble.n	8002896 <connectionTest+0x15e>
 8002800:	4b83      	ldr	r3, [pc, #524]	; (8002a10 <connectionTest+0x2d8>)
 8002802:	edd3 7a02 	vldr	s15, [r3, #8]
 8002806:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800280a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	dd40      	ble.n	8002896 <connectionTest+0x15e>
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <connectionTest+0x2d8>)
 8002816:	edd3 7a03 	vldr	s15, [r3, #12]
 800281a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800281e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002826:	d536      	bpl.n	8002896 <connectionTest+0x15e>
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <connectionTest+0x2d8>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe8b 	bl	8000548 <__aeabi_f2d>
 8002832:	a375      	add	r3, pc, #468	; (adr r3, 8002a08 <connectionTest+0x2d0>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fe f950 	bl	8000adc <__aeabi_dcmplt>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d029      	beq.n	8002896 <connectionTest+0x15e>
 8002842:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <connectionTest+0x2d8>)
 8002844:	edd3 7a07 	vldr	s15, [r3, #28]
 8002848:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a18 <connectionTest+0x2e0>
 800284c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d51f      	bpl.n	8002896 <connectionTest+0x15e>
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <connectionTest+0x2d8>)
 8002858:	edd3 7a05 	vldr	s15, [r3, #20]
 800285c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002a1c <connectionTest+0x2e4>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	d515      	bpl.n	8002896 <connectionTest+0x15e>
        sensor.temp_coil_2 < 70) {
 800286a:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <connectionTest+0x2d8>)
 800286c:	edd3 7a06 	vldr	s15, [r3, #24]
    if (sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < 8 && sensor.batt_cs < 0.1 && sensor.temp_fet < 50 && sensor.temp_coil_1 < 70 &&
 8002870:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002a1c <connectionTest+0x2e4>
 8002874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	d50b      	bpl.n	8002896 <connectionTest+0x15e>

      p("Pre-test OK!!\n");
 800287e:	4868      	ldr	r0, [pc, #416]	; (8002a20 <connectionTest+0x2e8>)
 8002880:	f001 fa26 	bl	8003cd0 <p>
      break;
 8002884:	bf00      	nop
    }
  }
  HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET);
 8002886:	2201      	movs	r2, #1
 8002888:	2104      	movs	r1, #4
 800288a:	4866      	ldr	r0, [pc, #408]	; (8002a24 <connectionTest+0x2ec>)
 800288c:	f003 ff0c 	bl	80066a8 <HAL_GPIO_WritePin>
  int timeout_cnt = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
 8002894:	e000      	b.n	8002898 <connectionTest+0x160>
    updateADCs();
 8002896:	e753      	b.n	8002740 <connectionTest+0x8>
  while (1) {
    timeout_cnt++;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	3301      	adds	r3, #1
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    updateADCs();
 800289e:	f7ff f937 	bl	8001b10 <updateADCs>
    if (sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < 8 && sensor.batt_cs < 0.1 && sensor.temp_fet < 60 && sensor.temp_coil_1 < 70 &&
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <connectionTest+0x2d8>)
 80028a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80028a8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80028ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b4:	f340 80c0 	ble.w	8002a38 <connectionTest+0x300>
 80028b8:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <connectionTest+0x2d8>)
 80028ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80028be:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	f340 80b5 	ble.w	8002a38 <connectionTest+0x300>
 80028ce:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <connectionTest+0x2d8>)
 80028d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80028d4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80028d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	f140 80aa 	bpl.w	8002a38 <connectionTest+0x300>
 80028e4:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <connectionTest+0x2d8>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe2d 	bl	8000548 <__aeabi_f2d>
 80028ee:	a346      	add	r3, pc, #280	; (adr r3, 8002a08 <connectionTest+0x2d0>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fe f8f2 	bl	8000adc <__aeabi_dcmplt>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 809c 	beq.w	8002a38 <connectionTest+0x300>
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <connectionTest+0x2d8>)
 8002902:	edd3 7a07 	vldr	s15, [r3, #28]
 8002906:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002a28 <connectionTest+0x2f0>
 800290a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002912:	f140 8091 	bpl.w	8002a38 <connectionTest+0x300>
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <connectionTest+0x2d8>)
 8002918:	edd3 7a05 	vldr	s15, [r3, #20]
 800291c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002a1c <connectionTest+0x2e4>
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	f140 8086 	bpl.w	8002a38 <connectionTest+0x300>
        sensor.temp_coil_2 < 70) {
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <connectionTest+0x2d8>)
 800292e:	edd3 7a06 	vldr	s15, [r3, #24]
    if (sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < 8 && sensor.batt_cs < 0.1 && sensor.temp_fet < 60 && sensor.temp_coil_1 < 70 &&
 8002932:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002a1c <connectionTest+0x2e4>
 8002936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	d57b      	bpl.n	8002a38 <connectionTest+0x300>
      p("PowerOn-test   OK!! cnt %3d : ", timeout_cnt);
 8002940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002942:	483a      	ldr	r0, [pc, #232]	; (8002a2c <connectionTest+0x2f4>)
 8002944:	f001 f9c4 	bl	8003cd0 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <connectionTest+0x2d8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fdfb 	bl	8000548 <__aeabi_f2d>
 8002952:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002956:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <connectionTest+0x2d8>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fdf4 	bl	8000548 <__aeabi_f2d>
 8002960:	4682      	mov	sl, r0
 8002962:	468b      	mov	fp, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <connectionTest+0x2d8>)
 8002966:	68db      	ldr	r3, [r3, #12]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fded 	bl	8000548 <__aeabi_f2d>
 800296e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <connectionTest+0x2d8>)
 8002974:	681b      	ldr	r3, [r3, #0]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fde6 	bl	8000548 <__aeabi_f2d>
 800297c:	e9c7 0102 	strd	r0, r1, [r7, #8]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002980:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <connectionTest+0x2d8>)
 8002982:	691b      	ldr	r3, [r3, #16]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fddf 	bl	8000548 <__aeabi_f2d>
 800298a:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <connectionTest+0x2d8>)
 8002990:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fdd8 	bl	8000548 <__aeabi_f2d>
 8002998:	4680      	mov	r8, r0
 800299a:	4689      	mov	r9, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <connectionTest+0x2d8>)
 800299e:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fdd1 	bl	8000548 <__aeabi_f2d>
 80029a6:	4604      	mov	r4, r0
 80029a8:	460d      	mov	r5, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <connectionTest+0x2d8>)
 80029ac:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fdca 	bl	8000548 <__aeabi_f2d>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80029bc:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80029c0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80029c4:	ed97 7b00 	vldr	d7, [r7]
 80029c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80029cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80029d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80029d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80029d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80029dc:	e9cd ab00 	strd	sl, fp, [sp]
 80029e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e4:	4812      	ldr	r0, [pc, #72]	; (8002a30 <connectionTest+0x2f8>)
 80029e6:	f001 f973 	bl	8003cd0 <p>
      break;
 80029ea:	bf00      	nop
      while (1)
        ;
    }
  }

  timeout_cnt = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, TIM_KICK_PERI / 10);
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <connectionTest+0x2fc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	22c8      	movs	r2, #200	; 0xc8
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, TIM_KICK_PERI / 10);
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <connectionTest+0x2fc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	22c8      	movs	r2, #200	; 0xc8
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002a00:	e07e      	b.n	8002b00 <connectionTest+0x3c8>
 8002a02:	bf00      	nop
 8002a04:	f3af 8000 	nop.w
 8002a08:	9999999a 	.word	0x9999999a
 8002a0c:	3fb99999 	.word	0x3fb99999
 8002a10:	20000474 	.word	0x20000474
 8002a14:	0800d85c 	.word	0x0800d85c
 8002a18:	42480000 	.word	0x42480000
 8002a1c:	428c0000 	.word	0x428c0000
 8002a20:	0800d8cc 	.word	0x0800d8cc
 8002a24:	48000400 	.word	0x48000400
 8002a28:	42700000 	.word	0x42700000
 8002a2c:	0800d8dc 	.word	0x0800d8dc
 8002a30:	0800d8fc 	.word	0x0800d8fc
 8002a34:	20000564 	.word	0x20000564
    if (timeout_cnt > 10) {
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	2b0a      	cmp	r3, #10
 8002a3c:	f77f af2c 	ble.w	8002898 <connectionTest+0x160>
      HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_RESET);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2104      	movs	r1, #4
 8002a44:	4898      	ldr	r0, [pc, #608]	; (8002ca8 <connectionTest+0x570>)
 8002a46:	f003 fe2f 	bl	80066a8 <HAL_GPIO_WritePin>
      p("PowerOn-test FAIL!! : ");
 8002a4a:	4898      	ldr	r0, [pc, #608]	; (8002cac <connectionTest+0x574>)
 8002a4c:	f001 f940 	bl	8003cd0 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002a50:	4b97      	ldr	r3, [pc, #604]	; (8002cb0 <connectionTest+0x578>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd77 	bl	8000548 <__aeabi_f2d>
 8002a5a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002a5e:	4b94      	ldr	r3, [pc, #592]	; (8002cb0 <connectionTest+0x578>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd70 	bl	8000548 <__aeabi_f2d>
 8002a68:	4682      	mov	sl, r0
 8002a6a:	468b      	mov	fp, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002a6c:	4b90      	ldr	r3, [pc, #576]	; (8002cb0 <connectionTest+0x578>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd69 	bl	8000548 <__aeabi_f2d>
 8002a76:	e9c7 0104 	strd	r0, r1, [r7, #16]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002a7a:	4b8d      	ldr	r3, [pc, #564]	; (8002cb0 <connectionTest+0x578>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd62 	bl	8000548 <__aeabi_f2d>
 8002a84:	e9c7 0102 	strd	r0, r1, [r7, #8]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002a88:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <connectionTest+0x578>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd5b 	bl	8000548 <__aeabi_f2d>
 8002a92:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002a96:	4b86      	ldr	r3, [pc, #536]	; (8002cb0 <connectionTest+0x578>)
 8002a98:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd54 	bl	8000548 <__aeabi_f2d>
 8002aa0:	4680      	mov	r8, r0
 8002aa2:	4689      	mov	r9, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002aa4:	4b82      	ldr	r3, [pc, #520]	; (8002cb0 <connectionTest+0x578>)
 8002aa6:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd4d 	bl	8000548 <__aeabi_f2d>
 8002aae:	4604      	mov	r4, r0
 8002ab0:	460d      	mov	r5, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002ab2:	4b7f      	ldr	r3, [pc, #508]	; (8002cb0 <connectionTest+0x578>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd46 	bl	8000548 <__aeabi_f2d>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002ac4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002ac8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002acc:	ed97 7b00 	vldr	d7, [r7]
 8002ad0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002ad4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ad8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002adc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002ae4:	e9cd ab00 	strd	sl, fp, [sp]
 8002ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aec:	4871      	ldr	r0, [pc, #452]	; (8002cb4 <connectionTest+0x57c>)
 8002aee:	f001 f8ef 	bl	8003cd0 <p>
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af8:	486f      	ldr	r0, [pc, #444]	; (8002cb8 <connectionTest+0x580>)
 8002afa:	f003 fdd5 	bl	80066a8 <HAL_GPIO_WritePin>
      while (1)
 8002afe:	e7fe      	b.n	8002afe <connectionTest+0x3c6>

  while (1) {
    timeout_cnt++;
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	3301      	adds	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
    updateADCs();
 8002b06:	f7ff f803 	bl	8001b10 <updateADCs>
    HAL_Delay(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f001 fa20 	bl	8003f50 <HAL_Delay>
    if (sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < 8 && sensor.batt_cs < 0.1 && sensor.temp_fet < 50 && sensor.temp_coil_1 < 70 &&
 8002b10:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <connectionTest+0x578>)
 8002b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b16:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	f340 80d7 	ble.w	8002cd4 <connectionTest+0x59c>
 8002b26:	4b62      	ldr	r3, [pc, #392]	; (8002cb0 <connectionTest+0x578>)
 8002b28:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b2c:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8002b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	f340 80cc 	ble.w	8002cd4 <connectionTest+0x59c>
 8002b3c:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <connectionTest+0x578>)
 8002b3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b42:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	f140 80c1 	bpl.w	8002cd4 <connectionTest+0x59c>
 8002b52:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <connectionTest+0x578>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fcf6 	bl	8000548 <__aeabi_f2d>
 8002b5c:	a350      	add	r3, pc, #320	; (adr r3, 8002ca0 <connectionTest+0x568>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f7fd ffbb 	bl	8000adc <__aeabi_dcmplt>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b3 	beq.w	8002cd4 <connectionTest+0x59c>
 8002b6e:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <connectionTest+0x578>)
 8002b70:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b74:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002cbc <connectionTest+0x584>
 8002b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	f140 80a8 	bpl.w	8002cd4 <connectionTest+0x59c>
 8002b84:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <connectionTest+0x578>)
 8002b86:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b8a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002cc0 <connectionTest+0x588>
 8002b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	f140 809d 	bpl.w	8002cd4 <connectionTest+0x59c>
        sensor.temp_coil_2 < 70 && sensor.boost_v < 20) {
 8002b9a:	4b45      	ldr	r3, [pc, #276]	; (8002cb0 <connectionTest+0x578>)
 8002b9c:	edd3 7a06 	vldr	s15, [r3, #24]
    if (sensor.batt_v > 20 && sensor.gd_16p > 11 && sensor.gd_16m < 8 && sensor.batt_cs < 0.1 && sensor.temp_fet < 50 && sensor.temp_coil_1 < 70 &&
 8002ba0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002cc0 <connectionTest+0x588>
 8002ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	f140 8092 	bpl.w	8002cd4 <connectionTest+0x59c>
        sensor.temp_coil_2 < 70 && sensor.boost_v < 20) {
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <connectionTest+0x578>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc2:	f140 8087 	bpl.w	8002cd4 <connectionTest+0x59c>
      p("DisCharge-test OK!! cnt %3d : ", timeout_cnt);
 8002bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bc8:	483e      	ldr	r0, [pc, #248]	; (8002cc4 <connectionTest+0x58c>)
 8002bca:	f001 f881 	bl	8003cd0 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <connectionTest+0x578>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fcb8 	bl	8000548 <__aeabi_f2d>
 8002bd8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <connectionTest+0x578>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fcb1 	bl	8000548 <__aeabi_f2d>
 8002be6:	4682      	mov	sl, r0
 8002be8:	468b      	mov	fp, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <connectionTest+0x578>)
 8002bec:	68db      	ldr	r3, [r3, #12]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fcaa 	bl	8000548 <__aeabi_f2d>
 8002bf4:	e9c7 0104 	strd	r0, r1, [r7, #16]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <connectionTest+0x578>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fca3 	bl	8000548 <__aeabi_f2d>
 8002c02:	e9c7 0102 	strd	r0, r1, [r7, #8]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <connectionTest+0x578>)
 8002c08:	691b      	ldr	r3, [r3, #16]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fc9c 	bl	8000548 <__aeabi_f2d>
 8002c10:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002c14:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <connectionTest+0x578>)
 8002c16:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fc95 	bl	8000548 <__aeabi_f2d>
 8002c1e:	4680      	mov	r8, r0
 8002c20:	4689      	mov	r9, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <connectionTest+0x578>)
 8002c24:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc8e 	bl	8000548 <__aeabi_f2d>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	460d      	mov	r5, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <connectionTest+0x578>)
 8002c32:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc87 	bl	8000548 <__aeabi_f2d>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002c42:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002c46:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002c4a:	ed97 7b00 	vldr	d7, [r7]
 8002c4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002c52:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c56:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002c5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c62:	e9cd ab00 	strd	sl, fp, [sp]
 8002c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6a:	4812      	ldr	r0, [pc, #72]	; (8002cb4 <connectionTest+0x57c>)
 8002c6c:	f001 f830 	bl	8003cd0 <p>
      break;
 8002c70:	bf00      	nop
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
      while (1)
        ;
    }
  }
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <connectionTest+0x590>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <connectionTest+0x590>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38

  timeout_cnt = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  __HAL_TIM_SET_AUTORELOAD(&htim2, 72000);
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <connectionTest+0x594>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <connectionTest+0x598>)
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <connectionTest+0x594>)
 8002c90:	4a0f      	ldr	r2, [pc, #60]	; (8002cd0 <connectionTest+0x598>)
 8002c92:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100);
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <connectionTest+0x594>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2264      	movs	r2, #100	; 0x64
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c9c:	e07a      	b.n	8002d94 <connectionTest+0x65c>
 8002c9e:	bf00      	nop
 8002ca0:	9999999a 	.word	0x9999999a
 8002ca4:	3fb99999 	.word	0x3fb99999
 8002ca8:	48000400 	.word	0x48000400
 8002cac:	0800d960 	.word	0x0800d960
 8002cb0:	20000474 	.word	0x20000474
 8002cb4:	0800d8fc 	.word	0x0800d8fc
 8002cb8:	48000800 	.word	0x48000800
 8002cbc:	42480000 	.word	0x42480000
 8002cc0:	428c0000 	.word	0x428c0000
 8002cc4:	0800d978 	.word	0x0800d978
 8002cc8:	20000564 	.word	0x20000564
 8002ccc:	20000518 	.word	0x20000518
 8002cd0:	00011940 	.word	0x00011940
    if (timeout_cnt > 1000) {
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cda:	f77f af11 	ble.w	8002b00 <connectionTest+0x3c8>
      p("DisCharge-test FAIL!! : ");
 8002cde:	489f      	ldr	r0, [pc, #636]	; (8002f5c <connectionTest+0x824>)
 8002ce0:	f000 fff6 	bl	8003cd0 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002ce4:	4b9e      	ldr	r3, [pc, #632]	; (8002f60 <connectionTest+0x828>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc2d 	bl	8000548 <__aeabi_f2d>
 8002cee:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002cf2:	4b9b      	ldr	r3, [pc, #620]	; (8002f60 <connectionTest+0x828>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc26 	bl	8000548 <__aeabi_f2d>
 8002cfc:	4682      	mov	sl, r0
 8002cfe:	468b      	mov	fp, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002d00:	4b97      	ldr	r3, [pc, #604]	; (8002f60 <connectionTest+0x828>)
 8002d02:	68db      	ldr	r3, [r3, #12]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc1f 	bl	8000548 <__aeabi_f2d>
 8002d0a:	e9c7 0104 	strd	r0, r1, [r7, #16]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002d0e:	4b94      	ldr	r3, [pc, #592]	; (8002f60 <connectionTest+0x828>)
 8002d10:	681b      	ldr	r3, [r3, #0]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc18 	bl	8000548 <__aeabi_f2d>
 8002d18:	e9c7 0102 	strd	r0, r1, [r7, #8]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002d1c:	4b90      	ldr	r3, [pc, #576]	; (8002f60 <connectionTest+0x828>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc11 	bl	8000548 <__aeabi_f2d>
 8002d26:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	; (8002f60 <connectionTest+0x828>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc0a 	bl	8000548 <__aeabi_f2d>
 8002d34:	4680      	mov	r8, r0
 8002d36:	4689      	mov	r9, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002d38:	4b89      	ldr	r3, [pc, #548]	; (8002f60 <connectionTest+0x828>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc03 	bl	8000548 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002d46:	4b86      	ldr	r3, [pc, #536]	; (8002f60 <connectionTest+0x828>)
 8002d48:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fbfc 	bl	8000548 <__aeabi_f2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002d58:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002d5c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002d60:	ed97 7b00 	vldr	d7, [r7]
 8002d64:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d68:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d70:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d78:	e9cd ab00 	strd	sl, fp, [sp]
 8002d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d80:	4878      	ldr	r0, [pc, #480]	; (8002f64 <connectionTest+0x82c>)
 8002d82:	f000 ffa5 	bl	8003cd0 <p>
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002d86:	2201      	movs	r2, #1
 8002d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d8c:	4876      	ldr	r0, [pc, #472]	; (8002f68 <connectionTest+0x830>)
 8002d8e:	f003 fc8b 	bl	80066a8 <HAL_GPIO_WritePin>
      while (1)
 8002d92:	e7fe      	b.n	8002d92 <connectionTest+0x65a>

  while (1) {

    timeout_cnt++;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	3301      	adds	r3, #1
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
    updateADCs();
 8002d9a:	f7fe feb9 	bl	8001b10 <updateADCs>
    if (sensor.boost_v > 30 || sensor.batt_cs > 1.0) {
 8002d9e:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <connectionTest+0x828>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	dc09      	bgt.n	8002dc6 <connectionTest+0x68e>
 8002db2:	4b6b      	ldr	r3, [pc, #428]	; (8002f60 <connectionTest+0x828>)
 8002db4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002db8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	dd64      	ble.n	8002e90 <connectionTest+0x758>
      HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2104      	movs	r1, #4
 8002dca:	4868      	ldr	r0, [pc, #416]	; (8002f6c <connectionTest+0x834>)
 8002dcc:	f003 fc6c 	bl	80066a8 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002dd0:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <connectionTest+0x838>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
      p("Capacitor-test FAIL!! %d : ", timeout_cnt);
 8002dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dda:	4866      	ldr	r0, [pc, #408]	; (8002f74 <connectionTest+0x83c>)
 8002ddc:	f000 ff78 	bl	8003cd0 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002de0:	4b5f      	ldr	r3, [pc, #380]	; (8002f60 <connectionTest+0x828>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fbaf 	bl	8000548 <__aeabi_f2d>
 8002dea:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002dee:	4b5c      	ldr	r3, [pc, #368]	; (8002f60 <connectionTest+0x828>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fba8 	bl	8000548 <__aeabi_f2d>
 8002df8:	4682      	mov	sl, r0
 8002dfa:	468b      	mov	fp, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002dfc:	4b58      	ldr	r3, [pc, #352]	; (8002f60 <connectionTest+0x828>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fba1 	bl	8000548 <__aeabi_f2d>
 8002e06:	e9c7 0104 	strd	r0, r1, [r7, #16]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002e0a:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <connectionTest+0x828>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb9a 	bl	8000548 <__aeabi_f2d>
 8002e14:	e9c7 0102 	strd	r0, r1, [r7, #8]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002e18:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <connectionTest+0x828>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb93 	bl	8000548 <__aeabi_f2d>
 8002e22:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002e26:	4b4e      	ldr	r3, [pc, #312]	; (8002f60 <connectionTest+0x828>)
 8002e28:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb8c 	bl	8000548 <__aeabi_f2d>
 8002e30:	4680      	mov	r8, r0
 8002e32:	4689      	mov	r9, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002e34:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <connectionTest+0x828>)
 8002e36:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fb85 	bl	8000548 <__aeabi_f2d>
 8002e3e:	4604      	mov	r4, r0
 8002e40:	460d      	mov	r5, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <connectionTest+0x828>)
 8002e44:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb7e 	bl	8000548 <__aeabi_f2d>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002e54:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002e58:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002e5c:	ed97 7b00 	vldr	d7, [r7]
 8002e60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e64:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002e6c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e74:	e9cd ab00 	strd	sl, fp, [sp]
 8002e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7c:	4839      	ldr	r0, [pc, #228]	; (8002f64 <connectionTest+0x82c>)
 8002e7e:	f000 ff27 	bl	8003cd0 <p>
      HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002e82:	2201      	movs	r2, #1
 8002e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e88:	4837      	ldr	r0, [pc, #220]	; (8002f68 <connectionTest+0x830>)
 8002e8a:	f003 fc0d 	bl	80066a8 <HAL_GPIO_WritePin>
      while (1)
 8002e8e:	e7fe      	b.n	8002e8e <connectionTest+0x756>
        ;
    }
    if (timeout_cnt > 100) {
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	dd55      	ble.n	8002f42 <connectionTest+0x80a>
      p("Capacitor-test OK!! cnt %3d : ", timeout_cnt);
 8002e96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e98:	4837      	ldr	r0, [pc, #220]	; (8002f78 <connectionTest+0x840>)
 8002e9a:	f000 ff19 	bl	8003cd0 <p>
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002e9e:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <connectionTest+0x828>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb50 	bl	8000548 <__aeabi_f2d>
 8002ea8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <connectionTest+0x828>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb49 	bl	8000548 <__aeabi_f2d>
 8002eb6:	4682      	mov	sl, r0
 8002eb8:	468b      	mov	fp, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <connectionTest+0x828>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fb42 	bl	8000548 <__aeabi_f2d>
 8002ec4:	e9c7 0104 	strd	r0, r1, [r7, #16]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <connectionTest+0x828>)
 8002eca:	681b      	ldr	r3, [r3, #0]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fb3b 	bl	8000548 <__aeabi_f2d>
 8002ed2:	e9c7 0102 	strd	r0, r1, [r7, #8]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <connectionTest+0x828>)
 8002ed8:	691b      	ldr	r3, [r3, #16]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb34 	bl	8000548 <__aeabi_f2d>
 8002ee0:	e9c7 0100 	strd	r0, r1, [r7]
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <connectionTest+0x828>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fb2d 	bl	8000548 <__aeabi_f2d>
 8002eee:	4680      	mov	r8, r0
 8002ef0:	4689      	mov	r9, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <connectionTest+0x828>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb26 	bl	8000548 <__aeabi_f2d>
 8002efc:	4604      	mov	r4, r0
 8002efe:	460d      	mov	r5, r1
        sensor.gd_16m, sensor.boost_v, sensor.batt_cs, sensor.temp_fet, sensor.temp_coil_1, sensor.temp_coil_2);
 8002f00:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <connectionTest+0x828>)
 8002f02:	699b      	ldr	r3, [r3, #24]
      p("BattV %3.1f, GD+ %+4.1f GD- %+4.1f,BoostV %5.1f, BattCS %+5.1f fet %3.1f coil1 %3.1f coil2 %3.1f\n", sensor.batt_v, sensor.gd_16p,
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fb1f 	bl	8000548 <__aeabi_f2d>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002f12:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002f16:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002f1a:	ed97 7b00 	vldr	d7, [r7]
 8002f1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f22:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f26:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002f2a:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002f32:	e9cd ab00 	strd	sl, fp, [sp]
 8002f36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3a:	480a      	ldr	r0, [pc, #40]	; (8002f64 <connectionTest+0x82c>)
 8002f3c:	f000 fec8 	bl	8003cd0 <p>
      break;
 8002f40:	e003      	b.n	8002f4a <connectionTest+0x812>
    }
    HAL_Delay(1);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f001 f804 	bl	8003f50 <HAL_Delay>
    timeout_cnt++;
 8002f48:	e724      	b.n	8002d94 <connectionTest+0x65c>
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <connectionTest+0x838>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f5c:	0800d998 	.word	0x0800d998
 8002f60:	20000474 	.word	0x20000474
 8002f64:	0800d8fc 	.word	0x0800d8fc
 8002f68:	48000800 	.word	0x48000800
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	20000518 	.word	0x20000518
 8002f74:	0800d9b4 	.word	0x0800d9b4
 8002f78:	0800d9d0 	.word	0x0800d9d0

08002f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f80:	f000 ff80 	bl	8003e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f84:	f000 f976 	bl	8003274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f88:	f7fe fbf2 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f8c:	f7fe fbae 	bl	80016ec <MX_DMA_Init>
  MX_ADC1_Init();
 8002f90:	f7fd fe5a 	bl	8000c48 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002f94:	f7fd feea 	bl	8000d6c <MX_ADC3_Init>
  MX_ADC4_Init();
 8002f98:	f7fd ff7c 	bl	8000e94 <MX_ADC4_Init>
  MX_CAN_Init();
 8002f9c:	f7fe fac6 	bl	800152c <MX_CAN_Init>
  MX_SPI1_Init();
 8002fa0:	f000 f9ce 	bl	8003340 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002fa4:	f000 fbb0 	bl	8003708 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fa8:	f000 fc08 	bl	80037bc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002fac:	f000 fd8c 	bl	8003ac8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002fb0:	f000 fc6a 	bl	8003888 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  p("\n\nstart ORION BOOST v3\n\n");
 8002fb4:	4899      	ldr	r0, [pc, #612]	; (800321c <main+0x2a0>)
 8002fb6:	f000 fe8b 	bl	8003cd0 <p>

  // kick
  HAL_TIM_PWM_Init(&htim3);
 8002fba:	4899      	ldr	r0, [pc, #612]	; (8003220 <main+0x2a4>)
 8002fbc:	f005 fbd2 	bl	8008764 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002fc0:	4b97      	ldr	r3, [pc, #604]	; (8003220 <main+0x2a4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002fc8:	4b95      	ldr	r3, [pc, #596]	; (8003220 <main+0x2a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8002fd0:	4b93      	ldr	r3, [pc, #588]	; (8003220 <main+0x2a4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fda:	4b91      	ldr	r3, [pc, #580]	; (8003220 <main+0x2a4>)
 8002fdc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002fe0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim3, TIM_KICK_PERI);
 8002fe2:	4b8f      	ldr	r3, [pc, #572]	; (8003220 <main+0x2a4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fec:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <main+0x2a4>)
 8002fee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ff2:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	488a      	ldr	r0, [pc, #552]	; (8003220 <main+0x2a4>)
 8002ff8:	f005 fc0c 	bl	8008814 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4888      	ldr	r0, [pc, #544]	; (8003220 <main+0x2a4>)
 8003000:	f005 fc08 	bl	8008814 <HAL_TIM_PWM_Start>

  // boost
  HAL_TIM_PWM_Init(&htim2);
 8003004:	4887      	ldr	r0, [pc, #540]	; (8003224 <main+0x2a8>)
 8003006:	f005 fbad 	bl	8008764 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800300a:	4b86      	ldr	r3, [pc, #536]	; (8003224 <main+0x2a8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2200      	movs	r2, #0
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 8003012:	4b84      	ldr	r3, [pc, #528]	; (8003224 <main+0x2a8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
 800301c:	4b81      	ldr	r3, [pc, #516]	; (8003224 <main+0x2a8>)
 800301e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003022:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003024:	210c      	movs	r1, #12
 8003026:	487f      	ldr	r0, [pc, #508]	; (8003224 <main+0x2a8>)
 8003028:	f005 fbf4 	bl	8008814 <HAL_TIM_PWM_Start>

  // GD negative PS
  HAL_TIM_PWM_Init(&htim4);
 800302c:	487e      	ldr	r0, [pc, #504]	; (8003228 <main+0x2ac>)
 800302e:	f005 fb99 	bl	8008764 <HAL_TIM_PWM_Init>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1000);
 8003032:	4b7d      	ldr	r3, [pc, #500]	; (8003228 <main+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_AUTORELOAD(&htim4, 2000);
 800303c:	4b7a      	ldr	r3, [pc, #488]	; (8003228 <main+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c
 8003046:	4b78      	ldr	r3, [pc, #480]	; (8003228 <main+0x2ac>)
 8003048:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800304c:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800304e:	2104      	movs	r1, #4
 8003050:	4875      	ldr	r0, [pc, #468]	; (8003228 <main+0x2ac>)
 8003052:	f005 fbdf 	bl	8008814 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 8003056:	2064      	movs	r0, #100	; 0x64
 8003058:	f000 ff7a 	bl	8003f50 <HAL_Delay>
  // wait charging

  // can init
  CAN_Filter_Init();
 800305c:	f7fe fae8 	bl	8001630 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8003060:	4872      	ldr	r0, [pc, #456]	; (800322c <main+0x2b0>)
 8003062:	f002 f9cc 	bl	80053fe <HAL_CAN_Start>

  setbuf(stdout, NULL);
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <main+0x2b4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f007 ff56 	bl	800af20 <setbuf>

  HAL_UART_Init(&huart1);
 8003074:	486f      	ldr	r0, [pc, #444]	; (8003234 <main+0x2b8>)
 8003076:	f006 f9ed 	bl	8009454 <HAL_UART_Init>

  HAL_ADC_Start(&hadc1);
 800307a:	486f      	ldr	r0, [pc, #444]	; (8003238 <main+0x2bc>)
 800307c:	f001 f96c 	bl	8004358 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8003080:	486e      	ldr	r0, [pc, #440]	; (800323c <main+0x2c0>)
 8003082:	f001 f969 	bl	8004358 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc4);
 8003086:	486e      	ldr	r0, [pc, #440]	; (8003240 <main+0x2c4>)
 8003088:	f001 f966 	bl	8004358 <HAL_ADC_Start>

  HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_RESET);
 800308c:	2200      	movs	r2, #0
 800308e:	2110      	movs	r1, #16
 8003090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003094:	f003 fb08 	bl	80066a8 <HAL_GPIO_WritePin>
      HAL_Delay(100);
      sendCan();
      p("can rx : %d\n",can_rx_cnt);
      can_rx_cnt = 0;
  }*/
  if (is_connect_ADNS3080()) {
 8003098:	f7fe f8e0 	bl	800125c <is_connect_ADNS3080>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00e      	beq.n	80030c0 <main+0x144>
    p("ADNS3080 OK!\n");
 80030a2:	4868      	ldr	r0, [pc, #416]	; (8003244 <main+0x2c8>)
 80030a4:	f000 fe14 	bl	8003cd0 <p>
    while (1) {
      /* code */
    }
  }

  init_ADNS3080(true);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7fe f905 	bl	80012b8 <init_ADNS3080>

  if (HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_RESET) {
 80030ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b2:	4865      	ldr	r0, [pc, #404]	; (8003248 <main+0x2cc>)
 80030b4:	f003 fae0 	bl	8006678 <HAL_GPIO_ReadPin>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d123      	bne.n	8003106 <main+0x18a>
 80030be:	e003      	b.n	80030c8 <main+0x14c>
    p("ADNS3080 not found...\n");
 80030c0:	4862      	ldr	r0, [pc, #392]	; (800324c <main+0x2d0>)
 80030c2:	f000 fe05 	bl	8003cd0 <p>
    while (1) {
 80030c6:	e7fe      	b.n	80030c6 <main+0x14a>
    HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);
 80030c8:	2201      	movs	r2, #1
 80030ca:	2110      	movs	r1, #16
 80030cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d0:	f003 faea 	bl	80066a8 <HAL_GPIO_WritePin>

    while (true) {
      // frame_print_ADNS3080();
      HAL_Delay(1);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f000 ff3b 	bl	8003f50 <HAL_Delay>

      update_ADNS3080();
 80030da:	f7fe f943 	bl	8001364 <update_ADNS3080>
      p("\n\n%+3d %+3d %4d\n\n", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 80030de:	f7fe f98d 	bl	80013fc <get_DeltaX_ADNS3080>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461c      	mov	r4, r3
 80030e6:	f7fe f995 	bl	8001414 <get_DeltaY_ADNS3080>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461d      	mov	r5, r3
 80030ee:	f7fe f99d 	bl	800142c <get_Qualty_ADNS3080>
 80030f2:	4603      	mov	r3, r0
 80030f4:	462a      	mov	r2, r5
 80030f6:	4621      	mov	r1, r4
 80030f8:	4855      	ldr	r0, [pc, #340]	; (8003250 <main+0x2d4>)
 80030fa:	f000 fde9 	bl	8003cd0 <p>
      HAL_Delay(100);
 80030fe:	2064      	movs	r0, #100	; 0x64
 8003100:	f000 ff26 	bl	8003f50 <HAL_Delay>
      HAL_Delay(1);
 8003104:	e7e6      	b.n	80030d4 <main+0x158>
    }
  }
  if (HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_RESET) {
 8003106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800310a:	484f      	ldr	r0, [pc, #316]	; (8003248 <main+0x2cc>)
 800310c:	f003 fab4 	bl	8006678 <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <main+0x1b2>

    HAL_GPIO_WritePin(LED_CURRENT_GPIO_Port, LED_CURRENT_Pin, GPIO_PIN_SET);
 8003116:	2201      	movs	r2, #1
 8003118:	2110      	movs	r1, #16
 800311a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311e:	f003 fac3 	bl	80066a8 <HAL_GPIO_WritePin>
    while (true) {
      frame_print_ADNS3080();
 8003122:	f7fe f98f 	bl	8001444 <frame_print_ADNS3080>
      HAL_Delay(1);
 8003126:	2001      	movs	r0, #1
 8003128:	f000 ff12 	bl	8003f50 <HAL_Delay>
      frame_print_ADNS3080();
 800312c:	e7f9      	b.n	8003122 <main+0x1a6>
      // p("\n\n%+3d %+3d %4d\n\n", get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(),
      // get_Qualty_ADNS3080()); HAL_Delay(100);
    }
  }

  setTargetVoltage(450);
 800312e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003254 <main+0x2d8>
 8003132:	f7fe fbaf 	bl	8001894 <setTargetVoltage>
  peak.batt_v_min = 30;
 8003136:	4b48      	ldr	r3, [pc, #288]	; (8003258 <main+0x2dc>)
 8003138:	4a48      	ldr	r2, [pc, #288]	; (800325c <main+0x2e0>)
 800313a:	601a      	str	r2, [r3, #0]
  peak.gd_16m_min = -10;
 800313c:	4b46      	ldr	r3, [pc, #280]	; (8003258 <main+0x2dc>)
 800313e:	4a48      	ldr	r2, [pc, #288]	; (8003260 <main+0x2e4>)
 8003140:	60da      	str	r2, [r3, #12]
  peak.gd_16p_min = 20;
 8003142:	4b45      	ldr	r3, [pc, #276]	; (8003258 <main+0x2dc>)
 8003144:	4a47      	ldr	r2, [pc, #284]	; (8003264 <main+0x2e8>)
 8003146:	609a      	str	r2, [r3, #8]

  connectionTest();
 8003148:	f7ff faf6 	bl	8002738 <connectionTest>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    update_ADNS3080();
 800314c:	f7fe f90a 	bl	8001364 <update_ADNS3080>
    sendCanMouse(get_DeltaX_ADNS3080(), get_DeltaY_ADNS3080(), get_Qualty_ADNS3080());
 8003150:	f7fe f954 	bl	80013fc <get_DeltaX_ADNS3080>
 8003154:	4603      	mov	r3, r0
 8003156:	b21c      	sxth	r4, r3
 8003158:	f7fe f95c 	bl	8001414 <get_DeltaY_ADNS3080>
 800315c:	4603      	mov	r3, r0
 800315e:	b21d      	sxth	r5, r3
 8003160:	f7fe f964 	bl	800142c <get_Qualty_ADNS3080>
 8003164:	4603      	mov	r3, r0
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4629      	mov	r1, r5
 800316c:	4620      	mov	r0, r4
 800316e:	f7fe fc9d 	bl	8001aac <sendCanMouse>

    HAL_Delay(1);
 8003172:	2001      	movs	r0, #1
 8003174:	f000 feec 	bl	8003f50 <HAL_Delay>

    updateADCs();
 8003178:	f7fe fcca 	bl	8001b10 <updateADCs>
    protecter();
 800317c:	f7fe fef2 	bl	8001f64 <protecter>
    userInterface();
 8003180:	f7ff f9e4 	bl	800254c <userInterface>

    if (power_cmd.sw_enable_cnt > 0) {
 8003184:	4b38      	ldr	r3, [pc, #224]	; (8003268 <main+0x2ec>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	dd0d      	ble.n	80031a8 <main+0x22c>
      power_cmd.sw_enable_cnt -= 1;
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <main+0x2ec>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	3b01      	subs	r3, #1
 8003192:	4a35      	ldr	r2, [pc, #212]	; (8003268 <main+0x2ec>)
 8003194:	60d3      	str	r3, [r2, #12]
      HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_SET);
 8003196:	2201      	movs	r2, #1
 8003198:	2104      	movs	r1, #4
 800319a:	482b      	ldr	r0, [pc, #172]	; (8003248 <main+0x2cc>)
 800319c:	f003 fa84 	bl	80066a8 <HAL_GPIO_WritePin>
      stat.power_enabled = true;
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <main+0x2f0>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	731a      	strb	r2, [r3, #12]
 80031a6:	e007      	b.n	80031b8 <main+0x23c>
    } else {
      HAL_GPIO_WritePin(POWER_SW_EN_GPIO_Port, POWER_SW_EN_Pin, GPIO_PIN_RESET);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2104      	movs	r1, #4
 80031ac:	4826      	ldr	r0, [pc, #152]	; (8003248 <main+0x2cc>)
 80031ae:	f003 fa7b 	bl	80066a8 <HAL_GPIO_WritePin>
      stat.power_enabled = false;
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <main+0x2f0>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	731a      	strb	r2, [r3, #12]
    }

    if (stat.error || !stat.power_enabled) {
 80031b8:	4b2c      	ldr	r3, [pc, #176]	; (800326c <main+0x2f0>)
 80031ba:	89db      	ldrh	r3, [r3, #14]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <main+0x256>
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <main+0x2f0>)
 80031c4:	7b1b      	ldrb	r3, [r3, #12]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d018      	beq.n	8003204 <main+0x288>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <main+0x2a4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2200      	movs	r2, #0
 80031d8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <main+0x2a4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2200      	movs	r2, #0
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <main+0x2a8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40

        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80031ea:	2201      	movs	r2, #1
 80031ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031f0:	481f      	ldr	r0, [pc, #124]	; (8003270 <main+0x2f4>)
 80031f2:	f003 fa59 	bl	80066a8 <HAL_GPIO_WritePin>
        stat.boost_cnt = 0;
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <main+0x2f0>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
        stat.kick_cnt = 0;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <main+0x2f0>)
 80031fe:	2200      	movs	r2, #0
 8003200:	605a      	str	r2, [r3, #4]
        continue;
 8003202:	e009      	b.n	8003218 <main+0x29c>
    }else{
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800320a:	4819      	ldr	r0, [pc, #100]	; (8003270 <main+0x2f4>)
 800320c:	f003 fa4c 	bl	80066a8 <HAL_GPIO_WritePin>
    }

    kickControl();
 8003210:	f7ff f954 	bl	80024bc <kickControl>
    boostControl();
 8003214:	f7ff f876 	bl	8002304 <boostControl>
    update_ADNS3080();
 8003218:	e798      	b.n	800314c <main+0x1d0>
 800321a:	bf00      	nop
 800321c:	0800d9f0 	.word	0x0800d9f0
 8003220:	20000564 	.word	0x20000564
 8003224:	20000518 	.word	0x20000518
 8003228:	200005b0 	.word	0x200005b0
 800322c:	200003e8 	.word	0x200003e8
 8003230:	20000010 	.word	0x20000010
 8003234:	200005fc 	.word	0x200005fc
 8003238:	200001fc 	.word	0x200001fc
 800323c:	2000024c 	.word	0x2000024c
 8003240:	2000029c 	.word	0x2000029c
 8003244:	0800da0c 	.word	0x0800da0c
 8003248:	48000400 	.word	0x48000400
 800324c:	0800da1c 	.word	0x0800da1c
 8003250:	0800da34 	.word	0x0800da34
 8003254:	43e10000 	.word	0x43e10000
 8003258:	20000494 	.word	0x20000494
 800325c:	41f00000 	.word	0x41f00000
 8003260:	c1200000 	.word	0xc1200000
 8003264:	41a00000 	.word	0x41a00000
 8003268:	20000410 	.word	0x20000410
 800326c:	20000444 	.word	0x20000444
 8003270:	48000800 	.word	0x48000800

08003274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b09e      	sub	sp, #120	; 0x78
 8003278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800327a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800327e:	2228      	movs	r2, #40	; 0x28
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f007 f9da 	bl	800a63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003298:	463b      	mov	r3, r7
 800329a:	223c      	movs	r2, #60	; 0x3c
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f007 f9cc 	bl	800a63c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032b2:	2301      	movs	r3, #1
 80032b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032b6:	2302      	movs	r3, #2
 80032b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80032c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80032c4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fa04 	bl	80066d8 <HAL_RCC_OscConfig>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80032d6:	f000 f82e 	bl	8003336 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032da:	230f      	movs	r3, #15
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032de:	2302      	movs	r3, #2
 80032e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e2:	2300      	movs	r3, #0
 80032e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ec:	2300      	movs	r3, #0
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032f4:	2102      	movs	r1, #2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fa2c 	bl	8007754 <HAL_RCC_ClockConfig>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003302:	f000 f818 	bl	8003336 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 8003306:	f240 1381 	movw	r3, #385	; 0x181
 800330a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800331c:	463b      	mov	r3, r7
 800331e:	4618      	mov	r0, r3
 8003320:	f004 fc4e 	bl	8007bc0 <HAL_RCCEx_PeriphCLKConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800332a:	f000 f804 	bl	8003336 <Error_Handler>
  }
}
 800332e:	bf00      	nop
 8003330:	3778      	adds	r7, #120	; 0x78
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800333a:	b672      	cpsid	i
}
 800333c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800333e:	e7fe      	b.n	800333e <Error_Handler+0x8>

08003340 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <MX_SPI1_Init+0x78>)
 8003348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <MX_SPI1_Init+0x74>)
 800334c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003352:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <MX_SPI1_Init+0x74>)
 800335a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800335e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003360:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003362:	2202      	movs	r2, #2
 8003364:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003368:	2201      	movs	r2, #1
 800336a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_SPI1_Init+0x74>)
 800336e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003372:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003376:	2228      	movs	r2, #40	; 0x28
 8003378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <MX_SPI1_Init+0x74>)
 800337c:	2200      	movs	r2, #0
 800337e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003382:	2200      	movs	r2, #0
 8003384:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003388:	2200      	movs	r2, #0
 800338a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <MX_SPI1_Init+0x74>)
 800338e:	2207      	movs	r2, #7
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <MX_SPI1_Init+0x74>)
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <MX_SPI1_Init+0x74>)
 800339a:	2200      	movs	r2, #0
 800339c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <MX_SPI1_Init+0x74>)
 80033a0:	f004 fdbe 	bl	8007f20 <HAL_SPI_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80033aa:	f7ff ffc4 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200004b0 	.word	0x200004b0
 80033b8:	40013000 	.word	0x40013000

080033bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_SPI_MspInit+0x7c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d127      	bne.n	800342e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_SPI_MspInit+0x80>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_SPI_MspInit+0x80>)
 80033e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033e8:	6193      	str	r3, [r2, #24]
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_SPI_MspInit+0x80>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_SPI_MspInit+0x80>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4a10      	ldr	r2, [pc, #64]	; (800343c <HAL_SPI_MspInit+0x80>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6153      	str	r3, [r2, #20]
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_SPI_MspInit+0x80>)
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800340e:	2338      	movs	r3, #56	; 0x38
 8003410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003412:	2302      	movs	r3, #2
 8003414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800341a:	2303      	movs	r3, #3
 800341c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800341e:	2305      	movs	r3, #5
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	4805      	ldr	r0, [pc, #20]	; (8003440 <HAL_SPI_MspInit+0x84>)
 800342a:	f002 ffab 	bl	8006384 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800342e:	bf00      	nop
 8003430:	3728      	adds	r7, #40	; 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40013000 	.word	0x40013000
 800343c:	40021000 	.word	0x40021000
 8003440:	48000400 	.word	0x48000400

08003444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <HAL_MspInit+0x44>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <HAL_MspInit+0x44>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6193      	str	r3, [r2, #24]
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_MspInit+0x44>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_MspInit+0x44>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4a08      	ldr	r2, [pc, #32]	; (8003488 <HAL_MspInit+0x44>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	61d3      	str	r3, [r2, #28]
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_MspInit+0x44>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000

0800348c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <NMI_Handler+0x4>

08003492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <HardFault_Handler+0x4>

08003498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <MemManage_Handler+0x4>

0800349e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a2:	e7fe      	b.n	80034a2 <BusFault_Handler+0x4>

080034a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <UsageFault_Handler+0x4>

080034aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d8:	f000 fd1a 	bl	8003f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <DMA1_Channel1_IRQHandler+0x10>)
 80034e6:	f002 fe3f 	bl	8006168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200002ec 	.word	0x200002ec

080034f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <DMA1_Channel4_IRQHandler+0x10>)
 80034fa:	f002 fe35 	bl	8006168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000680 	.word	0x20000680

08003508 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800350e:	f002 f9cd 	bl	80058ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200003e8 	.word	0x200003e8

0800351c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <USART1_IRQHandler+0x10>)
 8003522:	f006 f875 	bl	8009610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200005fc 	.word	0x200005fc

08003530 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <DMA2_Channel2_IRQHandler+0x10>)
 8003536:	f002 fe17 	bl	8006168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000374 	.word	0x20000374

08003544 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <DMA2_Channel5_IRQHandler+0x10>)
 800354a:	f002 fe0d 	bl	8006168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000330 	.word	0x20000330

08003558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
	return 1;
 800355c:	2301      	movs	r3, #1
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_kill>:

int _kill(int pid, int sig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003572:	f007 f839 	bl	800a5e8 <__errno>
 8003576:	4603      	mov	r3, r0
 8003578:	2216      	movs	r2, #22
 800357a:	601a      	str	r2, [r3, #0]
	return -1;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_exit>:

void _exit (int status)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ffe7 	bl	8003568 <_kill>
	while (1) {}		/* Make sure we hang here */
 800359a:	e7fe      	b.n	800359a <_exit+0x12>

0800359c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e00a      	b.n	80035c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035ae:	f3af 8000 	nop.w
 80035b2:	4601      	mov	r1, r0
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60ba      	str	r2, [r7, #8]
 80035ba:	b2ca      	uxtb	r2, r1
 80035bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dbf0      	blt.n	80035ae <_read+0x12>
	}

return len;
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e009      	b.n	80035fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	60ba      	str	r2, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	3301      	adds	r3, #1
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	dbf1      	blt.n	80035e8 <_write+0x12>
	}
	return len;
 8003604:	687b      	ldr	r3, [r7, #4]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_close>:

int _close(int file)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
	return -1;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003636:	605a      	str	r2, [r3, #4]
	return 0;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_isatty>:

int _isatty(int file)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
	return 1;
 800364e:	2301      	movs	r3, #1
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	return 0;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003680:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <_sbrk+0x5c>)
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <_sbrk+0x60>)
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <_sbrk+0x64>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <_sbrk+0x64>)
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <_sbrk+0x68>)
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <_sbrk+0x64>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a8:	f006 ff9e 	bl	800a5e8 <__errno>
 80036ac:	4603      	mov	r3, r0
 80036ae:	220c      	movs	r2, #12
 80036b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
 80036b6:	e009      	b.n	80036cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <_sbrk+0x64>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <_sbrk+0x64>)
 80036c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20008000 	.word	0x20008000
 80036d8:	00000400 	.word	0x00000400
 80036dc:	20000514 	.word	0x20000514
 80036e0:	20000d28 	.word	0x20000d28

080036e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <SystemInit+0x20>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <SystemInit+0x20>)
 80036f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371a:	463b      	mov	r3, r7
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
 8003728:	615a      	str	r2, [r3, #20]
 800372a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <MX_TIM2_Init+0xb0>)
 800372e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <MX_TIM2_Init+0xb0>)
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <MX_TIM2_Init+0xb0>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <MX_TIM2_Init+0xb0>)
 8003742:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <MX_TIM2_Init+0xb0>)
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <MX_TIM2_Init+0xb0>)
 8003750:	2200      	movs	r2, #0
 8003752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003754:	4818      	ldr	r0, [pc, #96]	; (80037b8 <MX_TIM2_Init+0xb0>)
 8003756:	f005 f805 	bl	8008764 <HAL_TIM_PWM_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003760:	f7ff fde9 	bl	8003336 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	4619      	mov	r1, r3
 8003772:	4811      	ldr	r0, [pc, #68]	; (80037b8 <MX_TIM2_Init+0xb0>)
 8003774:	f005 fdee 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800377e:	f7ff fdda 	bl	8003336 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003782:	2360      	movs	r3, #96	; 0x60
 8003784:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003792:	463b      	mov	r3, r7
 8003794:	220c      	movs	r2, #12
 8003796:	4619      	mov	r1, r3
 8003798:	4807      	ldr	r0, [pc, #28]	; (80037b8 <MX_TIM2_Init+0xb0>)
 800379a:	f005 f93b 	bl	8008a14 <HAL_TIM_PWM_ConfigChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80037a4:	f7ff fdc7 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037a8:	4803      	ldr	r0, [pc, #12]	; (80037b8 <MX_TIM2_Init+0xb0>)
 80037aa:	f000 f90d 	bl	80039c8 <HAL_TIM_MspPostInit>

}
 80037ae:	bf00      	nop
 80037b0:	3728      	adds	r7, #40	; 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000518 	.word	0x20000518

080037bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c2:	f107 031c 	add.w	r3, r7, #28
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037ce:	463b      	mov	r3, r7
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
 80037dc:	615a      	str	r2, [r3, #20]
 80037de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <MX_TIM3_Init+0xc4>)
 80037e2:	4a28      	ldr	r2, [pc, #160]	; (8003884 <MX_TIM3_Init+0xc8>)
 80037e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037e6:	4b26      	ldr	r3, [pc, #152]	; (8003880 <MX_TIM3_Init+0xc4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <MX_TIM3_Init+0xc4>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3600;
 80037f2:	4b23      	ldr	r3, [pc, #140]	; (8003880 <MX_TIM3_Init+0xc4>)
 80037f4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80037f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037fa:	4b21      	ldr	r3, [pc, #132]	; (8003880 <MX_TIM3_Init+0xc4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <MX_TIM3_Init+0xc4>)
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003806:	481e      	ldr	r0, [pc, #120]	; (8003880 <MX_TIM3_Init+0xc4>)
 8003808:	f004 ffac 	bl	8008764 <HAL_TIM_PWM_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003812:	f7ff fd90 	bl	8003336 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381a:	2300      	movs	r3, #0
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800381e:	f107 031c 	add.w	r3, r7, #28
 8003822:	4619      	mov	r1, r3
 8003824:	4816      	ldr	r0, [pc, #88]	; (8003880 <MX_TIM3_Init+0xc4>)
 8003826:	f005 fd95 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003830:	f7ff fd81 	bl	8003336 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003834:	2360      	movs	r3, #96	; 0x60
 8003836:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003840:	2300      	movs	r3, #0
 8003842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003844:	463b      	mov	r3, r7
 8003846:	2200      	movs	r2, #0
 8003848:	4619      	mov	r1, r3
 800384a:	480d      	ldr	r0, [pc, #52]	; (8003880 <MX_TIM3_Init+0xc4>)
 800384c:	f005 f8e2 	bl	8008a14 <HAL_TIM_PWM_ConfigChannel>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003856:	f7ff fd6e 	bl	8003336 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800385a:	463b      	mov	r3, r7
 800385c:	2204      	movs	r2, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4807      	ldr	r0, [pc, #28]	; (8003880 <MX_TIM3_Init+0xc4>)
 8003862:	f005 f8d7 	bl	8008a14 <HAL_TIM_PWM_ConfigChannel>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800386c:	f7ff fd63 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003870:	4803      	ldr	r0, [pc, #12]	; (8003880 <MX_TIM3_Init+0xc4>)
 8003872:	f000 f8a9 	bl	80039c8 <HAL_TIM_MspPostInit>

}
 8003876:	bf00      	nop
 8003878:	3728      	adds	r7, #40	; 0x28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000564 	.word	0x20000564
 8003884:	40000400 	.word	0x40000400

08003888 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800389a:	463b      	mov	r3, r7
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	611a      	str	r2, [r3, #16]
 80038a8:	615a      	str	r2, [r3, #20]
 80038aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038ac:	4b21      	ldr	r3, [pc, #132]	; (8003934 <MX_TIM4_Init+0xac>)
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <MX_TIM4_Init+0xb0>)
 80038b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <MX_TIM4_Init+0xac>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <MX_TIM4_Init+0xac>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600;
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <MX_TIM4_Init+0xac>)
 80038c0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80038c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c6:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <MX_TIM4_Init+0xac>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <MX_TIM4_Init+0xac>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80038d2:	4818      	ldr	r0, [pc, #96]	; (8003934 <MX_TIM4_Init+0xac>)
 80038d4:	f004 ff46 	bl	8008764 <HAL_TIM_PWM_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80038de:	f7ff fd2a 	bl	8003336 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038ea:	f107 031c 	add.w	r3, r7, #28
 80038ee:	4619      	mov	r1, r3
 80038f0:	4810      	ldr	r0, [pc, #64]	; (8003934 <MX_TIM4_Init+0xac>)
 80038f2:	f005 fd2f 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80038fc:	f7ff fd1b 	bl	8003336 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003900:	2360      	movs	r3, #96	; 0x60
 8003902:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003908:	2300      	movs	r3, #0
 800390a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003910:	463b      	mov	r3, r7
 8003912:	2204      	movs	r2, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4807      	ldr	r0, [pc, #28]	; (8003934 <MX_TIM4_Init+0xac>)
 8003918:	f005 f87c 	bl	8008a14 <HAL_TIM_PWM_ConfigChannel>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003922:	f7ff fd08 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003926:	4803      	ldr	r0, [pc, #12]	; (8003934 <MX_TIM4_Init+0xac>)
 8003928:	f000 f84e 	bl	80039c8 <HAL_TIM_MspPostInit>

}
 800392c:	bf00      	nop
 800392e:	3728      	adds	r7, #40	; 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200005b0 	.word	0x200005b0
 8003938:	40000800 	.word	0x40000800

0800393c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394c:	d10c      	bne.n	8003968 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	61d3      	str	r3, [r2, #28]
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003966:	e022      	b.n	80039ae <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <HAL_TIM_PWM_MspInit+0x84>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10c      	bne.n	800398c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 8003978:	f043 0302 	orr.w	r3, r3, #2
 800397c:	61d3      	str	r3, [r2, #28]
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
}
 800398a:	e010      	b.n	80039ae <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <HAL_TIM_PWM_MspInit+0x88>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10b      	bne.n	80039ae <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	61d3      	str	r3, [r2, #28]
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_TIM_PWM_MspInit+0x80>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
}
 80039ae:	bf00      	nop
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800

080039c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d11d      	bne.n	8003a26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f4:	6153      	str	r3, [r2, #20]
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = BOOST_SW_Pin;
 8003a02:	2308      	movs	r3, #8
 8003a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a12:	2301      	movs	r3, #1
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BOOST_SW_GPIO_Port, &GPIO_InitStruct);
 8003a16:	f107 0314 	add.w	r3, r7, #20
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a20:	f002 fcb0 	bl	8006384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003a24:	e043      	b.n	8003aae <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a24      	ldr	r2, [pc, #144]	; (8003abc <HAL_TIM_MspPostInit+0xf4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d11d      	bne.n	8003a6c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a30:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 8003a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3a:	6153      	str	r3, [r2, #20]
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = KICK_1_Pin|KICK_2_Pin;
 8003a48:	23c0      	movs	r3, #192	; 0xc0
 8003a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a54:	2300      	movs	r3, #0
 8003a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4619      	mov	r1, r3
 8003a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a66:	f002 fc8d 	bl	8006384 <HAL_GPIO_Init>
}
 8003a6a:	e020      	b.n	8003aae <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_TIM_MspPostInit+0xf8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d11b      	bne.n	8003aae <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6153      	str	r3, [r2, #20]
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <HAL_TIM_MspPostInit+0xf0>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD_16M_PWM_Pin;
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GD_16M_PWM_GPIO_Port, &GPIO_InitStruct);
 8003aa2:	f107 0314 	add.w	r3, r7, #20
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <HAL_TIM_MspPostInit+0xfc>)
 8003aaa:	f002 fc6b 	bl	8006384 <HAL_GPIO_Init>
}
 8003aae:	bf00      	nop
 8003ab0:	3728      	adds	r7, #40	; 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	48000400 	.word	0x48000400

08003ac8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003ace:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <MX_USART1_UART_Init+0x58>)
 8003ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <MX_USART1_UART_Init+0x5c>)
 8003ad6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003aec:	220c      	movs	r2, #12
 8003aee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b08:	4804      	ldr	r0, [pc, #16]	; (8003b1c <MX_USART1_UART_Init+0x54>)
 8003b0a:	f005 fca3 	bl	8009454 <HAL_UART_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8003b14:	f7ff fc0f 	bl	8003336 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b18:	bf00      	nop
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	200005fc 	.word	0x200005fc
 8003b20:	40013800 	.word	0x40013800
 8003b24:	001e8480 	.word	0x001e8480

08003b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <HAL_UART_MspInit+0xdc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d157      	bne.n	8003bfa <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_UART_MspInit+0xe0>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4a2e      	ldr	r2, [pc, #184]	; (8003c08 <HAL_UART_MspInit+0xe0>)
 8003b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b54:	6193      	str	r3, [r2, #24]
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <HAL_UART_MspInit+0xe0>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b62:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <HAL_UART_MspInit+0xe0>)
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <HAL_UART_MspInit+0xe0>)
 8003b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6c:	6153      	str	r3, [r2, #20]
 8003b6e:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <HAL_UART_MspInit+0xe0>)
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b8c:	2307      	movs	r3, #7
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	4619      	mov	r1, r3
 8003b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b9a:	f002 fbf3 	bl	8006384 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003ba0:	4a1b      	ldr	r2, [pc, #108]	; (8003c10 <HAL_UART_MspInit+0xe8>)
 8003ba2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003bb2:	2280      	movs	r2, #128	; 0x80
 8003bb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003bce:	480f      	ldr	r0, [pc, #60]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003bd0:	f002 f9ad 	bl	8005f2e <HAL_DMA_Init>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8003bda:	f7ff fbac 	bl	8003336 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003be2:	66da      	str	r2, [r3, #108]	; 0x6c
 8003be4:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <HAL_UART_MspInit+0xe4>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	2025      	movs	r0, #37	; 0x25
 8003bf0:	f002 f967 	bl	8005ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bf4:	2025      	movs	r0, #37	; 0x25
 8003bf6:	f002 f980 	bl	8005efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3728      	adds	r7, #40	; 0x28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40013800 	.word	0x40013800
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	20000680 	.word	0x20000680
 8003c10:	40020044 	.word	0x40020044

08003c14 <HAL_UART_TxCpltCallback>:
static char second_buf[UART_TEMP_BUF_SIZE];
volatile int second_buf_len = 0, first_buf_len = 0;
volatile bool sending_second_buf = false, sending_first_buf = false;
volatile bool is_in_printf_func = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  if (sending_first_buf) {     // FIRST buf complete
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_UART_TxCpltCallback+0x9c>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01d      	beq.n	8003c62 <HAL_UART_TxCpltCallback+0x4e>
    sending_first_buf = false; // complete!
 8003c26:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <HAL_UART_TxCpltCallback+0x9c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]

    if (second_buf_len > 0 && is_in_printf_func == false) { // another buffer?
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_UART_TxCpltCallback+0xa0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dd38      	ble.n	8003ca6 <HAL_UART_TxCpltCallback+0x92>
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_UART_TxCpltCallback+0xa4>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f083 0301 	eor.w	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d030      	beq.n	8003ca6 <HAL_UART_TxCpltCallback+0x92>
      sending_second_buf = true;
 8003c44:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_UART_TxCpltCallback+0xa8>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_UART_TxCpltCallback+0xa0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	491b      	ldr	r1, [pc, #108]	; (8003cc0 <HAL_UART_TxCpltCallback+0xac>)
 8003c54:	481b      	ldr	r0, [pc, #108]	; (8003cc4 <HAL_UART_TxCpltCallback+0xb0>)
 8003c56:	f005 fc4b 	bl	80094f0 <HAL_UART_Transmit_DMA>
      second_buf_len = 0;
 8003c5a:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <HAL_UART_TxCpltCallback+0xa0>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
      sending_first_buf = true;
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
      first_buf_len = 0;
    }
  }
}
 8003c60:	e021      	b.n	8003ca6 <HAL_UART_TxCpltCallback+0x92>
  } else if (sending_second_buf) { // SECOND buf complete
 8003c62:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <HAL_UART_TxCpltCallback+0xa8>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01c      	beq.n	8003ca6 <HAL_UART_TxCpltCallback+0x92>
    sending_second_buf = false;    // complete!
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <HAL_UART_TxCpltCallback+0xa8>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
    if (first_buf_len > 0 && is_in_printf_func == false) { // another buffer?
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_UART_TxCpltCallback+0xb4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dd15      	ble.n	8003ca6 <HAL_UART_TxCpltCallback+0x92>
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_UART_TxCpltCallback+0xa4>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f083 0301 	eor.w	r3, r3, #1
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <HAL_UART_TxCpltCallback+0x92>
      sending_first_buf = true;
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_UART_TxCpltCallback+0x9c>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_UART_TxCpltCallback+0xb4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	490c      	ldr	r1, [pc, #48]	; (8003ccc <HAL_UART_TxCpltCallback+0xb8>)
 8003c9a:	480a      	ldr	r0, [pc, #40]	; (8003cc4 <HAL_UART_TxCpltCallback+0xb0>)
 8003c9c:	f005 fc28 	bl	80094f0 <HAL_UART_Transmit_DMA>
      first_buf_len = 0;
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_UART_TxCpltCallback+0xb4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000d0d 	.word	0x20000d0d
 8003cb4:	20000d04 	.word	0x20000d04
 8003cb8:	20000d0e 	.word	0x20000d0e
 8003cbc:	20000d0c 	.word	0x20000d0c
 8003cc0:	200009e4 	.word	0x200009e4
 8003cc4:	200005fc 	.word	0x200005fc
 8003cc8:	20000d08 	.word	0x20000d08
 8003ccc:	200006c4 	.word	0x200006c4

08003cd0 <p>:

void p(const char *format, ...) {
 8003cd0:	b40f      	push	{r0, r1, r2, r3}
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, format);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	607b      	str	r3, [r7, #4]
  is_in_printf_func = true;
 8003cde:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <p+0x140>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]

  if (sending_first_buf) {
 8003ce4:	4b4b      	ldr	r3, [pc, #300]	; (8003e14 <p+0x144>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d030      	beq.n	8003d50 <p+0x80>
    if (second_buf_len > UART_TEMP_BUF_SIZE / 2) {
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <p+0x148>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003cf6:	dd03      	ble.n	8003d00 <p+0x30>
      is_in_printf_func = false;
 8003cf8:	4b45      	ldr	r3, [pc, #276]	; (8003e10 <p+0x140>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
      return;
 8003cfe:	e081      	b.n	8003e04 <p+0x134>
    }
    second_buf_len += vsprintf(second_buf + second_buf_len, format, ap);
 8003d00:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <p+0x148>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b45      	ldr	r3, [pc, #276]	; (8003e1c <p+0x14c>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6939      	ldr	r1, [r7, #16]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f007 f9ea 	bl	800b0e8 <vsiprintf>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <p+0x148>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	4a3e      	ldr	r2, [pc, #248]	; (8003e18 <p+0x148>)
 8003d1e:	6013      	str	r3, [r2, #0]
    va_end(ap);
    if (sending_first_buf == false) {
 8003d20:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <p+0x144>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f083 0301 	eor.w	r3, r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d065      	beq.n	8003dfc <p+0x12c>
      second_buf_len = (int)strlen(second_buf);
 8003d30:	483a      	ldr	r0, [pc, #232]	; (8003e1c <p+0x14c>)
 8003d32:	f7fc fa4d 	bl	80001d0 <strlen>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <p+0x148>)
 8003d3c:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len); // 2ms
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <p+0x148>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	4935      	ldr	r1, [pc, #212]	; (8003e1c <p+0x14c>)
 8003d48:	4835      	ldr	r0, [pc, #212]	; (8003e20 <p+0x150>)
 8003d4a:	f005 fbd1 	bl	80094f0 <HAL_UART_Transmit_DMA>
 8003d4e:	e055      	b.n	8003dfc <p+0x12c>
    }
  } else if (sending_second_buf) {
 8003d50:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <p+0x154>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d030      	beq.n	8003dbc <p+0xec>
    if (first_buf_len > UART_TEMP_BUF_SIZE / 2) {
 8003d5a:	4b33      	ldr	r3, [pc, #204]	; (8003e28 <p+0x158>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003d62:	dd03      	ble.n	8003d6c <p+0x9c>

      is_in_printf_func = false;
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <p+0x140>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
      return;
 8003d6a:	e04b      	b.n	8003e04 <p+0x134>
    }

    first_buf_len += vsprintf(first_buf + first_buf_len, format, ap);
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <p+0x158>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <p+0x15c>)
 8003d74:	4413      	add	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6939      	ldr	r1, [r7, #16]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f007 f9b4 	bl	800b0e8 <vsiprintf>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <p+0x158>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	4a27      	ldr	r2, [pc, #156]	; (8003e28 <p+0x158>)
 8003d8a:	6013      	str	r3, [r2, #0]
    va_end(ap);

    if (sending_second_buf == false) {
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <p+0x154>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f083 0301 	eor.w	r3, r3, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02f      	beq.n	8003dfc <p+0x12c>
      first_buf_len = (int)strlen(first_buf);
 8003d9c:	4823      	ldr	r0, [pc, #140]	; (8003e2c <p+0x15c>)
 8003d9e:	f7fc fa17 	bl	80001d0 <strlen>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <p+0x158>)
 8003da8:	601a      	str	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8003daa:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <p+0x158>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	491e      	ldr	r1, [pc, #120]	; (8003e2c <p+0x15c>)
 8003db4:	481a      	ldr	r0, [pc, #104]	; (8003e20 <p+0x150>)
 8003db6:	f005 fb9b 	bl	80094f0 <HAL_UART_Transmit_DMA>
 8003dba:	e01f      	b.n	8003dfc <p+0x12c>
    }
  } else {
    // start !!
    first_buf_len = vsprintf(first_buf, format, ap);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6939      	ldr	r1, [r7, #16]
 8003dc0:	481a      	ldr	r0, [pc, #104]	; (8003e2c <p+0x15c>)
 8003dc2:	f007 f991 	bl	800b0e8 <vsiprintf>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <p+0x158>)
 8003dca:	6013      	str	r3, [r2, #0]
    va_end(ap);
    sending_first_buf = true;
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <p+0x144>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <p+0x158>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4914      	ldr	r1, [pc, #80]	; (8003e2c <p+0x15c>)
 8003ddc:	4810      	ldr	r0, [pc, #64]	; (8003e20 <p+0x150>)
 8003dde:	f005 fb87 	bl	80094f0 <HAL_UART_Transmit_DMA>
    first_buf_len = (int)strlen(first_buf);
 8003de2:	4812      	ldr	r0, [pc, #72]	; (8003e2c <p+0x15c>)
 8003de4:	f7fc f9f4 	bl	80001d0 <strlen>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <p+0x158>)
 8003dee:	601a      	str	r2, [r3, #0]
    first_buf_len = 0;
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <p+0x158>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    second_buf_len = 0;
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <p+0x148>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
  }
  is_in_printf_func = false;
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <p+0x140>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
  return;
 8003e02:	bf00      	nop
}
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0c:	b004      	add	sp, #16
 8003e0e:	4770      	bx	lr
 8003e10:	20000d0e 	.word	0x20000d0e
 8003e14:	20000d0d 	.word	0x20000d0d
 8003e18:	20000d04 	.word	0x20000d04
 8003e1c:	200009e4 	.word	0x200009e4
 8003e20:	200005fc 	.word	0x200005fc
 8003e24:	20000d0c 	.word	0x20000d0c
 8003e28:	20000d08 	.word	0x20000d08
 8003e2c:	200006c4 	.word	0x200006c4

08003e30 <Reset_Handler>:
 8003e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e68 <LoopForever+0x2>
 8003e34:	480d      	ldr	r0, [pc, #52]	; (8003e6c <LoopForever+0x6>)
 8003e36:	490e      	ldr	r1, [pc, #56]	; (8003e70 <LoopForever+0xa>)
 8003e38:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <LoopForever+0xe>)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e002      	b.n	8003e44 <LoopCopyDataInit>

08003e3e <CopyDataInit>:
 8003e3e:	58d4      	ldr	r4, [r2, r3]
 8003e40:	50c4      	str	r4, [r0, r3]
 8003e42:	3304      	adds	r3, #4

08003e44 <LoopCopyDataInit>:
 8003e44:	18c4      	adds	r4, r0, r3
 8003e46:	428c      	cmp	r4, r1
 8003e48:	d3f9      	bcc.n	8003e3e <CopyDataInit>
 8003e4a:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <LoopForever+0x12>)
 8003e4c:	4c0b      	ldr	r4, [pc, #44]	; (8003e7c <LoopForever+0x16>)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e001      	b.n	8003e56 <LoopFillZerobss>

08003e52 <FillZerobss>:
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	3204      	adds	r2, #4

08003e56 <LoopFillZerobss>:
 8003e56:	42a2      	cmp	r2, r4
 8003e58:	d3fb      	bcc.n	8003e52 <FillZerobss>
 8003e5a:	f7ff fc43 	bl	80036e4 <SystemInit>
 8003e5e:	f006 fbc9 	bl	800a5f4 <__libc_init_array>
 8003e62:	f7ff f88b 	bl	8002f7c <main>

08003e66 <LoopForever>:
 8003e66:	e7fe      	b.n	8003e66 <LoopForever>
 8003e68:	20008000 	.word	0x20008000
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	200001e0 	.word	0x200001e0
 8003e74:	0800de64 	.word	0x0800de64
 8003e78:	200001e0 	.word	0x200001e0
 8003e7c:	20000d24 	.word	0x20000d24

08003e80 <ADC1_2_IRQHandler>:
 8003e80:	e7fe      	b.n	8003e80 <ADC1_2_IRQHandler>
	...

08003e84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_Init+0x28>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a07      	ldr	r2, [pc, #28]	; (8003eac <HAL_Init+0x28>)
 8003e8e:	f043 0310 	orr.w	r3, r3, #16
 8003e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e94:	2003      	movs	r0, #3
 8003e96:	f002 f809 	bl	8005eac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e9a:	200f      	movs	r0, #15
 8003e9c:	f000 f808 	bl	8003eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ea0:	f7ff fad0 	bl	8003444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40022000 	.word	0x40022000

08003eb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <HAL_InitTick+0x54>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_InitTick+0x58>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f002 f821 	bl	8005f16 <HAL_SYSTICK_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e00e      	b.n	8003efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d80a      	bhi.n	8003efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f001 ffe9 	bl	8005ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ef0:	4a06      	ldr	r2, [pc, #24]	; (8003f0c <HAL_InitTick+0x5c>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000004 	.word	0x20000004
 8003f08:	2000000c 	.word	0x2000000c
 8003f0c:	20000008 	.word	0x20000008

08003f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_IncTick+0x20>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_IncTick+0x24>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <HAL_IncTick+0x24>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000000c 	.word	0x2000000c
 8003f34:	20000d10 	.word	0x20000d10

08003f38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_GetTick+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000d10 	.word	0x20000d10

08003f50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f58:	f7ff ffee 	bl	8003f38 <HAL_GetTick>
 8003f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d005      	beq.n	8003f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_Delay+0x44>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f76:	bf00      	nop
 8003f78:	f7ff ffde 	bl	8003f38 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d8f7      	bhi.n	8003f78 <HAL_Delay+0x28>
  {
  }
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	2000000c 	.word	0x2000000c

08003f98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b09a      	sub	sp, #104	; 0x68
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e1c9      	b.n	800434c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d176      	bne.n	80040b8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d152      	bne.n	8004078 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fc ffc1 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d13b      	bne.n	8004078 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 ffd1 	bl	8004fa8 <ADC_Disable>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d12f      	bne.n	8004078 <HAL_ADC_Init+0xe0>
 8004018:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800401c:	2b00      	cmp	r3, #0
 800401e:	d12b      	bne.n	8004078 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004028:	f023 0302 	bic.w	r3, r3, #2
 800402c:	f043 0202 	orr.w	r2, r3, #2
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004042:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004052:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004054:	4b86      	ldr	r3, [pc, #536]	; (8004270 <HAL_ADC_Init+0x2d8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a86      	ldr	r2, [pc, #536]	; (8004274 <HAL_ADC_Init+0x2dc>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0c9a      	lsrs	r2, r3, #18
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800406a:	e002      	b.n	8004072 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3b01      	subs	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f9      	bne.n	800406c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d007      	beq.n	8004096 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004094:	d110      	bne.n	80040b8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f023 0312 	bic.w	r3, r3, #18
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 8136 	bne.w	8004332 <HAL_ADC_Init+0x39a>
 80040c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 8131 	bne.w	8004332 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 8129 	bne.w	8004332 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040e8:	f043 0202 	orr.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f8:	d004      	beq.n	8004104 <HAL_ADC_Init+0x16c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a5e      	ldr	r2, [pc, #376]	; (8004278 <HAL_ADC_Init+0x2e0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_ADC_Init+0x170>
 8004104:	4b5d      	ldr	r3, [pc, #372]	; (800427c <HAL_ADC_Init+0x2e4>)
 8004106:	e000      	b.n	800410a <HAL_ADC_Init+0x172>
 8004108:	4b5d      	ldr	r3, [pc, #372]	; (8004280 <HAL_ADC_Init+0x2e8>)
 800410a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004114:	d102      	bne.n	800411c <HAL_ADC_Init+0x184>
 8004116:	4b58      	ldr	r3, [pc, #352]	; (8004278 <HAL_ADC_Init+0x2e0>)
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e01a      	b.n	8004152 <HAL_ADC_Init+0x1ba>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a55      	ldr	r2, [pc, #340]	; (8004278 <HAL_ADC_Init+0x2e0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d103      	bne.n	800412e <HAL_ADC_Init+0x196>
 8004126:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e011      	b.n	8004152 <HAL_ADC_Init+0x1ba>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a54      	ldr	r2, [pc, #336]	; (8004284 <HAL_ADC_Init+0x2ec>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d102      	bne.n	800413e <HAL_ADC_Init+0x1a6>
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_ADC_Init+0x2f0>)
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e009      	b.n	8004152 <HAL_ADC_Init+0x1ba>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a51      	ldr	r2, [pc, #324]	; (8004288 <HAL_ADC_Init+0x2f0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <HAL_ADC_Init+0x1b6>
 8004148:	4b4e      	ldr	r3, [pc, #312]	; (8004284 <HAL_ADC_Init+0x2ec>)
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e001      	b.n	8004152 <HAL_ADC_Init+0x1ba>
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d108      	bne.n	8004172 <HAL_ADC_Init+0x1da>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_ADC_Init+0x1da>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_ADC_Init+0x1dc>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11c      	bne.n	80041b2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004178:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_ADC_Init+0x202>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_ADC_Init+0x202>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_ADC_Init+0x204>
 800419a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800419c:	2b00      	cmp	r3, #0
 800419e:	d108      	bne.n	80041b2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80041a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	7e5b      	ldrb	r3, [r3, #25]
 80041b6:	035b      	lsls	r3, r3, #13
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041bc:	2a01      	cmp	r2, #1
 80041be:	d002      	beq.n	80041c6 <HAL_ADC_Init+0x22e>
 80041c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041c4:	e000      	b.n	80041c8 <HAL_ADC_Init+0x230>
 80041c6:	2200      	movs	r2, #0
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041d8:	4313      	orrs	r3, r2
 80041da:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d11b      	bne.n	800421e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7e5b      	ldrb	r3, [r3, #25]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	3b01      	subs	r3, #1
 80041f4:	045a      	lsls	r2, r3, #17
 80041f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004200:	e00d      	b.n	800421e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	2b01      	cmp	r3, #1
 8004224:	d03a      	beq.n	800429c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a16      	ldr	r2, [pc, #88]	; (8004284 <HAL_ADC_Init+0x2ec>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_ADC_Init+0x2a2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a14      	ldr	r2, [pc, #80]	; (8004288 <HAL_ADC_Init+0x2f0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d128      	bne.n	800428c <HAL_ADC_Init+0x2f4>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004242:	d012      	beq.n	800426a <HAL_ADC_Init+0x2d2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424c:	d00a      	beq.n	8004264 <HAL_ADC_Init+0x2cc>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004256:	d002      	beq.n	800425e <HAL_ADC_Init+0x2c6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	e018      	b.n	8004290 <HAL_ADC_Init+0x2f8>
 800425e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004262:	e015      	b.n	8004290 <HAL_ADC_Init+0x2f8>
 8004264:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004268:	e012      	b.n	8004290 <HAL_ADC_Init+0x2f8>
 800426a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800426e:	e00f      	b.n	8004290 <HAL_ADC_Init+0x2f8>
 8004270:	20000004 	.word	0x20000004
 8004274:	431bde83 	.word	0x431bde83
 8004278:	50000100 	.word	0x50000100
 800427c:	50000300 	.word	0x50000300
 8004280:	50000700 	.word	0x50000700
 8004284:	50000400 	.word	0x50000400
 8004288:	50000500 	.word	0x50000500
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004294:	4313      	orrs	r3, r2
 8004296:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004298:	4313      	orrs	r3, r2
 800429a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d114      	bne.n	80042d4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b8:	f023 0302 	bic.w	r3, r3, #2
 80042bc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7e1b      	ldrb	r3, [r3, #24]
 80042c2:	039a      	lsls	r2, r3, #14
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042d0:	4313      	orrs	r3, r2
 80042d2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	4b1e      	ldr	r3, [pc, #120]	; (8004354 <HAL_ADC_Init+0x3bc>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80042e4:	430b      	orrs	r3, r1
 80042e6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10c      	bne.n	800430a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	f023 010f 	bic.w	r1, r3, #15
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	1e5a      	subs	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
 8004308:	e007      	b.n	800431a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 020f 	bic.w	r2, r2, #15
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f023 0303 	bic.w	r3, r3, #3
 8004328:	f043 0201 	orr.w	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
 8004330:	e00a      	b.n	8004348 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f023 0312 	bic.w	r3, r3, #18
 800433a:	f043 0210 	orr.w	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004348:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800434c:	4618      	mov	r0, r3
 800434e:	3768      	adds	r7, #104	; 0x68
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	fff0c007 	.word	0xfff0c007

08004358 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	f040 80f9 	bne.w	8004566 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_ADC_Start+0x2a>
 800437e:	2302      	movs	r3, #2
 8004380:	e0f4      	b.n	800456c <HAL_ADC_Start+0x214>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fda8 	bl	8004ee0 <ADC_Enable>
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 80e0 	bne.w	800455c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b8:	d004      	beq.n	80043c4 <HAL_ADC_Start+0x6c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6d      	ldr	r2, [pc, #436]	; (8004574 <HAL_ADC_Start+0x21c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d106      	bne.n	80043d2 <HAL_ADC_Start+0x7a>
 80043c4:	4b6c      	ldr	r3, [pc, #432]	; (8004578 <HAL_ADC_Start+0x220>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d010      	beq.n	80043f2 <HAL_ADC_Start+0x9a>
 80043d0:	e005      	b.n	80043de <HAL_ADC_Start+0x86>
 80043d2:	4b6a      	ldr	r3, [pc, #424]	; (800457c <HAL_ADC_Start+0x224>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_ADC_Start+0x9a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e6:	d004      	beq.n	80043f2 <HAL_ADC_Start+0x9a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a64      	ldr	r2, [pc, #400]	; (8004580 <HAL_ADC_Start+0x228>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d115      	bne.n	800441e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d036      	beq.n	800447a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004414:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800441c:	e02d      	b.n	800447a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004432:	d004      	beq.n	800443e <HAL_ADC_Start+0xe6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a4e      	ldr	r2, [pc, #312]	; (8004574 <HAL_ADC_Start+0x21c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10a      	bne.n	8004454 <HAL_ADC_Start+0xfc>
 800443e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e008      	b.n	8004466 <HAL_ADC_Start+0x10e>
 8004454:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_ADC_Start+0x228>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004472:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d106      	bne.n	8004496 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f023 0206 	bic.w	r2, r3, #6
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
 8004494:	e002      	b.n	800449c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	221c      	movs	r2, #28
 80044aa:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b4:	d004      	beq.n	80044c0 <HAL_ADC_Start+0x168>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2e      	ldr	r2, [pc, #184]	; (8004574 <HAL_ADC_Start+0x21c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d106      	bne.n	80044ce <HAL_ADC_Start+0x176>
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_ADC_Start+0x220>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d03e      	beq.n	800454a <HAL_ADC_Start+0x1f2>
 80044cc:	e005      	b.n	80044da <HAL_ADC_Start+0x182>
 80044ce:	4b2b      	ldr	r3, [pc, #172]	; (800457c <HAL_ADC_Start+0x224>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d037      	beq.n	800454a <HAL_ADC_Start+0x1f2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e2:	d004      	beq.n	80044ee <HAL_ADC_Start+0x196>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a22      	ldr	r2, [pc, #136]	; (8004574 <HAL_ADC_Start+0x21c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d106      	bne.n	80044fc <HAL_ADC_Start+0x1a4>
 80044ee:	4b22      	ldr	r3, [pc, #136]	; (8004578 <HAL_ADC_Start+0x220>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d027      	beq.n	800454a <HAL_ADC_Start+0x1f2>
 80044fa:	e005      	b.n	8004508 <HAL_ADC_Start+0x1b0>
 80044fc:	4b1f      	ldr	r3, [pc, #124]	; (800457c <HAL_ADC_Start+0x224>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2b05      	cmp	r3, #5
 8004506:	d020      	beq.n	800454a <HAL_ADC_Start+0x1f2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004510:	d004      	beq.n	800451c <HAL_ADC_Start+0x1c4>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a17      	ldr	r2, [pc, #92]	; (8004574 <HAL_ADC_Start+0x21c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d106      	bne.n	800452a <HAL_ADC_Start+0x1d2>
 800451c:	4b16      	ldr	r3, [pc, #88]	; (8004578 <HAL_ADC_Start+0x220>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2b09      	cmp	r3, #9
 8004526:	d010      	beq.n	800454a <HAL_ADC_Start+0x1f2>
 8004528:	e005      	b.n	8004536 <HAL_ADC_Start+0x1de>
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <HAL_ADC_Start+0x224>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2b09      	cmp	r3, #9
 8004534:	d009      	beq.n	800454a <HAL_ADC_Start+0x1f2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800453e:	d004      	beq.n	800454a <HAL_ADC_Start+0x1f2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <HAL_ADC_Start+0x228>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10f      	bne.n	800456a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0204 	orr.w	r2, r2, #4
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	e006      	b.n	800456a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004564:	e001      	b.n	800456a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004566:	2302      	movs	r3, #2
 8004568:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	50000100 	.word	0x50000100
 8004578:	50000300 	.word	0x50000300
 800457c:	50000700 	.word	0x50000700
 8004580:	50000400 	.word	0x50000400

08004584 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d009      	beq.n	80045ac <HAL_ADCEx_InjectedGetValue+0x28>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b04      	cmp	r3, #4
 800459c:	d818      	bhi.n	80045d0 <HAL_ADCEx_InjectedGetValue+0x4c>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d00f      	beq.n	80045c4 <HAL_ADCEx_InjectedGetValue+0x40>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d006      	beq.n	80045b8 <HAL_ADCEx_InjectedGetValue+0x34>
 80045aa:	e011      	b.n	80045d0 <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b4:	60fb      	str	r3, [r7, #12]
      break;
 80045b6:	e011      	b.n	80045dc <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	60fb      	str	r3, [r7, #12]
      break;
 80045c2:	e00b      	b.n	80045dc <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045cc:	60fb      	str	r3, [r7, #12]
      break;
 80045ce:	e005      	b.n	80045dc <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045d8:	60fb      	str	r3, [r7, #12]
      break;
 80045da:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b09d      	sub	sp, #116	; 0x74
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0x26>
 800460e:	2302      	movs	r3, #2
 8004610:	e364      	b.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004626:	2b01      	cmp	r3, #1
 8004628:	d151      	bne.n	80046ce <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d143      	bne.n	80046ba <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d02b      	beq.n	8004692 <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4984      	ldr	r1, [pc, #528]	; (8004858 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8004646:	428b      	cmp	r3, r1
 8004648:	d004      	beq.n	8004654 <HAL_ADCEx_InjectedConfigChannel+0x68>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4983      	ldr	r1, [pc, #524]	; (800485c <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8004650:	428b      	cmp	r3, r1
 8004652:	d114      	bne.n	800467e <HAL_ADCEx_InjectedConfigChannel+0x92>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d00e      	beq.n	800467a <HAL_ADCEx_InjectedConfigChannel+0x8e>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	2b14      	cmp	r3, #20
 8004662:	d008      	beq.n	8004676 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	2b1c      	cmp	r3, #28
 800466a:	d002      	beq.n	8004672 <HAL_ADCEx_InjectedConfigChannel+0x86>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	e007      	b.n	8004682 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8004672:	2310      	movs	r3, #16
 8004674:	e005      	b.n	8004682 <HAL_ADCEx_InjectedConfigChannel+0x96>
 8004676:	231c      	movs	r3, #28
 8004678:	e003      	b.n	8004682 <HAL_ADCEx_InjectedConfigChannel+0x96>
 800467a:	2334      	movs	r3, #52	; 0x34
 800467c:	e001      	b.n	8004682 <HAL_ADCEx_InjectedConfigChannel+0x96>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	431a      	orrs	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	4313      	orrs	r3, r2
 800468a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800468c:	4313      	orrs	r3, r2
 800468e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004690:	e005      	b.n	800469e <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800469a:	4313      	orrs	r3, r2
 800469c:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046a4:	4b6e      	ldr	r3, [pc, #440]	; (8004860 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046ae:	430b      	orrs	r3, r1
 80046b0:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046b6:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80046b8:	e07f      	b.n	80047ba <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80046cc:	e075      	b.n	80047ba <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d140      	bne.n	8004758 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d02d      	beq.n	8004748 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	1e59      	subs	r1, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4857      	ldr	r0, [pc, #348]	; (8004858 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80046fc:	4283      	cmp	r3, r0
 80046fe:	d004      	beq.n	800470a <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4855      	ldr	r0, [pc, #340]	; (800485c <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8004706:	4283      	cmp	r3, r0
 8004708:	d114      	bne.n	8004734 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2b08      	cmp	r3, #8
 8004710:	d00e      	beq.n	8004730 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	2b14      	cmp	r3, #20
 8004718:	d008      	beq.n	800472c <HAL_ADCEx_InjectedConfigChannel+0x140>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	2b1c      	cmp	r3, #28
 8004720:	d002      	beq.n	8004728 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	e007      	b.n	8004738 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8004728:	2310      	movs	r3, #16
 800472a:	e005      	b.n	8004738 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800472c:	231c      	movs	r3, #28
 800472e:	e003      	b.n	8004738 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8004730:	2334      	movs	r3, #52	; 0x34
 8004732:	e001      	b.n	8004738 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4319      	orrs	r1, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	430b      	orrs	r3, r1
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	649a      	str	r2, [r3, #72]	; 0x48
 8004746:	e007      	b.n	8004758 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	3b01      	subs	r3, #1
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	3302      	adds	r3, #2
 800476a:	221f      	movs	r2, #31
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	4019      	ands	r1, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	3302      	adds	r3, #2
 8004786:	fa00 f303 	lsl.w	r3, r0, r3
 800478a:	ea41 0203 	orr.w	r2, r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047aa:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	430b      	orrs	r3, r1
 80047b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d12d      	bne.n	8004824 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	7f5b      	ldrb	r3, [r3, #29]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d110      	bne.n	80047f2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	7f9b      	ldrb	r3, [r3, #30]
 80047de:	055a      	lsls	r2, r3, #21
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	7f1b      	ldrb	r3, [r3, #28]
 80047e4:	051b      	lsls	r3, r3, #20
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e018      	b.n	8004824 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	7f9b      	ldrb	r3, [r3, #30]
 8004800:	055a      	lsls	r2, r3, #21
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	7f1b      	ldrb	r3, [r3, #28]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d108      	bne.n	8004824 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 8111 	bne.w	8004a56 <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d113      	bne.n	8004864 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	7f5b      	ldrb	r3, [r3, #29]
 800484a:	065a      	lsls	r2, r3, #25
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	e01b      	b.n	800488e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8004856:	bf00      	nop
 8004858:	50000400 	.word	0x50000400
 800485c:	50000500 	.word	0x50000500
 8004860:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004872:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	7f5b      	ldrb	r3, [r3, #29]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d108      	bne.n	800488e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b09      	cmp	r3, #9
 8004894:	d91c      	bls.n	80048d0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6999      	ldr	r1, [r3, #24]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	3b1e      	subs	r3, #30
 80048a8:	2207      	movs	r2, #7
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	4019      	ands	r1, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6898      	ldr	r0, [r3, #8]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	3b1e      	subs	r3, #30
 80048c2:	fa00 f203 	lsl.w	r2, r0, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	619a      	str	r2, [r3, #24]
 80048ce:	e019      	b.n	8004904 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6959      	ldr	r1, [r3, #20]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	2207      	movs	r2, #7
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	4019      	ands	r1, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6898      	ldr	r0, [r3, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	fa00 f203 	lsl.w	r2, r0, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	08db      	lsrs	r3, r3, #3
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	3b01      	subs	r3, #1
 8004922:	2b03      	cmp	r3, #3
 8004924:	d84e      	bhi.n	80049c4 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800495f 	.word	0x0800495f
 8004934:	08004981 	.word	0x08004981
 8004938:	080049a3 	.word	0x080049a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004942:	4b9a      	ldr	r3, [pc, #616]	; (8004bac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8004944:	4013      	ands	r3, r2
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	0691      	lsls	r1, r2, #26
 800494c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800494e:	430a      	orrs	r2, r1
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800495a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 800495c:	e07e      	b.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004964:	4b91      	ldr	r3, [pc, #580]	; (8004bac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8004966:	4013      	ands	r3, r2
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	0691      	lsls	r1, r2, #26
 800496e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004970:	430a      	orrs	r2, r1
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800497c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 800497e:	e06d      	b.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004986:	4b89      	ldr	r3, [pc, #548]	; (8004bac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 8004988:	4013      	ands	r3, r2
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	0691      	lsls	r1, r2, #26
 8004990:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004992:	430a      	orrs	r2, r1
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800499e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80049a0:	e05c      	b.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80049a8:	4b80      	ldr	r3, [pc, #512]	; (8004bac <HAL_ADCEx_InjectedConfigChannel+0x5c0>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	0691      	lsls	r1, r2, #26
 80049b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049b4:	430a      	orrs	r2, r1
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80049c0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80049c2:	e04b      	b.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	069b      	lsls	r3, r3, #26
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d107      	bne.n	80049e8 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	069b      	lsls	r3, r3, #26
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d107      	bne.n	8004a0c <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	069b      	lsls	r3, r3, #26
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d107      	bne.n	8004a30 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	069b      	lsls	r3, r3, #26
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d10a      	bne.n	8004a5a <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004a54:	e001      	b.n	8004a5a <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8004a5a:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d108      	bne.n	8004a7c <HAL_ADCEx_InjectedConfigChannel+0x490>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_ADCEx_InjectedConfigChannel+0x490>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <HAL_ADCEx_InjectedConfigChannel+0x492>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f040 8126 	bne.w	8004cd0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d00f      	beq.n	8004aac <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43da      	mvns	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004aaa:	e049      	b.n	8004b40 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b09      	cmp	r3, #9
 8004acc:	d91c      	bls.n	8004b08 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6999      	ldr	r1, [r3, #24]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	3b1b      	subs	r3, #27
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	4019      	ands	r1, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6898      	ldr	r0, [r3, #8]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	3b1b      	subs	r3, #27
 8004afa:	fa00 f203 	lsl.w	r2, r0, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	619a      	str	r2, [r3, #24]
 8004b06:	e01b      	b.n	8004b40 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6959      	ldr	r1, [r3, #20]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	4613      	mov	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	4019      	ands	r1, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6898      	ldr	r0, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	fa00 f203 	lsl.w	r2, r0, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b48:	d004      	beq.n	8004b54 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d101      	bne.n	8004b58 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8004b54:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <HAL_ADCEx_InjectedConfigChannel+0x5c8>)
 8004b56:	e000      	b.n	8004b5a <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8004b58:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>)
 8004b5a:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d105      	bne.n	8004b70 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004b74:	2b11      	cmp	r3, #17
 8004b76:	d105      	bne.n	8004b84 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004b88:	2b12      	cmp	r3, #18
 8004b8a:	f040 80a1 	bne.w	8004cd0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 809a 	bne.w	8004cd0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ba4:	d10a      	bne.n	8004bbc <HAL_ADCEx_InjectedConfigChannel+0x5d0>
 8004ba6:	4b02      	ldr	r3, [pc, #8]	; (8004bb0 <HAL_ADCEx_InjectedConfigChannel+0x5c4>)
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	e022      	b.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8004bac:	83fff000 	.word	0x83fff000
 8004bb0:	50000100 	.word	0x50000100
 8004bb4:	50000300 	.word	0x50000300
 8004bb8:	50000700 	.word	0x50000700
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a49      	ldr	r2, [pc, #292]	; (8004ce8 <HAL_ADCEx_InjectedConfigChannel+0x6fc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d103      	bne.n	8004bce <HAL_ADCEx_InjectedConfigChannel+0x5e2>
 8004bc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e011      	b.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a46      	ldr	r2, [pc, #280]	; (8004cec <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d102      	bne.n	8004bde <HAL_ADCEx_InjectedConfigChannel+0x5f2>
 8004bd8:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e009      	b.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a43      	ldr	r2, [pc, #268]	; (8004cf0 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d102      	bne.n	8004bee <HAL_ADCEx_InjectedConfigChannel+0x602>
 8004be8:	4b40      	ldr	r3, [pc, #256]	; (8004cec <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	e001      	b.n	8004bf2 <HAL_ADCEx_InjectedConfigChannel+0x606>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d108      	bne.n	8004c12 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8004c12:	2300      	movs	r3, #0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d150      	bne.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x6ce>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004c18:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d010      	beq.n	8004c40 <HAL_ADCEx_InjectedConfigChannel+0x654>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_ADCEx_InjectedConfigChannel+0x64e>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_ADCEx_InjectedConfigChannel+0x650>
 8004c3a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d13c      	bne.n	8004cba <HAL_ADCEx_InjectedConfigChannel+0x6ce>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d11d      	bne.n	8004c84 <HAL_ADCEx_InjectedConfigChannel+0x698>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c50:	d118      	bne.n	8004c84 <HAL_ADCEx_InjectedConfigChannel+0x698>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c5e:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a25      	ldr	r2, [pc, #148]	; (8004cf8 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	0c9a      	lsrs	r2, r3, #18
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8004c74:	e002      	b.n	8004c7c <HAL_ADCEx_InjectedConfigChannel+0x690>
          {
            wait_loop_index--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f9      	bne.n	8004c76 <HAL_ADCEx_InjectedConfigChannel+0x68a>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004c82:	e024      	b.n	8004cce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b11      	cmp	r3, #17
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c94:	d106      	bne.n	8004ca4 <HAL_ADCEx_InjectedConfigChannel+0x6b8>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca0:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ca2:	e014      	b.n	8004cce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b12      	cmp	r3, #18
 8004caa:	d110      	bne.n	8004cce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb6:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004cb8:	e009      	b.n	8004cce <HAL_ADCEx_InjectedConfigChannel+0x6e2>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004ccc:	e000      	b.n	8004cd0 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004cce:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004cd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3774      	adds	r7, #116	; 0x74
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	50000100 	.word	0x50000100
 8004cec:	50000400 	.word	0x50000400
 8004cf0:	50000500 	.word	0x50000500
 8004cf4:	20000004 	.word	0x20000004
 8004cf8:	431bde83 	.word	0x431bde83

08004cfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b099      	sub	sp, #100	; 0x64
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d14:	d102      	bne.n	8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004d16:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	e01a      	b.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a6a      	ldr	r2, [pc, #424]	; (8004ecc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d103      	bne.n	8004d2e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004d26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	e011      	b.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a67      	ldr	r2, [pc, #412]	; (8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d102      	bne.n	8004d3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d38:	4b66      	ldr	r3, [pc, #408]	; (8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	e009      	b.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a64      	ldr	r2, [pc, #400]	; (8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d102      	bne.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004d48:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	e001      	b.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0b0      	b.n	8004ebe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0a9      	b.n	8004ebe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 808d 	bne.w	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f040 8086 	bne.w	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d98:	d004      	beq.n	8004da4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4b      	ldr	r2, [pc, #300]	; (8004ecc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004da4:	4b4c      	ldr	r3, [pc, #304]	; (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004da6:	e000      	b.n	8004daa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004da8:	4b4c      	ldr	r3, [pc, #304]	; (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004daa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d040      	beq.n	8004e36 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dc6:	035b      	lsls	r3, r3, #13
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d108      	bne.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d15c      	bne.n	8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d107      	bne.n	8004e12 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004e12:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d14b      	bne.n	8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e20:	f023 030f 	bic.w	r3, r3, #15
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	6811      	ldr	r1, [r2, #0]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	6892      	ldr	r2, [r2, #8]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e32:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e34:	e03c      	b.n	8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e40:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d108      	bne.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d123      	bne.n	8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d107      	bne.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004e84:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d112      	bne.n	8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e92:	f023 030f 	bic.w	r3, r3, #15
 8004e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e98:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e9a:	e009      	b.n	8004eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004eae:	e000      	b.n	8004eb2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eb0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3764      	adds	r7, #100	; 0x64
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	50000100 	.word	0x50000100
 8004ed0:	50000400 	.word	0x50000400
 8004ed4:	50000500 	.word	0x50000500
 8004ed8:	50000300 	.word	0x50000300
 8004edc:	50000700 	.word	0x50000700

08004ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d108      	bne.n	8004f0c <ADC_Enable+0x2c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <ADC_Enable+0x2c>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <ADC_Enable+0x2e>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d143      	bne.n	8004f9a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <ADC_Enable+0xc4>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00d      	beq.n	8004f3c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f043 0210 	orr.w	r2, r3, #16
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f043 0201 	orr.w	r2, r3, #1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e02f      	b.n	8004f9c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004f4c:	f7fe fff4 	bl	8003f38 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004f52:	e01b      	b.n	8004f8c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f54:	f7fe fff0 	bl	8003f38 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d914      	bls.n	8004f8c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d00d      	beq.n	8004f8c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f043 0210 	orr.w	r2, r3, #16
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	f043 0201 	orr.w	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e007      	b.n	8004f9c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d1dc      	bne.n	8004f54 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	8000003f 	.word	0x8000003f

08004fa8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d108      	bne.n	8004fd4 <ADC_Disable+0x2c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <ADC_Disable+0x2c>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <ADC_Disable+0x2e>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d047      	beq.n	800506a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030d 	and.w	r3, r3, #13
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d10f      	bne.n	8005008 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0202 	orr.w	r2, r2, #2
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005000:	f7fe ff9a 	bl	8003f38 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005006:	e029      	b.n	800505c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f043 0210 	orr.w	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	f043 0201 	orr.w	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e023      	b.n	800506c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005024:	f7fe ff88 	bl	8003f38 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d914      	bls.n	800505c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10d      	bne.n	800505c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f043 0210 	orr.w	r2, r3, #16
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005050:	f043 0201 	orr.w	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e007      	b.n	800506c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d0dc      	beq.n	8005024 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0ed      	b.n	8005262 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fc fa80 	bl	8001598 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a8:	f7fe ff46 	bl	8003f38 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050ae:	e012      	b.n	80050d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050b0:	f7fe ff42 	bl	8003f38 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b0a      	cmp	r3, #10
 80050bc:	d90b      	bls.n	80050d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2205      	movs	r2, #5
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0c5      	b.n	8005262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0e5      	beq.n	80050b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0202 	bic.w	r2, r2, #2
 80050f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f4:	f7fe ff20 	bl	8003f38 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80050fa:	e012      	b.n	8005122 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050fc:	f7fe ff1c 	bl	8003f38 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d90b      	bls.n	8005122 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2205      	movs	r2, #5
 800511a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e09f      	b.n	8005262 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7e1b      	ldrb	r3, [r3, #24]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d108      	bne.n	800514a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e007      	b.n	800515a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005158:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7e5b      	ldrb	r3, [r3, #25]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d108      	bne.n	8005174 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e007      	b.n	8005184 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005182:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7e9b      	ldrb	r3, [r3, #26]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d108      	bne.n	800519e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0220 	orr.w	r2, r2, #32
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e007      	b.n	80051ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0220 	bic.w	r2, r2, #32
 80051ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7edb      	ldrb	r3, [r3, #27]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d108      	bne.n	80051c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0210 	bic.w	r2, r2, #16
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e007      	b.n	80051d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0210 	orr.w	r2, r2, #16
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	7f1b      	ldrb	r3, [r3, #28]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d108      	bne.n	80051f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0208 	orr.w	r2, r2, #8
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e007      	b.n	8005202 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0208 	bic.w	r2, r2, #8
 8005200:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	7f5b      	ldrb	r3, [r3, #29]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d108      	bne.n	800521c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0204 	orr.w	r2, r2, #4
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e007      	b.n	800522c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0204 	bic.w	r2, r2, #4
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	ea42 0103 	orr.w	r1, r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005280:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d003      	beq.n	8005290 <HAL_CAN_ConfigFilter+0x26>
 8005288:	7cfb      	ldrb	r3, [r7, #19]
 800528a:	2b02      	cmp	r3, #2
 800528c:	f040 80aa 	bne.w	80053e4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005296:	f043 0201 	orr.w	r2, r3, #1
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	2201      	movs	r2, #1
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d123      	bne.n	8005312 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	401a      	ands	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80052ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	3248      	adds	r2, #72	; 0x48
 80052f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005306:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005308:	6979      	ldr	r1, [r7, #20]
 800530a:	3348      	adds	r3, #72	; 0x48
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	440b      	add	r3, r1
 8005310:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d122      	bne.n	8005360 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	431a      	orrs	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800533a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	3248      	adds	r2, #72	; 0x48
 8005340:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005354:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	3348      	adds	r3, #72	; 0x48
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d109      	bne.n	800537c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	43db      	mvns	r3, r3
 8005372:	401a      	ands	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800537a:	e007      	b.n	800538c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	431a      	orrs	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	43db      	mvns	r3, r3
 800539e:	401a      	ands	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80053a6:	e007      	b.n	80053b8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e006      	b.n	80053f2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d12e      	bne.n	8005470 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800542a:	f7fe fd85 	bl	8003f38 <HAL_GetTick>
 800542e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005430:	e012      	b.n	8005458 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005432:	f7fe fd81 	bl	8003f38 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b0a      	cmp	r3, #10
 800543e:	d90b      	bls.n	8005458 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2205      	movs	r2, #5
 8005450:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e012      	b.n	800547e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e5      	bne.n	8005432 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	e006      	b.n	800547e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005486:	b480      	push	{r7}
 8005488:	b089      	sub	sp, #36	; 0x24
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800549a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80054a4:	7ffb      	ldrb	r3, [r7, #31]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d003      	beq.n	80054b2 <HAL_CAN_AddTxMessage+0x2c>
 80054aa:	7ffb      	ldrb	r3, [r7, #31]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	f040 80b8 	bne.w	8005622 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d105      	bne.n	80054d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 80a0 	beq.w	8005612 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	0e1b      	lsrs	r3, r3, #24
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d907      	bls.n	80054f2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e09e      	b.n	8005630 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80054f2:	2201      	movs	r2, #1
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	409a      	lsls	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10d      	bne.n	8005520 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	6809      	ldr	r1, [r1, #0]
 8005512:	431a      	orrs	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3318      	adds	r3, #24
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	440b      	add	r3, r1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e00f      	b.n	8005540 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800552a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005530:	68f9      	ldr	r1, [r7, #12]
 8005532:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005534:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	3318      	adds	r3, #24
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	440b      	add	r3, r1
 800553e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	3318      	adds	r3, #24
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	440b      	add	r3, r1
 8005550:	3304      	adds	r3, #4
 8005552:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	7d1b      	ldrb	r3, [r3, #20]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d111      	bne.n	8005580 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3318      	adds	r3, #24
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	6811      	ldr	r1, [r2, #0]
 8005570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	3318      	adds	r3, #24
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	440b      	add	r3, r1
 800557c:	3304      	adds	r3, #4
 800557e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3307      	adds	r3, #7
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	061a      	lsls	r2, r3, #24
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3306      	adds	r3, #6
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3305      	adds	r3, #5
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	4313      	orrs	r3, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	3204      	adds	r2, #4
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	4610      	mov	r0, r2
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	6811      	ldr	r1, [r2, #0]
 80055a8:	ea43 0200 	orr.w	r2, r3, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	440b      	add	r3, r1
 80055b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80055b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3303      	adds	r3, #3
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	061a      	lsls	r2, r3, #24
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3302      	adds	r3, #2
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	041b      	lsls	r3, r3, #16
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3301      	adds	r3, #1
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	4313      	orrs	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	7812      	ldrb	r2, [r2, #0]
 80055d8:	4610      	mov	r0, r2
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	6811      	ldr	r1, [r2, #0]
 80055de:	ea43 0200 	orr.w	r2, r3, r0
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	440b      	add	r3, r1
 80055e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80055ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	3318      	adds	r3, #24
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4413      	add	r3, r2
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	6811      	ldr	r1, [r2, #0]
 8005600:	f043 0201 	orr.w	r2, r3, #1
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	3318      	adds	r3, #24
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	440b      	add	r3, r1
 800560c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e00e      	b.n	8005630 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e006      	b.n	8005630 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3724      	adds	r7, #36	; 0x24
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005650:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d003      	beq.n	8005660 <HAL_CAN_GetRxMessage+0x24>
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	2b02      	cmp	r3, #2
 800565c:	f040 80f3 	bne.w	8005846 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10e      	bne.n	8005684 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d116      	bne.n	80056a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0e7      	b.n	8005854 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e0d8      	b.n	8005854 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	331b      	adds	r3, #27
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	4413      	add	r3, r2
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0204 	and.w	r2, r3, #4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10c      	bne.n	80056da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	331b      	adds	r3, #27
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	4413      	add	r3, r2
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	0d5b      	lsrs	r3, r3, #21
 80056d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	e00b      	b.n	80056f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	331b      	adds	r3, #27
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	4413      	add	r3, r2
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	08db      	lsrs	r3, r3, #3
 80056ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	331b      	adds	r3, #27
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	4413      	add	r3, r2
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0202 	and.w	r2, r3, #2
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	331b      	adds	r3, #27
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	4413      	add	r3, r2
 8005714:	3304      	adds	r3, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 020f 	and.w	r2, r3, #15
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	331b      	adds	r3, #27
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	4413      	add	r3, r2
 800572c:	3304      	adds	r3, #4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	b2da      	uxtb	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	331b      	adds	r3, #27
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	4413      	add	r3, r2
 8005744:	3304      	adds	r3, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	4413      	add	r3, r2
 800575a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	4413      	add	r3, r2
 8005770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	0a1a      	lsrs	r2, r3, #8
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	4413      	add	r3, r2
 800578a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	0c1a      	lsrs	r2, r3, #16
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	3302      	adds	r3, #2
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	0e1a      	lsrs	r2, r3, #24
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	3303      	adds	r3, #3
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	4413      	add	r3, r2
 80057be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	3304      	adds	r3, #4
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0a1a      	lsrs	r2, r3, #8
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	3305      	adds	r3, #5
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	0c1a      	lsrs	r2, r3, #16
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	3306      	adds	r3, #6
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4413      	add	r3, r2
 800580a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	0e1a      	lsrs	r2, r3, #24
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	3307      	adds	r3, #7
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d108      	bne.n	8005832 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0220 	orr.w	r2, r2, #32
 800582e:	60da      	str	r2, [r3, #12]
 8005830:	e007      	b.n	8005842 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0220 	orr.w	r2, r2, #32
 8005840:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e006      	b.n	8005854 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
  }
}
 8005854:	4618      	mov	r0, r3
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005870:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d002      	beq.n	800587e <HAL_CAN_ActivateNotification+0x1e>
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d109      	bne.n	8005892 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6959      	ldr	r1, [r3, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e006      	b.n	80058a0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
  }
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d07c      	beq.n	80059ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d023      	beq.n	8005944 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2201      	movs	r2, #1
 8005902:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f983 	bl	8005c1a <HAL_CAN_TxMailbox0CompleteCallback>
 8005914:	e016      	b.n	8005944 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
 8005928:	e00c      	b.n	8005944 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	e002      	b.n	8005944 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f989 	bl	8005c56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594a:	2b00      	cmp	r3, #0
 800594c:	d024      	beq.n	8005998 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005956:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f963 	bl	8005c2e <HAL_CAN_TxMailbox1CompleteCallback>
 8005968:	e016      	b.n	8005998 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
 800597c:	e00c      	b.n	8005998 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005984:	2b00      	cmp	r3, #0
 8005986:	d004      	beq.n	8005992 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	e002      	b.n	8005998 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f969 	bl	8005c6a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d024      	beq.n	80059ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f943 	bl	8005c42 <HAL_CAN_TxMailbox2CompleteCallback>
 80059bc:	e016      	b.n	80059ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
 80059d0:	e00c      	b.n	80059ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
 80059e4:	e002      	b.n	80059ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f949 	bl	8005c7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f930 	bl	8005c92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fb ff8e 	bl	800196c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00c      	beq.n	8005a74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2210      	movs	r2, #16
 8005a72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f912 	bl	8005cba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f8f9 	bl	8005ca6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d006      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2210      	movs	r2, #16
 8005ace:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f8fc 	bl	8005cce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2208      	movs	r2, #8
 8005af0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8f5 	bl	8005ce2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d07b      	beq.n	8005bfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d072      	beq.n	8005bf2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	f043 0302 	orr.w	r3, r3, #2
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	f043 0304 	orr.w	r3, r3, #4
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d043      	beq.n	8005bf2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d03e      	beq.n	8005bf2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b7a:	2b60      	cmp	r3, #96	; 0x60
 8005b7c:	d02b      	beq.n	8005bd6 <HAL_CAN_IRQHandler+0x32a>
 8005b7e:	2b60      	cmp	r3, #96	; 0x60
 8005b80:	d82e      	bhi.n	8005be0 <HAL_CAN_IRQHandler+0x334>
 8005b82:	2b50      	cmp	r3, #80	; 0x50
 8005b84:	d022      	beq.n	8005bcc <HAL_CAN_IRQHandler+0x320>
 8005b86:	2b50      	cmp	r3, #80	; 0x50
 8005b88:	d82a      	bhi.n	8005be0 <HAL_CAN_IRQHandler+0x334>
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d019      	beq.n	8005bc2 <HAL_CAN_IRQHandler+0x316>
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d826      	bhi.n	8005be0 <HAL_CAN_IRQHandler+0x334>
 8005b92:	2b30      	cmp	r3, #48	; 0x30
 8005b94:	d010      	beq.n	8005bb8 <HAL_CAN_IRQHandler+0x30c>
 8005b96:	2b30      	cmp	r3, #48	; 0x30
 8005b98:	d822      	bhi.n	8005be0 <HAL_CAN_IRQHandler+0x334>
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d002      	beq.n	8005ba4 <HAL_CAN_IRQHandler+0x2f8>
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d005      	beq.n	8005bae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ba2:	e01d      	b.n	8005be0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	f043 0308 	orr.w	r3, r3, #8
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bac:	e019      	b.n	8005be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	f043 0310 	orr.w	r3, r3, #16
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bb6:	e014      	b.n	8005be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	f043 0320 	orr.w	r3, r3, #32
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bc0:	e00f      	b.n	8005be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bca:	e00a      	b.n	8005be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bd4:	e005      	b.n	8005be2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bde:	e000      	b.n	8005be2 <HAL_CAN_IRQHandler+0x336>
            break;
 8005be0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005bf0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f872 	bl	8005cf6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005c12:	bf00      	nop
 8005c14:	3728      	adds	r7, #40	; 0x28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <__NVIC_SetPriorityGrouping+0x44>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d28:	4013      	ands	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d3e:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <__NVIC_SetPriorityGrouping+0x44>)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	60d3      	str	r3, [r2, #12]
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	e000ed00 	.word	0xe000ed00

08005d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <__NVIC_GetPriorityGrouping+0x18>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	f003 0307 	and.w	r3, r3, #7
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	e000ed00 	.word	0xe000ed00

08005d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	db0b      	blt.n	8005d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	f003 021f 	and.w	r2, r3, #31
 8005d88:	4907      	ldr	r1, [pc, #28]	; (8005da8 <__NVIC_EnableIRQ+0x38>)
 8005d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	2001      	movs	r0, #1
 8005d92:	fa00 f202 	lsl.w	r2, r0, r2
 8005d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	e000e100 	.word	0xe000e100

08005dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	6039      	str	r1, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	db0a      	blt.n	8005dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	490c      	ldr	r1, [pc, #48]	; (8005df8 <__NVIC_SetPriority+0x4c>)
 8005dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dca:	0112      	lsls	r2, r2, #4
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	440b      	add	r3, r1
 8005dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dd4:	e00a      	b.n	8005dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4908      	ldr	r1, [pc, #32]	; (8005dfc <__NVIC_SetPriority+0x50>)
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	3b04      	subs	r3, #4
 8005de4:	0112      	lsls	r2, r2, #4
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	440b      	add	r3, r1
 8005dea:	761a      	strb	r2, [r3, #24]
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	e000e100 	.word	0xe000e100
 8005dfc:	e000ed00 	.word	0xe000ed00

08005e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b089      	sub	sp, #36	; 0x24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f1c3 0307 	rsb	r3, r3, #7
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	bf28      	it	cs
 8005e1e:	2304      	movcs	r3, #4
 8005e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	3304      	adds	r3, #4
 8005e26:	2b06      	cmp	r3, #6
 8005e28:	d902      	bls.n	8005e30 <NVIC_EncodePriority+0x30>
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3b03      	subs	r3, #3
 8005e2e:	e000      	b.n	8005e32 <NVIC_EncodePriority+0x32>
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e34:	f04f 32ff 	mov.w	r2, #4294967295
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	401a      	ands	r2, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e48:	f04f 31ff 	mov.w	r1, #4294967295
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	43d9      	mvns	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e58:	4313      	orrs	r3, r2
         );
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3724      	adds	r7, #36	; 0x24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e78:	d301      	bcc.n	8005e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e00f      	b.n	8005e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <SysTick_Config+0x40>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e86:	210f      	movs	r1, #15
 8005e88:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8c:	f7ff ff8e 	bl	8005dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <SysTick_Config+0x40>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e96:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <SysTick_Config+0x40>)
 8005e98:	2207      	movs	r2, #7
 8005e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	e000e010 	.word	0xe000e010

08005eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff29 	bl	8005d0c <__NVIC_SetPriorityGrouping>
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b086      	sub	sp, #24
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	4603      	mov	r3, r0
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ed4:	f7ff ff3e 	bl	8005d54 <__NVIC_GetPriorityGrouping>
 8005ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	f7ff ff8e 	bl	8005e00 <NVIC_EncodePriority>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff ff5d 	bl	8005dac <__NVIC_SetPriority>
}
 8005ef2:	bf00      	nop
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	4603      	mov	r3, r0
 8005f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff ff31 	bl	8005d70 <__NVIC_EnableIRQ>
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff ffa2 	bl	8005e68 <SysTick_Config>
 8005f24:	4603      	mov	r3, r0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e037      	b.n	8005fb4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005f5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005f5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f9b8 	bl	800630c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}  
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_DMA_Start_IT+0x20>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e04a      	b.n	8006072 <HAL_DMA_Start_IT+0xb6>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d13a      	bne.n	8006064 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f94b 	bl	80062ae <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 020e 	orr.w	r2, r2, #14
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e00f      	b.n	8006052 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f042 020a 	orr.w	r2, r2, #10
 8006040:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0204 	bic.w	r2, r2, #4
 8006050:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0201 	orr.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	e005      	b.n	8006070 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800606c:	2302      	movs	r3, #2
 800606e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006070:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006088:	2b02      	cmp	r3, #2
 800608a:	d008      	beq.n	800609e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2204      	movs	r2, #4
 8006090:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e020      	b.n	80060e0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 020e 	bic.w	r2, r2, #14
 80060ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	2101      	movs	r1, #1
 80060c8:	fa01 f202 	lsl.w	r2, r1, r2
 80060cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d005      	beq.n	800610e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2204      	movs	r2, #4
 8006106:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
 800610c:	e027      	b.n	800615e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 020e 	bic.w	r2, r2, #14
 800611c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0201 	bic.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006136:	2101      	movs	r1, #1
 8006138:	fa01 f202 	lsl.w	r2, r1, r2
 800613c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
    } 
  }
  return status;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	2204      	movs	r2, #4
 8006186:	409a      	lsls	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d024      	beq.n	80061da <HAL_DMA_IRQHandler+0x72>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01f      	beq.n	80061da <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d107      	bne.n	80061b8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0204 	bic.w	r2, r2, #4
 80061b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	2104      	movs	r1, #4
 80061c2:	fa01 f202 	lsl.w	r2, r1, r2
 80061c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d06a      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80061d8:	e065      	b.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	2202      	movs	r2, #2
 80061e0:	409a      	lsls	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4013      	ands	r3, r2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d02c      	beq.n	8006244 <HAL_DMA_IRQHandler+0xdc>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d027      	beq.n	8006244 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 020a 	bic.w	r2, r2, #10
 8006210:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	2102      	movs	r1, #2
 8006224:	fa01 f202 	lsl.w	r2, r1, r2
 8006228:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d035      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006242:	e030      	b.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	2208      	movs	r2, #8
 800624a:	409a      	lsls	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d028      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d023      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 020e 	bic.w	r2, r2, #14
 800626c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006276:	2101      	movs	r1, #1
 8006278:	fa01 f202 	lsl.w	r2, r1, r2
 800627c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
    }
  }
}  
 80062a4:	e7ff      	b.n	80062a6 <HAL_DMA_IRQHandler+0x13e>
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f202 	lsl.w	r2, r1, r2
 80062ca:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d108      	bne.n	80062ee <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80062ec:	e007      	b.n	80062fe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	60da      	str	r2, [r3, #12]
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <DMA_CalcBaseAndBitshift+0x60>)
 800631c:	429a      	cmp	r2, r3
 800631e:	d80f      	bhi.n	8006340 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	4b12      	ldr	r3, [pc, #72]	; (8006370 <DMA_CalcBaseAndBitshift+0x64>)
 8006328:	4413      	add	r3, r2
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <DMA_CalcBaseAndBitshift+0x68>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	009a      	lsls	r2, r3, #2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a0f      	ldr	r2, [pc, #60]	; (8006378 <DMA_CalcBaseAndBitshift+0x6c>)
 800633c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800633e:	e00e      	b.n	800635e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <DMA_CalcBaseAndBitshift+0x70>)
 8006348:	4413      	add	r3, r2
 800634a:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <DMA_CalcBaseAndBitshift+0x68>)
 800634c:	fba2 2303 	umull	r2, r3, r2, r3
 8006350:	091b      	lsrs	r3, r3, #4
 8006352:	009a      	lsls	r2, r3, #2
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <DMA_CalcBaseAndBitshift+0x74>)
 800635c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40020407 	.word	0x40020407
 8006370:	bffdfff8 	.word	0xbffdfff8
 8006374:	cccccccd 	.word	0xcccccccd
 8006378:	40020000 	.word	0x40020000
 800637c:	bffdfbf8 	.word	0xbffdfbf8
 8006380:	40020400 	.word	0x40020400

08006384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006392:	e154      	b.n	800663e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	2101      	movs	r1, #1
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	fa01 f303 	lsl.w	r3, r1, r3
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8146 	beq.w	8006638 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d005      	beq.n	80063c4 <HAL_GPIO_Init+0x40>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d130      	bne.n	8006426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	2203      	movs	r2, #3
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4013      	ands	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063fa:	2201      	movs	r2, #1
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	091b      	lsrs	r3, r3, #4
 8006410:	f003 0201 	and.w	r2, r3, #1
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d017      	beq.n	8006462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	2203      	movs	r2, #3
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	43db      	mvns	r3, r3
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4013      	ands	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d123      	bne.n	80064b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	08da      	lsrs	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3208      	adds	r2, #8
 8006476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	220f      	movs	r2, #15
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43db      	mvns	r3, r3
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4013      	ands	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	08da      	lsrs	r2, r3, #3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3208      	adds	r2, #8
 80064b0:	6939      	ldr	r1, [r7, #16]
 80064b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	2203      	movs	r2, #3
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43db      	mvns	r3, r3
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4013      	ands	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 0203 	and.w	r2, r3, #3
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 80a0 	beq.w	8006638 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064f8:	4b58      	ldr	r3, [pc, #352]	; (800665c <HAL_GPIO_Init+0x2d8>)
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	4a57      	ldr	r2, [pc, #348]	; (800665c <HAL_GPIO_Init+0x2d8>)
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	6193      	str	r3, [r2, #24]
 8006504:	4b55      	ldr	r3, [pc, #340]	; (800665c <HAL_GPIO_Init+0x2d8>)
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	60bb      	str	r3, [r7, #8]
 800650e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006510:	4a53      	ldr	r2, [pc, #332]	; (8006660 <HAL_GPIO_Init+0x2dc>)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	089b      	lsrs	r3, r3, #2
 8006516:	3302      	adds	r3, #2
 8006518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	220f      	movs	r2, #15
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	43db      	mvns	r3, r3
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4013      	ands	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800653a:	d019      	beq.n	8006570 <HAL_GPIO_Init+0x1ec>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a49      	ldr	r2, [pc, #292]	; (8006664 <HAL_GPIO_Init+0x2e0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <HAL_GPIO_Init+0x1e8>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a48      	ldr	r2, [pc, #288]	; (8006668 <HAL_GPIO_Init+0x2e4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00d      	beq.n	8006568 <HAL_GPIO_Init+0x1e4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a47      	ldr	r2, [pc, #284]	; (800666c <HAL_GPIO_Init+0x2e8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <HAL_GPIO_Init+0x1e0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a46      	ldr	r2, [pc, #280]	; (8006670 <HAL_GPIO_Init+0x2ec>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d101      	bne.n	8006560 <HAL_GPIO_Init+0x1dc>
 800655c:	2304      	movs	r3, #4
 800655e:	e008      	b.n	8006572 <HAL_GPIO_Init+0x1ee>
 8006560:	2305      	movs	r3, #5
 8006562:	e006      	b.n	8006572 <HAL_GPIO_Init+0x1ee>
 8006564:	2303      	movs	r3, #3
 8006566:	e004      	b.n	8006572 <HAL_GPIO_Init+0x1ee>
 8006568:	2302      	movs	r3, #2
 800656a:	e002      	b.n	8006572 <HAL_GPIO_Init+0x1ee>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_GPIO_Init+0x1ee>
 8006570:	2300      	movs	r3, #0
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	f002 0203 	and.w	r2, r2, #3
 8006578:	0092      	lsls	r2, r2, #2
 800657a:	4093      	lsls	r3, r2
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006582:	4937      	ldr	r1, [pc, #220]	; (8006660 <HAL_GPIO_Init+0x2dc>)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	3302      	adds	r3, #2
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006590:	4b38      	ldr	r3, [pc, #224]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	43db      	mvns	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4013      	ands	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80065b4:	4a2f      	ldr	r2, [pc, #188]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80065ba:	4b2e      	ldr	r3, [pc, #184]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	43db      	mvns	r3, r3
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4013      	ands	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80065de:	4a25      	ldr	r2, [pc, #148]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065e4:	4b23      	ldr	r3, [pc, #140]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	43db      	mvns	r3, r3
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4013      	ands	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006608:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800660e:	4b19      	ldr	r3, [pc, #100]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	43db      	mvns	r3, r3
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4013      	ands	r3, r2
 800661c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <HAL_GPIO_Init+0x2f0>)
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3301      	adds	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	fa22 f303 	lsr.w	r3, r2, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	f47f aea3 	bne.w	8006394 <HAL_GPIO_Init+0x10>
  }
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	40021000 	.word	0x40021000
 8006660:	40010000 	.word	0x40010000
 8006664:	48000400 	.word	0x48000400
 8006668:	48000800 	.word	0x48000800
 800666c:	48000c00 	.word	0x48000c00
 8006670:	48001000 	.word	0x48001000
 8006674:	40010400 	.word	0x40010400

08006678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	887b      	ldrh	r3, [r7, #2]
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
 8006694:	e001      	b.n	800669a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	807b      	strh	r3, [r7, #2]
 80066b4:	4613      	mov	r3, r2
 80066b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066b8:	787b      	ldrb	r3, [r7, #1]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066be:	887a      	ldrh	r2, [r7, #2]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066c4:	e002      	b.n	80066cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066c6:	887a      	ldrh	r2, [r7, #2]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80066de:	af00      	add	r7, sp, #0
 80066e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f001 b823 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 817d 	beq.w	8006a0e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006714:	4bbc      	ldr	r3, [pc, #752]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b04      	cmp	r3, #4
 800671e:	d00c      	beq.n	800673a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006720:	4bb9      	ldr	r3, [pc, #740]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b08      	cmp	r3, #8
 800672a:	d15c      	bne.n	80067e6 <HAL_RCC_OscConfig+0x10e>
 800672c:	4bb6      	ldr	r3, [pc, #728]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006738:	d155      	bne.n	80067e6 <HAL_RCC_OscConfig+0x10e>
 800673a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800673e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006742:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006746:	fa93 f3a3 	rbit	r3, r3
 800674a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800674e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006752:	fab3 f383 	clz	r3, r3
 8006756:	b2db      	uxtb	r3, r3
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d102      	bne.n	800676c <HAL_RCC_OscConfig+0x94>
 8006766:	4ba8      	ldr	r3, [pc, #672]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	e015      	b.n	8006798 <HAL_RCC_OscConfig+0xc0>
 800676c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006770:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006774:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006778:	fa93 f3a3 	rbit	r3, r3
 800677c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006784:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006788:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800678c:	fa93 f3a3 	rbit	r3, r3
 8006790:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006794:	4b9c      	ldr	r3, [pc, #624]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800679c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80067a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80067a4:	fa92 f2a2 	rbit	r2, r2
 80067a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80067ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80067b0:	fab2 f282 	clz	r2, r2
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	f042 0220 	orr.w	r2, r2, #32
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	f002 021f 	and.w	r2, r2, #31
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f202 	lsl.w	r2, r1, r2
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 811f 	beq.w	8006a0c <HAL_RCC_OscConfig+0x334>
 80067ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f040 8116 	bne.w	8006a0c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f000 bfaf 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f6:	d106      	bne.n	8006806 <HAL_RCC_OscConfig+0x12e>
 80067f8:	4b83      	ldr	r3, [pc, #524]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a82      	ldr	r2, [pc, #520]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 80067fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	e036      	b.n	8006874 <HAL_RCC_OscConfig+0x19c>
 8006806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800680a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10c      	bne.n	8006830 <HAL_RCC_OscConfig+0x158>
 8006816:	4b7c      	ldr	r3, [pc, #496]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a7b      	ldr	r2, [pc, #492]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 800681c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	4b79      	ldr	r3, [pc, #484]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a78      	ldr	r2, [pc, #480]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e021      	b.n	8006874 <HAL_RCC_OscConfig+0x19c>
 8006830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006834:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006840:	d10c      	bne.n	800685c <HAL_RCC_OscConfig+0x184>
 8006842:	4b71      	ldr	r3, [pc, #452]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a70      	ldr	r2, [pc, #448]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	4b6e      	ldr	r3, [pc, #440]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a6d      	ldr	r2, [pc, #436]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	e00b      	b.n	8006874 <HAL_RCC_OscConfig+0x19c>
 800685c:	4b6a      	ldr	r3, [pc, #424]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a69      	ldr	r2, [pc, #420]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	4b67      	ldr	r3, [pc, #412]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a66      	ldr	r2, [pc, #408]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 800686e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006872:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006874:	4b64      	ldr	r3, [pc, #400]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f023 020f 	bic.w	r2, r3, #15
 800687c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	495f      	ldr	r1, [pc, #380]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 800688a:	4313      	orrs	r3, r2
 800688c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800688e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d059      	beq.n	8006952 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689e:	f7fd fb4b 	bl	8003f38 <HAL_GetTick>
 80068a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a6:	e00a      	b.n	80068be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068a8:	f7fd fb46 	bl	8003f38 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b64      	cmp	r3, #100	; 0x64
 80068b6:	d902      	bls.n	80068be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	f000 bf43 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
 80068be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80068ca:	fa93 f3a3 	rbit	r3, r3
 80068ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80068d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	fab3 f383 	clz	r3, r3
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	f043 0301 	orr.w	r3, r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d102      	bne.n	80068f0 <HAL_RCC_OscConfig+0x218>
 80068ea:	4b47      	ldr	r3, [pc, #284]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	e015      	b.n	800691c <HAL_RCC_OscConfig+0x244>
 80068f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80068fc:	fa93 f3a3 	rbit	r3, r3
 8006900:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006908:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800690c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006910:	fa93 f3a3 	rbit	r3, r3
 8006914:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006918:	4b3b      	ldr	r3, [pc, #236]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006920:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006924:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006928:	fa92 f2a2 	rbit	r2, r2
 800692c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006930:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006934:	fab2 f282 	clz	r2, r2
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	f042 0220 	orr.w	r2, r2, #32
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	f002 021f 	and.w	r2, r2, #31
 8006944:	2101      	movs	r1, #1
 8006946:	fa01 f202 	lsl.w	r2, r1, r2
 800694a:	4013      	ands	r3, r2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0ab      	beq.n	80068a8 <HAL_RCC_OscConfig+0x1d0>
 8006950:	e05d      	b.n	8006a0e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006952:	f7fd faf1 	bl	8003f38 <HAL_GetTick>
 8006956:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800695a:	e00a      	b.n	8006972 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800695c:	f7fd faec 	bl	8003f38 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b64      	cmp	r3, #100	; 0x64
 800696a:	d902      	bls.n	8006972 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	f000 bee9 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
 8006972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006976:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800697e:	fa93 f3a3 	rbit	r3, r3
 8006982:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006986:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800698a:	fab3 f383 	clz	r3, r3
 800698e:	b2db      	uxtb	r3, r3
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	b2db      	uxtb	r3, r3
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b01      	cmp	r3, #1
 800699c:	d102      	bne.n	80069a4 <HAL_RCC_OscConfig+0x2cc>
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	e015      	b.n	80069d0 <HAL_RCC_OscConfig+0x2f8>
 80069a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80069b0:	fa93 f3a3 	rbit	r3, r3
 80069b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80069b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80069c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80069c4:	fa93 f3a3 	rbit	r3, r3
 80069c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <HAL_RCC_OscConfig+0x330>)
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80069d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80069dc:	fa92 f2a2 	rbit	r2, r2
 80069e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80069e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80069e8:	fab2 f282 	clz	r2, r2
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	f042 0220 	orr.w	r2, r2, #32
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	f002 021f 	and.w	r2, r2, #31
 80069f8:	2101      	movs	r1, #1
 80069fa:	fa01 f202 	lsl.w	r2, r1, r2
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1ab      	bne.n	800695c <HAL_RCC_OscConfig+0x284>
 8006a04:	e003      	b.n	8006a0e <HAL_RCC_OscConfig+0x336>
 8006a06:	bf00      	nop
 8006a08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 817d 	beq.w	8006d1e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006a24:	4ba6      	ldr	r3, [pc, #664]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f003 030c 	and.w	r3, r3, #12
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a30:	4ba3      	ldr	r3, [pc, #652]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 030c 	and.w	r3, r3, #12
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d172      	bne.n	8006b22 <HAL_RCC_OscConfig+0x44a>
 8006a3c:	4ba0      	ldr	r3, [pc, #640]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d16c      	bne.n	8006b22 <HAL_RCC_OscConfig+0x44a>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a4e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006a52:	fa93 f3a3 	rbit	r3, r3
 8006a56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006a5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a5e:	fab3 f383 	clz	r3, r3
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d102      	bne.n	8006a78 <HAL_RCC_OscConfig+0x3a0>
 8006a72:	4b93      	ldr	r3, [pc, #588]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	e013      	b.n	8006aa0 <HAL_RCC_OscConfig+0x3c8>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006a82:	fa93 f3a3 	rbit	r3, r3
 8006a86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006a90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006a94:	fa93 f3a3 	rbit	r3, r3
 8006a98:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006a9c:	4b88      	ldr	r3, [pc, #544]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006aa6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006aaa:	fa92 f2a2 	rbit	r2, r2
 8006aae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006ab2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006ab6:	fab2 f282 	clz	r2, r2
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	f042 0220 	orr.w	r2, r2, #32
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	f002 021f 	and.w	r2, r2, #31
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8006acc:	4013      	ands	r3, r2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x410>
 8006ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d002      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f000 be2e 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae8:	4b75      	ldr	r3, [pc, #468]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	21f8      	movs	r1, #248	; 0xf8
 8006afe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b02:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006b06:	fa91 f1a1 	rbit	r1, r1
 8006b0a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006b0e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006b12:	fab1 f181 	clz	r1, r1
 8006b16:	b2c9      	uxtb	r1, r1
 8006b18:	408b      	lsls	r3, r1
 8006b1a:	4969      	ldr	r1, [pc, #420]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b20:	e0fd      	b.n	8006d1e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8088 	beq.w	8006c44 <HAL_RCC_OscConfig+0x56c>
 8006b34:	2301      	movs	r3, #1
 8006b36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006b3e:	fa93 f3a3 	rbit	r3, r3
 8006b42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006b46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b4a:	fab3 f383 	clz	r3, r3
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b60:	f7fd f9ea 	bl	8003f38 <HAL_GetTick>
 8006b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b6a:	f7fd f9e5 	bl	8003f38 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d902      	bls.n	8006b80 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	f000 bde2 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
 8006b80:	2302      	movs	r3, #2
 8006b82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006b8a:	fa93 f3a3 	rbit	r3, r3
 8006b8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006b92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b96:	fab3 f383 	clz	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f043 0301 	orr.w	r3, r3, #1
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d102      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x4d8>
 8006baa:	4b45      	ldr	r3, [pc, #276]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	e013      	b.n	8006bd8 <HAL_RCC_OscConfig+0x500>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006bba:	fa93 f3a3 	rbit	r3, r3
 8006bbe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006bc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006bcc:	fa93 f3a3 	rbit	r3, r3
 8006bd0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006bd4:	4b3a      	ldr	r3, [pc, #232]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006bde:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006be2:	fa92 f2a2 	rbit	r2, r2
 8006be6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006bea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006bee:	fab2 f282 	clz	r2, r2
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	f042 0220 	orr.w	r2, r2, #32
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	f002 021f 	and.w	r2, r2, #31
 8006bfe:	2101      	movs	r1, #1
 8006c00:	fa01 f202 	lsl.w	r2, r1, r2
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0af      	beq.n	8006b6a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0a:	4b2d      	ldr	r3, [pc, #180]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	21f8      	movs	r1, #248	; 0xf8
 8006c20:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c24:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006c28:	fa91 f1a1 	rbit	r1, r1
 8006c2c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006c30:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006c34:	fab1 f181 	clz	r1, r1
 8006c38:	b2c9      	uxtb	r1, r1
 8006c3a:	408b      	lsls	r3, r1
 8006c3c:	4920      	ldr	r1, [pc, #128]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]
 8006c42:	e06c      	b.n	8006d1e <HAL_RCC_OscConfig+0x646>
 8006c44:	2301      	movs	r3, #1
 8006c46:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c4e:	fa93 f3a3 	rbit	r3, r3
 8006c52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006c56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c5a:	fab3 f383 	clz	r3, r3
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c70:	f7fd f962 	bl	8003f38 <HAL_GetTick>
 8006c74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c78:	e00a      	b.n	8006c90 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c7a:	f7fd f95d 	bl	8003f38 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d902      	bls.n	8006c90 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	f000 bd5a 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c9a:	fa93 f3a3 	rbit	r3, r3
 8006c9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca6:	fab3 f383 	clz	r3, r3
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d104      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x5ec>
 8006cba:	4b01      	ldr	r3, [pc, #4]	; (8006cc0 <HAL_RCC_OscConfig+0x5e8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	e015      	b.n	8006cec <HAL_RCC_OscConfig+0x614>
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cce:	fa93 f3a3 	rbit	r3, r3
 8006cd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ce0:	fa93 f3a3 	rbit	r3, r3
 8006ce4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ce8:	4bc8      	ldr	r3, [pc, #800]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	2202      	movs	r2, #2
 8006cee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006cf2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006cf6:	fa92 f2a2 	rbit	r2, r2
 8006cfa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006cfe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006d02:	fab2 f282 	clz	r2, r2
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	f042 0220 	orr.w	r2, r2, #32
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	f002 021f 	and.w	r2, r2, #31
 8006d12:	2101      	movs	r1, #1
 8006d14:	fa01 f202 	lsl.w	r2, r1, r2
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1ad      	bne.n	8006c7a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8110 	beq.w	8006f54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d079      	beq.n	8006e38 <HAL_RCC_OscConfig+0x760>
 8006d44:	2301      	movs	r3, #1
 8006d46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d4e:	fa93 f3a3 	rbit	r3, r3
 8006d52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d5a:	fab3 f383 	clz	r3, r3
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	461a      	mov	r2, r3
 8006d62:	4bab      	ldr	r3, [pc, #684]	; (8007010 <HAL_RCC_OscConfig+0x938>)
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d6e:	f7fd f8e3 	bl	8003f38 <HAL_GetTick>
 8006d72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d76:	e00a      	b.n	8006d8e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d78:	f7fd f8de 	bl	8003f38 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d902      	bls.n	8006d8e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	f000 bcdb 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d98:	fa93 f3a3 	rbit	r3, r3
 8006d9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006da4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006da8:	2202      	movs	r2, #2
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006db0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	fa93 f2a3 	rbit	r2, r3
 8006dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dcc:	2202      	movs	r2, #2
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	fa93 f2a3 	rbit	r2, r3
 8006dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006de2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006de6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de8:	4b88      	ldr	r3, [pc, #544]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006df0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006df4:	2102      	movs	r1, #2
 8006df6:	6019      	str	r1, [r3, #0]
 8006df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dfc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	fa93 f1a3 	rbit	r1, r3
 8006e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e0e:	6019      	str	r1, [r3, #0]
  return result;
 8006e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e14:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	fab3 f383 	clz	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 031f 	and.w	r3, r3, #31
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0a0      	beq.n	8006d78 <HAL_RCC_OscConfig+0x6a0>
 8006e36:	e08d      	b.n	8006f54 <HAL_RCC_OscConfig+0x87c>
 8006e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e40:	2201      	movs	r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	fa93 f2a3 	rbit	r2, r3
 8006e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e56:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e5a:	601a      	str	r2, [r3, #0]
  return result;
 8006e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e66:	fab3 f383 	clz	r3, r3
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4b68      	ldr	r3, [pc, #416]	; (8007010 <HAL_RCC_OscConfig+0x938>)
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	461a      	mov	r2, r3
 8006e76:	2300      	movs	r3, #0
 8006e78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e7a:	f7fd f85d 	bl	8003f38 <HAL_GetTick>
 8006e7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e82:	e00a      	b.n	8006e9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e84:	f7fd f858 	bl	8003f38 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d902      	bls.n	8006e9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	f000 bc55 	b.w	8007744 <HAL_RCC_OscConfig+0x106c>
 8006e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eaa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	fa93 f2a3 	rbit	r2, r3
 8006eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eb8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ec2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ece:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	fa93 f2a3 	rbit	r2, r3
 8006ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eea:	2202      	movs	r2, #2
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	fa93 f2a3 	rbit	r2, r3
 8006efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f00:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f06:	4b41      	ldr	r3, [pc, #260]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f0e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f12:	2102      	movs	r1, #2
 8006f14:	6019      	str	r1, [r3, #0]
 8006f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f1a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	fa93 f1a3 	rbit	r1, r3
 8006f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f28:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f2c:	6019      	str	r1, [r3, #0]
  return result;
 8006f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	fab3 f383 	clz	r3, r3
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2101      	movs	r1, #1
 8006f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d197      	bne.n	8006e84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 81a1 	beq.w	80072ac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f70:	4b26      	ldr	r3, [pc, #152]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d116      	bne.n	8006faa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f7c:	4b23      	ldr	r3, [pc, #140]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	4a22      	ldr	r2, [pc, #136]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f86:	61d3      	str	r3, [r2, #28]
 8006f88:	4b20      	ldr	r3, [pc, #128]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f94:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006fa2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006faa:	4b1a      	ldr	r3, [pc, #104]	; (8007014 <HAL_RCC_OscConfig+0x93c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d11a      	bne.n	8006fec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fb6:	4b17      	ldr	r3, [pc, #92]	; (8007014 <HAL_RCC_OscConfig+0x93c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a16      	ldr	r2, [pc, #88]	; (8007014 <HAL_RCC_OscConfig+0x93c>)
 8006fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fc2:	f7fc ffb9 	bl	8003f38 <HAL_GetTick>
 8006fc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fca:	e009      	b.n	8006fe0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fcc:	f7fc ffb4 	bl	8003f38 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b64      	cmp	r3, #100	; 0x64
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e3b1      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <HAL_RCC_OscConfig+0x93c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0ef      	beq.n	8006fcc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d10d      	bne.n	8007018 <HAL_RCC_OscConfig+0x940>
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	4a02      	ldr	r2, [pc, #8]	; (800700c <HAL_RCC_OscConfig+0x934>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6213      	str	r3, [r2, #32]
 8007008:	e03c      	b.n	8007084 <HAL_RCC_OscConfig+0x9ac>
 800700a:	bf00      	nop
 800700c:	40021000 	.word	0x40021000
 8007010:	10908120 	.word	0x10908120
 8007014:	40007000 	.word	0x40007000
 8007018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800701c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10c      	bne.n	8007042 <HAL_RCC_OscConfig+0x96a>
 8007028:	4bc1      	ldr	r3, [pc, #772]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	4ac0      	ldr	r2, [pc, #768]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800702e:	f023 0301 	bic.w	r3, r3, #1
 8007032:	6213      	str	r3, [r2, #32]
 8007034:	4bbe      	ldr	r3, [pc, #760]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	4abd      	ldr	r2, [pc, #756]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800703a:	f023 0304 	bic.w	r3, r3, #4
 800703e:	6213      	str	r3, [r2, #32]
 8007040:	e020      	b.n	8007084 <HAL_RCC_OscConfig+0x9ac>
 8007042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	2b05      	cmp	r3, #5
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x994>
 8007052:	4bb7      	ldr	r3, [pc, #732]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	4ab6      	ldr	r2, [pc, #728]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007058:	f043 0304 	orr.w	r3, r3, #4
 800705c:	6213      	str	r3, [r2, #32]
 800705e:	4bb4      	ldr	r3, [pc, #720]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	4ab3      	ldr	r2, [pc, #716]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	6213      	str	r3, [r2, #32]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_OscConfig+0x9ac>
 800706c:	4bb0      	ldr	r3, [pc, #704]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	4aaf      	ldr	r2, [pc, #700]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	6213      	str	r3, [r2, #32]
 8007078:	4bad      	ldr	r3, [pc, #692]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	4aac      	ldr	r2, [pc, #688]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800707e:	f023 0304 	bic.w	r3, r3, #4
 8007082:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007088:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8081 	beq.w	8007198 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007096:	f7fc ff4f 	bl	8003f38 <HAL_GetTick>
 800709a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709e:	e00b      	b.n	80070b8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a0:	f7fc ff4a 	bl	8003f38 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e345      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
 80070b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80070c0:	2202      	movs	r2, #2
 80070c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	fa93 f2a3 	rbit	r2, r3
 80070d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070e4:	2202      	movs	r2, #2
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	fa93 f2a3 	rbit	r2, r3
 80070f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80070fe:	601a      	str	r2, [r3, #0]
  return result;
 8007100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007104:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007108:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710a:	fab3 f383 	clz	r3, r3
 800710e:	b2db      	uxtb	r3, r3
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d102      	bne.n	8007124 <HAL_RCC_OscConfig+0xa4c>
 800711e:	4b84      	ldr	r3, [pc, #528]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	e013      	b.n	800714c <HAL_RCC_OscConfig+0xa74>
 8007124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007128:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800712c:	2202      	movs	r2, #2
 800712e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007134:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	fa93 f2a3 	rbit	r2, r3
 800713e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007142:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	4b79      	ldr	r3, [pc, #484]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007150:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007154:	2102      	movs	r1, #2
 8007156:	6011      	str	r1, [r2, #0]
 8007158:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800715c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007160:	6812      	ldr	r2, [r2, #0]
 8007162:	fa92 f1a2 	rbit	r1, r2
 8007166:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800716a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800716e:	6011      	str	r1, [r2, #0]
  return result;
 8007170:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007174:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	fab2 f282 	clz	r2, r2
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	f002 021f 	and.w	r2, r2, #31
 800718a:	2101      	movs	r1, #1
 800718c:	fa01 f202 	lsl.w	r2, r1, r2
 8007190:	4013      	ands	r3, r2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d084      	beq.n	80070a0 <HAL_RCC_OscConfig+0x9c8>
 8007196:	e07f      	b.n	8007298 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007198:	f7fc fece 	bl	8003f38 <HAL_GetTick>
 800719c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071a0:	e00b      	b.n	80071ba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071a2:	f7fc fec9 	bl	8003f38 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e2c4      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
 80071ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80071c2:	2202      	movs	r2, #2
 80071c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	fa93 f2a3 	rbit	r2, r3
 80071d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80071e6:	2202      	movs	r2, #2
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	fa93 f2a3 	rbit	r2, r3
 80071f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007200:	601a      	str	r2, [r3, #0]
  return result;
 8007202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007206:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800720a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800720c:	fab3 f383 	clz	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f043 0302 	orr.w	r3, r3, #2
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d102      	bne.n	8007226 <HAL_RCC_OscConfig+0xb4e>
 8007220:	4b43      	ldr	r3, [pc, #268]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	e013      	b.n	800724e <HAL_RCC_OscConfig+0xb76>
 8007226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800722a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800722e:	2202      	movs	r2, #2
 8007230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007236:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	fa93 f2a3 	rbit	r2, r3
 8007240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007244:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	4b39      	ldr	r3, [pc, #228]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007252:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007256:	2102      	movs	r1, #2
 8007258:	6011      	str	r1, [r2, #0]
 800725a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800725e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	fa92 f1a2 	rbit	r1, r2
 8007268:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800726c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007270:	6011      	str	r1, [r2, #0]
  return result;
 8007272:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007276:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	fab2 f282 	clz	r2, r2
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	f002 021f 	and.w	r2, r2, #31
 800728c:	2101      	movs	r1, #1
 800728e:	fa01 f202 	lsl.w	r2, r1, r2
 8007292:	4013      	ands	r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d184      	bne.n	80071a2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007298:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800729c:	2b01      	cmp	r3, #1
 800729e:	d105      	bne.n	80072ac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072a0:	4b23      	ldr	r3, [pc, #140]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	4a22      	ldr	r2, [pc, #136]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 80072a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8242 	beq.w	8007742 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072be:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <HAL_RCC_OscConfig+0xc58>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f003 030c 	and.w	r3, r3, #12
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	f000 8213 	beq.w	80076f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	f040 8162 	bne.w	80075a2 <HAL_RCC_OscConfig+0xeca>
 80072de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80072e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072f0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	fa93 f2a3 	rbit	r2, r3
 80072fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007302:	601a      	str	r2, [r3, #0]
  return result;
 8007304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007308:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800730c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730e:	fab3 f383 	clz	r3, r3
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	461a      	mov	r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007324:	f7fc fe08 	bl	8003f38 <HAL_GetTick>
 8007328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800732c:	e00c      	b.n	8007348 <HAL_RCC_OscConfig+0xc70>
 800732e:	bf00      	nop
 8007330:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007334:	f7fc fe00 	bl	8003f38 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e1fd      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
 8007348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800734c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800735a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	fa93 f2a3 	rbit	r2, r3
 8007364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007368:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800736c:	601a      	str	r2, [r3, #0]
  return result;
 800736e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007372:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007376:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007378:	fab3 f383 	clz	r3, r3
 800737c:	b2db      	uxtb	r3, r3
 800737e:	095b      	lsrs	r3, r3, #5
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b01      	cmp	r3, #1
 800738a:	d102      	bne.n	8007392 <HAL_RCC_OscConfig+0xcba>
 800738c:	4bb0      	ldr	r3, [pc, #704]	; (8007650 <HAL_RCC_OscConfig+0xf78>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	e027      	b.n	80073e2 <HAL_RCC_OscConfig+0xd0a>
 8007392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007396:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800739a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800739e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	fa93 f2a3 	rbit	r2, r3
 80073ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073ca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	fa93 f2a3 	rbit	r2, r3
 80073d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	4b9c      	ldr	r3, [pc, #624]	; (8007650 <HAL_RCC_OscConfig+0xf78>)
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80073e6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80073ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80073ee:	6011      	str	r1, [r2, #0]
 80073f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80073f4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80073f8:	6812      	ldr	r2, [r2, #0]
 80073fa:	fa92 f1a2 	rbit	r1, r2
 80073fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007402:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007406:	6011      	str	r1, [r2, #0]
  return result;
 8007408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800740c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	fab2 f282 	clz	r2, r2
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	f042 0220 	orr.w	r2, r2, #32
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	f002 021f 	and.w	r2, r2, #31
 8007422:	2101      	movs	r1, #1
 8007424:	fa01 f202 	lsl.w	r2, r1, r2
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d182      	bne.n	8007334 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800742e:	4b88      	ldr	r3, [pc, #544]	; (8007650 <HAL_RCC_OscConfig+0xf78>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800743a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	430b      	orrs	r3, r1
 8007450:	497f      	ldr	r1, [pc, #508]	; (8007650 <HAL_RCC_OscConfig+0xf78>)
 8007452:	4313      	orrs	r3, r2
 8007454:	604b      	str	r3, [r1, #4]
 8007456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800745a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800745e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007468:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	fa93 f2a3 	rbit	r2, r3
 8007472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007476:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800747a:	601a      	str	r2, [r3, #0]
  return result;
 800747c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007480:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007484:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007486:	fab3 f383 	clz	r3, r3
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007490:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	461a      	mov	r2, r3
 8007498:	2301      	movs	r3, #1
 800749a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800749c:	f7fc fd4c 	bl	8003f38 <HAL_GetTick>
 80074a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074a4:	e009      	b.n	80074ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074a6:	f7fc fd47 	bl	8003f38 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e144      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
 80074ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	fa93 f2a3 	rbit	r2, r3
 80074d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074da:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80074de:	601a      	str	r2, [r3, #0]
  return result;
 80074e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80074e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074ea:	fab3 f383 	clz	r3, r3
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d102      	bne.n	8007504 <HAL_RCC_OscConfig+0xe2c>
 80074fe:	4b54      	ldr	r3, [pc, #336]	; (8007650 <HAL_RCC_OscConfig+0xf78>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	e027      	b.n	8007554 <HAL_RCC_OscConfig+0xe7c>
 8007504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007508:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800750c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007516:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	fa93 f2a3 	rbit	r2, r3
 8007520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007524:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800753c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	fa93 f2a3 	rbit	r2, r3
 8007546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800754a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	4b3f      	ldr	r3, [pc, #252]	; (8007650 <HAL_RCC_OscConfig+0xf78>)
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007558:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800755c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007560:	6011      	str	r1, [r2, #0]
 8007562:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007566:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	fa92 f1a2 	rbit	r1, r2
 8007570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007574:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007578:	6011      	str	r1, [r2, #0]
  return result;
 800757a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800757e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	fab2 f282 	clz	r2, r2
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	f042 0220 	orr.w	r2, r2, #32
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	f002 021f 	and.w	r2, r2, #31
 8007594:	2101      	movs	r1, #1
 8007596:	fa01 f202 	lsl.w	r2, r1, r2
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d082      	beq.n	80074a6 <HAL_RCC_OscConfig+0xdce>
 80075a0:	e0cf      	b.n	8007742 <HAL_RCC_OscConfig+0x106a>
 80075a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80075aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	fa93 f2a3 	rbit	r2, r3
 80075be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80075c6:	601a      	str	r2, [r3, #0]
  return result;
 80075c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075cc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80075d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d2:	fab3 f383 	clz	r3, r3
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80075dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	461a      	mov	r2, r3
 80075e4:	2300      	movs	r3, #0
 80075e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e8:	f7fc fca6 	bl	8003f38 <HAL_GetTick>
 80075ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075f0:	e009      	b.n	8007606 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f2:	f7fc fca1 	bl	8003f38 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e09e      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
 8007606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800760a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800760e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007618:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	fa93 f2a3 	rbit	r2, r3
 8007622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007626:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800762a:	601a      	str	r2, [r3, #0]
  return result;
 800762c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007630:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007634:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007636:	fab3 f383 	clz	r3, r3
 800763a:	b2db      	uxtb	r3, r3
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f043 0301 	orr.w	r3, r3, #1
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b01      	cmp	r3, #1
 8007648:	d104      	bne.n	8007654 <HAL_RCC_OscConfig+0xf7c>
 800764a:	4b01      	ldr	r3, [pc, #4]	; (8007650 <HAL_RCC_OscConfig+0xf78>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	e029      	b.n	80076a4 <HAL_RCC_OscConfig+0xfcc>
 8007650:	40021000 	.word	0x40021000
 8007654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007658:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800765c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007666:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	fa93 f2a3 	rbit	r2, r3
 8007670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007674:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800767e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800768c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	fa93 f2a3 	rbit	r2, r3
 8007696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <HAL_RCC_OscConfig+0x1078>)
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80076ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80076b0:	6011      	str	r1, [r2, #0]
 80076b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	fa92 f1a2 	rbit	r1, r2
 80076c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80076c8:	6011      	str	r1, [r2, #0]
  return result;
 80076ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80076ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	fab2 f282 	clz	r2, r2
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	f042 0220 	orr.w	r2, r2, #32
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	f002 021f 	and.w	r2, r2, #31
 80076e4:	2101      	movs	r1, #1
 80076e6:	fa01 f202 	lsl.w	r2, r1, r2
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d180      	bne.n	80075f2 <HAL_RCC_OscConfig+0xf1a>
 80076f0:	e027      	b.n	8007742 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e01e      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007706:	4b12      	ldr	r3, [pc, #72]	; (8007750 <HAL_RCC_OscConfig+0x1078>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800770e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007712:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800771a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	429a      	cmp	r2, r3
 8007724:	d10b      	bne.n	800773e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007726:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800772a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800772e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800773a:	429a      	cmp	r2, r3
 800773c:	d001      	beq.n	8007742 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40021000 	.word	0x40021000

08007754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b09e      	sub	sp, #120	; 0x78
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e162      	b.n	8007a32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800776c:	4b90      	ldr	r3, [pc, #576]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d910      	bls.n	800779c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b8d      	ldr	r3, [pc, #564]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f023 0207 	bic.w	r2, r3, #7
 8007782:	498b      	ldr	r1, [pc, #556]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	4313      	orrs	r3, r2
 8007788:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800778a:	4b89      	ldr	r3, [pc, #548]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e14a      	b.n	8007a32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d008      	beq.n	80077ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077a8:	4b82      	ldr	r3, [pc, #520]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	497f      	ldr	r1, [pc, #508]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80dc 	beq.w	8007980 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d13c      	bne.n	800784a <HAL_RCC_ClockConfig+0xf6>
 80077d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077d8:	fa93 f3a3 	rbit	r3, r3
 80077dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80077de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077e0:	fab3 f383 	clz	r3, r3
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d102      	bne.n	80077fa <HAL_RCC_ClockConfig+0xa6>
 80077f4:	4b6f      	ldr	r3, [pc, #444]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	e00f      	b.n	800781a <HAL_RCC_ClockConfig+0xc6>
 80077fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007802:	fa93 f3a3 	rbit	r3, r3
 8007806:	667b      	str	r3, [r7, #100]	; 0x64
 8007808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800780c:	663b      	str	r3, [r7, #96]	; 0x60
 800780e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007810:	fa93 f3a3 	rbit	r3, r3
 8007814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007816:	4b67      	ldr	r3, [pc, #412]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800781e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007820:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007822:	fa92 f2a2 	rbit	r2, r2
 8007826:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800782a:	fab2 f282 	clz	r2, r2
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	f042 0220 	orr.w	r2, r2, #32
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	f002 021f 	and.w	r2, r2, #31
 800783a:	2101      	movs	r1, #1
 800783c:	fa01 f202 	lsl.w	r2, r1, r2
 8007840:	4013      	ands	r3, r2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d17b      	bne.n	800793e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e0f3      	b.n	8007a32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d13c      	bne.n	80078cc <HAL_RCC_ClockConfig+0x178>
 8007852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007856:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785a:	fa93 f3a3 	rbit	r3, r3
 800785e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007862:	fab3 f383 	clz	r3, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	095b      	lsrs	r3, r3, #5
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f043 0301 	orr.w	r3, r3, #1
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b01      	cmp	r3, #1
 8007874:	d102      	bne.n	800787c <HAL_RCC_ClockConfig+0x128>
 8007876:	4b4f      	ldr	r3, [pc, #316]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	e00f      	b.n	800789c <HAL_RCC_ClockConfig+0x148>
 800787c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007880:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007884:	fa93 f3a3 	rbit	r3, r3
 8007888:	647b      	str	r3, [r7, #68]	; 0x44
 800788a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800788e:	643b      	str	r3, [r7, #64]	; 0x40
 8007890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007892:	fa93 f3a3 	rbit	r3, r3
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007898:	4b46      	ldr	r3, [pc, #280]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80078a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80078a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a4:	fa92 f2a2 	rbit	r2, r2
 80078a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80078aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ac:	fab2 f282 	clz	r2, r2
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	f042 0220 	orr.w	r2, r2, #32
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	f002 021f 	and.w	r2, r2, #31
 80078bc:	2101      	movs	r1, #1
 80078be:	fa01 f202 	lsl.w	r2, r1, r2
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d13a      	bne.n	800793e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0b2      	b.n	8007a32 <HAL_RCC_ClockConfig+0x2de>
 80078cc:	2302      	movs	r3, #2
 80078ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d2:	fa93 f3a3 	rbit	r3, r3
 80078d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078da:	fab3 f383 	clz	r3, r3
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d102      	bne.n	80078f4 <HAL_RCC_ClockConfig+0x1a0>
 80078ee:	4b31      	ldr	r3, [pc, #196]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	e00d      	b.n	8007910 <HAL_RCC_ClockConfig+0x1bc>
 80078f4:	2302      	movs	r3, #2
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	fa93 f3a3 	rbit	r3, r3
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007900:	2302      	movs	r3, #2
 8007902:	623b      	str	r3, [r7, #32]
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	fa93 f3a3 	rbit	r3, r3
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	4b29      	ldr	r3, [pc, #164]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2202      	movs	r2, #2
 8007912:	61ba      	str	r2, [r7, #24]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	fa92 f2a2 	rbit	r2, r2
 800791a:	617a      	str	r2, [r7, #20]
  return result;
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	fab2 f282 	clz	r2, r2
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	f042 0220 	orr.w	r2, r2, #32
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	f002 021f 	and.w	r2, r2, #31
 800792e:	2101      	movs	r1, #1
 8007930:	fa01 f202 	lsl.w	r2, r1, r2
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e079      	b.n	8007a32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800793e:	4b1d      	ldr	r3, [pc, #116]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f023 0203 	bic.w	r2, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	491a      	ldr	r1, [pc, #104]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 800794c:	4313      	orrs	r3, r2
 800794e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007950:	f7fc faf2 	bl	8003f38 <HAL_GetTick>
 8007954:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007956:	e00a      	b.n	800796e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007958:	f7fc faee 	bl	8003f38 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	f241 3288 	movw	r2, #5000	; 0x1388
 8007966:	4293      	cmp	r3, r2
 8007968:	d901      	bls.n	800796e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e061      	b.n	8007a32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800796e:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <HAL_RCC_ClockConfig+0x260>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f003 020c 	and.w	r2, r3, #12
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	429a      	cmp	r2, r3
 800797e:	d1eb      	bne.n	8007958 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d214      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798e:	4b08      	ldr	r3, [pc, #32]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 0207 	bic.w	r2, r3, #7
 8007996:	4906      	ldr	r1, [pc, #24]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	4313      	orrs	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800799e:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <HAL_RCC_ClockConfig+0x25c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d005      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e040      	b.n	8007a32 <HAL_RCC_ClockConfig+0x2de>
 80079b0:	40022000 	.word	0x40022000
 80079b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079c4:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <HAL_RCC_ClockConfig+0x2e8>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	491a      	ldr	r1, [pc, #104]	; (8007a3c <HAL_RCC_ClockConfig+0x2e8>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079e2:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <HAL_RCC_ClockConfig+0x2e8>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4912      	ldr	r1, [pc, #72]	; (8007a3c <HAL_RCC_ClockConfig+0x2e8>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80079f6:	f000 f829 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 80079fa:	4601      	mov	r1, r0
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <HAL_RCC_ClockConfig+0x2e8>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a04:	22f0      	movs	r2, #240	; 0xf0
 8007a06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	fa92 f2a2 	rbit	r2, r2
 8007a0e:	60fa      	str	r2, [r7, #12]
  return result;
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	fab2 f282 	clz	r2, r2
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	40d3      	lsrs	r3, r2
 8007a1a:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <HAL_RCC_ClockConfig+0x2ec>)
 8007a1c:	5cd3      	ldrb	r3, [r2, r3]
 8007a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8007a22:	4a08      	ldr	r2, [pc, #32]	; (8007a44 <HAL_RCC_ClockConfig+0x2f0>)
 8007a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <HAL_RCC_ClockConfig+0x2f4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fc fa40 	bl	8003eb0 <HAL_InitTick>
  
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3778      	adds	r7, #120	; 0x78
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	0800da48 	.word	0x0800da48
 8007a44:	20000004 	.word	0x20000004
 8007a48:	20000008 	.word	0x20000008

08007a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b08b      	sub	sp, #44	; 0x2c
 8007a50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007a66:	4b29      	ldr	r3, [pc, #164]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f003 030c 	and.w	r3, r3, #12
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d002      	beq.n	8007a7c <HAL_RCC_GetSysClockFreq+0x30>
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d003      	beq.n	8007a82 <HAL_RCC_GetSysClockFreq+0x36>
 8007a7a:	e03c      	b.n	8007af6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a7c:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007a7e:	623b      	str	r3, [r7, #32]
      break;
 8007a80:	e03c      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007a88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007a8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	fa92 f2a2 	rbit	r2, r2
 8007a94:	607a      	str	r2, [r7, #4]
  return result;
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	fab2 f282 	clz	r2, r2
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	40d3      	lsrs	r3, r2
 8007aa0:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007aa2:	5cd3      	ldrb	r3, [r2, r3]
 8007aa4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	220f      	movs	r2, #15
 8007ab0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	fa92 f2a2 	rbit	r2, r2
 8007ab8:	60fa      	str	r2, [r7, #12]
  return result;
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	fab2 f282 	clz	r2, r2
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	40d3      	lsrs	r3, r2
 8007ac4:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007ac6:	5cd3      	ldrb	r3, [r2, r3]
 8007ac8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007ad4:	4a0e      	ldr	r2, [pc, #56]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	fb02 f303 	mul.w	r3, r2, r3
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae4:	e004      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	4a0c      	ldr	r2, [pc, #48]	; (8007b1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	623b      	str	r3, [r7, #32]
      break;
 8007af4:	e002      	b.n	8007afc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007af6:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007af8:	623b      	str	r3, [r7, #32]
      break;
 8007afa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007afc:	6a3b      	ldr	r3, [r7, #32]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	372c      	adds	r7, #44	; 0x2c
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40021000 	.word	0x40021000
 8007b10:	007a1200 	.word	0x007a1200
 8007b14:	0800da60 	.word	0x0800da60
 8007b18:	0800da70 	.word	0x0800da70
 8007b1c:	003d0900 	.word	0x003d0900

08007b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b26:	681b      	ldr	r3, [r3, #0]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000004 	.word	0x20000004

08007b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007b3e:	f7ff ffef 	bl	8007b20 <HAL_RCC_GetHCLKFreq>
 8007b42:	4601      	mov	r1, r0
 8007b44:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007b50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	fa92 f2a2 	rbit	r2, r2
 8007b58:	603a      	str	r2, [r7, #0]
  return result;
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	fab2 f282 	clz	r2, r2
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	40d3      	lsrs	r3, r2
 8007b64:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007b66:	5cd3      	ldrb	r3, [r2, r3]
 8007b68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	40021000 	.word	0x40021000
 8007b78:	0800da58 	.word	0x0800da58

08007b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007b82:	f7ff ffcd 	bl	8007b20 <HAL_RCC_GetHCLKFreq>
 8007b86:	4601      	mov	r1, r0
 8007b88:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007b90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	fa92 f2a2 	rbit	r2, r2
 8007b9c:	603a      	str	r2, [r7, #0]
  return result;
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	fab2 f282 	clz	r2, r2
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	40d3      	lsrs	r3, r2
 8007ba8:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <HAL_RCC_GetPCLK2Freq+0x40>)
 8007baa:	5cd3      	ldrb	r3, [r2, r3]
 8007bac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40021000 	.word	0x40021000
 8007bbc:	0800da58 	.word	0x0800da58

08007bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b092      	sub	sp, #72	; 0x48
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80d4 	beq.w	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007be4:	4b4e      	ldr	r3, [pc, #312]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10e      	bne.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bf0:	4b4b      	ldr	r3, [pc, #300]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	4a4a      	ldr	r2, [pc, #296]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bfa:	61d3      	str	r3, [r2, #28]
 8007bfc:	4b48      	ldr	r3, [pc, #288]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c04:	60bb      	str	r3, [r7, #8]
 8007c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c0e:	4b45      	ldr	r3, [pc, #276]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d118      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c1a:	4b42      	ldr	r3, [pc, #264]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a41      	ldr	r2, [pc, #260]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c26:	f7fc f987 	bl	8003f38 <HAL_GetTick>
 8007c2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c2c:	e008      	b.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c2e:	f7fc f983 	bl	8003f38 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b64      	cmp	r3, #100	; 0x64
 8007c3a:	d901      	bls.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e169      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c40:	4b38      	ldr	r3, [pc, #224]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0f0      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c4c:	4b34      	ldr	r3, [pc, #208]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8084 	beq.w	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d07c      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c6c:	4b2c      	ldr	r3, [pc, #176]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	fa93 f3a3 	rbit	r3, r3
 8007c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c86:	fab3 f383 	clz	r3, r3
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4b26      	ldr	r3, [pc, #152]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	461a      	mov	r2, r3
 8007c96:	2301      	movs	r3, #1
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	fa93 f3a3 	rbit	r3, r3
 8007ca6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007caa:	fab3 f383 	clz	r3, r3
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007cbe:	4a18      	ldr	r2, [pc, #96]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d04b      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cce:	f7fc f933 	bl	8003f38 <HAL_GetTick>
 8007cd2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd4:	e00a      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cd6:	f7fc f92f 	bl	8003f38 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d901      	bls.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e113      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007cec:	2302      	movs	r3, #2
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	fa93 f3a3 	rbit	r3, r3
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	623b      	str	r3, [r7, #32]
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	fa93 f3a3 	rbit	r3, r3
 8007d02:	61fb      	str	r3, [r7, #28]
  return result;
 8007d04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d06:	fab3 f383 	clz	r3, r3
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	095b      	lsrs	r3, r3, #5
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f043 0302 	orr.w	r3, r3, #2
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d108      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007d1a:	4b01      	ldr	r3, [pc, #4]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	e00d      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007d20:	40021000 	.word	0x40021000
 8007d24:	40007000 	.word	0x40007000
 8007d28:	10908100 	.word	0x10908100
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	fa93 f3a3 	rbit	r3, r3
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	4b78      	ldr	r3, [pc, #480]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	613a      	str	r2, [r7, #16]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	fa92 f2a2 	rbit	r2, r2
 8007d46:	60fa      	str	r2, [r7, #12]
  return result;
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	fab2 f282 	clz	r2, r2
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	f002 021f 	and.w	r2, r2, #31
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0b7      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007d66:	4b6d      	ldr	r3, [pc, #436]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	496a      	ldr	r1, [pc, #424]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d105      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d80:	4b66      	ldr	r3, [pc, #408]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	4a65      	ldr	r2, [pc, #404]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d008      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d98:	4b60      	ldr	r3, [pc, #384]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	f023 0203 	bic.w	r2, r3, #3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	495d      	ldr	r1, [pc, #372]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d008      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007db6:	4b59      	ldr	r3, [pc, #356]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	4956      	ldr	r1, [pc, #344]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dd4:	4b51      	ldr	r3, [pc, #324]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	494e      	ldr	r1, [pc, #312]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d008      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007df2:	4b4a      	ldr	r3, [pc, #296]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	f023 0210 	bic.w	r2, r3, #16
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	4947      	ldr	r1, [pc, #284]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007e10:	4b42      	ldr	r3, [pc, #264]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	493f      	ldr	r1, [pc, #252]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e2e:	4b3b      	ldr	r3, [pc, #236]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	f023 0220 	bic.w	r2, r3, #32
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	4938      	ldr	r1, [pc, #224]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e4c:	4b33      	ldr	r3, [pc, #204]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	4930      	ldr	r1, [pc, #192]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d008      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e6a:	4b2c      	ldr	r3, [pc, #176]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	4929      	ldr	r1, [pc, #164]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d008      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e88:	4b24      	ldr	r3, [pc, #144]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	4921      	ldr	r1, [pc, #132]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d008      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ea6:	4b1d      	ldr	r3, [pc, #116]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	491a      	ldr	r1, [pc, #104]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d008      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007ec4:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	4912      	ldr	r1, [pc, #72]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ee2:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	490b      	ldr	r1, [pc, #44]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007f00:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0c:	4903      	ldr	r1, [pc, #12]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3748      	adds	r7, #72	; 0x48
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40021000 	.word	0x40021000

08007f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e09d      	b.n	800806e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d108      	bne.n	8007f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f42:	d009      	beq.n	8007f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	61da      	str	r2, [r3, #28]
 8007f4a:	e005      	b.n	8007f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fb fa22 	bl	80033bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f98:	d902      	bls.n	8007fa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e002      	b.n	8007fa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007fae:	d007      	beq.n	8007fc0 <HAL_SPI_Init+0xa0>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fb8:	d002      	beq.n	8007fc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008002:	ea42 0103 	orr.w	r1, r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	f003 0204 	and.w	r2, r3, #4
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	431a      	orrs	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800803c:	ea42 0103 	orr.w	r1, r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800805c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b08a      	sub	sp, #40	; 0x28
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
 8008082:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008084:	2301      	movs	r3, #1
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_SPI_TransmitReceive+0x26>
 8008098:	2302      	movs	r3, #2
 800809a:	e1fb      	b.n	8008494 <HAL_SPI_TransmitReceive+0x41e>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080a4:	f7fb ff48 	bl	8003f38 <HAL_GetTick>
 80080a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80080b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80080bc:	887b      	ldrh	r3, [r7, #2]
 80080be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080c0:	7efb      	ldrb	r3, [r7, #27]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d00e      	beq.n	80080e4 <HAL_SPI_TransmitReceive+0x6e>
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080cc:	d106      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x66>
 80080d6:	7efb      	ldrb	r3, [r7, #27]
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d003      	beq.n	80080e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
 80080de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80080e2:	e1cd      	b.n	8008480 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_SPI_TransmitReceive+0x80>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <HAL_SPI_TransmitReceive+0x80>
 80080f0:	887b      	ldrh	r3, [r7, #2]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d103      	bne.n	80080fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80080fc:	e1c0      	b.n	8008480 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b04      	cmp	r3, #4
 8008108:	d003      	beq.n	8008112 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2205      	movs	r2, #5
 800810e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	887a      	ldrh	r2, [r7, #2]
 8008122:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	887a      	ldrh	r2, [r7, #2]
 800812a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	887a      	ldrh	r2, [r7, #2]
 8008138:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	887a      	ldrh	r2, [r7, #2]
 800813e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008154:	d802      	bhi.n	800815c <HAL_SPI_TransmitReceive+0xe6>
 8008156:	8a3b      	ldrh	r3, [r7, #16]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d908      	bls.n	800816e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800816a:	605a      	str	r2, [r3, #4]
 800816c:	e007      	b.n	800817e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800817c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d007      	beq.n	800819c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800819a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081a4:	d97c      	bls.n	80082a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_SPI_TransmitReceive+0x13e>
 80081ae:	8a7b      	ldrh	r3, [r7, #18]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d169      	bne.n	8008288 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	881a      	ldrh	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	1c9a      	adds	r2, r3, #2
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d8:	e056      	b.n	8008288 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d11b      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x1aa>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d016      	beq.n	8008220 <HAL_SPI_TransmitReceive+0x1aa>
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d113      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	881a      	ldrh	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	1c9a      	adds	r2, r3, #2
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008212:	b29b      	uxth	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b01      	cmp	r3, #1
 800822c:	d11c      	bne.n	8008268 <HAL_SPI_TransmitReceive+0x1f2>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d016      	beq.n	8008268 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	b292      	uxth	r2, r2
 8008246:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	1c9a      	adds	r2, r3, #2
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b29a      	uxth	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008264:	2301      	movs	r3, #1
 8008266:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008268:	f7fb fe66 	bl	8003f38 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008274:	429a      	cmp	r2, r3
 8008276:	d807      	bhi.n	8008288 <HAL_SPI_TransmitReceive+0x212>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827e:	d003      	beq.n	8008288 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008286:	e0fb      	b.n	8008480 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828c:	b29b      	uxth	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1a3      	bne.n	80081da <HAL_SPI_TransmitReceive+0x164>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d19d      	bne.n	80081da <HAL_SPI_TransmitReceive+0x164>
 800829e:	e0df      	b.n	8008460 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_SPI_TransmitReceive+0x23a>
 80082a8:	8a7b      	ldrh	r3, [r7, #18]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	f040 80cb 	bne.w	8008446 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d912      	bls.n	80082e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	881a      	ldrh	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	1c9a      	adds	r2, r3, #2
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	3b02      	subs	r3, #2
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082de:	e0b2      	b.n	8008446 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	330c      	adds	r3, #12
 80082ea:	7812      	ldrb	r2, [r2, #0]
 80082ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008306:	e09e      	b.n	8008446 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b02      	cmp	r3, #2
 8008314:	d134      	bne.n	8008380 <HAL_SPI_TransmitReceive+0x30a>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d02f      	beq.n	8008380 <HAL_SPI_TransmitReceive+0x30a>
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	2b01      	cmp	r3, #1
 8008324:	d12c      	bne.n	8008380 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b01      	cmp	r3, #1
 800832e:	d912      	bls.n	8008356 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	881a      	ldrh	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	1c9a      	adds	r2, r3, #2
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b02      	subs	r3, #2
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008354:	e012      	b.n	800837c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	330c      	adds	r3, #12
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b01      	cmp	r3, #1
 800838c:	d148      	bne.n	8008420 <HAL_SPI_TransmitReceive+0x3aa>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d042      	beq.n	8008420 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d923      	bls.n	80083ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	b292      	uxth	r2, r2
 80083b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	1c9a      	adds	r2, r3, #2
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b02      	subs	r3, #2
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d81f      	bhi.n	800841c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	e016      	b.n	800841c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f103 020c 	add.w	r2, r3, #12
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	b2d2      	uxtb	r2, r2
 80083fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800841c:	2301      	movs	r3, #1
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008420:	f7fb fd8a 	bl	8003f38 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842c:	429a      	cmp	r2, r3
 800842e:	d803      	bhi.n	8008438 <HAL_SPI_TransmitReceive+0x3c2>
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008436:	d102      	bne.n	800843e <HAL_SPI_TransmitReceive+0x3c8>
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008444:	e01c      	b.n	8008480 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800844a:	b29b      	uxth	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	f47f af5b 	bne.w	8008308 <HAL_SPI_TransmitReceive+0x292>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	f47f af54 	bne.w	8008308 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008460:	69fa      	ldr	r2, [r7, #28]
 8008462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f937 	bl	80086d8 <SPI_EndRxTxTransaction>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d006      	beq.n	800847e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	661a      	str	r2, [r3, #96]	; 0x60
 800847c:	e000      	b.n	8008480 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800847e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008494:	4618      	mov	r0, r3
 8008496:	3728      	adds	r7, #40	; 0x28
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	4613      	mov	r3, r2
 80084aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084ac:	f7fb fd44 	bl	8003f38 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	4413      	add	r3, r2
 80084ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084bc:	f7fb fd3c 	bl	8003f38 <HAL_GetTick>
 80084c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084c2:	4b39      	ldr	r3, [pc, #228]	; (80085a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	015b      	lsls	r3, r3, #5
 80084c8:	0d1b      	lsrs	r3, r3, #20
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	fb02 f303 	mul.w	r3, r2, r3
 80084d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084d2:	e054      	b.n	800857e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d050      	beq.n	800857e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084dc:	f7fb fd2c 	bl	8003f38 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d902      	bls.n	80084f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d13d      	bne.n	800856e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800850a:	d111      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008514:	d004      	beq.n	8008520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851e:	d107      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008538:	d10f      	bne.n	800855a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e017      	b.n	800859e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3b01      	subs	r3, #1
 800857c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4013      	ands	r3, r2
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	429a      	cmp	r2, r3
 800858c:	bf0c      	ite	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	2300      	movne	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	429a      	cmp	r2, r3
 800859a:	d19b      	bne.n	80084d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000004 	.word	0x20000004

080085ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08a      	sub	sp, #40	; 0x28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80085be:	f7fb fcbb 	bl	8003f38 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	1a9b      	subs	r3, r3, r2
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	4413      	add	r3, r2
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80085ce:	f7fb fcb3 	bl	8003f38 <HAL_GetTick>
 80085d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80085dc:	4b3d      	ldr	r3, [pc, #244]	; (80086d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	00da      	lsls	r2, r3, #3
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	0d1b      	lsrs	r3, r3, #20
 80085ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
 80085f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80085f4:	e060      	b.n	80086b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80085fc:	d107      	bne.n	800860e <SPI_WaitFifoStateUntilTimeout+0x62>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800860c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d050      	beq.n	80086b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008616:	f7fb fc8f 	bl	8003f38 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	429a      	cmp	r2, r3
 8008624:	d902      	bls.n	800862c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	d13d      	bne.n	80086a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800863a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008644:	d111      	bne.n	800866a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864e:	d004      	beq.n	800865a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008658:	d107      	bne.n	800866a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008672:	d10f      	bne.n	8008694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e010      	b.n	80086ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	4013      	ands	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d196      	bne.n	80085f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3728      	adds	r7, #40	; 0x28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000004 	.word	0x20000004

080086d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af02      	add	r7, sp, #8
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff ff5b 	bl	80085ac <SPI_WaitFifoStateUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008700:	f043 0220 	orr.w	r2, r3, #32
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e027      	b.n	800875c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	2180      	movs	r1, #128	; 0x80
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f7ff fec0 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008726:	f043 0220 	orr.w	r2, r3, #32
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e014      	b.n	800875c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff ff34 	bl	80085ac <SPI_WaitFifoStateUntilTimeout>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874e:	f043 0220 	orr.w	r2, r3, #32
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e000      	b.n	800875c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e049      	b.n	800880a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fb f8d6 	bl	800393c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f000 fa4a 	bl	8008c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d109      	bne.n	8008838 <HAL_TIM_PWM_Start+0x24>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	bf14      	ite	ne
 8008830:	2301      	movne	r3, #1
 8008832:	2300      	moveq	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	e03c      	b.n	80088b2 <HAL_TIM_PWM_Start+0x9e>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2b04      	cmp	r3, #4
 800883c:	d109      	bne.n	8008852 <HAL_TIM_PWM_Start+0x3e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b01      	cmp	r3, #1
 8008848:	bf14      	ite	ne
 800884a:	2301      	movne	r3, #1
 800884c:	2300      	moveq	r3, #0
 800884e:	b2db      	uxtb	r3, r3
 8008850:	e02f      	b.n	80088b2 <HAL_TIM_PWM_Start+0x9e>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b08      	cmp	r3, #8
 8008856:	d109      	bne.n	800886c <HAL_TIM_PWM_Start+0x58>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b01      	cmp	r3, #1
 8008862:	bf14      	ite	ne
 8008864:	2301      	movne	r3, #1
 8008866:	2300      	moveq	r3, #0
 8008868:	b2db      	uxtb	r3, r3
 800886a:	e022      	b.n	80088b2 <HAL_TIM_PWM_Start+0x9e>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b0c      	cmp	r3, #12
 8008870:	d109      	bne.n	8008886 <HAL_TIM_PWM_Start+0x72>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b01      	cmp	r3, #1
 800887c:	bf14      	ite	ne
 800887e:	2301      	movne	r3, #1
 8008880:	2300      	moveq	r3, #0
 8008882:	b2db      	uxtb	r3, r3
 8008884:	e015      	b.n	80088b2 <HAL_TIM_PWM_Start+0x9e>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2b10      	cmp	r3, #16
 800888a:	d109      	bne.n	80088a0 <HAL_TIM_PWM_Start+0x8c>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b01      	cmp	r3, #1
 8008896:	bf14      	ite	ne
 8008898:	2301      	movne	r3, #1
 800889a:	2300      	moveq	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	e008      	b.n	80088b2 <HAL_TIM_PWM_Start+0x9e>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	bf14      	ite	ne
 80088ac:	2301      	movne	r3, #1
 80088ae:	2300      	moveq	r3, #0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e097      	b.n	80089ea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d104      	bne.n	80088ca <HAL_TIM_PWM_Start+0xb6>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088c8:	e023      	b.n	8008912 <HAL_TIM_PWM_Start+0xfe>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d104      	bne.n	80088da <HAL_TIM_PWM_Start+0xc6>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d8:	e01b      	b.n	8008912 <HAL_TIM_PWM_Start+0xfe>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d104      	bne.n	80088ea <HAL_TIM_PWM_Start+0xd6>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e8:	e013      	b.n	8008912 <HAL_TIM_PWM_Start+0xfe>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b0c      	cmp	r3, #12
 80088ee:	d104      	bne.n	80088fa <HAL_TIM_PWM_Start+0xe6>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088f8:	e00b      	b.n	8008912 <HAL_TIM_PWM_Start+0xfe>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b10      	cmp	r3, #16
 80088fe:	d104      	bne.n	800890a <HAL_TIM_PWM_Start+0xf6>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008908:	e003      	b.n	8008912 <HAL_TIM_PWM_Start+0xfe>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fcf4 	bl	8009308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a33      	ldr	r2, [pc, #204]	; (80089f4 <HAL_TIM_PWM_Start+0x1e0>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d013      	beq.n	8008952 <HAL_TIM_PWM_Start+0x13e>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a32      	ldr	r2, [pc, #200]	; (80089f8 <HAL_TIM_PWM_Start+0x1e4>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00e      	beq.n	8008952 <HAL_TIM_PWM_Start+0x13e>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a30      	ldr	r2, [pc, #192]	; (80089fc <HAL_TIM_PWM_Start+0x1e8>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d009      	beq.n	8008952 <HAL_TIM_PWM_Start+0x13e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a2f      	ldr	r2, [pc, #188]	; (8008a00 <HAL_TIM_PWM_Start+0x1ec>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d004      	beq.n	8008952 <HAL_TIM_PWM_Start+0x13e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a2d      	ldr	r2, [pc, #180]	; (8008a04 <HAL_TIM_PWM_Start+0x1f0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d101      	bne.n	8008956 <HAL_TIM_PWM_Start+0x142>
 8008952:	2301      	movs	r3, #1
 8008954:	e000      	b.n	8008958 <HAL_TIM_PWM_Start+0x144>
 8008956:	2300      	movs	r3, #0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800896a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a20      	ldr	r2, [pc, #128]	; (80089f4 <HAL_TIM_PWM_Start+0x1e0>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d018      	beq.n	80089a8 <HAL_TIM_PWM_Start+0x194>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897e:	d013      	beq.n	80089a8 <HAL_TIM_PWM_Start+0x194>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a20      	ldr	r2, [pc, #128]	; (8008a08 <HAL_TIM_PWM_Start+0x1f4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00e      	beq.n	80089a8 <HAL_TIM_PWM_Start+0x194>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a1f      	ldr	r2, [pc, #124]	; (8008a0c <HAL_TIM_PWM_Start+0x1f8>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d009      	beq.n	80089a8 <HAL_TIM_PWM_Start+0x194>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <HAL_TIM_PWM_Start+0x1e4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d004      	beq.n	80089a8 <HAL_TIM_PWM_Start+0x194>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a16      	ldr	r2, [pc, #88]	; (80089fc <HAL_TIM_PWM_Start+0x1e8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d115      	bne.n	80089d4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689a      	ldr	r2, [r3, #8]
 80089ae:	4b18      	ldr	r3, [pc, #96]	; (8008a10 <HAL_TIM_PWM_Start+0x1fc>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2b06      	cmp	r3, #6
 80089b8:	d015      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x1d2>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c0:	d011      	beq.n	80089e6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0201 	orr.w	r2, r2, #1
 80089d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d2:	e008      	b.n	80089e6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0201 	orr.w	r2, r2, #1
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e000      	b.n	80089e8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	40012c00 	.word	0x40012c00
 80089f8:	40013400 	.word	0x40013400
 80089fc:	40014000 	.word	0x40014000
 8008a00:	40014400 	.word	0x40014400
 8008a04:	40014800 	.word	0x40014800
 8008a08:	40000400 	.word	0x40000400
 8008a0c:	40000800 	.word	0x40000800
 8008a10:	00010007 	.word	0x00010007

08008a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e0ff      	b.n	8008c32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b14      	cmp	r3, #20
 8008a3e:	f200 80f0 	bhi.w	8008c22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a42:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a9d 	.word	0x08008a9d
 8008a4c:	08008c23 	.word	0x08008c23
 8008a50:	08008c23 	.word	0x08008c23
 8008a54:	08008c23 	.word	0x08008c23
 8008a58:	08008add 	.word	0x08008add
 8008a5c:	08008c23 	.word	0x08008c23
 8008a60:	08008c23 	.word	0x08008c23
 8008a64:	08008c23 	.word	0x08008c23
 8008a68:	08008b1f 	.word	0x08008b1f
 8008a6c:	08008c23 	.word	0x08008c23
 8008a70:	08008c23 	.word	0x08008c23
 8008a74:	08008c23 	.word	0x08008c23
 8008a78:	08008b5f 	.word	0x08008b5f
 8008a7c:	08008c23 	.word	0x08008c23
 8008a80:	08008c23 	.word	0x08008c23
 8008a84:	08008c23 	.word	0x08008c23
 8008a88:	08008ba1 	.word	0x08008ba1
 8008a8c:	08008c23 	.word	0x08008c23
 8008a90:	08008c23 	.word	0x08008c23
 8008a94:	08008c23 	.word	0x08008c23
 8008a98:	08008be1 	.word	0x08008be1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68b9      	ldr	r1, [r7, #8]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f95a 	bl	8008d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	699a      	ldr	r2, [r3, #24]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 0208 	orr.w	r2, r2, #8
 8008ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	699a      	ldr	r2, [r3, #24]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f022 0204 	bic.w	r2, r2, #4
 8008ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6999      	ldr	r1, [r3, #24]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	691a      	ldr	r2, [r3, #16]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	619a      	str	r2, [r3, #24]
      break;
 8008ada:	e0a5      	b.n	8008c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f9ca 	bl	8008e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	699a      	ldr	r2, [r3, #24]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6999      	ldr	r1, [r3, #24]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	021a      	lsls	r2, r3, #8
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	619a      	str	r2, [r3, #24]
      break;
 8008b1c:	e084      	b.n	8008c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68b9      	ldr	r1, [r7, #8]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fa33 	bl	8008f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69da      	ldr	r2, [r3, #28]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0208 	orr.w	r2, r2, #8
 8008b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0204 	bic.w	r2, r2, #4
 8008b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69d9      	ldr	r1, [r3, #28]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	691a      	ldr	r2, [r3, #16]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	61da      	str	r2, [r3, #28]
      break;
 8008b5c:	e064      	b.n	8008c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f000 fa9b 	bl	80090a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69da      	ldr	r2, [r3, #28]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	69da      	ldr	r2, [r3, #28]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69d9      	ldr	r1, [r3, #28]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	021a      	lsls	r2, r3, #8
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	61da      	str	r2, [r3, #28]
      break;
 8008b9e:	e043      	b.n	8008c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fae4 	bl	8009174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0208 	orr.w	r2, r2, #8
 8008bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0204 	bic.w	r2, r2, #4
 8008bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008bde:	e023      	b.n	8008c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68b9      	ldr	r1, [r7, #8]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fb28 	bl	800923c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	021a      	lsls	r2, r3, #8
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008c20:	e002      	b.n	8008c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
      break;
 8008c26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop

08008c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a3c      	ldr	r2, [pc, #240]	; (8008d40 <TIM_Base_SetConfig+0x104>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d00f      	beq.n	8008c74 <TIM_Base_SetConfig+0x38>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c5a:	d00b      	beq.n	8008c74 <TIM_Base_SetConfig+0x38>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a39      	ldr	r2, [pc, #228]	; (8008d44 <TIM_Base_SetConfig+0x108>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d007      	beq.n	8008c74 <TIM_Base_SetConfig+0x38>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a38      	ldr	r2, [pc, #224]	; (8008d48 <TIM_Base_SetConfig+0x10c>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d003      	beq.n	8008c74 <TIM_Base_SetConfig+0x38>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a37      	ldr	r2, [pc, #220]	; (8008d4c <TIM_Base_SetConfig+0x110>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d108      	bne.n	8008c86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a2d      	ldr	r2, [pc, #180]	; (8008d40 <TIM_Base_SetConfig+0x104>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d01b      	beq.n	8008cc6 <TIM_Base_SetConfig+0x8a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c94:	d017      	beq.n	8008cc6 <TIM_Base_SetConfig+0x8a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a2a      	ldr	r2, [pc, #168]	; (8008d44 <TIM_Base_SetConfig+0x108>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d013      	beq.n	8008cc6 <TIM_Base_SetConfig+0x8a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a29      	ldr	r2, [pc, #164]	; (8008d48 <TIM_Base_SetConfig+0x10c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d00f      	beq.n	8008cc6 <TIM_Base_SetConfig+0x8a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a28      	ldr	r2, [pc, #160]	; (8008d4c <TIM_Base_SetConfig+0x110>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00b      	beq.n	8008cc6 <TIM_Base_SetConfig+0x8a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a27      	ldr	r2, [pc, #156]	; (8008d50 <TIM_Base_SetConfig+0x114>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d007      	beq.n	8008cc6 <TIM_Base_SetConfig+0x8a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a26      	ldr	r2, [pc, #152]	; (8008d54 <TIM_Base_SetConfig+0x118>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d003      	beq.n	8008cc6 <TIM_Base_SetConfig+0x8a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a25      	ldr	r2, [pc, #148]	; (8008d58 <TIM_Base_SetConfig+0x11c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d108      	bne.n	8008cd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a10      	ldr	r2, [pc, #64]	; (8008d40 <TIM_Base_SetConfig+0x104>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00f      	beq.n	8008d24 <TIM_Base_SetConfig+0xe8>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <TIM_Base_SetConfig+0x110>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00b      	beq.n	8008d24 <TIM_Base_SetConfig+0xe8>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a10      	ldr	r2, [pc, #64]	; (8008d50 <TIM_Base_SetConfig+0x114>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d007      	beq.n	8008d24 <TIM_Base_SetConfig+0xe8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a0f      	ldr	r2, [pc, #60]	; (8008d54 <TIM_Base_SetConfig+0x118>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_Base_SetConfig+0xe8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a0e      	ldr	r2, [pc, #56]	; (8008d58 <TIM_Base_SetConfig+0x11c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d103      	bne.n	8008d2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	615a      	str	r2, [r3, #20]
}
 8008d32:	bf00      	nop
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	40012c00 	.word	0x40012c00
 8008d44:	40000400 	.word	0x40000400
 8008d48:	40000800 	.word	0x40000800
 8008d4c:	40013400 	.word	0x40013400
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800

08008d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f023 0201 	bic.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 0302 	bic.w	r3, r3, #2
 8008da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a2c      	ldr	r2, [pc, #176]	; (8008e68 <TIM_OC1_SetConfig+0x10c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00f      	beq.n	8008ddc <TIM_OC1_SetConfig+0x80>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a2b      	ldr	r2, [pc, #172]	; (8008e6c <TIM_OC1_SetConfig+0x110>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00b      	beq.n	8008ddc <TIM_OC1_SetConfig+0x80>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a2a      	ldr	r2, [pc, #168]	; (8008e70 <TIM_OC1_SetConfig+0x114>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d007      	beq.n	8008ddc <TIM_OC1_SetConfig+0x80>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a29      	ldr	r2, [pc, #164]	; (8008e74 <TIM_OC1_SetConfig+0x118>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d003      	beq.n	8008ddc <TIM_OC1_SetConfig+0x80>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a28      	ldr	r2, [pc, #160]	; (8008e78 <TIM_OC1_SetConfig+0x11c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d10c      	bne.n	8008df6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f023 0308 	bic.w	r3, r3, #8
 8008de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f023 0304 	bic.w	r3, r3, #4
 8008df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <TIM_OC1_SetConfig+0x10c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d00f      	beq.n	8008e1e <TIM_OC1_SetConfig+0xc2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a1a      	ldr	r2, [pc, #104]	; (8008e6c <TIM_OC1_SetConfig+0x110>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00b      	beq.n	8008e1e <TIM_OC1_SetConfig+0xc2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <TIM_OC1_SetConfig+0x114>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d007      	beq.n	8008e1e <TIM_OC1_SetConfig+0xc2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <TIM_OC1_SetConfig+0x118>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d003      	beq.n	8008e1e <TIM_OC1_SetConfig+0xc2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <TIM_OC1_SetConfig+0x11c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d111      	bne.n	8008e42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	621a      	str	r2, [r3, #32]
}
 8008e5c:	bf00      	nop
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	40012c00 	.word	0x40012c00
 8008e6c:	40013400 	.word	0x40013400
 8008e70:	40014000 	.word	0x40014000
 8008e74:	40014400 	.word	0x40014400
 8008e78:	40014800 	.word	0x40014800

08008e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f023 0210 	bic.w	r2, r3, #16
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	021b      	lsls	r3, r3, #8
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f023 0320 	bic.w	r3, r3, #32
 8008eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a28      	ldr	r2, [pc, #160]	; (8008f7c <TIM_OC2_SetConfig+0x100>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d003      	beq.n	8008ee8 <TIM_OC2_SetConfig+0x6c>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a27      	ldr	r2, [pc, #156]	; (8008f80 <TIM_OC2_SetConfig+0x104>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d10d      	bne.n	8008f04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	011b      	lsls	r3, r3, #4
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <TIM_OC2_SetConfig+0x100>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00f      	beq.n	8008f2c <TIM_OC2_SetConfig+0xb0>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a1c      	ldr	r2, [pc, #112]	; (8008f80 <TIM_OC2_SetConfig+0x104>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00b      	beq.n	8008f2c <TIM_OC2_SetConfig+0xb0>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a1b      	ldr	r2, [pc, #108]	; (8008f84 <TIM_OC2_SetConfig+0x108>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d007      	beq.n	8008f2c <TIM_OC2_SetConfig+0xb0>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a1a      	ldr	r2, [pc, #104]	; (8008f88 <TIM_OC2_SetConfig+0x10c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d003      	beq.n	8008f2c <TIM_OC2_SetConfig+0xb0>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a19      	ldr	r2, [pc, #100]	; (8008f8c <TIM_OC2_SetConfig+0x110>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d113      	bne.n	8008f54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f32:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f3a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	621a      	str	r2, [r3, #32]
}
 8008f6e:	bf00      	nop
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	40012c00 	.word	0x40012c00
 8008f80:	40013400 	.word	0x40013400
 8008f84:	40014000 	.word	0x40014000
 8008f88:	40014400 	.word	0x40014400
 8008f8c:	40014800 	.word	0x40014800

08008f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 0303 	bic.w	r3, r3, #3
 8008fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a27      	ldr	r2, [pc, #156]	; (800908c <TIM_OC3_SetConfig+0xfc>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d003      	beq.n	8008ffa <TIM_OC3_SetConfig+0x6a>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a26      	ldr	r2, [pc, #152]	; (8009090 <TIM_OC3_SetConfig+0x100>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d10d      	bne.n	8009016 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009014:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a1c      	ldr	r2, [pc, #112]	; (800908c <TIM_OC3_SetConfig+0xfc>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00f      	beq.n	800903e <TIM_OC3_SetConfig+0xae>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <TIM_OC3_SetConfig+0x100>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00b      	beq.n	800903e <TIM_OC3_SetConfig+0xae>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a1a      	ldr	r2, [pc, #104]	; (8009094 <TIM_OC3_SetConfig+0x104>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d007      	beq.n	800903e <TIM_OC3_SetConfig+0xae>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a19      	ldr	r2, [pc, #100]	; (8009098 <TIM_OC3_SetConfig+0x108>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_OC3_SetConfig+0xae>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a18      	ldr	r2, [pc, #96]	; (800909c <TIM_OC3_SetConfig+0x10c>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d113      	bne.n	8009066 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800904c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	4313      	orrs	r3, r2
 8009058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	011b      	lsls	r3, r3, #4
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	4313      	orrs	r3, r2
 8009064:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	621a      	str	r2, [r3, #32]
}
 8009080:	bf00      	nop
 8009082:	371c      	adds	r7, #28
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	40012c00 	.word	0x40012c00
 8009090:	40013400 	.word	0x40013400
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800

080090a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	031b      	lsls	r3, r3, #12
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a18      	ldr	r2, [pc, #96]	; (8009160 <TIM_OC4_SetConfig+0xc0>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00f      	beq.n	8009124 <TIM_OC4_SetConfig+0x84>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a17      	ldr	r2, [pc, #92]	; (8009164 <TIM_OC4_SetConfig+0xc4>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00b      	beq.n	8009124 <TIM_OC4_SetConfig+0x84>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a16      	ldr	r2, [pc, #88]	; (8009168 <TIM_OC4_SetConfig+0xc8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d007      	beq.n	8009124 <TIM_OC4_SetConfig+0x84>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a15      	ldr	r2, [pc, #84]	; (800916c <TIM_OC4_SetConfig+0xcc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_OC4_SetConfig+0x84>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a14      	ldr	r2, [pc, #80]	; (8009170 <TIM_OC4_SetConfig+0xd0>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d109      	bne.n	8009138 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800912a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	019b      	lsls	r3, r3, #6
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	40012c00 	.word	0x40012c00
 8009164:	40013400 	.word	0x40013400
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800

08009174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	041b      	lsls	r3, r3, #16
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a17      	ldr	r2, [pc, #92]	; (8009228 <TIM_OC5_SetConfig+0xb4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d00f      	beq.n	80091ee <TIM_OC5_SetConfig+0x7a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a16      	ldr	r2, [pc, #88]	; (800922c <TIM_OC5_SetConfig+0xb8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d00b      	beq.n	80091ee <TIM_OC5_SetConfig+0x7a>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a15      	ldr	r2, [pc, #84]	; (8009230 <TIM_OC5_SetConfig+0xbc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d007      	beq.n	80091ee <TIM_OC5_SetConfig+0x7a>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a14      	ldr	r2, [pc, #80]	; (8009234 <TIM_OC5_SetConfig+0xc0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d003      	beq.n	80091ee <TIM_OC5_SetConfig+0x7a>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a13      	ldr	r2, [pc, #76]	; (8009238 <TIM_OC5_SetConfig+0xc4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d109      	bne.n	8009202 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	021b      	lsls	r3, r3, #8
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	4313      	orrs	r3, r2
 8009200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	621a      	str	r2, [r3, #32]
}
 800921c:	bf00      	nop
 800921e:	371c      	adds	r7, #28
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	40012c00 	.word	0x40012c00
 800922c:	40013400 	.word	0x40013400
 8009230:	40014000 	.word	0x40014000
 8009234:	40014400 	.word	0x40014400
 8009238:	40014800 	.word	0x40014800

0800923c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800926a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800926e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	051b      	lsls	r3, r3, #20
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	4313      	orrs	r3, r2
 800928e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a18      	ldr	r2, [pc, #96]	; (80092f4 <TIM_OC6_SetConfig+0xb8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d00f      	beq.n	80092b8 <TIM_OC6_SetConfig+0x7c>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a17      	ldr	r2, [pc, #92]	; (80092f8 <TIM_OC6_SetConfig+0xbc>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d00b      	beq.n	80092b8 <TIM_OC6_SetConfig+0x7c>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a16      	ldr	r2, [pc, #88]	; (80092fc <TIM_OC6_SetConfig+0xc0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d007      	beq.n	80092b8 <TIM_OC6_SetConfig+0x7c>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a15      	ldr	r2, [pc, #84]	; (8009300 <TIM_OC6_SetConfig+0xc4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_OC6_SetConfig+0x7c>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a14      	ldr	r2, [pc, #80]	; (8009304 <TIM_OC6_SetConfig+0xc8>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d109      	bne.n	80092cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	029b      	lsls	r3, r3, #10
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	621a      	str	r2, [r3, #32]
}
 80092e6:	bf00      	nop
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	40012c00 	.word	0x40012c00
 80092f8:	40013400 	.word	0x40013400
 80092fc:	40014000 	.word	0x40014000
 8009300:	40014400 	.word	0x40014400
 8009304:	40014800 	.word	0x40014800

08009308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	2201      	movs	r2, #1
 800931c:	fa02 f303 	lsl.w	r3, r2, r3
 8009320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1a      	ldr	r2, [r3, #32]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	43db      	mvns	r3, r3
 800932a:	401a      	ands	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6a1a      	ldr	r2, [r3, #32]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 031f 	and.w	r3, r3, #31
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	fa01 f303 	lsl.w	r3, r1, r3
 8009340:	431a      	orrs	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	621a      	str	r2, [r3, #32]
}
 8009346:	bf00      	nop
 8009348:	371c      	adds	r7, #28
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
	...

08009354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009364:	2b01      	cmp	r3, #1
 8009366:	d101      	bne.n	800936c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009368:	2302      	movs	r3, #2
 800936a:	e063      	b.n	8009434 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a2b      	ldr	r2, [pc, #172]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d004      	beq.n	80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a2a      	ldr	r2, [pc, #168]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d108      	bne.n	80093b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a1b      	ldr	r2, [pc, #108]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d018      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093de:	d013      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a18      	ldr	r2, [pc, #96]	; (8009448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00e      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a17      	ldr	r2, [pc, #92]	; (800944c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d009      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a12      	ldr	r2, [pc, #72]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a13      	ldr	r2, [pc, #76]	; (8009450 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d10c      	bne.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	4313      	orrs	r3, r2
 8009418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40013400 	.word	0x40013400
 8009448:	40000400 	.word	0x40000400
 800944c:	40000800 	.word	0x40000800
 8009450:	40014000 	.word	0x40014000

08009454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e040      	b.n	80094e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7fa fb56 	bl	8003b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2224      	movs	r2, #36	; 0x24
 8009480:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0201 	bic.w	r2, r2, #1
 8009490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fbba 	bl	8009c0c <UART_SetConfig>
 8009498:	4603      	mov	r3, r0
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e022      	b.n	80094e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fd84 	bl	8009fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fe0b 	bl	800a0fc <UART_CheckIdleState>
 80094e6:	4603      	mov	r3, r0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	4613      	mov	r3, r2
 80094fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009502:	2b20      	cmp	r3, #32
 8009504:	d178      	bne.n	80095f8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <HAL_UART_Transmit_DMA+0x22>
 800950c:	88fb      	ldrh	r3, [r7, #6]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e071      	b.n	80095fa <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800951c:	2b01      	cmp	r3, #1
 800951e:	d101      	bne.n	8009524 <HAL_UART_Transmit_DMA+0x34>
 8009520:	2302      	movs	r3, #2
 8009522:	e06a      	b.n	80095fa <HAL_UART_Transmit_DMA+0x10a>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	88fa      	ldrh	r2, [r7, #6]
 8009536:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	88fa      	ldrh	r2, [r7, #6]
 800953e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2221      	movs	r2, #33	; 0x21
 800954e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009554:	2b00      	cmp	r3, #0
 8009556:	d02b      	beq.n	80095b0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955c:	4a29      	ldr	r2, [pc, #164]	; (8009604 <HAL_UART_Transmit_DMA+0x114>)
 800955e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009564:	4a28      	ldr	r2, [pc, #160]	; (8009608 <HAL_UART_Transmit_DMA+0x118>)
 8009566:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956c:	4a27      	ldr	r2, [pc, #156]	; (800960c <HAL_UART_Transmit_DMA+0x11c>)
 800956e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009574:	2200      	movs	r2, #0
 8009576:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009580:	4619      	mov	r1, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3328      	adds	r3, #40	; 0x28
 8009588:	461a      	mov	r2, r3
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	f7fc fd16 	bl	8005fbc <HAL_DMA_Start_IT>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00c      	beq.n	80095b0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2210      	movs	r2, #16
 800959a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2220      	movs	r2, #32
 80095aa:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e024      	b.n	80095fa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2240      	movs	r2, #64	; 0x40
 80095b6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	613b      	str	r3, [r7, #16]
   return(result);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3308      	adds	r3, #8
 80095de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e0:	623a      	str	r2, [r7, #32]
 80095e2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	69f9      	ldr	r1, [r7, #28]
 80095e6:	6a3a      	ldr	r2, [r7, #32]
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e5      	bne.n	80095c0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e000      	b.n	80095fa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80095f8:	2302      	movs	r3, #2
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3728      	adds	r7, #40	; 0x28
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	0800a429 	.word	0x0800a429
 8009608:	0800a4bd 	.word	0x0800a4bd
 800960c:	0800a4d9 	.word	0x0800a4d9

08009610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b0ba      	sub	sp, #232	; 0xe8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009636:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800963a:	f640 030f 	movw	r3, #2063	; 0x80f
 800963e:	4013      	ands	r3, r2
 8009640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009648:	2b00      	cmp	r3, #0
 800964a:	d115      	bne.n	8009678 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800964c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00f      	beq.n	8009678 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 82a3 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	4798      	blx	r3
      }
      return;
 8009676:	e29d      	b.n	8009bb4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8117 	beq.w	80098b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800968e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009692:	4b85      	ldr	r3, [pc, #532]	; (80098a8 <HAL_UART_IRQHandler+0x298>)
 8009694:	4013      	ands	r3, r2
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 810a 	beq.w	80098b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800969c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a0:	f003 0301 	and.w	r3, r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d011      	beq.n	80096cc <HAL_UART_IRQHandler+0xbc>
 80096a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2201      	movs	r2, #1
 80096ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096c2:	f043 0201 	orr.w	r2, r3, #1
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d011      	beq.n	80096fc <HAL_UART_IRQHandler+0xec>
 80096d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2202      	movs	r2, #2
 80096ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096f2:	f043 0204 	orr.w	r2, r3, #4
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d011      	beq.n	800972c <HAL_UART_IRQHandler+0x11c>
 8009708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2204      	movs	r2, #4
 800971a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009722:	f043 0202 	orr.w	r2, r3, #2
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800972c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	2b00      	cmp	r3, #0
 8009736:	d017      	beq.n	8009768 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800973c:	f003 0320 	and.w	r3, r3, #32
 8009740:	2b00      	cmp	r3, #0
 8009742:	d105      	bne.n	8009750 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009748:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2208      	movs	r2, #8
 8009756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800975e:	f043 0208 	orr.w	r2, r3, #8
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800976c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009770:	2b00      	cmp	r3, #0
 8009772:	d012      	beq.n	800979a <HAL_UART_IRQHandler+0x18a>
 8009774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00c      	beq.n	800979a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009790:	f043 0220 	orr.w	r2, r3, #32
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 8209 	beq.w	8009bb8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80097a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00d      	beq.n	80097ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80097b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b6:	f003 0320 	and.w	r3, r3, #32
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d007      	beq.n	80097ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e2:	2b40      	cmp	r3, #64	; 0x40
 80097e4:	d005      	beq.n	80097f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80097ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d04f      	beq.n	8009892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fdb5 	bl	800a362 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009802:	2b40      	cmp	r3, #64	; 0x40
 8009804:	d141      	bne.n	800988a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800981c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3308      	adds	r3, #8
 800982e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009832:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800983e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800984a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1d9      	bne.n	8009806 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	2b00      	cmp	r3, #0
 8009858:	d013      	beq.n	8009882 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	4a13      	ldr	r2, [pc, #76]	; (80098ac <HAL_UART_IRQHandler+0x29c>)
 8009860:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009866:	4618      	mov	r0, r3
 8009868:	f7fc fc40 	bl	80060ec <HAL_DMA_Abort_IT>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d017      	beq.n	80098a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800987c:	4610      	mov	r0, r2
 800987e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009880:	e00f      	b.n	80098a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f9ac 	bl	8009be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009888:	e00b      	b.n	80098a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f9a8 	bl	8009be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009890:	e007      	b.n	80098a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f9a4 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80098a0:	e18a      	b.n	8009bb8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098a2:	bf00      	nop
    return;
 80098a4:	e188      	b.n	8009bb8 <HAL_UART_IRQHandler+0x5a8>
 80098a6:	bf00      	nop
 80098a8:	04000120 	.word	0x04000120
 80098ac:	0800a555 	.word	0x0800a555

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	f040 8143 	bne.w	8009b40 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098be:	f003 0310 	and.w	r3, r3, #16
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 813c 	beq.w	8009b40 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098cc:	f003 0310 	and.w	r3, r3, #16
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8135 	beq.w	8009b40 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2210      	movs	r2, #16
 80098dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e8:	2b40      	cmp	r3, #64	; 0x40
 80098ea:	f040 80b1 	bne.w	8009a50 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 815c 	beq.w	8009bbc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800990a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800990e:	429a      	cmp	r2, r3
 8009910:	f080 8154 	bcs.w	8009bbc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800991a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	2b20      	cmp	r3, #32
 8009926:	f000 8085 	beq.w	8009a34 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800993e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009946:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009958:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009960:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009964:	e841 2300 	strex	r3, r2, [r1]
 8009968:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800996c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1da      	bne.n	800992a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009986:	f023 0301 	bic.w	r3, r3, #1
 800998a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3308      	adds	r3, #8
 8009994:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009998:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800999c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e1      	bne.n	8009974 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3308      	adds	r3, #8
 80099b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3308      	adds	r3, #8
 80099d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e3      	bne.n	80099b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a04:	f023 0310 	bic.w	r3, r3, #16
 8009a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e4      	bne.n	80099f4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fc fb23 	bl	800607a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f8d3 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a4e:	e0b5      	b.n	8009bbc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 80a7 	beq.w	8009bc0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8009a72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 80a2 	beq.w	8009bc0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1e4      	bne.n	8009a7c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ad6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e3      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f023 0310 	bic.w	r3, r3, #16
 8009b10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b22:	69b9      	ldr	r1, [r7, #24]
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	e841 2300 	strex	r3, r2, [r1]
 8009b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1e4      	bne.n	8009afc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f85b 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b3e:	e03f      	b.n	8009bc0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <HAL_UART_IRQHandler+0x55a>
 8009b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d008      	beq.n	8009b6a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fd36 	bl	800a5d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b68:	e02d      	b.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00e      	beq.n	8009b94 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01c      	beq.n	8009bc4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	4798      	blx	r3
    }
    return;
 8009b92:	e017      	b.n	8009bc4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d012      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
 8009ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00c      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fce7 	bl	800a580 <UART_EndTransmit_IT>
    return;
 8009bb2:	e008      	b.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009bb4:	bf00      	nop
 8009bb6:	e006      	b.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009bb8:	bf00      	nop
 8009bba:	e004      	b.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009bbc:	bf00      	nop
 8009bbe:	e002      	b.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8009bc0:	bf00      	nop
 8009bc2:	e000      	b.n	8009bc6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8009bc4:	bf00      	nop
  }

}
 8009bc6:	37e8      	adds	r7, #232	; 0xe8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b088      	sub	sp, #32
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	431a      	orrs	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009c3a:	f023 030c 	bic.w	r3, r3, #12
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	6979      	ldr	r1, [r7, #20]
 8009c44:	430b      	orrs	r3, r1
 8009c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4aa8      	ldr	r2, [pc, #672]	; (8009f28 <UART_SetConfig+0x31c>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d120      	bne.n	8009cce <UART_SetConfig+0xc2>
 8009c8c:	4ba7      	ldr	r3, [pc, #668]	; (8009f2c <UART_SetConfig+0x320>)
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d817      	bhi.n	8009cc8 <UART_SetConfig+0xbc>
 8009c98:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0x94>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cb1 	.word	0x08009cb1
 8009ca4:	08009cbd 	.word	0x08009cbd
 8009ca8:	08009cc3 	.word	0x08009cc3
 8009cac:	08009cb7 	.word	0x08009cb7
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	77fb      	strb	r3, [r7, #31]
 8009cb4:	e0b5      	b.n	8009e22 <UART_SetConfig+0x216>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	77fb      	strb	r3, [r7, #31]
 8009cba:	e0b2      	b.n	8009e22 <UART_SetConfig+0x216>
 8009cbc:	2304      	movs	r3, #4
 8009cbe:	77fb      	strb	r3, [r7, #31]
 8009cc0:	e0af      	b.n	8009e22 <UART_SetConfig+0x216>
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	77fb      	strb	r3, [r7, #31]
 8009cc6:	e0ac      	b.n	8009e22 <UART_SetConfig+0x216>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	77fb      	strb	r3, [r7, #31]
 8009ccc:	e0a9      	b.n	8009e22 <UART_SetConfig+0x216>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a97      	ldr	r2, [pc, #604]	; (8009f30 <UART_SetConfig+0x324>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d124      	bne.n	8009d22 <UART_SetConfig+0x116>
 8009cd8:	4b94      	ldr	r3, [pc, #592]	; (8009f2c <UART_SetConfig+0x320>)
 8009cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ce4:	d011      	beq.n	8009d0a <UART_SetConfig+0xfe>
 8009ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cea:	d817      	bhi.n	8009d1c <UART_SetConfig+0x110>
 8009cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cf0:	d011      	beq.n	8009d16 <UART_SetConfig+0x10a>
 8009cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cf6:	d811      	bhi.n	8009d1c <UART_SetConfig+0x110>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <UART_SetConfig+0xf8>
 8009cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d00:	d006      	beq.n	8009d10 <UART_SetConfig+0x104>
 8009d02:	e00b      	b.n	8009d1c <UART_SetConfig+0x110>
 8009d04:	2300      	movs	r3, #0
 8009d06:	77fb      	strb	r3, [r7, #31]
 8009d08:	e08b      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	77fb      	strb	r3, [r7, #31]
 8009d0e:	e088      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d10:	2304      	movs	r3, #4
 8009d12:	77fb      	strb	r3, [r7, #31]
 8009d14:	e085      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d16:	2308      	movs	r3, #8
 8009d18:	77fb      	strb	r3, [r7, #31]
 8009d1a:	e082      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	77fb      	strb	r3, [r7, #31]
 8009d20:	e07f      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a83      	ldr	r2, [pc, #524]	; (8009f34 <UART_SetConfig+0x328>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d124      	bne.n	8009d76 <UART_SetConfig+0x16a>
 8009d2c:	4b7f      	ldr	r3, [pc, #508]	; (8009f2c <UART_SetConfig+0x320>)
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009d34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009d38:	d011      	beq.n	8009d5e <UART_SetConfig+0x152>
 8009d3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009d3e:	d817      	bhi.n	8009d70 <UART_SetConfig+0x164>
 8009d40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d44:	d011      	beq.n	8009d6a <UART_SetConfig+0x15e>
 8009d46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d4a:	d811      	bhi.n	8009d70 <UART_SetConfig+0x164>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <UART_SetConfig+0x14c>
 8009d50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d54:	d006      	beq.n	8009d64 <UART_SetConfig+0x158>
 8009d56:	e00b      	b.n	8009d70 <UART_SetConfig+0x164>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	77fb      	strb	r3, [r7, #31]
 8009d5c:	e061      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	77fb      	strb	r3, [r7, #31]
 8009d62:	e05e      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d64:	2304      	movs	r3, #4
 8009d66:	77fb      	strb	r3, [r7, #31]
 8009d68:	e05b      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d6a:	2308      	movs	r3, #8
 8009d6c:	77fb      	strb	r3, [r7, #31]
 8009d6e:	e058      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d70:	2310      	movs	r3, #16
 8009d72:	77fb      	strb	r3, [r7, #31]
 8009d74:	e055      	b.n	8009e22 <UART_SetConfig+0x216>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a6f      	ldr	r2, [pc, #444]	; (8009f38 <UART_SetConfig+0x32c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d124      	bne.n	8009dca <UART_SetConfig+0x1be>
 8009d80:	4b6a      	ldr	r3, [pc, #424]	; (8009f2c <UART_SetConfig+0x320>)
 8009d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009d88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d8c:	d011      	beq.n	8009db2 <UART_SetConfig+0x1a6>
 8009d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d92:	d817      	bhi.n	8009dc4 <UART_SetConfig+0x1b8>
 8009d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d98:	d011      	beq.n	8009dbe <UART_SetConfig+0x1b2>
 8009d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d9e:	d811      	bhi.n	8009dc4 <UART_SetConfig+0x1b8>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <UART_SetConfig+0x1a0>
 8009da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da8:	d006      	beq.n	8009db8 <UART_SetConfig+0x1ac>
 8009daa:	e00b      	b.n	8009dc4 <UART_SetConfig+0x1b8>
 8009dac:	2300      	movs	r3, #0
 8009dae:	77fb      	strb	r3, [r7, #31]
 8009db0:	e037      	b.n	8009e22 <UART_SetConfig+0x216>
 8009db2:	2302      	movs	r3, #2
 8009db4:	77fb      	strb	r3, [r7, #31]
 8009db6:	e034      	b.n	8009e22 <UART_SetConfig+0x216>
 8009db8:	2304      	movs	r3, #4
 8009dba:	77fb      	strb	r3, [r7, #31]
 8009dbc:	e031      	b.n	8009e22 <UART_SetConfig+0x216>
 8009dbe:	2308      	movs	r3, #8
 8009dc0:	77fb      	strb	r3, [r7, #31]
 8009dc2:	e02e      	b.n	8009e22 <UART_SetConfig+0x216>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	77fb      	strb	r3, [r7, #31]
 8009dc8:	e02b      	b.n	8009e22 <UART_SetConfig+0x216>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a5b      	ldr	r2, [pc, #364]	; (8009f3c <UART_SetConfig+0x330>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d124      	bne.n	8009e1e <UART_SetConfig+0x212>
 8009dd4:	4b55      	ldr	r3, [pc, #340]	; (8009f2c <UART_SetConfig+0x320>)
 8009dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009de0:	d011      	beq.n	8009e06 <UART_SetConfig+0x1fa>
 8009de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009de6:	d817      	bhi.n	8009e18 <UART_SetConfig+0x20c>
 8009de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dec:	d011      	beq.n	8009e12 <UART_SetConfig+0x206>
 8009dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009df2:	d811      	bhi.n	8009e18 <UART_SetConfig+0x20c>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <UART_SetConfig+0x1f4>
 8009df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dfc:	d006      	beq.n	8009e0c <UART_SetConfig+0x200>
 8009dfe:	e00b      	b.n	8009e18 <UART_SetConfig+0x20c>
 8009e00:	2300      	movs	r3, #0
 8009e02:	77fb      	strb	r3, [r7, #31]
 8009e04:	e00d      	b.n	8009e22 <UART_SetConfig+0x216>
 8009e06:	2302      	movs	r3, #2
 8009e08:	77fb      	strb	r3, [r7, #31]
 8009e0a:	e00a      	b.n	8009e22 <UART_SetConfig+0x216>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	77fb      	strb	r3, [r7, #31]
 8009e10:	e007      	b.n	8009e22 <UART_SetConfig+0x216>
 8009e12:	2308      	movs	r3, #8
 8009e14:	77fb      	strb	r3, [r7, #31]
 8009e16:	e004      	b.n	8009e22 <UART_SetConfig+0x216>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	77fb      	strb	r3, [r7, #31]
 8009e1c:	e001      	b.n	8009e22 <UART_SetConfig+0x216>
 8009e1e:	2310      	movs	r3, #16
 8009e20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e2a:	d15c      	bne.n	8009ee6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8009e2c:	7ffb      	ldrb	r3, [r7, #31]
 8009e2e:	2b08      	cmp	r3, #8
 8009e30:	d827      	bhi.n	8009e82 <UART_SetConfig+0x276>
 8009e32:	a201      	add	r2, pc, #4	; (adr r2, 8009e38 <UART_SetConfig+0x22c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e5d 	.word	0x08009e5d
 8009e3c:	08009e65 	.word	0x08009e65
 8009e40:	08009e6d 	.word	0x08009e6d
 8009e44:	08009e83 	.word	0x08009e83
 8009e48:	08009e73 	.word	0x08009e73
 8009e4c:	08009e83 	.word	0x08009e83
 8009e50:	08009e83 	.word	0x08009e83
 8009e54:	08009e83 	.word	0x08009e83
 8009e58:	08009e7b 	.word	0x08009e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e5c:	f7fd fe6c 	bl	8007b38 <HAL_RCC_GetPCLK1Freq>
 8009e60:	61b8      	str	r0, [r7, #24]
        break;
 8009e62:	e013      	b.n	8009e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e64:	f7fd fe8a 	bl	8007b7c <HAL_RCC_GetPCLK2Freq>
 8009e68:	61b8      	str	r0, [r7, #24]
        break;
 8009e6a:	e00f      	b.n	8009e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e6c:	4b34      	ldr	r3, [pc, #208]	; (8009f40 <UART_SetConfig+0x334>)
 8009e6e:	61bb      	str	r3, [r7, #24]
        break;
 8009e70:	e00c      	b.n	8009e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e72:	f7fd fdeb 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8009e76:	61b8      	str	r0, [r7, #24]
        break;
 8009e78:	e008      	b.n	8009e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e7e:	61bb      	str	r3, [r7, #24]
        break;
 8009e80:	e004      	b.n	8009e8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	77bb      	strb	r3, [r7, #30]
        break;
 8009e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 8084 	beq.w	8009f9c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	005a      	lsls	r2, r3, #1
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	085b      	lsrs	r3, r3, #1
 8009e9e:	441a      	add	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2b0f      	cmp	r3, #15
 8009eb0:	d916      	bls.n	8009ee0 <UART_SetConfig+0x2d4>
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb8:	d212      	bcs.n	8009ee0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	f023 030f 	bic.w	r3, r3, #15
 8009ec2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	89fb      	ldrh	r3, [r7, #14]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	89fa      	ldrh	r2, [r7, #14]
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	e05d      	b.n	8009f9c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	77bb      	strb	r3, [r7, #30]
 8009ee4:	e05a      	b.n	8009f9c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ee6:	7ffb      	ldrb	r3, [r7, #31]
 8009ee8:	2b08      	cmp	r3, #8
 8009eea:	d836      	bhi.n	8009f5a <UART_SetConfig+0x34e>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <UART_SetConfig+0x2e8>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f19 	.word	0x08009f19
 8009ef8:	08009f21 	.word	0x08009f21
 8009efc:	08009f45 	.word	0x08009f45
 8009f00:	08009f5b 	.word	0x08009f5b
 8009f04:	08009f4b 	.word	0x08009f4b
 8009f08:	08009f5b 	.word	0x08009f5b
 8009f0c:	08009f5b 	.word	0x08009f5b
 8009f10:	08009f5b 	.word	0x08009f5b
 8009f14:	08009f53 	.word	0x08009f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f18:	f7fd fe0e 	bl	8007b38 <HAL_RCC_GetPCLK1Freq>
 8009f1c:	61b8      	str	r0, [r7, #24]
        break;
 8009f1e:	e021      	b.n	8009f64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f20:	f7fd fe2c 	bl	8007b7c <HAL_RCC_GetPCLK2Freq>
 8009f24:	61b8      	str	r0, [r7, #24]
        break;
 8009f26:	e01d      	b.n	8009f64 <UART_SetConfig+0x358>
 8009f28:	40013800 	.word	0x40013800
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	40004400 	.word	0x40004400
 8009f34:	40004800 	.word	0x40004800
 8009f38:	40004c00 	.word	0x40004c00
 8009f3c:	40005000 	.word	0x40005000
 8009f40:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f44:	4b1b      	ldr	r3, [pc, #108]	; (8009fb4 <UART_SetConfig+0x3a8>)
 8009f46:	61bb      	str	r3, [r7, #24]
        break;
 8009f48:	e00c      	b.n	8009f64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f4a:	f7fd fd7f 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8009f4e:	61b8      	str	r0, [r7, #24]
        break;
 8009f50:	e008      	b.n	8009f64 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f56:	61bb      	str	r3, [r7, #24]
        break;
 8009f58:	e004      	b.n	8009f64 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	77bb      	strb	r3, [r7, #30]
        break;
 8009f62:	bf00      	nop
    }

    if (pclk != 0U)
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d018      	beq.n	8009f9c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	085a      	lsrs	r2, r3, #1
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	441a      	add	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	2b0f      	cmp	r3, #15
 8009f84:	d908      	bls.n	8009f98 <UART_SetConfig+0x38c>
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f8c:	d204      	bcs.n	8009f98 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	60da      	str	r2, [r3, #12]
 8009f96:	e001      	b.n	8009f9c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3720      	adds	r7, #32
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	007a1200 	.word	0x007a1200

08009fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00a      	beq.n	8009fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00a      	beq.n	800a004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	f003 0304 	and.w	r3, r3, #4
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00a      	beq.n	800a026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	f003 0308 	and.w	r3, r3, #8
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00a      	beq.n	800a048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	f003 0310 	and.w	r3, r3, #16
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00a      	beq.n	800a06a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	f003 0320 	and.w	r3, r3, #32
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00a      	beq.n	800a08c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	430a      	orrs	r2, r1
 800a08a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01a      	beq.n	800a0ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0b6:	d10a      	bne.n	800a0ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	605a      	str	r2, [r3, #4]
  }
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af02      	add	r7, sp, #8
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a10c:	f7f9 ff14 	bl	8003f38 <HAL_GetTick>
 800a110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d10e      	bne.n	800a13e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f82d 	bl	800a18e <UART_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e023      	b.n	800a186 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d10e      	bne.n	800a16a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a14c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f817 	bl	800a18e <UART_WaitOnFlagUntilTimeout>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e00d      	b.n	800a186 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2220      	movs	r2, #32
 800a16e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b09c      	sub	sp, #112	; 0x70
 800a192:	af00      	add	r7, sp, #0
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	603b      	str	r3, [r7, #0]
 800a19a:	4613      	mov	r3, r2
 800a19c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a19e:	e0a5      	b.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	f000 80a1 	beq.w	800a2ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1aa:	f7f9 fec5 	bl	8003f38 <HAL_GetTick>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d302      	bcc.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a1ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d13e      	bne.n	800a23e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e6      	bne.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	f023 0301 	bic.w	r3, r3, #1
 800a208:	663b      	str	r3, [r7, #96]	; 0x60
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3308      	adds	r3, #8
 800a210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a212:	64ba      	str	r2, [r7, #72]	; 0x48
 800a214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e5      	bne.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2220      	movs	r2, #32
 800a22a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e067      	b.n	800a30e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d04f      	beq.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a25a:	d147      	bne.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a264:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a27a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a284:	637b      	str	r3, [r7, #52]	; 0x34
 800a286:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3308      	adds	r3, #8
 800a29e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f023 0301 	bic.w	r3, r3, #1
 800a2ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2b8:	623a      	str	r2, [r7, #32]
 800a2ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	69f9      	ldr	r1, [r7, #28]
 800a2be:	6a3a      	ldr	r2, [r7, #32]
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e5      	bne.n	800a298 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e010      	b.n	800a30e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	69da      	ldr	r2, [r3, #28]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2301      	moveq	r3, #1
 800a2fe:	2300      	movne	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	429a      	cmp	r2, r3
 800a308:	f43f af4a 	beq.w	800a1a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3770      	adds	r7, #112	; 0x70
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a316:	b480      	push	{r7}
 800a318:	b089      	sub	sp, #36	; 0x24
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a332:	61fb      	str	r3, [r7, #28]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6979      	ldr	r1, [r7, #20]
 800a342:	69ba      	ldr	r2, [r7, #24]
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	613b      	str	r3, [r7, #16]
   return(result);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2220      	movs	r2, #32
 800a354:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a356:	bf00      	nop
 800a358:	3724      	adds	r7, #36	; 0x24
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a362:	b480      	push	{r7}
 800a364:	b095      	sub	sp, #84	; 0x54
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	e853 3f00 	ldrex	r3, [r3]
 800a376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a37e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	461a      	mov	r2, r3
 800a386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a388:	643b      	str	r3, [r7, #64]	; 0x40
 800a38a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a38e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e6      	bne.n	800a36a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	f023 0301 	bic.w	r3, r3, #1
 800a3b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e5      	bne.n	800a39c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d118      	bne.n	800a40a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f023 0310 	bic.w	r3, r3, #16
 800a3ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f6:	61bb      	str	r3, [r7, #24]
 800a3f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6979      	ldr	r1, [r7, #20]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	613b      	str	r3, [r7, #16]
   return(result);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e6      	bne.n	800a3d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a41c:	bf00      	nop
 800a41e:	3754      	adds	r7, #84	; 0x54
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b090      	sub	sp, #64	; 0x40
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a434:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	d037      	beq.n	800a4ae <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a440:	2200      	movs	r2, #0
 800a442:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	623b      	str	r3, [r7, #32]
   return(result);
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a45c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a466:	633a      	str	r2, [r7, #48]	; 0x30
 800a468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e5      	bne.n	800a446 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	60fb      	str	r3, [r7, #12]
   return(result);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a48e:	637b      	str	r3, [r7, #52]	; 0x34
 800a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	69b9      	ldr	r1, [r7, #24]
 800a49e:	69fa      	ldr	r2, [r7, #28]
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e6      	bne.n	800a47a <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4ac:	e002      	b.n	800a4b4 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800a4ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a4b0:	f7f9 fbb0 	bl	8003c14 <HAL_UART_TxCpltCallback>
}
 800a4b4:	bf00      	nop
 800a4b6:	3740      	adds	r7, #64	; 0x40
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff fb7e 	bl	8009bcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fc:	2b80      	cmp	r3, #128	; 0x80
 800a4fe:	d109      	bne.n	800a514 <UART_DMAError+0x3c>
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b21      	cmp	r3, #33	; 0x21
 800a504:	d106      	bne.n	800a514 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2200      	movs	r2, #0
 800a50a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a50e:	6978      	ldr	r0, [r7, #20]
 800a510:	f7ff ff01 	bl	800a316 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51e:	2b40      	cmp	r3, #64	; 0x40
 800a520:	d109      	bne.n	800a536 <UART_DMAError+0x5e>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b22      	cmp	r3, #34	; 0x22
 800a526:	d106      	bne.n	800a536 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a530:	6978      	ldr	r0, [r7, #20]
 800a532:	f7ff ff16 	bl	800a362 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a53c:	f043 0210 	orr.w	r2, r3, #16
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a546:	6978      	ldr	r0, [r7, #20]
 800a548:	f7ff fb4a 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a54c:	bf00      	nop
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fb34 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b088      	sub	sp, #32
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	e853 3f00 	ldrex	r3, [r3]
 800a594:	60bb      	str	r3, [r7, #8]
   return(result);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a59c:	61fb      	str	r3, [r7, #28]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	61bb      	str	r3, [r7, #24]
 800a5a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5aa:	6979      	ldr	r1, [r7, #20]
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	e841 2300 	strex	r3, r2, [r1]
 800a5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e6      	bne.n	800a588 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7f9 fb24 	bl	8003c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5cc:	bf00      	nop
 800a5ce:	3720      	adds	r7, #32
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <__errno>:
 800a5e8:	4b01      	ldr	r3, [pc, #4]	; (800a5f0 <__errno+0x8>)
 800a5ea:	6818      	ldr	r0, [r3, #0]
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	20000010 	.word	0x20000010

0800a5f4 <__libc_init_array>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	4d0d      	ldr	r5, [pc, #52]	; (800a62c <__libc_init_array+0x38>)
 800a5f8:	4c0d      	ldr	r4, [pc, #52]	; (800a630 <__libc_init_array+0x3c>)
 800a5fa:	1b64      	subs	r4, r4, r5
 800a5fc:	10a4      	asrs	r4, r4, #2
 800a5fe:	2600      	movs	r6, #0
 800a600:	42a6      	cmp	r6, r4
 800a602:	d109      	bne.n	800a618 <__libc_init_array+0x24>
 800a604:	4d0b      	ldr	r5, [pc, #44]	; (800a634 <__libc_init_array+0x40>)
 800a606:	4c0c      	ldr	r4, [pc, #48]	; (800a638 <__libc_init_array+0x44>)
 800a608:	f002 ffd2 	bl	800d5b0 <_init>
 800a60c:	1b64      	subs	r4, r4, r5
 800a60e:	10a4      	asrs	r4, r4, #2
 800a610:	2600      	movs	r6, #0
 800a612:	42a6      	cmp	r6, r4
 800a614:	d105      	bne.n	800a622 <__libc_init_array+0x2e>
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	f855 3b04 	ldr.w	r3, [r5], #4
 800a61c:	4798      	blx	r3
 800a61e:	3601      	adds	r6, #1
 800a620:	e7ee      	b.n	800a600 <__libc_init_array+0xc>
 800a622:	f855 3b04 	ldr.w	r3, [r5], #4
 800a626:	4798      	blx	r3
 800a628:	3601      	adds	r6, #1
 800a62a:	e7f2      	b.n	800a612 <__libc_init_array+0x1e>
 800a62c:	0800de5c 	.word	0x0800de5c
 800a630:	0800de5c 	.word	0x0800de5c
 800a634:	0800de5c 	.word	0x0800de5c
 800a638:	0800de60 	.word	0x0800de60

0800a63c <memset>:
 800a63c:	4402      	add	r2, r0
 800a63e:	4603      	mov	r3, r0
 800a640:	4293      	cmp	r3, r2
 800a642:	d100      	bne.n	800a646 <memset+0xa>
 800a644:	4770      	bx	lr
 800a646:	f803 1b01 	strb.w	r1, [r3], #1
 800a64a:	e7f9      	b.n	800a640 <memset+0x4>

0800a64c <__cvt>:
 800a64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a650:	ec55 4b10 	vmov	r4, r5, d0
 800a654:	2d00      	cmp	r5, #0
 800a656:	460e      	mov	r6, r1
 800a658:	4619      	mov	r1, r3
 800a65a:	462b      	mov	r3, r5
 800a65c:	bfbb      	ittet	lt
 800a65e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a662:	461d      	movlt	r5, r3
 800a664:	2300      	movge	r3, #0
 800a666:	232d      	movlt	r3, #45	; 0x2d
 800a668:	700b      	strb	r3, [r1, #0]
 800a66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a66c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a670:	4691      	mov	r9, r2
 800a672:	f023 0820 	bic.w	r8, r3, #32
 800a676:	bfbc      	itt	lt
 800a678:	4622      	movlt	r2, r4
 800a67a:	4614      	movlt	r4, r2
 800a67c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a680:	d005      	beq.n	800a68e <__cvt+0x42>
 800a682:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a686:	d100      	bne.n	800a68a <__cvt+0x3e>
 800a688:	3601      	adds	r6, #1
 800a68a:	2102      	movs	r1, #2
 800a68c:	e000      	b.n	800a690 <__cvt+0x44>
 800a68e:	2103      	movs	r1, #3
 800a690:	ab03      	add	r3, sp, #12
 800a692:	9301      	str	r3, [sp, #4]
 800a694:	ab02      	add	r3, sp, #8
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	ec45 4b10 	vmov	d0, r4, r5
 800a69c:	4653      	mov	r3, sl
 800a69e:	4632      	mov	r2, r6
 800a6a0:	f000 fdba 	bl	800b218 <_dtoa_r>
 800a6a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	d102      	bne.n	800a6b2 <__cvt+0x66>
 800a6ac:	f019 0f01 	tst.w	r9, #1
 800a6b0:	d022      	beq.n	800a6f8 <__cvt+0xac>
 800a6b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6b6:	eb07 0906 	add.w	r9, r7, r6
 800a6ba:	d110      	bne.n	800a6de <__cvt+0x92>
 800a6bc:	783b      	ldrb	r3, [r7, #0]
 800a6be:	2b30      	cmp	r3, #48	; 0x30
 800a6c0:	d10a      	bne.n	800a6d8 <__cvt+0x8c>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7f6 f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ce:	b918      	cbnz	r0, 800a6d8 <__cvt+0x8c>
 800a6d0:	f1c6 0601 	rsb	r6, r6, #1
 800a6d4:	f8ca 6000 	str.w	r6, [sl]
 800a6d8:	f8da 3000 	ldr.w	r3, [sl]
 800a6dc:	4499      	add	r9, r3
 800a6de:	2200      	movs	r2, #0
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	f7f6 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ea:	b108      	cbz	r0, 800a6f0 <__cvt+0xa4>
 800a6ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6f0:	2230      	movs	r2, #48	; 0x30
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	454b      	cmp	r3, r9
 800a6f6:	d307      	bcc.n	800a708 <__cvt+0xbc>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6fc:	1bdb      	subs	r3, r3, r7
 800a6fe:	4638      	mov	r0, r7
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	b004      	add	sp, #16
 800a704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a708:	1c59      	adds	r1, r3, #1
 800a70a:	9103      	str	r1, [sp, #12]
 800a70c:	701a      	strb	r2, [r3, #0]
 800a70e:	e7f0      	b.n	800a6f2 <__cvt+0xa6>

0800a710 <__exponent>:
 800a710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a712:	4603      	mov	r3, r0
 800a714:	2900      	cmp	r1, #0
 800a716:	bfb8      	it	lt
 800a718:	4249      	neglt	r1, r1
 800a71a:	f803 2b02 	strb.w	r2, [r3], #2
 800a71e:	bfb4      	ite	lt
 800a720:	222d      	movlt	r2, #45	; 0x2d
 800a722:	222b      	movge	r2, #43	; 0x2b
 800a724:	2909      	cmp	r1, #9
 800a726:	7042      	strb	r2, [r0, #1]
 800a728:	dd2a      	ble.n	800a780 <__exponent+0x70>
 800a72a:	f10d 0407 	add.w	r4, sp, #7
 800a72e:	46a4      	mov	ip, r4
 800a730:	270a      	movs	r7, #10
 800a732:	46a6      	mov	lr, r4
 800a734:	460a      	mov	r2, r1
 800a736:	fb91 f6f7 	sdiv	r6, r1, r7
 800a73a:	fb07 1516 	mls	r5, r7, r6, r1
 800a73e:	3530      	adds	r5, #48	; 0x30
 800a740:	2a63      	cmp	r2, #99	; 0x63
 800a742:	f104 34ff 	add.w	r4, r4, #4294967295
 800a746:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a74a:	4631      	mov	r1, r6
 800a74c:	dcf1      	bgt.n	800a732 <__exponent+0x22>
 800a74e:	3130      	adds	r1, #48	; 0x30
 800a750:	f1ae 0502 	sub.w	r5, lr, #2
 800a754:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a758:	1c44      	adds	r4, r0, #1
 800a75a:	4629      	mov	r1, r5
 800a75c:	4561      	cmp	r1, ip
 800a75e:	d30a      	bcc.n	800a776 <__exponent+0x66>
 800a760:	f10d 0209 	add.w	r2, sp, #9
 800a764:	eba2 020e 	sub.w	r2, r2, lr
 800a768:	4565      	cmp	r5, ip
 800a76a:	bf88      	it	hi
 800a76c:	2200      	movhi	r2, #0
 800a76e:	4413      	add	r3, r2
 800a770:	1a18      	subs	r0, r3, r0
 800a772:	b003      	add	sp, #12
 800a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a77a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a77e:	e7ed      	b.n	800a75c <__exponent+0x4c>
 800a780:	2330      	movs	r3, #48	; 0x30
 800a782:	3130      	adds	r1, #48	; 0x30
 800a784:	7083      	strb	r3, [r0, #2]
 800a786:	70c1      	strb	r1, [r0, #3]
 800a788:	1d03      	adds	r3, r0, #4
 800a78a:	e7f1      	b.n	800a770 <__exponent+0x60>

0800a78c <_printf_float>:
 800a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	ed2d 8b02 	vpush	{d8}
 800a794:	b08d      	sub	sp, #52	; 0x34
 800a796:	460c      	mov	r4, r1
 800a798:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a79c:	4616      	mov	r6, r2
 800a79e:	461f      	mov	r7, r3
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	f001 fcdf 	bl	800c164 <_localeconv_r>
 800a7a6:	f8d0 a000 	ldr.w	sl, [r0]
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	f7f5 fd10 	bl	80001d0 <strlen>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	9305      	str	r3, [sp, #20]
 800a7b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a7bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a7c0:	3307      	adds	r3, #7
 800a7c2:	f023 0307 	bic.w	r3, r3, #7
 800a7c6:	f103 0208 	add.w	r2, r3, #8
 800a7ca:	f8c8 2000 	str.w	r2, [r8]
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7de:	9307      	str	r3, [sp, #28]
 800a7e0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7e4:	ee08 0a10 	vmov	s16, r0
 800a7e8:	4b9f      	ldr	r3, [pc, #636]	; (800aa68 <_printf_float+0x2dc>)
 800a7ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f2:	f7f6 f99b 	bl	8000b2c <__aeabi_dcmpun>
 800a7f6:	bb88      	cbnz	r0, 800a85c <_printf_float+0xd0>
 800a7f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7fc:	4b9a      	ldr	r3, [pc, #616]	; (800aa68 <_printf_float+0x2dc>)
 800a7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a802:	f7f6 f975 	bl	8000af0 <__aeabi_dcmple>
 800a806:	bb48      	cbnz	r0, 800a85c <_printf_float+0xd0>
 800a808:	2200      	movs	r2, #0
 800a80a:	2300      	movs	r3, #0
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f6 f964 	bl	8000adc <__aeabi_dcmplt>
 800a814:	b110      	cbz	r0, 800a81c <_printf_float+0x90>
 800a816:	232d      	movs	r3, #45	; 0x2d
 800a818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a81c:	4b93      	ldr	r3, [pc, #588]	; (800aa6c <_printf_float+0x2e0>)
 800a81e:	4894      	ldr	r0, [pc, #592]	; (800aa70 <_printf_float+0x2e4>)
 800a820:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a824:	bf94      	ite	ls
 800a826:	4698      	movls	r8, r3
 800a828:	4680      	movhi	r8, r0
 800a82a:	2303      	movs	r3, #3
 800a82c:	6123      	str	r3, [r4, #16]
 800a82e:	9b05      	ldr	r3, [sp, #20]
 800a830:	f023 0204 	bic.w	r2, r3, #4
 800a834:	6022      	str	r2, [r4, #0]
 800a836:	f04f 0900 	mov.w	r9, #0
 800a83a:	9700      	str	r7, [sp, #0]
 800a83c:	4633      	mov	r3, r6
 800a83e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a840:	4621      	mov	r1, r4
 800a842:	4628      	mov	r0, r5
 800a844:	f000 f9d8 	bl	800abf8 <_printf_common>
 800a848:	3001      	adds	r0, #1
 800a84a:	f040 8090 	bne.w	800a96e <_printf_float+0x1e2>
 800a84e:	f04f 30ff 	mov.w	r0, #4294967295
 800a852:	b00d      	add	sp, #52	; 0x34
 800a854:	ecbd 8b02 	vpop	{d8}
 800a858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85c:	4642      	mov	r2, r8
 800a85e:	464b      	mov	r3, r9
 800a860:	4640      	mov	r0, r8
 800a862:	4649      	mov	r1, r9
 800a864:	f7f6 f962 	bl	8000b2c <__aeabi_dcmpun>
 800a868:	b140      	cbz	r0, 800a87c <_printf_float+0xf0>
 800a86a:	464b      	mov	r3, r9
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	bfbc      	itt	lt
 800a870:	232d      	movlt	r3, #45	; 0x2d
 800a872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a876:	487f      	ldr	r0, [pc, #508]	; (800aa74 <_printf_float+0x2e8>)
 800a878:	4b7f      	ldr	r3, [pc, #508]	; (800aa78 <_printf_float+0x2ec>)
 800a87a:	e7d1      	b.n	800a820 <_printf_float+0x94>
 800a87c:	6863      	ldr	r3, [r4, #4]
 800a87e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a882:	9206      	str	r2, [sp, #24]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	d13f      	bne.n	800a908 <_printf_float+0x17c>
 800a888:	2306      	movs	r3, #6
 800a88a:	6063      	str	r3, [r4, #4]
 800a88c:	9b05      	ldr	r3, [sp, #20]
 800a88e:	6861      	ldr	r1, [r4, #4]
 800a890:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a894:	2300      	movs	r3, #0
 800a896:	9303      	str	r3, [sp, #12]
 800a898:	ab0a      	add	r3, sp, #40	; 0x28
 800a89a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a89e:	ab09      	add	r3, sp, #36	; 0x24
 800a8a0:	ec49 8b10 	vmov	d0, r8, r9
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	6022      	str	r2, [r4, #0]
 800a8a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	f7ff fecd 	bl	800a64c <__cvt>
 800a8b2:	9b06      	ldr	r3, [sp, #24]
 800a8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8b6:	2b47      	cmp	r3, #71	; 0x47
 800a8b8:	4680      	mov	r8, r0
 800a8ba:	d108      	bne.n	800a8ce <_printf_float+0x142>
 800a8bc:	1cc8      	adds	r0, r1, #3
 800a8be:	db02      	blt.n	800a8c6 <_printf_float+0x13a>
 800a8c0:	6863      	ldr	r3, [r4, #4]
 800a8c2:	4299      	cmp	r1, r3
 800a8c4:	dd41      	ble.n	800a94a <_printf_float+0x1be>
 800a8c6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a8ca:	fa5f fb8b 	uxtb.w	fp, fp
 800a8ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8d2:	d820      	bhi.n	800a916 <_printf_float+0x18a>
 800a8d4:	3901      	subs	r1, #1
 800a8d6:	465a      	mov	r2, fp
 800a8d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8dc:	9109      	str	r1, [sp, #36]	; 0x24
 800a8de:	f7ff ff17 	bl	800a710 <__exponent>
 800a8e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8e4:	1813      	adds	r3, r2, r0
 800a8e6:	2a01      	cmp	r2, #1
 800a8e8:	4681      	mov	r9, r0
 800a8ea:	6123      	str	r3, [r4, #16]
 800a8ec:	dc02      	bgt.n	800a8f4 <_printf_float+0x168>
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	07d2      	lsls	r2, r2, #31
 800a8f2:	d501      	bpl.n	800a8f8 <_printf_float+0x16c>
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	6123      	str	r3, [r4, #16]
 800a8f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d09c      	beq.n	800a83a <_printf_float+0xae>
 800a900:	232d      	movs	r3, #45	; 0x2d
 800a902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a906:	e798      	b.n	800a83a <_printf_float+0xae>
 800a908:	9a06      	ldr	r2, [sp, #24]
 800a90a:	2a47      	cmp	r2, #71	; 0x47
 800a90c:	d1be      	bne.n	800a88c <_printf_float+0x100>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1bc      	bne.n	800a88c <_printf_float+0x100>
 800a912:	2301      	movs	r3, #1
 800a914:	e7b9      	b.n	800a88a <_printf_float+0xfe>
 800a916:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a91a:	d118      	bne.n	800a94e <_printf_float+0x1c2>
 800a91c:	2900      	cmp	r1, #0
 800a91e:	6863      	ldr	r3, [r4, #4]
 800a920:	dd0b      	ble.n	800a93a <_printf_float+0x1ae>
 800a922:	6121      	str	r1, [r4, #16]
 800a924:	b913      	cbnz	r3, 800a92c <_printf_float+0x1a0>
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	07d0      	lsls	r0, r2, #31
 800a92a:	d502      	bpl.n	800a932 <_printf_float+0x1a6>
 800a92c:	3301      	adds	r3, #1
 800a92e:	440b      	add	r3, r1
 800a930:	6123      	str	r3, [r4, #16]
 800a932:	65a1      	str	r1, [r4, #88]	; 0x58
 800a934:	f04f 0900 	mov.w	r9, #0
 800a938:	e7de      	b.n	800a8f8 <_printf_float+0x16c>
 800a93a:	b913      	cbnz	r3, 800a942 <_printf_float+0x1b6>
 800a93c:	6822      	ldr	r2, [r4, #0]
 800a93e:	07d2      	lsls	r2, r2, #31
 800a940:	d501      	bpl.n	800a946 <_printf_float+0x1ba>
 800a942:	3302      	adds	r3, #2
 800a944:	e7f4      	b.n	800a930 <_printf_float+0x1a4>
 800a946:	2301      	movs	r3, #1
 800a948:	e7f2      	b.n	800a930 <_printf_float+0x1a4>
 800a94a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a950:	4299      	cmp	r1, r3
 800a952:	db05      	blt.n	800a960 <_printf_float+0x1d4>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	6121      	str	r1, [r4, #16]
 800a958:	07d8      	lsls	r0, r3, #31
 800a95a:	d5ea      	bpl.n	800a932 <_printf_float+0x1a6>
 800a95c:	1c4b      	adds	r3, r1, #1
 800a95e:	e7e7      	b.n	800a930 <_printf_float+0x1a4>
 800a960:	2900      	cmp	r1, #0
 800a962:	bfd4      	ite	le
 800a964:	f1c1 0202 	rsble	r2, r1, #2
 800a968:	2201      	movgt	r2, #1
 800a96a:	4413      	add	r3, r2
 800a96c:	e7e0      	b.n	800a930 <_printf_float+0x1a4>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	055a      	lsls	r2, r3, #21
 800a972:	d407      	bmi.n	800a984 <_printf_float+0x1f8>
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	4642      	mov	r2, r8
 800a978:	4631      	mov	r1, r6
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b8      	blx	r7
 800a97e:	3001      	adds	r0, #1
 800a980:	d12c      	bne.n	800a9dc <_printf_float+0x250>
 800a982:	e764      	b.n	800a84e <_printf_float+0xc2>
 800a984:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a988:	f240 80e0 	bls.w	800ab4c <_printf_float+0x3c0>
 800a98c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a990:	2200      	movs	r2, #0
 800a992:	2300      	movs	r3, #0
 800a994:	f7f6 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d034      	beq.n	800aa06 <_printf_float+0x27a>
 800a99c:	4a37      	ldr	r2, [pc, #220]	; (800aa7c <_printf_float+0x2f0>)
 800a99e:	2301      	movs	r3, #1
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	47b8      	blx	r7
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f43f af51 	beq.w	800a84e <_printf_float+0xc2>
 800a9ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	db02      	blt.n	800a9ba <_printf_float+0x22e>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	07d8      	lsls	r0, r3, #31
 800a9b8:	d510      	bpl.n	800a9dc <_printf_float+0x250>
 800a9ba:	ee18 3a10 	vmov	r3, s16
 800a9be:	4652      	mov	r2, sl
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	f43f af41 	beq.w	800a84e <_printf_float+0xc2>
 800a9cc:	f04f 0800 	mov.w	r8, #0
 800a9d0:	f104 091a 	add.w	r9, r4, #26
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	4543      	cmp	r3, r8
 800a9da:	dc09      	bgt.n	800a9f0 <_printf_float+0x264>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	079b      	lsls	r3, r3, #30
 800a9e0:	f100 8105 	bmi.w	800abee <_printf_float+0x462>
 800a9e4:	68e0      	ldr	r0, [r4, #12]
 800a9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e8:	4298      	cmp	r0, r3
 800a9ea:	bfb8      	it	lt
 800a9ec:	4618      	movlt	r0, r3
 800a9ee:	e730      	b.n	800a852 <_printf_float+0xc6>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	464a      	mov	r2, r9
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	47b8      	blx	r7
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	f43f af27 	beq.w	800a84e <_printf_float+0xc2>
 800aa00:	f108 0801 	add.w	r8, r8, #1
 800aa04:	e7e6      	b.n	800a9d4 <_printf_float+0x248>
 800aa06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	dc39      	bgt.n	800aa80 <_printf_float+0x2f4>
 800aa0c:	4a1b      	ldr	r2, [pc, #108]	; (800aa7c <_printf_float+0x2f0>)
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4631      	mov	r1, r6
 800aa12:	4628      	mov	r0, r5
 800aa14:	47b8      	blx	r7
 800aa16:	3001      	adds	r0, #1
 800aa18:	f43f af19 	beq.w	800a84e <_printf_float+0xc2>
 800aa1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa20:	4313      	orrs	r3, r2
 800aa22:	d102      	bne.n	800aa2a <_printf_float+0x29e>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	07d9      	lsls	r1, r3, #31
 800aa28:	d5d8      	bpl.n	800a9dc <_printf_float+0x250>
 800aa2a:	ee18 3a10 	vmov	r3, s16
 800aa2e:	4652      	mov	r2, sl
 800aa30:	4631      	mov	r1, r6
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	f43f af09 	beq.w	800a84e <_printf_float+0xc2>
 800aa3c:	f04f 0900 	mov.w	r9, #0
 800aa40:	f104 0a1a 	add.w	sl, r4, #26
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	425b      	negs	r3, r3
 800aa48:	454b      	cmp	r3, r9
 800aa4a:	dc01      	bgt.n	800aa50 <_printf_float+0x2c4>
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4e:	e792      	b.n	800a976 <_printf_float+0x1ea>
 800aa50:	2301      	movs	r3, #1
 800aa52:	4652      	mov	r2, sl
 800aa54:	4631      	mov	r1, r6
 800aa56:	4628      	mov	r0, r5
 800aa58:	47b8      	blx	r7
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	f43f aef7 	beq.w	800a84e <_printf_float+0xc2>
 800aa60:	f109 0901 	add.w	r9, r9, #1
 800aa64:	e7ee      	b.n	800aa44 <_printf_float+0x2b8>
 800aa66:	bf00      	nop
 800aa68:	7fefffff 	.word	0x7fefffff
 800aa6c:	0800da84 	.word	0x0800da84
 800aa70:	0800da88 	.word	0x0800da88
 800aa74:	0800da90 	.word	0x0800da90
 800aa78:	0800da8c 	.word	0x0800da8c
 800aa7c:	0800da94 	.word	0x0800da94
 800aa80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa84:	429a      	cmp	r2, r3
 800aa86:	bfa8      	it	ge
 800aa88:	461a      	movge	r2, r3
 800aa8a:	2a00      	cmp	r2, #0
 800aa8c:	4691      	mov	r9, r2
 800aa8e:	dc37      	bgt.n	800ab00 <_printf_float+0x374>
 800aa90:	f04f 0b00 	mov.w	fp, #0
 800aa94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa98:	f104 021a 	add.w	r2, r4, #26
 800aa9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa9e:	9305      	str	r3, [sp, #20]
 800aaa0:	eba3 0309 	sub.w	r3, r3, r9
 800aaa4:	455b      	cmp	r3, fp
 800aaa6:	dc33      	bgt.n	800ab10 <_printf_float+0x384>
 800aaa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaac:	429a      	cmp	r2, r3
 800aaae:	db3b      	blt.n	800ab28 <_printf_float+0x39c>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	07da      	lsls	r2, r3, #31
 800aab4:	d438      	bmi.n	800ab28 <_printf_float+0x39c>
 800aab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab8:	9a05      	ldr	r2, [sp, #20]
 800aaba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aabc:	1a9a      	subs	r2, r3, r2
 800aabe:	eba3 0901 	sub.w	r9, r3, r1
 800aac2:	4591      	cmp	r9, r2
 800aac4:	bfa8      	it	ge
 800aac6:	4691      	movge	r9, r2
 800aac8:	f1b9 0f00 	cmp.w	r9, #0
 800aacc:	dc35      	bgt.n	800ab3a <_printf_float+0x3ae>
 800aace:	f04f 0800 	mov.w	r8, #0
 800aad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aad6:	f104 0a1a 	add.w	sl, r4, #26
 800aada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aade:	1a9b      	subs	r3, r3, r2
 800aae0:	eba3 0309 	sub.w	r3, r3, r9
 800aae4:	4543      	cmp	r3, r8
 800aae6:	f77f af79 	ble.w	800a9dc <_printf_float+0x250>
 800aaea:	2301      	movs	r3, #1
 800aaec:	4652      	mov	r2, sl
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	47b8      	blx	r7
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	f43f aeaa 	beq.w	800a84e <_printf_float+0xc2>
 800aafa:	f108 0801 	add.w	r8, r8, #1
 800aafe:	e7ec      	b.n	800aada <_printf_float+0x34e>
 800ab00:	4613      	mov	r3, r2
 800ab02:	4631      	mov	r1, r6
 800ab04:	4642      	mov	r2, r8
 800ab06:	4628      	mov	r0, r5
 800ab08:	47b8      	blx	r7
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d1c0      	bne.n	800aa90 <_printf_float+0x304>
 800ab0e:	e69e      	b.n	800a84e <_printf_float+0xc2>
 800ab10:	2301      	movs	r3, #1
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	9205      	str	r2, [sp, #20]
 800ab18:	47b8      	blx	r7
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	f43f ae97 	beq.w	800a84e <_printf_float+0xc2>
 800ab20:	9a05      	ldr	r2, [sp, #20]
 800ab22:	f10b 0b01 	add.w	fp, fp, #1
 800ab26:	e7b9      	b.n	800aa9c <_printf_float+0x310>
 800ab28:	ee18 3a10 	vmov	r3, s16
 800ab2c:	4652      	mov	r2, sl
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4628      	mov	r0, r5
 800ab32:	47b8      	blx	r7
 800ab34:	3001      	adds	r0, #1
 800ab36:	d1be      	bne.n	800aab6 <_printf_float+0x32a>
 800ab38:	e689      	b.n	800a84e <_printf_float+0xc2>
 800ab3a:	9a05      	ldr	r2, [sp, #20]
 800ab3c:	464b      	mov	r3, r9
 800ab3e:	4442      	add	r2, r8
 800ab40:	4631      	mov	r1, r6
 800ab42:	4628      	mov	r0, r5
 800ab44:	47b8      	blx	r7
 800ab46:	3001      	adds	r0, #1
 800ab48:	d1c1      	bne.n	800aace <_printf_float+0x342>
 800ab4a:	e680      	b.n	800a84e <_printf_float+0xc2>
 800ab4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab4e:	2a01      	cmp	r2, #1
 800ab50:	dc01      	bgt.n	800ab56 <_printf_float+0x3ca>
 800ab52:	07db      	lsls	r3, r3, #31
 800ab54:	d538      	bpl.n	800abc8 <_printf_float+0x43c>
 800ab56:	2301      	movs	r3, #1
 800ab58:	4642      	mov	r2, r8
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b8      	blx	r7
 800ab60:	3001      	adds	r0, #1
 800ab62:	f43f ae74 	beq.w	800a84e <_printf_float+0xc2>
 800ab66:	ee18 3a10 	vmov	r3, s16
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b8      	blx	r7
 800ab72:	3001      	adds	r0, #1
 800ab74:	f43f ae6b 	beq.w	800a84e <_printf_float+0xc2>
 800ab78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f7f5 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab84:	b9d8      	cbnz	r0, 800abbe <_printf_float+0x432>
 800ab86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab88:	f108 0201 	add.w	r2, r8, #1
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	47b8      	blx	r7
 800ab94:	3001      	adds	r0, #1
 800ab96:	d10e      	bne.n	800abb6 <_printf_float+0x42a>
 800ab98:	e659      	b.n	800a84e <_printf_float+0xc2>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4652      	mov	r2, sl
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b8      	blx	r7
 800aba4:	3001      	adds	r0, #1
 800aba6:	f43f ae52 	beq.w	800a84e <_printf_float+0xc2>
 800abaa:	f108 0801 	add.w	r8, r8, #1
 800abae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb0:	3b01      	subs	r3, #1
 800abb2:	4543      	cmp	r3, r8
 800abb4:	dcf1      	bgt.n	800ab9a <_printf_float+0x40e>
 800abb6:	464b      	mov	r3, r9
 800abb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800abbc:	e6dc      	b.n	800a978 <_printf_float+0x1ec>
 800abbe:	f04f 0800 	mov.w	r8, #0
 800abc2:	f104 0a1a 	add.w	sl, r4, #26
 800abc6:	e7f2      	b.n	800abae <_printf_float+0x422>
 800abc8:	2301      	movs	r3, #1
 800abca:	4642      	mov	r2, r8
 800abcc:	e7df      	b.n	800ab8e <_printf_float+0x402>
 800abce:	2301      	movs	r3, #1
 800abd0:	464a      	mov	r2, r9
 800abd2:	4631      	mov	r1, r6
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b8      	blx	r7
 800abd8:	3001      	adds	r0, #1
 800abda:	f43f ae38 	beq.w	800a84e <_printf_float+0xc2>
 800abde:	f108 0801 	add.w	r8, r8, #1
 800abe2:	68e3      	ldr	r3, [r4, #12]
 800abe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abe6:	1a5b      	subs	r3, r3, r1
 800abe8:	4543      	cmp	r3, r8
 800abea:	dcf0      	bgt.n	800abce <_printf_float+0x442>
 800abec:	e6fa      	b.n	800a9e4 <_printf_float+0x258>
 800abee:	f04f 0800 	mov.w	r8, #0
 800abf2:	f104 0919 	add.w	r9, r4, #25
 800abf6:	e7f4      	b.n	800abe2 <_printf_float+0x456>

0800abf8 <_printf_common>:
 800abf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abfc:	4616      	mov	r6, r2
 800abfe:	4699      	mov	r9, r3
 800ac00:	688a      	ldr	r2, [r1, #8]
 800ac02:	690b      	ldr	r3, [r1, #16]
 800ac04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	bfb8      	it	lt
 800ac0c:	4613      	movlt	r3, r2
 800ac0e:	6033      	str	r3, [r6, #0]
 800ac10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac14:	4607      	mov	r7, r0
 800ac16:	460c      	mov	r4, r1
 800ac18:	b10a      	cbz	r2, 800ac1e <_printf_common+0x26>
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	6033      	str	r3, [r6, #0]
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	0699      	lsls	r1, r3, #26
 800ac22:	bf42      	ittt	mi
 800ac24:	6833      	ldrmi	r3, [r6, #0]
 800ac26:	3302      	addmi	r3, #2
 800ac28:	6033      	strmi	r3, [r6, #0]
 800ac2a:	6825      	ldr	r5, [r4, #0]
 800ac2c:	f015 0506 	ands.w	r5, r5, #6
 800ac30:	d106      	bne.n	800ac40 <_printf_common+0x48>
 800ac32:	f104 0a19 	add.w	sl, r4, #25
 800ac36:	68e3      	ldr	r3, [r4, #12]
 800ac38:	6832      	ldr	r2, [r6, #0]
 800ac3a:	1a9b      	subs	r3, r3, r2
 800ac3c:	42ab      	cmp	r3, r5
 800ac3e:	dc26      	bgt.n	800ac8e <_printf_common+0x96>
 800ac40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac44:	1e13      	subs	r3, r2, #0
 800ac46:	6822      	ldr	r2, [r4, #0]
 800ac48:	bf18      	it	ne
 800ac4a:	2301      	movne	r3, #1
 800ac4c:	0692      	lsls	r2, r2, #26
 800ac4e:	d42b      	bmi.n	800aca8 <_printf_common+0xb0>
 800ac50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac54:	4649      	mov	r1, r9
 800ac56:	4638      	mov	r0, r7
 800ac58:	47c0      	blx	r8
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d01e      	beq.n	800ac9c <_printf_common+0xa4>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	68e5      	ldr	r5, [r4, #12]
 800ac62:	6832      	ldr	r2, [r6, #0]
 800ac64:	f003 0306 	and.w	r3, r3, #6
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	bf08      	it	eq
 800ac6c:	1aad      	subeq	r5, r5, r2
 800ac6e:	68a3      	ldr	r3, [r4, #8]
 800ac70:	6922      	ldr	r2, [r4, #16]
 800ac72:	bf0c      	ite	eq
 800ac74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac78:	2500      	movne	r5, #0
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	bfc4      	itt	gt
 800ac7e:	1a9b      	subgt	r3, r3, r2
 800ac80:	18ed      	addgt	r5, r5, r3
 800ac82:	2600      	movs	r6, #0
 800ac84:	341a      	adds	r4, #26
 800ac86:	42b5      	cmp	r5, r6
 800ac88:	d11a      	bne.n	800acc0 <_printf_common+0xc8>
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	e008      	b.n	800aca0 <_printf_common+0xa8>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4652      	mov	r2, sl
 800ac92:	4649      	mov	r1, r9
 800ac94:	4638      	mov	r0, r7
 800ac96:	47c0      	blx	r8
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d103      	bne.n	800aca4 <_printf_common+0xac>
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca4:	3501      	adds	r5, #1
 800aca6:	e7c6      	b.n	800ac36 <_printf_common+0x3e>
 800aca8:	18e1      	adds	r1, r4, r3
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	2030      	movs	r0, #48	; 0x30
 800acae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acb2:	4422      	add	r2, r4
 800acb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acbc:	3302      	adds	r3, #2
 800acbe:	e7c7      	b.n	800ac50 <_printf_common+0x58>
 800acc0:	2301      	movs	r3, #1
 800acc2:	4622      	mov	r2, r4
 800acc4:	4649      	mov	r1, r9
 800acc6:	4638      	mov	r0, r7
 800acc8:	47c0      	blx	r8
 800acca:	3001      	adds	r0, #1
 800accc:	d0e6      	beq.n	800ac9c <_printf_common+0xa4>
 800acce:	3601      	adds	r6, #1
 800acd0:	e7d9      	b.n	800ac86 <_printf_common+0x8e>
	...

0800acd4 <_printf_i>:
 800acd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	7e0f      	ldrb	r7, [r1, #24]
 800acda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acdc:	2f78      	cmp	r7, #120	; 0x78
 800acde:	4691      	mov	r9, r2
 800ace0:	4680      	mov	r8, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	469a      	mov	sl, r3
 800ace6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acea:	d807      	bhi.n	800acfc <_printf_i+0x28>
 800acec:	2f62      	cmp	r7, #98	; 0x62
 800acee:	d80a      	bhi.n	800ad06 <_printf_i+0x32>
 800acf0:	2f00      	cmp	r7, #0
 800acf2:	f000 80d8 	beq.w	800aea6 <_printf_i+0x1d2>
 800acf6:	2f58      	cmp	r7, #88	; 0x58
 800acf8:	f000 80a3 	beq.w	800ae42 <_printf_i+0x16e>
 800acfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad04:	e03a      	b.n	800ad7c <_printf_i+0xa8>
 800ad06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad0a:	2b15      	cmp	r3, #21
 800ad0c:	d8f6      	bhi.n	800acfc <_printf_i+0x28>
 800ad0e:	a101      	add	r1, pc, #4	; (adr r1, 800ad14 <_printf_i+0x40>)
 800ad10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad14:	0800ad6d 	.word	0x0800ad6d
 800ad18:	0800ad81 	.word	0x0800ad81
 800ad1c:	0800acfd 	.word	0x0800acfd
 800ad20:	0800acfd 	.word	0x0800acfd
 800ad24:	0800acfd 	.word	0x0800acfd
 800ad28:	0800acfd 	.word	0x0800acfd
 800ad2c:	0800ad81 	.word	0x0800ad81
 800ad30:	0800acfd 	.word	0x0800acfd
 800ad34:	0800acfd 	.word	0x0800acfd
 800ad38:	0800acfd 	.word	0x0800acfd
 800ad3c:	0800acfd 	.word	0x0800acfd
 800ad40:	0800ae8d 	.word	0x0800ae8d
 800ad44:	0800adb1 	.word	0x0800adb1
 800ad48:	0800ae6f 	.word	0x0800ae6f
 800ad4c:	0800acfd 	.word	0x0800acfd
 800ad50:	0800acfd 	.word	0x0800acfd
 800ad54:	0800aeaf 	.word	0x0800aeaf
 800ad58:	0800acfd 	.word	0x0800acfd
 800ad5c:	0800adb1 	.word	0x0800adb1
 800ad60:	0800acfd 	.word	0x0800acfd
 800ad64:	0800acfd 	.word	0x0800acfd
 800ad68:	0800ae77 	.word	0x0800ae77
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	1d1a      	adds	r2, r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	602a      	str	r2, [r5, #0]
 800ad74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e0a3      	b.n	800aec8 <_printf_i+0x1f4>
 800ad80:	6820      	ldr	r0, [r4, #0]
 800ad82:	6829      	ldr	r1, [r5, #0]
 800ad84:	0606      	lsls	r6, r0, #24
 800ad86:	f101 0304 	add.w	r3, r1, #4
 800ad8a:	d50a      	bpl.n	800ada2 <_printf_i+0xce>
 800ad8c:	680e      	ldr	r6, [r1, #0]
 800ad8e:	602b      	str	r3, [r5, #0]
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	da03      	bge.n	800ad9c <_printf_i+0xc8>
 800ad94:	232d      	movs	r3, #45	; 0x2d
 800ad96:	4276      	negs	r6, r6
 800ad98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad9c:	485e      	ldr	r0, [pc, #376]	; (800af18 <_printf_i+0x244>)
 800ad9e:	230a      	movs	r3, #10
 800ada0:	e019      	b.n	800add6 <_printf_i+0x102>
 800ada2:	680e      	ldr	r6, [r1, #0]
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800adaa:	bf18      	it	ne
 800adac:	b236      	sxthne	r6, r6
 800adae:	e7ef      	b.n	800ad90 <_printf_i+0xbc>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	6820      	ldr	r0, [r4, #0]
 800adb4:	1d19      	adds	r1, r3, #4
 800adb6:	6029      	str	r1, [r5, #0]
 800adb8:	0601      	lsls	r1, r0, #24
 800adba:	d501      	bpl.n	800adc0 <_printf_i+0xec>
 800adbc:	681e      	ldr	r6, [r3, #0]
 800adbe:	e002      	b.n	800adc6 <_printf_i+0xf2>
 800adc0:	0646      	lsls	r6, r0, #25
 800adc2:	d5fb      	bpl.n	800adbc <_printf_i+0xe8>
 800adc4:	881e      	ldrh	r6, [r3, #0]
 800adc6:	4854      	ldr	r0, [pc, #336]	; (800af18 <_printf_i+0x244>)
 800adc8:	2f6f      	cmp	r7, #111	; 0x6f
 800adca:	bf0c      	ite	eq
 800adcc:	2308      	moveq	r3, #8
 800adce:	230a      	movne	r3, #10
 800add0:	2100      	movs	r1, #0
 800add2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800add6:	6865      	ldr	r5, [r4, #4]
 800add8:	60a5      	str	r5, [r4, #8]
 800adda:	2d00      	cmp	r5, #0
 800addc:	bfa2      	ittt	ge
 800adde:	6821      	ldrge	r1, [r4, #0]
 800ade0:	f021 0104 	bicge.w	r1, r1, #4
 800ade4:	6021      	strge	r1, [r4, #0]
 800ade6:	b90e      	cbnz	r6, 800adec <_printf_i+0x118>
 800ade8:	2d00      	cmp	r5, #0
 800adea:	d04d      	beq.n	800ae88 <_printf_i+0x1b4>
 800adec:	4615      	mov	r5, r2
 800adee:	fbb6 f1f3 	udiv	r1, r6, r3
 800adf2:	fb03 6711 	mls	r7, r3, r1, r6
 800adf6:	5dc7      	ldrb	r7, [r0, r7]
 800adf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adfc:	4637      	mov	r7, r6
 800adfe:	42bb      	cmp	r3, r7
 800ae00:	460e      	mov	r6, r1
 800ae02:	d9f4      	bls.n	800adee <_printf_i+0x11a>
 800ae04:	2b08      	cmp	r3, #8
 800ae06:	d10b      	bne.n	800ae20 <_printf_i+0x14c>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	07de      	lsls	r6, r3, #31
 800ae0c:	d508      	bpl.n	800ae20 <_printf_i+0x14c>
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	6861      	ldr	r1, [r4, #4]
 800ae12:	4299      	cmp	r1, r3
 800ae14:	bfde      	ittt	le
 800ae16:	2330      	movle	r3, #48	; 0x30
 800ae18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae20:	1b52      	subs	r2, r2, r5
 800ae22:	6122      	str	r2, [r4, #16]
 800ae24:	f8cd a000 	str.w	sl, [sp]
 800ae28:	464b      	mov	r3, r9
 800ae2a:	aa03      	add	r2, sp, #12
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	4640      	mov	r0, r8
 800ae30:	f7ff fee2 	bl	800abf8 <_printf_common>
 800ae34:	3001      	adds	r0, #1
 800ae36:	d14c      	bne.n	800aed2 <_printf_i+0x1fe>
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3c:	b004      	add	sp, #16
 800ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae42:	4835      	ldr	r0, [pc, #212]	; (800af18 <_printf_i+0x244>)
 800ae44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae48:	6829      	ldr	r1, [r5, #0]
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae50:	6029      	str	r1, [r5, #0]
 800ae52:	061d      	lsls	r5, r3, #24
 800ae54:	d514      	bpl.n	800ae80 <_printf_i+0x1ac>
 800ae56:	07df      	lsls	r7, r3, #31
 800ae58:	bf44      	itt	mi
 800ae5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae5e:	6023      	strmi	r3, [r4, #0]
 800ae60:	b91e      	cbnz	r6, 800ae6a <_printf_i+0x196>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	f023 0320 	bic.w	r3, r3, #32
 800ae68:	6023      	str	r3, [r4, #0]
 800ae6a:	2310      	movs	r3, #16
 800ae6c:	e7b0      	b.n	800add0 <_printf_i+0xfc>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	f043 0320 	orr.w	r3, r3, #32
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	2378      	movs	r3, #120	; 0x78
 800ae78:	4828      	ldr	r0, [pc, #160]	; (800af1c <_printf_i+0x248>)
 800ae7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae7e:	e7e3      	b.n	800ae48 <_printf_i+0x174>
 800ae80:	0659      	lsls	r1, r3, #25
 800ae82:	bf48      	it	mi
 800ae84:	b2b6      	uxthmi	r6, r6
 800ae86:	e7e6      	b.n	800ae56 <_printf_i+0x182>
 800ae88:	4615      	mov	r5, r2
 800ae8a:	e7bb      	b.n	800ae04 <_printf_i+0x130>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	6826      	ldr	r6, [r4, #0]
 800ae90:	6961      	ldr	r1, [r4, #20]
 800ae92:	1d18      	adds	r0, r3, #4
 800ae94:	6028      	str	r0, [r5, #0]
 800ae96:	0635      	lsls	r5, r6, #24
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	d501      	bpl.n	800aea0 <_printf_i+0x1cc>
 800ae9c:	6019      	str	r1, [r3, #0]
 800ae9e:	e002      	b.n	800aea6 <_printf_i+0x1d2>
 800aea0:	0670      	lsls	r0, r6, #25
 800aea2:	d5fb      	bpl.n	800ae9c <_printf_i+0x1c8>
 800aea4:	8019      	strh	r1, [r3, #0]
 800aea6:	2300      	movs	r3, #0
 800aea8:	6123      	str	r3, [r4, #16]
 800aeaa:	4615      	mov	r5, r2
 800aeac:	e7ba      	b.n	800ae24 <_printf_i+0x150>
 800aeae:	682b      	ldr	r3, [r5, #0]
 800aeb0:	1d1a      	adds	r2, r3, #4
 800aeb2:	602a      	str	r2, [r5, #0]
 800aeb4:	681d      	ldr	r5, [r3, #0]
 800aeb6:	6862      	ldr	r2, [r4, #4]
 800aeb8:	2100      	movs	r1, #0
 800aeba:	4628      	mov	r0, r5
 800aebc:	f7f5 f990 	bl	80001e0 <memchr>
 800aec0:	b108      	cbz	r0, 800aec6 <_printf_i+0x1f2>
 800aec2:	1b40      	subs	r0, r0, r5
 800aec4:	6060      	str	r0, [r4, #4]
 800aec6:	6863      	ldr	r3, [r4, #4]
 800aec8:	6123      	str	r3, [r4, #16]
 800aeca:	2300      	movs	r3, #0
 800aecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aed0:	e7a8      	b.n	800ae24 <_printf_i+0x150>
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	462a      	mov	r2, r5
 800aed6:	4649      	mov	r1, r9
 800aed8:	4640      	mov	r0, r8
 800aeda:	47d0      	blx	sl
 800aedc:	3001      	adds	r0, #1
 800aede:	d0ab      	beq.n	800ae38 <_printf_i+0x164>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	079b      	lsls	r3, r3, #30
 800aee4:	d413      	bmi.n	800af0e <_printf_i+0x23a>
 800aee6:	68e0      	ldr	r0, [r4, #12]
 800aee8:	9b03      	ldr	r3, [sp, #12]
 800aeea:	4298      	cmp	r0, r3
 800aeec:	bfb8      	it	lt
 800aeee:	4618      	movlt	r0, r3
 800aef0:	e7a4      	b.n	800ae3c <_printf_i+0x168>
 800aef2:	2301      	movs	r3, #1
 800aef4:	4632      	mov	r2, r6
 800aef6:	4649      	mov	r1, r9
 800aef8:	4640      	mov	r0, r8
 800aefa:	47d0      	blx	sl
 800aefc:	3001      	adds	r0, #1
 800aefe:	d09b      	beq.n	800ae38 <_printf_i+0x164>
 800af00:	3501      	adds	r5, #1
 800af02:	68e3      	ldr	r3, [r4, #12]
 800af04:	9903      	ldr	r1, [sp, #12]
 800af06:	1a5b      	subs	r3, r3, r1
 800af08:	42ab      	cmp	r3, r5
 800af0a:	dcf2      	bgt.n	800aef2 <_printf_i+0x21e>
 800af0c:	e7eb      	b.n	800aee6 <_printf_i+0x212>
 800af0e:	2500      	movs	r5, #0
 800af10:	f104 0619 	add.w	r6, r4, #25
 800af14:	e7f5      	b.n	800af02 <_printf_i+0x22e>
 800af16:	bf00      	nop
 800af18:	0800da96 	.word	0x0800da96
 800af1c:	0800daa7 	.word	0x0800daa7

0800af20 <setbuf>:
 800af20:	2900      	cmp	r1, #0
 800af22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af26:	bf0c      	ite	eq
 800af28:	2202      	moveq	r2, #2
 800af2a:	2200      	movne	r2, #0
 800af2c:	f000 b800 	b.w	800af30 <setvbuf>

0800af30 <setvbuf>:
 800af30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af34:	461d      	mov	r5, r3
 800af36:	4b5d      	ldr	r3, [pc, #372]	; (800b0ac <setvbuf+0x17c>)
 800af38:	681f      	ldr	r7, [r3, #0]
 800af3a:	4604      	mov	r4, r0
 800af3c:	460e      	mov	r6, r1
 800af3e:	4690      	mov	r8, r2
 800af40:	b127      	cbz	r7, 800af4c <setvbuf+0x1c>
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	b913      	cbnz	r3, 800af4c <setvbuf+0x1c>
 800af46:	4638      	mov	r0, r7
 800af48:	f001 f86e 	bl	800c028 <__sinit>
 800af4c:	4b58      	ldr	r3, [pc, #352]	; (800b0b0 <setvbuf+0x180>)
 800af4e:	429c      	cmp	r4, r3
 800af50:	d167      	bne.n	800b022 <setvbuf+0xf2>
 800af52:	687c      	ldr	r4, [r7, #4]
 800af54:	f1b8 0f02 	cmp.w	r8, #2
 800af58:	d006      	beq.n	800af68 <setvbuf+0x38>
 800af5a:	f1b8 0f01 	cmp.w	r8, #1
 800af5e:	f200 809f 	bhi.w	800b0a0 <setvbuf+0x170>
 800af62:	2d00      	cmp	r5, #0
 800af64:	f2c0 809c 	blt.w	800b0a0 <setvbuf+0x170>
 800af68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af6a:	07db      	lsls	r3, r3, #31
 800af6c:	d405      	bmi.n	800af7a <setvbuf+0x4a>
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	0598      	lsls	r0, r3, #22
 800af72:	d402      	bmi.n	800af7a <setvbuf+0x4a>
 800af74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af76:	f001 f8fa 	bl	800c16e <__retarget_lock_acquire_recursive>
 800af7a:	4621      	mov	r1, r4
 800af7c:	4638      	mov	r0, r7
 800af7e:	f000 ffbf 	bl	800bf00 <_fflush_r>
 800af82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af84:	b141      	cbz	r1, 800af98 <setvbuf+0x68>
 800af86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af8a:	4299      	cmp	r1, r3
 800af8c:	d002      	beq.n	800af94 <setvbuf+0x64>
 800af8e:	4638      	mov	r0, r7
 800af90:	f001 fd04 	bl	800c99c <_free_r>
 800af94:	2300      	movs	r3, #0
 800af96:	6363      	str	r3, [r4, #52]	; 0x34
 800af98:	2300      	movs	r3, #0
 800af9a:	61a3      	str	r3, [r4, #24]
 800af9c:	6063      	str	r3, [r4, #4]
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	0619      	lsls	r1, r3, #24
 800afa2:	d503      	bpl.n	800afac <setvbuf+0x7c>
 800afa4:	6921      	ldr	r1, [r4, #16]
 800afa6:	4638      	mov	r0, r7
 800afa8:	f001 fcf8 	bl	800c99c <_free_r>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800afb2:	f023 0303 	bic.w	r3, r3, #3
 800afb6:	f1b8 0f02 	cmp.w	r8, #2
 800afba:	81a3      	strh	r3, [r4, #12]
 800afbc:	d06c      	beq.n	800b098 <setvbuf+0x168>
 800afbe:	ab01      	add	r3, sp, #4
 800afc0:	466a      	mov	r2, sp
 800afc2:	4621      	mov	r1, r4
 800afc4:	4638      	mov	r0, r7
 800afc6:	f001 f8d4 	bl	800c172 <__swhatbuf_r>
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	4318      	orrs	r0, r3
 800afce:	81a0      	strh	r0, [r4, #12]
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	d130      	bne.n	800b036 <setvbuf+0x106>
 800afd4:	9d00      	ldr	r5, [sp, #0]
 800afd6:	4628      	mov	r0, r5
 800afd8:	f001 f930 	bl	800c23c <malloc>
 800afdc:	4606      	mov	r6, r0
 800afde:	2800      	cmp	r0, #0
 800afe0:	d155      	bne.n	800b08e <setvbuf+0x15e>
 800afe2:	f8dd 9000 	ldr.w	r9, [sp]
 800afe6:	45a9      	cmp	r9, r5
 800afe8:	d14a      	bne.n	800b080 <setvbuf+0x150>
 800afea:	f04f 35ff 	mov.w	r5, #4294967295
 800afee:	2200      	movs	r2, #0
 800aff0:	60a2      	str	r2, [r4, #8]
 800aff2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800aff6:	6022      	str	r2, [r4, #0]
 800aff8:	6122      	str	r2, [r4, #16]
 800affa:	2201      	movs	r2, #1
 800affc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b000:	6162      	str	r2, [r4, #20]
 800b002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b004:	f043 0302 	orr.w	r3, r3, #2
 800b008:	07d2      	lsls	r2, r2, #31
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	d405      	bmi.n	800b01a <setvbuf+0xea>
 800b00e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b012:	d102      	bne.n	800b01a <setvbuf+0xea>
 800b014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b016:	f001 f8ab 	bl	800c170 <__retarget_lock_release_recursive>
 800b01a:	4628      	mov	r0, r5
 800b01c:	b003      	add	sp, #12
 800b01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b022:	4b24      	ldr	r3, [pc, #144]	; (800b0b4 <setvbuf+0x184>)
 800b024:	429c      	cmp	r4, r3
 800b026:	d101      	bne.n	800b02c <setvbuf+0xfc>
 800b028:	68bc      	ldr	r4, [r7, #8]
 800b02a:	e793      	b.n	800af54 <setvbuf+0x24>
 800b02c:	4b22      	ldr	r3, [pc, #136]	; (800b0b8 <setvbuf+0x188>)
 800b02e:	429c      	cmp	r4, r3
 800b030:	bf08      	it	eq
 800b032:	68fc      	ldreq	r4, [r7, #12]
 800b034:	e78e      	b.n	800af54 <setvbuf+0x24>
 800b036:	2e00      	cmp	r6, #0
 800b038:	d0cd      	beq.n	800afd6 <setvbuf+0xa6>
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	b913      	cbnz	r3, 800b044 <setvbuf+0x114>
 800b03e:	4638      	mov	r0, r7
 800b040:	f000 fff2 	bl	800c028 <__sinit>
 800b044:	f1b8 0f01 	cmp.w	r8, #1
 800b048:	bf08      	it	eq
 800b04a:	89a3      	ldrheq	r3, [r4, #12]
 800b04c:	6026      	str	r6, [r4, #0]
 800b04e:	bf04      	itt	eq
 800b050:	f043 0301 	orreq.w	r3, r3, #1
 800b054:	81a3      	strheq	r3, [r4, #12]
 800b056:	89a2      	ldrh	r2, [r4, #12]
 800b058:	f012 0308 	ands.w	r3, r2, #8
 800b05c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b060:	d01c      	beq.n	800b09c <setvbuf+0x16c>
 800b062:	07d3      	lsls	r3, r2, #31
 800b064:	bf41      	itttt	mi
 800b066:	2300      	movmi	r3, #0
 800b068:	426d      	negmi	r5, r5
 800b06a:	60a3      	strmi	r3, [r4, #8]
 800b06c:	61a5      	strmi	r5, [r4, #24]
 800b06e:	bf58      	it	pl
 800b070:	60a5      	strpl	r5, [r4, #8]
 800b072:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b074:	f015 0501 	ands.w	r5, r5, #1
 800b078:	d115      	bne.n	800b0a6 <setvbuf+0x176>
 800b07a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b07e:	e7c8      	b.n	800b012 <setvbuf+0xe2>
 800b080:	4648      	mov	r0, r9
 800b082:	f001 f8db 	bl	800c23c <malloc>
 800b086:	4606      	mov	r6, r0
 800b088:	2800      	cmp	r0, #0
 800b08a:	d0ae      	beq.n	800afea <setvbuf+0xba>
 800b08c:	464d      	mov	r5, r9
 800b08e:	89a3      	ldrh	r3, [r4, #12]
 800b090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	e7d0      	b.n	800b03a <setvbuf+0x10a>
 800b098:	2500      	movs	r5, #0
 800b09a:	e7a8      	b.n	800afee <setvbuf+0xbe>
 800b09c:	60a3      	str	r3, [r4, #8]
 800b09e:	e7e8      	b.n	800b072 <setvbuf+0x142>
 800b0a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b0a4:	e7b9      	b.n	800b01a <setvbuf+0xea>
 800b0a6:	2500      	movs	r5, #0
 800b0a8:	e7b7      	b.n	800b01a <setvbuf+0xea>
 800b0aa:	bf00      	nop
 800b0ac:	20000010 	.word	0x20000010
 800b0b0:	0800db68 	.word	0x0800db68
 800b0b4:	0800db88 	.word	0x0800db88
 800b0b8:	0800db48 	.word	0x0800db48

0800b0bc <_vsiprintf_r>:
 800b0bc:	b500      	push	{lr}
 800b0be:	b09b      	sub	sp, #108	; 0x6c
 800b0c0:	9100      	str	r1, [sp, #0]
 800b0c2:	9104      	str	r1, [sp, #16]
 800b0c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0c8:	9105      	str	r1, [sp, #20]
 800b0ca:	9102      	str	r1, [sp, #8]
 800b0cc:	4905      	ldr	r1, [pc, #20]	; (800b0e4 <_vsiprintf_r+0x28>)
 800b0ce:	9103      	str	r1, [sp, #12]
 800b0d0:	4669      	mov	r1, sp
 800b0d2:	f001 fd9f 	bl	800cc14 <_svfiprintf_r>
 800b0d6:	9b00      	ldr	r3, [sp, #0]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	b01b      	add	sp, #108	; 0x6c
 800b0de:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0e2:	bf00      	nop
 800b0e4:	ffff0208 	.word	0xffff0208

0800b0e8 <vsiprintf>:
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	4802      	ldr	r0, [pc, #8]	; (800b0f8 <vsiprintf+0x10>)
 800b0f0:	6800      	ldr	r0, [r0, #0]
 800b0f2:	f7ff bfe3 	b.w	800b0bc <_vsiprintf_r>
 800b0f6:	bf00      	nop
 800b0f8:	20000010 	.word	0x20000010

0800b0fc <quorem>:
 800b0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	6903      	ldr	r3, [r0, #16]
 800b102:	690c      	ldr	r4, [r1, #16]
 800b104:	42a3      	cmp	r3, r4
 800b106:	4607      	mov	r7, r0
 800b108:	f2c0 8081 	blt.w	800b20e <quorem+0x112>
 800b10c:	3c01      	subs	r4, #1
 800b10e:	f101 0814 	add.w	r8, r1, #20
 800b112:	f100 0514 	add.w	r5, r0, #20
 800b116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b124:	3301      	adds	r3, #1
 800b126:	429a      	cmp	r2, r3
 800b128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b12c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b130:	fbb2 f6f3 	udiv	r6, r2, r3
 800b134:	d331      	bcc.n	800b19a <quorem+0x9e>
 800b136:	f04f 0e00 	mov.w	lr, #0
 800b13a:	4640      	mov	r0, r8
 800b13c:	46ac      	mov	ip, r5
 800b13e:	46f2      	mov	sl, lr
 800b140:	f850 2b04 	ldr.w	r2, [r0], #4
 800b144:	b293      	uxth	r3, r2
 800b146:	fb06 e303 	mla	r3, r6, r3, lr
 800b14a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b14e:	b29b      	uxth	r3, r3
 800b150:	ebaa 0303 	sub.w	r3, sl, r3
 800b154:	f8dc a000 	ldr.w	sl, [ip]
 800b158:	0c12      	lsrs	r2, r2, #16
 800b15a:	fa13 f38a 	uxtah	r3, r3, sl
 800b15e:	fb06 e202 	mla	r2, r6, r2, lr
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	9b00      	ldr	r3, [sp, #0]
 800b166:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b16a:	b292      	uxth	r2, r2
 800b16c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b174:	f8bd 3000 	ldrh.w	r3, [sp]
 800b178:	4581      	cmp	r9, r0
 800b17a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b17e:	f84c 3b04 	str.w	r3, [ip], #4
 800b182:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b186:	d2db      	bcs.n	800b140 <quorem+0x44>
 800b188:	f855 300b 	ldr.w	r3, [r5, fp]
 800b18c:	b92b      	cbnz	r3, 800b19a <quorem+0x9e>
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	3b04      	subs	r3, #4
 800b192:	429d      	cmp	r5, r3
 800b194:	461a      	mov	r2, r3
 800b196:	d32e      	bcc.n	800b1f6 <quorem+0xfa>
 800b198:	613c      	str	r4, [r7, #16]
 800b19a:	4638      	mov	r0, r7
 800b19c:	f001 fae6 	bl	800c76c <__mcmp>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	db24      	blt.n	800b1ee <quorem+0xf2>
 800b1a4:	3601      	adds	r6, #1
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f04f 0c00 	mov.w	ip, #0
 800b1ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1b0:	f8d0 e000 	ldr.w	lr, [r0]
 800b1b4:	b293      	uxth	r3, r2
 800b1b6:	ebac 0303 	sub.w	r3, ip, r3
 800b1ba:	0c12      	lsrs	r2, r2, #16
 800b1bc:	fa13 f38e 	uxtah	r3, r3, lr
 800b1c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b1c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1ce:	45c1      	cmp	r9, r8
 800b1d0:	f840 3b04 	str.w	r3, [r0], #4
 800b1d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1d8:	d2e8      	bcs.n	800b1ac <quorem+0xb0>
 800b1da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1e2:	b922      	cbnz	r2, 800b1ee <quorem+0xf2>
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	429d      	cmp	r5, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	d30a      	bcc.n	800b202 <quorem+0x106>
 800b1ec:	613c      	str	r4, [r7, #16]
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	b003      	add	sp, #12
 800b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	6812      	ldr	r2, [r2, #0]
 800b1f8:	3b04      	subs	r3, #4
 800b1fa:	2a00      	cmp	r2, #0
 800b1fc:	d1cc      	bne.n	800b198 <quorem+0x9c>
 800b1fe:	3c01      	subs	r4, #1
 800b200:	e7c7      	b.n	800b192 <quorem+0x96>
 800b202:	6812      	ldr	r2, [r2, #0]
 800b204:	3b04      	subs	r3, #4
 800b206:	2a00      	cmp	r2, #0
 800b208:	d1f0      	bne.n	800b1ec <quorem+0xf0>
 800b20a:	3c01      	subs	r4, #1
 800b20c:	e7eb      	b.n	800b1e6 <quorem+0xea>
 800b20e:	2000      	movs	r0, #0
 800b210:	e7ee      	b.n	800b1f0 <quorem+0xf4>
 800b212:	0000      	movs	r0, r0
 800b214:	0000      	movs	r0, r0
	...

0800b218 <_dtoa_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	ed2d 8b04 	vpush	{d8-d9}
 800b220:	ec57 6b10 	vmov	r6, r7, d0
 800b224:	b093      	sub	sp, #76	; 0x4c
 800b226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b22c:	9106      	str	r1, [sp, #24]
 800b22e:	ee10 aa10 	vmov	sl, s0
 800b232:	4604      	mov	r4, r0
 800b234:	9209      	str	r2, [sp, #36]	; 0x24
 800b236:	930c      	str	r3, [sp, #48]	; 0x30
 800b238:	46bb      	mov	fp, r7
 800b23a:	b975      	cbnz	r5, 800b25a <_dtoa_r+0x42>
 800b23c:	2010      	movs	r0, #16
 800b23e:	f000 fffd 	bl	800c23c <malloc>
 800b242:	4602      	mov	r2, r0
 800b244:	6260      	str	r0, [r4, #36]	; 0x24
 800b246:	b920      	cbnz	r0, 800b252 <_dtoa_r+0x3a>
 800b248:	4ba7      	ldr	r3, [pc, #668]	; (800b4e8 <_dtoa_r+0x2d0>)
 800b24a:	21ea      	movs	r1, #234	; 0xea
 800b24c:	48a7      	ldr	r0, [pc, #668]	; (800b4ec <_dtoa_r+0x2d4>)
 800b24e:	f001 fe47 	bl	800cee0 <__assert_func>
 800b252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b256:	6005      	str	r5, [r0, #0]
 800b258:	60c5      	str	r5, [r0, #12]
 800b25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b25c:	6819      	ldr	r1, [r3, #0]
 800b25e:	b151      	cbz	r1, 800b276 <_dtoa_r+0x5e>
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	604a      	str	r2, [r1, #4]
 800b264:	2301      	movs	r3, #1
 800b266:	4093      	lsls	r3, r2
 800b268:	608b      	str	r3, [r1, #8]
 800b26a:	4620      	mov	r0, r4
 800b26c:	f001 f83c 	bl	800c2e8 <_Bfree>
 800b270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	1e3b      	subs	r3, r7, #0
 800b278:	bfaa      	itet	ge
 800b27a:	2300      	movge	r3, #0
 800b27c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b280:	f8c8 3000 	strge.w	r3, [r8]
 800b284:	4b9a      	ldr	r3, [pc, #616]	; (800b4f0 <_dtoa_r+0x2d8>)
 800b286:	bfbc      	itt	lt
 800b288:	2201      	movlt	r2, #1
 800b28a:	f8c8 2000 	strlt.w	r2, [r8]
 800b28e:	ea33 030b 	bics.w	r3, r3, fp
 800b292:	d11b      	bne.n	800b2cc <_dtoa_r+0xb4>
 800b294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b296:	f242 730f 	movw	r3, #9999	; 0x270f
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2a0:	4333      	orrs	r3, r6
 800b2a2:	f000 8592 	beq.w	800bdca <_dtoa_r+0xbb2>
 800b2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2a8:	b963      	cbnz	r3, 800b2c4 <_dtoa_r+0xac>
 800b2aa:	4b92      	ldr	r3, [pc, #584]	; (800b4f4 <_dtoa_r+0x2dc>)
 800b2ac:	e022      	b.n	800b2f4 <_dtoa_r+0xdc>
 800b2ae:	4b92      	ldr	r3, [pc, #584]	; (800b4f8 <_dtoa_r+0x2e0>)
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	9801      	ldr	r0, [sp, #4]
 800b2ba:	b013      	add	sp, #76	; 0x4c
 800b2bc:	ecbd 8b04 	vpop	{d8-d9}
 800b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c4:	4b8b      	ldr	r3, [pc, #556]	; (800b4f4 <_dtoa_r+0x2dc>)
 800b2c6:	9301      	str	r3, [sp, #4]
 800b2c8:	3303      	adds	r3, #3
 800b2ca:	e7f3      	b.n	800b2b4 <_dtoa_r+0x9c>
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	f7f5 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2d8:	ec4b ab19 	vmov	d9, sl, fp
 800b2dc:	4680      	mov	r8, r0
 800b2de:	b158      	cbz	r0, 800b2f8 <_dtoa_r+0xe0>
 800b2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	6013      	str	r3, [r2, #0]
 800b2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 856b 	beq.w	800bdc4 <_dtoa_r+0xbac>
 800b2ee:	4883      	ldr	r0, [pc, #524]	; (800b4fc <_dtoa_r+0x2e4>)
 800b2f0:	6018      	str	r0, [r3, #0]
 800b2f2:	1e43      	subs	r3, r0, #1
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	e7df      	b.n	800b2b8 <_dtoa_r+0xa0>
 800b2f8:	ec4b ab10 	vmov	d0, sl, fp
 800b2fc:	aa10      	add	r2, sp, #64	; 0x40
 800b2fe:	a911      	add	r1, sp, #68	; 0x44
 800b300:	4620      	mov	r0, r4
 800b302:	f001 fad9 	bl	800c8b8 <__d2b>
 800b306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b30a:	ee08 0a10 	vmov	s16, r0
 800b30e:	2d00      	cmp	r5, #0
 800b310:	f000 8084 	beq.w	800b41c <_dtoa_r+0x204>
 800b314:	ee19 3a90 	vmov	r3, s19
 800b318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b31c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b320:	4656      	mov	r6, sl
 800b322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b32a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b32e:	4b74      	ldr	r3, [pc, #464]	; (800b500 <_dtoa_r+0x2e8>)
 800b330:	2200      	movs	r2, #0
 800b332:	4630      	mov	r0, r6
 800b334:	4639      	mov	r1, r7
 800b336:	f7f4 ffa7 	bl	8000288 <__aeabi_dsub>
 800b33a:	a365      	add	r3, pc, #404	; (adr r3, 800b4d0 <_dtoa_r+0x2b8>)
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	f7f5 f95a 	bl	80005f8 <__aeabi_dmul>
 800b344:	a364      	add	r3, pc, #400	; (adr r3, 800b4d8 <_dtoa_r+0x2c0>)
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f7f4 ff9f 	bl	800028c <__adddf3>
 800b34e:	4606      	mov	r6, r0
 800b350:	4628      	mov	r0, r5
 800b352:	460f      	mov	r7, r1
 800b354:	f7f5 f8e6 	bl	8000524 <__aeabi_i2d>
 800b358:	a361      	add	r3, pc, #388	; (adr r3, 800b4e0 <_dtoa_r+0x2c8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 f94b 	bl	80005f8 <__aeabi_dmul>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4630      	mov	r0, r6
 800b368:	4639      	mov	r1, r7
 800b36a:	f7f4 ff8f 	bl	800028c <__adddf3>
 800b36e:	4606      	mov	r6, r0
 800b370:	460f      	mov	r7, r1
 800b372:	f7f5 fbf1 	bl	8000b58 <__aeabi_d2iz>
 800b376:	2200      	movs	r2, #0
 800b378:	9000      	str	r0, [sp, #0]
 800b37a:	2300      	movs	r3, #0
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f5 fbac 	bl	8000adc <__aeabi_dcmplt>
 800b384:	b150      	cbz	r0, 800b39c <_dtoa_r+0x184>
 800b386:	9800      	ldr	r0, [sp, #0]
 800b388:	f7f5 f8cc 	bl	8000524 <__aeabi_i2d>
 800b38c:	4632      	mov	r2, r6
 800b38e:	463b      	mov	r3, r7
 800b390:	f7f5 fb9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b394:	b910      	cbnz	r0, 800b39c <_dtoa_r+0x184>
 800b396:	9b00      	ldr	r3, [sp, #0]
 800b398:	3b01      	subs	r3, #1
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b16      	cmp	r3, #22
 800b3a0:	d85a      	bhi.n	800b458 <_dtoa_r+0x240>
 800b3a2:	9a00      	ldr	r2, [sp, #0]
 800b3a4:	4b57      	ldr	r3, [pc, #348]	; (800b504 <_dtoa_r+0x2ec>)
 800b3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	ec51 0b19 	vmov	r0, r1, d9
 800b3b2:	f7f5 fb93 	bl	8000adc <__aeabi_dcmplt>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d050      	beq.n	800b45c <_dtoa_r+0x244>
 800b3ba:	9b00      	ldr	r3, [sp, #0]
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3c6:	1b5d      	subs	r5, r3, r5
 800b3c8:	1e6b      	subs	r3, r5, #1
 800b3ca:	9305      	str	r3, [sp, #20]
 800b3cc:	bf45      	ittet	mi
 800b3ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800b3d2:	9304      	strmi	r3, [sp, #16]
 800b3d4:	2300      	movpl	r3, #0
 800b3d6:	2300      	movmi	r3, #0
 800b3d8:	bf4c      	ite	mi
 800b3da:	9305      	strmi	r3, [sp, #20]
 800b3dc:	9304      	strpl	r3, [sp, #16]
 800b3de:	9b00      	ldr	r3, [sp, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	db3d      	blt.n	800b460 <_dtoa_r+0x248>
 800b3e4:	9b05      	ldr	r3, [sp, #20]
 800b3e6:	9a00      	ldr	r2, [sp, #0]
 800b3e8:	920a      	str	r2, [sp, #40]	; 0x28
 800b3ea:	4413      	add	r3, r2
 800b3ec:	9305      	str	r3, [sp, #20]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9307      	str	r3, [sp, #28]
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	f200 8089 	bhi.w	800b50c <_dtoa_r+0x2f4>
 800b3fa:	2b05      	cmp	r3, #5
 800b3fc:	bfc4      	itt	gt
 800b3fe:	3b04      	subgt	r3, #4
 800b400:	9306      	strgt	r3, [sp, #24]
 800b402:	9b06      	ldr	r3, [sp, #24]
 800b404:	f1a3 0302 	sub.w	r3, r3, #2
 800b408:	bfcc      	ite	gt
 800b40a:	2500      	movgt	r5, #0
 800b40c:	2501      	movle	r5, #1
 800b40e:	2b03      	cmp	r3, #3
 800b410:	f200 8087 	bhi.w	800b522 <_dtoa_r+0x30a>
 800b414:	e8df f003 	tbb	[pc, r3]
 800b418:	59383a2d 	.word	0x59383a2d
 800b41c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b420:	441d      	add	r5, r3
 800b422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b426:	2b20      	cmp	r3, #32
 800b428:	bfc1      	itttt	gt
 800b42a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b42e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b432:	fa0b f303 	lslgt.w	r3, fp, r3
 800b436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b43a:	bfda      	itte	le
 800b43c:	f1c3 0320 	rsble	r3, r3, #32
 800b440:	fa06 f003 	lslle.w	r0, r6, r3
 800b444:	4318      	orrgt	r0, r3
 800b446:	f7f5 f85d 	bl	8000504 <__aeabi_ui2d>
 800b44a:	2301      	movs	r3, #1
 800b44c:	4606      	mov	r6, r0
 800b44e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b452:	3d01      	subs	r5, #1
 800b454:	930e      	str	r3, [sp, #56]	; 0x38
 800b456:	e76a      	b.n	800b32e <_dtoa_r+0x116>
 800b458:	2301      	movs	r3, #1
 800b45a:	e7b2      	b.n	800b3c2 <_dtoa_r+0x1aa>
 800b45c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b45e:	e7b1      	b.n	800b3c4 <_dtoa_r+0x1ac>
 800b460:	9b04      	ldr	r3, [sp, #16]
 800b462:	9a00      	ldr	r2, [sp, #0]
 800b464:	1a9b      	subs	r3, r3, r2
 800b466:	9304      	str	r3, [sp, #16]
 800b468:	4253      	negs	r3, r2
 800b46a:	9307      	str	r3, [sp, #28]
 800b46c:	2300      	movs	r3, #0
 800b46e:	930a      	str	r3, [sp, #40]	; 0x28
 800b470:	e7bf      	b.n	800b3f2 <_dtoa_r+0x1da>
 800b472:	2300      	movs	r3, #0
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dc55      	bgt.n	800b528 <_dtoa_r+0x310>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b482:	461a      	mov	r2, r3
 800b484:	9209      	str	r2, [sp, #36]	; 0x24
 800b486:	e00c      	b.n	800b4a2 <_dtoa_r+0x28a>
 800b488:	2301      	movs	r3, #1
 800b48a:	e7f3      	b.n	800b474 <_dtoa_r+0x25c>
 800b48c:	2300      	movs	r3, #0
 800b48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b490:	9308      	str	r3, [sp, #32]
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	4413      	add	r3, r2
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	3301      	adds	r3, #1
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	9303      	str	r3, [sp, #12]
 800b49e:	bfb8      	it	lt
 800b4a0:	2301      	movlt	r3, #1
 800b4a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	6042      	str	r2, [r0, #4]
 800b4a8:	2204      	movs	r2, #4
 800b4aa:	f102 0614 	add.w	r6, r2, #20
 800b4ae:	429e      	cmp	r6, r3
 800b4b0:	6841      	ldr	r1, [r0, #4]
 800b4b2:	d93d      	bls.n	800b530 <_dtoa_r+0x318>
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fed7 	bl	800c268 <_Balloc>
 800b4ba:	9001      	str	r0, [sp, #4]
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d13b      	bne.n	800b538 <_dtoa_r+0x320>
 800b4c0:	4b11      	ldr	r3, [pc, #68]	; (800b508 <_dtoa_r+0x2f0>)
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b4c8:	e6c0      	b.n	800b24c <_dtoa_r+0x34>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7df      	b.n	800b48e <_dtoa_r+0x276>
 800b4ce:	bf00      	nop
 800b4d0:	636f4361 	.word	0x636f4361
 800b4d4:	3fd287a7 	.word	0x3fd287a7
 800b4d8:	8b60c8b3 	.word	0x8b60c8b3
 800b4dc:	3fc68a28 	.word	0x3fc68a28
 800b4e0:	509f79fb 	.word	0x509f79fb
 800b4e4:	3fd34413 	.word	0x3fd34413
 800b4e8:	0800dac5 	.word	0x0800dac5
 800b4ec:	0800dadc 	.word	0x0800dadc
 800b4f0:	7ff00000 	.word	0x7ff00000
 800b4f4:	0800dac1 	.word	0x0800dac1
 800b4f8:	0800dab8 	.word	0x0800dab8
 800b4fc:	0800da95 	.word	0x0800da95
 800b500:	3ff80000 	.word	0x3ff80000
 800b504:	0800dc30 	.word	0x0800dc30
 800b508:	0800db37 	.word	0x0800db37
 800b50c:	2501      	movs	r5, #1
 800b50e:	2300      	movs	r3, #0
 800b510:	9306      	str	r3, [sp, #24]
 800b512:	9508      	str	r5, [sp, #32]
 800b514:	f04f 33ff 	mov.w	r3, #4294967295
 800b518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b51c:	2200      	movs	r2, #0
 800b51e:	2312      	movs	r3, #18
 800b520:	e7b0      	b.n	800b484 <_dtoa_r+0x26c>
 800b522:	2301      	movs	r3, #1
 800b524:	9308      	str	r3, [sp, #32]
 800b526:	e7f5      	b.n	800b514 <_dtoa_r+0x2fc>
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b52e:	e7b8      	b.n	800b4a2 <_dtoa_r+0x28a>
 800b530:	3101      	adds	r1, #1
 800b532:	6041      	str	r1, [r0, #4]
 800b534:	0052      	lsls	r2, r2, #1
 800b536:	e7b8      	b.n	800b4aa <_dtoa_r+0x292>
 800b538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b53a:	9a01      	ldr	r2, [sp, #4]
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	2b0e      	cmp	r3, #14
 800b542:	f200 809d 	bhi.w	800b680 <_dtoa_r+0x468>
 800b546:	2d00      	cmp	r5, #0
 800b548:	f000 809a 	beq.w	800b680 <_dtoa_r+0x468>
 800b54c:	9b00      	ldr	r3, [sp, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dd32      	ble.n	800b5b8 <_dtoa_r+0x3a0>
 800b552:	4ab7      	ldr	r2, [pc, #732]	; (800b830 <_dtoa_r+0x618>)
 800b554:	f003 030f 	and.w	r3, r3, #15
 800b558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b560:	9b00      	ldr	r3, [sp, #0]
 800b562:	05d8      	lsls	r0, r3, #23
 800b564:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b568:	d516      	bpl.n	800b598 <_dtoa_r+0x380>
 800b56a:	4bb2      	ldr	r3, [pc, #712]	; (800b834 <_dtoa_r+0x61c>)
 800b56c:	ec51 0b19 	vmov	r0, r1, d9
 800b570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b574:	f7f5 f96a 	bl	800084c <__aeabi_ddiv>
 800b578:	f007 070f 	and.w	r7, r7, #15
 800b57c:	4682      	mov	sl, r0
 800b57e:	468b      	mov	fp, r1
 800b580:	2503      	movs	r5, #3
 800b582:	4eac      	ldr	r6, [pc, #688]	; (800b834 <_dtoa_r+0x61c>)
 800b584:	b957      	cbnz	r7, 800b59c <_dtoa_r+0x384>
 800b586:	4642      	mov	r2, r8
 800b588:	464b      	mov	r3, r9
 800b58a:	4650      	mov	r0, sl
 800b58c:	4659      	mov	r1, fp
 800b58e:	f7f5 f95d 	bl	800084c <__aeabi_ddiv>
 800b592:	4682      	mov	sl, r0
 800b594:	468b      	mov	fp, r1
 800b596:	e028      	b.n	800b5ea <_dtoa_r+0x3d2>
 800b598:	2502      	movs	r5, #2
 800b59a:	e7f2      	b.n	800b582 <_dtoa_r+0x36a>
 800b59c:	07f9      	lsls	r1, r7, #31
 800b59e:	d508      	bpl.n	800b5b2 <_dtoa_r+0x39a>
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5a8:	f7f5 f826 	bl	80005f8 <__aeabi_dmul>
 800b5ac:	3501      	adds	r5, #1
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	4689      	mov	r9, r1
 800b5b2:	107f      	asrs	r7, r7, #1
 800b5b4:	3608      	adds	r6, #8
 800b5b6:	e7e5      	b.n	800b584 <_dtoa_r+0x36c>
 800b5b8:	f000 809b 	beq.w	800b6f2 <_dtoa_r+0x4da>
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	4f9d      	ldr	r7, [pc, #628]	; (800b834 <_dtoa_r+0x61c>)
 800b5c0:	425e      	negs	r6, r3
 800b5c2:	4b9b      	ldr	r3, [pc, #620]	; (800b830 <_dtoa_r+0x618>)
 800b5c4:	f006 020f 	and.w	r2, r6, #15
 800b5c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	ec51 0b19 	vmov	r0, r1, d9
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	1136      	asrs	r6, r6, #4
 800b5da:	4682      	mov	sl, r0
 800b5dc:	468b      	mov	fp, r1
 800b5de:	2300      	movs	r3, #0
 800b5e0:	2502      	movs	r5, #2
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d17a      	bne.n	800b6dc <_dtoa_r+0x4c4>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1d3      	bne.n	800b592 <_dtoa_r+0x37a>
 800b5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8082 	beq.w	800b6f6 <_dtoa_r+0x4de>
 800b5f2:	4b91      	ldr	r3, [pc, #580]	; (800b838 <_dtoa_r+0x620>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4650      	mov	r0, sl
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	f7f5 fa6f 	bl	8000adc <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d079      	beq.n	800b6f6 <_dtoa_r+0x4de>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d076      	beq.n	800b6f6 <_dtoa_r+0x4de>
 800b608:	9b02      	ldr	r3, [sp, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dd36      	ble.n	800b67c <_dtoa_r+0x464>
 800b60e:	9b00      	ldr	r3, [sp, #0]
 800b610:	4650      	mov	r0, sl
 800b612:	4659      	mov	r1, fp
 800b614:	1e5f      	subs	r7, r3, #1
 800b616:	2200      	movs	r2, #0
 800b618:	4b88      	ldr	r3, [pc, #544]	; (800b83c <_dtoa_r+0x624>)
 800b61a:	f7f4 ffed 	bl	80005f8 <__aeabi_dmul>
 800b61e:	9e02      	ldr	r6, [sp, #8]
 800b620:	4682      	mov	sl, r0
 800b622:	468b      	mov	fp, r1
 800b624:	3501      	adds	r5, #1
 800b626:	4628      	mov	r0, r5
 800b628:	f7f4 ff7c 	bl	8000524 <__aeabi_i2d>
 800b62c:	4652      	mov	r2, sl
 800b62e:	465b      	mov	r3, fp
 800b630:	f7f4 ffe2 	bl	80005f8 <__aeabi_dmul>
 800b634:	4b82      	ldr	r3, [pc, #520]	; (800b840 <_dtoa_r+0x628>)
 800b636:	2200      	movs	r2, #0
 800b638:	f7f4 fe28 	bl	800028c <__adddf3>
 800b63c:	46d0      	mov	r8, sl
 800b63e:	46d9      	mov	r9, fp
 800b640:	4682      	mov	sl, r0
 800b642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b646:	2e00      	cmp	r6, #0
 800b648:	d158      	bne.n	800b6fc <_dtoa_r+0x4e4>
 800b64a:	4b7e      	ldr	r3, [pc, #504]	; (800b844 <_dtoa_r+0x62c>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	4640      	mov	r0, r8
 800b650:	4649      	mov	r1, r9
 800b652:	f7f4 fe19 	bl	8000288 <__aeabi_dsub>
 800b656:	4652      	mov	r2, sl
 800b658:	465b      	mov	r3, fp
 800b65a:	4680      	mov	r8, r0
 800b65c:	4689      	mov	r9, r1
 800b65e:	f7f5 fa5b 	bl	8000b18 <__aeabi_dcmpgt>
 800b662:	2800      	cmp	r0, #0
 800b664:	f040 8295 	bne.w	800bb92 <_dtoa_r+0x97a>
 800b668:	4652      	mov	r2, sl
 800b66a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b66e:	4640      	mov	r0, r8
 800b670:	4649      	mov	r1, r9
 800b672:	f7f5 fa33 	bl	8000adc <__aeabi_dcmplt>
 800b676:	2800      	cmp	r0, #0
 800b678:	f040 8289 	bne.w	800bb8e <_dtoa_r+0x976>
 800b67c:	ec5b ab19 	vmov	sl, fp, d9
 800b680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b682:	2b00      	cmp	r3, #0
 800b684:	f2c0 8148 	blt.w	800b918 <_dtoa_r+0x700>
 800b688:	9a00      	ldr	r2, [sp, #0]
 800b68a:	2a0e      	cmp	r2, #14
 800b68c:	f300 8144 	bgt.w	800b918 <_dtoa_r+0x700>
 800b690:	4b67      	ldr	r3, [pc, #412]	; (800b830 <_dtoa_r+0x618>)
 800b692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f280 80d5 	bge.w	800b84c <_dtoa_r+0x634>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f300 80d1 	bgt.w	800b84c <_dtoa_r+0x634>
 800b6aa:	f040 826f 	bne.w	800bb8c <_dtoa_r+0x974>
 800b6ae:	4b65      	ldr	r3, [pc, #404]	; (800b844 <_dtoa_r+0x62c>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	f7f4 ff9f 	bl	80005f8 <__aeabi_dmul>
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	465b      	mov	r3, fp
 800b6be:	f7f5 fa21 	bl	8000b04 <__aeabi_dcmpge>
 800b6c2:	9e03      	ldr	r6, [sp, #12]
 800b6c4:	4637      	mov	r7, r6
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f040 8245 	bne.w	800bb56 <_dtoa_r+0x93e>
 800b6cc:	9d01      	ldr	r5, [sp, #4]
 800b6ce:	2331      	movs	r3, #49	; 0x31
 800b6d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	e240      	b.n	800bb5e <_dtoa_r+0x946>
 800b6dc:	07f2      	lsls	r2, r6, #31
 800b6de:	d505      	bpl.n	800b6ec <_dtoa_r+0x4d4>
 800b6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e4:	f7f4 ff88 	bl	80005f8 <__aeabi_dmul>
 800b6e8:	3501      	adds	r5, #1
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	1076      	asrs	r6, r6, #1
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	e777      	b.n	800b5e2 <_dtoa_r+0x3ca>
 800b6f2:	2502      	movs	r5, #2
 800b6f4:	e779      	b.n	800b5ea <_dtoa_r+0x3d2>
 800b6f6:	9f00      	ldr	r7, [sp, #0]
 800b6f8:	9e03      	ldr	r6, [sp, #12]
 800b6fa:	e794      	b.n	800b626 <_dtoa_r+0x40e>
 800b6fc:	9901      	ldr	r1, [sp, #4]
 800b6fe:	4b4c      	ldr	r3, [pc, #304]	; (800b830 <_dtoa_r+0x618>)
 800b700:	4431      	add	r1, r6
 800b702:	910d      	str	r1, [sp, #52]	; 0x34
 800b704:	9908      	ldr	r1, [sp, #32]
 800b706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b70a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b70e:	2900      	cmp	r1, #0
 800b710:	d043      	beq.n	800b79a <_dtoa_r+0x582>
 800b712:	494d      	ldr	r1, [pc, #308]	; (800b848 <_dtoa_r+0x630>)
 800b714:	2000      	movs	r0, #0
 800b716:	f7f5 f899 	bl	800084c <__aeabi_ddiv>
 800b71a:	4652      	mov	r2, sl
 800b71c:	465b      	mov	r3, fp
 800b71e:	f7f4 fdb3 	bl	8000288 <__aeabi_dsub>
 800b722:	9d01      	ldr	r5, [sp, #4]
 800b724:	4682      	mov	sl, r0
 800b726:	468b      	mov	fp, r1
 800b728:	4649      	mov	r1, r9
 800b72a:	4640      	mov	r0, r8
 800b72c:	f7f5 fa14 	bl	8000b58 <__aeabi_d2iz>
 800b730:	4606      	mov	r6, r0
 800b732:	f7f4 fef7 	bl	8000524 <__aeabi_i2d>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	4640      	mov	r0, r8
 800b73c:	4649      	mov	r1, r9
 800b73e:	f7f4 fda3 	bl	8000288 <__aeabi_dsub>
 800b742:	3630      	adds	r6, #48	; 0x30
 800b744:	f805 6b01 	strb.w	r6, [r5], #1
 800b748:	4652      	mov	r2, sl
 800b74a:	465b      	mov	r3, fp
 800b74c:	4680      	mov	r8, r0
 800b74e:	4689      	mov	r9, r1
 800b750:	f7f5 f9c4 	bl	8000adc <__aeabi_dcmplt>
 800b754:	2800      	cmp	r0, #0
 800b756:	d163      	bne.n	800b820 <_dtoa_r+0x608>
 800b758:	4642      	mov	r2, r8
 800b75a:	464b      	mov	r3, r9
 800b75c:	4936      	ldr	r1, [pc, #216]	; (800b838 <_dtoa_r+0x620>)
 800b75e:	2000      	movs	r0, #0
 800b760:	f7f4 fd92 	bl	8000288 <__aeabi_dsub>
 800b764:	4652      	mov	r2, sl
 800b766:	465b      	mov	r3, fp
 800b768:	f7f5 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	f040 80b5 	bne.w	800b8dc <_dtoa_r+0x6c4>
 800b772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b774:	429d      	cmp	r5, r3
 800b776:	d081      	beq.n	800b67c <_dtoa_r+0x464>
 800b778:	4b30      	ldr	r3, [pc, #192]	; (800b83c <_dtoa_r+0x624>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	4650      	mov	r0, sl
 800b77e:	4659      	mov	r1, fp
 800b780:	f7f4 ff3a 	bl	80005f8 <__aeabi_dmul>
 800b784:	4b2d      	ldr	r3, [pc, #180]	; (800b83c <_dtoa_r+0x624>)
 800b786:	4682      	mov	sl, r0
 800b788:	468b      	mov	fp, r1
 800b78a:	4640      	mov	r0, r8
 800b78c:	4649      	mov	r1, r9
 800b78e:	2200      	movs	r2, #0
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	4680      	mov	r8, r0
 800b796:	4689      	mov	r9, r1
 800b798:	e7c6      	b.n	800b728 <_dtoa_r+0x510>
 800b79a:	4650      	mov	r0, sl
 800b79c:	4659      	mov	r1, fp
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7a4:	9d01      	ldr	r5, [sp, #4]
 800b7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	468b      	mov	fp, r1
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	f7f5 f9d2 	bl	8000b58 <__aeabi_d2iz>
 800b7b4:	4606      	mov	r6, r0
 800b7b6:	f7f4 feb5 	bl	8000524 <__aeabi_i2d>
 800b7ba:	3630      	adds	r6, #48	; 0x30
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	f7f4 fd60 	bl	8000288 <__aeabi_dsub>
 800b7c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ce:	429d      	cmp	r5, r3
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	4689      	mov	r9, r1
 800b7d4:	f04f 0200 	mov.w	r2, #0
 800b7d8:	d124      	bne.n	800b824 <_dtoa_r+0x60c>
 800b7da:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <_dtoa_r+0x630>)
 800b7dc:	4650      	mov	r0, sl
 800b7de:	4659      	mov	r1, fp
 800b7e0:	f7f4 fd54 	bl	800028c <__adddf3>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f5 f994 	bl	8000b18 <__aeabi_dcmpgt>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d173      	bne.n	800b8dc <_dtoa_r+0x6c4>
 800b7f4:	4652      	mov	r2, sl
 800b7f6:	465b      	mov	r3, fp
 800b7f8:	4913      	ldr	r1, [pc, #76]	; (800b848 <_dtoa_r+0x630>)
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	f7f4 fd44 	bl	8000288 <__aeabi_dsub>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4640      	mov	r0, r8
 800b806:	4649      	mov	r1, r9
 800b808:	f7f5 f968 	bl	8000adc <__aeabi_dcmplt>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f43f af35 	beq.w	800b67c <_dtoa_r+0x464>
 800b812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b814:	1e6b      	subs	r3, r5, #1
 800b816:	930f      	str	r3, [sp, #60]	; 0x3c
 800b818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b81c:	2b30      	cmp	r3, #48	; 0x30
 800b81e:	d0f8      	beq.n	800b812 <_dtoa_r+0x5fa>
 800b820:	9700      	str	r7, [sp, #0]
 800b822:	e049      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <_dtoa_r+0x624>)
 800b826:	f7f4 fee7 	bl	80005f8 <__aeabi_dmul>
 800b82a:	4680      	mov	r8, r0
 800b82c:	4689      	mov	r9, r1
 800b82e:	e7bd      	b.n	800b7ac <_dtoa_r+0x594>
 800b830:	0800dc30 	.word	0x0800dc30
 800b834:	0800dc08 	.word	0x0800dc08
 800b838:	3ff00000 	.word	0x3ff00000
 800b83c:	40240000 	.word	0x40240000
 800b840:	401c0000 	.word	0x401c0000
 800b844:	40140000 	.word	0x40140000
 800b848:	3fe00000 	.word	0x3fe00000
 800b84c:	9d01      	ldr	r5, [sp, #4]
 800b84e:	4656      	mov	r6, sl
 800b850:	465f      	mov	r7, fp
 800b852:	4642      	mov	r2, r8
 800b854:	464b      	mov	r3, r9
 800b856:	4630      	mov	r0, r6
 800b858:	4639      	mov	r1, r7
 800b85a:	f7f4 fff7 	bl	800084c <__aeabi_ddiv>
 800b85e:	f7f5 f97b 	bl	8000b58 <__aeabi_d2iz>
 800b862:	4682      	mov	sl, r0
 800b864:	f7f4 fe5e 	bl	8000524 <__aeabi_i2d>
 800b868:	4642      	mov	r2, r8
 800b86a:	464b      	mov	r3, r9
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4630      	mov	r0, r6
 800b876:	4639      	mov	r1, r7
 800b878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b87c:	f7f4 fd04 	bl	8000288 <__aeabi_dsub>
 800b880:	f805 6b01 	strb.w	r6, [r5], #1
 800b884:	9e01      	ldr	r6, [sp, #4]
 800b886:	9f03      	ldr	r7, [sp, #12]
 800b888:	1bae      	subs	r6, r5, r6
 800b88a:	42b7      	cmp	r7, r6
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	d135      	bne.n	800b8fe <_dtoa_r+0x6e6>
 800b892:	f7f4 fcfb 	bl	800028c <__adddf3>
 800b896:	4642      	mov	r2, r8
 800b898:	464b      	mov	r3, r9
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	f7f5 f93b 	bl	8000b18 <__aeabi_dcmpgt>
 800b8a2:	b9d0      	cbnz	r0, 800b8da <_dtoa_r+0x6c2>
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f5 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8b0:	b110      	cbz	r0, 800b8b8 <_dtoa_r+0x6a0>
 800b8b2:	f01a 0f01 	tst.w	sl, #1
 800b8b6:	d110      	bne.n	800b8da <_dtoa_r+0x6c2>
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	ee18 1a10 	vmov	r1, s16
 800b8be:	f000 fd13 	bl	800c2e8 <_Bfree>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9800      	ldr	r0, [sp, #0]
 800b8c6:	702b      	strb	r3, [r5, #0]
 800b8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ca:	3001      	adds	r0, #1
 800b8cc:	6018      	str	r0, [r3, #0]
 800b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f43f acf1 	beq.w	800b2b8 <_dtoa_r+0xa0>
 800b8d6:	601d      	str	r5, [r3, #0]
 800b8d8:	e4ee      	b.n	800b2b8 <_dtoa_r+0xa0>
 800b8da:	9f00      	ldr	r7, [sp, #0]
 800b8dc:	462b      	mov	r3, r5
 800b8de:	461d      	mov	r5, r3
 800b8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8e4:	2a39      	cmp	r2, #57	; 0x39
 800b8e6:	d106      	bne.n	800b8f6 <_dtoa_r+0x6de>
 800b8e8:	9a01      	ldr	r2, [sp, #4]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d1f7      	bne.n	800b8de <_dtoa_r+0x6c6>
 800b8ee:	9901      	ldr	r1, [sp, #4]
 800b8f0:	2230      	movs	r2, #48	; 0x30
 800b8f2:	3701      	adds	r7, #1
 800b8f4:	700a      	strb	r2, [r1, #0]
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	3201      	adds	r2, #1
 800b8fa:	701a      	strb	r2, [r3, #0]
 800b8fc:	e790      	b.n	800b820 <_dtoa_r+0x608>
 800b8fe:	4ba6      	ldr	r3, [pc, #664]	; (800bb98 <_dtoa_r+0x980>)
 800b900:	2200      	movs	r2, #0
 800b902:	f7f4 fe79 	bl	80005f8 <__aeabi_dmul>
 800b906:	2200      	movs	r2, #0
 800b908:	2300      	movs	r3, #0
 800b90a:	4606      	mov	r6, r0
 800b90c:	460f      	mov	r7, r1
 800b90e:	f7f5 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 800b912:	2800      	cmp	r0, #0
 800b914:	d09d      	beq.n	800b852 <_dtoa_r+0x63a>
 800b916:	e7cf      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800b918:	9a08      	ldr	r2, [sp, #32]
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	f000 80d7 	beq.w	800bace <_dtoa_r+0x8b6>
 800b920:	9a06      	ldr	r2, [sp, #24]
 800b922:	2a01      	cmp	r2, #1
 800b924:	f300 80ba 	bgt.w	800ba9c <_dtoa_r+0x884>
 800b928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	f000 80b2 	beq.w	800ba94 <_dtoa_r+0x87c>
 800b930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b934:	9e07      	ldr	r6, [sp, #28]
 800b936:	9d04      	ldr	r5, [sp, #16]
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	441a      	add	r2, r3
 800b93c:	9204      	str	r2, [sp, #16]
 800b93e:	9a05      	ldr	r2, [sp, #20]
 800b940:	2101      	movs	r1, #1
 800b942:	441a      	add	r2, r3
 800b944:	4620      	mov	r0, r4
 800b946:	9205      	str	r2, [sp, #20]
 800b948:	f000 fd86 	bl	800c458 <__i2b>
 800b94c:	4607      	mov	r7, r0
 800b94e:	2d00      	cmp	r5, #0
 800b950:	dd0c      	ble.n	800b96c <_dtoa_r+0x754>
 800b952:	9b05      	ldr	r3, [sp, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd09      	ble.n	800b96c <_dtoa_r+0x754>
 800b958:	42ab      	cmp	r3, r5
 800b95a:	9a04      	ldr	r2, [sp, #16]
 800b95c:	bfa8      	it	ge
 800b95e:	462b      	movge	r3, r5
 800b960:	1ad2      	subs	r2, r2, r3
 800b962:	9204      	str	r2, [sp, #16]
 800b964:	9a05      	ldr	r2, [sp, #20]
 800b966:	1aed      	subs	r5, r5, r3
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	b31b      	cbz	r3, 800b9b8 <_dtoa_r+0x7a0>
 800b970:	9b08      	ldr	r3, [sp, #32]
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 80af 	beq.w	800bad6 <_dtoa_r+0x8be>
 800b978:	2e00      	cmp	r6, #0
 800b97a:	dd13      	ble.n	800b9a4 <_dtoa_r+0x78c>
 800b97c:	4639      	mov	r1, r7
 800b97e:	4632      	mov	r2, r6
 800b980:	4620      	mov	r0, r4
 800b982:	f000 fe29 	bl	800c5d8 <__pow5mult>
 800b986:	ee18 2a10 	vmov	r2, s16
 800b98a:	4601      	mov	r1, r0
 800b98c:	4607      	mov	r7, r0
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 fd78 	bl	800c484 <__multiply>
 800b994:	ee18 1a10 	vmov	r1, s16
 800b998:	4680      	mov	r8, r0
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 fca4 	bl	800c2e8 <_Bfree>
 800b9a0:	ee08 8a10 	vmov	s16, r8
 800b9a4:	9b07      	ldr	r3, [sp, #28]
 800b9a6:	1b9a      	subs	r2, r3, r6
 800b9a8:	d006      	beq.n	800b9b8 <_dtoa_r+0x7a0>
 800b9aa:	ee18 1a10 	vmov	r1, s16
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fe12 	bl	800c5d8 <__pow5mult>
 800b9b4:	ee08 0a10 	vmov	s16, r0
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fd4c 	bl	800c458 <__i2b>
 800b9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	f340 8088 	ble.w	800bada <_dtoa_r+0x8c2>
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4601      	mov	r1, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fe02 	bl	800c5d8 <__pow5mult>
 800b9d4:	9b06      	ldr	r3, [sp, #24]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	4606      	mov	r6, r0
 800b9da:	f340 8081 	ble.w	800bae0 <_dtoa_r+0x8c8>
 800b9de:	f04f 0800 	mov.w	r8, #0
 800b9e2:	6933      	ldr	r3, [r6, #16]
 800b9e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b9e8:	6918      	ldr	r0, [r3, #16]
 800b9ea:	f000 fce5 	bl	800c3b8 <__hi0bits>
 800b9ee:	f1c0 0020 	rsb	r0, r0, #32
 800b9f2:	9b05      	ldr	r3, [sp, #20]
 800b9f4:	4418      	add	r0, r3
 800b9f6:	f010 001f 	ands.w	r0, r0, #31
 800b9fa:	f000 8092 	beq.w	800bb22 <_dtoa_r+0x90a>
 800b9fe:	f1c0 0320 	rsb	r3, r0, #32
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	f340 808a 	ble.w	800bb1c <_dtoa_r+0x904>
 800ba08:	f1c0 001c 	rsb	r0, r0, #28
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	4403      	add	r3, r0
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	9b05      	ldr	r3, [sp, #20]
 800ba14:	4403      	add	r3, r0
 800ba16:	4405      	add	r5, r0
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	9b04      	ldr	r3, [sp, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd07      	ble.n	800ba30 <_dtoa_r+0x818>
 800ba20:	ee18 1a10 	vmov	r1, s16
 800ba24:	461a      	mov	r2, r3
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 fe30 	bl	800c68c <__lshift>
 800ba2c:	ee08 0a10 	vmov	s16, r0
 800ba30:	9b05      	ldr	r3, [sp, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	dd05      	ble.n	800ba42 <_dtoa_r+0x82a>
 800ba36:	4631      	mov	r1, r6
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 fe26 	bl	800c68c <__lshift>
 800ba40:	4606      	mov	r6, r0
 800ba42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d06e      	beq.n	800bb26 <_dtoa_r+0x90e>
 800ba48:	ee18 0a10 	vmov	r0, s16
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	f000 fe8d 	bl	800c76c <__mcmp>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	da67      	bge.n	800bb26 <_dtoa_r+0x90e>
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	ee18 1a10 	vmov	r1, s16
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	220a      	movs	r2, #10
 800ba62:	2300      	movs	r3, #0
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fc61 	bl	800c32c <__multadd>
 800ba6a:	9b08      	ldr	r3, [sp, #32]
 800ba6c:	ee08 0a10 	vmov	s16, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 81b1 	beq.w	800bdd8 <_dtoa_r+0xbc0>
 800ba76:	2300      	movs	r3, #0
 800ba78:	4639      	mov	r1, r7
 800ba7a:	220a      	movs	r2, #10
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fc55 	bl	800c32c <__multadd>
 800ba82:	9b02      	ldr	r3, [sp, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	4607      	mov	r7, r0
 800ba88:	f300 808e 	bgt.w	800bba8 <_dtoa_r+0x990>
 800ba8c:	9b06      	ldr	r3, [sp, #24]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	dc51      	bgt.n	800bb36 <_dtoa_r+0x91e>
 800ba92:	e089      	b.n	800bba8 <_dtoa_r+0x990>
 800ba94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba9a:	e74b      	b.n	800b934 <_dtoa_r+0x71c>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	1e5e      	subs	r6, r3, #1
 800baa0:	9b07      	ldr	r3, [sp, #28]
 800baa2:	42b3      	cmp	r3, r6
 800baa4:	bfbf      	itttt	lt
 800baa6:	9b07      	ldrlt	r3, [sp, #28]
 800baa8:	9607      	strlt	r6, [sp, #28]
 800baaa:	1af2      	sublt	r2, r6, r3
 800baac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800baae:	bfb6      	itet	lt
 800bab0:	189b      	addlt	r3, r3, r2
 800bab2:	1b9e      	subge	r6, r3, r6
 800bab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	bfb8      	it	lt
 800baba:	2600      	movlt	r6, #0
 800babc:	2b00      	cmp	r3, #0
 800babe:	bfb7      	itett	lt
 800bac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bac8:	1a9d      	sublt	r5, r3, r2
 800baca:	2300      	movlt	r3, #0
 800bacc:	e734      	b.n	800b938 <_dtoa_r+0x720>
 800bace:	9e07      	ldr	r6, [sp, #28]
 800bad0:	9d04      	ldr	r5, [sp, #16]
 800bad2:	9f08      	ldr	r7, [sp, #32]
 800bad4:	e73b      	b.n	800b94e <_dtoa_r+0x736>
 800bad6:	9a07      	ldr	r2, [sp, #28]
 800bad8:	e767      	b.n	800b9aa <_dtoa_r+0x792>
 800bada:	9b06      	ldr	r3, [sp, #24]
 800badc:	2b01      	cmp	r3, #1
 800bade:	dc18      	bgt.n	800bb12 <_dtoa_r+0x8fa>
 800bae0:	f1ba 0f00 	cmp.w	sl, #0
 800bae4:	d115      	bne.n	800bb12 <_dtoa_r+0x8fa>
 800bae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baea:	b993      	cbnz	r3, 800bb12 <_dtoa_r+0x8fa>
 800baec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800baf0:	0d1b      	lsrs	r3, r3, #20
 800baf2:	051b      	lsls	r3, r3, #20
 800baf4:	b183      	cbz	r3, 800bb18 <_dtoa_r+0x900>
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	3301      	adds	r3, #1
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	9b05      	ldr	r3, [sp, #20]
 800bafe:	3301      	adds	r3, #1
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	f04f 0801 	mov.w	r8, #1
 800bb06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f47f af6a 	bne.w	800b9e2 <_dtoa_r+0x7ca>
 800bb0e:	2001      	movs	r0, #1
 800bb10:	e76f      	b.n	800b9f2 <_dtoa_r+0x7da>
 800bb12:	f04f 0800 	mov.w	r8, #0
 800bb16:	e7f6      	b.n	800bb06 <_dtoa_r+0x8ee>
 800bb18:	4698      	mov	r8, r3
 800bb1a:	e7f4      	b.n	800bb06 <_dtoa_r+0x8ee>
 800bb1c:	f43f af7d 	beq.w	800ba1a <_dtoa_r+0x802>
 800bb20:	4618      	mov	r0, r3
 800bb22:	301c      	adds	r0, #28
 800bb24:	e772      	b.n	800ba0c <_dtoa_r+0x7f4>
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dc37      	bgt.n	800bb9c <_dtoa_r+0x984>
 800bb2c:	9b06      	ldr	r3, [sp, #24]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dd34      	ble.n	800bb9c <_dtoa_r+0x984>
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	9302      	str	r3, [sp, #8]
 800bb36:	9b02      	ldr	r3, [sp, #8]
 800bb38:	b96b      	cbnz	r3, 800bb56 <_dtoa_r+0x93e>
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 fbf4 	bl	800c32c <__multadd>
 800bb44:	4601      	mov	r1, r0
 800bb46:	4606      	mov	r6, r0
 800bb48:	ee18 0a10 	vmov	r0, s16
 800bb4c:	f000 fe0e 	bl	800c76c <__mcmp>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	f73f adbb 	bgt.w	800b6cc <_dtoa_r+0x4b4>
 800bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb58:	9d01      	ldr	r5, [sp, #4]
 800bb5a:	43db      	mvns	r3, r3
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	f04f 0800 	mov.w	r8, #0
 800bb62:	4631      	mov	r1, r6
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fbbf 	bl	800c2e8 <_Bfree>
 800bb6a:	2f00      	cmp	r7, #0
 800bb6c:	f43f aea4 	beq.w	800b8b8 <_dtoa_r+0x6a0>
 800bb70:	f1b8 0f00 	cmp.w	r8, #0
 800bb74:	d005      	beq.n	800bb82 <_dtoa_r+0x96a>
 800bb76:	45b8      	cmp	r8, r7
 800bb78:	d003      	beq.n	800bb82 <_dtoa_r+0x96a>
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f000 fbb3 	bl	800c2e8 <_Bfree>
 800bb82:	4639      	mov	r1, r7
 800bb84:	4620      	mov	r0, r4
 800bb86:	f000 fbaf 	bl	800c2e8 <_Bfree>
 800bb8a:	e695      	b.n	800b8b8 <_dtoa_r+0x6a0>
 800bb8c:	2600      	movs	r6, #0
 800bb8e:	4637      	mov	r7, r6
 800bb90:	e7e1      	b.n	800bb56 <_dtoa_r+0x93e>
 800bb92:	9700      	str	r7, [sp, #0]
 800bb94:	4637      	mov	r7, r6
 800bb96:	e599      	b.n	800b6cc <_dtoa_r+0x4b4>
 800bb98:	40240000 	.word	0x40240000
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f000 80ca 	beq.w	800bd38 <_dtoa_r+0xb20>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	9302      	str	r3, [sp, #8]
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	dd05      	ble.n	800bbb8 <_dtoa_r+0x9a0>
 800bbac:	4639      	mov	r1, r7
 800bbae:	462a      	mov	r2, r5
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fd6b 	bl	800c68c <__lshift>
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	f1b8 0f00 	cmp.w	r8, #0
 800bbbc:	d05b      	beq.n	800bc76 <_dtoa_r+0xa5e>
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 fb51 	bl	800c268 <_Balloc>
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	b928      	cbnz	r0, 800bbd6 <_dtoa_r+0x9be>
 800bbca:	4b87      	ldr	r3, [pc, #540]	; (800bde8 <_dtoa_r+0xbd0>)
 800bbcc:	4602      	mov	r2, r0
 800bbce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bbd2:	f7ff bb3b 	b.w	800b24c <_dtoa_r+0x34>
 800bbd6:	693a      	ldr	r2, [r7, #16]
 800bbd8:	3202      	adds	r2, #2
 800bbda:	0092      	lsls	r2, r2, #2
 800bbdc:	f107 010c 	add.w	r1, r7, #12
 800bbe0:	300c      	adds	r0, #12
 800bbe2:	f000 fb33 	bl	800c24c <memcpy>
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fd4e 	bl	800c68c <__lshift>
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	f103 0901 	add.w	r9, r3, #1
 800bbf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	f00a 0301 	and.w	r3, sl, #1
 800bc02:	46b8      	mov	r8, r7
 800bc04:	9304      	str	r3, [sp, #16]
 800bc06:	4607      	mov	r7, r0
 800bc08:	4631      	mov	r1, r6
 800bc0a:	ee18 0a10 	vmov	r0, s16
 800bc0e:	f7ff fa75 	bl	800b0fc <quorem>
 800bc12:	4641      	mov	r1, r8
 800bc14:	9002      	str	r0, [sp, #8]
 800bc16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc1a:	ee18 0a10 	vmov	r0, s16
 800bc1e:	f000 fda5 	bl	800c76c <__mcmp>
 800bc22:	463a      	mov	r2, r7
 800bc24:	9003      	str	r0, [sp, #12]
 800bc26:	4631      	mov	r1, r6
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 fdbb 	bl	800c7a4 <__mdiff>
 800bc2e:	68c2      	ldr	r2, [r0, #12]
 800bc30:	f109 3bff 	add.w	fp, r9, #4294967295
 800bc34:	4605      	mov	r5, r0
 800bc36:	bb02      	cbnz	r2, 800bc7a <_dtoa_r+0xa62>
 800bc38:	4601      	mov	r1, r0
 800bc3a:	ee18 0a10 	vmov	r0, s16
 800bc3e:	f000 fd95 	bl	800c76c <__mcmp>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4629      	mov	r1, r5
 800bc46:	4620      	mov	r0, r4
 800bc48:	9207      	str	r2, [sp, #28]
 800bc4a:	f000 fb4d 	bl	800c2e8 <_Bfree>
 800bc4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc52:	ea43 0102 	orr.w	r1, r3, r2
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	430b      	orrs	r3, r1
 800bc5a:	464d      	mov	r5, r9
 800bc5c:	d10f      	bne.n	800bc7e <_dtoa_r+0xa66>
 800bc5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc62:	d02a      	beq.n	800bcba <_dtoa_r+0xaa2>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dd02      	ble.n	800bc70 <_dtoa_r+0xa58>
 800bc6a:	9b02      	ldr	r3, [sp, #8]
 800bc6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc70:	f88b a000 	strb.w	sl, [fp]
 800bc74:	e775      	b.n	800bb62 <_dtoa_r+0x94a>
 800bc76:	4638      	mov	r0, r7
 800bc78:	e7ba      	b.n	800bbf0 <_dtoa_r+0x9d8>
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	e7e2      	b.n	800bc44 <_dtoa_r+0xa2c>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	db04      	blt.n	800bc8e <_dtoa_r+0xa76>
 800bc84:	9906      	ldr	r1, [sp, #24]
 800bc86:	430b      	orrs	r3, r1
 800bc88:	9904      	ldr	r1, [sp, #16]
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	d122      	bne.n	800bcd4 <_dtoa_r+0xabc>
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	ddee      	ble.n	800bc70 <_dtoa_r+0xa58>
 800bc92:	ee18 1a10 	vmov	r1, s16
 800bc96:	2201      	movs	r2, #1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 fcf7 	bl	800c68c <__lshift>
 800bc9e:	4631      	mov	r1, r6
 800bca0:	ee08 0a10 	vmov	s16, r0
 800bca4:	f000 fd62 	bl	800c76c <__mcmp>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	dc03      	bgt.n	800bcb4 <_dtoa_r+0xa9c>
 800bcac:	d1e0      	bne.n	800bc70 <_dtoa_r+0xa58>
 800bcae:	f01a 0f01 	tst.w	sl, #1
 800bcb2:	d0dd      	beq.n	800bc70 <_dtoa_r+0xa58>
 800bcb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcb8:	d1d7      	bne.n	800bc6a <_dtoa_r+0xa52>
 800bcba:	2339      	movs	r3, #57	; 0x39
 800bcbc:	f88b 3000 	strb.w	r3, [fp]
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	461d      	mov	r5, r3
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcca:	2a39      	cmp	r2, #57	; 0x39
 800bccc:	d071      	beq.n	800bdb2 <_dtoa_r+0xb9a>
 800bcce:	3201      	adds	r2, #1
 800bcd0:	701a      	strb	r2, [r3, #0]
 800bcd2:	e746      	b.n	800bb62 <_dtoa_r+0x94a>
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	dd07      	ble.n	800bce8 <_dtoa_r+0xad0>
 800bcd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcdc:	d0ed      	beq.n	800bcba <_dtoa_r+0xaa2>
 800bcde:	f10a 0301 	add.w	r3, sl, #1
 800bce2:	f88b 3000 	strb.w	r3, [fp]
 800bce6:	e73c      	b.n	800bb62 <_dtoa_r+0x94a>
 800bce8:	9b05      	ldr	r3, [sp, #20]
 800bcea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bcee:	4599      	cmp	r9, r3
 800bcf0:	d047      	beq.n	800bd82 <_dtoa_r+0xb6a>
 800bcf2:	ee18 1a10 	vmov	r1, s16
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 fb16 	bl	800c32c <__multadd>
 800bd00:	45b8      	cmp	r8, r7
 800bd02:	ee08 0a10 	vmov	s16, r0
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	f04f 020a 	mov.w	r2, #10
 800bd0e:	4641      	mov	r1, r8
 800bd10:	4620      	mov	r0, r4
 800bd12:	d106      	bne.n	800bd22 <_dtoa_r+0xb0a>
 800bd14:	f000 fb0a 	bl	800c32c <__multadd>
 800bd18:	4680      	mov	r8, r0
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	f109 0901 	add.w	r9, r9, #1
 800bd20:	e772      	b.n	800bc08 <_dtoa_r+0x9f0>
 800bd22:	f000 fb03 	bl	800c32c <__multadd>
 800bd26:	4639      	mov	r1, r7
 800bd28:	4680      	mov	r8, r0
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	220a      	movs	r2, #10
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 fafc 	bl	800c32c <__multadd>
 800bd34:	4607      	mov	r7, r0
 800bd36:	e7f1      	b.n	800bd1c <_dtoa_r+0xb04>
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	9302      	str	r3, [sp, #8]
 800bd3c:	9d01      	ldr	r5, [sp, #4]
 800bd3e:	ee18 0a10 	vmov	r0, s16
 800bd42:	4631      	mov	r1, r6
 800bd44:	f7ff f9da 	bl	800b0fc <quorem>
 800bd48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	f805 ab01 	strb.w	sl, [r5], #1
 800bd52:	1aea      	subs	r2, r5, r3
 800bd54:	9b02      	ldr	r3, [sp, #8]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	dd09      	ble.n	800bd6e <_dtoa_r+0xb56>
 800bd5a:	ee18 1a10 	vmov	r1, s16
 800bd5e:	2300      	movs	r3, #0
 800bd60:	220a      	movs	r2, #10
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 fae2 	bl	800c32c <__multadd>
 800bd68:	ee08 0a10 	vmov	s16, r0
 800bd6c:	e7e7      	b.n	800bd3e <_dtoa_r+0xb26>
 800bd6e:	9b02      	ldr	r3, [sp, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bfc8      	it	gt
 800bd74:	461d      	movgt	r5, r3
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	bfd8      	it	le
 800bd7a:	2501      	movle	r5, #1
 800bd7c:	441d      	add	r5, r3
 800bd7e:	f04f 0800 	mov.w	r8, #0
 800bd82:	ee18 1a10 	vmov	r1, s16
 800bd86:	2201      	movs	r2, #1
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fc7f 	bl	800c68c <__lshift>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	ee08 0a10 	vmov	s16, r0
 800bd94:	f000 fcea 	bl	800c76c <__mcmp>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dc91      	bgt.n	800bcc0 <_dtoa_r+0xaa8>
 800bd9c:	d102      	bne.n	800bda4 <_dtoa_r+0xb8c>
 800bd9e:	f01a 0f01 	tst.w	sl, #1
 800bda2:	d18d      	bne.n	800bcc0 <_dtoa_r+0xaa8>
 800bda4:	462b      	mov	r3, r5
 800bda6:	461d      	mov	r5, r3
 800bda8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdac:	2a30      	cmp	r2, #48	; 0x30
 800bdae:	d0fa      	beq.n	800bda6 <_dtoa_r+0xb8e>
 800bdb0:	e6d7      	b.n	800bb62 <_dtoa_r+0x94a>
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d184      	bne.n	800bcc2 <_dtoa_r+0xaaa>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	2331      	movs	r3, #49	; 0x31
 800bdc0:	7013      	strb	r3, [r2, #0]
 800bdc2:	e6ce      	b.n	800bb62 <_dtoa_r+0x94a>
 800bdc4:	4b09      	ldr	r3, [pc, #36]	; (800bdec <_dtoa_r+0xbd4>)
 800bdc6:	f7ff ba95 	b.w	800b2f4 <_dtoa_r+0xdc>
 800bdca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f47f aa6e 	bne.w	800b2ae <_dtoa_r+0x96>
 800bdd2:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <_dtoa_r+0xbd8>)
 800bdd4:	f7ff ba8e 	b.w	800b2f4 <_dtoa_r+0xdc>
 800bdd8:	9b02      	ldr	r3, [sp, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	dcae      	bgt.n	800bd3c <_dtoa_r+0xb24>
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	f73f aea8 	bgt.w	800bb36 <_dtoa_r+0x91e>
 800bde6:	e7a9      	b.n	800bd3c <_dtoa_r+0xb24>
 800bde8:	0800db37 	.word	0x0800db37
 800bdec:	0800da94 	.word	0x0800da94
 800bdf0:	0800dab8 	.word	0x0800dab8

0800bdf4 <__sflush_r>:
 800bdf4:	898a      	ldrh	r2, [r1, #12]
 800bdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfa:	4605      	mov	r5, r0
 800bdfc:	0710      	lsls	r0, r2, #28
 800bdfe:	460c      	mov	r4, r1
 800be00:	d458      	bmi.n	800beb4 <__sflush_r+0xc0>
 800be02:	684b      	ldr	r3, [r1, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	dc05      	bgt.n	800be14 <__sflush_r+0x20>
 800be08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	dc02      	bgt.n	800be14 <__sflush_r+0x20>
 800be0e:	2000      	movs	r0, #0
 800be10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be16:	2e00      	cmp	r6, #0
 800be18:	d0f9      	beq.n	800be0e <__sflush_r+0x1a>
 800be1a:	2300      	movs	r3, #0
 800be1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be20:	682f      	ldr	r7, [r5, #0]
 800be22:	602b      	str	r3, [r5, #0]
 800be24:	d032      	beq.n	800be8c <__sflush_r+0x98>
 800be26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	075a      	lsls	r2, r3, #29
 800be2c:	d505      	bpl.n	800be3a <__sflush_r+0x46>
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	1ac0      	subs	r0, r0, r3
 800be32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be34:	b10b      	cbz	r3, 800be3a <__sflush_r+0x46>
 800be36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be38:	1ac0      	subs	r0, r0, r3
 800be3a:	2300      	movs	r3, #0
 800be3c:	4602      	mov	r2, r0
 800be3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be40:	6a21      	ldr	r1, [r4, #32]
 800be42:	4628      	mov	r0, r5
 800be44:	47b0      	blx	r6
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	d106      	bne.n	800be5a <__sflush_r+0x66>
 800be4c:	6829      	ldr	r1, [r5, #0]
 800be4e:	291d      	cmp	r1, #29
 800be50:	d82c      	bhi.n	800beac <__sflush_r+0xb8>
 800be52:	4a2a      	ldr	r2, [pc, #168]	; (800befc <__sflush_r+0x108>)
 800be54:	40ca      	lsrs	r2, r1
 800be56:	07d6      	lsls	r6, r2, #31
 800be58:	d528      	bpl.n	800beac <__sflush_r+0xb8>
 800be5a:	2200      	movs	r2, #0
 800be5c:	6062      	str	r2, [r4, #4]
 800be5e:	04d9      	lsls	r1, r3, #19
 800be60:	6922      	ldr	r2, [r4, #16]
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	d504      	bpl.n	800be70 <__sflush_r+0x7c>
 800be66:	1c42      	adds	r2, r0, #1
 800be68:	d101      	bne.n	800be6e <__sflush_r+0x7a>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	b903      	cbnz	r3, 800be70 <__sflush_r+0x7c>
 800be6e:	6560      	str	r0, [r4, #84]	; 0x54
 800be70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be72:	602f      	str	r7, [r5, #0]
 800be74:	2900      	cmp	r1, #0
 800be76:	d0ca      	beq.n	800be0e <__sflush_r+0x1a>
 800be78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be7c:	4299      	cmp	r1, r3
 800be7e:	d002      	beq.n	800be86 <__sflush_r+0x92>
 800be80:	4628      	mov	r0, r5
 800be82:	f000 fd8b 	bl	800c99c <_free_r>
 800be86:	2000      	movs	r0, #0
 800be88:	6360      	str	r0, [r4, #52]	; 0x34
 800be8a:	e7c1      	b.n	800be10 <__sflush_r+0x1c>
 800be8c:	6a21      	ldr	r1, [r4, #32]
 800be8e:	2301      	movs	r3, #1
 800be90:	4628      	mov	r0, r5
 800be92:	47b0      	blx	r6
 800be94:	1c41      	adds	r1, r0, #1
 800be96:	d1c7      	bne.n	800be28 <__sflush_r+0x34>
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0c4      	beq.n	800be28 <__sflush_r+0x34>
 800be9e:	2b1d      	cmp	r3, #29
 800bea0:	d001      	beq.n	800bea6 <__sflush_r+0xb2>
 800bea2:	2b16      	cmp	r3, #22
 800bea4:	d101      	bne.n	800beaa <__sflush_r+0xb6>
 800bea6:	602f      	str	r7, [r5, #0]
 800bea8:	e7b1      	b.n	800be0e <__sflush_r+0x1a>
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb0:	81a3      	strh	r3, [r4, #12]
 800beb2:	e7ad      	b.n	800be10 <__sflush_r+0x1c>
 800beb4:	690f      	ldr	r7, [r1, #16]
 800beb6:	2f00      	cmp	r7, #0
 800beb8:	d0a9      	beq.n	800be0e <__sflush_r+0x1a>
 800beba:	0793      	lsls	r3, r2, #30
 800bebc:	680e      	ldr	r6, [r1, #0]
 800bebe:	bf08      	it	eq
 800bec0:	694b      	ldreq	r3, [r1, #20]
 800bec2:	600f      	str	r7, [r1, #0]
 800bec4:	bf18      	it	ne
 800bec6:	2300      	movne	r3, #0
 800bec8:	eba6 0807 	sub.w	r8, r6, r7
 800becc:	608b      	str	r3, [r1, #8]
 800bece:	f1b8 0f00 	cmp.w	r8, #0
 800bed2:	dd9c      	ble.n	800be0e <__sflush_r+0x1a>
 800bed4:	6a21      	ldr	r1, [r4, #32]
 800bed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bed8:	4643      	mov	r3, r8
 800beda:	463a      	mov	r2, r7
 800bedc:	4628      	mov	r0, r5
 800bede:	47b0      	blx	r6
 800bee0:	2800      	cmp	r0, #0
 800bee2:	dc06      	bgt.n	800bef2 <__sflush_r+0xfe>
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	e78e      	b.n	800be10 <__sflush_r+0x1c>
 800bef2:	4407      	add	r7, r0
 800bef4:	eba8 0800 	sub.w	r8, r8, r0
 800bef8:	e7e9      	b.n	800bece <__sflush_r+0xda>
 800befa:	bf00      	nop
 800befc:	20400001 	.word	0x20400001

0800bf00 <_fflush_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	690b      	ldr	r3, [r1, #16]
 800bf04:	4605      	mov	r5, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b913      	cbnz	r3, 800bf10 <_fflush_r+0x10>
 800bf0a:	2500      	movs	r5, #0
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	b118      	cbz	r0, 800bf1a <_fflush_r+0x1a>
 800bf12:	6983      	ldr	r3, [r0, #24]
 800bf14:	b90b      	cbnz	r3, 800bf1a <_fflush_r+0x1a>
 800bf16:	f000 f887 	bl	800c028 <__sinit>
 800bf1a:	4b14      	ldr	r3, [pc, #80]	; (800bf6c <_fflush_r+0x6c>)
 800bf1c:	429c      	cmp	r4, r3
 800bf1e:	d11b      	bne.n	800bf58 <_fflush_r+0x58>
 800bf20:	686c      	ldr	r4, [r5, #4]
 800bf22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0ef      	beq.n	800bf0a <_fflush_r+0xa>
 800bf2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf2c:	07d0      	lsls	r0, r2, #31
 800bf2e:	d404      	bmi.n	800bf3a <_fflush_r+0x3a>
 800bf30:	0599      	lsls	r1, r3, #22
 800bf32:	d402      	bmi.n	800bf3a <_fflush_r+0x3a>
 800bf34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf36:	f000 f91a 	bl	800c16e <__retarget_lock_acquire_recursive>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	f7ff ff59 	bl	800bdf4 <__sflush_r>
 800bf42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf44:	07da      	lsls	r2, r3, #31
 800bf46:	4605      	mov	r5, r0
 800bf48:	d4e0      	bmi.n	800bf0c <_fflush_r+0xc>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	059b      	lsls	r3, r3, #22
 800bf4e:	d4dd      	bmi.n	800bf0c <_fflush_r+0xc>
 800bf50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf52:	f000 f90d 	bl	800c170 <__retarget_lock_release_recursive>
 800bf56:	e7d9      	b.n	800bf0c <_fflush_r+0xc>
 800bf58:	4b05      	ldr	r3, [pc, #20]	; (800bf70 <_fflush_r+0x70>)
 800bf5a:	429c      	cmp	r4, r3
 800bf5c:	d101      	bne.n	800bf62 <_fflush_r+0x62>
 800bf5e:	68ac      	ldr	r4, [r5, #8]
 800bf60:	e7df      	b.n	800bf22 <_fflush_r+0x22>
 800bf62:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <_fflush_r+0x74>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	bf08      	it	eq
 800bf68:	68ec      	ldreq	r4, [r5, #12]
 800bf6a:	e7da      	b.n	800bf22 <_fflush_r+0x22>
 800bf6c:	0800db68 	.word	0x0800db68
 800bf70:	0800db88 	.word	0x0800db88
 800bf74:	0800db48 	.word	0x0800db48

0800bf78 <std>:
 800bf78:	2300      	movs	r3, #0
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf86:	6083      	str	r3, [r0, #8]
 800bf88:	8181      	strh	r1, [r0, #12]
 800bf8a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf8c:	81c2      	strh	r2, [r0, #14]
 800bf8e:	6183      	str	r3, [r0, #24]
 800bf90:	4619      	mov	r1, r3
 800bf92:	2208      	movs	r2, #8
 800bf94:	305c      	adds	r0, #92	; 0x5c
 800bf96:	f7fe fb51 	bl	800a63c <memset>
 800bf9a:	4b05      	ldr	r3, [pc, #20]	; (800bfb0 <std+0x38>)
 800bf9c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf9e:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <std+0x3c>)
 800bfa0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfa2:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <std+0x40>)
 800bfa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfa6:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <std+0x44>)
 800bfa8:	6224      	str	r4, [r4, #32]
 800bfaa:	6323      	str	r3, [r4, #48]	; 0x30
 800bfac:	bd10      	pop	{r4, pc}
 800bfae:	bf00      	nop
 800bfb0:	0800ce35 	.word	0x0800ce35
 800bfb4:	0800ce57 	.word	0x0800ce57
 800bfb8:	0800ce8f 	.word	0x0800ce8f
 800bfbc:	0800ceb3 	.word	0x0800ceb3

0800bfc0 <_cleanup_r>:
 800bfc0:	4901      	ldr	r1, [pc, #4]	; (800bfc8 <_cleanup_r+0x8>)
 800bfc2:	f000 b8af 	b.w	800c124 <_fwalk_reent>
 800bfc6:	bf00      	nop
 800bfc8:	0800bf01 	.word	0x0800bf01

0800bfcc <__sfmoreglue>:
 800bfcc:	b570      	push	{r4, r5, r6, lr}
 800bfce:	2268      	movs	r2, #104	; 0x68
 800bfd0:	1e4d      	subs	r5, r1, #1
 800bfd2:	4355      	muls	r5, r2
 800bfd4:	460e      	mov	r6, r1
 800bfd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfda:	f000 fd4b 	bl	800ca74 <_malloc_r>
 800bfde:	4604      	mov	r4, r0
 800bfe0:	b140      	cbz	r0, 800bff4 <__sfmoreglue+0x28>
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	e9c0 1600 	strd	r1, r6, [r0]
 800bfe8:	300c      	adds	r0, #12
 800bfea:	60a0      	str	r0, [r4, #8]
 800bfec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bff0:	f7fe fb24 	bl	800a63c <memset>
 800bff4:	4620      	mov	r0, r4
 800bff6:	bd70      	pop	{r4, r5, r6, pc}

0800bff8 <__sfp_lock_acquire>:
 800bff8:	4801      	ldr	r0, [pc, #4]	; (800c000 <__sfp_lock_acquire+0x8>)
 800bffa:	f000 b8b8 	b.w	800c16e <__retarget_lock_acquire_recursive>
 800bffe:	bf00      	nop
 800c000:	20000d15 	.word	0x20000d15

0800c004 <__sfp_lock_release>:
 800c004:	4801      	ldr	r0, [pc, #4]	; (800c00c <__sfp_lock_release+0x8>)
 800c006:	f000 b8b3 	b.w	800c170 <__retarget_lock_release_recursive>
 800c00a:	bf00      	nop
 800c00c:	20000d15 	.word	0x20000d15

0800c010 <__sinit_lock_acquire>:
 800c010:	4801      	ldr	r0, [pc, #4]	; (800c018 <__sinit_lock_acquire+0x8>)
 800c012:	f000 b8ac 	b.w	800c16e <__retarget_lock_acquire_recursive>
 800c016:	bf00      	nop
 800c018:	20000d16 	.word	0x20000d16

0800c01c <__sinit_lock_release>:
 800c01c:	4801      	ldr	r0, [pc, #4]	; (800c024 <__sinit_lock_release+0x8>)
 800c01e:	f000 b8a7 	b.w	800c170 <__retarget_lock_release_recursive>
 800c022:	bf00      	nop
 800c024:	20000d16 	.word	0x20000d16

0800c028 <__sinit>:
 800c028:	b510      	push	{r4, lr}
 800c02a:	4604      	mov	r4, r0
 800c02c:	f7ff fff0 	bl	800c010 <__sinit_lock_acquire>
 800c030:	69a3      	ldr	r3, [r4, #24]
 800c032:	b11b      	cbz	r3, 800c03c <__sinit+0x14>
 800c034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c038:	f7ff bff0 	b.w	800c01c <__sinit_lock_release>
 800c03c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c040:	6523      	str	r3, [r4, #80]	; 0x50
 800c042:	4b13      	ldr	r3, [pc, #76]	; (800c090 <__sinit+0x68>)
 800c044:	4a13      	ldr	r2, [pc, #76]	; (800c094 <__sinit+0x6c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	62a2      	str	r2, [r4, #40]	; 0x28
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	bf04      	itt	eq
 800c04e:	2301      	moveq	r3, #1
 800c050:	61a3      	streq	r3, [r4, #24]
 800c052:	4620      	mov	r0, r4
 800c054:	f000 f820 	bl	800c098 <__sfp>
 800c058:	6060      	str	r0, [r4, #4]
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 f81c 	bl	800c098 <__sfp>
 800c060:	60a0      	str	r0, [r4, #8]
 800c062:	4620      	mov	r0, r4
 800c064:	f000 f818 	bl	800c098 <__sfp>
 800c068:	2200      	movs	r2, #0
 800c06a:	60e0      	str	r0, [r4, #12]
 800c06c:	2104      	movs	r1, #4
 800c06e:	6860      	ldr	r0, [r4, #4]
 800c070:	f7ff ff82 	bl	800bf78 <std>
 800c074:	68a0      	ldr	r0, [r4, #8]
 800c076:	2201      	movs	r2, #1
 800c078:	2109      	movs	r1, #9
 800c07a:	f7ff ff7d 	bl	800bf78 <std>
 800c07e:	68e0      	ldr	r0, [r4, #12]
 800c080:	2202      	movs	r2, #2
 800c082:	2112      	movs	r1, #18
 800c084:	f7ff ff78 	bl	800bf78 <std>
 800c088:	2301      	movs	r3, #1
 800c08a:	61a3      	str	r3, [r4, #24]
 800c08c:	e7d2      	b.n	800c034 <__sinit+0xc>
 800c08e:	bf00      	nop
 800c090:	0800da80 	.word	0x0800da80
 800c094:	0800bfc1 	.word	0x0800bfc1

0800c098 <__sfp>:
 800c098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09a:	4607      	mov	r7, r0
 800c09c:	f7ff ffac 	bl	800bff8 <__sfp_lock_acquire>
 800c0a0:	4b1e      	ldr	r3, [pc, #120]	; (800c11c <__sfp+0x84>)
 800c0a2:	681e      	ldr	r6, [r3, #0]
 800c0a4:	69b3      	ldr	r3, [r6, #24]
 800c0a6:	b913      	cbnz	r3, 800c0ae <__sfp+0x16>
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f7ff ffbd 	bl	800c028 <__sinit>
 800c0ae:	3648      	adds	r6, #72	; 0x48
 800c0b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	d503      	bpl.n	800c0c0 <__sfp+0x28>
 800c0b8:	6833      	ldr	r3, [r6, #0]
 800c0ba:	b30b      	cbz	r3, 800c100 <__sfp+0x68>
 800c0bc:	6836      	ldr	r6, [r6, #0]
 800c0be:	e7f7      	b.n	800c0b0 <__sfp+0x18>
 800c0c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0c4:	b9d5      	cbnz	r5, 800c0fc <__sfp+0x64>
 800c0c6:	4b16      	ldr	r3, [pc, #88]	; (800c120 <__sfp+0x88>)
 800c0c8:	60e3      	str	r3, [r4, #12]
 800c0ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0ce:	6665      	str	r5, [r4, #100]	; 0x64
 800c0d0:	f000 f84c 	bl	800c16c <__retarget_lock_init_recursive>
 800c0d4:	f7ff ff96 	bl	800c004 <__sfp_lock_release>
 800c0d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0e0:	6025      	str	r5, [r4, #0]
 800c0e2:	61a5      	str	r5, [r4, #24]
 800c0e4:	2208      	movs	r2, #8
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0ec:	f7fe faa6 	bl	800a63c <memset>
 800c0f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0fc:	3468      	adds	r4, #104	; 0x68
 800c0fe:	e7d9      	b.n	800c0b4 <__sfp+0x1c>
 800c100:	2104      	movs	r1, #4
 800c102:	4638      	mov	r0, r7
 800c104:	f7ff ff62 	bl	800bfcc <__sfmoreglue>
 800c108:	4604      	mov	r4, r0
 800c10a:	6030      	str	r0, [r6, #0]
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d1d5      	bne.n	800c0bc <__sfp+0x24>
 800c110:	f7ff ff78 	bl	800c004 <__sfp_lock_release>
 800c114:	230c      	movs	r3, #12
 800c116:	603b      	str	r3, [r7, #0]
 800c118:	e7ee      	b.n	800c0f8 <__sfp+0x60>
 800c11a:	bf00      	nop
 800c11c:	0800da80 	.word	0x0800da80
 800c120:	ffff0001 	.word	0xffff0001

0800c124 <_fwalk_reent>:
 800c124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c128:	4606      	mov	r6, r0
 800c12a:	4688      	mov	r8, r1
 800c12c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c130:	2700      	movs	r7, #0
 800c132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c136:	f1b9 0901 	subs.w	r9, r9, #1
 800c13a:	d505      	bpl.n	800c148 <_fwalk_reent+0x24>
 800c13c:	6824      	ldr	r4, [r4, #0]
 800c13e:	2c00      	cmp	r4, #0
 800c140:	d1f7      	bne.n	800c132 <_fwalk_reent+0xe>
 800c142:	4638      	mov	r0, r7
 800c144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c148:	89ab      	ldrh	r3, [r5, #12]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d907      	bls.n	800c15e <_fwalk_reent+0x3a>
 800c14e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c152:	3301      	adds	r3, #1
 800c154:	d003      	beq.n	800c15e <_fwalk_reent+0x3a>
 800c156:	4629      	mov	r1, r5
 800c158:	4630      	mov	r0, r6
 800c15a:	47c0      	blx	r8
 800c15c:	4307      	orrs	r7, r0
 800c15e:	3568      	adds	r5, #104	; 0x68
 800c160:	e7e9      	b.n	800c136 <_fwalk_reent+0x12>
	...

0800c164 <_localeconv_r>:
 800c164:	4800      	ldr	r0, [pc, #0]	; (800c168 <_localeconv_r+0x4>)
 800c166:	4770      	bx	lr
 800c168:	20000164 	.word	0x20000164

0800c16c <__retarget_lock_init_recursive>:
 800c16c:	4770      	bx	lr

0800c16e <__retarget_lock_acquire_recursive>:
 800c16e:	4770      	bx	lr

0800c170 <__retarget_lock_release_recursive>:
 800c170:	4770      	bx	lr

0800c172 <__swhatbuf_r>:
 800c172:	b570      	push	{r4, r5, r6, lr}
 800c174:	460e      	mov	r6, r1
 800c176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17a:	2900      	cmp	r1, #0
 800c17c:	b096      	sub	sp, #88	; 0x58
 800c17e:	4614      	mov	r4, r2
 800c180:	461d      	mov	r5, r3
 800c182:	da08      	bge.n	800c196 <__swhatbuf_r+0x24>
 800c184:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	602a      	str	r2, [r5, #0]
 800c18c:	061a      	lsls	r2, r3, #24
 800c18e:	d410      	bmi.n	800c1b2 <__swhatbuf_r+0x40>
 800c190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c194:	e00e      	b.n	800c1b4 <__swhatbuf_r+0x42>
 800c196:	466a      	mov	r2, sp
 800c198:	f000 fee2 	bl	800cf60 <_fstat_r>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	dbf1      	blt.n	800c184 <__swhatbuf_r+0x12>
 800c1a0:	9a01      	ldr	r2, [sp, #4]
 800c1a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1aa:	425a      	negs	r2, r3
 800c1ac:	415a      	adcs	r2, r3
 800c1ae:	602a      	str	r2, [r5, #0]
 800c1b0:	e7ee      	b.n	800c190 <__swhatbuf_r+0x1e>
 800c1b2:	2340      	movs	r3, #64	; 0x40
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	b016      	add	sp, #88	; 0x58
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}

0800c1bc <__smakebuf_r>:
 800c1bc:	898b      	ldrh	r3, [r1, #12]
 800c1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1c0:	079d      	lsls	r5, r3, #30
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	d507      	bpl.n	800c1d8 <__smakebuf_r+0x1c>
 800c1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	6123      	str	r3, [r4, #16]
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	6163      	str	r3, [r4, #20]
 800c1d4:	b002      	add	sp, #8
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	ab01      	add	r3, sp, #4
 800c1da:	466a      	mov	r2, sp
 800c1dc:	f7ff ffc9 	bl	800c172 <__swhatbuf_r>
 800c1e0:	9900      	ldr	r1, [sp, #0]
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f000 fc45 	bl	800ca74 <_malloc_r>
 800c1ea:	b948      	cbnz	r0, 800c200 <__smakebuf_r+0x44>
 800c1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f0:	059a      	lsls	r2, r3, #22
 800c1f2:	d4ef      	bmi.n	800c1d4 <__smakebuf_r+0x18>
 800c1f4:	f023 0303 	bic.w	r3, r3, #3
 800c1f8:	f043 0302 	orr.w	r3, r3, #2
 800c1fc:	81a3      	strh	r3, [r4, #12]
 800c1fe:	e7e3      	b.n	800c1c8 <__smakebuf_r+0xc>
 800c200:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <__smakebuf_r+0x7c>)
 800c202:	62b3      	str	r3, [r6, #40]	; 0x28
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	6020      	str	r0, [r4, #0]
 800c208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	9b00      	ldr	r3, [sp, #0]
 800c210:	6163      	str	r3, [r4, #20]
 800c212:	9b01      	ldr	r3, [sp, #4]
 800c214:	6120      	str	r0, [r4, #16]
 800c216:	b15b      	cbz	r3, 800c230 <__smakebuf_r+0x74>
 800c218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c21c:	4630      	mov	r0, r6
 800c21e:	f000 feb1 	bl	800cf84 <_isatty_r>
 800c222:	b128      	cbz	r0, 800c230 <__smakebuf_r+0x74>
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	f023 0303 	bic.w	r3, r3, #3
 800c22a:	f043 0301 	orr.w	r3, r3, #1
 800c22e:	81a3      	strh	r3, [r4, #12]
 800c230:	89a0      	ldrh	r0, [r4, #12]
 800c232:	4305      	orrs	r5, r0
 800c234:	81a5      	strh	r5, [r4, #12]
 800c236:	e7cd      	b.n	800c1d4 <__smakebuf_r+0x18>
 800c238:	0800bfc1 	.word	0x0800bfc1

0800c23c <malloc>:
 800c23c:	4b02      	ldr	r3, [pc, #8]	; (800c248 <malloc+0xc>)
 800c23e:	4601      	mov	r1, r0
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	f000 bc17 	b.w	800ca74 <_malloc_r>
 800c246:	bf00      	nop
 800c248:	20000010 	.word	0x20000010

0800c24c <memcpy>:
 800c24c:	440a      	add	r2, r1
 800c24e:	4291      	cmp	r1, r2
 800c250:	f100 33ff 	add.w	r3, r0, #4294967295
 800c254:	d100      	bne.n	800c258 <memcpy+0xc>
 800c256:	4770      	bx	lr
 800c258:	b510      	push	{r4, lr}
 800c25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c262:	4291      	cmp	r1, r2
 800c264:	d1f9      	bne.n	800c25a <memcpy+0xe>
 800c266:	bd10      	pop	{r4, pc}

0800c268 <_Balloc>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c26c:	4604      	mov	r4, r0
 800c26e:	460d      	mov	r5, r1
 800c270:	b976      	cbnz	r6, 800c290 <_Balloc+0x28>
 800c272:	2010      	movs	r0, #16
 800c274:	f7ff ffe2 	bl	800c23c <malloc>
 800c278:	4602      	mov	r2, r0
 800c27a:	6260      	str	r0, [r4, #36]	; 0x24
 800c27c:	b920      	cbnz	r0, 800c288 <_Balloc+0x20>
 800c27e:	4b18      	ldr	r3, [pc, #96]	; (800c2e0 <_Balloc+0x78>)
 800c280:	4818      	ldr	r0, [pc, #96]	; (800c2e4 <_Balloc+0x7c>)
 800c282:	2166      	movs	r1, #102	; 0x66
 800c284:	f000 fe2c 	bl	800cee0 <__assert_func>
 800c288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c28c:	6006      	str	r6, [r0, #0]
 800c28e:	60c6      	str	r6, [r0, #12]
 800c290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c292:	68f3      	ldr	r3, [r6, #12]
 800c294:	b183      	cbz	r3, 800c2b8 <_Balloc+0x50>
 800c296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c29e:	b9b8      	cbnz	r0, 800c2d0 <_Balloc+0x68>
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c2a6:	1d72      	adds	r2, r6, #5
 800c2a8:	0092      	lsls	r2, r2, #2
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fb60 	bl	800c970 <_calloc_r>
 800c2b0:	b160      	cbz	r0, 800c2cc <_Balloc+0x64>
 800c2b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2b6:	e00e      	b.n	800c2d6 <_Balloc+0x6e>
 800c2b8:	2221      	movs	r2, #33	; 0x21
 800c2ba:	2104      	movs	r1, #4
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fb57 	bl	800c970 <_calloc_r>
 800c2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c4:	60f0      	str	r0, [r6, #12]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1e4      	bne.n	800c296 <_Balloc+0x2e>
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	6802      	ldr	r2, [r0, #0]
 800c2d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2dc:	e7f7      	b.n	800c2ce <_Balloc+0x66>
 800c2de:	bf00      	nop
 800c2e0:	0800dac5 	.word	0x0800dac5
 800c2e4:	0800dba8 	.word	0x0800dba8

0800c2e8 <_Bfree>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	b976      	cbnz	r6, 800c310 <_Bfree+0x28>
 800c2f2:	2010      	movs	r0, #16
 800c2f4:	f7ff ffa2 	bl	800c23c <malloc>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	6268      	str	r0, [r5, #36]	; 0x24
 800c2fc:	b920      	cbnz	r0, 800c308 <_Bfree+0x20>
 800c2fe:	4b09      	ldr	r3, [pc, #36]	; (800c324 <_Bfree+0x3c>)
 800c300:	4809      	ldr	r0, [pc, #36]	; (800c328 <_Bfree+0x40>)
 800c302:	218a      	movs	r1, #138	; 0x8a
 800c304:	f000 fdec 	bl	800cee0 <__assert_func>
 800c308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c30c:	6006      	str	r6, [r0, #0]
 800c30e:	60c6      	str	r6, [r0, #12]
 800c310:	b13c      	cbz	r4, 800c322 <_Bfree+0x3a>
 800c312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c314:	6862      	ldr	r2, [r4, #4]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c31c:	6021      	str	r1, [r4, #0]
 800c31e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	0800dac5 	.word	0x0800dac5
 800c328:	0800dba8 	.word	0x0800dba8

0800c32c <__multadd>:
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	690d      	ldr	r5, [r1, #16]
 800c332:	4607      	mov	r7, r0
 800c334:	460c      	mov	r4, r1
 800c336:	461e      	mov	r6, r3
 800c338:	f101 0c14 	add.w	ip, r1, #20
 800c33c:	2000      	movs	r0, #0
 800c33e:	f8dc 3000 	ldr.w	r3, [ip]
 800c342:	b299      	uxth	r1, r3
 800c344:	fb02 6101 	mla	r1, r2, r1, r6
 800c348:	0c1e      	lsrs	r6, r3, #16
 800c34a:	0c0b      	lsrs	r3, r1, #16
 800c34c:	fb02 3306 	mla	r3, r2, r6, r3
 800c350:	b289      	uxth	r1, r1
 800c352:	3001      	adds	r0, #1
 800c354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c358:	4285      	cmp	r5, r0
 800c35a:	f84c 1b04 	str.w	r1, [ip], #4
 800c35e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c362:	dcec      	bgt.n	800c33e <__multadd+0x12>
 800c364:	b30e      	cbz	r6, 800c3aa <__multadd+0x7e>
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	42ab      	cmp	r3, r5
 800c36a:	dc19      	bgt.n	800c3a0 <__multadd+0x74>
 800c36c:	6861      	ldr	r1, [r4, #4]
 800c36e:	4638      	mov	r0, r7
 800c370:	3101      	adds	r1, #1
 800c372:	f7ff ff79 	bl	800c268 <_Balloc>
 800c376:	4680      	mov	r8, r0
 800c378:	b928      	cbnz	r0, 800c386 <__multadd+0x5a>
 800c37a:	4602      	mov	r2, r0
 800c37c:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <__multadd+0x84>)
 800c37e:	480d      	ldr	r0, [pc, #52]	; (800c3b4 <__multadd+0x88>)
 800c380:	21b5      	movs	r1, #181	; 0xb5
 800c382:	f000 fdad 	bl	800cee0 <__assert_func>
 800c386:	6922      	ldr	r2, [r4, #16]
 800c388:	3202      	adds	r2, #2
 800c38a:	f104 010c 	add.w	r1, r4, #12
 800c38e:	0092      	lsls	r2, r2, #2
 800c390:	300c      	adds	r0, #12
 800c392:	f7ff ff5b 	bl	800c24c <memcpy>
 800c396:	4621      	mov	r1, r4
 800c398:	4638      	mov	r0, r7
 800c39a:	f7ff ffa5 	bl	800c2e8 <_Bfree>
 800c39e:	4644      	mov	r4, r8
 800c3a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	615e      	str	r6, [r3, #20]
 800c3a8:	6125      	str	r5, [r4, #16]
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b0:	0800db37 	.word	0x0800db37
 800c3b4:	0800dba8 	.word	0x0800dba8

0800c3b8 <__hi0bits>:
 800c3b8:	0c03      	lsrs	r3, r0, #16
 800c3ba:	041b      	lsls	r3, r3, #16
 800c3bc:	b9d3      	cbnz	r3, 800c3f4 <__hi0bits+0x3c>
 800c3be:	0400      	lsls	r0, r0, #16
 800c3c0:	2310      	movs	r3, #16
 800c3c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3c6:	bf04      	itt	eq
 800c3c8:	0200      	lsleq	r0, r0, #8
 800c3ca:	3308      	addeq	r3, #8
 800c3cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3d0:	bf04      	itt	eq
 800c3d2:	0100      	lsleq	r0, r0, #4
 800c3d4:	3304      	addeq	r3, #4
 800c3d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3da:	bf04      	itt	eq
 800c3dc:	0080      	lsleq	r0, r0, #2
 800c3de:	3302      	addeq	r3, #2
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	db05      	blt.n	800c3f0 <__hi0bits+0x38>
 800c3e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c3e8:	f103 0301 	add.w	r3, r3, #1
 800c3ec:	bf08      	it	eq
 800c3ee:	2320      	moveq	r3, #32
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	4770      	bx	lr
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e7e4      	b.n	800c3c2 <__hi0bits+0xa>

0800c3f8 <__lo0bits>:
 800c3f8:	6803      	ldr	r3, [r0, #0]
 800c3fa:	f013 0207 	ands.w	r2, r3, #7
 800c3fe:	4601      	mov	r1, r0
 800c400:	d00b      	beq.n	800c41a <__lo0bits+0x22>
 800c402:	07da      	lsls	r2, r3, #31
 800c404:	d423      	bmi.n	800c44e <__lo0bits+0x56>
 800c406:	0798      	lsls	r0, r3, #30
 800c408:	bf49      	itett	mi
 800c40a:	085b      	lsrmi	r3, r3, #1
 800c40c:	089b      	lsrpl	r3, r3, #2
 800c40e:	2001      	movmi	r0, #1
 800c410:	600b      	strmi	r3, [r1, #0]
 800c412:	bf5c      	itt	pl
 800c414:	600b      	strpl	r3, [r1, #0]
 800c416:	2002      	movpl	r0, #2
 800c418:	4770      	bx	lr
 800c41a:	b298      	uxth	r0, r3
 800c41c:	b9a8      	cbnz	r0, 800c44a <__lo0bits+0x52>
 800c41e:	0c1b      	lsrs	r3, r3, #16
 800c420:	2010      	movs	r0, #16
 800c422:	b2da      	uxtb	r2, r3
 800c424:	b90a      	cbnz	r2, 800c42a <__lo0bits+0x32>
 800c426:	3008      	adds	r0, #8
 800c428:	0a1b      	lsrs	r3, r3, #8
 800c42a:	071a      	lsls	r2, r3, #28
 800c42c:	bf04      	itt	eq
 800c42e:	091b      	lsreq	r3, r3, #4
 800c430:	3004      	addeq	r0, #4
 800c432:	079a      	lsls	r2, r3, #30
 800c434:	bf04      	itt	eq
 800c436:	089b      	lsreq	r3, r3, #2
 800c438:	3002      	addeq	r0, #2
 800c43a:	07da      	lsls	r2, r3, #31
 800c43c:	d403      	bmi.n	800c446 <__lo0bits+0x4e>
 800c43e:	085b      	lsrs	r3, r3, #1
 800c440:	f100 0001 	add.w	r0, r0, #1
 800c444:	d005      	beq.n	800c452 <__lo0bits+0x5a>
 800c446:	600b      	str	r3, [r1, #0]
 800c448:	4770      	bx	lr
 800c44a:	4610      	mov	r0, r2
 800c44c:	e7e9      	b.n	800c422 <__lo0bits+0x2a>
 800c44e:	2000      	movs	r0, #0
 800c450:	4770      	bx	lr
 800c452:	2020      	movs	r0, #32
 800c454:	4770      	bx	lr
	...

0800c458 <__i2b>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	460c      	mov	r4, r1
 800c45c:	2101      	movs	r1, #1
 800c45e:	f7ff ff03 	bl	800c268 <_Balloc>
 800c462:	4602      	mov	r2, r0
 800c464:	b928      	cbnz	r0, 800c472 <__i2b+0x1a>
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <__i2b+0x24>)
 800c468:	4805      	ldr	r0, [pc, #20]	; (800c480 <__i2b+0x28>)
 800c46a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c46e:	f000 fd37 	bl	800cee0 <__assert_func>
 800c472:	2301      	movs	r3, #1
 800c474:	6144      	str	r4, [r0, #20]
 800c476:	6103      	str	r3, [r0, #16]
 800c478:	bd10      	pop	{r4, pc}
 800c47a:	bf00      	nop
 800c47c:	0800db37 	.word	0x0800db37
 800c480:	0800dba8 	.word	0x0800dba8

0800c484 <__multiply>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	4691      	mov	r9, r2
 800c48a:	690a      	ldr	r2, [r1, #16]
 800c48c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c490:	429a      	cmp	r2, r3
 800c492:	bfb8      	it	lt
 800c494:	460b      	movlt	r3, r1
 800c496:	460c      	mov	r4, r1
 800c498:	bfbc      	itt	lt
 800c49a:	464c      	movlt	r4, r9
 800c49c:	4699      	movlt	r9, r3
 800c49e:	6927      	ldr	r7, [r4, #16]
 800c4a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	6861      	ldr	r1, [r4, #4]
 800c4a8:	eb07 060a 	add.w	r6, r7, sl
 800c4ac:	42b3      	cmp	r3, r6
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	bfb8      	it	lt
 800c4b2:	3101      	addlt	r1, #1
 800c4b4:	f7ff fed8 	bl	800c268 <_Balloc>
 800c4b8:	b930      	cbnz	r0, 800c4c8 <__multiply+0x44>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	4b44      	ldr	r3, [pc, #272]	; (800c5d0 <__multiply+0x14c>)
 800c4be:	4845      	ldr	r0, [pc, #276]	; (800c5d4 <__multiply+0x150>)
 800c4c0:	f240 115d 	movw	r1, #349	; 0x15d
 800c4c4:	f000 fd0c 	bl	800cee0 <__assert_func>
 800c4c8:	f100 0514 	add.w	r5, r0, #20
 800c4cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4d0:	462b      	mov	r3, r5
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	4543      	cmp	r3, r8
 800c4d6:	d321      	bcc.n	800c51c <__multiply+0x98>
 800c4d8:	f104 0314 	add.w	r3, r4, #20
 800c4dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4e0:	f109 0314 	add.w	r3, r9, #20
 800c4e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4e8:	9202      	str	r2, [sp, #8]
 800c4ea:	1b3a      	subs	r2, r7, r4
 800c4ec:	3a15      	subs	r2, #21
 800c4ee:	f022 0203 	bic.w	r2, r2, #3
 800c4f2:	3204      	adds	r2, #4
 800c4f4:	f104 0115 	add.w	r1, r4, #21
 800c4f8:	428f      	cmp	r7, r1
 800c4fa:	bf38      	it	cc
 800c4fc:	2204      	movcc	r2, #4
 800c4fe:	9201      	str	r2, [sp, #4]
 800c500:	9a02      	ldr	r2, [sp, #8]
 800c502:	9303      	str	r3, [sp, #12]
 800c504:	429a      	cmp	r2, r3
 800c506:	d80c      	bhi.n	800c522 <__multiply+0x9e>
 800c508:	2e00      	cmp	r6, #0
 800c50a:	dd03      	ble.n	800c514 <__multiply+0x90>
 800c50c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c510:	2b00      	cmp	r3, #0
 800c512:	d05a      	beq.n	800c5ca <__multiply+0x146>
 800c514:	6106      	str	r6, [r0, #16]
 800c516:	b005      	add	sp, #20
 800c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51c:	f843 2b04 	str.w	r2, [r3], #4
 800c520:	e7d8      	b.n	800c4d4 <__multiply+0x50>
 800c522:	f8b3 a000 	ldrh.w	sl, [r3]
 800c526:	f1ba 0f00 	cmp.w	sl, #0
 800c52a:	d024      	beq.n	800c576 <__multiply+0xf2>
 800c52c:	f104 0e14 	add.w	lr, r4, #20
 800c530:	46a9      	mov	r9, r5
 800c532:	f04f 0c00 	mov.w	ip, #0
 800c536:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c53a:	f8d9 1000 	ldr.w	r1, [r9]
 800c53e:	fa1f fb82 	uxth.w	fp, r2
 800c542:	b289      	uxth	r1, r1
 800c544:	fb0a 110b 	mla	r1, sl, fp, r1
 800c548:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c54c:	f8d9 2000 	ldr.w	r2, [r9]
 800c550:	4461      	add	r1, ip
 800c552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c556:	fb0a c20b 	mla	r2, sl, fp, ip
 800c55a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c55e:	b289      	uxth	r1, r1
 800c560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c564:	4577      	cmp	r7, lr
 800c566:	f849 1b04 	str.w	r1, [r9], #4
 800c56a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c56e:	d8e2      	bhi.n	800c536 <__multiply+0xb2>
 800c570:	9a01      	ldr	r2, [sp, #4]
 800c572:	f845 c002 	str.w	ip, [r5, r2]
 800c576:	9a03      	ldr	r2, [sp, #12]
 800c578:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c57c:	3304      	adds	r3, #4
 800c57e:	f1b9 0f00 	cmp.w	r9, #0
 800c582:	d020      	beq.n	800c5c6 <__multiply+0x142>
 800c584:	6829      	ldr	r1, [r5, #0]
 800c586:	f104 0c14 	add.w	ip, r4, #20
 800c58a:	46ae      	mov	lr, r5
 800c58c:	f04f 0a00 	mov.w	sl, #0
 800c590:	f8bc b000 	ldrh.w	fp, [ip]
 800c594:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c598:	fb09 220b 	mla	r2, r9, fp, r2
 800c59c:	4492      	add	sl, r2
 800c59e:	b289      	uxth	r1, r1
 800c5a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5a4:	f84e 1b04 	str.w	r1, [lr], #4
 800c5a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5ac:	f8be 1000 	ldrh.w	r1, [lr]
 800c5b0:	0c12      	lsrs	r2, r2, #16
 800c5b2:	fb09 1102 	mla	r1, r9, r2, r1
 800c5b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5ba:	4567      	cmp	r7, ip
 800c5bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5c0:	d8e6      	bhi.n	800c590 <__multiply+0x10c>
 800c5c2:	9a01      	ldr	r2, [sp, #4]
 800c5c4:	50a9      	str	r1, [r5, r2]
 800c5c6:	3504      	adds	r5, #4
 800c5c8:	e79a      	b.n	800c500 <__multiply+0x7c>
 800c5ca:	3e01      	subs	r6, #1
 800c5cc:	e79c      	b.n	800c508 <__multiply+0x84>
 800c5ce:	bf00      	nop
 800c5d0:	0800db37 	.word	0x0800db37
 800c5d4:	0800dba8 	.word	0x0800dba8

0800c5d8 <__pow5mult>:
 800c5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5dc:	4615      	mov	r5, r2
 800c5de:	f012 0203 	ands.w	r2, r2, #3
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	d007      	beq.n	800c5f8 <__pow5mult+0x20>
 800c5e8:	4c25      	ldr	r4, [pc, #148]	; (800c680 <__pow5mult+0xa8>)
 800c5ea:	3a01      	subs	r2, #1
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5f2:	f7ff fe9b 	bl	800c32c <__multadd>
 800c5f6:	4607      	mov	r7, r0
 800c5f8:	10ad      	asrs	r5, r5, #2
 800c5fa:	d03d      	beq.n	800c678 <__pow5mult+0xa0>
 800c5fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c5fe:	b97c      	cbnz	r4, 800c620 <__pow5mult+0x48>
 800c600:	2010      	movs	r0, #16
 800c602:	f7ff fe1b 	bl	800c23c <malloc>
 800c606:	4602      	mov	r2, r0
 800c608:	6270      	str	r0, [r6, #36]	; 0x24
 800c60a:	b928      	cbnz	r0, 800c618 <__pow5mult+0x40>
 800c60c:	4b1d      	ldr	r3, [pc, #116]	; (800c684 <__pow5mult+0xac>)
 800c60e:	481e      	ldr	r0, [pc, #120]	; (800c688 <__pow5mult+0xb0>)
 800c610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c614:	f000 fc64 	bl	800cee0 <__assert_func>
 800c618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c61c:	6004      	str	r4, [r0, #0]
 800c61e:	60c4      	str	r4, [r0, #12]
 800c620:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c628:	b94c      	cbnz	r4, 800c63e <__pow5mult+0x66>
 800c62a:	f240 2171 	movw	r1, #625	; 0x271
 800c62e:	4630      	mov	r0, r6
 800c630:	f7ff ff12 	bl	800c458 <__i2b>
 800c634:	2300      	movs	r3, #0
 800c636:	f8c8 0008 	str.w	r0, [r8, #8]
 800c63a:	4604      	mov	r4, r0
 800c63c:	6003      	str	r3, [r0, #0]
 800c63e:	f04f 0900 	mov.w	r9, #0
 800c642:	07eb      	lsls	r3, r5, #31
 800c644:	d50a      	bpl.n	800c65c <__pow5mult+0x84>
 800c646:	4639      	mov	r1, r7
 800c648:	4622      	mov	r2, r4
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7ff ff1a 	bl	800c484 <__multiply>
 800c650:	4639      	mov	r1, r7
 800c652:	4680      	mov	r8, r0
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff fe47 	bl	800c2e8 <_Bfree>
 800c65a:	4647      	mov	r7, r8
 800c65c:	106d      	asrs	r5, r5, #1
 800c65e:	d00b      	beq.n	800c678 <__pow5mult+0xa0>
 800c660:	6820      	ldr	r0, [r4, #0]
 800c662:	b938      	cbnz	r0, 800c674 <__pow5mult+0x9c>
 800c664:	4622      	mov	r2, r4
 800c666:	4621      	mov	r1, r4
 800c668:	4630      	mov	r0, r6
 800c66a:	f7ff ff0b 	bl	800c484 <__multiply>
 800c66e:	6020      	str	r0, [r4, #0]
 800c670:	f8c0 9000 	str.w	r9, [r0]
 800c674:	4604      	mov	r4, r0
 800c676:	e7e4      	b.n	800c642 <__pow5mult+0x6a>
 800c678:	4638      	mov	r0, r7
 800c67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c67e:	bf00      	nop
 800c680:	0800dcf8 	.word	0x0800dcf8
 800c684:	0800dac5 	.word	0x0800dac5
 800c688:	0800dba8 	.word	0x0800dba8

0800c68c <__lshift>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	460c      	mov	r4, r1
 800c692:	6849      	ldr	r1, [r1, #4]
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c69a:	68a3      	ldr	r3, [r4, #8]
 800c69c:	4607      	mov	r7, r0
 800c69e:	4691      	mov	r9, r2
 800c6a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6a4:	f108 0601 	add.w	r6, r8, #1
 800c6a8:	42b3      	cmp	r3, r6
 800c6aa:	db0b      	blt.n	800c6c4 <__lshift+0x38>
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f7ff fddb 	bl	800c268 <_Balloc>
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	b948      	cbnz	r0, 800c6ca <__lshift+0x3e>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	4b2a      	ldr	r3, [pc, #168]	; (800c764 <__lshift+0xd8>)
 800c6ba:	482b      	ldr	r0, [pc, #172]	; (800c768 <__lshift+0xdc>)
 800c6bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6c0:	f000 fc0e 	bl	800cee0 <__assert_func>
 800c6c4:	3101      	adds	r1, #1
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	e7ee      	b.n	800c6a8 <__lshift+0x1c>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f100 0114 	add.w	r1, r0, #20
 800c6d0:	f100 0210 	add.w	r2, r0, #16
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	4553      	cmp	r3, sl
 800c6d8:	db37      	blt.n	800c74a <__lshift+0xbe>
 800c6da:	6920      	ldr	r0, [r4, #16]
 800c6dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6e0:	f104 0314 	add.w	r3, r4, #20
 800c6e4:	f019 091f 	ands.w	r9, r9, #31
 800c6e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c6f0:	d02f      	beq.n	800c752 <__lshift+0xc6>
 800c6f2:	f1c9 0e20 	rsb	lr, r9, #32
 800c6f6:	468a      	mov	sl, r1
 800c6f8:	f04f 0c00 	mov.w	ip, #0
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	fa02 f209 	lsl.w	r2, r2, r9
 800c702:	ea42 020c 	orr.w	r2, r2, ip
 800c706:	f84a 2b04 	str.w	r2, [sl], #4
 800c70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70e:	4298      	cmp	r0, r3
 800c710:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c714:	d8f2      	bhi.n	800c6fc <__lshift+0x70>
 800c716:	1b03      	subs	r3, r0, r4
 800c718:	3b15      	subs	r3, #21
 800c71a:	f023 0303 	bic.w	r3, r3, #3
 800c71e:	3304      	adds	r3, #4
 800c720:	f104 0215 	add.w	r2, r4, #21
 800c724:	4290      	cmp	r0, r2
 800c726:	bf38      	it	cc
 800c728:	2304      	movcc	r3, #4
 800c72a:	f841 c003 	str.w	ip, [r1, r3]
 800c72e:	f1bc 0f00 	cmp.w	ip, #0
 800c732:	d001      	beq.n	800c738 <__lshift+0xac>
 800c734:	f108 0602 	add.w	r6, r8, #2
 800c738:	3e01      	subs	r6, #1
 800c73a:	4638      	mov	r0, r7
 800c73c:	612e      	str	r6, [r5, #16]
 800c73e:	4621      	mov	r1, r4
 800c740:	f7ff fdd2 	bl	800c2e8 <_Bfree>
 800c744:	4628      	mov	r0, r5
 800c746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c74a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c74e:	3301      	adds	r3, #1
 800c750:	e7c1      	b.n	800c6d6 <__lshift+0x4a>
 800c752:	3904      	subs	r1, #4
 800c754:	f853 2b04 	ldr.w	r2, [r3], #4
 800c758:	f841 2f04 	str.w	r2, [r1, #4]!
 800c75c:	4298      	cmp	r0, r3
 800c75e:	d8f9      	bhi.n	800c754 <__lshift+0xc8>
 800c760:	e7ea      	b.n	800c738 <__lshift+0xac>
 800c762:	bf00      	nop
 800c764:	0800db37 	.word	0x0800db37
 800c768:	0800dba8 	.word	0x0800dba8

0800c76c <__mcmp>:
 800c76c:	b530      	push	{r4, r5, lr}
 800c76e:	6902      	ldr	r2, [r0, #16]
 800c770:	690c      	ldr	r4, [r1, #16]
 800c772:	1b12      	subs	r2, r2, r4
 800c774:	d10e      	bne.n	800c794 <__mcmp+0x28>
 800c776:	f100 0314 	add.w	r3, r0, #20
 800c77a:	3114      	adds	r1, #20
 800c77c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c78c:	42a5      	cmp	r5, r4
 800c78e:	d003      	beq.n	800c798 <__mcmp+0x2c>
 800c790:	d305      	bcc.n	800c79e <__mcmp+0x32>
 800c792:	2201      	movs	r2, #1
 800c794:	4610      	mov	r0, r2
 800c796:	bd30      	pop	{r4, r5, pc}
 800c798:	4283      	cmp	r3, r0
 800c79a:	d3f3      	bcc.n	800c784 <__mcmp+0x18>
 800c79c:	e7fa      	b.n	800c794 <__mcmp+0x28>
 800c79e:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a2:	e7f7      	b.n	800c794 <__mcmp+0x28>

0800c7a4 <__mdiff>:
 800c7a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4690      	mov	r8, r2
 800c7b2:	f7ff ffdb 	bl	800c76c <__mcmp>
 800c7b6:	1e05      	subs	r5, r0, #0
 800c7b8:	d110      	bne.n	800c7dc <__mdiff+0x38>
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff fd53 	bl	800c268 <_Balloc>
 800c7c2:	b930      	cbnz	r0, 800c7d2 <__mdiff+0x2e>
 800c7c4:	4b3a      	ldr	r3, [pc, #232]	; (800c8b0 <__mdiff+0x10c>)
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	f240 2132 	movw	r1, #562	; 0x232
 800c7cc:	4839      	ldr	r0, [pc, #228]	; (800c8b4 <__mdiff+0x110>)
 800c7ce:	f000 fb87 	bl	800cee0 <__assert_func>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	bfa4      	itt	ge
 800c7de:	4643      	movge	r3, r8
 800c7e0:	46a0      	movge	r8, r4
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7e8:	bfa6      	itte	ge
 800c7ea:	461c      	movge	r4, r3
 800c7ec:	2500      	movge	r5, #0
 800c7ee:	2501      	movlt	r5, #1
 800c7f0:	f7ff fd3a 	bl	800c268 <_Balloc>
 800c7f4:	b920      	cbnz	r0, 800c800 <__mdiff+0x5c>
 800c7f6:	4b2e      	ldr	r3, [pc, #184]	; (800c8b0 <__mdiff+0x10c>)
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c7fe:	e7e5      	b.n	800c7cc <__mdiff+0x28>
 800c800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c804:	6926      	ldr	r6, [r4, #16]
 800c806:	60c5      	str	r5, [r0, #12]
 800c808:	f104 0914 	add.w	r9, r4, #20
 800c80c:	f108 0514 	add.w	r5, r8, #20
 800c810:	f100 0e14 	add.w	lr, r0, #20
 800c814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c81c:	f108 0210 	add.w	r2, r8, #16
 800c820:	46f2      	mov	sl, lr
 800c822:	2100      	movs	r1, #0
 800c824:	f859 3b04 	ldr.w	r3, [r9], #4
 800c828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c82c:	fa1f f883 	uxth.w	r8, r3
 800c830:	fa11 f18b 	uxtah	r1, r1, fp
 800c834:	0c1b      	lsrs	r3, r3, #16
 800c836:	eba1 0808 	sub.w	r8, r1, r8
 800c83a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c83e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c842:	fa1f f888 	uxth.w	r8, r8
 800c846:	1419      	asrs	r1, r3, #16
 800c848:	454e      	cmp	r6, r9
 800c84a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c84e:	f84a 3b04 	str.w	r3, [sl], #4
 800c852:	d8e7      	bhi.n	800c824 <__mdiff+0x80>
 800c854:	1b33      	subs	r3, r6, r4
 800c856:	3b15      	subs	r3, #21
 800c858:	f023 0303 	bic.w	r3, r3, #3
 800c85c:	3304      	adds	r3, #4
 800c85e:	3415      	adds	r4, #21
 800c860:	42a6      	cmp	r6, r4
 800c862:	bf38      	it	cc
 800c864:	2304      	movcc	r3, #4
 800c866:	441d      	add	r5, r3
 800c868:	4473      	add	r3, lr
 800c86a:	469e      	mov	lr, r3
 800c86c:	462e      	mov	r6, r5
 800c86e:	4566      	cmp	r6, ip
 800c870:	d30e      	bcc.n	800c890 <__mdiff+0xec>
 800c872:	f10c 0203 	add.w	r2, ip, #3
 800c876:	1b52      	subs	r2, r2, r5
 800c878:	f022 0203 	bic.w	r2, r2, #3
 800c87c:	3d03      	subs	r5, #3
 800c87e:	45ac      	cmp	ip, r5
 800c880:	bf38      	it	cc
 800c882:	2200      	movcc	r2, #0
 800c884:	441a      	add	r2, r3
 800c886:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c88a:	b17b      	cbz	r3, 800c8ac <__mdiff+0x108>
 800c88c:	6107      	str	r7, [r0, #16]
 800c88e:	e7a3      	b.n	800c7d8 <__mdiff+0x34>
 800c890:	f856 8b04 	ldr.w	r8, [r6], #4
 800c894:	fa11 f288 	uxtah	r2, r1, r8
 800c898:	1414      	asrs	r4, r2, #16
 800c89a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8a4:	f84e 2b04 	str.w	r2, [lr], #4
 800c8a8:	1421      	asrs	r1, r4, #16
 800c8aa:	e7e0      	b.n	800c86e <__mdiff+0xca>
 800c8ac:	3f01      	subs	r7, #1
 800c8ae:	e7ea      	b.n	800c886 <__mdiff+0xe2>
 800c8b0:	0800db37 	.word	0x0800db37
 800c8b4:	0800dba8 	.word	0x0800dba8

0800c8b8 <__d2b>:
 800c8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8bc:	4689      	mov	r9, r1
 800c8be:	2101      	movs	r1, #1
 800c8c0:	ec57 6b10 	vmov	r6, r7, d0
 800c8c4:	4690      	mov	r8, r2
 800c8c6:	f7ff fccf 	bl	800c268 <_Balloc>
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	b930      	cbnz	r0, 800c8dc <__d2b+0x24>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	4b25      	ldr	r3, [pc, #148]	; (800c968 <__d2b+0xb0>)
 800c8d2:	4826      	ldr	r0, [pc, #152]	; (800c96c <__d2b+0xb4>)
 800c8d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c8d8:	f000 fb02 	bl	800cee0 <__assert_func>
 800c8dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c8e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8e4:	bb35      	cbnz	r5, 800c934 <__d2b+0x7c>
 800c8e6:	2e00      	cmp	r6, #0
 800c8e8:	9301      	str	r3, [sp, #4]
 800c8ea:	d028      	beq.n	800c93e <__d2b+0x86>
 800c8ec:	4668      	mov	r0, sp
 800c8ee:	9600      	str	r6, [sp, #0]
 800c8f0:	f7ff fd82 	bl	800c3f8 <__lo0bits>
 800c8f4:	9900      	ldr	r1, [sp, #0]
 800c8f6:	b300      	cbz	r0, 800c93a <__d2b+0x82>
 800c8f8:	9a01      	ldr	r2, [sp, #4]
 800c8fa:	f1c0 0320 	rsb	r3, r0, #32
 800c8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c902:	430b      	orrs	r3, r1
 800c904:	40c2      	lsrs	r2, r0
 800c906:	6163      	str	r3, [r4, #20]
 800c908:	9201      	str	r2, [sp, #4]
 800c90a:	9b01      	ldr	r3, [sp, #4]
 800c90c:	61a3      	str	r3, [r4, #24]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bf14      	ite	ne
 800c912:	2202      	movne	r2, #2
 800c914:	2201      	moveq	r2, #1
 800c916:	6122      	str	r2, [r4, #16]
 800c918:	b1d5      	cbz	r5, 800c950 <__d2b+0x98>
 800c91a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c91e:	4405      	add	r5, r0
 800c920:	f8c9 5000 	str.w	r5, [r9]
 800c924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c928:	f8c8 0000 	str.w	r0, [r8]
 800c92c:	4620      	mov	r0, r4
 800c92e:	b003      	add	sp, #12
 800c930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c938:	e7d5      	b.n	800c8e6 <__d2b+0x2e>
 800c93a:	6161      	str	r1, [r4, #20]
 800c93c:	e7e5      	b.n	800c90a <__d2b+0x52>
 800c93e:	a801      	add	r0, sp, #4
 800c940:	f7ff fd5a 	bl	800c3f8 <__lo0bits>
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	6163      	str	r3, [r4, #20]
 800c948:	2201      	movs	r2, #1
 800c94a:	6122      	str	r2, [r4, #16]
 800c94c:	3020      	adds	r0, #32
 800c94e:	e7e3      	b.n	800c918 <__d2b+0x60>
 800c950:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c954:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c958:	f8c9 0000 	str.w	r0, [r9]
 800c95c:	6918      	ldr	r0, [r3, #16]
 800c95e:	f7ff fd2b 	bl	800c3b8 <__hi0bits>
 800c962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c966:	e7df      	b.n	800c928 <__d2b+0x70>
 800c968:	0800db37 	.word	0x0800db37
 800c96c:	0800dba8 	.word	0x0800dba8

0800c970 <_calloc_r>:
 800c970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c972:	fba1 2402 	umull	r2, r4, r1, r2
 800c976:	b94c      	cbnz	r4, 800c98c <_calloc_r+0x1c>
 800c978:	4611      	mov	r1, r2
 800c97a:	9201      	str	r2, [sp, #4]
 800c97c:	f000 f87a 	bl	800ca74 <_malloc_r>
 800c980:	9a01      	ldr	r2, [sp, #4]
 800c982:	4605      	mov	r5, r0
 800c984:	b930      	cbnz	r0, 800c994 <_calloc_r+0x24>
 800c986:	4628      	mov	r0, r5
 800c988:	b003      	add	sp, #12
 800c98a:	bd30      	pop	{r4, r5, pc}
 800c98c:	220c      	movs	r2, #12
 800c98e:	6002      	str	r2, [r0, #0]
 800c990:	2500      	movs	r5, #0
 800c992:	e7f8      	b.n	800c986 <_calloc_r+0x16>
 800c994:	4621      	mov	r1, r4
 800c996:	f7fd fe51 	bl	800a63c <memset>
 800c99a:	e7f4      	b.n	800c986 <_calloc_r+0x16>

0800c99c <_free_r>:
 800c99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	d044      	beq.n	800ca2c <_free_r+0x90>
 800c9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a6:	9001      	str	r0, [sp, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ae:	bfb8      	it	lt
 800c9b0:	18e4      	addlt	r4, r4, r3
 800c9b2:	f000 fb35 	bl	800d020 <__malloc_lock>
 800c9b6:	4a1e      	ldr	r2, [pc, #120]	; (800ca30 <_free_r+0x94>)
 800c9b8:	9801      	ldr	r0, [sp, #4]
 800c9ba:	6813      	ldr	r3, [r2, #0]
 800c9bc:	b933      	cbnz	r3, 800c9cc <_free_r+0x30>
 800c9be:	6063      	str	r3, [r4, #4]
 800c9c0:	6014      	str	r4, [r2, #0]
 800c9c2:	b003      	add	sp, #12
 800c9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9c8:	f000 bb30 	b.w	800d02c <__malloc_unlock>
 800c9cc:	42a3      	cmp	r3, r4
 800c9ce:	d908      	bls.n	800c9e2 <_free_r+0x46>
 800c9d0:	6825      	ldr	r5, [r4, #0]
 800c9d2:	1961      	adds	r1, r4, r5
 800c9d4:	428b      	cmp	r3, r1
 800c9d6:	bf01      	itttt	eq
 800c9d8:	6819      	ldreq	r1, [r3, #0]
 800c9da:	685b      	ldreq	r3, [r3, #4]
 800c9dc:	1949      	addeq	r1, r1, r5
 800c9de:	6021      	streq	r1, [r4, #0]
 800c9e0:	e7ed      	b.n	800c9be <_free_r+0x22>
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	b10b      	cbz	r3, 800c9ec <_free_r+0x50>
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	d9fa      	bls.n	800c9e2 <_free_r+0x46>
 800c9ec:	6811      	ldr	r1, [r2, #0]
 800c9ee:	1855      	adds	r5, r2, r1
 800c9f0:	42a5      	cmp	r5, r4
 800c9f2:	d10b      	bne.n	800ca0c <_free_r+0x70>
 800c9f4:	6824      	ldr	r4, [r4, #0]
 800c9f6:	4421      	add	r1, r4
 800c9f8:	1854      	adds	r4, r2, r1
 800c9fa:	42a3      	cmp	r3, r4
 800c9fc:	6011      	str	r1, [r2, #0]
 800c9fe:	d1e0      	bne.n	800c9c2 <_free_r+0x26>
 800ca00:	681c      	ldr	r4, [r3, #0]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	6053      	str	r3, [r2, #4]
 800ca06:	4421      	add	r1, r4
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	e7da      	b.n	800c9c2 <_free_r+0x26>
 800ca0c:	d902      	bls.n	800ca14 <_free_r+0x78>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	e7d6      	b.n	800c9c2 <_free_r+0x26>
 800ca14:	6825      	ldr	r5, [r4, #0]
 800ca16:	1961      	adds	r1, r4, r5
 800ca18:	428b      	cmp	r3, r1
 800ca1a:	bf04      	itt	eq
 800ca1c:	6819      	ldreq	r1, [r3, #0]
 800ca1e:	685b      	ldreq	r3, [r3, #4]
 800ca20:	6063      	str	r3, [r4, #4]
 800ca22:	bf04      	itt	eq
 800ca24:	1949      	addeq	r1, r1, r5
 800ca26:	6021      	streq	r1, [r4, #0]
 800ca28:	6054      	str	r4, [r2, #4]
 800ca2a:	e7ca      	b.n	800c9c2 <_free_r+0x26>
 800ca2c:	b003      	add	sp, #12
 800ca2e:	bd30      	pop	{r4, r5, pc}
 800ca30:	20000d18 	.word	0x20000d18

0800ca34 <sbrk_aligned>:
 800ca34:	b570      	push	{r4, r5, r6, lr}
 800ca36:	4e0e      	ldr	r6, [pc, #56]	; (800ca70 <sbrk_aligned+0x3c>)
 800ca38:	460c      	mov	r4, r1
 800ca3a:	6831      	ldr	r1, [r6, #0]
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	b911      	cbnz	r1, 800ca46 <sbrk_aligned+0x12>
 800ca40:	f000 f9e8 	bl	800ce14 <_sbrk_r>
 800ca44:	6030      	str	r0, [r6, #0]
 800ca46:	4621      	mov	r1, r4
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f000 f9e3 	bl	800ce14 <_sbrk_r>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	d00a      	beq.n	800ca68 <sbrk_aligned+0x34>
 800ca52:	1cc4      	adds	r4, r0, #3
 800ca54:	f024 0403 	bic.w	r4, r4, #3
 800ca58:	42a0      	cmp	r0, r4
 800ca5a:	d007      	beq.n	800ca6c <sbrk_aligned+0x38>
 800ca5c:	1a21      	subs	r1, r4, r0
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f000 f9d8 	bl	800ce14 <_sbrk_r>
 800ca64:	3001      	adds	r0, #1
 800ca66:	d101      	bne.n	800ca6c <sbrk_aligned+0x38>
 800ca68:	f04f 34ff 	mov.w	r4, #4294967295
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	bd70      	pop	{r4, r5, r6, pc}
 800ca70:	20000d1c 	.word	0x20000d1c

0800ca74 <_malloc_r>:
 800ca74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca78:	1ccd      	adds	r5, r1, #3
 800ca7a:	f025 0503 	bic.w	r5, r5, #3
 800ca7e:	3508      	adds	r5, #8
 800ca80:	2d0c      	cmp	r5, #12
 800ca82:	bf38      	it	cc
 800ca84:	250c      	movcc	r5, #12
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	4607      	mov	r7, r0
 800ca8a:	db01      	blt.n	800ca90 <_malloc_r+0x1c>
 800ca8c:	42a9      	cmp	r1, r5
 800ca8e:	d905      	bls.n	800ca9c <_malloc_r+0x28>
 800ca90:	230c      	movs	r3, #12
 800ca92:	603b      	str	r3, [r7, #0]
 800ca94:	2600      	movs	r6, #0
 800ca96:	4630      	mov	r0, r6
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	4e2e      	ldr	r6, [pc, #184]	; (800cb58 <_malloc_r+0xe4>)
 800ca9e:	f000 fabf 	bl	800d020 <__malloc_lock>
 800caa2:	6833      	ldr	r3, [r6, #0]
 800caa4:	461c      	mov	r4, r3
 800caa6:	bb34      	cbnz	r4, 800caf6 <_malloc_r+0x82>
 800caa8:	4629      	mov	r1, r5
 800caaa:	4638      	mov	r0, r7
 800caac:	f7ff ffc2 	bl	800ca34 <sbrk_aligned>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	4604      	mov	r4, r0
 800cab4:	d14d      	bne.n	800cb52 <_malloc_r+0xde>
 800cab6:	6834      	ldr	r4, [r6, #0]
 800cab8:	4626      	mov	r6, r4
 800caba:	2e00      	cmp	r6, #0
 800cabc:	d140      	bne.n	800cb40 <_malloc_r+0xcc>
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	4631      	mov	r1, r6
 800cac2:	4638      	mov	r0, r7
 800cac4:	eb04 0803 	add.w	r8, r4, r3
 800cac8:	f000 f9a4 	bl	800ce14 <_sbrk_r>
 800cacc:	4580      	cmp	r8, r0
 800cace:	d13a      	bne.n	800cb46 <_malloc_r+0xd2>
 800cad0:	6821      	ldr	r1, [r4, #0]
 800cad2:	3503      	adds	r5, #3
 800cad4:	1a6d      	subs	r5, r5, r1
 800cad6:	f025 0503 	bic.w	r5, r5, #3
 800cada:	3508      	adds	r5, #8
 800cadc:	2d0c      	cmp	r5, #12
 800cade:	bf38      	it	cc
 800cae0:	250c      	movcc	r5, #12
 800cae2:	4629      	mov	r1, r5
 800cae4:	4638      	mov	r0, r7
 800cae6:	f7ff ffa5 	bl	800ca34 <sbrk_aligned>
 800caea:	3001      	adds	r0, #1
 800caec:	d02b      	beq.n	800cb46 <_malloc_r+0xd2>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	442b      	add	r3, r5
 800caf2:	6023      	str	r3, [r4, #0]
 800caf4:	e00e      	b.n	800cb14 <_malloc_r+0xa0>
 800caf6:	6822      	ldr	r2, [r4, #0]
 800caf8:	1b52      	subs	r2, r2, r5
 800cafa:	d41e      	bmi.n	800cb3a <_malloc_r+0xc6>
 800cafc:	2a0b      	cmp	r2, #11
 800cafe:	d916      	bls.n	800cb2e <_malloc_r+0xba>
 800cb00:	1961      	adds	r1, r4, r5
 800cb02:	42a3      	cmp	r3, r4
 800cb04:	6025      	str	r5, [r4, #0]
 800cb06:	bf18      	it	ne
 800cb08:	6059      	strne	r1, [r3, #4]
 800cb0a:	6863      	ldr	r3, [r4, #4]
 800cb0c:	bf08      	it	eq
 800cb0e:	6031      	streq	r1, [r6, #0]
 800cb10:	5162      	str	r2, [r4, r5]
 800cb12:	604b      	str	r3, [r1, #4]
 800cb14:	4638      	mov	r0, r7
 800cb16:	f104 060b 	add.w	r6, r4, #11
 800cb1a:	f000 fa87 	bl	800d02c <__malloc_unlock>
 800cb1e:	f026 0607 	bic.w	r6, r6, #7
 800cb22:	1d23      	adds	r3, r4, #4
 800cb24:	1af2      	subs	r2, r6, r3
 800cb26:	d0b6      	beq.n	800ca96 <_malloc_r+0x22>
 800cb28:	1b9b      	subs	r3, r3, r6
 800cb2a:	50a3      	str	r3, [r4, r2]
 800cb2c:	e7b3      	b.n	800ca96 <_malloc_r+0x22>
 800cb2e:	6862      	ldr	r2, [r4, #4]
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	bf0c      	ite	eq
 800cb34:	6032      	streq	r2, [r6, #0]
 800cb36:	605a      	strne	r2, [r3, #4]
 800cb38:	e7ec      	b.n	800cb14 <_malloc_r+0xa0>
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	6864      	ldr	r4, [r4, #4]
 800cb3e:	e7b2      	b.n	800caa6 <_malloc_r+0x32>
 800cb40:	4634      	mov	r4, r6
 800cb42:	6876      	ldr	r6, [r6, #4]
 800cb44:	e7b9      	b.n	800caba <_malloc_r+0x46>
 800cb46:	230c      	movs	r3, #12
 800cb48:	603b      	str	r3, [r7, #0]
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	f000 fa6e 	bl	800d02c <__malloc_unlock>
 800cb50:	e7a1      	b.n	800ca96 <_malloc_r+0x22>
 800cb52:	6025      	str	r5, [r4, #0]
 800cb54:	e7de      	b.n	800cb14 <_malloc_r+0xa0>
 800cb56:	bf00      	nop
 800cb58:	20000d18 	.word	0x20000d18

0800cb5c <__ssputs_r>:
 800cb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb60:	688e      	ldr	r6, [r1, #8]
 800cb62:	429e      	cmp	r6, r3
 800cb64:	4682      	mov	sl, r0
 800cb66:	460c      	mov	r4, r1
 800cb68:	4690      	mov	r8, r2
 800cb6a:	461f      	mov	r7, r3
 800cb6c:	d838      	bhi.n	800cbe0 <__ssputs_r+0x84>
 800cb6e:	898a      	ldrh	r2, [r1, #12]
 800cb70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb74:	d032      	beq.n	800cbdc <__ssputs_r+0x80>
 800cb76:	6825      	ldr	r5, [r4, #0]
 800cb78:	6909      	ldr	r1, [r1, #16]
 800cb7a:	eba5 0901 	sub.w	r9, r5, r1
 800cb7e:	6965      	ldr	r5, [r4, #20]
 800cb80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb88:	3301      	adds	r3, #1
 800cb8a:	444b      	add	r3, r9
 800cb8c:	106d      	asrs	r5, r5, #1
 800cb8e:	429d      	cmp	r5, r3
 800cb90:	bf38      	it	cc
 800cb92:	461d      	movcc	r5, r3
 800cb94:	0553      	lsls	r3, r2, #21
 800cb96:	d531      	bpl.n	800cbfc <__ssputs_r+0xa0>
 800cb98:	4629      	mov	r1, r5
 800cb9a:	f7ff ff6b 	bl	800ca74 <_malloc_r>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	b950      	cbnz	r0, 800cbb8 <__ssputs_r+0x5c>
 800cba2:	230c      	movs	r3, #12
 800cba4:	f8ca 3000 	str.w	r3, [sl]
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb8:	6921      	ldr	r1, [r4, #16]
 800cbba:	464a      	mov	r2, r9
 800cbbc:	f7ff fb46 	bl	800c24c <memcpy>
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbca:	81a3      	strh	r3, [r4, #12]
 800cbcc:	6126      	str	r6, [r4, #16]
 800cbce:	6165      	str	r5, [r4, #20]
 800cbd0:	444e      	add	r6, r9
 800cbd2:	eba5 0509 	sub.w	r5, r5, r9
 800cbd6:	6026      	str	r6, [r4, #0]
 800cbd8:	60a5      	str	r5, [r4, #8]
 800cbda:	463e      	mov	r6, r7
 800cbdc:	42be      	cmp	r6, r7
 800cbde:	d900      	bls.n	800cbe2 <__ssputs_r+0x86>
 800cbe0:	463e      	mov	r6, r7
 800cbe2:	6820      	ldr	r0, [r4, #0]
 800cbe4:	4632      	mov	r2, r6
 800cbe6:	4641      	mov	r1, r8
 800cbe8:	f000 fa00 	bl	800cfec <memmove>
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	1b9b      	subs	r3, r3, r6
 800cbf0:	60a3      	str	r3, [r4, #8]
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	4433      	add	r3, r6
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e7db      	b.n	800cbb4 <__ssputs_r+0x58>
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	f000 fa1b 	bl	800d038 <_realloc_r>
 800cc02:	4606      	mov	r6, r0
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d1e1      	bne.n	800cbcc <__ssputs_r+0x70>
 800cc08:	6921      	ldr	r1, [r4, #16]
 800cc0a:	4650      	mov	r0, sl
 800cc0c:	f7ff fec6 	bl	800c99c <_free_r>
 800cc10:	e7c7      	b.n	800cba2 <__ssputs_r+0x46>
	...

0800cc14 <_svfiprintf_r>:
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	4698      	mov	r8, r3
 800cc1a:	898b      	ldrh	r3, [r1, #12]
 800cc1c:	061b      	lsls	r3, r3, #24
 800cc1e:	b09d      	sub	sp, #116	; 0x74
 800cc20:	4607      	mov	r7, r0
 800cc22:	460d      	mov	r5, r1
 800cc24:	4614      	mov	r4, r2
 800cc26:	d50e      	bpl.n	800cc46 <_svfiprintf_r+0x32>
 800cc28:	690b      	ldr	r3, [r1, #16]
 800cc2a:	b963      	cbnz	r3, 800cc46 <_svfiprintf_r+0x32>
 800cc2c:	2140      	movs	r1, #64	; 0x40
 800cc2e:	f7ff ff21 	bl	800ca74 <_malloc_r>
 800cc32:	6028      	str	r0, [r5, #0]
 800cc34:	6128      	str	r0, [r5, #16]
 800cc36:	b920      	cbnz	r0, 800cc42 <_svfiprintf_r+0x2e>
 800cc38:	230c      	movs	r3, #12
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc40:	e0d1      	b.n	800cde6 <_svfiprintf_r+0x1d2>
 800cc42:	2340      	movs	r3, #64	; 0x40
 800cc44:	616b      	str	r3, [r5, #20]
 800cc46:	2300      	movs	r3, #0
 800cc48:	9309      	str	r3, [sp, #36]	; 0x24
 800cc4a:	2320      	movs	r3, #32
 800cc4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc50:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc54:	2330      	movs	r3, #48	; 0x30
 800cc56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce00 <_svfiprintf_r+0x1ec>
 800cc5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc5e:	f04f 0901 	mov.w	r9, #1
 800cc62:	4623      	mov	r3, r4
 800cc64:	469a      	mov	sl, r3
 800cc66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc6a:	b10a      	cbz	r2, 800cc70 <_svfiprintf_r+0x5c>
 800cc6c:	2a25      	cmp	r2, #37	; 0x25
 800cc6e:	d1f9      	bne.n	800cc64 <_svfiprintf_r+0x50>
 800cc70:	ebba 0b04 	subs.w	fp, sl, r4
 800cc74:	d00b      	beq.n	800cc8e <_svfiprintf_r+0x7a>
 800cc76:	465b      	mov	r3, fp
 800cc78:	4622      	mov	r2, r4
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7ff ff6d 	bl	800cb5c <__ssputs_r>
 800cc82:	3001      	adds	r0, #1
 800cc84:	f000 80aa 	beq.w	800cddc <_svfiprintf_r+0x1c8>
 800cc88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc8a:	445a      	add	r2, fp
 800cc8c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc8e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 80a2 	beq.w	800cddc <_svfiprintf_r+0x1c8>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cca2:	f10a 0a01 	add.w	sl, sl, #1
 800cca6:	9304      	str	r3, [sp, #16]
 800cca8:	9307      	str	r3, [sp, #28]
 800ccaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccae:	931a      	str	r3, [sp, #104]	; 0x68
 800ccb0:	4654      	mov	r4, sl
 800ccb2:	2205      	movs	r2, #5
 800ccb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb8:	4851      	ldr	r0, [pc, #324]	; (800ce00 <_svfiprintf_r+0x1ec>)
 800ccba:	f7f3 fa91 	bl	80001e0 <memchr>
 800ccbe:	9a04      	ldr	r2, [sp, #16]
 800ccc0:	b9d8      	cbnz	r0, 800ccfa <_svfiprintf_r+0xe6>
 800ccc2:	06d0      	lsls	r0, r2, #27
 800ccc4:	bf44      	itt	mi
 800ccc6:	2320      	movmi	r3, #32
 800ccc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cccc:	0711      	lsls	r1, r2, #28
 800ccce:	bf44      	itt	mi
 800ccd0:	232b      	movmi	r3, #43	; 0x2b
 800ccd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccda:	2b2a      	cmp	r3, #42	; 0x2a
 800ccdc:	d015      	beq.n	800cd0a <_svfiprintf_r+0xf6>
 800ccde:	9a07      	ldr	r2, [sp, #28]
 800cce0:	4654      	mov	r4, sl
 800cce2:	2000      	movs	r0, #0
 800cce4:	f04f 0c0a 	mov.w	ip, #10
 800cce8:	4621      	mov	r1, r4
 800ccea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccee:	3b30      	subs	r3, #48	; 0x30
 800ccf0:	2b09      	cmp	r3, #9
 800ccf2:	d94e      	bls.n	800cd92 <_svfiprintf_r+0x17e>
 800ccf4:	b1b0      	cbz	r0, 800cd24 <_svfiprintf_r+0x110>
 800ccf6:	9207      	str	r2, [sp, #28]
 800ccf8:	e014      	b.n	800cd24 <_svfiprintf_r+0x110>
 800ccfa:	eba0 0308 	sub.w	r3, r0, r8
 800ccfe:	fa09 f303 	lsl.w	r3, r9, r3
 800cd02:	4313      	orrs	r3, r2
 800cd04:	9304      	str	r3, [sp, #16]
 800cd06:	46a2      	mov	sl, r4
 800cd08:	e7d2      	b.n	800ccb0 <_svfiprintf_r+0x9c>
 800cd0a:	9b03      	ldr	r3, [sp, #12]
 800cd0c:	1d19      	adds	r1, r3, #4
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	9103      	str	r1, [sp, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	bfbb      	ittet	lt
 800cd16:	425b      	neglt	r3, r3
 800cd18:	f042 0202 	orrlt.w	r2, r2, #2
 800cd1c:	9307      	strge	r3, [sp, #28]
 800cd1e:	9307      	strlt	r3, [sp, #28]
 800cd20:	bfb8      	it	lt
 800cd22:	9204      	strlt	r2, [sp, #16]
 800cd24:	7823      	ldrb	r3, [r4, #0]
 800cd26:	2b2e      	cmp	r3, #46	; 0x2e
 800cd28:	d10c      	bne.n	800cd44 <_svfiprintf_r+0x130>
 800cd2a:	7863      	ldrb	r3, [r4, #1]
 800cd2c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd2e:	d135      	bne.n	800cd9c <_svfiprintf_r+0x188>
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	1d1a      	adds	r2, r3, #4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	9203      	str	r2, [sp, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfb8      	it	lt
 800cd3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd40:	3402      	adds	r4, #2
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce10 <_svfiprintf_r+0x1fc>
 800cd48:	7821      	ldrb	r1, [r4, #0]
 800cd4a:	2203      	movs	r2, #3
 800cd4c:	4650      	mov	r0, sl
 800cd4e:	f7f3 fa47 	bl	80001e0 <memchr>
 800cd52:	b140      	cbz	r0, 800cd66 <_svfiprintf_r+0x152>
 800cd54:	2340      	movs	r3, #64	; 0x40
 800cd56:	eba0 000a 	sub.w	r0, r0, sl
 800cd5a:	fa03 f000 	lsl.w	r0, r3, r0
 800cd5e:	9b04      	ldr	r3, [sp, #16]
 800cd60:	4303      	orrs	r3, r0
 800cd62:	3401      	adds	r4, #1
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6a:	4826      	ldr	r0, [pc, #152]	; (800ce04 <_svfiprintf_r+0x1f0>)
 800cd6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd70:	2206      	movs	r2, #6
 800cd72:	f7f3 fa35 	bl	80001e0 <memchr>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d038      	beq.n	800cdec <_svfiprintf_r+0x1d8>
 800cd7a:	4b23      	ldr	r3, [pc, #140]	; (800ce08 <_svfiprintf_r+0x1f4>)
 800cd7c:	bb1b      	cbnz	r3, 800cdc6 <_svfiprintf_r+0x1b2>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	3307      	adds	r3, #7
 800cd82:	f023 0307 	bic.w	r3, r3, #7
 800cd86:	3308      	adds	r3, #8
 800cd88:	9303      	str	r3, [sp, #12]
 800cd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8c:	4433      	add	r3, r6
 800cd8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd90:	e767      	b.n	800cc62 <_svfiprintf_r+0x4e>
 800cd92:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd96:	460c      	mov	r4, r1
 800cd98:	2001      	movs	r0, #1
 800cd9a:	e7a5      	b.n	800cce8 <_svfiprintf_r+0xd4>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	3401      	adds	r4, #1
 800cda0:	9305      	str	r3, [sp, #20]
 800cda2:	4619      	mov	r1, r3
 800cda4:	f04f 0c0a 	mov.w	ip, #10
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdae:	3a30      	subs	r2, #48	; 0x30
 800cdb0:	2a09      	cmp	r2, #9
 800cdb2:	d903      	bls.n	800cdbc <_svfiprintf_r+0x1a8>
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0c5      	beq.n	800cd44 <_svfiprintf_r+0x130>
 800cdb8:	9105      	str	r1, [sp, #20]
 800cdba:	e7c3      	b.n	800cd44 <_svfiprintf_r+0x130>
 800cdbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e7f0      	b.n	800cda8 <_svfiprintf_r+0x194>
 800cdc6:	ab03      	add	r3, sp, #12
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	462a      	mov	r2, r5
 800cdcc:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <_svfiprintf_r+0x1f8>)
 800cdce:	a904      	add	r1, sp, #16
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	f7fd fcdb 	bl	800a78c <_printf_float>
 800cdd6:	1c42      	adds	r2, r0, #1
 800cdd8:	4606      	mov	r6, r0
 800cdda:	d1d6      	bne.n	800cd8a <_svfiprintf_r+0x176>
 800cddc:	89ab      	ldrh	r3, [r5, #12]
 800cdde:	065b      	lsls	r3, r3, #25
 800cde0:	f53f af2c 	bmi.w	800cc3c <_svfiprintf_r+0x28>
 800cde4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cde6:	b01d      	add	sp, #116	; 0x74
 800cde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdec:	ab03      	add	r3, sp, #12
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4b06      	ldr	r3, [pc, #24]	; (800ce0c <_svfiprintf_r+0x1f8>)
 800cdf4:	a904      	add	r1, sp, #16
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f7fd ff6c 	bl	800acd4 <_printf_i>
 800cdfc:	e7eb      	b.n	800cdd6 <_svfiprintf_r+0x1c2>
 800cdfe:	bf00      	nop
 800ce00:	0800dd04 	.word	0x0800dd04
 800ce04:	0800dd0e 	.word	0x0800dd0e
 800ce08:	0800a78d 	.word	0x0800a78d
 800ce0c:	0800cb5d 	.word	0x0800cb5d
 800ce10:	0800dd0a 	.word	0x0800dd0a

0800ce14 <_sbrk_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d06      	ldr	r5, [pc, #24]	; (800ce30 <_sbrk_r+0x1c>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	602b      	str	r3, [r5, #0]
 800ce20:	f7f6 fc2a 	bl	8003678 <_sbrk>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_sbrk_r+0x1a>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_sbrk_r+0x1a>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	20000d20 	.word	0x20000d20

0800ce34 <__sread>:
 800ce34:	b510      	push	{r4, lr}
 800ce36:	460c      	mov	r4, r1
 800ce38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce3c:	f000 fa84 	bl	800d348 <_read_r>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	bfab      	itete	ge
 800ce44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce46:	89a3      	ldrhlt	r3, [r4, #12]
 800ce48:	181b      	addge	r3, r3, r0
 800ce4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce4e:	bfac      	ite	ge
 800ce50:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce52:	81a3      	strhlt	r3, [r4, #12]
 800ce54:	bd10      	pop	{r4, pc}

0800ce56 <__swrite>:
 800ce56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5a:	461f      	mov	r7, r3
 800ce5c:	898b      	ldrh	r3, [r1, #12]
 800ce5e:	05db      	lsls	r3, r3, #23
 800ce60:	4605      	mov	r5, r0
 800ce62:	460c      	mov	r4, r1
 800ce64:	4616      	mov	r6, r2
 800ce66:	d505      	bpl.n	800ce74 <__swrite+0x1e>
 800ce68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f000 f898 	bl	800cfa4 <_lseek_r>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	4632      	mov	r2, r6
 800ce82:	463b      	mov	r3, r7
 800ce84:	4628      	mov	r0, r5
 800ce86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8a:	f000 b817 	b.w	800cebc <_write_r>

0800ce8e <__sseek>:
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	460c      	mov	r4, r1
 800ce92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce96:	f000 f885 	bl	800cfa4 <_lseek_r>
 800ce9a:	1c43      	adds	r3, r0, #1
 800ce9c:	89a3      	ldrh	r3, [r4, #12]
 800ce9e:	bf15      	itete	ne
 800cea0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cea2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cea6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceaa:	81a3      	strheq	r3, [r4, #12]
 800ceac:	bf18      	it	ne
 800ceae:	81a3      	strhne	r3, [r4, #12]
 800ceb0:	bd10      	pop	{r4, pc}

0800ceb2 <__sclose>:
 800ceb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb6:	f000 b831 	b.w	800cf1c <_close_r>
	...

0800cebc <_write_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_write_r+0x20>)
 800cec0:	4604      	mov	r4, r0
 800cec2:	4608      	mov	r0, r1
 800cec4:	4611      	mov	r1, r2
 800cec6:	2200      	movs	r2, #0
 800cec8:	602a      	str	r2, [r5, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7f6 fb83 	bl	80035d6 <_write>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_write_r+0x1e>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_write_r+0x1e>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20000d20 	.word	0x20000d20

0800cee0 <__assert_func>:
 800cee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cee2:	4614      	mov	r4, r2
 800cee4:	461a      	mov	r2, r3
 800cee6:	4b09      	ldr	r3, [pc, #36]	; (800cf0c <__assert_func+0x2c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4605      	mov	r5, r0
 800ceec:	68d8      	ldr	r0, [r3, #12]
 800ceee:	b14c      	cbz	r4, 800cf04 <__assert_func+0x24>
 800cef0:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <__assert_func+0x30>)
 800cef2:	9100      	str	r1, [sp, #0]
 800cef4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cef8:	4906      	ldr	r1, [pc, #24]	; (800cf14 <__assert_func+0x34>)
 800cefa:	462b      	mov	r3, r5
 800cefc:	f000 f81e 	bl	800cf3c <fiprintf>
 800cf00:	f000 fb02 	bl	800d508 <abort>
 800cf04:	4b04      	ldr	r3, [pc, #16]	; (800cf18 <__assert_func+0x38>)
 800cf06:	461c      	mov	r4, r3
 800cf08:	e7f3      	b.n	800cef2 <__assert_func+0x12>
 800cf0a:	bf00      	nop
 800cf0c:	20000010 	.word	0x20000010
 800cf10:	0800dd15 	.word	0x0800dd15
 800cf14:	0800dd22 	.word	0x0800dd22
 800cf18:	0800dd50 	.word	0x0800dd50

0800cf1c <_close_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d06      	ldr	r5, [pc, #24]	; (800cf38 <_close_r+0x1c>)
 800cf20:	2300      	movs	r3, #0
 800cf22:	4604      	mov	r4, r0
 800cf24:	4608      	mov	r0, r1
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	f7f6 fb71 	bl	800360e <_close>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_close_r+0x1a>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_close_r+0x1a>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	20000d20 	.word	0x20000d20

0800cf3c <fiprintf>:
 800cf3c:	b40e      	push	{r1, r2, r3}
 800cf3e:	b503      	push	{r0, r1, lr}
 800cf40:	4601      	mov	r1, r0
 800cf42:	ab03      	add	r3, sp, #12
 800cf44:	4805      	ldr	r0, [pc, #20]	; (800cf5c <fiprintf+0x20>)
 800cf46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf4a:	6800      	ldr	r0, [r0, #0]
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	f000 f8cb 	bl	800d0e8 <_vfiprintf_r>
 800cf52:	b002      	add	sp, #8
 800cf54:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf58:	b003      	add	sp, #12
 800cf5a:	4770      	bx	lr
 800cf5c:	20000010 	.word	0x20000010

0800cf60 <_fstat_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	4d07      	ldr	r5, [pc, #28]	; (800cf80 <_fstat_r+0x20>)
 800cf64:	2300      	movs	r3, #0
 800cf66:	4604      	mov	r4, r0
 800cf68:	4608      	mov	r0, r1
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	602b      	str	r3, [r5, #0]
 800cf6e:	f7f6 fb5a 	bl	8003626 <_fstat>
 800cf72:	1c43      	adds	r3, r0, #1
 800cf74:	d102      	bne.n	800cf7c <_fstat_r+0x1c>
 800cf76:	682b      	ldr	r3, [r5, #0]
 800cf78:	b103      	cbz	r3, 800cf7c <_fstat_r+0x1c>
 800cf7a:	6023      	str	r3, [r4, #0]
 800cf7c:	bd38      	pop	{r3, r4, r5, pc}
 800cf7e:	bf00      	nop
 800cf80:	20000d20 	.word	0x20000d20

0800cf84 <_isatty_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4d06      	ldr	r5, [pc, #24]	; (800cfa0 <_isatty_r+0x1c>)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	4608      	mov	r0, r1
 800cf8e:	602b      	str	r3, [r5, #0]
 800cf90:	f7f6 fb59 	bl	8003646 <_isatty>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d102      	bne.n	800cf9e <_isatty_r+0x1a>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	b103      	cbz	r3, 800cf9e <_isatty_r+0x1a>
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	20000d20 	.word	0x20000d20

0800cfa4 <_lseek_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4d07      	ldr	r5, [pc, #28]	; (800cfc4 <_lseek_r+0x20>)
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	4608      	mov	r0, r1
 800cfac:	4611      	mov	r1, r2
 800cfae:	2200      	movs	r2, #0
 800cfb0:	602a      	str	r2, [r5, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	f7f6 fb52 	bl	800365c <_lseek>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d102      	bne.n	800cfc2 <_lseek_r+0x1e>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	b103      	cbz	r3, 800cfc2 <_lseek_r+0x1e>
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	20000d20 	.word	0x20000d20

0800cfc8 <__ascii_mbtowc>:
 800cfc8:	b082      	sub	sp, #8
 800cfca:	b901      	cbnz	r1, 800cfce <__ascii_mbtowc+0x6>
 800cfcc:	a901      	add	r1, sp, #4
 800cfce:	b142      	cbz	r2, 800cfe2 <__ascii_mbtowc+0x1a>
 800cfd0:	b14b      	cbz	r3, 800cfe6 <__ascii_mbtowc+0x1e>
 800cfd2:	7813      	ldrb	r3, [r2, #0]
 800cfd4:	600b      	str	r3, [r1, #0]
 800cfd6:	7812      	ldrb	r2, [r2, #0]
 800cfd8:	1e10      	subs	r0, r2, #0
 800cfda:	bf18      	it	ne
 800cfdc:	2001      	movne	r0, #1
 800cfde:	b002      	add	sp, #8
 800cfe0:	4770      	bx	lr
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	e7fb      	b.n	800cfde <__ascii_mbtowc+0x16>
 800cfe6:	f06f 0001 	mvn.w	r0, #1
 800cfea:	e7f8      	b.n	800cfde <__ascii_mbtowc+0x16>

0800cfec <memmove>:
 800cfec:	4288      	cmp	r0, r1
 800cfee:	b510      	push	{r4, lr}
 800cff0:	eb01 0402 	add.w	r4, r1, r2
 800cff4:	d902      	bls.n	800cffc <memmove+0x10>
 800cff6:	4284      	cmp	r4, r0
 800cff8:	4623      	mov	r3, r4
 800cffa:	d807      	bhi.n	800d00c <memmove+0x20>
 800cffc:	1e43      	subs	r3, r0, #1
 800cffe:	42a1      	cmp	r1, r4
 800d000:	d008      	beq.n	800d014 <memmove+0x28>
 800d002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d00a:	e7f8      	b.n	800cffe <memmove+0x12>
 800d00c:	4402      	add	r2, r0
 800d00e:	4601      	mov	r1, r0
 800d010:	428a      	cmp	r2, r1
 800d012:	d100      	bne.n	800d016 <memmove+0x2a>
 800d014:	bd10      	pop	{r4, pc}
 800d016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d01e:	e7f7      	b.n	800d010 <memmove+0x24>

0800d020 <__malloc_lock>:
 800d020:	4801      	ldr	r0, [pc, #4]	; (800d028 <__malloc_lock+0x8>)
 800d022:	f7ff b8a4 	b.w	800c16e <__retarget_lock_acquire_recursive>
 800d026:	bf00      	nop
 800d028:	20000d14 	.word	0x20000d14

0800d02c <__malloc_unlock>:
 800d02c:	4801      	ldr	r0, [pc, #4]	; (800d034 <__malloc_unlock+0x8>)
 800d02e:	f7ff b89f 	b.w	800c170 <__retarget_lock_release_recursive>
 800d032:	bf00      	nop
 800d034:	20000d14 	.word	0x20000d14

0800d038 <_realloc_r>:
 800d038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d03c:	4680      	mov	r8, r0
 800d03e:	4614      	mov	r4, r2
 800d040:	460e      	mov	r6, r1
 800d042:	b921      	cbnz	r1, 800d04e <_realloc_r+0x16>
 800d044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d048:	4611      	mov	r1, r2
 800d04a:	f7ff bd13 	b.w	800ca74 <_malloc_r>
 800d04e:	b92a      	cbnz	r2, 800d05c <_realloc_r+0x24>
 800d050:	f7ff fca4 	bl	800c99c <_free_r>
 800d054:	4625      	mov	r5, r4
 800d056:	4628      	mov	r0, r5
 800d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d05c:	f000 fa5b 	bl	800d516 <_malloc_usable_size_r>
 800d060:	4284      	cmp	r4, r0
 800d062:	4607      	mov	r7, r0
 800d064:	d802      	bhi.n	800d06c <_realloc_r+0x34>
 800d066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d06a:	d812      	bhi.n	800d092 <_realloc_r+0x5a>
 800d06c:	4621      	mov	r1, r4
 800d06e:	4640      	mov	r0, r8
 800d070:	f7ff fd00 	bl	800ca74 <_malloc_r>
 800d074:	4605      	mov	r5, r0
 800d076:	2800      	cmp	r0, #0
 800d078:	d0ed      	beq.n	800d056 <_realloc_r+0x1e>
 800d07a:	42bc      	cmp	r4, r7
 800d07c:	4622      	mov	r2, r4
 800d07e:	4631      	mov	r1, r6
 800d080:	bf28      	it	cs
 800d082:	463a      	movcs	r2, r7
 800d084:	f7ff f8e2 	bl	800c24c <memcpy>
 800d088:	4631      	mov	r1, r6
 800d08a:	4640      	mov	r0, r8
 800d08c:	f7ff fc86 	bl	800c99c <_free_r>
 800d090:	e7e1      	b.n	800d056 <_realloc_r+0x1e>
 800d092:	4635      	mov	r5, r6
 800d094:	e7df      	b.n	800d056 <_realloc_r+0x1e>

0800d096 <__sfputc_r>:
 800d096:	6893      	ldr	r3, [r2, #8]
 800d098:	3b01      	subs	r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	b410      	push	{r4}
 800d09e:	6093      	str	r3, [r2, #8]
 800d0a0:	da08      	bge.n	800d0b4 <__sfputc_r+0x1e>
 800d0a2:	6994      	ldr	r4, [r2, #24]
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	db01      	blt.n	800d0ac <__sfputc_r+0x16>
 800d0a8:	290a      	cmp	r1, #10
 800d0aa:	d103      	bne.n	800d0b4 <__sfputc_r+0x1e>
 800d0ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0b0:	f000 b95c 	b.w	800d36c <__swbuf_r>
 800d0b4:	6813      	ldr	r3, [r2, #0]
 800d0b6:	1c58      	adds	r0, r3, #1
 800d0b8:	6010      	str	r0, [r2, #0]
 800d0ba:	7019      	strb	r1, [r3, #0]
 800d0bc:	4608      	mov	r0, r1
 800d0be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <__sfputs_r>:
 800d0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c6:	4606      	mov	r6, r0
 800d0c8:	460f      	mov	r7, r1
 800d0ca:	4614      	mov	r4, r2
 800d0cc:	18d5      	adds	r5, r2, r3
 800d0ce:	42ac      	cmp	r4, r5
 800d0d0:	d101      	bne.n	800d0d6 <__sfputs_r+0x12>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	e007      	b.n	800d0e6 <__sfputs_r+0x22>
 800d0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0da:	463a      	mov	r2, r7
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff ffda 	bl	800d096 <__sfputc_r>
 800d0e2:	1c43      	adds	r3, r0, #1
 800d0e4:	d1f3      	bne.n	800d0ce <__sfputs_r+0xa>
 800d0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0e8 <_vfiprintf_r>:
 800d0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	b09d      	sub	sp, #116	; 0x74
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	4698      	mov	r8, r3
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	b118      	cbz	r0, 800d100 <_vfiprintf_r+0x18>
 800d0f8:	6983      	ldr	r3, [r0, #24]
 800d0fa:	b90b      	cbnz	r3, 800d100 <_vfiprintf_r+0x18>
 800d0fc:	f7fe ff94 	bl	800c028 <__sinit>
 800d100:	4b89      	ldr	r3, [pc, #548]	; (800d328 <_vfiprintf_r+0x240>)
 800d102:	429d      	cmp	r5, r3
 800d104:	d11b      	bne.n	800d13e <_vfiprintf_r+0x56>
 800d106:	6875      	ldr	r5, [r6, #4]
 800d108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d10a:	07d9      	lsls	r1, r3, #31
 800d10c:	d405      	bmi.n	800d11a <_vfiprintf_r+0x32>
 800d10e:	89ab      	ldrh	r3, [r5, #12]
 800d110:	059a      	lsls	r2, r3, #22
 800d112:	d402      	bmi.n	800d11a <_vfiprintf_r+0x32>
 800d114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d116:	f7ff f82a 	bl	800c16e <__retarget_lock_acquire_recursive>
 800d11a:	89ab      	ldrh	r3, [r5, #12]
 800d11c:	071b      	lsls	r3, r3, #28
 800d11e:	d501      	bpl.n	800d124 <_vfiprintf_r+0x3c>
 800d120:	692b      	ldr	r3, [r5, #16]
 800d122:	b9eb      	cbnz	r3, 800d160 <_vfiprintf_r+0x78>
 800d124:	4629      	mov	r1, r5
 800d126:	4630      	mov	r0, r6
 800d128:	f000 f980 	bl	800d42c <__swsetup_r>
 800d12c:	b1c0      	cbz	r0, 800d160 <_vfiprintf_r+0x78>
 800d12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d130:	07dc      	lsls	r4, r3, #31
 800d132:	d50e      	bpl.n	800d152 <_vfiprintf_r+0x6a>
 800d134:	f04f 30ff 	mov.w	r0, #4294967295
 800d138:	b01d      	add	sp, #116	; 0x74
 800d13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13e:	4b7b      	ldr	r3, [pc, #492]	; (800d32c <_vfiprintf_r+0x244>)
 800d140:	429d      	cmp	r5, r3
 800d142:	d101      	bne.n	800d148 <_vfiprintf_r+0x60>
 800d144:	68b5      	ldr	r5, [r6, #8]
 800d146:	e7df      	b.n	800d108 <_vfiprintf_r+0x20>
 800d148:	4b79      	ldr	r3, [pc, #484]	; (800d330 <_vfiprintf_r+0x248>)
 800d14a:	429d      	cmp	r5, r3
 800d14c:	bf08      	it	eq
 800d14e:	68f5      	ldreq	r5, [r6, #12]
 800d150:	e7da      	b.n	800d108 <_vfiprintf_r+0x20>
 800d152:	89ab      	ldrh	r3, [r5, #12]
 800d154:	0598      	lsls	r0, r3, #22
 800d156:	d4ed      	bmi.n	800d134 <_vfiprintf_r+0x4c>
 800d158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d15a:	f7ff f809 	bl	800c170 <__retarget_lock_release_recursive>
 800d15e:	e7e9      	b.n	800d134 <_vfiprintf_r+0x4c>
 800d160:	2300      	movs	r3, #0
 800d162:	9309      	str	r3, [sp, #36]	; 0x24
 800d164:	2320      	movs	r3, #32
 800d166:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d16a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d16e:	2330      	movs	r3, #48	; 0x30
 800d170:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d334 <_vfiprintf_r+0x24c>
 800d174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d178:	f04f 0901 	mov.w	r9, #1
 800d17c:	4623      	mov	r3, r4
 800d17e:	469a      	mov	sl, r3
 800d180:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d184:	b10a      	cbz	r2, 800d18a <_vfiprintf_r+0xa2>
 800d186:	2a25      	cmp	r2, #37	; 0x25
 800d188:	d1f9      	bne.n	800d17e <_vfiprintf_r+0x96>
 800d18a:	ebba 0b04 	subs.w	fp, sl, r4
 800d18e:	d00b      	beq.n	800d1a8 <_vfiprintf_r+0xc0>
 800d190:	465b      	mov	r3, fp
 800d192:	4622      	mov	r2, r4
 800d194:	4629      	mov	r1, r5
 800d196:	4630      	mov	r0, r6
 800d198:	f7ff ff94 	bl	800d0c4 <__sfputs_r>
 800d19c:	3001      	adds	r0, #1
 800d19e:	f000 80aa 	beq.w	800d2f6 <_vfiprintf_r+0x20e>
 800d1a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1a4:	445a      	add	r2, fp
 800d1a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 80a2 	beq.w	800d2f6 <_vfiprintf_r+0x20e>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1bc:	f10a 0a01 	add.w	sl, sl, #1
 800d1c0:	9304      	str	r3, [sp, #16]
 800d1c2:	9307      	str	r3, [sp, #28]
 800d1c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1c8:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ca:	4654      	mov	r4, sl
 800d1cc:	2205      	movs	r2, #5
 800d1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d2:	4858      	ldr	r0, [pc, #352]	; (800d334 <_vfiprintf_r+0x24c>)
 800d1d4:	f7f3 f804 	bl	80001e0 <memchr>
 800d1d8:	9a04      	ldr	r2, [sp, #16]
 800d1da:	b9d8      	cbnz	r0, 800d214 <_vfiprintf_r+0x12c>
 800d1dc:	06d1      	lsls	r1, r2, #27
 800d1de:	bf44      	itt	mi
 800d1e0:	2320      	movmi	r3, #32
 800d1e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1e6:	0713      	lsls	r3, r2, #28
 800d1e8:	bf44      	itt	mi
 800d1ea:	232b      	movmi	r3, #43	; 0x2b
 800d1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d1f6:	d015      	beq.n	800d224 <_vfiprintf_r+0x13c>
 800d1f8:	9a07      	ldr	r2, [sp, #28]
 800d1fa:	4654      	mov	r4, sl
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	f04f 0c0a 	mov.w	ip, #10
 800d202:	4621      	mov	r1, r4
 800d204:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d208:	3b30      	subs	r3, #48	; 0x30
 800d20a:	2b09      	cmp	r3, #9
 800d20c:	d94e      	bls.n	800d2ac <_vfiprintf_r+0x1c4>
 800d20e:	b1b0      	cbz	r0, 800d23e <_vfiprintf_r+0x156>
 800d210:	9207      	str	r2, [sp, #28]
 800d212:	e014      	b.n	800d23e <_vfiprintf_r+0x156>
 800d214:	eba0 0308 	sub.w	r3, r0, r8
 800d218:	fa09 f303 	lsl.w	r3, r9, r3
 800d21c:	4313      	orrs	r3, r2
 800d21e:	9304      	str	r3, [sp, #16]
 800d220:	46a2      	mov	sl, r4
 800d222:	e7d2      	b.n	800d1ca <_vfiprintf_r+0xe2>
 800d224:	9b03      	ldr	r3, [sp, #12]
 800d226:	1d19      	adds	r1, r3, #4
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	9103      	str	r1, [sp, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfbb      	ittet	lt
 800d230:	425b      	neglt	r3, r3
 800d232:	f042 0202 	orrlt.w	r2, r2, #2
 800d236:	9307      	strge	r3, [sp, #28]
 800d238:	9307      	strlt	r3, [sp, #28]
 800d23a:	bfb8      	it	lt
 800d23c:	9204      	strlt	r2, [sp, #16]
 800d23e:	7823      	ldrb	r3, [r4, #0]
 800d240:	2b2e      	cmp	r3, #46	; 0x2e
 800d242:	d10c      	bne.n	800d25e <_vfiprintf_r+0x176>
 800d244:	7863      	ldrb	r3, [r4, #1]
 800d246:	2b2a      	cmp	r3, #42	; 0x2a
 800d248:	d135      	bne.n	800d2b6 <_vfiprintf_r+0x1ce>
 800d24a:	9b03      	ldr	r3, [sp, #12]
 800d24c:	1d1a      	adds	r2, r3, #4
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	9203      	str	r2, [sp, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	bfb8      	it	lt
 800d256:	f04f 33ff 	movlt.w	r3, #4294967295
 800d25a:	3402      	adds	r4, #2
 800d25c:	9305      	str	r3, [sp, #20]
 800d25e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d344 <_vfiprintf_r+0x25c>
 800d262:	7821      	ldrb	r1, [r4, #0]
 800d264:	2203      	movs	r2, #3
 800d266:	4650      	mov	r0, sl
 800d268:	f7f2 ffba 	bl	80001e0 <memchr>
 800d26c:	b140      	cbz	r0, 800d280 <_vfiprintf_r+0x198>
 800d26e:	2340      	movs	r3, #64	; 0x40
 800d270:	eba0 000a 	sub.w	r0, r0, sl
 800d274:	fa03 f000 	lsl.w	r0, r3, r0
 800d278:	9b04      	ldr	r3, [sp, #16]
 800d27a:	4303      	orrs	r3, r0
 800d27c:	3401      	adds	r4, #1
 800d27e:	9304      	str	r3, [sp, #16]
 800d280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d284:	482c      	ldr	r0, [pc, #176]	; (800d338 <_vfiprintf_r+0x250>)
 800d286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d28a:	2206      	movs	r2, #6
 800d28c:	f7f2 ffa8 	bl	80001e0 <memchr>
 800d290:	2800      	cmp	r0, #0
 800d292:	d03f      	beq.n	800d314 <_vfiprintf_r+0x22c>
 800d294:	4b29      	ldr	r3, [pc, #164]	; (800d33c <_vfiprintf_r+0x254>)
 800d296:	bb1b      	cbnz	r3, 800d2e0 <_vfiprintf_r+0x1f8>
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	3307      	adds	r3, #7
 800d29c:	f023 0307 	bic.w	r3, r3, #7
 800d2a0:	3308      	adds	r3, #8
 800d2a2:	9303      	str	r3, [sp, #12]
 800d2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a6:	443b      	add	r3, r7
 800d2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2aa:	e767      	b.n	800d17c <_vfiprintf_r+0x94>
 800d2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	e7a5      	b.n	800d202 <_vfiprintf_r+0x11a>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	3401      	adds	r4, #1
 800d2ba:	9305      	str	r3, [sp, #20]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	f04f 0c0a 	mov.w	ip, #10
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2c8:	3a30      	subs	r2, #48	; 0x30
 800d2ca:	2a09      	cmp	r2, #9
 800d2cc:	d903      	bls.n	800d2d6 <_vfiprintf_r+0x1ee>
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d0c5      	beq.n	800d25e <_vfiprintf_r+0x176>
 800d2d2:	9105      	str	r1, [sp, #20]
 800d2d4:	e7c3      	b.n	800d25e <_vfiprintf_r+0x176>
 800d2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2da:	4604      	mov	r4, r0
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e7f0      	b.n	800d2c2 <_vfiprintf_r+0x1da>
 800d2e0:	ab03      	add	r3, sp, #12
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	462a      	mov	r2, r5
 800d2e6:	4b16      	ldr	r3, [pc, #88]	; (800d340 <_vfiprintf_r+0x258>)
 800d2e8:	a904      	add	r1, sp, #16
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f7fd fa4e 	bl	800a78c <_printf_float>
 800d2f0:	4607      	mov	r7, r0
 800d2f2:	1c78      	adds	r0, r7, #1
 800d2f4:	d1d6      	bne.n	800d2a4 <_vfiprintf_r+0x1bc>
 800d2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2f8:	07d9      	lsls	r1, r3, #31
 800d2fa:	d405      	bmi.n	800d308 <_vfiprintf_r+0x220>
 800d2fc:	89ab      	ldrh	r3, [r5, #12]
 800d2fe:	059a      	lsls	r2, r3, #22
 800d300:	d402      	bmi.n	800d308 <_vfiprintf_r+0x220>
 800d302:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d304:	f7fe ff34 	bl	800c170 <__retarget_lock_release_recursive>
 800d308:	89ab      	ldrh	r3, [r5, #12]
 800d30a:	065b      	lsls	r3, r3, #25
 800d30c:	f53f af12 	bmi.w	800d134 <_vfiprintf_r+0x4c>
 800d310:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d312:	e711      	b.n	800d138 <_vfiprintf_r+0x50>
 800d314:	ab03      	add	r3, sp, #12
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	462a      	mov	r2, r5
 800d31a:	4b09      	ldr	r3, [pc, #36]	; (800d340 <_vfiprintf_r+0x258>)
 800d31c:	a904      	add	r1, sp, #16
 800d31e:	4630      	mov	r0, r6
 800d320:	f7fd fcd8 	bl	800acd4 <_printf_i>
 800d324:	e7e4      	b.n	800d2f0 <_vfiprintf_r+0x208>
 800d326:	bf00      	nop
 800d328:	0800db68 	.word	0x0800db68
 800d32c:	0800db88 	.word	0x0800db88
 800d330:	0800db48 	.word	0x0800db48
 800d334:	0800dd04 	.word	0x0800dd04
 800d338:	0800dd0e 	.word	0x0800dd0e
 800d33c:	0800a78d 	.word	0x0800a78d
 800d340:	0800d0c5 	.word	0x0800d0c5
 800d344:	0800dd0a 	.word	0x0800dd0a

0800d348 <_read_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4d07      	ldr	r5, [pc, #28]	; (800d368 <_read_r+0x20>)
 800d34c:	4604      	mov	r4, r0
 800d34e:	4608      	mov	r0, r1
 800d350:	4611      	mov	r1, r2
 800d352:	2200      	movs	r2, #0
 800d354:	602a      	str	r2, [r5, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	f7f6 f920 	bl	800359c <_read>
 800d35c:	1c43      	adds	r3, r0, #1
 800d35e:	d102      	bne.n	800d366 <_read_r+0x1e>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	b103      	cbz	r3, 800d366 <_read_r+0x1e>
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	bd38      	pop	{r3, r4, r5, pc}
 800d368:	20000d20 	.word	0x20000d20

0800d36c <__swbuf_r>:
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	460e      	mov	r6, r1
 800d370:	4614      	mov	r4, r2
 800d372:	4605      	mov	r5, r0
 800d374:	b118      	cbz	r0, 800d37e <__swbuf_r+0x12>
 800d376:	6983      	ldr	r3, [r0, #24]
 800d378:	b90b      	cbnz	r3, 800d37e <__swbuf_r+0x12>
 800d37a:	f7fe fe55 	bl	800c028 <__sinit>
 800d37e:	4b21      	ldr	r3, [pc, #132]	; (800d404 <__swbuf_r+0x98>)
 800d380:	429c      	cmp	r4, r3
 800d382:	d12b      	bne.n	800d3dc <__swbuf_r+0x70>
 800d384:	686c      	ldr	r4, [r5, #4]
 800d386:	69a3      	ldr	r3, [r4, #24]
 800d388:	60a3      	str	r3, [r4, #8]
 800d38a:	89a3      	ldrh	r3, [r4, #12]
 800d38c:	071a      	lsls	r2, r3, #28
 800d38e:	d52f      	bpl.n	800d3f0 <__swbuf_r+0x84>
 800d390:	6923      	ldr	r3, [r4, #16]
 800d392:	b36b      	cbz	r3, 800d3f0 <__swbuf_r+0x84>
 800d394:	6923      	ldr	r3, [r4, #16]
 800d396:	6820      	ldr	r0, [r4, #0]
 800d398:	1ac0      	subs	r0, r0, r3
 800d39a:	6963      	ldr	r3, [r4, #20]
 800d39c:	b2f6      	uxtb	r6, r6
 800d39e:	4283      	cmp	r3, r0
 800d3a0:	4637      	mov	r7, r6
 800d3a2:	dc04      	bgt.n	800d3ae <__swbuf_r+0x42>
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	f7fe fdaa 	bl	800bf00 <_fflush_r>
 800d3ac:	bb30      	cbnz	r0, 800d3fc <__swbuf_r+0x90>
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	60a3      	str	r3, [r4, #8]
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	1c5a      	adds	r2, r3, #1
 800d3b8:	6022      	str	r2, [r4, #0]
 800d3ba:	701e      	strb	r6, [r3, #0]
 800d3bc:	6963      	ldr	r3, [r4, #20]
 800d3be:	3001      	adds	r0, #1
 800d3c0:	4283      	cmp	r3, r0
 800d3c2:	d004      	beq.n	800d3ce <__swbuf_r+0x62>
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	07db      	lsls	r3, r3, #31
 800d3c8:	d506      	bpl.n	800d3d8 <__swbuf_r+0x6c>
 800d3ca:	2e0a      	cmp	r6, #10
 800d3cc:	d104      	bne.n	800d3d8 <__swbuf_r+0x6c>
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7fe fd95 	bl	800bf00 <_fflush_r>
 800d3d6:	b988      	cbnz	r0, 800d3fc <__swbuf_r+0x90>
 800d3d8:	4638      	mov	r0, r7
 800d3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3dc:	4b0a      	ldr	r3, [pc, #40]	; (800d408 <__swbuf_r+0x9c>)
 800d3de:	429c      	cmp	r4, r3
 800d3e0:	d101      	bne.n	800d3e6 <__swbuf_r+0x7a>
 800d3e2:	68ac      	ldr	r4, [r5, #8]
 800d3e4:	e7cf      	b.n	800d386 <__swbuf_r+0x1a>
 800d3e6:	4b09      	ldr	r3, [pc, #36]	; (800d40c <__swbuf_r+0xa0>)
 800d3e8:	429c      	cmp	r4, r3
 800d3ea:	bf08      	it	eq
 800d3ec:	68ec      	ldreq	r4, [r5, #12]
 800d3ee:	e7ca      	b.n	800d386 <__swbuf_r+0x1a>
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f000 f81a 	bl	800d42c <__swsetup_r>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d0cb      	beq.n	800d394 <__swbuf_r+0x28>
 800d3fc:	f04f 37ff 	mov.w	r7, #4294967295
 800d400:	e7ea      	b.n	800d3d8 <__swbuf_r+0x6c>
 800d402:	bf00      	nop
 800d404:	0800db68 	.word	0x0800db68
 800d408:	0800db88 	.word	0x0800db88
 800d40c:	0800db48 	.word	0x0800db48

0800d410 <__ascii_wctomb>:
 800d410:	b149      	cbz	r1, 800d426 <__ascii_wctomb+0x16>
 800d412:	2aff      	cmp	r2, #255	; 0xff
 800d414:	bf85      	ittet	hi
 800d416:	238a      	movhi	r3, #138	; 0x8a
 800d418:	6003      	strhi	r3, [r0, #0]
 800d41a:	700a      	strbls	r2, [r1, #0]
 800d41c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d420:	bf98      	it	ls
 800d422:	2001      	movls	r0, #1
 800d424:	4770      	bx	lr
 800d426:	4608      	mov	r0, r1
 800d428:	4770      	bx	lr
	...

0800d42c <__swsetup_r>:
 800d42c:	4b32      	ldr	r3, [pc, #200]	; (800d4f8 <__swsetup_r+0xcc>)
 800d42e:	b570      	push	{r4, r5, r6, lr}
 800d430:	681d      	ldr	r5, [r3, #0]
 800d432:	4606      	mov	r6, r0
 800d434:	460c      	mov	r4, r1
 800d436:	b125      	cbz	r5, 800d442 <__swsetup_r+0x16>
 800d438:	69ab      	ldr	r3, [r5, #24]
 800d43a:	b913      	cbnz	r3, 800d442 <__swsetup_r+0x16>
 800d43c:	4628      	mov	r0, r5
 800d43e:	f7fe fdf3 	bl	800c028 <__sinit>
 800d442:	4b2e      	ldr	r3, [pc, #184]	; (800d4fc <__swsetup_r+0xd0>)
 800d444:	429c      	cmp	r4, r3
 800d446:	d10f      	bne.n	800d468 <__swsetup_r+0x3c>
 800d448:	686c      	ldr	r4, [r5, #4]
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d450:	0719      	lsls	r1, r3, #28
 800d452:	d42c      	bmi.n	800d4ae <__swsetup_r+0x82>
 800d454:	06dd      	lsls	r5, r3, #27
 800d456:	d411      	bmi.n	800d47c <__swsetup_r+0x50>
 800d458:	2309      	movs	r3, #9
 800d45a:	6033      	str	r3, [r6, #0]
 800d45c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	f04f 30ff 	mov.w	r0, #4294967295
 800d466:	e03e      	b.n	800d4e6 <__swsetup_r+0xba>
 800d468:	4b25      	ldr	r3, [pc, #148]	; (800d500 <__swsetup_r+0xd4>)
 800d46a:	429c      	cmp	r4, r3
 800d46c:	d101      	bne.n	800d472 <__swsetup_r+0x46>
 800d46e:	68ac      	ldr	r4, [r5, #8]
 800d470:	e7eb      	b.n	800d44a <__swsetup_r+0x1e>
 800d472:	4b24      	ldr	r3, [pc, #144]	; (800d504 <__swsetup_r+0xd8>)
 800d474:	429c      	cmp	r4, r3
 800d476:	bf08      	it	eq
 800d478:	68ec      	ldreq	r4, [r5, #12]
 800d47a:	e7e6      	b.n	800d44a <__swsetup_r+0x1e>
 800d47c:	0758      	lsls	r0, r3, #29
 800d47e:	d512      	bpl.n	800d4a6 <__swsetup_r+0x7a>
 800d480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d482:	b141      	cbz	r1, 800d496 <__swsetup_r+0x6a>
 800d484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d488:	4299      	cmp	r1, r3
 800d48a:	d002      	beq.n	800d492 <__swsetup_r+0x66>
 800d48c:	4630      	mov	r0, r6
 800d48e:	f7ff fa85 	bl	800c99c <_free_r>
 800d492:	2300      	movs	r3, #0
 800d494:	6363      	str	r3, [r4, #52]	; 0x34
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d49c:	81a3      	strh	r3, [r4, #12]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	6063      	str	r3, [r4, #4]
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f043 0308 	orr.w	r3, r3, #8
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	b94b      	cbnz	r3, 800d4c6 <__swsetup_r+0x9a>
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4bc:	d003      	beq.n	800d4c6 <__swsetup_r+0x9a>
 800d4be:	4621      	mov	r1, r4
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f7fe fe7b 	bl	800c1bc <__smakebuf_r>
 800d4c6:	89a0      	ldrh	r0, [r4, #12]
 800d4c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4cc:	f010 0301 	ands.w	r3, r0, #1
 800d4d0:	d00a      	beq.n	800d4e8 <__swsetup_r+0xbc>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	60a3      	str	r3, [r4, #8]
 800d4d6:	6963      	ldr	r3, [r4, #20]
 800d4d8:	425b      	negs	r3, r3
 800d4da:	61a3      	str	r3, [r4, #24]
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	b943      	cbnz	r3, 800d4f2 <__swsetup_r+0xc6>
 800d4e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4e4:	d1ba      	bne.n	800d45c <__swsetup_r+0x30>
 800d4e6:	bd70      	pop	{r4, r5, r6, pc}
 800d4e8:	0781      	lsls	r1, r0, #30
 800d4ea:	bf58      	it	pl
 800d4ec:	6963      	ldrpl	r3, [r4, #20]
 800d4ee:	60a3      	str	r3, [r4, #8]
 800d4f0:	e7f4      	b.n	800d4dc <__swsetup_r+0xb0>
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	e7f7      	b.n	800d4e6 <__swsetup_r+0xba>
 800d4f6:	bf00      	nop
 800d4f8:	20000010 	.word	0x20000010
 800d4fc:	0800db68 	.word	0x0800db68
 800d500:	0800db88 	.word	0x0800db88
 800d504:	0800db48 	.word	0x0800db48

0800d508 <abort>:
 800d508:	b508      	push	{r3, lr}
 800d50a:	2006      	movs	r0, #6
 800d50c:	f000 f834 	bl	800d578 <raise>
 800d510:	2001      	movs	r0, #1
 800d512:	f7f6 f839 	bl	8003588 <_exit>

0800d516 <_malloc_usable_size_r>:
 800d516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d51a:	1f18      	subs	r0, r3, #4
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	bfbc      	itt	lt
 800d520:	580b      	ldrlt	r3, [r1, r0]
 800d522:	18c0      	addlt	r0, r0, r3
 800d524:	4770      	bx	lr

0800d526 <_raise_r>:
 800d526:	291f      	cmp	r1, #31
 800d528:	b538      	push	{r3, r4, r5, lr}
 800d52a:	4604      	mov	r4, r0
 800d52c:	460d      	mov	r5, r1
 800d52e:	d904      	bls.n	800d53a <_raise_r+0x14>
 800d530:	2316      	movs	r3, #22
 800d532:	6003      	str	r3, [r0, #0]
 800d534:	f04f 30ff 	mov.w	r0, #4294967295
 800d538:	bd38      	pop	{r3, r4, r5, pc}
 800d53a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d53c:	b112      	cbz	r2, 800d544 <_raise_r+0x1e>
 800d53e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d542:	b94b      	cbnz	r3, 800d558 <_raise_r+0x32>
 800d544:	4620      	mov	r0, r4
 800d546:	f000 f831 	bl	800d5ac <_getpid_r>
 800d54a:	462a      	mov	r2, r5
 800d54c:	4601      	mov	r1, r0
 800d54e:	4620      	mov	r0, r4
 800d550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d554:	f000 b818 	b.w	800d588 <_kill_r>
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d00a      	beq.n	800d572 <_raise_r+0x4c>
 800d55c:	1c59      	adds	r1, r3, #1
 800d55e:	d103      	bne.n	800d568 <_raise_r+0x42>
 800d560:	2316      	movs	r3, #22
 800d562:	6003      	str	r3, [r0, #0]
 800d564:	2001      	movs	r0, #1
 800d566:	e7e7      	b.n	800d538 <_raise_r+0x12>
 800d568:	2400      	movs	r4, #0
 800d56a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d56e:	4628      	mov	r0, r5
 800d570:	4798      	blx	r3
 800d572:	2000      	movs	r0, #0
 800d574:	e7e0      	b.n	800d538 <_raise_r+0x12>
	...

0800d578 <raise>:
 800d578:	4b02      	ldr	r3, [pc, #8]	; (800d584 <raise+0xc>)
 800d57a:	4601      	mov	r1, r0
 800d57c:	6818      	ldr	r0, [r3, #0]
 800d57e:	f7ff bfd2 	b.w	800d526 <_raise_r>
 800d582:	bf00      	nop
 800d584:	20000010 	.word	0x20000010

0800d588 <_kill_r>:
 800d588:	b538      	push	{r3, r4, r5, lr}
 800d58a:	4d07      	ldr	r5, [pc, #28]	; (800d5a8 <_kill_r+0x20>)
 800d58c:	2300      	movs	r3, #0
 800d58e:	4604      	mov	r4, r0
 800d590:	4608      	mov	r0, r1
 800d592:	4611      	mov	r1, r2
 800d594:	602b      	str	r3, [r5, #0]
 800d596:	f7f5 ffe7 	bl	8003568 <_kill>
 800d59a:	1c43      	adds	r3, r0, #1
 800d59c:	d102      	bne.n	800d5a4 <_kill_r+0x1c>
 800d59e:	682b      	ldr	r3, [r5, #0]
 800d5a0:	b103      	cbz	r3, 800d5a4 <_kill_r+0x1c>
 800d5a2:	6023      	str	r3, [r4, #0]
 800d5a4:	bd38      	pop	{r3, r4, r5, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20000d20 	.word	0x20000d20

0800d5ac <_getpid_r>:
 800d5ac:	f7f5 bfd4 	b.w	8003558 <_getpid>

0800d5b0 <_init>:
 800d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b2:	bf00      	nop
 800d5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5b6:	bc08      	pop	{r3}
 800d5b8:	469e      	mov	lr, r3
 800d5ba:	4770      	bx	lr

0800d5bc <_fini>:
 800d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5be:	bf00      	nop
 800d5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c2:	bc08      	pop	{r3}
 800d5c4:	469e      	mov	lr, r3
 800d5c6:	4770      	bx	lr
